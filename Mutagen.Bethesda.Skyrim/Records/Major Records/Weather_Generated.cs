/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Drawing;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Weather :
        SkyrimMajorRecord,
        IWeatherInternal,
        ILoquiObjectSetter<Weather>,
        IEquatable<Weather>,
        IEqualsMask
    {
        #region Ctor
        protected Weather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CloudTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String[] _CloudTextures = new String[29];
        public String[] CloudTextures
        {
            get => this._CloudTextures;
            protected set => this._CloudTextures = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<String?> IWeatherGetter.CloudTextures => _CloudTextures;
        #endregion

        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.DNAM => this.DNAM;
        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.CNAM => this.CNAM;
        #endregion
        #region ANAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ANAM;
        public MemorySlice<Byte>? ANAM
        {
            get => this._ANAM;
            set => this._ANAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.ANAM => this.ANAM;
        #endregion
        #region BNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BNAM;
        public MemorySlice<Byte>? BNAM
        {
            get => this._BNAM;
            set => this._BNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.BNAM => this.BNAM;
        #endregion
        #region LNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _LNAM;
        public MemorySlice<Byte>? LNAM
        {
            get => this._LNAM;
            set => this._LNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.LNAM => this.LNAM;
        #endregion
        #region Precipitation
        public FormLinkNullable<ShaderParticleGeometry> Precipitation { get; set; } = new FormLinkNullable<ShaderParticleGeometry>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IShaderParticleGeometryGetter> IWeatherGetter.Precipitation => this.Precipitation;
        #endregion
        #region VisualEffect
        public FormLink<VisualEffect> VisualEffect { get; set; } = new FormLink<VisualEffect>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IVisualEffectGetter> IWeatherGetter.VisualEffect => this.VisualEffect;
        #endregion
        #region ONAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ONAM;
        public MemorySlice<Byte>? ONAM
        {
            get => this._ONAM;
            set => this._ONAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.ONAM => this.ONAM;
        #endregion
        #region Clouds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CloudLayer[] _Clouds = ArrayExt.Create(32, (i) => new CloudLayer());
        public CloudLayer[] Clouds
        {
            get => this._Clouds;
            protected set => this._Clouds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ICloudLayerGetter> IWeatherGetter.Clouds => _Clouds;
        #endregion

        #endregion
        #region SkyUpperColor
        public WeatherColor SkyUpperColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SkyUpperColor => SkyUpperColor;
        #endregion
        #region FogNearColor
        public WeatherColor FogNearColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.FogNearColor => FogNearColor;
        #endregion
        #region UnknownColor
        public WeatherColor UnknownColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.UnknownColor => UnknownColor;
        #endregion
        #region AmbientColor
        public WeatherColor AmbientColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.AmbientColor => AmbientColor;
        #endregion
        #region SunlightColor
        public WeatherColor SunlightColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SunlightColor => SunlightColor;
        #endregion
        #region SunColor
        public WeatherColor SunColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SunColor => SunColor;
        #endregion
        #region StarsColor
        public WeatherColor StarsColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.StarsColor => StarsColor;
        #endregion
        #region SkyLowerColor
        public WeatherColor SkyLowerColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SkyLowerColor => SkyLowerColor;
        #endregion
        #region HorizonColor
        public WeatherColor HorizonColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.HorizonColor => HorizonColor;
        #endregion
        #region EffectLightingColor
        public WeatherColor EffectLightingColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.EffectLightingColor => EffectLightingColor;
        #endregion
        #region CloudLodDiffuseColor
        public WeatherColor CloudLodDiffuseColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.CloudLodDiffuseColor => CloudLodDiffuseColor;
        #endregion
        #region CloudLodAmbientColor
        public WeatherColor CloudLodAmbientColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.CloudLodAmbientColor => CloudLodAmbientColor;
        #endregion
        #region FogFarColor
        public WeatherColor FogFarColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.FogFarColor => FogFarColor;
        #endregion
        #region SkyStaticsColor
        public WeatherColor SkyStaticsColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SkyStaticsColor => SkyStaticsColor;
        #endregion
        #region WaterMultiplierColor
        public WeatherColor WaterMultiplierColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.WaterMultiplierColor => WaterMultiplierColor;
        #endregion
        #region SunGlareColor
        public WeatherColor SunGlareColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SunGlareColor => SunGlareColor;
        #endregion
        #region MoonGlareColor
        public WeatherColor MoonGlareColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.MoonGlareColor => MoonGlareColor;
        #endregion
        #region FogDistanceDayNear
        public Single FogDistanceDayNear { get; set; } = default;
        #endregion
        #region FogDistanceDayFar
        public Single FogDistanceDayFar { get; set; } = default;
        #endregion
        #region FogDistanceNightNear
        public Single FogDistanceNightNear { get; set; } = default;
        #endregion
        #region FogDistanceNightFar
        public Single FogDistanceNightFar { get; set; } = default;
        #endregion
        #region FogDistanceDayPower
        public Single FogDistanceDayPower { get; set; } = default;
        #endregion
        #region FogDistanceNightPower
        public Single FogDistanceNightPower { get; set; } = default;
        #endregion
        #region FogDistanceDayMax
        public Single FogDistanceDayMax { get; set; } = default;
        #endregion
        #region FogDistanceNightMax
        public Single FogDistanceNightMax { get; set; } = default;
        #endregion
        #region WindSpeed
        public Percent WindSpeed { get; set; } = default;
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default;
        #endregion
        #region TransDelta
        public Single TransDelta { get; set; } = default;
        public static RangeFloat TransDelta_Range = new RangeFloat(0, 1020f);
        #endregion
        #region SunGlare
        public Percent SunGlare { get; set; } = default;
        #endregion
        #region SunDamage
        public Percent SunDamage { get; set; } = default;
        #endregion
        #region PrecipitationBeginFadeIn
        public Percent PrecipitationBeginFadeIn { get; set; } = default;
        #endregion
        #region PrecipitationEndFadeOut
        public Percent PrecipitationEndFadeOut { get; set; } = default;
        #endregion
        #region ThunderLightningBeginFadeIn
        public Percent ThunderLightningBeginFadeIn { get; set; } = default;
        #endregion
        #region ThunderLightningEndFadeOut
        public Percent ThunderLightningEndFadeOut { get; set; } = default;
        #endregion
        #region ThunderLightningFrequency
        public Percent ThunderLightningFrequency { get; set; } = default;
        #endregion
        #region Flags
        public Weather.Flag Flags { get; set; } = default;
        #endregion
        #region LightningColor
        public Color LightningColor { get; set; } = default;
        #endregion
        #region VisualEffectBegin
        public Percent VisualEffectBegin { get; set; } = default;
        #endregion
        #region VisualEffectEnd
        public Percent VisualEffectEnd { get; set; } = default;
        #endregion
        #region WindDirection
        public Single WindDirection { get; set; } = default;
        public static RangeFloat WindDirection_Range = new RangeFloat(0, 0.7083333333333334f);
        #endregion
        #region WindDirectionRange
        public Single WindDirectionRange { get; set; } = default;
        public static RangeFloat WindDirectionRange_Range = new RangeFloat(0, 1.4166666666666667f);
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<WeatherSound> _Sounds = new ExtendedList<WeatherSound>();
        public IExtendedList<WeatherSound> Sounds
        {
            get => this._Sounds;
            protected set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherSoundGetter> IWeatherGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region SkyStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IExtendedList<IFormLink<Static>> _SkyStatics = new ExtendedList<IFormLink<Static>>();
        public IExtendedList<IFormLink<Static>> SkyStatics
        {
            get => this._SkyStatics;
            protected set => this._SkyStatics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IStaticGetter>> IWeatherGetter.SkyStatics => _SkyStatics;
        #endregion

        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherImageSpaces? _ImageSpaces;
        public WeatherImageSpaces? ImageSpaces
        {
            get => _ImageSpaces;
            set => _ImageSpaces = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherImageSpacesGetter? IWeatherGetter.ImageSpaces => this.ImageSpaces;
        #endregion
        #region DirectionalAmbientLightingColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherAmbientColorSet? _DirectionalAmbientLightingColors;
        public WeatherAmbientColorSet? DirectionalAmbientLightingColors
        {
            get => _DirectionalAmbientLightingColors;
            set => _DirectionalAmbientLightingColors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherAmbientColorSetGetter? IWeatherGetter.DirectionalAmbientLightingColors => this.DirectionalAmbientLightingColors;
        #endregion
        #region NAM2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM2;
        public MemorySlice<Byte>? NAM2
        {
            get => this._NAM2;
            set => this._NAM2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.NAM2 => this.NAM2;
        #endregion
        #region NAM3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM3;
        public MemorySlice<Byte>? NAM3
        {
            get => this._NAM3;
            set => this._NAM3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.NAM3 => this.NAM3;
        #endregion
        #region Aurora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Aurora;
        public Model? Aurora
        {
            get => _Aurora;
            set => _Aurora = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeatherGetter.Aurora => this.Aurora;
        #endregion
        #region NAM0DataTypeState
        public Weather.NAM0DataType NAM0DataTypeState { get; set; } = default;
        #endregion
        #region FNAMDataTypeState
        public Weather.FNAMDataType FNAMDataTypeState { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public Weather.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeatherGetter rhs)) return false;
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Weather? obj)
        {
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeatherXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Weather CreateFromXml(
            XElement node,
            Weather.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Weather CreateFromXml(
            XElement node,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Weather CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Weather CreateFromXml(
            string path,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            string path,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Weather CreateFromXml(
            Stream stream,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            Stream stream,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Weather CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.CloudTextures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DNAM = initialValue;
                this.CNAM = initialValue;
                this.ANAM = initialValue;
                this.BNAM = initialValue;
                this.LNAM = initialValue;
                this.Precipitation = initialValue;
                this.VisualEffect = initialValue;
                this.ONAM = initialValue;
                this.Clouds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>());
                this.SkyUpperColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.FogNearColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.UnknownColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.AmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SunlightColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SunColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.StarsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SkyLowerColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.HorizonColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.EffectLightingColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.CloudLodDiffuseColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.CloudLodAmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.FogFarColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SkyStaticsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.WaterMultiplierColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SunGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.MoonGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.FogDistanceDayNear = initialValue;
                this.FogDistanceDayFar = initialValue;
                this.FogDistanceNightNear = initialValue;
                this.FogDistanceNightFar = initialValue;
                this.FogDistanceDayPower = initialValue;
                this.FogDistanceNightPower = initialValue;
                this.FogDistanceDayMax = initialValue;
                this.FogDistanceNightMax = initialValue;
                this.WindSpeed = initialValue;
                this.Unknown = initialValue;
                this.TransDelta = initialValue;
                this.SunGlare = initialValue;
                this.SunDamage = initialValue;
                this.PrecipitationBeginFadeIn = initialValue;
                this.PrecipitationEndFadeOut = initialValue;
                this.ThunderLightningBeginFadeIn = initialValue;
                this.ThunderLightningEndFadeOut = initialValue;
                this.ThunderLightningFrequency = initialValue;
                this.Flags = initialValue;
                this.LightningColor = initialValue;
                this.VisualEffectBegin = initialValue;
                this.VisualEffectEnd = initialValue;
                this.WindDirection = initialValue;
                this.WindDirectionRange = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>());
                this.SkyStatics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ImageSpaces = new MaskItem<TItem, WeatherImageSpaces.Mask<TItem>?>(initialValue, new WeatherImageSpaces.Mask<TItem>(initialValue));
                this.DirectionalAmbientLightingColors = new MaskItem<TItem, WeatherAmbientColorSet.Mask<TItem>?>(initialValue, new WeatherAmbientColorSet.Mask<TItem>(initialValue));
                this.NAM2 = initialValue;
                this.NAM3 = initialValue;
                this.Aurora = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.NAM0DataTypeState = initialValue;
                this.FNAMDataTypeState = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem CloudTextures,
                TItem DNAM,
                TItem CNAM,
                TItem ANAM,
                TItem BNAM,
                TItem LNAM,
                TItem Precipitation,
                TItem VisualEffect,
                TItem ONAM,
                TItem Clouds,
                TItem SkyUpperColor,
                TItem FogNearColor,
                TItem UnknownColor,
                TItem AmbientColor,
                TItem SunlightColor,
                TItem SunColor,
                TItem StarsColor,
                TItem SkyLowerColor,
                TItem HorizonColor,
                TItem EffectLightingColor,
                TItem CloudLodDiffuseColor,
                TItem CloudLodAmbientColor,
                TItem FogFarColor,
                TItem SkyStaticsColor,
                TItem WaterMultiplierColor,
                TItem SunGlareColor,
                TItem MoonGlareColor,
                TItem FogDistanceDayNear,
                TItem FogDistanceDayFar,
                TItem FogDistanceNightNear,
                TItem FogDistanceNightFar,
                TItem FogDistanceDayPower,
                TItem FogDistanceNightPower,
                TItem FogDistanceDayMax,
                TItem FogDistanceNightMax,
                TItem WindSpeed,
                TItem Unknown,
                TItem TransDelta,
                TItem SunGlare,
                TItem SunDamage,
                TItem PrecipitationBeginFadeIn,
                TItem PrecipitationEndFadeOut,
                TItem ThunderLightningBeginFadeIn,
                TItem ThunderLightningEndFadeOut,
                TItem ThunderLightningFrequency,
                TItem Flags,
                TItem LightningColor,
                TItem VisualEffectBegin,
                TItem VisualEffectEnd,
                TItem WindDirection,
                TItem WindDirectionRange,
                TItem Sounds,
                TItem SkyStatics,
                TItem ImageSpaces,
                TItem DirectionalAmbientLightingColors,
                TItem NAM2,
                TItem NAM3,
                TItem Aurora,
                TItem NAM0DataTypeState,
                TItem FNAMDataTypeState,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2)
            {
                this.CloudTextures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CloudTextures, Enumerable.Empty<(int Index, TItem Value)>());
                this.DNAM = DNAM;
                this.CNAM = CNAM;
                this.ANAM = ANAM;
                this.BNAM = BNAM;
                this.LNAM = LNAM;
                this.Precipitation = Precipitation;
                this.VisualEffect = VisualEffect;
                this.ONAM = ONAM;
                this.Clouds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>?>(Clouds, Enumerable.Empty<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>());
                this.SkyUpperColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SkyUpperColor, new WeatherColor.Mask<TItem>(SkyUpperColor));
                this.FogNearColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(FogNearColor, new WeatherColor.Mask<TItem>(FogNearColor));
                this.UnknownColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(UnknownColor, new WeatherColor.Mask<TItem>(UnknownColor));
                this.AmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(AmbientColor, new WeatherColor.Mask<TItem>(AmbientColor));
                this.SunlightColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SunlightColor, new WeatherColor.Mask<TItem>(SunlightColor));
                this.SunColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SunColor, new WeatherColor.Mask<TItem>(SunColor));
                this.StarsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(StarsColor, new WeatherColor.Mask<TItem>(StarsColor));
                this.SkyLowerColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SkyLowerColor, new WeatherColor.Mask<TItem>(SkyLowerColor));
                this.HorizonColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(HorizonColor, new WeatherColor.Mask<TItem>(HorizonColor));
                this.EffectLightingColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(EffectLightingColor, new WeatherColor.Mask<TItem>(EffectLightingColor));
                this.CloudLodDiffuseColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(CloudLodDiffuseColor, new WeatherColor.Mask<TItem>(CloudLodDiffuseColor));
                this.CloudLodAmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(CloudLodAmbientColor, new WeatherColor.Mask<TItem>(CloudLodAmbientColor));
                this.FogFarColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(FogFarColor, new WeatherColor.Mask<TItem>(FogFarColor));
                this.SkyStaticsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SkyStaticsColor, new WeatherColor.Mask<TItem>(SkyStaticsColor));
                this.WaterMultiplierColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(WaterMultiplierColor, new WeatherColor.Mask<TItem>(WaterMultiplierColor));
                this.SunGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SunGlareColor, new WeatherColor.Mask<TItem>(SunGlareColor));
                this.MoonGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(MoonGlareColor, new WeatherColor.Mask<TItem>(MoonGlareColor));
                this.FogDistanceDayNear = FogDistanceDayNear;
                this.FogDistanceDayFar = FogDistanceDayFar;
                this.FogDistanceNightNear = FogDistanceNightNear;
                this.FogDistanceNightFar = FogDistanceNightFar;
                this.FogDistanceDayPower = FogDistanceDayPower;
                this.FogDistanceNightPower = FogDistanceNightPower;
                this.FogDistanceDayMax = FogDistanceDayMax;
                this.FogDistanceNightMax = FogDistanceNightMax;
                this.WindSpeed = WindSpeed;
                this.Unknown = Unknown;
                this.TransDelta = TransDelta;
                this.SunGlare = SunGlare;
                this.SunDamage = SunDamage;
                this.PrecipitationBeginFadeIn = PrecipitationBeginFadeIn;
                this.PrecipitationEndFadeOut = PrecipitationEndFadeOut;
                this.ThunderLightningBeginFadeIn = ThunderLightningBeginFadeIn;
                this.ThunderLightningEndFadeOut = ThunderLightningEndFadeOut;
                this.ThunderLightningFrequency = ThunderLightningFrequency;
                this.Flags = Flags;
                this.LightningColor = LightningColor;
                this.VisualEffectBegin = VisualEffectBegin;
                this.VisualEffectEnd = VisualEffectEnd;
                this.WindDirection = WindDirection;
                this.WindDirectionRange = WindDirectionRange;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>());
                this.SkyStatics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SkyStatics, Enumerable.Empty<(int Index, TItem Value)>());
                this.ImageSpaces = new MaskItem<TItem, WeatherImageSpaces.Mask<TItem>?>(ImageSpaces, new WeatherImageSpaces.Mask<TItem>(ImageSpaces));
                this.DirectionalAmbientLightingColors = new MaskItem<TItem, WeatherAmbientColorSet.Mask<TItem>?>(DirectionalAmbientLightingColors, new WeatherAmbientColorSet.Mask<TItem>(DirectionalAmbientLightingColors));
                this.NAM2 = NAM2;
                this.NAM3 = NAM3;
                this.Aurora = new MaskItem<TItem, Model.Mask<TItem>?>(Aurora, new Model.Mask<TItem>(Aurora));
                this.NAM0DataTypeState = NAM0DataTypeState;
                this.FNAMDataTypeState = FNAMDataTypeState;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CloudTextures;
            public TItem DNAM;
            public TItem CNAM;
            public TItem ANAM;
            public TItem BNAM;
            public TItem LNAM;
            public TItem Precipitation;
            public TItem VisualEffect;
            public TItem ONAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>?>? Clouds;
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SkyUpperColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? FogNearColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? UnknownColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? AmbientColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SunlightColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SunColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? StarsColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SkyLowerColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? HorizonColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? EffectLightingColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? CloudLodDiffuseColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? CloudLodAmbientColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? FogFarColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SkyStaticsColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? WaterMultiplierColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SunGlareColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? MoonGlareColor { get; set; }
            public TItem FogDistanceDayNear;
            public TItem FogDistanceDayFar;
            public TItem FogDistanceNightNear;
            public TItem FogDistanceNightFar;
            public TItem FogDistanceDayPower;
            public TItem FogDistanceNightPower;
            public TItem FogDistanceDayMax;
            public TItem FogDistanceNightMax;
            public TItem WindSpeed;
            public TItem Unknown;
            public TItem TransDelta;
            public TItem SunGlare;
            public TItem SunDamage;
            public TItem PrecipitationBeginFadeIn;
            public TItem PrecipitationEndFadeOut;
            public TItem ThunderLightningBeginFadeIn;
            public TItem ThunderLightningEndFadeOut;
            public TItem ThunderLightningFrequency;
            public TItem Flags;
            public TItem LightningColor;
            public TItem VisualEffectBegin;
            public TItem VisualEffectEnd;
            public TItem WindDirection;
            public TItem WindDirectionRange;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>? Sounds;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SkyStatics;
            public MaskItem<TItem, WeatherImageSpaces.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, WeatherAmbientColorSet.Mask<TItem>?>? DirectionalAmbientLightingColors { get; set; }
            public TItem NAM2;
            public TItem NAM3;
            public MaskItem<TItem, Model.Mask<TItem>?>? Aurora { get; set; }
            public TItem NAM0DataTypeState;
            public TItem FNAMDataTypeState;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.CloudTextures, rhs.CloudTextures)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.LNAM, rhs.LNAM)) return false;
                if (!object.Equals(this.Precipitation, rhs.Precipitation)) return false;
                if (!object.Equals(this.VisualEffect, rhs.VisualEffect)) return false;
                if (!object.Equals(this.ONAM, rhs.ONAM)) return false;
                if (!object.Equals(this.Clouds, rhs.Clouds)) return false;
                if (!object.Equals(this.SkyUpperColor, rhs.SkyUpperColor)) return false;
                if (!object.Equals(this.FogNearColor, rhs.FogNearColor)) return false;
                if (!object.Equals(this.UnknownColor, rhs.UnknownColor)) return false;
                if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
                if (!object.Equals(this.SunlightColor, rhs.SunlightColor)) return false;
                if (!object.Equals(this.SunColor, rhs.SunColor)) return false;
                if (!object.Equals(this.StarsColor, rhs.StarsColor)) return false;
                if (!object.Equals(this.SkyLowerColor, rhs.SkyLowerColor)) return false;
                if (!object.Equals(this.HorizonColor, rhs.HorizonColor)) return false;
                if (!object.Equals(this.EffectLightingColor, rhs.EffectLightingColor)) return false;
                if (!object.Equals(this.CloudLodDiffuseColor, rhs.CloudLodDiffuseColor)) return false;
                if (!object.Equals(this.CloudLodAmbientColor, rhs.CloudLodAmbientColor)) return false;
                if (!object.Equals(this.FogFarColor, rhs.FogFarColor)) return false;
                if (!object.Equals(this.SkyStaticsColor, rhs.SkyStaticsColor)) return false;
                if (!object.Equals(this.WaterMultiplierColor, rhs.WaterMultiplierColor)) return false;
                if (!object.Equals(this.SunGlareColor, rhs.SunGlareColor)) return false;
                if (!object.Equals(this.MoonGlareColor, rhs.MoonGlareColor)) return false;
                if (!object.Equals(this.FogDistanceDayNear, rhs.FogDistanceDayNear)) return false;
                if (!object.Equals(this.FogDistanceDayFar, rhs.FogDistanceDayFar)) return false;
                if (!object.Equals(this.FogDistanceNightNear, rhs.FogDistanceNightNear)) return false;
                if (!object.Equals(this.FogDistanceNightFar, rhs.FogDistanceNightFar)) return false;
                if (!object.Equals(this.FogDistanceDayPower, rhs.FogDistanceDayPower)) return false;
                if (!object.Equals(this.FogDistanceNightPower, rhs.FogDistanceNightPower)) return false;
                if (!object.Equals(this.FogDistanceDayMax, rhs.FogDistanceDayMax)) return false;
                if (!object.Equals(this.FogDistanceNightMax, rhs.FogDistanceNightMax)) return false;
                if (!object.Equals(this.WindSpeed, rhs.WindSpeed)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.TransDelta, rhs.TransDelta)) return false;
                if (!object.Equals(this.SunGlare, rhs.SunGlare)) return false;
                if (!object.Equals(this.SunDamage, rhs.SunDamage)) return false;
                if (!object.Equals(this.PrecipitationBeginFadeIn, rhs.PrecipitationBeginFadeIn)) return false;
                if (!object.Equals(this.PrecipitationEndFadeOut, rhs.PrecipitationEndFadeOut)) return false;
                if (!object.Equals(this.ThunderLightningBeginFadeIn, rhs.ThunderLightningBeginFadeIn)) return false;
                if (!object.Equals(this.ThunderLightningEndFadeOut, rhs.ThunderLightningEndFadeOut)) return false;
                if (!object.Equals(this.ThunderLightningFrequency, rhs.ThunderLightningFrequency)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.LightningColor, rhs.LightningColor)) return false;
                if (!object.Equals(this.VisualEffectBegin, rhs.VisualEffectBegin)) return false;
                if (!object.Equals(this.VisualEffectEnd, rhs.VisualEffectEnd)) return false;
                if (!object.Equals(this.WindDirection, rhs.WindDirection)) return false;
                if (!object.Equals(this.WindDirectionRange, rhs.WindDirectionRange)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.SkyStatics, rhs.SkyStatics)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.DirectionalAmbientLightingColors, rhs.DirectionalAmbientLightingColors)) return false;
                if (!object.Equals(this.NAM2, rhs.NAM2)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.Aurora, rhs.Aurora)) return false;
                if (!object.Equals(this.NAM0DataTypeState, rhs.NAM0DataTypeState)) return false;
                if (!object.Equals(this.FNAMDataTypeState, rhs.FNAMDataTypeState)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CloudTextures);
                hash.Add(this.DNAM);
                hash.Add(this.CNAM);
                hash.Add(this.ANAM);
                hash.Add(this.BNAM);
                hash.Add(this.LNAM);
                hash.Add(this.Precipitation);
                hash.Add(this.VisualEffect);
                hash.Add(this.ONAM);
                hash.Add(this.Clouds);
                hash.Add(this.SkyUpperColor);
                hash.Add(this.FogNearColor);
                hash.Add(this.UnknownColor);
                hash.Add(this.AmbientColor);
                hash.Add(this.SunlightColor);
                hash.Add(this.SunColor);
                hash.Add(this.StarsColor);
                hash.Add(this.SkyLowerColor);
                hash.Add(this.HorizonColor);
                hash.Add(this.EffectLightingColor);
                hash.Add(this.CloudLodDiffuseColor);
                hash.Add(this.CloudLodAmbientColor);
                hash.Add(this.FogFarColor);
                hash.Add(this.SkyStaticsColor);
                hash.Add(this.WaterMultiplierColor);
                hash.Add(this.SunGlareColor);
                hash.Add(this.MoonGlareColor);
                hash.Add(this.FogDistanceDayNear);
                hash.Add(this.FogDistanceDayFar);
                hash.Add(this.FogDistanceNightNear);
                hash.Add(this.FogDistanceNightFar);
                hash.Add(this.FogDistanceDayPower);
                hash.Add(this.FogDistanceNightPower);
                hash.Add(this.FogDistanceDayMax);
                hash.Add(this.FogDistanceNightMax);
                hash.Add(this.WindSpeed);
                hash.Add(this.Unknown);
                hash.Add(this.TransDelta);
                hash.Add(this.SunGlare);
                hash.Add(this.SunDamage);
                hash.Add(this.PrecipitationBeginFadeIn);
                hash.Add(this.PrecipitationEndFadeOut);
                hash.Add(this.ThunderLightningBeginFadeIn);
                hash.Add(this.ThunderLightningEndFadeOut);
                hash.Add(this.ThunderLightningFrequency);
                hash.Add(this.Flags);
                hash.Add(this.LightningColor);
                hash.Add(this.VisualEffectBegin);
                hash.Add(this.VisualEffectEnd);
                hash.Add(this.WindDirection);
                hash.Add(this.WindDirectionRange);
                hash.Add(this.Sounds);
                hash.Add(this.SkyStatics);
                hash.Add(this.ImageSpaces);
                hash.Add(this.DirectionalAmbientLightingColors);
                hash.Add(this.NAM2);
                hash.Add(this.NAM3);
                hash.Add(this.Aurora);
                hash.Add(this.NAM0DataTypeState);
                hash.Add(this.FNAMDataTypeState);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.CloudTextures != null)
                {
                    if (!eval(this.CloudTextures.Overall)) return false;
                    if (this.CloudTextures.Specific != null)
                    {
                        foreach (var item in this.CloudTextures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DNAM)) return false;
                if (!eval(this.CNAM)) return false;
                if (!eval(this.ANAM)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.LNAM)) return false;
                if (!eval(this.Precipitation)) return false;
                if (!eval(this.VisualEffect)) return false;
                if (!eval(this.ONAM)) return false;
                if (this.Clouds != null)
                {
                    if (!eval(this.Clouds.Overall)) return false;
                    if (this.Clouds.Specific != null)
                    {
                        foreach (var item in this.Clouds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (SkyUpperColor != null)
                {
                    if (!eval(this.SkyUpperColor.Overall)) return false;
                    if (this.SkyUpperColor.Specific != null && !this.SkyUpperColor.Specific.All(eval)) return false;
                }
                if (FogNearColor != null)
                {
                    if (!eval(this.FogNearColor.Overall)) return false;
                    if (this.FogNearColor.Specific != null && !this.FogNearColor.Specific.All(eval)) return false;
                }
                if (UnknownColor != null)
                {
                    if (!eval(this.UnknownColor.Overall)) return false;
                    if (this.UnknownColor.Specific != null && !this.UnknownColor.Specific.All(eval)) return false;
                }
                if (AmbientColor != null)
                {
                    if (!eval(this.AmbientColor.Overall)) return false;
                    if (this.AmbientColor.Specific != null && !this.AmbientColor.Specific.All(eval)) return false;
                }
                if (SunlightColor != null)
                {
                    if (!eval(this.SunlightColor.Overall)) return false;
                    if (this.SunlightColor.Specific != null && !this.SunlightColor.Specific.All(eval)) return false;
                }
                if (SunColor != null)
                {
                    if (!eval(this.SunColor.Overall)) return false;
                    if (this.SunColor.Specific != null && !this.SunColor.Specific.All(eval)) return false;
                }
                if (StarsColor != null)
                {
                    if (!eval(this.StarsColor.Overall)) return false;
                    if (this.StarsColor.Specific != null && !this.StarsColor.Specific.All(eval)) return false;
                }
                if (SkyLowerColor != null)
                {
                    if (!eval(this.SkyLowerColor.Overall)) return false;
                    if (this.SkyLowerColor.Specific != null && !this.SkyLowerColor.Specific.All(eval)) return false;
                }
                if (HorizonColor != null)
                {
                    if (!eval(this.HorizonColor.Overall)) return false;
                    if (this.HorizonColor.Specific != null && !this.HorizonColor.Specific.All(eval)) return false;
                }
                if (EffectLightingColor != null)
                {
                    if (!eval(this.EffectLightingColor.Overall)) return false;
                    if (this.EffectLightingColor.Specific != null && !this.EffectLightingColor.Specific.All(eval)) return false;
                }
                if (CloudLodDiffuseColor != null)
                {
                    if (!eval(this.CloudLodDiffuseColor.Overall)) return false;
                    if (this.CloudLodDiffuseColor.Specific != null && !this.CloudLodDiffuseColor.Specific.All(eval)) return false;
                }
                if (CloudLodAmbientColor != null)
                {
                    if (!eval(this.CloudLodAmbientColor.Overall)) return false;
                    if (this.CloudLodAmbientColor.Specific != null && !this.CloudLodAmbientColor.Specific.All(eval)) return false;
                }
                if (FogFarColor != null)
                {
                    if (!eval(this.FogFarColor.Overall)) return false;
                    if (this.FogFarColor.Specific != null && !this.FogFarColor.Specific.All(eval)) return false;
                }
                if (SkyStaticsColor != null)
                {
                    if (!eval(this.SkyStaticsColor.Overall)) return false;
                    if (this.SkyStaticsColor.Specific != null && !this.SkyStaticsColor.Specific.All(eval)) return false;
                }
                if (WaterMultiplierColor != null)
                {
                    if (!eval(this.WaterMultiplierColor.Overall)) return false;
                    if (this.WaterMultiplierColor.Specific != null && !this.WaterMultiplierColor.Specific.All(eval)) return false;
                }
                if (SunGlareColor != null)
                {
                    if (!eval(this.SunGlareColor.Overall)) return false;
                    if (this.SunGlareColor.Specific != null && !this.SunGlareColor.Specific.All(eval)) return false;
                }
                if (MoonGlareColor != null)
                {
                    if (!eval(this.MoonGlareColor.Overall)) return false;
                    if (this.MoonGlareColor.Specific != null && !this.MoonGlareColor.Specific.All(eval)) return false;
                }
                if (!eval(this.FogDistanceDayNear)) return false;
                if (!eval(this.FogDistanceDayFar)) return false;
                if (!eval(this.FogDistanceNightNear)) return false;
                if (!eval(this.FogDistanceNightFar)) return false;
                if (!eval(this.FogDistanceDayPower)) return false;
                if (!eval(this.FogDistanceNightPower)) return false;
                if (!eval(this.FogDistanceDayMax)) return false;
                if (!eval(this.FogDistanceNightMax)) return false;
                if (!eval(this.WindSpeed)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.TransDelta)) return false;
                if (!eval(this.SunGlare)) return false;
                if (!eval(this.SunDamage)) return false;
                if (!eval(this.PrecipitationBeginFadeIn)) return false;
                if (!eval(this.PrecipitationEndFadeOut)) return false;
                if (!eval(this.ThunderLightningBeginFadeIn)) return false;
                if (!eval(this.ThunderLightningEndFadeOut)) return false;
                if (!eval(this.ThunderLightningFrequency)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.LightningColor)) return false;
                if (!eval(this.VisualEffectBegin)) return false;
                if (!eval(this.VisualEffectEnd)) return false;
                if (!eval(this.WindDirection)) return false;
                if (!eval(this.WindDirectionRange)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.SkyStatics != null)
                {
                    if (!eval(this.SkyStatics.Overall)) return false;
                    if (this.SkyStatics.Specific != null)
                    {
                        foreach (var item in this.SkyStatics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (DirectionalAmbientLightingColors != null)
                {
                    if (!eval(this.DirectionalAmbientLightingColors.Overall)) return false;
                    if (this.DirectionalAmbientLightingColors.Specific != null && !this.DirectionalAmbientLightingColors.Specific.All(eval)) return false;
                }
                if (!eval(this.NAM2)) return false;
                if (!eval(this.NAM3)) return false;
                if (Aurora != null)
                {
                    if (!eval(this.Aurora.Overall)) return false;
                    if (this.Aurora.Specific != null && !this.Aurora.Specific.All(eval)) return false;
                }
                if (!eval(this.NAM0DataTypeState)) return false;
                if (!eval(this.FNAMDataTypeState)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.CloudTextures != null)
                {
                    if (eval(this.CloudTextures.Overall)) return true;
                    if (this.CloudTextures.Specific != null)
                    {
                        foreach (var item in this.CloudTextures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DNAM)) return true;
                if (eval(this.CNAM)) return true;
                if (eval(this.ANAM)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.LNAM)) return true;
                if (eval(this.Precipitation)) return true;
                if (eval(this.VisualEffect)) return true;
                if (eval(this.ONAM)) return true;
                if (this.Clouds != null)
                {
                    if (eval(this.Clouds.Overall)) return true;
                    if (this.Clouds.Specific != null)
                    {
                        foreach (var item in this.Clouds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (SkyUpperColor != null)
                {
                    if (eval(this.SkyUpperColor.Overall)) return true;
                    if (this.SkyUpperColor.Specific != null && this.SkyUpperColor.Specific.Any(eval)) return true;
                }
                if (FogNearColor != null)
                {
                    if (eval(this.FogNearColor.Overall)) return true;
                    if (this.FogNearColor.Specific != null && this.FogNearColor.Specific.Any(eval)) return true;
                }
                if (UnknownColor != null)
                {
                    if (eval(this.UnknownColor.Overall)) return true;
                    if (this.UnknownColor.Specific != null && this.UnknownColor.Specific.Any(eval)) return true;
                }
                if (AmbientColor != null)
                {
                    if (eval(this.AmbientColor.Overall)) return true;
                    if (this.AmbientColor.Specific != null && this.AmbientColor.Specific.Any(eval)) return true;
                }
                if (SunlightColor != null)
                {
                    if (eval(this.SunlightColor.Overall)) return true;
                    if (this.SunlightColor.Specific != null && this.SunlightColor.Specific.Any(eval)) return true;
                }
                if (SunColor != null)
                {
                    if (eval(this.SunColor.Overall)) return true;
                    if (this.SunColor.Specific != null && this.SunColor.Specific.Any(eval)) return true;
                }
                if (StarsColor != null)
                {
                    if (eval(this.StarsColor.Overall)) return true;
                    if (this.StarsColor.Specific != null && this.StarsColor.Specific.Any(eval)) return true;
                }
                if (SkyLowerColor != null)
                {
                    if (eval(this.SkyLowerColor.Overall)) return true;
                    if (this.SkyLowerColor.Specific != null && this.SkyLowerColor.Specific.Any(eval)) return true;
                }
                if (HorizonColor != null)
                {
                    if (eval(this.HorizonColor.Overall)) return true;
                    if (this.HorizonColor.Specific != null && this.HorizonColor.Specific.Any(eval)) return true;
                }
                if (EffectLightingColor != null)
                {
                    if (eval(this.EffectLightingColor.Overall)) return true;
                    if (this.EffectLightingColor.Specific != null && this.EffectLightingColor.Specific.Any(eval)) return true;
                }
                if (CloudLodDiffuseColor != null)
                {
                    if (eval(this.CloudLodDiffuseColor.Overall)) return true;
                    if (this.CloudLodDiffuseColor.Specific != null && this.CloudLodDiffuseColor.Specific.Any(eval)) return true;
                }
                if (CloudLodAmbientColor != null)
                {
                    if (eval(this.CloudLodAmbientColor.Overall)) return true;
                    if (this.CloudLodAmbientColor.Specific != null && this.CloudLodAmbientColor.Specific.Any(eval)) return true;
                }
                if (FogFarColor != null)
                {
                    if (eval(this.FogFarColor.Overall)) return true;
                    if (this.FogFarColor.Specific != null && this.FogFarColor.Specific.Any(eval)) return true;
                }
                if (SkyStaticsColor != null)
                {
                    if (eval(this.SkyStaticsColor.Overall)) return true;
                    if (this.SkyStaticsColor.Specific != null && this.SkyStaticsColor.Specific.Any(eval)) return true;
                }
                if (WaterMultiplierColor != null)
                {
                    if (eval(this.WaterMultiplierColor.Overall)) return true;
                    if (this.WaterMultiplierColor.Specific != null && this.WaterMultiplierColor.Specific.Any(eval)) return true;
                }
                if (SunGlareColor != null)
                {
                    if (eval(this.SunGlareColor.Overall)) return true;
                    if (this.SunGlareColor.Specific != null && this.SunGlareColor.Specific.Any(eval)) return true;
                }
                if (MoonGlareColor != null)
                {
                    if (eval(this.MoonGlareColor.Overall)) return true;
                    if (this.MoonGlareColor.Specific != null && this.MoonGlareColor.Specific.Any(eval)) return true;
                }
                if (eval(this.FogDistanceDayNear)) return true;
                if (eval(this.FogDistanceDayFar)) return true;
                if (eval(this.FogDistanceNightNear)) return true;
                if (eval(this.FogDistanceNightFar)) return true;
                if (eval(this.FogDistanceDayPower)) return true;
                if (eval(this.FogDistanceNightPower)) return true;
                if (eval(this.FogDistanceDayMax)) return true;
                if (eval(this.FogDistanceNightMax)) return true;
                if (eval(this.WindSpeed)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.TransDelta)) return true;
                if (eval(this.SunGlare)) return true;
                if (eval(this.SunDamage)) return true;
                if (eval(this.PrecipitationBeginFadeIn)) return true;
                if (eval(this.PrecipitationEndFadeOut)) return true;
                if (eval(this.ThunderLightningBeginFadeIn)) return true;
                if (eval(this.ThunderLightningEndFadeOut)) return true;
                if (eval(this.ThunderLightningFrequency)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.LightningColor)) return true;
                if (eval(this.VisualEffectBegin)) return true;
                if (eval(this.VisualEffectEnd)) return true;
                if (eval(this.WindDirection)) return true;
                if (eval(this.WindDirectionRange)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.SkyStatics != null)
                {
                    if (eval(this.SkyStatics.Overall)) return true;
                    if (this.SkyStatics.Specific != null)
                    {
                        foreach (var item in this.SkyStatics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (DirectionalAmbientLightingColors != null)
                {
                    if (eval(this.DirectionalAmbientLightingColors.Overall)) return true;
                    if (this.DirectionalAmbientLightingColors.Specific != null && this.DirectionalAmbientLightingColors.Specific.Any(eval)) return true;
                }
                if (eval(this.NAM2)) return true;
                if (eval(this.NAM3)) return true;
                if (Aurora != null)
                {
                    if (eval(this.Aurora.Overall)) return true;
                    if (this.Aurora.Specific != null && this.Aurora.Specific.Any(eval)) return true;
                }
                if (eval(this.NAM0DataTypeState)) return true;
                if (eval(this.FNAMDataTypeState)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Weather.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (CloudTextures != null)
                {
                    obj.CloudTextures = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CloudTextures.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CloudTextures.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CloudTextures.Specific = l;
                        foreach (var item in CloudTextures.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DNAM = eval(this.DNAM);
                obj.CNAM = eval(this.CNAM);
                obj.ANAM = eval(this.ANAM);
                obj.BNAM = eval(this.BNAM);
                obj.LNAM = eval(this.LNAM);
                obj.Precipitation = eval(this.Precipitation);
                obj.VisualEffect = eval(this.VisualEffect);
                obj.ONAM = eval(this.ONAM);
                if (Clouds != null)
                {
                    obj.Clouds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CloudLayer.Mask<R>?>>?>(eval(this.Clouds.Overall), Enumerable.Empty<MaskItemIndexed<R, CloudLayer.Mask<R>?>>());
                    if (Clouds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CloudLayer.Mask<R>?>>();
                        obj.Clouds.Specific = l;
                        foreach (var item in Clouds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, CloudLayer.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, CloudLayer.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SkyUpperColor = this.SkyUpperColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SkyUpperColor.Overall), this.SkyUpperColor.Specific?.Translate(eval));
                obj.FogNearColor = this.FogNearColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.FogNearColor.Overall), this.FogNearColor.Specific?.Translate(eval));
                obj.UnknownColor = this.UnknownColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.UnknownColor.Overall), this.UnknownColor.Specific?.Translate(eval));
                obj.AmbientColor = this.AmbientColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.AmbientColor.Overall), this.AmbientColor.Specific?.Translate(eval));
                obj.SunlightColor = this.SunlightColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SunlightColor.Overall), this.SunlightColor.Specific?.Translate(eval));
                obj.SunColor = this.SunColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SunColor.Overall), this.SunColor.Specific?.Translate(eval));
                obj.StarsColor = this.StarsColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.StarsColor.Overall), this.StarsColor.Specific?.Translate(eval));
                obj.SkyLowerColor = this.SkyLowerColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SkyLowerColor.Overall), this.SkyLowerColor.Specific?.Translate(eval));
                obj.HorizonColor = this.HorizonColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.HorizonColor.Overall), this.HorizonColor.Specific?.Translate(eval));
                obj.EffectLightingColor = this.EffectLightingColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.EffectLightingColor.Overall), this.EffectLightingColor.Specific?.Translate(eval));
                obj.CloudLodDiffuseColor = this.CloudLodDiffuseColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.CloudLodDiffuseColor.Overall), this.CloudLodDiffuseColor.Specific?.Translate(eval));
                obj.CloudLodAmbientColor = this.CloudLodAmbientColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.CloudLodAmbientColor.Overall), this.CloudLodAmbientColor.Specific?.Translate(eval));
                obj.FogFarColor = this.FogFarColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.FogFarColor.Overall), this.FogFarColor.Specific?.Translate(eval));
                obj.SkyStaticsColor = this.SkyStaticsColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SkyStaticsColor.Overall), this.SkyStaticsColor.Specific?.Translate(eval));
                obj.WaterMultiplierColor = this.WaterMultiplierColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.WaterMultiplierColor.Overall), this.WaterMultiplierColor.Specific?.Translate(eval));
                obj.SunGlareColor = this.SunGlareColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SunGlareColor.Overall), this.SunGlareColor.Specific?.Translate(eval));
                obj.MoonGlareColor = this.MoonGlareColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.MoonGlareColor.Overall), this.MoonGlareColor.Specific?.Translate(eval));
                obj.FogDistanceDayNear = eval(this.FogDistanceDayNear);
                obj.FogDistanceDayFar = eval(this.FogDistanceDayFar);
                obj.FogDistanceNightNear = eval(this.FogDistanceNightNear);
                obj.FogDistanceNightFar = eval(this.FogDistanceNightFar);
                obj.FogDistanceDayPower = eval(this.FogDistanceDayPower);
                obj.FogDistanceNightPower = eval(this.FogDistanceNightPower);
                obj.FogDistanceDayMax = eval(this.FogDistanceDayMax);
                obj.FogDistanceNightMax = eval(this.FogDistanceNightMax);
                obj.WindSpeed = eval(this.WindSpeed);
                obj.Unknown = eval(this.Unknown);
                obj.TransDelta = eval(this.TransDelta);
                obj.SunGlare = eval(this.SunGlare);
                obj.SunDamage = eval(this.SunDamage);
                obj.PrecipitationBeginFadeIn = eval(this.PrecipitationBeginFadeIn);
                obj.PrecipitationEndFadeOut = eval(this.PrecipitationEndFadeOut);
                obj.ThunderLightningBeginFadeIn = eval(this.ThunderLightningBeginFadeIn);
                obj.ThunderLightningEndFadeOut = eval(this.ThunderLightningEndFadeOut);
                obj.ThunderLightningFrequency = eval(this.ThunderLightningFrequency);
                obj.Flags = eval(this.Flags);
                obj.LightningColor = eval(this.LightningColor);
                obj.VisualEffectBegin = eval(this.VisualEffectBegin);
                obj.VisualEffectEnd = eval(this.VisualEffectEnd);
                obj.WindDirection = eval(this.WindDirection);
                obj.WindDirectionRange = eval(this.WindDirectionRange);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WeatherSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WeatherSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (SkyStatics != null)
                {
                    obj.SkyStatics = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SkyStatics.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SkyStatics.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SkyStatics.Specific = l;
                        foreach (var item in SkyStatics.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, WeatherImageSpaces.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.DirectionalAmbientLightingColors = this.DirectionalAmbientLightingColors == null ? null : new MaskItem<R, WeatherAmbientColorSet.Mask<R>?>(eval(this.DirectionalAmbientLightingColors.Overall), this.DirectionalAmbientLightingColors.Specific?.Translate(eval));
                obj.NAM2 = eval(this.NAM2);
                obj.NAM3 = eval(this.NAM3);
                obj.Aurora = this.Aurora == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Aurora.Overall), this.Aurora.Specific?.Translate(eval));
                obj.NAM0DataTypeState = eval(this.NAM0DataTypeState);
                obj.FNAMDataTypeState = eval(this.FNAMDataTypeState);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Weather.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Weather.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Weather.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if ((printMask?.CloudTextures?.Overall ?? true)
                        && CloudTextures.TryGet(out var CloudTexturesItem))
                    {
                        fg.AppendLine("CloudTextures =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CloudTexturesItem.Overall);
                            if (CloudTexturesItem.Specific != null)
                            {
                                foreach (var subItem in CloudTexturesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        fg.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        fg.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.ANAM ?? true)
                    {
                        fg.AppendItem(ANAM, "ANAM");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        fg.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.LNAM ?? true)
                    {
                        fg.AppendItem(LNAM, "LNAM");
                    }
                    if (printMask?.Precipitation ?? true)
                    {
                        fg.AppendItem(Precipitation, "Precipitation");
                    }
                    if (printMask?.VisualEffect ?? true)
                    {
                        fg.AppendItem(VisualEffect, "VisualEffect");
                    }
                    if (printMask?.ONAM ?? true)
                    {
                        fg.AppendItem(ONAM, "ONAM");
                    }
                    if ((printMask?.Clouds?.Overall ?? true)
                        && Clouds.TryGet(out var CloudsItem))
                    {
                        fg.AppendLine("Clouds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CloudsItem.Overall);
                            if (CloudsItem.Specific != null)
                            {
                                foreach (var subItem in CloudsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SkyUpperColor?.Overall ?? true)
                    {
                        SkyUpperColor?.ToString(fg);
                    }
                    if (printMask?.FogNearColor?.Overall ?? true)
                    {
                        FogNearColor?.ToString(fg);
                    }
                    if (printMask?.UnknownColor?.Overall ?? true)
                    {
                        UnknownColor?.ToString(fg);
                    }
                    if (printMask?.AmbientColor?.Overall ?? true)
                    {
                        AmbientColor?.ToString(fg);
                    }
                    if (printMask?.SunlightColor?.Overall ?? true)
                    {
                        SunlightColor?.ToString(fg);
                    }
                    if (printMask?.SunColor?.Overall ?? true)
                    {
                        SunColor?.ToString(fg);
                    }
                    if (printMask?.StarsColor?.Overall ?? true)
                    {
                        StarsColor?.ToString(fg);
                    }
                    if (printMask?.SkyLowerColor?.Overall ?? true)
                    {
                        SkyLowerColor?.ToString(fg);
                    }
                    if (printMask?.HorizonColor?.Overall ?? true)
                    {
                        HorizonColor?.ToString(fg);
                    }
                    if (printMask?.EffectLightingColor?.Overall ?? true)
                    {
                        EffectLightingColor?.ToString(fg);
                    }
                    if (printMask?.CloudLodDiffuseColor?.Overall ?? true)
                    {
                        CloudLodDiffuseColor?.ToString(fg);
                    }
                    if (printMask?.CloudLodAmbientColor?.Overall ?? true)
                    {
                        CloudLodAmbientColor?.ToString(fg);
                    }
                    if (printMask?.FogFarColor?.Overall ?? true)
                    {
                        FogFarColor?.ToString(fg);
                    }
                    if (printMask?.SkyStaticsColor?.Overall ?? true)
                    {
                        SkyStaticsColor?.ToString(fg);
                    }
                    if (printMask?.WaterMultiplierColor?.Overall ?? true)
                    {
                        WaterMultiplierColor?.ToString(fg);
                    }
                    if (printMask?.SunGlareColor?.Overall ?? true)
                    {
                        SunGlareColor?.ToString(fg);
                    }
                    if (printMask?.MoonGlareColor?.Overall ?? true)
                    {
                        MoonGlareColor?.ToString(fg);
                    }
                    if (printMask?.FogDistanceDayNear ?? true)
                    {
                        fg.AppendItem(FogDistanceDayNear, "FogDistanceDayNear");
                    }
                    if (printMask?.FogDistanceDayFar ?? true)
                    {
                        fg.AppendItem(FogDistanceDayFar, "FogDistanceDayFar");
                    }
                    if (printMask?.FogDistanceNightNear ?? true)
                    {
                        fg.AppendItem(FogDistanceNightNear, "FogDistanceNightNear");
                    }
                    if (printMask?.FogDistanceNightFar ?? true)
                    {
                        fg.AppendItem(FogDistanceNightFar, "FogDistanceNightFar");
                    }
                    if (printMask?.FogDistanceDayPower ?? true)
                    {
                        fg.AppendItem(FogDistanceDayPower, "FogDistanceDayPower");
                    }
                    if (printMask?.FogDistanceNightPower ?? true)
                    {
                        fg.AppendItem(FogDistanceNightPower, "FogDistanceNightPower");
                    }
                    if (printMask?.FogDistanceDayMax ?? true)
                    {
                        fg.AppendItem(FogDistanceDayMax, "FogDistanceDayMax");
                    }
                    if (printMask?.FogDistanceNightMax ?? true)
                    {
                        fg.AppendItem(FogDistanceNightMax, "FogDistanceNightMax");
                    }
                    if (printMask?.WindSpeed ?? true)
                    {
                        fg.AppendItem(WindSpeed, "WindSpeed");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.TransDelta ?? true)
                    {
                        fg.AppendItem(TransDelta, "TransDelta");
                    }
                    if (printMask?.SunGlare ?? true)
                    {
                        fg.AppendItem(SunGlare, "SunGlare");
                    }
                    if (printMask?.SunDamage ?? true)
                    {
                        fg.AppendItem(SunDamage, "SunDamage");
                    }
                    if (printMask?.PrecipitationBeginFadeIn ?? true)
                    {
                        fg.AppendItem(PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
                    }
                    if (printMask?.PrecipitationEndFadeOut ?? true)
                    {
                        fg.AppendItem(PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
                    }
                    if (printMask?.ThunderLightningBeginFadeIn ?? true)
                    {
                        fg.AppendItem(ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
                    }
                    if (printMask?.ThunderLightningEndFadeOut ?? true)
                    {
                        fg.AppendItem(ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
                    }
                    if (printMask?.ThunderLightningFrequency ?? true)
                    {
                        fg.AppendItem(ThunderLightningFrequency, "ThunderLightningFrequency");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.LightningColor ?? true)
                    {
                        fg.AppendItem(LightningColor, "LightningColor");
                    }
                    if (printMask?.VisualEffectBegin ?? true)
                    {
                        fg.AppendItem(VisualEffectBegin, "VisualEffectBegin");
                    }
                    if (printMask?.VisualEffectEnd ?? true)
                    {
                        fg.AppendItem(VisualEffectEnd, "VisualEffectEnd");
                    }
                    if (printMask?.WindDirection ?? true)
                    {
                        fg.AppendItem(WindDirection, "WindDirection");
                    }
                    if (printMask?.WindDirectionRange ?? true)
                    {
                        fg.AppendItem(WindDirectionRange, "WindDirectionRange");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.SkyStatics?.Overall ?? true)
                        && SkyStatics.TryGet(out var SkyStaticsItem))
                    {
                        fg.AppendLine("SkyStatics =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SkyStaticsItem.Overall);
                            if (SkyStaticsItem.Specific != null)
                            {
                                foreach (var subItem in SkyStaticsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.ToString(fg);
                    }
                    if (printMask?.DirectionalAmbientLightingColors?.Overall ?? true)
                    {
                        DirectionalAmbientLightingColors?.ToString(fg);
                    }
                    if (printMask?.NAM2 ?? true)
                    {
                        fg.AppendItem(NAM2, "NAM2");
                    }
                    if (printMask?.NAM3 ?? true)
                    {
                        fg.AppendItem(NAM3, "NAM3");
                    }
                    if (printMask?.Aurora?.Overall ?? true)
                    {
                        Aurora?.ToString(fg);
                    }
                    if (printMask?.NAM0DataTypeState ?? true)
                    {
                        fg.AppendItem(NAM0DataTypeState, "NAM0DataTypeState");
                    }
                    if (printMask?.FNAMDataTypeState ?? true)
                    {
                        fg.AppendItem(FNAMDataTypeState, "FNAMDataTypeState");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CloudTextures;
            public Exception? DNAM;
            public Exception? CNAM;
            public Exception? ANAM;
            public Exception? BNAM;
            public Exception? LNAM;
            public Exception? Precipitation;
            public Exception? VisualEffect;
            public Exception? ONAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>? Clouds;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SkyUpperColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? FogNearColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? UnknownColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? AmbientColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SunlightColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SunColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? StarsColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SkyLowerColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? HorizonColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? EffectLightingColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? CloudLodDiffuseColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? CloudLodAmbientColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? FogFarColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SkyStaticsColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? WaterMultiplierColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SunGlareColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? MoonGlareColor;
            public Exception? FogDistanceDayNear;
            public Exception? FogDistanceDayFar;
            public Exception? FogDistanceNightNear;
            public Exception? FogDistanceNightFar;
            public Exception? FogDistanceDayPower;
            public Exception? FogDistanceNightPower;
            public Exception? FogDistanceDayMax;
            public Exception? FogDistanceNightMax;
            public Exception? WindSpeed;
            public Exception? Unknown;
            public Exception? TransDelta;
            public Exception? SunGlare;
            public Exception? SunDamage;
            public Exception? PrecipitationBeginFadeIn;
            public Exception? PrecipitationEndFadeOut;
            public Exception? ThunderLightningBeginFadeIn;
            public Exception? ThunderLightningEndFadeOut;
            public Exception? ThunderLightningFrequency;
            public Exception? Flags;
            public Exception? LightningColor;
            public Exception? VisualEffectBegin;
            public Exception? VisualEffectEnd;
            public Exception? WindDirection;
            public Exception? WindDirectionRange;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>? Sounds;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SkyStatics;
            public MaskItem<Exception?, WeatherImageSpaces.ErrorMask?>? ImageSpaces;
            public MaskItem<Exception?, WeatherAmbientColorSet.ErrorMask?>? DirectionalAmbientLightingColors;
            public Exception? NAM2;
            public Exception? NAM3;
            public MaskItem<Exception?, Model.ErrorMask?>? Aurora;
            public Exception? NAM0DataTypeState;
            public Exception? FNAMDataTypeState;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.CloudTextures:
                        return CloudTextures;
                    case Weather_FieldIndex.DNAM:
                        return DNAM;
                    case Weather_FieldIndex.CNAM:
                        return CNAM;
                    case Weather_FieldIndex.ANAM:
                        return ANAM;
                    case Weather_FieldIndex.BNAM:
                        return BNAM;
                    case Weather_FieldIndex.LNAM:
                        return LNAM;
                    case Weather_FieldIndex.Precipitation:
                        return Precipitation;
                    case Weather_FieldIndex.VisualEffect:
                        return VisualEffect;
                    case Weather_FieldIndex.ONAM:
                        return ONAM;
                    case Weather_FieldIndex.Clouds:
                        return Clouds;
                    case Weather_FieldIndex.SkyUpperColor:
                        return SkyUpperColor;
                    case Weather_FieldIndex.FogNearColor:
                        return FogNearColor;
                    case Weather_FieldIndex.UnknownColor:
                        return UnknownColor;
                    case Weather_FieldIndex.AmbientColor:
                        return AmbientColor;
                    case Weather_FieldIndex.SunlightColor:
                        return SunlightColor;
                    case Weather_FieldIndex.SunColor:
                        return SunColor;
                    case Weather_FieldIndex.StarsColor:
                        return StarsColor;
                    case Weather_FieldIndex.SkyLowerColor:
                        return SkyLowerColor;
                    case Weather_FieldIndex.HorizonColor:
                        return HorizonColor;
                    case Weather_FieldIndex.EffectLightingColor:
                        return EffectLightingColor;
                    case Weather_FieldIndex.CloudLodDiffuseColor:
                        return CloudLodDiffuseColor;
                    case Weather_FieldIndex.CloudLodAmbientColor:
                        return CloudLodAmbientColor;
                    case Weather_FieldIndex.FogFarColor:
                        return FogFarColor;
                    case Weather_FieldIndex.SkyStaticsColor:
                        return SkyStaticsColor;
                    case Weather_FieldIndex.WaterMultiplierColor:
                        return WaterMultiplierColor;
                    case Weather_FieldIndex.SunGlareColor:
                        return SunGlareColor;
                    case Weather_FieldIndex.MoonGlareColor:
                        return MoonGlareColor;
                    case Weather_FieldIndex.FogDistanceDayNear:
                        return FogDistanceDayNear;
                    case Weather_FieldIndex.FogDistanceDayFar:
                        return FogDistanceDayFar;
                    case Weather_FieldIndex.FogDistanceNightNear:
                        return FogDistanceNightNear;
                    case Weather_FieldIndex.FogDistanceNightFar:
                        return FogDistanceNightFar;
                    case Weather_FieldIndex.FogDistanceDayPower:
                        return FogDistanceDayPower;
                    case Weather_FieldIndex.FogDistanceNightPower:
                        return FogDistanceNightPower;
                    case Weather_FieldIndex.FogDistanceDayMax:
                        return FogDistanceDayMax;
                    case Weather_FieldIndex.FogDistanceNightMax:
                        return FogDistanceNightMax;
                    case Weather_FieldIndex.WindSpeed:
                        return WindSpeed;
                    case Weather_FieldIndex.Unknown:
                        return Unknown;
                    case Weather_FieldIndex.TransDelta:
                        return TransDelta;
                    case Weather_FieldIndex.SunGlare:
                        return SunGlare;
                    case Weather_FieldIndex.SunDamage:
                        return SunDamage;
                    case Weather_FieldIndex.PrecipitationBeginFadeIn:
                        return PrecipitationBeginFadeIn;
                    case Weather_FieldIndex.PrecipitationEndFadeOut:
                        return PrecipitationEndFadeOut;
                    case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                        return ThunderLightningBeginFadeIn;
                    case Weather_FieldIndex.ThunderLightningEndFadeOut:
                        return ThunderLightningEndFadeOut;
                    case Weather_FieldIndex.ThunderLightningFrequency:
                        return ThunderLightningFrequency;
                    case Weather_FieldIndex.Flags:
                        return Flags;
                    case Weather_FieldIndex.LightningColor:
                        return LightningColor;
                    case Weather_FieldIndex.VisualEffectBegin:
                        return VisualEffectBegin;
                    case Weather_FieldIndex.VisualEffectEnd:
                        return VisualEffectEnd;
                    case Weather_FieldIndex.WindDirection:
                        return WindDirection;
                    case Weather_FieldIndex.WindDirectionRange:
                        return WindDirectionRange;
                    case Weather_FieldIndex.Sounds:
                        return Sounds;
                    case Weather_FieldIndex.SkyStatics:
                        return SkyStatics;
                    case Weather_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case Weather_FieldIndex.DirectionalAmbientLightingColors:
                        return DirectionalAmbientLightingColors;
                    case Weather_FieldIndex.NAM2:
                        return NAM2;
                    case Weather_FieldIndex.NAM3:
                        return NAM3;
                    case Weather_FieldIndex.Aurora:
                        return Aurora;
                    case Weather_FieldIndex.NAM0DataTypeState:
                        return NAM0DataTypeState;
                    case Weather_FieldIndex.FNAMDataTypeState:
                        return FNAMDataTypeState;
                    case Weather_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.CloudTextures:
                        this.CloudTextures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weather_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case Weather_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case Weather_FieldIndex.ANAM:
                        this.ANAM = ex;
                        break;
                    case Weather_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case Weather_FieldIndex.LNAM:
                        this.LNAM = ex;
                        break;
                    case Weather_FieldIndex.Precipitation:
                        this.Precipitation = ex;
                        break;
                    case Weather_FieldIndex.VisualEffect:
                        this.VisualEffect = ex;
                        break;
                    case Weather_FieldIndex.ONAM:
                        this.ONAM = ex;
                        break;
                    case Weather_FieldIndex.Clouds:
                        this.Clouds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyUpperColor:
                        this.SkyUpperColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogNearColor:
                        this.FogNearColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.UnknownColor:
                        this.UnknownColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.AmbientColor:
                        this.AmbientColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunlightColor:
                        this.SunlightColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunColor:
                        this.SunColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.StarsColor:
                        this.StarsColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyLowerColor:
                        this.SkyLowerColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.HorizonColor:
                        this.HorizonColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.EffectLightingColor:
                        this.EffectLightingColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.CloudLodDiffuseColor:
                        this.CloudLodDiffuseColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.CloudLodAmbientColor:
                        this.CloudLodAmbientColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogFarColor:
                        this.FogFarColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyStaticsColor:
                        this.SkyStaticsColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.WaterMultiplierColor:
                        this.WaterMultiplierColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunGlareColor:
                        this.SunGlareColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.MoonGlareColor:
                        this.MoonGlareColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogDistanceDayNear:
                        this.FogDistanceDayNear = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceDayFar:
                        this.FogDistanceDayFar = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightNear:
                        this.FogDistanceNightNear = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightFar:
                        this.FogDistanceNightFar = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceDayPower:
                        this.FogDistanceDayPower = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightPower:
                        this.FogDistanceNightPower = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceDayMax:
                        this.FogDistanceDayMax = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightMax:
                        this.FogDistanceNightMax = ex;
                        break;
                    case Weather_FieldIndex.WindSpeed:
                        this.WindSpeed = ex;
                        break;
                    case Weather_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Weather_FieldIndex.TransDelta:
                        this.TransDelta = ex;
                        break;
                    case Weather_FieldIndex.SunGlare:
                        this.SunGlare = ex;
                        break;
                    case Weather_FieldIndex.SunDamage:
                        this.SunDamage = ex;
                        break;
                    case Weather_FieldIndex.PrecipitationBeginFadeIn:
                        this.PrecipitationBeginFadeIn = ex;
                        break;
                    case Weather_FieldIndex.PrecipitationEndFadeOut:
                        this.PrecipitationEndFadeOut = ex;
                        break;
                    case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                        this.ThunderLightningBeginFadeIn = ex;
                        break;
                    case Weather_FieldIndex.ThunderLightningEndFadeOut:
                        this.ThunderLightningEndFadeOut = ex;
                        break;
                    case Weather_FieldIndex.ThunderLightningFrequency:
                        this.ThunderLightningFrequency = ex;
                        break;
                    case Weather_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Weather_FieldIndex.LightningColor:
                        this.LightningColor = ex;
                        break;
                    case Weather_FieldIndex.VisualEffectBegin:
                        this.VisualEffectBegin = ex;
                        break;
                    case Weather_FieldIndex.VisualEffectEnd:
                        this.VisualEffectEnd = ex;
                        break;
                    case Weather_FieldIndex.WindDirection:
                        this.WindDirection = ex;
                        break;
                    case Weather_FieldIndex.WindDirectionRange:
                        this.WindDirectionRange = ex;
                        break;
                    case Weather_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyStatics:
                        this.SkyStatics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weather_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, WeatherImageSpaces.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.DirectionalAmbientLightingColors:
                        this.DirectionalAmbientLightingColors = new MaskItem<Exception?, WeatherAmbientColorSet.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.NAM2:
                        this.NAM2 = ex;
                        break;
                    case Weather_FieldIndex.NAM3:
                        this.NAM3 = ex;
                        break;
                    case Weather_FieldIndex.Aurora:
                        this.Aurora = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.NAM0DataTypeState:
                        this.NAM0DataTypeState = ex;
                        break;
                    case Weather_FieldIndex.FNAMDataTypeState:
                        this.FNAMDataTypeState = ex;
                        break;
                    case Weather_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.CloudTextures:
                        this.CloudTextures = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weather_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ANAM:
                        this.ANAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.LNAM:
                        this.LNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Precipitation:
                        this.Precipitation = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.VisualEffect:
                        this.VisualEffect = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ONAM:
                        this.ONAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Clouds:
                        this.Clouds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>)obj;
                        break;
                    case Weather_FieldIndex.SkyUpperColor:
                        this.SkyUpperColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.FogNearColor:
                        this.FogNearColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.UnknownColor:
                        this.UnknownColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.AmbientColor:
                        this.AmbientColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunlightColor:
                        this.SunlightColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunColor:
                        this.SunColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.StarsColor:
                        this.StarsColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SkyLowerColor:
                        this.SkyLowerColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.HorizonColor:
                        this.HorizonColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.EffectLightingColor:
                        this.EffectLightingColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.CloudLodDiffuseColor:
                        this.CloudLodDiffuseColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.CloudLodAmbientColor:
                        this.CloudLodAmbientColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.FogFarColor:
                        this.FogFarColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SkyStaticsColor:
                        this.SkyStaticsColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.WaterMultiplierColor:
                        this.WaterMultiplierColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunGlareColor:
                        this.SunGlareColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.MoonGlareColor:
                        this.MoonGlareColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayNear:
                        this.FogDistanceDayNear = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayFar:
                        this.FogDistanceDayFar = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightNear:
                        this.FogDistanceNightNear = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightFar:
                        this.FogDistanceNightFar = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayPower:
                        this.FogDistanceDayPower = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightPower:
                        this.FogDistanceNightPower = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayMax:
                        this.FogDistanceDayMax = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightMax:
                        this.FogDistanceNightMax = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.WindSpeed:
                        this.WindSpeed = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.TransDelta:
                        this.TransDelta = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.SunGlare:
                        this.SunGlare = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.SunDamage:
                        this.SunDamage = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.PrecipitationBeginFadeIn:
                        this.PrecipitationBeginFadeIn = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.PrecipitationEndFadeOut:
                        this.PrecipitationEndFadeOut = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                        this.ThunderLightningBeginFadeIn = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ThunderLightningEndFadeOut:
                        this.ThunderLightningEndFadeOut = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ThunderLightningFrequency:
                        this.ThunderLightningFrequency = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.LightningColor:
                        this.LightningColor = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.VisualEffectBegin:
                        this.VisualEffectBegin = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.VisualEffectEnd:
                        this.VisualEffectEnd = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.WindDirection:
                        this.WindDirection = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.WindDirectionRange:
                        this.WindDirectionRange = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>)obj;
                        break;
                    case Weather_FieldIndex.SkyStatics:
                        this.SkyStatics = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weather_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, WeatherImageSpaces.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.DirectionalAmbientLightingColors:
                        this.DirectionalAmbientLightingColors = (MaskItem<Exception?, WeatherAmbientColorSet.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.NAM2:
                        this.NAM2 = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.NAM3:
                        this.NAM3 = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Aurora:
                        this.Aurora = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.NAM0DataTypeState:
                        this.NAM0DataTypeState = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FNAMDataTypeState:
                        this.FNAMDataTypeState = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (CloudTextures != null) return true;
                if (DNAM != null) return true;
                if (CNAM != null) return true;
                if (ANAM != null) return true;
                if (BNAM != null) return true;
                if (LNAM != null) return true;
                if (Precipitation != null) return true;
                if (VisualEffect != null) return true;
                if (ONAM != null) return true;
                if (Clouds != null) return true;
                if (SkyUpperColor != null) return true;
                if (FogNearColor != null) return true;
                if (UnknownColor != null) return true;
                if (AmbientColor != null) return true;
                if (SunlightColor != null) return true;
                if (SunColor != null) return true;
                if (StarsColor != null) return true;
                if (SkyLowerColor != null) return true;
                if (HorizonColor != null) return true;
                if (EffectLightingColor != null) return true;
                if (CloudLodDiffuseColor != null) return true;
                if (CloudLodAmbientColor != null) return true;
                if (FogFarColor != null) return true;
                if (SkyStaticsColor != null) return true;
                if (WaterMultiplierColor != null) return true;
                if (SunGlareColor != null) return true;
                if (MoonGlareColor != null) return true;
                if (FogDistanceDayNear != null) return true;
                if (FogDistanceDayFar != null) return true;
                if (FogDistanceNightNear != null) return true;
                if (FogDistanceNightFar != null) return true;
                if (FogDistanceDayPower != null) return true;
                if (FogDistanceNightPower != null) return true;
                if (FogDistanceDayMax != null) return true;
                if (FogDistanceNightMax != null) return true;
                if (WindSpeed != null) return true;
                if (Unknown != null) return true;
                if (TransDelta != null) return true;
                if (SunGlare != null) return true;
                if (SunDamage != null) return true;
                if (PrecipitationBeginFadeIn != null) return true;
                if (PrecipitationEndFadeOut != null) return true;
                if (ThunderLightningBeginFadeIn != null) return true;
                if (ThunderLightningEndFadeOut != null) return true;
                if (ThunderLightningFrequency != null) return true;
                if (Flags != null) return true;
                if (LightningColor != null) return true;
                if (VisualEffectBegin != null) return true;
                if (VisualEffectEnd != null) return true;
                if (WindDirection != null) return true;
                if (WindDirectionRange != null) return true;
                if (Sounds != null) return true;
                if (SkyStatics != null) return true;
                if (ImageSpaces != null) return true;
                if (DirectionalAmbientLightingColors != null) return true;
                if (NAM2 != null) return true;
                if (NAM3 != null) return true;
                if (Aurora != null) return true;
                if (NAM0DataTypeState != null) return true;
                if (FNAMDataTypeState != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                if (CloudTextures.TryGet(out var CloudTexturesItem))
                {
                    fg.AppendLine("CloudTextures =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CloudTexturesItem.Overall);
                        if (CloudTexturesItem.Specific != null)
                        {
                            foreach (var subItem in CloudTexturesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DNAM, "DNAM");
                fg.AppendItem(CNAM, "CNAM");
                fg.AppendItem(ANAM, "ANAM");
                fg.AppendItem(BNAM, "BNAM");
                fg.AppendItem(LNAM, "LNAM");
                fg.AppendItem(Precipitation, "Precipitation");
                fg.AppendItem(VisualEffect, "VisualEffect");
                fg.AppendItem(ONAM, "ONAM");
                if (Clouds.TryGet(out var CloudsItem))
                {
                    fg.AppendLine("Clouds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CloudsItem.Overall);
                        if (CloudsItem.Specific != null)
                        {
                            foreach (var subItem in CloudsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                SkyUpperColor?.ToString(fg);
                FogNearColor?.ToString(fg);
                UnknownColor?.ToString(fg);
                AmbientColor?.ToString(fg);
                SunlightColor?.ToString(fg);
                SunColor?.ToString(fg);
                StarsColor?.ToString(fg);
                SkyLowerColor?.ToString(fg);
                HorizonColor?.ToString(fg);
                EffectLightingColor?.ToString(fg);
                CloudLodDiffuseColor?.ToString(fg);
                CloudLodAmbientColor?.ToString(fg);
                FogFarColor?.ToString(fg);
                SkyStaticsColor?.ToString(fg);
                WaterMultiplierColor?.ToString(fg);
                SunGlareColor?.ToString(fg);
                MoonGlareColor?.ToString(fg);
                fg.AppendItem(FogDistanceDayNear, "FogDistanceDayNear");
                fg.AppendItem(FogDistanceDayFar, "FogDistanceDayFar");
                fg.AppendItem(FogDistanceNightNear, "FogDistanceNightNear");
                fg.AppendItem(FogDistanceNightFar, "FogDistanceNightFar");
                fg.AppendItem(FogDistanceDayPower, "FogDistanceDayPower");
                fg.AppendItem(FogDistanceNightPower, "FogDistanceNightPower");
                fg.AppendItem(FogDistanceDayMax, "FogDistanceDayMax");
                fg.AppendItem(FogDistanceNightMax, "FogDistanceNightMax");
                fg.AppendItem(WindSpeed, "WindSpeed");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(TransDelta, "TransDelta");
                fg.AppendItem(SunGlare, "SunGlare");
                fg.AppendItem(SunDamage, "SunDamage");
                fg.AppendItem(PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
                fg.AppendItem(PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
                fg.AppendItem(ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
                fg.AppendItem(ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
                fg.AppendItem(ThunderLightningFrequency, "ThunderLightningFrequency");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(LightningColor, "LightningColor");
                fg.AppendItem(VisualEffectBegin, "VisualEffectBegin");
                fg.AppendItem(VisualEffectEnd, "VisualEffectEnd");
                fg.AppendItem(WindDirection, "WindDirection");
                fg.AppendItem(WindDirectionRange, "WindDirectionRange");
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (SkyStatics.TryGet(out var SkyStaticsItem))
                {
                    fg.AppendLine("SkyStatics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SkyStaticsItem.Overall);
                        if (SkyStaticsItem.Specific != null)
                        {
                            foreach (var subItem in SkyStaticsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                ImageSpaces?.ToString(fg);
                DirectionalAmbientLightingColors?.ToString(fg);
                fg.AppendItem(NAM2, "NAM2");
                fg.AppendItem(NAM3, "NAM3");
                Aurora?.ToString(fg);
                fg.AppendItem(NAM0DataTypeState, "NAM0DataTypeState");
                fg.AppendItem(FNAMDataTypeState, "FNAMDataTypeState");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CloudTextures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.CloudTextures?.Overall, rhs.CloudTextures?.Overall), ExceptionExt.Combine(this.CloudTextures?.Specific, rhs.CloudTextures?.Specific));
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.ANAM = this.ANAM.Combine(rhs.ANAM);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.LNAM = this.LNAM.Combine(rhs.LNAM);
                ret.Precipitation = this.Precipitation.Combine(rhs.Precipitation);
                ret.VisualEffect = this.VisualEffect.Combine(rhs.VisualEffect);
                ret.ONAM = this.ONAM.Combine(rhs.ONAM);
                ret.Clouds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>(ExceptionExt.Combine(this.Clouds?.Overall, rhs.Clouds?.Overall), ExceptionExt.Combine(this.Clouds?.Specific, rhs.Clouds?.Specific));
                ret.SkyUpperColor = this.SkyUpperColor.Combine(rhs.SkyUpperColor, (l, r) => l.Combine(r));
                ret.FogNearColor = this.FogNearColor.Combine(rhs.FogNearColor, (l, r) => l.Combine(r));
                ret.UnknownColor = this.UnknownColor.Combine(rhs.UnknownColor, (l, r) => l.Combine(r));
                ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor, (l, r) => l.Combine(r));
                ret.SunlightColor = this.SunlightColor.Combine(rhs.SunlightColor, (l, r) => l.Combine(r));
                ret.SunColor = this.SunColor.Combine(rhs.SunColor, (l, r) => l.Combine(r));
                ret.StarsColor = this.StarsColor.Combine(rhs.StarsColor, (l, r) => l.Combine(r));
                ret.SkyLowerColor = this.SkyLowerColor.Combine(rhs.SkyLowerColor, (l, r) => l.Combine(r));
                ret.HorizonColor = this.HorizonColor.Combine(rhs.HorizonColor, (l, r) => l.Combine(r));
                ret.EffectLightingColor = this.EffectLightingColor.Combine(rhs.EffectLightingColor, (l, r) => l.Combine(r));
                ret.CloudLodDiffuseColor = this.CloudLodDiffuseColor.Combine(rhs.CloudLodDiffuseColor, (l, r) => l.Combine(r));
                ret.CloudLodAmbientColor = this.CloudLodAmbientColor.Combine(rhs.CloudLodAmbientColor, (l, r) => l.Combine(r));
                ret.FogFarColor = this.FogFarColor.Combine(rhs.FogFarColor, (l, r) => l.Combine(r));
                ret.SkyStaticsColor = this.SkyStaticsColor.Combine(rhs.SkyStaticsColor, (l, r) => l.Combine(r));
                ret.WaterMultiplierColor = this.WaterMultiplierColor.Combine(rhs.WaterMultiplierColor, (l, r) => l.Combine(r));
                ret.SunGlareColor = this.SunGlareColor.Combine(rhs.SunGlareColor, (l, r) => l.Combine(r));
                ret.MoonGlareColor = this.MoonGlareColor.Combine(rhs.MoonGlareColor, (l, r) => l.Combine(r));
                ret.FogDistanceDayNear = this.FogDistanceDayNear.Combine(rhs.FogDistanceDayNear);
                ret.FogDistanceDayFar = this.FogDistanceDayFar.Combine(rhs.FogDistanceDayFar);
                ret.FogDistanceNightNear = this.FogDistanceNightNear.Combine(rhs.FogDistanceNightNear);
                ret.FogDistanceNightFar = this.FogDistanceNightFar.Combine(rhs.FogDistanceNightFar);
                ret.FogDistanceDayPower = this.FogDistanceDayPower.Combine(rhs.FogDistanceDayPower);
                ret.FogDistanceNightPower = this.FogDistanceNightPower.Combine(rhs.FogDistanceNightPower);
                ret.FogDistanceDayMax = this.FogDistanceDayMax.Combine(rhs.FogDistanceDayMax);
                ret.FogDistanceNightMax = this.FogDistanceNightMax.Combine(rhs.FogDistanceNightMax);
                ret.WindSpeed = this.WindSpeed.Combine(rhs.WindSpeed);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.TransDelta = this.TransDelta.Combine(rhs.TransDelta);
                ret.SunGlare = this.SunGlare.Combine(rhs.SunGlare);
                ret.SunDamage = this.SunDamage.Combine(rhs.SunDamage);
                ret.PrecipitationBeginFadeIn = this.PrecipitationBeginFadeIn.Combine(rhs.PrecipitationBeginFadeIn);
                ret.PrecipitationEndFadeOut = this.PrecipitationEndFadeOut.Combine(rhs.PrecipitationEndFadeOut);
                ret.ThunderLightningBeginFadeIn = this.ThunderLightningBeginFadeIn.Combine(rhs.ThunderLightningBeginFadeIn);
                ret.ThunderLightningEndFadeOut = this.ThunderLightningEndFadeOut.Combine(rhs.ThunderLightningEndFadeOut);
                ret.ThunderLightningFrequency = this.ThunderLightningFrequency.Combine(rhs.ThunderLightningFrequency);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.LightningColor = this.LightningColor.Combine(rhs.LightningColor);
                ret.VisualEffectBegin = this.VisualEffectBegin.Combine(rhs.VisualEffectBegin);
                ret.VisualEffectEnd = this.VisualEffectEnd.Combine(rhs.VisualEffectEnd);
                ret.WindDirection = this.WindDirection.Combine(rhs.WindDirection);
                ret.WindDirectionRange = this.WindDirectionRange.Combine(rhs.WindDirectionRange);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.SkyStatics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.SkyStatics?.Overall, rhs.SkyStatics?.Overall), ExceptionExt.Combine(this.SkyStatics?.Specific, rhs.SkyStatics?.Specific));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.DirectionalAmbientLightingColors = this.DirectionalAmbientLightingColors.Combine(rhs.DirectionalAmbientLightingColors, (l, r) => l.Combine(r));
                ret.NAM2 = this.NAM2.Combine(rhs.NAM2);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3);
                ret.Aurora = this.Aurora.Combine(rhs.Aurora, (l, r) => l.Combine(r));
                ret.NAM0DataTypeState = this.NAM0DataTypeState.Combine(rhs.NAM0DataTypeState);
                ret.FNAMDataTypeState = this.FNAMDataTypeState.Combine(rhs.FNAMDataTypeState);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool CloudTextures;
            public bool DNAM;
            public bool CNAM;
            public bool ANAM;
            public bool BNAM;
            public bool LNAM;
            public bool Precipitation;
            public bool VisualEffect;
            public bool ONAM;
            public MaskItem<bool, CloudLayer.TranslationMask?> Clouds;
            public MaskItem<bool, WeatherColor.TranslationMask?> SkyUpperColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> FogNearColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> UnknownColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> AmbientColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> SunlightColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> SunColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> StarsColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> SkyLowerColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> HorizonColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> EffectLightingColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> CloudLodDiffuseColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> CloudLodAmbientColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> FogFarColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> SkyStaticsColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> WaterMultiplierColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> SunGlareColor;
            public MaskItem<bool, WeatherColor.TranslationMask?> MoonGlareColor;
            public bool FogDistanceDayNear;
            public bool FogDistanceDayFar;
            public bool FogDistanceNightNear;
            public bool FogDistanceNightFar;
            public bool FogDistanceDayPower;
            public bool FogDistanceNightPower;
            public bool FogDistanceDayMax;
            public bool FogDistanceNightMax;
            public bool WindSpeed;
            public bool Unknown;
            public bool TransDelta;
            public bool SunGlare;
            public bool SunDamage;
            public bool PrecipitationBeginFadeIn;
            public bool PrecipitationEndFadeOut;
            public bool ThunderLightningBeginFadeIn;
            public bool ThunderLightningEndFadeOut;
            public bool ThunderLightningFrequency;
            public bool Flags;
            public bool LightningColor;
            public bool VisualEffectBegin;
            public bool VisualEffectEnd;
            public bool WindDirection;
            public bool WindDirectionRange;
            public MaskItem<bool, WeatherSound.TranslationMask?> Sounds;
            public bool SkyStatics;
            public MaskItem<bool, WeatherImageSpaces.TranslationMask?> ImageSpaces;
            public MaskItem<bool, WeatherAmbientColorSet.TranslationMask?> DirectionalAmbientLightingColors;
            public bool NAM2;
            public bool NAM3;
            public MaskItem<bool, Model.TranslationMask?> Aurora;
            public bool NAM0DataTypeState;
            public bool FNAMDataTypeState;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.CloudTextures = defaultOn;
                this.DNAM = defaultOn;
                this.CNAM = defaultOn;
                this.ANAM = defaultOn;
                this.BNAM = defaultOn;
                this.LNAM = defaultOn;
                this.Precipitation = defaultOn;
                this.VisualEffect = defaultOn;
                this.ONAM = defaultOn;
                this.Clouds = new MaskItem<bool, CloudLayer.TranslationMask?>(defaultOn, null);
                this.SkyUpperColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.FogNearColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.UnknownColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.AmbientColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.SunlightColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.SunColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.StarsColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.SkyLowerColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.HorizonColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.EffectLightingColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.CloudLodDiffuseColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.CloudLodAmbientColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.FogFarColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.SkyStaticsColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.WaterMultiplierColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.SunGlareColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.MoonGlareColor = new MaskItem<bool, WeatherColor.TranslationMask?>(defaultOn, null);
                this.FogDistanceDayNear = defaultOn;
                this.FogDistanceDayFar = defaultOn;
                this.FogDistanceNightNear = defaultOn;
                this.FogDistanceNightFar = defaultOn;
                this.FogDistanceDayPower = defaultOn;
                this.FogDistanceNightPower = defaultOn;
                this.FogDistanceDayMax = defaultOn;
                this.FogDistanceNightMax = defaultOn;
                this.WindSpeed = defaultOn;
                this.Unknown = defaultOn;
                this.TransDelta = defaultOn;
                this.SunGlare = defaultOn;
                this.SunDamage = defaultOn;
                this.PrecipitationBeginFadeIn = defaultOn;
                this.PrecipitationEndFadeOut = defaultOn;
                this.ThunderLightningBeginFadeIn = defaultOn;
                this.ThunderLightningEndFadeOut = defaultOn;
                this.ThunderLightningFrequency = defaultOn;
                this.Flags = defaultOn;
                this.LightningColor = defaultOn;
                this.VisualEffectBegin = defaultOn;
                this.VisualEffectEnd = defaultOn;
                this.WindDirection = defaultOn;
                this.WindDirectionRange = defaultOn;
                this.Sounds = new MaskItem<bool, WeatherSound.TranslationMask?>(defaultOn, null);
                this.SkyStatics = defaultOn;
                this.ImageSpaces = new MaskItem<bool, WeatherImageSpaces.TranslationMask?>(defaultOn, null);
                this.DirectionalAmbientLightingColors = new MaskItem<bool, WeatherAmbientColorSet.TranslationMask?>(defaultOn, null);
                this.NAM2 = defaultOn;
                this.NAM3 = defaultOn;
                this.Aurora = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.NAM0DataTypeState = defaultOn;
                this.FNAMDataTypeState = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((CloudTextures, null));
                ret.Add((DNAM, null));
                ret.Add((CNAM, null));
                ret.Add((ANAM, null));
                ret.Add((BNAM, null));
                ret.Add((LNAM, null));
                ret.Add((Precipitation, null));
                ret.Add((VisualEffect, null));
                ret.Add((ONAM, null));
                ret.Add((Clouds?.Overall ?? true, Clouds?.Specific?.GetCrystal()));
                ret.Add((SkyUpperColor?.Overall ?? true, SkyUpperColor?.Specific?.GetCrystal()));
                ret.Add((FogNearColor?.Overall ?? true, FogNearColor?.Specific?.GetCrystal()));
                ret.Add((UnknownColor?.Overall ?? true, UnknownColor?.Specific?.GetCrystal()));
                ret.Add((AmbientColor?.Overall ?? true, AmbientColor?.Specific?.GetCrystal()));
                ret.Add((SunlightColor?.Overall ?? true, SunlightColor?.Specific?.GetCrystal()));
                ret.Add((SunColor?.Overall ?? true, SunColor?.Specific?.GetCrystal()));
                ret.Add((StarsColor?.Overall ?? true, StarsColor?.Specific?.GetCrystal()));
                ret.Add((SkyLowerColor?.Overall ?? true, SkyLowerColor?.Specific?.GetCrystal()));
                ret.Add((HorizonColor?.Overall ?? true, HorizonColor?.Specific?.GetCrystal()));
                ret.Add((EffectLightingColor?.Overall ?? true, EffectLightingColor?.Specific?.GetCrystal()));
                ret.Add((CloudLodDiffuseColor?.Overall ?? true, CloudLodDiffuseColor?.Specific?.GetCrystal()));
                ret.Add((CloudLodAmbientColor?.Overall ?? true, CloudLodAmbientColor?.Specific?.GetCrystal()));
                ret.Add((FogFarColor?.Overall ?? true, FogFarColor?.Specific?.GetCrystal()));
                ret.Add((SkyStaticsColor?.Overall ?? true, SkyStaticsColor?.Specific?.GetCrystal()));
                ret.Add((WaterMultiplierColor?.Overall ?? true, WaterMultiplierColor?.Specific?.GetCrystal()));
                ret.Add((SunGlareColor?.Overall ?? true, SunGlareColor?.Specific?.GetCrystal()));
                ret.Add((MoonGlareColor?.Overall ?? true, MoonGlareColor?.Specific?.GetCrystal()));
                ret.Add((FogDistanceDayNear, null));
                ret.Add((FogDistanceDayFar, null));
                ret.Add((FogDistanceNightNear, null));
                ret.Add((FogDistanceNightFar, null));
                ret.Add((FogDistanceDayPower, null));
                ret.Add((FogDistanceNightPower, null));
                ret.Add((FogDistanceDayMax, null));
                ret.Add((FogDistanceNightMax, null));
                ret.Add((WindSpeed, null));
                ret.Add((Unknown, null));
                ret.Add((TransDelta, null));
                ret.Add((SunGlare, null));
                ret.Add((SunDamage, null));
                ret.Add((PrecipitationBeginFadeIn, null));
                ret.Add((PrecipitationEndFadeOut, null));
                ret.Add((ThunderLightningBeginFadeIn, null));
                ret.Add((ThunderLightningEndFadeOut, null));
                ret.Add((ThunderLightningFrequency, null));
                ret.Add((Flags, null));
                ret.Add((LightningColor, null));
                ret.Add((VisualEffectBegin, null));
                ret.Add((VisualEffectEnd, null));
                ret.Add((WindDirection, null));
                ret.Add((WindDirectionRange, null));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
                ret.Add((SkyStatics, null));
                ret.Add((ImageSpaces?.Overall ?? true, ImageSpaces?.Specific?.GetCrystal()));
                ret.Add((DirectionalAmbientLightingColors?.Overall ?? true, DirectionalAmbientLightingColors?.Specific?.GetCrystal()));
                ret.Add((NAM2, null));
                ret.Add((NAM3, null));
                ret.Add((Aurora?.Overall ?? true, Aurora?.Specific?.GetCrystal()));
                ret.Add((NAM0DataTypeState, null));
                ret.Add((FNAMDataTypeState, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Weather_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        public Weather(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Weather(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Weather(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [Flags]
        public enum NAM0DataType
        {
            Break0 = 1,
            Break1 = 2
        }
        [Flags]
        public enum FNAMDataType
        {
        }
        [Flags]
        public enum DATADataType
        {
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Weather CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Weather CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Weather item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WeatherSetterCommon)((IWeatherGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weather GetNew()
        {
            return new Weather();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeather :
        IWeatherGetter,
        ISkyrimMajorRecord,
        ILoquiObjectSetter<IWeatherInternal>
    {
        new String?[] CloudTextures { get; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? CNAM { get; set; }
        new MemorySlice<Byte>? ANAM { get; set; }
        new MemorySlice<Byte>? BNAM { get; set; }
        new MemorySlice<Byte>? LNAM { get; set; }
        new FormLinkNullable<ShaderParticleGeometry> Precipitation { get; set; }
        new FormLink<VisualEffect> VisualEffect { get; set; }
        new MemorySlice<Byte>? ONAM { get; set; }
        new CloudLayer[] Clouds { get; }
        new WeatherColor SkyUpperColor { get; set; }
        new WeatherColor FogNearColor { get; set; }
        new WeatherColor UnknownColor { get; set; }
        new WeatherColor AmbientColor { get; set; }
        new WeatherColor SunlightColor { get; set; }
        new WeatherColor SunColor { get; set; }
        new WeatherColor StarsColor { get; set; }
        new WeatherColor SkyLowerColor { get; set; }
        new WeatherColor HorizonColor { get; set; }
        new WeatherColor EffectLightingColor { get; set; }
        new WeatherColor CloudLodDiffuseColor { get; set; }
        new WeatherColor CloudLodAmbientColor { get; set; }
        new WeatherColor FogFarColor { get; set; }
        new WeatherColor SkyStaticsColor { get; set; }
        new WeatherColor WaterMultiplierColor { get; set; }
        new WeatherColor SunGlareColor { get; set; }
        new WeatherColor MoonGlareColor { get; set; }
        new Single FogDistanceDayNear { get; set; }
        new Single FogDistanceDayFar { get; set; }
        new Single FogDistanceNightNear { get; set; }
        new Single FogDistanceNightFar { get; set; }
        new Single FogDistanceDayPower { get; set; }
        new Single FogDistanceNightPower { get; set; }
        new Single FogDistanceDayMax { get; set; }
        new Single FogDistanceNightMax { get; set; }
        new Percent WindSpeed { get; set; }
        new UInt16 Unknown { get; set; }
        new Single TransDelta { get; set; }
        new Percent SunGlare { get; set; }
        new Percent SunDamage { get; set; }
        new Percent PrecipitationBeginFadeIn { get; set; }
        new Percent PrecipitationEndFadeOut { get; set; }
        new Percent ThunderLightningBeginFadeIn { get; set; }
        new Percent ThunderLightningEndFadeOut { get; set; }
        new Percent ThunderLightningFrequency { get; set; }
        new Weather.Flag Flags { get; set; }
        new Color LightningColor { get; set; }
        new Percent VisualEffectBegin { get; set; }
        new Percent VisualEffectEnd { get; set; }
        new Single WindDirection { get; set; }
        new Single WindDirectionRange { get; set; }
        new IExtendedList<WeatherSound> Sounds { get; }
        new IExtendedList<IFormLink<Static>> SkyStatics { get; }
        new WeatherImageSpaces? ImageSpaces { get; set; }
        new WeatherAmbientColorSet? DirectionalAmbientLightingColors { get; set; }
        new MemorySlice<Byte>? NAM2 { get; set; }
        new MemorySlice<Byte>? NAM3 { get; set; }
        new Model? Aurora { get; set; }
        new Weather.NAM0DataType NAM0DataTypeState { get; set; }
        new Weather.FNAMDataType FNAMDataTypeState { get; set; }
        new Weather.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IWeatherInternal :
        ISkyrimMajorRecordInternal,
        IWeather,
        IWeatherGetter
    {
    }

    public partial interface IWeatherGetter :
        ISkyrimMajorRecordGetter,
        ILoquiObject<IWeatherGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Weather_Registration.Instance;
        ReadOnlyMemorySlice<String?> CloudTextures { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        ReadOnlyMemorySlice<Byte>? ANAM { get; }
        ReadOnlyMemorySlice<Byte>? BNAM { get; }
        ReadOnlyMemorySlice<Byte>? LNAM { get; }
        IFormLinkNullable<IShaderParticleGeometryGetter> Precipitation { get; }
        IFormLink<IVisualEffectGetter> VisualEffect { get; }
        ReadOnlyMemorySlice<Byte>? ONAM { get; }
        ReadOnlyMemorySlice<ICloudLayerGetter> Clouds { get; }
        IWeatherColorGetter SkyUpperColor { get; }
        IWeatherColorGetter FogNearColor { get; }
        IWeatherColorGetter UnknownColor { get; }
        IWeatherColorGetter AmbientColor { get; }
        IWeatherColorGetter SunlightColor { get; }
        IWeatherColorGetter SunColor { get; }
        IWeatherColorGetter StarsColor { get; }
        IWeatherColorGetter SkyLowerColor { get; }
        IWeatherColorGetter HorizonColor { get; }
        IWeatherColorGetter EffectLightingColor { get; }
        IWeatherColorGetter CloudLodDiffuseColor { get; }
        IWeatherColorGetter CloudLodAmbientColor { get; }
        IWeatherColorGetter FogFarColor { get; }
        IWeatherColorGetter SkyStaticsColor { get; }
        IWeatherColorGetter WaterMultiplierColor { get; }
        IWeatherColorGetter SunGlareColor { get; }
        IWeatherColorGetter MoonGlareColor { get; }
        Single FogDistanceDayNear { get; }
        Single FogDistanceDayFar { get; }
        Single FogDistanceNightNear { get; }
        Single FogDistanceNightFar { get; }
        Single FogDistanceDayPower { get; }
        Single FogDistanceNightPower { get; }
        Single FogDistanceDayMax { get; }
        Single FogDistanceNightMax { get; }
        Percent WindSpeed { get; }
        UInt16 Unknown { get; }
        Single TransDelta { get; }
        Percent SunGlare { get; }
        Percent SunDamage { get; }
        Percent PrecipitationBeginFadeIn { get; }
        Percent PrecipitationEndFadeOut { get; }
        Percent ThunderLightningBeginFadeIn { get; }
        Percent ThunderLightningEndFadeOut { get; }
        Percent ThunderLightningFrequency { get; }
        Weather.Flag Flags { get; }
        Color LightningColor { get; }
        Percent VisualEffectBegin { get; }
        Percent VisualEffectEnd { get; }
        Single WindDirection { get; }
        Single WindDirectionRange { get; }
        IReadOnlyList<IWeatherSoundGetter> Sounds { get; }
        IReadOnlyList<IFormLink<IStaticGetter>> SkyStatics { get; }
        IWeatherImageSpacesGetter? ImageSpaces { get; }
        IWeatherAmbientColorSetGetter? DirectionalAmbientLightingColors { get; }
        ReadOnlyMemorySlice<Byte>? NAM2 { get; }
        ReadOnlyMemorySlice<Byte>? NAM3 { get; }
        IModelGetter? Aurora { get; }
        Weather.NAM0DataType NAM0DataTypeState { get; }
        Weather.FNAMDataType FNAMDataTypeState { get; }
        Weather.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherMixIn
    {
        public static void Clear(this IWeatherInternal item)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weather.Mask<bool> GetEqualsMask(
            this IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherGetter item,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherGetter item,
            FileGeneration fg,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeatherGetter item,
            Weather.Mask<bool?> checkMask)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Weather.Mask<bool> GetHasBeenSetMask(this IWeatherGetter item)
        {
            var ret = new Weather.Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeatherGetter item,
            IWeatherGetter rhs)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            Weather.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Weather.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum Weather_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        CloudTextures = 6,
        DNAM = 7,
        CNAM = 8,
        ANAM = 9,
        BNAM = 10,
        LNAM = 11,
        Precipitation = 12,
        VisualEffect = 13,
        ONAM = 14,
        Clouds = 15,
        SkyUpperColor = 16,
        FogNearColor = 17,
        UnknownColor = 18,
        AmbientColor = 19,
        SunlightColor = 20,
        SunColor = 21,
        StarsColor = 22,
        SkyLowerColor = 23,
        HorizonColor = 24,
        EffectLightingColor = 25,
        CloudLodDiffuseColor = 26,
        CloudLodAmbientColor = 27,
        FogFarColor = 28,
        SkyStaticsColor = 29,
        WaterMultiplierColor = 30,
        SunGlareColor = 31,
        MoonGlareColor = 32,
        FogDistanceDayNear = 33,
        FogDistanceDayFar = 34,
        FogDistanceNightNear = 35,
        FogDistanceNightFar = 36,
        FogDistanceDayPower = 37,
        FogDistanceNightPower = 38,
        FogDistanceDayMax = 39,
        FogDistanceNightMax = 40,
        WindSpeed = 41,
        Unknown = 42,
        TransDelta = 43,
        SunGlare = 44,
        SunDamage = 45,
        PrecipitationBeginFadeIn = 46,
        PrecipitationEndFadeOut = 47,
        ThunderLightningBeginFadeIn = 48,
        ThunderLightningEndFadeOut = 49,
        ThunderLightningFrequency = 50,
        Flags = 51,
        LightningColor = 52,
        VisualEffectBegin = 53,
        VisualEffectEnd = 54,
        WindDirection = 55,
        WindDirectionRange = 56,
        Sounds = 57,
        SkyStatics = 58,
        ImageSpaces = 59,
        DirectionalAmbientLightingColors = 60,
        NAM2 = 61,
        NAM3 = 62,
        Aurora = 63,
        NAM0DataTypeState = 64,
        FNAMDataTypeState = 65,
        DATADataTypeState = 66,
    }
    #endregion

    #region Registration
    public partial class Weather_Registration : ILoquiRegistration
    {
        public static readonly Weather_Registration Instance = new Weather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 248,
            version: 0);

        public const string GUID = "2a067384-8f2a-4245-9c26-092e2a0351f0";

        public const ushort AdditionalFieldCount = 61;

        public const ushort FieldCount = 67;

        public static readonly Type MaskType = typeof(Weather.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weather.ErrorMask);

        public static readonly Type ClassType = typeof(Weather);

        public static readonly Type GetterType = typeof(IWeatherGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeather);

        public static readonly Type? InternalSetterType = typeof(IWeatherInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Weather";

        public const string Name = "Weather";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CLOUDTEXTURES":
                    return (ushort)Weather_FieldIndex.CloudTextures;
                case "DNAM":
                    return (ushort)Weather_FieldIndex.DNAM;
                case "CNAM":
                    return (ushort)Weather_FieldIndex.CNAM;
                case "ANAM":
                    return (ushort)Weather_FieldIndex.ANAM;
                case "BNAM":
                    return (ushort)Weather_FieldIndex.BNAM;
                case "LNAM":
                    return (ushort)Weather_FieldIndex.LNAM;
                case "PRECIPITATION":
                    return (ushort)Weather_FieldIndex.Precipitation;
                case "VISUALEFFECT":
                    return (ushort)Weather_FieldIndex.VisualEffect;
                case "ONAM":
                    return (ushort)Weather_FieldIndex.ONAM;
                case "CLOUDS":
                    return (ushort)Weather_FieldIndex.Clouds;
                case "SKYUPPERCOLOR":
                    return (ushort)Weather_FieldIndex.SkyUpperColor;
                case "FOGNEARCOLOR":
                    return (ushort)Weather_FieldIndex.FogNearColor;
                case "UNKNOWNCOLOR":
                    return (ushort)Weather_FieldIndex.UnknownColor;
                case "AMBIENTCOLOR":
                    return (ushort)Weather_FieldIndex.AmbientColor;
                case "SUNLIGHTCOLOR":
                    return (ushort)Weather_FieldIndex.SunlightColor;
                case "SUNCOLOR":
                    return (ushort)Weather_FieldIndex.SunColor;
                case "STARSCOLOR":
                    return (ushort)Weather_FieldIndex.StarsColor;
                case "SKYLOWERCOLOR":
                    return (ushort)Weather_FieldIndex.SkyLowerColor;
                case "HORIZONCOLOR":
                    return (ushort)Weather_FieldIndex.HorizonColor;
                case "EFFECTLIGHTINGCOLOR":
                    return (ushort)Weather_FieldIndex.EffectLightingColor;
                case "CLOUDLODDIFFUSECOLOR":
                    return (ushort)Weather_FieldIndex.CloudLodDiffuseColor;
                case "CLOUDLODAMBIENTCOLOR":
                    return (ushort)Weather_FieldIndex.CloudLodAmbientColor;
                case "FOGFARCOLOR":
                    return (ushort)Weather_FieldIndex.FogFarColor;
                case "SKYSTATICSCOLOR":
                    return (ushort)Weather_FieldIndex.SkyStaticsColor;
                case "WATERMULTIPLIERCOLOR":
                    return (ushort)Weather_FieldIndex.WaterMultiplierColor;
                case "SUNGLARECOLOR":
                    return (ushort)Weather_FieldIndex.SunGlareColor;
                case "MOONGLARECOLOR":
                    return (ushort)Weather_FieldIndex.MoonGlareColor;
                case "FOGDISTANCEDAYNEAR":
                    return (ushort)Weather_FieldIndex.FogDistanceDayNear;
                case "FOGDISTANCEDAYFAR":
                    return (ushort)Weather_FieldIndex.FogDistanceDayFar;
                case "FOGDISTANCENIGHTNEAR":
                    return (ushort)Weather_FieldIndex.FogDistanceNightNear;
                case "FOGDISTANCENIGHTFAR":
                    return (ushort)Weather_FieldIndex.FogDistanceNightFar;
                case "FOGDISTANCEDAYPOWER":
                    return (ushort)Weather_FieldIndex.FogDistanceDayPower;
                case "FOGDISTANCENIGHTPOWER":
                    return (ushort)Weather_FieldIndex.FogDistanceNightPower;
                case "FOGDISTANCEDAYMAX":
                    return (ushort)Weather_FieldIndex.FogDistanceDayMax;
                case "FOGDISTANCENIGHTMAX":
                    return (ushort)Weather_FieldIndex.FogDistanceNightMax;
                case "WINDSPEED":
                    return (ushort)Weather_FieldIndex.WindSpeed;
                case "UNKNOWN":
                    return (ushort)Weather_FieldIndex.Unknown;
                case "TRANSDELTA":
                    return (ushort)Weather_FieldIndex.TransDelta;
                case "SUNGLARE":
                    return (ushort)Weather_FieldIndex.SunGlare;
                case "SUNDAMAGE":
                    return (ushort)Weather_FieldIndex.SunDamage;
                case "PRECIPITATIONBEGINFADEIN":
                    return (ushort)Weather_FieldIndex.PrecipitationBeginFadeIn;
                case "PRECIPITATIONENDFADEOUT":
                    return (ushort)Weather_FieldIndex.PrecipitationEndFadeOut;
                case "THUNDERLIGHTNINGBEGINFADEIN":
                    return (ushort)Weather_FieldIndex.ThunderLightningBeginFadeIn;
                case "THUNDERLIGHTNINGENDFADEOUT":
                    return (ushort)Weather_FieldIndex.ThunderLightningEndFadeOut;
                case "THUNDERLIGHTNINGFREQUENCY":
                    return (ushort)Weather_FieldIndex.ThunderLightningFrequency;
                case "FLAGS":
                    return (ushort)Weather_FieldIndex.Flags;
                case "LIGHTNINGCOLOR":
                    return (ushort)Weather_FieldIndex.LightningColor;
                case "VISUALEFFECTBEGIN":
                    return (ushort)Weather_FieldIndex.VisualEffectBegin;
                case "VISUALEFFECTEND":
                    return (ushort)Weather_FieldIndex.VisualEffectEnd;
                case "WINDDIRECTION":
                    return (ushort)Weather_FieldIndex.WindDirection;
                case "WINDDIRECTIONRANGE":
                    return (ushort)Weather_FieldIndex.WindDirectionRange;
                case "SOUNDS":
                    return (ushort)Weather_FieldIndex.Sounds;
                case "SKYSTATICS":
                    return (ushort)Weather_FieldIndex.SkyStatics;
                case "IMAGESPACES":
                    return (ushort)Weather_FieldIndex.ImageSpaces;
                case "DIRECTIONALAMBIENTLIGHTINGCOLORS":
                    return (ushort)Weather_FieldIndex.DirectionalAmbientLightingColors;
                case "NAM2":
                    return (ushort)Weather_FieldIndex.NAM2;
                case "NAM3":
                    return (ushort)Weather_FieldIndex.NAM3;
                case "AURORA":
                    return (ushort)Weather_FieldIndex.Aurora;
                case "NAM0DATATYPESTATE":
                    return (ushort)Weather_FieldIndex.NAM0DataTypeState;
                case "FNAMDATATYPESTATE":
                    return (ushort)Weather_FieldIndex.FNAMDataTypeState;
                case "DATADATATYPESTATE":
                    return (ushort)Weather_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.CloudTextures:
                case Weather_FieldIndex.Clouds:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.SkyStatics:
                    return true;
                case Weather_FieldIndex.DNAM:
                case Weather_FieldIndex.CNAM:
                case Weather_FieldIndex.ANAM:
                case Weather_FieldIndex.BNAM:
                case Weather_FieldIndex.LNAM:
                case Weather_FieldIndex.Precipitation:
                case Weather_FieldIndex.VisualEffect:
                case Weather_FieldIndex.ONAM:
                case Weather_FieldIndex.SkyUpperColor:
                case Weather_FieldIndex.FogNearColor:
                case Weather_FieldIndex.UnknownColor:
                case Weather_FieldIndex.AmbientColor:
                case Weather_FieldIndex.SunlightColor:
                case Weather_FieldIndex.SunColor:
                case Weather_FieldIndex.StarsColor:
                case Weather_FieldIndex.SkyLowerColor:
                case Weather_FieldIndex.HorizonColor:
                case Weather_FieldIndex.EffectLightingColor:
                case Weather_FieldIndex.CloudLodDiffuseColor:
                case Weather_FieldIndex.CloudLodAmbientColor:
                case Weather_FieldIndex.FogFarColor:
                case Weather_FieldIndex.SkyStaticsColor:
                case Weather_FieldIndex.WaterMultiplierColor:
                case Weather_FieldIndex.SunGlareColor:
                case Weather_FieldIndex.MoonGlareColor:
                case Weather_FieldIndex.FogDistanceDayNear:
                case Weather_FieldIndex.FogDistanceDayFar:
                case Weather_FieldIndex.FogDistanceNightNear:
                case Weather_FieldIndex.FogDistanceNightFar:
                case Weather_FieldIndex.FogDistanceDayPower:
                case Weather_FieldIndex.FogDistanceNightPower:
                case Weather_FieldIndex.FogDistanceDayMax:
                case Weather_FieldIndex.FogDistanceNightMax:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.Unknown:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Flags:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.VisualEffectBegin:
                case Weather_FieldIndex.VisualEffectEnd:
                case Weather_FieldIndex.WindDirection:
                case Weather_FieldIndex.WindDirectionRange:
                case Weather_FieldIndex.ImageSpaces:
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                case Weather_FieldIndex.NAM2:
                case Weather_FieldIndex.NAM3:
                case Weather_FieldIndex.Aurora:
                case Weather_FieldIndex.NAM0DataTypeState:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.Clouds:
                case Weather_FieldIndex.SkyUpperColor:
                case Weather_FieldIndex.FogNearColor:
                case Weather_FieldIndex.UnknownColor:
                case Weather_FieldIndex.AmbientColor:
                case Weather_FieldIndex.SunlightColor:
                case Weather_FieldIndex.SunColor:
                case Weather_FieldIndex.StarsColor:
                case Weather_FieldIndex.SkyLowerColor:
                case Weather_FieldIndex.HorizonColor:
                case Weather_FieldIndex.EffectLightingColor:
                case Weather_FieldIndex.CloudLodDiffuseColor:
                case Weather_FieldIndex.CloudLodAmbientColor:
                case Weather_FieldIndex.FogFarColor:
                case Weather_FieldIndex.SkyStaticsColor:
                case Weather_FieldIndex.WaterMultiplierColor:
                case Weather_FieldIndex.SunGlareColor:
                case Weather_FieldIndex.MoonGlareColor:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.ImageSpaces:
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                case Weather_FieldIndex.Aurora:
                    return true;
                case Weather_FieldIndex.CloudTextures:
                case Weather_FieldIndex.DNAM:
                case Weather_FieldIndex.CNAM:
                case Weather_FieldIndex.ANAM:
                case Weather_FieldIndex.BNAM:
                case Weather_FieldIndex.LNAM:
                case Weather_FieldIndex.Precipitation:
                case Weather_FieldIndex.VisualEffect:
                case Weather_FieldIndex.ONAM:
                case Weather_FieldIndex.FogDistanceDayNear:
                case Weather_FieldIndex.FogDistanceDayFar:
                case Weather_FieldIndex.FogDistanceNightNear:
                case Weather_FieldIndex.FogDistanceNightFar:
                case Weather_FieldIndex.FogDistanceDayPower:
                case Weather_FieldIndex.FogDistanceNightPower:
                case Weather_FieldIndex.FogDistanceDayMax:
                case Weather_FieldIndex.FogDistanceNightMax:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.Unknown:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Flags:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.VisualEffectBegin:
                case Weather_FieldIndex.VisualEffectEnd:
                case Weather_FieldIndex.WindDirection:
                case Weather_FieldIndex.WindDirectionRange:
                case Weather_FieldIndex.SkyStatics:
                case Weather_FieldIndex.NAM2:
                case Weather_FieldIndex.NAM3:
                case Weather_FieldIndex.NAM0DataTypeState:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.CloudTextures:
                case Weather_FieldIndex.DNAM:
                case Weather_FieldIndex.CNAM:
                case Weather_FieldIndex.ANAM:
                case Weather_FieldIndex.BNAM:
                case Weather_FieldIndex.LNAM:
                case Weather_FieldIndex.Precipitation:
                case Weather_FieldIndex.VisualEffect:
                case Weather_FieldIndex.ONAM:
                case Weather_FieldIndex.Clouds:
                case Weather_FieldIndex.SkyUpperColor:
                case Weather_FieldIndex.FogNearColor:
                case Weather_FieldIndex.UnknownColor:
                case Weather_FieldIndex.AmbientColor:
                case Weather_FieldIndex.SunlightColor:
                case Weather_FieldIndex.SunColor:
                case Weather_FieldIndex.StarsColor:
                case Weather_FieldIndex.SkyLowerColor:
                case Weather_FieldIndex.HorizonColor:
                case Weather_FieldIndex.EffectLightingColor:
                case Weather_FieldIndex.CloudLodDiffuseColor:
                case Weather_FieldIndex.CloudLodAmbientColor:
                case Weather_FieldIndex.FogFarColor:
                case Weather_FieldIndex.SkyStaticsColor:
                case Weather_FieldIndex.WaterMultiplierColor:
                case Weather_FieldIndex.SunGlareColor:
                case Weather_FieldIndex.MoonGlareColor:
                case Weather_FieldIndex.FogDistanceDayNear:
                case Weather_FieldIndex.FogDistanceDayFar:
                case Weather_FieldIndex.FogDistanceNightNear:
                case Weather_FieldIndex.FogDistanceNightFar:
                case Weather_FieldIndex.FogDistanceDayPower:
                case Weather_FieldIndex.FogDistanceNightPower:
                case Weather_FieldIndex.FogDistanceDayMax:
                case Weather_FieldIndex.FogDistanceNightMax:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.Unknown:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Flags:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.VisualEffectBegin:
                case Weather_FieldIndex.VisualEffectEnd:
                case Weather_FieldIndex.WindDirection:
                case Weather_FieldIndex.WindDirectionRange:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.SkyStatics:
                case Weather_FieldIndex.ImageSpaces:
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                case Weather_FieldIndex.NAM2:
                case Weather_FieldIndex.NAM3:
                case Weather_FieldIndex.Aurora:
                case Weather_FieldIndex.NAM0DataTypeState:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.CloudTextures:
                    return "CloudTextures";
                case Weather_FieldIndex.DNAM:
                    return "DNAM";
                case Weather_FieldIndex.CNAM:
                    return "CNAM";
                case Weather_FieldIndex.ANAM:
                    return "ANAM";
                case Weather_FieldIndex.BNAM:
                    return "BNAM";
                case Weather_FieldIndex.LNAM:
                    return "LNAM";
                case Weather_FieldIndex.Precipitation:
                    return "Precipitation";
                case Weather_FieldIndex.VisualEffect:
                    return "VisualEffect";
                case Weather_FieldIndex.ONAM:
                    return "ONAM";
                case Weather_FieldIndex.Clouds:
                    return "Clouds";
                case Weather_FieldIndex.SkyUpperColor:
                    return "SkyUpperColor";
                case Weather_FieldIndex.FogNearColor:
                    return "FogNearColor";
                case Weather_FieldIndex.UnknownColor:
                    return "UnknownColor";
                case Weather_FieldIndex.AmbientColor:
                    return "AmbientColor";
                case Weather_FieldIndex.SunlightColor:
                    return "SunlightColor";
                case Weather_FieldIndex.SunColor:
                    return "SunColor";
                case Weather_FieldIndex.StarsColor:
                    return "StarsColor";
                case Weather_FieldIndex.SkyLowerColor:
                    return "SkyLowerColor";
                case Weather_FieldIndex.HorizonColor:
                    return "HorizonColor";
                case Weather_FieldIndex.EffectLightingColor:
                    return "EffectLightingColor";
                case Weather_FieldIndex.CloudLodDiffuseColor:
                    return "CloudLodDiffuseColor";
                case Weather_FieldIndex.CloudLodAmbientColor:
                    return "CloudLodAmbientColor";
                case Weather_FieldIndex.FogFarColor:
                    return "FogFarColor";
                case Weather_FieldIndex.SkyStaticsColor:
                    return "SkyStaticsColor";
                case Weather_FieldIndex.WaterMultiplierColor:
                    return "WaterMultiplierColor";
                case Weather_FieldIndex.SunGlareColor:
                    return "SunGlareColor";
                case Weather_FieldIndex.MoonGlareColor:
                    return "MoonGlareColor";
                case Weather_FieldIndex.FogDistanceDayNear:
                    return "FogDistanceDayNear";
                case Weather_FieldIndex.FogDistanceDayFar:
                    return "FogDistanceDayFar";
                case Weather_FieldIndex.FogDistanceNightNear:
                    return "FogDistanceNightNear";
                case Weather_FieldIndex.FogDistanceNightFar:
                    return "FogDistanceNightFar";
                case Weather_FieldIndex.FogDistanceDayPower:
                    return "FogDistanceDayPower";
                case Weather_FieldIndex.FogDistanceNightPower:
                    return "FogDistanceNightPower";
                case Weather_FieldIndex.FogDistanceDayMax:
                    return "FogDistanceDayMax";
                case Weather_FieldIndex.FogDistanceNightMax:
                    return "FogDistanceNightMax";
                case Weather_FieldIndex.WindSpeed:
                    return "WindSpeed";
                case Weather_FieldIndex.Unknown:
                    return "Unknown";
                case Weather_FieldIndex.TransDelta:
                    return "TransDelta";
                case Weather_FieldIndex.SunGlare:
                    return "SunGlare";
                case Weather_FieldIndex.SunDamage:
                    return "SunDamage";
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return "PrecipitationBeginFadeIn";
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return "PrecipitationEndFadeOut";
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return "ThunderLightningBeginFadeIn";
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return "ThunderLightningEndFadeOut";
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return "ThunderLightningFrequency";
                case Weather_FieldIndex.Flags:
                    return "Flags";
                case Weather_FieldIndex.LightningColor:
                    return "LightningColor";
                case Weather_FieldIndex.VisualEffectBegin:
                    return "VisualEffectBegin";
                case Weather_FieldIndex.VisualEffectEnd:
                    return "VisualEffectEnd";
                case Weather_FieldIndex.WindDirection:
                    return "WindDirection";
                case Weather_FieldIndex.WindDirectionRange:
                    return "WindDirectionRange";
                case Weather_FieldIndex.Sounds:
                    return "Sounds";
                case Weather_FieldIndex.SkyStatics:
                    return "SkyStatics";
                case Weather_FieldIndex.ImageSpaces:
                    return "ImageSpaces";
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                    return "DirectionalAmbientLightingColors";
                case Weather_FieldIndex.NAM2:
                    return "NAM2";
                case Weather_FieldIndex.NAM3:
                    return "NAM3";
                case Weather_FieldIndex.Aurora:
                    return "Aurora";
                case Weather_FieldIndex.NAM0DataTypeState:
                    return "NAM0DataTypeState";
                case Weather_FieldIndex.FNAMDataTypeState:
                    return "FNAMDataTypeState";
                case Weather_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return SkyrimMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.CloudTextures:
                case Weather_FieldIndex.DNAM:
                case Weather_FieldIndex.CNAM:
                case Weather_FieldIndex.ANAM:
                case Weather_FieldIndex.BNAM:
                case Weather_FieldIndex.LNAM:
                case Weather_FieldIndex.Precipitation:
                case Weather_FieldIndex.VisualEffect:
                case Weather_FieldIndex.ONAM:
                case Weather_FieldIndex.Clouds:
                case Weather_FieldIndex.SkyUpperColor:
                case Weather_FieldIndex.FogNearColor:
                case Weather_FieldIndex.UnknownColor:
                case Weather_FieldIndex.AmbientColor:
                case Weather_FieldIndex.SunlightColor:
                case Weather_FieldIndex.SunColor:
                case Weather_FieldIndex.StarsColor:
                case Weather_FieldIndex.SkyLowerColor:
                case Weather_FieldIndex.HorizonColor:
                case Weather_FieldIndex.EffectLightingColor:
                case Weather_FieldIndex.CloudLodDiffuseColor:
                case Weather_FieldIndex.CloudLodAmbientColor:
                case Weather_FieldIndex.FogFarColor:
                case Weather_FieldIndex.SkyStaticsColor:
                case Weather_FieldIndex.WaterMultiplierColor:
                case Weather_FieldIndex.SunGlareColor:
                case Weather_FieldIndex.MoonGlareColor:
                case Weather_FieldIndex.FogDistanceDayNear:
                case Weather_FieldIndex.FogDistanceDayFar:
                case Weather_FieldIndex.FogDistanceNightNear:
                case Weather_FieldIndex.FogDistanceNightFar:
                case Weather_FieldIndex.FogDistanceDayPower:
                case Weather_FieldIndex.FogDistanceNightPower:
                case Weather_FieldIndex.FogDistanceDayMax:
                case Weather_FieldIndex.FogDistanceNightMax:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.Unknown:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Flags:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.VisualEffectBegin:
                case Weather_FieldIndex.VisualEffectEnd:
                case Weather_FieldIndex.WindDirection:
                case Weather_FieldIndex.WindDirectionRange:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.SkyStatics:
                case Weather_FieldIndex.ImageSpaces:
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                case Weather_FieldIndex.NAM2:
                case Weather_FieldIndex.NAM3:
                case Weather_FieldIndex.Aurora:
                case Weather_FieldIndex.NAM0DataTypeState:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.CloudTextures:
                case Weather_FieldIndex.DNAM:
                case Weather_FieldIndex.CNAM:
                case Weather_FieldIndex.ANAM:
                case Weather_FieldIndex.BNAM:
                case Weather_FieldIndex.LNAM:
                case Weather_FieldIndex.Precipitation:
                case Weather_FieldIndex.VisualEffect:
                case Weather_FieldIndex.ONAM:
                case Weather_FieldIndex.Clouds:
                case Weather_FieldIndex.SkyUpperColor:
                case Weather_FieldIndex.FogNearColor:
                case Weather_FieldIndex.UnknownColor:
                case Weather_FieldIndex.AmbientColor:
                case Weather_FieldIndex.SunlightColor:
                case Weather_FieldIndex.SunColor:
                case Weather_FieldIndex.StarsColor:
                case Weather_FieldIndex.SkyLowerColor:
                case Weather_FieldIndex.HorizonColor:
                case Weather_FieldIndex.EffectLightingColor:
                case Weather_FieldIndex.CloudLodDiffuseColor:
                case Weather_FieldIndex.CloudLodAmbientColor:
                case Weather_FieldIndex.FogFarColor:
                case Weather_FieldIndex.SkyStaticsColor:
                case Weather_FieldIndex.WaterMultiplierColor:
                case Weather_FieldIndex.SunGlareColor:
                case Weather_FieldIndex.MoonGlareColor:
                case Weather_FieldIndex.FogDistanceDayNear:
                case Weather_FieldIndex.FogDistanceDayFar:
                case Weather_FieldIndex.FogDistanceNightNear:
                case Weather_FieldIndex.FogDistanceNightFar:
                case Weather_FieldIndex.FogDistanceDayPower:
                case Weather_FieldIndex.FogDistanceNightPower:
                case Weather_FieldIndex.FogDistanceDayMax:
                case Weather_FieldIndex.FogDistanceNightMax:
                case Weather_FieldIndex.WindSpeed:
                case Weather_FieldIndex.Unknown:
                case Weather_FieldIndex.TransDelta:
                case Weather_FieldIndex.SunGlare:
                case Weather_FieldIndex.SunDamage:
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                case Weather_FieldIndex.ThunderLightningFrequency:
                case Weather_FieldIndex.Flags:
                case Weather_FieldIndex.LightningColor:
                case Weather_FieldIndex.VisualEffectBegin:
                case Weather_FieldIndex.VisualEffectEnd:
                case Weather_FieldIndex.WindDirection:
                case Weather_FieldIndex.WindDirectionRange:
                case Weather_FieldIndex.Sounds:
                case Weather_FieldIndex.SkyStatics:
                case Weather_FieldIndex.ImageSpaces:
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                case Weather_FieldIndex.NAM2:
                case Weather_FieldIndex.NAM3:
                case Weather_FieldIndex.Aurora:
                case Weather_FieldIndex.NAM0DataTypeState:
                case Weather_FieldIndex.FNAMDataTypeState:
                case Weather_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return SkyrimMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Weather_FieldIndex enu = (Weather_FieldIndex)index;
            switch (enu)
            {
                case Weather_FieldIndex.CloudTextures:
                    return typeof(String[]);
                case Weather_FieldIndex.DNAM:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.CNAM:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.ANAM:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.BNAM:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.LNAM:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.Precipitation:
                    return typeof(FormLinkNullable<ShaderParticleGeometry>);
                case Weather_FieldIndex.VisualEffect:
                    return typeof(FormLink<VisualEffect>);
                case Weather_FieldIndex.ONAM:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.Clouds:
                    return typeof(CloudLayer[]);
                case Weather_FieldIndex.SkyUpperColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.FogNearColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.UnknownColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.AmbientColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.SunlightColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.SunColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.StarsColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.SkyLowerColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.HorizonColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.EffectLightingColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.CloudLodDiffuseColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.CloudLodAmbientColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.FogFarColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.SkyStaticsColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.WaterMultiplierColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.SunGlareColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.MoonGlareColor:
                    return typeof(WeatherColor);
                case Weather_FieldIndex.FogDistanceDayNear:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceDayFar:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceNightNear:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceNightFar:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceDayPower:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceNightPower:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceDayMax:
                    return typeof(Single);
                case Weather_FieldIndex.FogDistanceNightMax:
                    return typeof(Single);
                case Weather_FieldIndex.WindSpeed:
                    return typeof(Percent);
                case Weather_FieldIndex.Unknown:
                    return typeof(UInt16);
                case Weather_FieldIndex.TransDelta:
                    return typeof(Single);
                case Weather_FieldIndex.SunGlare:
                    return typeof(Percent);
                case Weather_FieldIndex.SunDamage:
                    return typeof(Percent);
                case Weather_FieldIndex.PrecipitationBeginFadeIn:
                    return typeof(Percent);
                case Weather_FieldIndex.PrecipitationEndFadeOut:
                    return typeof(Percent);
                case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                    return typeof(Percent);
                case Weather_FieldIndex.ThunderLightningEndFadeOut:
                    return typeof(Percent);
                case Weather_FieldIndex.ThunderLightningFrequency:
                    return typeof(Percent);
                case Weather_FieldIndex.Flags:
                    return typeof(Weather.Flag);
                case Weather_FieldIndex.LightningColor:
                    return typeof(Color);
                case Weather_FieldIndex.VisualEffectBegin:
                    return typeof(Percent);
                case Weather_FieldIndex.VisualEffectEnd:
                    return typeof(Percent);
                case Weather_FieldIndex.WindDirection:
                    return typeof(Single);
                case Weather_FieldIndex.WindDirectionRange:
                    return typeof(Single);
                case Weather_FieldIndex.Sounds:
                    return typeof(IExtendedList<WeatherSound>);
                case Weather_FieldIndex.SkyStatics:
                    return typeof(IExtendedList<IFormLink<Static>>);
                case Weather_FieldIndex.ImageSpaces:
                    return typeof(WeatherImageSpaces);
                case Weather_FieldIndex.DirectionalAmbientLightingColors:
                    return typeof(WeatherAmbientColorSet);
                case Weather_FieldIndex.NAM2:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.NAM3:
                    return typeof(MemorySlice<Byte>);
                case Weather_FieldIndex.Aurora:
                    return typeof(Model);
                case Weather_FieldIndex.NAM0DataTypeState:
                    return typeof(Weather.NAM0DataType);
                case Weather_FieldIndex.FNAMDataTypeState:
                    return typeof(Weather.FNAMDataType);
                case Weather_FieldIndex.DATADataTypeState:
                    return typeof(Weather.DATADataType);
                default:
                    return SkyrimMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeatherXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.WTHR;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly WeatherSetterCommon Instance = new WeatherSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherInternal item)
        {
            ClearPartial();
            item.CloudTextures.ResetToNull();
            item.DNAM = default;
            item.CNAM = default;
            item.ANAM = default;
            item.BNAM = default;
            item.LNAM = default;
            item.Precipitation = FormLinkNullable<ShaderParticleGeometry>.Null;
            item.VisualEffect = FormLink<VisualEffect>.Null;
            item.ONAM = default;
            item.Clouds.Fill(() => new CloudLayer());
            item.SkyUpperColor.Clear();
            item.FogNearColor.Clear();
            item.UnknownColor.Clear();
            item.AmbientColor.Clear();
            item.SunlightColor.Clear();
            item.SunColor.Clear();
            item.StarsColor.Clear();
            item.SkyLowerColor.Clear();
            item.HorizonColor.Clear();
            item.EffectLightingColor.Clear();
            item.CloudLodDiffuseColor.Clear();
            item.CloudLodAmbientColor.Clear();
            item.FogFarColor.Clear();
            item.SkyStaticsColor.Clear();
            item.WaterMultiplierColor.Clear();
            item.SunGlareColor.Clear();
            item.MoonGlareColor.Clear();
            item.FogDistanceDayNear = default;
            item.FogDistanceDayFar = default;
            item.FogDistanceNightNear = default;
            item.FogDistanceNightFar = default;
            item.FogDistanceDayPower = default;
            item.FogDistanceNightPower = default;
            item.FogDistanceDayMax = default;
            item.FogDistanceNightMax = default;
            item.WindSpeed = default;
            item.Unknown = default;
            item.TransDelta = default;
            item.SunGlare = default;
            item.SunDamage = default;
            item.PrecipitationBeginFadeIn = default;
            item.PrecipitationEndFadeOut = default;
            item.ThunderLightningBeginFadeIn = default;
            item.ThunderLightningEndFadeOut = default;
            item.ThunderLightningFrequency = default;
            item.Flags = default;
            item.LightningColor = default;
            item.VisualEffectBegin = default;
            item.VisualEffectEnd = default;
            item.WindDirection = default;
            item.WindDirectionRange = default;
            item.Sounds.Clear();
            item.SkyStatics.Clear();
            item.ImageSpaces = null;
            item.DirectionalAmbientLightingColors = null;
            item.NAM2 = default;
            item.NAM3 = default;
            item.Aurora = null;
            item.NAM0DataTypeState = default;
            item.FNAMDataTypeState = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IWeatherInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    SkyrimMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.NAM0DataTypeState |= Weather.NAM0DataType.Break0;
                item.NAM0DataTypeState |= Weather.NAM0DataType.Break1;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WeatherXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Weather)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Weather)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeatherInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IWeatherInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WeatherBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WeatherBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Weather)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Weather)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class WeatherCommon : SkyrimMajorRecordCommon
    {
        public new static readonly WeatherCommon Instance = new WeatherCommon();

        public Weather.Mask<bool> GetEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weather.Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            Weather.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.CloudTextures = item.CloudTextures.SpanEqualsHelper(
                rhs.CloudTextures,
                (l, r) => string.Equals(l, r),
                include);
            ret.DNAM = MemorySliceExt.Equal(item.DNAM, rhs.DNAM);
            ret.CNAM = MemorySliceExt.Equal(item.CNAM, rhs.CNAM);
            ret.ANAM = MemorySliceExt.Equal(item.ANAM, rhs.ANAM);
            ret.BNAM = MemorySliceExt.Equal(item.BNAM, rhs.BNAM);
            ret.LNAM = MemorySliceExt.Equal(item.LNAM, rhs.LNAM);
            ret.Precipitation = object.Equals(item.Precipitation, rhs.Precipitation);
            ret.VisualEffect = object.Equals(item.VisualEffect, rhs.VisualEffect);
            ret.ONAM = MemorySliceExt.Equal(item.ONAM, rhs.ONAM);
            ret.Clouds = item.Clouds.SpanEqualsHelper(
                rhs.Clouds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SkyUpperColor = MaskItemExt.Factory(item.SkyUpperColor.GetEqualsMask(rhs.SkyUpperColor, include), include);
            ret.FogNearColor = MaskItemExt.Factory(item.FogNearColor.GetEqualsMask(rhs.FogNearColor, include), include);
            ret.UnknownColor = MaskItemExt.Factory(item.UnknownColor.GetEqualsMask(rhs.UnknownColor, include), include);
            ret.AmbientColor = MaskItemExt.Factory(item.AmbientColor.GetEqualsMask(rhs.AmbientColor, include), include);
            ret.SunlightColor = MaskItemExt.Factory(item.SunlightColor.GetEqualsMask(rhs.SunlightColor, include), include);
            ret.SunColor = MaskItemExt.Factory(item.SunColor.GetEqualsMask(rhs.SunColor, include), include);
            ret.StarsColor = MaskItemExt.Factory(item.StarsColor.GetEqualsMask(rhs.StarsColor, include), include);
            ret.SkyLowerColor = MaskItemExt.Factory(item.SkyLowerColor.GetEqualsMask(rhs.SkyLowerColor, include), include);
            ret.HorizonColor = MaskItemExt.Factory(item.HorizonColor.GetEqualsMask(rhs.HorizonColor, include), include);
            ret.EffectLightingColor = MaskItemExt.Factory(item.EffectLightingColor.GetEqualsMask(rhs.EffectLightingColor, include), include);
            ret.CloudLodDiffuseColor = MaskItemExt.Factory(item.CloudLodDiffuseColor.GetEqualsMask(rhs.CloudLodDiffuseColor, include), include);
            ret.CloudLodAmbientColor = MaskItemExt.Factory(item.CloudLodAmbientColor.GetEqualsMask(rhs.CloudLodAmbientColor, include), include);
            ret.FogFarColor = MaskItemExt.Factory(item.FogFarColor.GetEqualsMask(rhs.FogFarColor, include), include);
            ret.SkyStaticsColor = MaskItemExt.Factory(item.SkyStaticsColor.GetEqualsMask(rhs.SkyStaticsColor, include), include);
            ret.WaterMultiplierColor = MaskItemExt.Factory(item.WaterMultiplierColor.GetEqualsMask(rhs.WaterMultiplierColor, include), include);
            ret.SunGlareColor = MaskItemExt.Factory(item.SunGlareColor.GetEqualsMask(rhs.SunGlareColor, include), include);
            ret.MoonGlareColor = MaskItemExt.Factory(item.MoonGlareColor.GetEqualsMask(rhs.MoonGlareColor, include), include);
            ret.FogDistanceDayNear = item.FogDistanceDayNear.EqualsWithin(rhs.FogDistanceDayNear);
            ret.FogDistanceDayFar = item.FogDistanceDayFar.EqualsWithin(rhs.FogDistanceDayFar);
            ret.FogDistanceNightNear = item.FogDistanceNightNear.EqualsWithin(rhs.FogDistanceNightNear);
            ret.FogDistanceNightFar = item.FogDistanceNightFar.EqualsWithin(rhs.FogDistanceNightFar);
            ret.FogDistanceDayPower = item.FogDistanceDayPower.EqualsWithin(rhs.FogDistanceDayPower);
            ret.FogDistanceNightPower = item.FogDistanceNightPower.EqualsWithin(rhs.FogDistanceNightPower);
            ret.FogDistanceDayMax = item.FogDistanceDayMax.EqualsWithin(rhs.FogDistanceDayMax);
            ret.FogDistanceNightMax = item.FogDistanceNightMax.EqualsWithin(rhs.FogDistanceNightMax);
            ret.WindSpeed = item.WindSpeed.Equals(rhs.WindSpeed);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.TransDelta = item.TransDelta.EqualsWithin(rhs.TransDelta);
            ret.SunGlare = item.SunGlare.Equals(rhs.SunGlare);
            ret.SunDamage = item.SunDamage.Equals(rhs.SunDamage);
            ret.PrecipitationBeginFadeIn = item.PrecipitationBeginFadeIn.Equals(rhs.PrecipitationBeginFadeIn);
            ret.PrecipitationEndFadeOut = item.PrecipitationEndFadeOut.Equals(rhs.PrecipitationEndFadeOut);
            ret.ThunderLightningBeginFadeIn = item.ThunderLightningBeginFadeIn.Equals(rhs.ThunderLightningBeginFadeIn);
            ret.ThunderLightningEndFadeOut = item.ThunderLightningEndFadeOut.Equals(rhs.ThunderLightningEndFadeOut);
            ret.ThunderLightningFrequency = item.ThunderLightningFrequency.Equals(rhs.ThunderLightningFrequency);
            ret.Flags = item.Flags == rhs.Flags;
            ret.LightningColor = item.LightningColor.ColorOnlyEquals(rhs.LightningColor);
            ret.VisualEffectBegin = item.VisualEffectBegin.Equals(rhs.VisualEffectBegin);
            ret.VisualEffectEnd = item.VisualEffectEnd.Equals(rhs.VisualEffectEnd);
            ret.WindDirection = item.WindDirection.EqualsWithin(rhs.WindDirection);
            ret.WindDirectionRange = item.WindDirectionRange.EqualsWithin(rhs.WindDirectionRange);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SkyStatics = item.SkyStatics.CollectionEqualsHelper(
                rhs.SkyStatics,
                (l, r) => object.Equals(l, r),
                include);
            ret.ImageSpaces = EqualsMaskHelper.EqualsHelper(
                item.ImageSpaces,
                rhs.ImageSpaces,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DirectionalAmbientLightingColors = EqualsMaskHelper.EqualsHelper(
                item.DirectionalAmbientLightingColors,
                rhs.DirectionalAmbientLightingColors,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NAM2 = MemorySliceExt.Equal(item.NAM2, rhs.NAM2);
            ret.NAM3 = MemorySliceExt.Equal(item.NAM3, rhs.NAM3);
            ret.Aurora = EqualsMaskHelper.EqualsHelper(
                item.Aurora,
                rhs.Aurora,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NAM0DataTypeState = item.NAM0DataTypeState == rhs.NAM0DataTypeState;
            ret.FNAMDataTypeState = item.FNAMDataTypeState == rhs.FNAMDataTypeState;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWeatherGetter item,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherGetter item,
            FileGeneration fg,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Weather =>");
            }
            else
            {
                fg.AppendLine($"{name} (Weather) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherGetter item,
            FileGeneration fg,
            Weather.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.CloudTextures?.Overall ?? true)
            {
                fg.AppendLine("CloudTextures =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.CloudTextures)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM.TryGet(out var DNAMItem))
            {
                fg.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM.TryGet(out var CNAMItem))
            {
                fg.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if ((printMask?.ANAM ?? true)
                && item.ANAM.TryGet(out var ANAMItem))
            {
                fg.AppendLine($"ANAM => {SpanExt.ToHexString(ANAMItem)}");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM.TryGet(out var BNAMItem))
            {
                fg.AppendLine($"BNAM => {SpanExt.ToHexString(BNAMItem)}");
            }
            if ((printMask?.LNAM ?? true)
                && item.LNAM.TryGet(out var LNAMItem))
            {
                fg.AppendLine($"LNAM => {SpanExt.ToHexString(LNAMItem)}");
            }
            if ((printMask?.Precipitation ?? true)
                && item.Precipitation.TryGet(out var PrecipitationItem))
            {
                fg.AppendItem(PrecipitationItem, "Precipitation");
            }
            if (printMask?.VisualEffect ?? true)
            {
                fg.AppendItem(item.VisualEffect, "VisualEffect");
            }
            if ((printMask?.ONAM ?? true)
                && item.ONAM.TryGet(out var ONAMItem))
            {
                fg.AppendLine($"ONAM => {SpanExt.ToHexString(ONAMItem)}");
            }
            if (printMask?.Clouds?.Overall ?? true)
            {
                fg.AppendLine("Clouds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Clouds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SkyUpperColor?.Overall ?? true)
            {
                item.SkyUpperColor?.ToString(fg, "SkyUpperColor");
            }
            if (printMask?.FogNearColor?.Overall ?? true)
            {
                item.FogNearColor?.ToString(fg, "FogNearColor");
            }
            if (printMask?.UnknownColor?.Overall ?? true)
            {
                item.UnknownColor?.ToString(fg, "UnknownColor");
            }
            if (printMask?.AmbientColor?.Overall ?? true)
            {
                item.AmbientColor?.ToString(fg, "AmbientColor");
            }
            if (printMask?.SunlightColor?.Overall ?? true)
            {
                item.SunlightColor?.ToString(fg, "SunlightColor");
            }
            if (printMask?.SunColor?.Overall ?? true)
            {
                item.SunColor?.ToString(fg, "SunColor");
            }
            if (printMask?.StarsColor?.Overall ?? true)
            {
                item.StarsColor?.ToString(fg, "StarsColor");
            }
            if (printMask?.SkyLowerColor?.Overall ?? true)
            {
                item.SkyLowerColor?.ToString(fg, "SkyLowerColor");
            }
            if (printMask?.HorizonColor?.Overall ?? true)
            {
                item.HorizonColor?.ToString(fg, "HorizonColor");
            }
            if (printMask?.EffectLightingColor?.Overall ?? true)
            {
                item.EffectLightingColor?.ToString(fg, "EffectLightingColor");
            }
            if (printMask?.CloudLodDiffuseColor?.Overall ?? true)
            {
                item.CloudLodDiffuseColor?.ToString(fg, "CloudLodDiffuseColor");
            }
            if (printMask?.CloudLodAmbientColor?.Overall ?? true)
            {
                item.CloudLodAmbientColor?.ToString(fg, "CloudLodAmbientColor");
            }
            if (printMask?.FogFarColor?.Overall ?? true)
            {
                item.FogFarColor?.ToString(fg, "FogFarColor");
            }
            if (printMask?.SkyStaticsColor?.Overall ?? true)
            {
                item.SkyStaticsColor?.ToString(fg, "SkyStaticsColor");
            }
            if (printMask?.WaterMultiplierColor?.Overall ?? true)
            {
                item.WaterMultiplierColor?.ToString(fg, "WaterMultiplierColor");
            }
            if (printMask?.SunGlareColor?.Overall ?? true)
            {
                item.SunGlareColor?.ToString(fg, "SunGlareColor");
            }
            if (printMask?.MoonGlareColor?.Overall ?? true)
            {
                item.MoonGlareColor?.ToString(fg, "MoonGlareColor");
            }
            if (printMask?.FogDistanceDayNear ?? true)
            {
                fg.AppendItem(item.FogDistanceDayNear, "FogDistanceDayNear");
            }
            if (printMask?.FogDistanceDayFar ?? true)
            {
                fg.AppendItem(item.FogDistanceDayFar, "FogDistanceDayFar");
            }
            if (printMask?.FogDistanceNightNear ?? true)
            {
                fg.AppendItem(item.FogDistanceNightNear, "FogDistanceNightNear");
            }
            if (printMask?.FogDistanceNightFar ?? true)
            {
                fg.AppendItem(item.FogDistanceNightFar, "FogDistanceNightFar");
            }
            if (printMask?.FogDistanceDayPower ?? true)
            {
                fg.AppendItem(item.FogDistanceDayPower, "FogDistanceDayPower");
            }
            if (printMask?.FogDistanceNightPower ?? true)
            {
                fg.AppendItem(item.FogDistanceNightPower, "FogDistanceNightPower");
            }
            if (printMask?.FogDistanceDayMax ?? true)
            {
                fg.AppendItem(item.FogDistanceDayMax, "FogDistanceDayMax");
            }
            if (printMask?.FogDistanceNightMax ?? true)
            {
                fg.AppendItem(item.FogDistanceNightMax, "FogDistanceNightMax");
            }
            if (printMask?.WindSpeed ?? true)
            {
                fg.AppendItem(item.WindSpeed, "WindSpeed");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.TransDelta ?? true)
            {
                fg.AppendItem(item.TransDelta, "TransDelta");
            }
            if (printMask?.SunGlare ?? true)
            {
                fg.AppendItem(item.SunGlare, "SunGlare");
            }
            if (printMask?.SunDamage ?? true)
            {
                fg.AppendItem(item.SunDamage, "SunDamage");
            }
            if (printMask?.PrecipitationBeginFadeIn ?? true)
            {
                fg.AppendItem(item.PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
            }
            if (printMask?.PrecipitationEndFadeOut ?? true)
            {
                fg.AppendItem(item.PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
            }
            if (printMask?.ThunderLightningBeginFadeIn ?? true)
            {
                fg.AppendItem(item.ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
            }
            if (printMask?.ThunderLightningEndFadeOut ?? true)
            {
                fg.AppendItem(item.ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
            }
            if (printMask?.ThunderLightningFrequency ?? true)
            {
                fg.AppendItem(item.ThunderLightningFrequency, "ThunderLightningFrequency");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.LightningColor ?? true)
            {
                fg.AppendItem(item.LightningColor, "LightningColor");
            }
            if (printMask?.VisualEffectBegin ?? true)
            {
                fg.AppendItem(item.VisualEffectBegin, "VisualEffectBegin");
            }
            if (printMask?.VisualEffectEnd ?? true)
            {
                fg.AppendItem(item.VisualEffectEnd, "VisualEffectEnd");
            }
            if (printMask?.WindDirection ?? true)
            {
                fg.AppendItem(item.WindDirection, "WindDirection");
            }
            if (printMask?.WindDirectionRange ?? true)
            {
                fg.AppendItem(item.WindDirectionRange, "WindDirectionRange");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Sounds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SkyStatics?.Overall ?? true)
            {
                fg.AppendLine("SkyStatics =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SkyStatics)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.ImageSpaces?.Overall ?? true)
                && item.ImageSpaces.TryGet(out var ImageSpacesItem))
            {
                ImageSpacesItem?.ToString(fg, "ImageSpaces");
            }
            if ((printMask?.DirectionalAmbientLightingColors?.Overall ?? true)
                && item.DirectionalAmbientLightingColors.TryGet(out var DirectionalAmbientLightingColorsItem))
            {
                DirectionalAmbientLightingColorsItem?.ToString(fg, "DirectionalAmbientLightingColors");
            }
            if ((printMask?.NAM2 ?? true)
                && item.NAM2.TryGet(out var NAM2Item))
            {
                fg.AppendLine($"NAM2 => {SpanExt.ToHexString(NAM2Item)}");
            }
            if ((printMask?.NAM3 ?? true)
                && item.NAM3.TryGet(out var NAM3Item))
            {
                fg.AppendLine($"NAM3 => {SpanExt.ToHexString(NAM3Item)}");
            }
            if ((printMask?.Aurora?.Overall ?? true)
                && item.Aurora.TryGet(out var AuroraItem))
            {
                AuroraItem?.ToString(fg, "Aurora");
            }
            if (printMask?.NAM0DataTypeState ?? true)
            {
                fg.AppendItem(item.NAM0DataTypeState, "NAM0DataTypeState");
            }
            if (printMask?.FNAMDataTypeState ?? true)
            {
                fg.AppendItem(item.FNAMDataTypeState, "FNAMDataTypeState");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IWeatherGetter item,
            Weather.Mask<bool?> checkMask)
        {
            if (checkMask.DNAM.HasValue && checkMask.DNAM.Value != (item.DNAM != null)) return false;
            if (checkMask.CNAM.HasValue && checkMask.CNAM.Value != (item.CNAM != null)) return false;
            if (checkMask.ANAM.HasValue && checkMask.ANAM.Value != (item.ANAM != null)) return false;
            if (checkMask.BNAM.HasValue && checkMask.BNAM.Value != (item.BNAM != null)) return false;
            if (checkMask.LNAM.HasValue && checkMask.LNAM.Value != (item.LNAM != null)) return false;
            if (checkMask.Precipitation.HasValue && checkMask.Precipitation.Value != (item.Precipitation.FormKey != null)) return false;
            if (checkMask.ONAM.HasValue && checkMask.ONAM.Value != (item.ONAM != null)) return false;
            if (checkMask.ImageSpaces?.Overall.HasValue ?? false && checkMask.ImageSpaces.Overall.Value != (item.ImageSpaces != null)) return false;
            if (checkMask.ImageSpaces?.Specific != null && (item.ImageSpaces == null || !item.ImageSpaces.HasBeenSet(checkMask.ImageSpaces.Specific))) return false;
            if (checkMask.DirectionalAmbientLightingColors?.Overall.HasValue ?? false && checkMask.DirectionalAmbientLightingColors.Overall.Value != (item.DirectionalAmbientLightingColors != null)) return false;
            if (checkMask.DirectionalAmbientLightingColors?.Specific != null && (item.DirectionalAmbientLightingColors == null || !item.DirectionalAmbientLightingColors.HasBeenSet(checkMask.DirectionalAmbientLightingColors.Specific))) return false;
            if (checkMask.NAM2.HasValue && checkMask.NAM2.Value != (item.NAM2 != null)) return false;
            if (checkMask.NAM3.HasValue && checkMask.NAM3.Value != (item.NAM3 != null)) return false;
            if (checkMask.Aurora?.Overall.HasValue ?? false && checkMask.Aurora.Overall.Value != (item.Aurora != null)) return false;
            if (checkMask.Aurora?.Specific != null && (item.Aurora == null || !item.Aurora.HasBeenSet(checkMask.Aurora.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWeatherGetter item,
            Weather.Mask<bool> mask)
        {
            mask.CloudTextures = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.DNAM = (item.DNAM != null);
            mask.CNAM = (item.CNAM != null);
            mask.ANAM = (item.ANAM != null);
            mask.BNAM = (item.BNAM != null);
            mask.LNAM = (item.LNAM != null);
            mask.Precipitation = (item.Precipitation.FormKey != null);
            mask.VisualEffect = true;
            mask.ONAM = (item.ONAM != null);
            var CloudsItem = item.Clouds;
            mask.Clouds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, CloudLayer.Mask<bool>?>>?>(true, CloudsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, CloudLayer.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.SkyUpperColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.SkyUpperColor?.GetHasBeenSetMask());
            mask.FogNearColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.FogNearColor?.GetHasBeenSetMask());
            mask.UnknownColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.UnknownColor?.GetHasBeenSetMask());
            mask.AmbientColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.AmbientColor?.GetHasBeenSetMask());
            mask.SunlightColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.SunlightColor?.GetHasBeenSetMask());
            mask.SunColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.SunColor?.GetHasBeenSetMask());
            mask.StarsColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.StarsColor?.GetHasBeenSetMask());
            mask.SkyLowerColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.SkyLowerColor?.GetHasBeenSetMask());
            mask.HorizonColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.HorizonColor?.GetHasBeenSetMask());
            mask.EffectLightingColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.EffectLightingColor?.GetHasBeenSetMask());
            mask.CloudLodDiffuseColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.CloudLodDiffuseColor?.GetHasBeenSetMask());
            mask.CloudLodAmbientColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.CloudLodAmbientColor?.GetHasBeenSetMask());
            mask.FogFarColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.FogFarColor?.GetHasBeenSetMask());
            mask.SkyStaticsColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.SkyStaticsColor?.GetHasBeenSetMask());
            mask.WaterMultiplierColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.WaterMultiplierColor?.GetHasBeenSetMask());
            mask.SunGlareColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.SunGlareColor?.GetHasBeenSetMask());
            mask.MoonGlareColor = new MaskItem<bool, WeatherColor.Mask<bool>?>(true, item.MoonGlareColor?.GetHasBeenSetMask());
            mask.FogDistanceDayNear = true;
            mask.FogDistanceDayFar = true;
            mask.FogDistanceNightNear = true;
            mask.FogDistanceNightFar = true;
            mask.FogDistanceDayPower = true;
            mask.FogDistanceNightPower = true;
            mask.FogDistanceDayMax = true;
            mask.FogDistanceNightMax = true;
            mask.WindSpeed = true;
            mask.Unknown = true;
            mask.TransDelta = true;
            mask.SunGlare = true;
            mask.SunDamage = true;
            mask.PrecipitationBeginFadeIn = true;
            mask.PrecipitationEndFadeOut = true;
            mask.ThunderLightningBeginFadeIn = true;
            mask.ThunderLightningEndFadeOut = true;
            mask.ThunderLightningFrequency = true;
            mask.Flags = true;
            mask.LightningColor = true;
            mask.VisualEffectBegin = true;
            mask.VisualEffectEnd = true;
            mask.WindDirection = true;
            mask.WindDirectionRange = true;
            var SoundsItem = item.Sounds;
            mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WeatherSound.Mask<bool>?>>?>(true, SoundsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WeatherSound.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.SkyStatics = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            var itemImageSpaces = item.ImageSpaces;
            mask.ImageSpaces = new MaskItem<bool, WeatherImageSpaces.Mask<bool>?>(itemImageSpaces != null, itemImageSpaces?.GetHasBeenSetMask());
            var itemDirectionalAmbientLightingColors = item.DirectionalAmbientLightingColors;
            mask.DirectionalAmbientLightingColors = new MaskItem<bool, WeatherAmbientColorSet.Mask<bool>?>(itemDirectionalAmbientLightingColors != null, itemDirectionalAmbientLightingColors?.GetHasBeenSetMask());
            mask.NAM2 = (item.NAM2 != null);
            mask.NAM3 = (item.NAM3 != null);
            var itemAurora = item.Aurora;
            mask.Aurora = new MaskItem<bool, Model.Mask<bool>?>(itemAurora != null, itemAurora?.GetHasBeenSetMask());
            mask.NAM0DataTypeState = true;
            mask.FNAMDataTypeState = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Weather_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Weather_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherGetter? lhs,
            IWeatherGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.CloudTextures.Span, rhs.CloudTextures.Span)) return false;
            if (!MemorySliceExt.Equal(lhs.DNAM, rhs.DNAM)) return false;
            if (!MemorySliceExt.Equal(lhs.CNAM, rhs.CNAM)) return false;
            if (!MemorySliceExt.Equal(lhs.ANAM, rhs.ANAM)) return false;
            if (!MemorySliceExt.Equal(lhs.BNAM, rhs.BNAM)) return false;
            if (!MemorySliceExt.Equal(lhs.LNAM, rhs.LNAM)) return false;
            if (!lhs.Precipitation.Equals(rhs.Precipitation)) return false;
            if (!lhs.VisualEffect.Equals(rhs.VisualEffect)) return false;
            if (!MemorySliceExt.Equal(lhs.ONAM, rhs.ONAM)) return false;
            if (!lhs.Clouds.SequenceEqual(rhs.Clouds)) return false;
            if (!object.Equals(lhs.SkyUpperColor, rhs.SkyUpperColor)) return false;
            if (!object.Equals(lhs.FogNearColor, rhs.FogNearColor)) return false;
            if (!object.Equals(lhs.UnknownColor, rhs.UnknownColor)) return false;
            if (!object.Equals(lhs.AmbientColor, rhs.AmbientColor)) return false;
            if (!object.Equals(lhs.SunlightColor, rhs.SunlightColor)) return false;
            if (!object.Equals(lhs.SunColor, rhs.SunColor)) return false;
            if (!object.Equals(lhs.StarsColor, rhs.StarsColor)) return false;
            if (!object.Equals(lhs.SkyLowerColor, rhs.SkyLowerColor)) return false;
            if (!object.Equals(lhs.HorizonColor, rhs.HorizonColor)) return false;
            if (!object.Equals(lhs.EffectLightingColor, rhs.EffectLightingColor)) return false;
            if (!object.Equals(lhs.CloudLodDiffuseColor, rhs.CloudLodDiffuseColor)) return false;
            if (!object.Equals(lhs.CloudLodAmbientColor, rhs.CloudLodAmbientColor)) return false;
            if (!object.Equals(lhs.FogFarColor, rhs.FogFarColor)) return false;
            if (!object.Equals(lhs.SkyStaticsColor, rhs.SkyStaticsColor)) return false;
            if (!object.Equals(lhs.WaterMultiplierColor, rhs.WaterMultiplierColor)) return false;
            if (!object.Equals(lhs.SunGlareColor, rhs.SunGlareColor)) return false;
            if (!object.Equals(lhs.MoonGlareColor, rhs.MoonGlareColor)) return false;
            if (!lhs.FogDistanceDayNear.EqualsWithin(rhs.FogDistanceDayNear)) return false;
            if (!lhs.FogDistanceDayFar.EqualsWithin(rhs.FogDistanceDayFar)) return false;
            if (!lhs.FogDistanceNightNear.EqualsWithin(rhs.FogDistanceNightNear)) return false;
            if (!lhs.FogDistanceNightFar.EqualsWithin(rhs.FogDistanceNightFar)) return false;
            if (!lhs.FogDistanceDayPower.EqualsWithin(rhs.FogDistanceDayPower)) return false;
            if (!lhs.FogDistanceNightPower.EqualsWithin(rhs.FogDistanceNightPower)) return false;
            if (!lhs.FogDistanceDayMax.EqualsWithin(rhs.FogDistanceDayMax)) return false;
            if (!lhs.FogDistanceNightMax.EqualsWithin(rhs.FogDistanceNightMax)) return false;
            if (!lhs.WindSpeed.Equals(rhs.WindSpeed)) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (!lhs.TransDelta.EqualsWithin(rhs.TransDelta)) return false;
            if (!lhs.SunGlare.Equals(rhs.SunGlare)) return false;
            if (!lhs.SunDamage.Equals(rhs.SunDamage)) return false;
            if (!lhs.PrecipitationBeginFadeIn.Equals(rhs.PrecipitationBeginFadeIn)) return false;
            if (!lhs.PrecipitationEndFadeOut.Equals(rhs.PrecipitationEndFadeOut)) return false;
            if (!lhs.ThunderLightningBeginFadeIn.Equals(rhs.ThunderLightningBeginFadeIn)) return false;
            if (!lhs.ThunderLightningEndFadeOut.Equals(rhs.ThunderLightningEndFadeOut)) return false;
            if (!lhs.ThunderLightningFrequency.Equals(rhs.ThunderLightningFrequency)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.LightningColor.ColorOnlyEquals(rhs.LightningColor)) return false;
            if (!lhs.VisualEffectBegin.Equals(rhs.VisualEffectBegin)) return false;
            if (!lhs.VisualEffectEnd.Equals(rhs.VisualEffectEnd)) return false;
            if (!lhs.WindDirection.EqualsWithin(rhs.WindDirection)) return false;
            if (!lhs.WindDirectionRange.EqualsWithin(rhs.WindDirectionRange)) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            if (!lhs.SkyStatics.SequenceEqual(rhs.SkyStatics)) return false;
            if (!object.Equals(lhs.ImageSpaces, rhs.ImageSpaces)) return false;
            if (!object.Equals(lhs.DirectionalAmbientLightingColors, rhs.DirectionalAmbientLightingColors)) return false;
            if (!MemorySliceExt.Equal(lhs.NAM2, rhs.NAM2)) return false;
            if (!MemorySliceExt.Equal(lhs.NAM3, rhs.NAM3)) return false;
            if (!object.Equals(lhs.Aurora, rhs.Aurora)) return false;
            if (lhs.NAM0DataTypeState != rhs.NAM0DataTypeState) return false;
            if (lhs.FNAMDataTypeState != rhs.FNAMDataTypeState) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter);
        }
        
        public virtual int GetHashCode(IWeatherGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CloudTextures);
            if (item.DNAM.TryGet(out var DNAMItem))
            {
                hash.Add(DNAMItem);
            }
            if (item.CNAM.TryGet(out var CNAMItem))
            {
                hash.Add(CNAMItem);
            }
            if (item.ANAM.TryGet(out var ANAMItem))
            {
                hash.Add(ANAMItem);
            }
            if (item.BNAM.TryGet(out var BNAMItem))
            {
                hash.Add(BNAMItem);
            }
            if (item.LNAM.TryGet(out var LNAMItem))
            {
                hash.Add(LNAMItem);
            }
            if (item.Precipitation.TryGet(out var Precipitationitem))
            {
                hash.Add(Precipitationitem);
            }
            hash.Add(item.VisualEffect);
            if (item.ONAM.TryGet(out var ONAMItem))
            {
                hash.Add(ONAMItem);
            }
            hash.Add(item.Clouds);
            hash.Add(item.SkyUpperColor);
            hash.Add(item.FogNearColor);
            hash.Add(item.UnknownColor);
            hash.Add(item.AmbientColor);
            hash.Add(item.SunlightColor);
            hash.Add(item.SunColor);
            hash.Add(item.StarsColor);
            hash.Add(item.SkyLowerColor);
            hash.Add(item.HorizonColor);
            hash.Add(item.EffectLightingColor);
            hash.Add(item.CloudLodDiffuseColor);
            hash.Add(item.CloudLodAmbientColor);
            hash.Add(item.FogFarColor);
            hash.Add(item.SkyStaticsColor);
            hash.Add(item.WaterMultiplierColor);
            hash.Add(item.SunGlareColor);
            hash.Add(item.MoonGlareColor);
            hash.Add(item.FogDistanceDayNear);
            hash.Add(item.FogDistanceDayFar);
            hash.Add(item.FogDistanceNightNear);
            hash.Add(item.FogDistanceNightFar);
            hash.Add(item.FogDistanceDayPower);
            hash.Add(item.FogDistanceNightPower);
            hash.Add(item.FogDistanceDayMax);
            hash.Add(item.FogDistanceNightMax);
            hash.Add(item.WindSpeed);
            hash.Add(item.Unknown);
            hash.Add(item.TransDelta);
            hash.Add(item.SunGlare);
            hash.Add(item.SunDamage);
            hash.Add(item.PrecipitationBeginFadeIn);
            hash.Add(item.PrecipitationEndFadeOut);
            hash.Add(item.ThunderLightningBeginFadeIn);
            hash.Add(item.ThunderLightningEndFadeOut);
            hash.Add(item.ThunderLightningFrequency);
            hash.Add(item.Flags);
            hash.Add(item.LightningColor);
            hash.Add(item.VisualEffectBegin);
            hash.Add(item.VisualEffectEnd);
            hash.Add(item.WindDirection);
            hash.Add(item.WindDirectionRange);
            hash.Add(item.Sounds);
            hash.Add(item.SkyStatics);
            if (item.ImageSpaces.TryGet(out var ImageSpacesitem))
            {
                hash.Add(ImageSpacesitem);
            }
            if (item.DirectionalAmbientLightingColors.TryGet(out var DirectionalAmbientLightingColorsitem))
            {
                hash.Add(DirectionalAmbientLightingColorsitem);
            }
            if (item.NAM2.TryGet(out var NAM2Item))
            {
                hash.Add(NAM2Item);
            }
            if (item.NAM3.TryGet(out var NAM3Item))
            {
                hash.Add(NAM3Item);
            }
            if (item.Aurora.TryGet(out var Auroraitem))
            {
                hash.Add(Auroraitem);
            }
            hash.Add(item.NAM0DataTypeState);
            hash.Add(item.FNAMDataTypeState);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weather.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWeatherGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Precipitation.FormKey.TryGet(out var PrecipitationKey))
            {
                yield return PrecipitationKey;
            }
            yield return obj.VisualEffect.FormKey;
            foreach (var item in obj.Sounds.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.SkyStatics.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.ImageSpaces.TryGet(out var ImageSpacesItems))
            {
                foreach (var item in ImageSpacesItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Aurora.TryGet(out var AuroraItems))
            {
                foreach (var item in AuroraItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IWeatherGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Weather obj, Weather rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Weather(getNextFormKey());
            ret.DeepCopyIn((Weather)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Weather)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class WeatherSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly WeatherSetterTranslationCommon Instance = new WeatherSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWeatherInternal item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IWeather item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudTextures) ?? true))
            {
                item.CloudTextures.SetTo(rhs.CloudTextures);
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM.TryGet(out var DNAMrhs))
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM.TryGet(out var CNAMrhs))
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ANAM) ?? true))
            {
                if(rhs.ANAM.TryGet(out var ANAMrhs))
                {
                    item.ANAM = ANAMrhs.ToArray();
                }
                else
                {
                    item.ANAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.BNAM) ?? true))
            {
                if(rhs.BNAM.TryGet(out var BNAMrhs))
                {
                    item.BNAM = BNAMrhs.ToArray();
                }
                else
                {
                    item.BNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.LNAM) ?? true))
            {
                if(rhs.LNAM.TryGet(out var LNAMrhs))
                {
                    item.LNAM = LNAMrhs.ToArray();
                }
                else
                {
                    item.LNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Precipitation) ?? true))
            {
                item.Precipitation = rhs.Precipitation.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffect) ?? true))
            {
                item.VisualEffect = rhs.VisualEffect.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ONAM) ?? true))
            {
                if(rhs.ONAM.TryGet(out var ONAMrhs))
                {
                    item.ONAM = ONAMrhs.ToArray();
                }
                else
                {
                    item.ONAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Clouds) ?? true))
            {
                item.Clouds.SetTo(
                    rhs.Clouds
                    .Select(r =>
                    {
                        return r.DeepCopy(
                            errorMask: errorMask,
                            default(TranslationCrystal));
                    }));
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyUpperColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyUpperColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyUpperColor) ?? true))
                    {
                        item.SkyUpperColor = rhs.SkyUpperColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SkyUpperColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNearColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.FogNearColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNearColor) ?? true))
                    {
                        item.FogNearColor = rhs.FogNearColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.FogNearColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.UnknownColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.UnknownColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.UnknownColor) ?? true))
                    {
                        item.UnknownColor = rhs.UnknownColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.UnknownColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.AmbientColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.AmbientColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.AmbientColor) ?? true))
                    {
                        item.AmbientColor = rhs.AmbientColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.AmbientColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunlightColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SunlightColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunlightColor) ?? true))
                    {
                        item.SunlightColor = rhs.SunlightColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SunlightColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SunColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunColor) ?? true))
                    {
                        item.SunColor = rhs.SunColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SunColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.StarsColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.StarsColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.StarsColor) ?? true))
                    {
                        item.StarsColor = rhs.StarsColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.StarsColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyLowerColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyLowerColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyLowerColor) ?? true))
                    {
                        item.SkyLowerColor = rhs.SkyLowerColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SkyLowerColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HorizonColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.HorizonColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HorizonColor) ?? true))
                    {
                        item.HorizonColor = rhs.HorizonColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.HorizonColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.EffectLightingColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.EffectLightingColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.EffectLightingColor) ?? true))
                    {
                        item.EffectLightingColor = rhs.EffectLightingColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.EffectLightingColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodDiffuseColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.CloudLodDiffuseColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodDiffuseColor) ?? true))
                    {
                        item.CloudLodDiffuseColor = rhs.CloudLodDiffuseColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodDiffuseColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodAmbientColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.CloudLodAmbientColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodAmbientColor) ?? true))
                    {
                        item.CloudLodAmbientColor = rhs.CloudLodAmbientColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodAmbientColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogFarColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.FogFarColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogFarColor) ?? true))
                    {
                        item.FogFarColor = rhs.FogFarColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.FogFarColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStaticsColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyStaticsColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStaticsColor) ?? true))
                    {
                        item.SkyStaticsColor = rhs.SkyStaticsColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SkyStaticsColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WaterMultiplierColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.WaterMultiplierColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WaterMultiplierColor) ?? true))
                    {
                        item.WaterMultiplierColor = rhs.WaterMultiplierColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.WaterMultiplierColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SunGlareColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareColor) ?? true))
                    {
                        item.SunGlareColor = rhs.SunGlareColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SunGlareColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.MoonGlareColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.MoonGlareColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.MoonGlareColor) ?? true))
                    {
                        item.MoonGlareColor = rhs.MoonGlareColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.MoonGlareColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayNear) ?? true))
            {
                item.FogDistanceDayNear = rhs.FogDistanceDayNear;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayFar) ?? true))
            {
                item.FogDistanceDayFar = rhs.FogDistanceDayFar;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightNear) ?? true))
            {
                item.FogDistanceNightNear = rhs.FogDistanceNightNear;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightFar) ?? true))
            {
                item.FogDistanceNightFar = rhs.FogDistanceNightFar;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayPower) ?? true))
            {
                item.FogDistanceDayPower = rhs.FogDistanceDayPower;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightPower) ?? true))
            {
                item.FogDistanceNightPower = rhs.FogDistanceNightPower;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayMax) ?? true))
            {
                item.FogDistanceDayMax = rhs.FogDistanceDayMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightMax) ?? true))
            {
                item.FogDistanceNightMax = rhs.FogDistanceNightMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
            {
                item.WindSpeed = rhs.WindSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
            {
                item.TransDelta = rhs.TransDelta;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
            {
                item.SunGlare = rhs.SunGlare;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
            {
                item.SunDamage = rhs.SunDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                item.PrecipitationBeginFadeIn = rhs.PrecipitationBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                item.PrecipitationEndFadeOut = rhs.PrecipitationEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                item.ThunderLightningBeginFadeIn = rhs.ThunderLightningBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                item.ThunderLightningEndFadeOut = rhs.ThunderLightningEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                item.ThunderLightningFrequency = rhs.ThunderLightningFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
            {
                item.LightningColor = rhs.LightningColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectBegin) ?? true))
            {
                item.VisualEffectBegin = rhs.VisualEffectBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectEnd) ?? true))
            {
                item.VisualEffectEnd = rhs.VisualEffectEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirection) ?? true))
            {
                item.WindDirection = rhs.WindDirection;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirectionRange) ?? true))
            {
                item.WindDirectionRange = rhs.WindDirectionRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStatics) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyStatics);
                try
                {
                    item.SkyStatics.SetTo(
                        rhs.SkyStatics
                        .Select(r => (IFormLink<Static>)new FormLink<Static>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.ImageSpaces);
                try
                {
                    if(rhs.ImageSpaces.TryGet(out var rhsImageSpaces))
                    {
                        item.ImageSpaces = rhsImageSpaces.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.ImageSpaces));
                    }
                    else
                    {
                        item.ImageSpaces = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.DirectionalAmbientLightingColors) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.DirectionalAmbientLightingColors);
                try
                {
                    if(rhs.DirectionalAmbientLightingColors.TryGet(out var rhsDirectionalAmbientLightingColors))
                    {
                        item.DirectionalAmbientLightingColors = rhsDirectionalAmbientLightingColors.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.DirectionalAmbientLightingColors));
                    }
                    else
                    {
                        item.DirectionalAmbientLightingColors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM2) ?? true))
            {
                if(rhs.NAM2.TryGet(out var NAM2rhs))
                {
                    item.NAM2 = NAM2rhs.ToArray();
                }
                else
                {
                    item.NAM2 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM3) ?? true))
            {
                if(rhs.NAM3.TryGet(out var NAM3rhs))
                {
                    item.NAM3 = NAM3rhs.ToArray();
                }
                else
                {
                    item.NAM3 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Aurora) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Aurora);
                try
                {
                    if(rhs.Aurora.TryGet(out var rhsAurora))
                    {
                        item.Aurora = rhsAurora.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.Aurora));
                    }
                    else
                    {
                        item.Aurora = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM0DataTypeState) ?? true))
            {
                item.NAM0DataTypeState = rhs.NAM0DataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FNAMDataTypeState) ?? true))
            {
                item.FNAMDataTypeState = rhs.FNAMDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Weather DeepCopy(
            IWeatherGetter item,
            Weather.TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Weather
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeatherSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WeatherXmlWriteTranslation :
        SkyrimMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WeatherXmlWriteTranslation Instance = new WeatherXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeatherGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SkyrimMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudTextures) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.CloudTextures),
                    item: item.CloudTextures,
                    fieldIndex: (int)Weather_FieldIndex.CloudTextures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.CloudTextures),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.DNAM != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.DNAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DNAM),
                    item: item.DNAM.Value,
                    fieldIndex: (int)Weather_FieldIndex.DNAM,
                    errorMask: errorMask);
            }
            if ((item.CNAM != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CNAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CNAM),
                    item: item.CNAM.Value,
                    fieldIndex: (int)Weather_FieldIndex.CNAM,
                    errorMask: errorMask);
            }
            if ((item.ANAM != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ANAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ANAM),
                    item: item.ANAM.Value,
                    fieldIndex: (int)Weather_FieldIndex.ANAM,
                    errorMask: errorMask);
            }
            if ((item.BNAM != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.BNAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BNAM),
                    item: item.BNAM.Value,
                    fieldIndex: (int)Weather_FieldIndex.BNAM,
                    errorMask: errorMask);
            }
            if ((item.LNAM != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.LNAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LNAM),
                    item: item.LNAM.Value,
                    fieldIndex: (int)Weather_FieldIndex.LNAM,
                    errorMask: errorMask);
            }
            if ((item.Precipitation.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Precipitation) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Precipitation),
                    item: item.Precipitation.FormKey,
                    fieldIndex: (int)Weather_FieldIndex.Precipitation,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffect) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisualEffect),
                    item: item.VisualEffect.FormKey,
                    fieldIndex: (int)Weather_FieldIndex.VisualEffect,
                    errorMask: errorMask);
            }
            if ((item.ONAM != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ONAM) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ONAM),
                    item: item.ONAM.Value,
                    fieldIndex: (int)Weather_FieldIndex.ONAM,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Clouds) ?? true))
            {
                ListXmlTranslation<ICloudLayerGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Clouds),
                    item: item.Clouds,
                    fieldIndex: (int)Weather_FieldIndex.Clouds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Clouds),
                    transl: (XElement subNode, ICloudLayerGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((CloudLayerXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyUpperColor) ?? true))
            {
                var SkyUpperColorItem = item.SkyUpperColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)SkyUpperColorItem).XmlWriteTranslator).Write(
                    item: SkyUpperColorItem,
                    node: node,
                    name: nameof(item.SkyUpperColor),
                    fieldIndex: (int)Weather_FieldIndex.SkyUpperColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyUpperColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNearColor) ?? true))
            {
                var FogNearColorItem = item.FogNearColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)FogNearColorItem).XmlWriteTranslator).Write(
                    item: FogNearColorItem,
                    node: node,
                    name: nameof(item.FogNearColor),
                    fieldIndex: (int)Weather_FieldIndex.FogNearColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.FogNearColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.UnknownColor) ?? true))
            {
                var UnknownColorItem = item.UnknownColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)UnknownColorItem).XmlWriteTranslator).Write(
                    item: UnknownColorItem,
                    node: node,
                    name: nameof(item.UnknownColor),
                    fieldIndex: (int)Weather_FieldIndex.UnknownColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.UnknownColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.AmbientColor) ?? true))
            {
                var AmbientColorItem = item.AmbientColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)AmbientColorItem).XmlWriteTranslator).Write(
                    item: AmbientColorItem,
                    node: node,
                    name: nameof(item.AmbientColor),
                    fieldIndex: (int)Weather_FieldIndex.AmbientColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.AmbientColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunlightColor) ?? true))
            {
                var SunlightColorItem = item.SunlightColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)SunlightColorItem).XmlWriteTranslator).Write(
                    item: SunlightColorItem,
                    node: node,
                    name: nameof(item.SunlightColor),
                    fieldIndex: (int)Weather_FieldIndex.SunlightColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SunlightColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunColor) ?? true))
            {
                var SunColorItem = item.SunColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)SunColorItem).XmlWriteTranslator).Write(
                    item: SunColorItem,
                    node: node,
                    name: nameof(item.SunColor),
                    fieldIndex: (int)Weather_FieldIndex.SunColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SunColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.StarsColor) ?? true))
            {
                var StarsColorItem = item.StarsColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)StarsColorItem).XmlWriteTranslator).Write(
                    item: StarsColorItem,
                    node: node,
                    name: nameof(item.StarsColor),
                    fieldIndex: (int)Weather_FieldIndex.StarsColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.StarsColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyLowerColor) ?? true))
            {
                var SkyLowerColorItem = item.SkyLowerColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)SkyLowerColorItem).XmlWriteTranslator).Write(
                    item: SkyLowerColorItem,
                    node: node,
                    name: nameof(item.SkyLowerColor),
                    fieldIndex: (int)Weather_FieldIndex.SkyLowerColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyLowerColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.HorizonColor) ?? true))
            {
                var HorizonColorItem = item.HorizonColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)HorizonColorItem).XmlWriteTranslator).Write(
                    item: HorizonColorItem,
                    node: node,
                    name: nameof(item.HorizonColor),
                    fieldIndex: (int)Weather_FieldIndex.HorizonColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.HorizonColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.EffectLightingColor) ?? true))
            {
                var EffectLightingColorItem = item.EffectLightingColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)EffectLightingColorItem).XmlWriteTranslator).Write(
                    item: EffectLightingColorItem,
                    node: node,
                    name: nameof(item.EffectLightingColor),
                    fieldIndex: (int)Weather_FieldIndex.EffectLightingColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.EffectLightingColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodDiffuseColor) ?? true))
            {
                var CloudLodDiffuseColorItem = item.CloudLodDiffuseColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)CloudLodDiffuseColorItem).XmlWriteTranslator).Write(
                    item: CloudLodDiffuseColorItem,
                    node: node,
                    name: nameof(item.CloudLodDiffuseColor),
                    fieldIndex: (int)Weather_FieldIndex.CloudLodDiffuseColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodDiffuseColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodAmbientColor) ?? true))
            {
                var CloudLodAmbientColorItem = item.CloudLodAmbientColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)CloudLodAmbientColorItem).XmlWriteTranslator).Write(
                    item: CloudLodAmbientColorItem,
                    node: node,
                    name: nameof(item.CloudLodAmbientColor),
                    fieldIndex: (int)Weather_FieldIndex.CloudLodAmbientColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodAmbientColor));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogFarColor) ?? true))
            {
                var FogFarColorItem = item.FogFarColor;
                ((WeatherColorXmlWriteTranslation)((IXmlItem)FogFarColorItem).XmlWriteTranslator).Write(
                    item: FogFarColorItem,
                    node: node,
                    name: nameof(item.FogFarColor),
                    fieldIndex: (int)Weather_FieldIndex.FogFarColor,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.FogFarColor));
            }
            if (!item.NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break0))
            {
                if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStaticsColor) ?? true))
                {
                    var SkyStaticsColorItem = item.SkyStaticsColor;
                    ((WeatherColorXmlWriteTranslation)((IXmlItem)SkyStaticsColorItem).XmlWriteTranslator).Write(
                        item: SkyStaticsColorItem,
                        node: node,
                        name: nameof(item.SkyStaticsColor),
                        fieldIndex: (int)Weather_FieldIndex.SkyStaticsColor,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyStaticsColor));
                }
                if (!item.NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1))
                {
                    if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WaterMultiplierColor) ?? true))
                    {
                        var WaterMultiplierColorItem = item.WaterMultiplierColor;
                        ((WeatherColorXmlWriteTranslation)((IXmlItem)WaterMultiplierColorItem).XmlWriteTranslator).Write(
                            item: WaterMultiplierColorItem,
                            node: node,
                            name: nameof(item.WaterMultiplierColor),
                            fieldIndex: (int)Weather_FieldIndex.WaterMultiplierColor,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.WaterMultiplierColor));
                    }
                    if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareColor) ?? true))
                    {
                        var SunGlareColorItem = item.SunGlareColor;
                        ((WeatherColorXmlWriteTranslation)((IXmlItem)SunGlareColorItem).XmlWriteTranslator).Write(
                            item: SunGlareColorItem,
                            node: node,
                            name: nameof(item.SunGlareColor),
                            fieldIndex: (int)Weather_FieldIndex.SunGlareColor,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SunGlareColor));
                    }
                    if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.MoonGlareColor) ?? true))
                    {
                        var MoonGlareColorItem = item.MoonGlareColor;
                        ((WeatherColorXmlWriteTranslation)((IXmlItem)MoonGlareColorItem).XmlWriteTranslator).Write(
                            item: MoonGlareColorItem,
                            node: node,
                            name: nameof(item.MoonGlareColor),
                            fieldIndex: (int)Weather_FieldIndex.MoonGlareColor,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.MoonGlareColor));
                    }
                }
            }
            else
            {
                node.Add(new XElement("HasNAM0DataType"));
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceDayNear),
                    item: item.FogDistanceDayNear,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceDayNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceDayFar),
                    item: item.FogDistanceDayFar,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceDayFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightNear) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceNightNear),
                    item: item.FogDistanceNightNear,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceNightNear,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightFar) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceNightFar),
                    item: item.FogDistanceNightFar,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceNightFar,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayPower) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceDayPower),
                    item: item.FogDistanceDayPower,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceDayPower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightPower) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceNightPower),
                    item: item.FogDistanceNightPower,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceNightPower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceDayMax),
                    item: item.FogDistanceDayMax,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceDayMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightMax) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FogDistanceNightMax),
                    item: item.FogDistanceNightMax,
                    fieldIndex: (int)Weather_FieldIndex.FogDistanceNightMax,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WindSpeed),
                    item: item.WindSpeed,
                    fieldIndex: (int)Weather_FieldIndex.WindSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Unknown) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)Weather_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TransDelta),
                    item: item.TransDelta,
                    fieldIndex: (int)Weather_FieldIndex.TransDelta,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunGlare),
                    item: item.SunGlare,
                    fieldIndex: (int)Weather_FieldIndex.SunGlare,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunDamage),
                    item: item.SunDamage,
                    fieldIndex: (int)Weather_FieldIndex.SunDamage,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PrecipitationBeginFadeIn),
                    item: item.PrecipitationBeginFadeIn,
                    fieldIndex: (int)Weather_FieldIndex.PrecipitationBeginFadeIn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PrecipitationEndFadeOut),
                    item: item.PrecipitationEndFadeOut,
                    fieldIndex: (int)Weather_FieldIndex.PrecipitationEndFadeOut,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThunderLightningBeginFadeIn),
                    item: item.ThunderLightningBeginFadeIn,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningBeginFadeIn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThunderLightningEndFadeOut),
                    item: item.ThunderLightningEndFadeOut,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningEndFadeOut,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThunderLightningFrequency),
                    item: item.ThunderLightningFrequency,
                    fieldIndex: (int)Weather_FieldIndex.ThunderLightningFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Weather.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Weather_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LightningColor),
                    item: item.LightningColor,
                    fieldIndex: (int)Weather_FieldIndex.LightningColor,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectBegin) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisualEffectBegin),
                    item: item.VisualEffectBegin,
                    fieldIndex: (int)Weather_FieldIndex.VisualEffectBegin,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectEnd) ?? true))
            {
                PercentXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisualEffectEnd),
                    item: item.VisualEffectEnd,
                    fieldIndex: (int)Weather_FieldIndex.VisualEffectEnd,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirection) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WindDirection),
                    item: item.WindDirection,
                    fieldIndex: (int)Weather_FieldIndex.WindDirection,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirectionRange) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WindDirectionRange),
                    item: item.WindDirectionRange,
                    fieldIndex: (int)Weather_FieldIndex.WindDirectionRange,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<IWeatherSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Weather_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Sounds),
                    transl: (XElement subNode, IWeatherSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((WeatherSoundXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStatics) ?? true))
            {
                ListXmlTranslation<IFormLink<IStaticGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.SkyStatics),
                    item: item.SkyStatics,
                    fieldIndex: (int)Weather_FieldIndex.SkyStatics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyStatics),
                    transl: (XElement subNode, IFormLink<IStaticGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.ImageSpaces != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.ImageSpaces) ?? true))
            {
                if (item.ImageSpaces.TryGet(out var ImageSpacesItem))
                {
                    ((WeatherImageSpacesXmlWriteTranslation)((IXmlItem)ImageSpacesItem).XmlWriteTranslator).Write(
                        item: ImageSpacesItem,
                        node: node,
                        name: nameof(item.ImageSpaces),
                        fieldIndex: (int)Weather_FieldIndex.ImageSpaces,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.ImageSpaces));
                }
            }
            if ((item.DirectionalAmbientLightingColors != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.DirectionalAmbientLightingColors) ?? true))
            {
                if (item.DirectionalAmbientLightingColors.TryGet(out var DirectionalAmbientLightingColorsItem))
                {
                    ((WeatherAmbientColorSetXmlWriteTranslation)((IXmlItem)DirectionalAmbientLightingColorsItem).XmlWriteTranslator).Write(
                        item: DirectionalAmbientLightingColorsItem,
                        node: node,
                        name: nameof(item.DirectionalAmbientLightingColors),
                        fieldIndex: (int)Weather_FieldIndex.DirectionalAmbientLightingColors,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.DirectionalAmbientLightingColors));
                }
            }
            if ((item.NAM2 != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM2) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NAM2),
                    item: item.NAM2.Value,
                    fieldIndex: (int)Weather_FieldIndex.NAM2,
                    errorMask: errorMask);
            }
            if ((item.NAM3 != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM3) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NAM3),
                    item: item.NAM3.Value,
                    fieldIndex: (int)Weather_FieldIndex.NAM3,
                    errorMask: errorMask);
            }
            if ((item.Aurora != null)
                && (translationMask?.GetShouldTranslate((int)Weather_FieldIndex.Aurora) ?? true))
            {
                if (item.Aurora.TryGet(out var AuroraItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)AuroraItem).XmlWriteTranslator).Write(
                        item: AuroraItem,
                        node: node,
                        name: nameof(item.Aurora),
                        fieldIndex: (int)Weather_FieldIndex.Aurora,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Aurora));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM0DataTypeState) ?? true))
            {
                EnumXmlTranslation<Weather.NAM0DataType>.Instance.Write(
                    node: node,
                    name: nameof(item.NAM0DataTypeState),
                    item: item.NAM0DataTypeState,
                    fieldIndex: (int)Weather_FieldIndex.NAM0DataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.FNAMDataTypeState) ?? true))
            {
                EnumXmlTranslation<Weather.FNAMDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.FNAMDataTypeState),
                    item: item.FNAMDataTypeState,
                    fieldIndex: (int)Weather_FieldIndex.FNAMDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Weather_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Weather.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Weather_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.Weather");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.Weather");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISkyrimMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WeatherXmlCreateTranslation : SkyrimMajorRecordXmlCreateTranslation
    {
        public new readonly static WeatherXmlCreateTranslation Instance = new WeatherXmlCreateTranslation();

        public static void FillPublicXml(
            IWeatherInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeatherInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "CloudTextures":
                    errorMask?.PushIndex((int)Weather_FieldIndex.CloudTextures);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var CloudTexturesItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.CloudTextures.SetTo(CloudTexturesItem);
                        }
                        else
                        {
                            item.CloudTextures.ResetToNull();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DNAM":
                    errorMask?.PushIndex((int)Weather_FieldIndex.DNAM);
                    try
                    {
                        item.DNAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CNAM":
                    errorMask?.PushIndex((int)Weather_FieldIndex.CNAM);
                    try
                    {
                        item.CNAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ANAM":
                    errorMask?.PushIndex((int)Weather_FieldIndex.ANAM);
                    try
                    {
                        item.ANAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BNAM":
                    errorMask?.PushIndex((int)Weather_FieldIndex.BNAM);
                    try
                    {
                        item.BNAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LNAM":
                    errorMask?.PushIndex((int)Weather_FieldIndex.LNAM);
                    try
                    {
                        item.LNAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Precipitation":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Precipitation);
                    try
                    {
                        item.Precipitation = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisualEffect":
                    errorMask?.PushIndex((int)Weather_FieldIndex.VisualEffect);
                    try
                    {
                        item.VisualEffect = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ONAM":
                    errorMask?.PushIndex((int)Weather_FieldIndex.ONAM);
                    try
                    {
                        item.ONAM = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Clouds":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Clouds);
                    try
                    {
                        if (ListXmlTranslation<CloudLayer>.Instance.Parse(
                            node: node,
                            enumer: out var CloudsItem,
                            transl: LoquiXmlTranslation<CloudLayer>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Clouds.SetTo(CloudsItem);
                        }
                        else
                        {
                            item.Clouds.Fill(() => new CloudLayer());
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkyUpperColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SkyUpperColor);
                    try
                    {
                        item.SkyUpperColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyUpperColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogNearColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogNearColor);
                    try
                    {
                        item.FogNearColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.FogNearColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UnknownColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.UnknownColor);
                    try
                    {
                        item.UnknownColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.UnknownColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AmbientColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.AmbientColor);
                    try
                    {
                        item.AmbientColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.AmbientColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunlightColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SunlightColor);
                    try
                    {
                        item.SunlightColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SunlightColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SunColor);
                    try
                    {
                        item.SunColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SunColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StarsColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.StarsColor);
                    try
                    {
                        item.StarsColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.StarsColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkyLowerColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SkyLowerColor);
                    try
                    {
                        item.SkyLowerColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyLowerColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HorizonColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.HorizonColor);
                    try
                    {
                        item.HorizonColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.HorizonColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectLightingColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.EffectLightingColor);
                    try
                    {
                        item.EffectLightingColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.EffectLightingColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudLodDiffuseColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.CloudLodDiffuseColor);
                    try
                    {
                        item.CloudLodDiffuseColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodDiffuseColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudLodAmbientColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.CloudLodAmbientColor);
                    try
                    {
                        item.CloudLodAmbientColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodAmbientColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogFarColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogFarColor);
                    try
                    {
                        item.FogFarColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.FogFarColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkyStaticsColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SkyStaticsColor);
                    try
                    {
                        item.SkyStaticsColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SkyStaticsColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.NAM0DataTypeState &= ~Weather.NAM0DataType.Break0;
                    break;
                case "WaterMultiplierColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.WaterMultiplierColor);
                    try
                    {
                        item.WaterMultiplierColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.WaterMultiplierColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.NAM0DataTypeState &= ~Weather.NAM0DataType.Break1;
                    break;
                case "SunGlareColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SunGlareColor);
                    try
                    {
                        item.SunGlareColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.SunGlareColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MoonGlareColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.MoonGlareColor);
                    try
                    {
                        item.MoonGlareColor = LoquiXmlTranslation<WeatherColor>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.MoonGlareColor));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceDayNear":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceDayNear);
                    try
                    {
                        item.FogDistanceDayNear = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceDayFar":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceDayFar);
                    try
                    {
                        item.FogDistanceDayFar = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceNightNear":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceNightNear);
                    try
                    {
                        item.FogDistanceNightNear = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceNightFar":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceNightFar);
                    try
                    {
                        item.FogDistanceNightFar = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceDayPower":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceDayPower);
                    try
                    {
                        item.FogDistanceDayPower = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceNightPower":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceNightPower);
                    try
                    {
                        item.FogDistanceNightPower = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceDayMax":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceDayMax);
                    try
                    {
                        item.FogDistanceDayMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FogDistanceNightMax":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FogDistanceNightMax);
                    try
                    {
                        item.FogDistanceNightMax = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WindSpeed":
                    errorMask?.PushIndex((int)Weather_FieldIndex.WindSpeed);
                    try
                    {
                        item.WindSpeed = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TransDelta":
                    errorMask?.PushIndex((int)Weather_FieldIndex.TransDelta);
                    try
                    {
                        item.TransDelta = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunGlare":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SunGlare);
                    try
                    {
                        item.SunGlare = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunDamage":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SunDamage);
                    try
                    {
                        item.SunDamage = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationBeginFadeIn":
                    errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationBeginFadeIn);
                    try
                    {
                        item.PrecipitationBeginFadeIn = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationEndFadeOut":
                    errorMask?.PushIndex((int)Weather_FieldIndex.PrecipitationEndFadeOut);
                    try
                    {
                        item.PrecipitationEndFadeOut = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningBeginFadeIn":
                    errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningBeginFadeIn);
                    try
                    {
                        item.ThunderLightningBeginFadeIn = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningEndFadeOut":
                    errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningEndFadeOut);
                    try
                    {
                        item.ThunderLightningEndFadeOut = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningFrequency":
                    errorMask?.PushIndex((int)Weather_FieldIndex.ThunderLightningFrequency);
                    try
                    {
                        item.ThunderLightningFrequency = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Weather.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightningColor":
                    errorMask?.PushIndex((int)Weather_FieldIndex.LightningColor);
                    try
                    {
                        item.LightningColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisualEffectBegin":
                    errorMask?.PushIndex((int)Weather_FieldIndex.VisualEffectBegin);
                    try
                    {
                        item.VisualEffectBegin = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisualEffectEnd":
                    errorMask?.PushIndex((int)Weather_FieldIndex.VisualEffectEnd);
                    try
                    {
                        item.VisualEffectEnd = PercentXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WindDirection":
                    errorMask?.PushIndex((int)Weather_FieldIndex.WindDirection);
                    try
                    {
                        item.WindDirection = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WindDirectionRange":
                    errorMask?.PushIndex((int)Weather_FieldIndex.WindDirectionRange);
                    try
                    {
                        item.WindDirectionRange = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                    try
                    {
                        if (ListXmlTranslation<WeatherSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<WeatherSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkyStatics":
                    errorMask?.PushIndex((int)Weather_FieldIndex.SkyStatics);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Static>>.Instance.Parse(
                            node: node,
                            enumer: out var SkyStaticsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SkyStatics.SetTo(SkyStaticsItem);
                        }
                        else
                        {
                            item.SkyStatics.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ImageSpaces":
                    errorMask?.PushIndex((int)Weather_FieldIndex.ImageSpaces);
                    try
                    {
                        item.ImageSpaces = LoquiXmlTranslation<WeatherImageSpaces>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.ImageSpaces));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DirectionalAmbientLightingColors":
                    errorMask?.PushIndex((int)Weather_FieldIndex.DirectionalAmbientLightingColors);
                    try
                    {
                        item.DirectionalAmbientLightingColors = LoquiXmlTranslation<WeatherAmbientColorSet>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.DirectionalAmbientLightingColors));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NAM2":
                    errorMask?.PushIndex((int)Weather_FieldIndex.NAM2);
                    try
                    {
                        item.NAM2 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NAM3":
                    errorMask?.PushIndex((int)Weather_FieldIndex.NAM3);
                    try
                    {
                        item.NAM3 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Aurora":
                    errorMask?.PushIndex((int)Weather_FieldIndex.Aurora);
                    try
                    {
                        item.Aurora = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Weather_FieldIndex.Aurora));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NAM0DataTypeState":
                    errorMask?.PushIndex((int)Weather_FieldIndex.NAM0DataTypeState);
                    try
                    {
                        item.NAM0DataTypeState = EnumXmlTranslation<Weather.NAM0DataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FNAMDataTypeState":
                    errorMask?.PushIndex((int)Weather_FieldIndex.FNAMDataTypeState);
                    try
                    {
                        item.FNAMDataTypeState = EnumXmlTranslation<Weather.FNAMDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Weather_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Weather.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SkyrimMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class WeatherXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeatherGetter item,
            XElement node,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeatherGetter item,
            string path,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherGetter item,
            Stream stream,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WeatherBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WeatherBinaryWriteTranslation Instance = new WeatherBinaryWriteTranslation();

        static partial void WriteBinaryCloudTexturesParseCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudTexturesParse(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudTexturesParseCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryCloudsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryClouds(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryCloudXSpeedsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudXSpeeds(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudXSpeedsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryCloudColorsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudColors(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudColorsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryCloudAlphasCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudAlphas(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudAlphasCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryDisabledCloudLayersCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryDisabledCloudLayers(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryDisabledCloudLayersCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryDirectionalAmbientLightingColorsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryDirectionalAmbientLightingColors(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryDirectionalAmbientLightingColorsCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IWeatherGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IWeatherGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            WeatherBinaryWriteTranslation.WriteBinaryCloudTexturesParse(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ANAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.BNAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LNAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.LNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Precipitation,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.MNAM));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VisualEffect,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NNAM));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ONAM,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.ONAM));
            WeatherBinaryWriteTranslation.WriteBinaryClouds(
                writer: writer,
                item: item);
            WeatherBinaryWriteTranslation.WriteBinaryCloudXSpeeds(
                writer: writer,
                item: item);
            WeatherBinaryWriteTranslation.WriteBinaryCloudColors(
                writer: writer,
                item: item);
            WeatherBinaryWriteTranslation.WriteBinaryCloudAlphas(
                writer: writer,
                item: item);
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.NAM0)))
            {
                var SkyUpperColorItem = item.SkyUpperColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SkyUpperColorItem).BinaryWriteTranslator).Write(
                    item: SkyUpperColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var FogNearColorItem = item.FogNearColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)FogNearColorItem).BinaryWriteTranslator).Write(
                    item: FogNearColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var UnknownColorItem = item.UnknownColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)UnknownColorItem).BinaryWriteTranslator).Write(
                    item: UnknownColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var AmbientColorItem = item.AmbientColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)AmbientColorItem).BinaryWriteTranslator).Write(
                    item: AmbientColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var SunlightColorItem = item.SunlightColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SunlightColorItem).BinaryWriteTranslator).Write(
                    item: SunlightColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var SunColorItem = item.SunColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SunColorItem).BinaryWriteTranslator).Write(
                    item: SunColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var StarsColorItem = item.StarsColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)StarsColorItem).BinaryWriteTranslator).Write(
                    item: StarsColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var SkyLowerColorItem = item.SkyLowerColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SkyLowerColorItem).BinaryWriteTranslator).Write(
                    item: SkyLowerColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var HorizonColorItem = item.HorizonColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)HorizonColorItem).BinaryWriteTranslator).Write(
                    item: HorizonColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var EffectLightingColorItem = item.EffectLightingColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)EffectLightingColorItem).BinaryWriteTranslator).Write(
                    item: EffectLightingColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var CloudLodDiffuseColorItem = item.CloudLodDiffuseColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)CloudLodDiffuseColorItem).BinaryWriteTranslator).Write(
                    item: CloudLodDiffuseColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var CloudLodAmbientColorItem = item.CloudLodAmbientColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)CloudLodAmbientColorItem).BinaryWriteTranslator).Write(
                    item: CloudLodAmbientColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                var FogFarColorItem = item.FogFarColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)FogFarColorItem).BinaryWriteTranslator).Write(
                    item: FogFarColorItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
                if (!item.NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break0))
                {
                    var SkyStaticsColorItem = item.SkyStaticsColor;
                    ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SkyStaticsColorItem).BinaryWriteTranslator).Write(
                        item: SkyStaticsColorItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                    if (!item.NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1))
                    {
                        var WaterMultiplierColorItem = item.WaterMultiplierColor;
                        ((WeatherColorBinaryWriteTranslation)((IBinaryItem)WaterMultiplierColorItem).BinaryWriteTranslator).Write(
                            item: WaterMultiplierColorItem,
                            writer: writer,
                            recordTypeConverter: recordTypeConverter);
                        var SunGlareColorItem = item.SunGlareColor;
                        ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SunGlareColorItem).BinaryWriteTranslator).Write(
                            item: SunGlareColorItem,
                            writer: writer,
                            recordTypeConverter: recordTypeConverter);
                        var MoonGlareColorItem = item.MoonGlareColor;
                        ((WeatherColorBinaryWriteTranslation)((IBinaryItem)MoonGlareColorItem).BinaryWriteTranslator).Write(
                            item: MoonGlareColorItem,
                            writer: writer,
                            recordTypeConverter: recordTypeConverter);
                    }
                }
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.FNAM)))
            {
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayNear);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayFar);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightNear);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightFar);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayPower);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightPower);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayMax);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightMax);
            }
            using (HeaderExport.Subrecord(writer, recordTypeConverter.ConvertToCustom(RecordTypes.DATA)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.WindSpeed,
                    integerType: FloatIntegerType.Byte);
                writer.Write(item.Unknown);
                FloatBinaryTranslation.Write(
                    writer: writer,
                    item: item.TransDelta,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 4);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SunGlare,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SunDamage,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.PrecipitationBeginFadeIn,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.PrecipitationEndFadeOut,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ThunderLightningBeginFadeIn,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ThunderLightningEndFadeOut,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ThunderLightningFrequency,
                    integerType: FloatIntegerType.Byte);
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weather.Flag>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LightningColor,
                    binaryType: ColorBinaryType.NoAlpha);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.VisualEffectBegin,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.VisualEffectEnd,
                    integerType: FloatIntegerType.Byte);
                FloatBinaryTranslation.Write(
                    writer: writer,
                    item: item.WindDirection,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 0.002777777777777778);
                FloatBinaryTranslation.Write(
                    writer: writer,
                    item: item.WindDirectionRange,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 0.005555555555555556);
            }
            WeatherBinaryWriteTranslation.WriteBinaryDisabledCloudLayers(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWeatherSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, IWeatherSoundGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WeatherSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IStaticGetter>>.Instance.Write(
                writer: writer,
                items: item.SkyStatics,
                transl: (MutagenWriter subWriter, IFormLink<IStaticGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM));
                });
            if (item.ImageSpaces.TryGet(out var ImageSpacesItem))
            {
                ((WeatherImageSpacesBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write(
                    item: ImageSpacesItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            WeatherBinaryWriteTranslation.WriteBinaryDirectionalAmbientLightingColors(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NAM2,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM2));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NAM3,
                header: recordTypeConverter.ConvertToCustom(RecordTypes.NAM3));
            if (item.Aurora.TryGet(out var AuroraItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)AuroraItem).BinaryWriteTranslator).Write(
                    item: AuroraItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IWeatherGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RecordTypes.WTHR),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeatherBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new readonly static WeatherBinaryCreateTranslation Instance = new WeatherBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WTHR;
        public static void FillBinaryStructs(
            IWeatherInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IWeatherInternal item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.DNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.CNAM;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ANAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.ANAM;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.BNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LNAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.LNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Precipitation = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weather_FieldIndex.Precipitation;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VisualEffect = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return (int)Weather_FieldIndex.VisualEffect;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ONAM = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.ONAM;
                }
                case RecordTypeInts.RNAM:
                {
                    WeatherBinaryCreateTranslation.FillBinaryCloudsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Weather_FieldIndex.Clouds;
                }
                case RecordTypeInts.QNAM:
                {
                    WeatherBinaryCreateTranslation.FillBinaryCloudXSpeedsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.PNAM:
                {
                    WeatherBinaryCreateTranslation.FillBinaryCloudColorsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.JNAM:
                {
                    WeatherBinaryCreateTranslation.FillBinaryCloudAlphasCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.SkyUpperColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.FogNearColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.UnknownColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.AmbientColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.SunlightColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.SunColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.StarsColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.SkyLowerColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.HorizonColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.EffectLightingColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.CloudLodDiffuseColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.CloudLodAmbientColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.FogFarColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.NAM0DataTypeState |= Weather.NAM0DataType.Break0;
                        return (int)Weather_FieldIndex.FogFarColor;
                    }
                    item.SkyStaticsColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.NAM0DataTypeState |= Weather.NAM0DataType.Break1;
                        return (int)Weather_FieldIndex.SkyStaticsColor;
                    }
                    item.WaterMultiplierColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.SunGlareColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    item.MoonGlareColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    return (int)Weather_FieldIndex.MoonGlareColor;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.FogDistanceDayNear = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceDayFar = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceNightNear = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceNightFar = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceDayPower = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceNightPower = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceDayMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FogDistanceNightMax = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return (int)Weather_FieldIndex.FogDistanceNightMax;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.WindSpeed = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.Unknown = dataFrame.ReadUInt16();
                    item.TransDelta = FloatBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: 4);
                    item.SunGlare = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.SunDamage = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.PrecipitationBeginFadeIn = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.PrecipitationEndFadeOut = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.ThunderLightningBeginFadeIn = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.ThunderLightningEndFadeOut = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.ThunderLightningFrequency = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.Flags = EnumBinaryTranslation<Weather.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.LightningColor = dataFrame.ReadColor(ColorBinaryType.NoAlpha);
                    item.VisualEffectBegin = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.VisualEffectEnd = PercentBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    item.WindDirection = FloatBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: 0.002777777777777778);
                    item.WindDirectionRange = FloatBinaryTranslation.Parse(
                        frame: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: 0.005555555555555556);
                    return (int)Weather_FieldIndex.WindDirectionRange;
                }
                case RecordTypeInts.NAM1:
                {
                    WeatherBinaryCreateTranslation.FillBinaryDisabledCloudLayersCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return null;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<WeatherSound>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: RecordTypes.SNAM,
                            recordTypeConverter: recordTypeConverter,
                            transl: WeatherSound.TryCreateFromBinary));
                    return (int)Weather_FieldIndex.Sounds;
                }
                case RecordTypeInts.TNAM:
                {
                    item.SkyStatics.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Static>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: recordTypeConverter.ConvertToCustom(RecordTypes.TNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Weather_FieldIndex.SkyStatics;
                }
                case RecordTypeInts.IMSP:
                {
                    item.ImageSpaces = Mutagen.Bethesda.Skyrim.WeatherImageSpaces.CreateFromBinary(frame: frame);
                    return (int)Weather_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.DALC:
                {
                    WeatherBinaryCreateTranslation.FillBinaryDirectionalAmbientLightingColorsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)Weather_FieldIndex.DirectionalAmbientLightingColors;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM2 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM3 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.NAM3;
                }
                case RecordTypeInts.MODL:
                {
                    item.Aurora = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weather_FieldIndex.Aurora;
                }
                default:
                    return CustomRecordFallback(
                        item: item,
                        frame: frame,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

        static partial void FillBinaryCloudTexturesParseCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        static partial void FillBinaryCloudsCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        static partial void FillBinaryCloudXSpeedsCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        static partial void FillBinaryCloudColorsCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        static partial void FillBinaryCloudAlphasCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        static partial void FillBinaryDisabledCloudLayersCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        static partial void FillBinaryDirectionalAmbientLightingColorsCustom(
            MutagenFrame frame,
            IWeatherInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class WeatherBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WeatherBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IWeatherGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static Weather_Registration Registration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WeatherCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WeatherXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region CloudTexturesParse
        partial void CloudTexturesParseCustomParse(
            OverlayStream stream,
            int offset);
        protected int CloudTexturesParseEndingPos;
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ANAM
        private int? _ANAMLocation;
        public ReadOnlyMemorySlice<Byte>? ANAM => _ANAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ANAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public ReadOnlyMemorySlice<Byte>? BNAM => _BNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _BNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region LNAM
        private int? _LNAMLocation;
        public ReadOnlyMemorySlice<Byte>? LNAM => _LNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _LNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Precipitation
        private int? _PrecipitationLocation;
        public bool Precipitation_IsSet => _PrecipitationLocation.HasValue;
        public IFormLinkNullable<IShaderParticleGeometryGetter> Precipitation => _PrecipitationLocation.HasValue ? new FormLinkNullable<IShaderParticleGeometryGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PrecipitationLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IShaderParticleGeometryGetter>.Null;
        #endregion
        #region VisualEffect
        private int? _VisualEffectLocation;
        public bool VisualEffect_IsSet => _VisualEffectLocation.HasValue;
        public IFormLink<IVisualEffectGetter> VisualEffect => _VisualEffectLocation.HasValue ? new FormLink<IVisualEffectGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _VisualEffectLocation.Value, _package.MetaData.Constants)))) : FormLink<IVisualEffectGetter>.Null;
        #endregion
        #region ONAM
        private int? _ONAMLocation;
        public ReadOnlyMemorySlice<Byte>? ONAM => _ONAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _ONAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Clouds
        partial void CloudsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        #region CloudXSpeeds
        partial void CloudXSpeedsCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region CloudColors
        partial void CloudColorsCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region CloudAlphas
        partial void CloudAlphasCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        private int? _NAM0Location;
        public Weather.NAM0DataType NAM0DataTypeState { get; private set; }
        #region SkyUpperColor
        private int _SkyUpperColorLocation => _NAM0Location!.Value;
        private bool _SkyUpperColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SkyUpperColor => _SkyUpperColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_SkyUpperColorLocation), _package), _package) : default;
        public IWeatherColorGetter SkyUpperColor => _SkyUpperColor ?? new WeatherColor();
        #endregion
        #region FogNearColor
        private int _FogNearColorLocation => _NAM0Location!.Value + 0x10;
        private bool _FogNearColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _FogNearColor => _FogNearColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_FogNearColorLocation), _package), _package) : default;
        public IWeatherColorGetter FogNearColor => _FogNearColor ?? new WeatherColor();
        #endregion
        #region UnknownColor
        private int _UnknownColorLocation => _NAM0Location!.Value + 0x20;
        private bool _UnknownColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _UnknownColor => _UnknownColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_UnknownColorLocation), _package), _package) : default;
        public IWeatherColorGetter UnknownColor => _UnknownColor ?? new WeatherColor();
        #endregion
        #region AmbientColor
        private int _AmbientColorLocation => _NAM0Location!.Value + 0x30;
        private bool _AmbientColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _AmbientColor => _AmbientColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_AmbientColorLocation), _package), _package) : default;
        public IWeatherColorGetter AmbientColor => _AmbientColor ?? new WeatherColor();
        #endregion
        #region SunlightColor
        private int _SunlightColorLocation => _NAM0Location!.Value + 0x40;
        private bool _SunlightColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SunlightColor => _SunlightColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_SunlightColorLocation), _package), _package) : default;
        public IWeatherColorGetter SunlightColor => _SunlightColor ?? new WeatherColor();
        #endregion
        #region SunColor
        private int _SunColorLocation => _NAM0Location!.Value + 0x50;
        private bool _SunColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SunColor => _SunColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_SunColorLocation), _package), _package) : default;
        public IWeatherColorGetter SunColor => _SunColor ?? new WeatherColor();
        #endregion
        #region StarsColor
        private int _StarsColorLocation => _NAM0Location!.Value + 0x60;
        private bool _StarsColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _StarsColor => _StarsColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_StarsColorLocation), _package), _package) : default;
        public IWeatherColorGetter StarsColor => _StarsColor ?? new WeatherColor();
        #endregion
        #region SkyLowerColor
        private int _SkyLowerColorLocation => _NAM0Location!.Value + 0x70;
        private bool _SkyLowerColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SkyLowerColor => _SkyLowerColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_SkyLowerColorLocation), _package), _package) : default;
        public IWeatherColorGetter SkyLowerColor => _SkyLowerColor ?? new WeatherColor();
        #endregion
        #region HorizonColor
        private int _HorizonColorLocation => _NAM0Location!.Value + 0x80;
        private bool _HorizonColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _HorizonColor => _HorizonColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_HorizonColorLocation), _package), _package) : default;
        public IWeatherColorGetter HorizonColor => _HorizonColor ?? new WeatherColor();
        #endregion
        #region EffectLightingColor
        private int _EffectLightingColorLocation => _NAM0Location!.Value + 0x90;
        private bool _EffectLightingColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _EffectLightingColor => _EffectLightingColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_EffectLightingColorLocation), _package), _package) : default;
        public IWeatherColorGetter EffectLightingColor => _EffectLightingColor ?? new WeatherColor();
        #endregion
        #region CloudLodDiffuseColor
        private int _CloudLodDiffuseColorLocation => _NAM0Location!.Value + 0xA0;
        private bool _CloudLodDiffuseColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _CloudLodDiffuseColor => _CloudLodDiffuseColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_CloudLodDiffuseColorLocation), _package), _package) : default;
        public IWeatherColorGetter CloudLodDiffuseColor => _CloudLodDiffuseColor ?? new WeatherColor();
        #endregion
        #region CloudLodAmbientColor
        private int _CloudLodAmbientColorLocation => _NAM0Location!.Value + 0xB0;
        private bool _CloudLodAmbientColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _CloudLodAmbientColor => _CloudLodAmbientColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_CloudLodAmbientColorLocation), _package), _package) : default;
        public IWeatherColorGetter CloudLodAmbientColor => _CloudLodAmbientColor ?? new WeatherColor();
        #endregion
        #region FogFarColor
        private int _FogFarColorLocation => _NAM0Location!.Value + 0xC0;
        private bool _FogFarColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _FogFarColor => _FogFarColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_FogFarColorLocation), _package), _package) : default;
        public IWeatherColorGetter FogFarColor => _FogFarColor ?? new WeatherColor();
        #endregion
        #region SkyStaticsColor
        private int _SkyStaticsColorLocation => _NAM0Location!.Value + 0xD0;
        private bool _SkyStaticsColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break0);
        private IWeatherColorGetter? _SkyStaticsColor => _SkyStaticsColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_SkyStaticsColorLocation), _package), _package) : default;
        public IWeatherColorGetter SkyStaticsColor => _SkyStaticsColor ?? new WeatherColor();
        #endregion
        #region WaterMultiplierColor
        private int _WaterMultiplierColorLocation => _NAM0Location!.Value + 0xE0;
        private bool _WaterMultiplierColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1);
        private IWeatherColorGetter? _WaterMultiplierColor => _WaterMultiplierColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_WaterMultiplierColorLocation), _package), _package) : default;
        public IWeatherColorGetter WaterMultiplierColor => _WaterMultiplierColor ?? new WeatherColor();
        #endregion
        #region SunGlareColor
        private int _SunGlareColorLocation => _NAM0Location!.Value + 0xF0;
        private bool _SunGlareColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1);
        private IWeatherColorGetter? _SunGlareColor => _SunGlareColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_SunGlareColorLocation), _package), _package) : default;
        public IWeatherColorGetter SunGlareColor => _SunGlareColor ?? new WeatherColor();
        #endregion
        #region MoonGlareColor
        private int _MoonGlareColorLocation => _NAM0Location!.Value + 0x100;
        private bool _MoonGlareColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1);
        private IWeatherColorGetter? _MoonGlareColor => _MoonGlareColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(new OverlayStream(_data.Slice(_MoonGlareColorLocation), _package), _package) : default;
        public IWeatherColorGetter MoonGlareColor => _MoonGlareColor ?? new WeatherColor();
        #endregion
        private int? _FNAMLocation;
        public Weather.FNAMDataType FNAMDataTypeState { get; private set; }
        #region FogDistanceDayNear
        private int _FogDistanceDayNearLocation => _FNAMLocation!.Value;
        private bool _FogDistanceDayNear_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayNear => _FogDistanceDayNear_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceDayNearLocation, 4)) : default;
        #endregion
        #region FogDistanceDayFar
        private int _FogDistanceDayFarLocation => _FNAMLocation!.Value + 0x4;
        private bool _FogDistanceDayFar_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayFar => _FogDistanceDayFar_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceDayFarLocation, 4)) : default;
        #endregion
        #region FogDistanceNightNear
        private int _FogDistanceNightNearLocation => _FNAMLocation!.Value + 0x8;
        private bool _FogDistanceNightNear_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightNear => _FogDistanceNightNear_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceNightNearLocation, 4)) : default;
        #endregion
        #region FogDistanceNightFar
        private int _FogDistanceNightFarLocation => _FNAMLocation!.Value + 0xC;
        private bool _FogDistanceNightFar_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightFar => _FogDistanceNightFar_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceNightFarLocation, 4)) : default;
        #endregion
        #region FogDistanceDayPower
        private int _FogDistanceDayPowerLocation => _FNAMLocation!.Value + 0x10;
        private bool _FogDistanceDayPower_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayPower => _FogDistanceDayPower_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceDayPowerLocation, 4)) : default;
        #endregion
        #region FogDistanceNightPower
        private int _FogDistanceNightPowerLocation => _FNAMLocation!.Value + 0x14;
        private bool _FogDistanceNightPower_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightPower => _FogDistanceNightPower_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceNightPowerLocation, 4)) : default;
        #endregion
        #region FogDistanceDayMax
        private int _FogDistanceDayMaxLocation => _FNAMLocation!.Value + 0x18;
        private bool _FogDistanceDayMax_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayMax => _FogDistanceDayMax_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceDayMaxLocation, 4)) : default;
        #endregion
        #region FogDistanceNightMax
        private int _FogDistanceNightMaxLocation => _FNAMLocation!.Value + 0x1C;
        private bool _FogDistanceNightMax_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightMax => _FogDistanceNightMax_IsSet ? SpanExt.GetFloat(_data.Slice(_FogDistanceNightMaxLocation, 4)) : default;
        #endregion
        private int? _DATALocation;
        public Weather.DATADataType DATADataTypeState { get; private set; }
        #region WindSpeed
        private int _WindSpeedLocation => _DATALocation!.Value;
        private bool _WindSpeed_IsSet => _DATALocation.HasValue;
        public Percent WindSpeed => _WindSpeed_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_WindSpeedLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value + 0x1;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public UInt16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(_UnknownLocation, 2)) : default;
        #endregion
        #region TransDelta
        private int _TransDeltaLocation => _DATALocation!.Value + 0x3;
        private bool _TransDelta_IsSet => _DATALocation.HasValue;
        public Single TransDelta => _TransDelta_IsSet ? FloatBinaryTranslation.GetFloat(_data.Slice(_TransDeltaLocation, 1), FloatIntegerType.Byte, 4) : default;
        #endregion
        #region SunGlare
        private int _SunGlareLocation => _DATALocation!.Value + 0x4;
        private bool _SunGlare_IsSet => _DATALocation.HasValue;
        public Percent SunGlare => _SunGlare_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_SunGlareLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region SunDamage
        private int _SunDamageLocation => _DATALocation!.Value + 0x5;
        private bool _SunDamage_IsSet => _DATALocation.HasValue;
        public Percent SunDamage => _SunDamage_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_SunDamageLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region PrecipitationBeginFadeIn
        private int _PrecipitationBeginFadeInLocation => _DATALocation!.Value + 0x6;
        private bool _PrecipitationBeginFadeIn_IsSet => _DATALocation.HasValue;
        public Percent PrecipitationBeginFadeIn => _PrecipitationBeginFadeIn_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_PrecipitationBeginFadeInLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region PrecipitationEndFadeOut
        private int _PrecipitationEndFadeOutLocation => _DATALocation!.Value + 0x7;
        private bool _PrecipitationEndFadeOut_IsSet => _DATALocation.HasValue;
        public Percent PrecipitationEndFadeOut => _PrecipitationEndFadeOut_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_PrecipitationEndFadeOutLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region ThunderLightningBeginFadeIn
        private int _ThunderLightningBeginFadeInLocation => _DATALocation!.Value + 0x8;
        private bool _ThunderLightningBeginFadeIn_IsSet => _DATALocation.HasValue;
        public Percent ThunderLightningBeginFadeIn => _ThunderLightningBeginFadeIn_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_ThunderLightningBeginFadeInLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region ThunderLightningEndFadeOut
        private int _ThunderLightningEndFadeOutLocation => _DATALocation!.Value + 0x9;
        private bool _ThunderLightningEndFadeOut_IsSet => _DATALocation.HasValue;
        public Percent ThunderLightningEndFadeOut => _ThunderLightningEndFadeOut_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_ThunderLightningEndFadeOutLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region ThunderLightningFrequency
        private int _ThunderLightningFrequencyLocation => _DATALocation!.Value + 0xA;
        private bool _ThunderLightningFrequency_IsSet => _DATALocation.HasValue;
        public Percent ThunderLightningFrequency => _ThunderLightningFrequency_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_ThunderLightningFrequencyLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0xB;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Weather.Flag Flags => _Flags_IsSet ? (Weather.Flag)_data.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region LightningColor
        private int _LightningColorLocation => _DATALocation!.Value + 0xC;
        private bool _LightningColor_IsSet => _DATALocation.HasValue;
        public Color LightningColor => _LightningColor_IsSet ? _data.Slice(_LightningColorLocation, 3).ReadColor(ColorBinaryType.NoAlpha) : default;
        #endregion
        #region VisualEffectBegin
        private int _VisualEffectBeginLocation => _DATALocation!.Value + 0xF;
        private bool _VisualEffectBegin_IsSet => _DATALocation.HasValue;
        public Percent VisualEffectBegin => _VisualEffectBegin_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_VisualEffectBeginLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region VisualEffectEnd
        private int _VisualEffectEndLocation => _DATALocation!.Value + 0x10;
        private bool _VisualEffectEnd_IsSet => _DATALocation.HasValue;
        public Percent VisualEffectEnd => _VisualEffectEnd_IsSet ? PercentBinaryTranslation.GetPercent(_data.Slice(_VisualEffectEndLocation, 1), FloatIntegerType.Byte) : default;
        #endregion
        #region WindDirection
        private int _WindDirectionLocation => _DATALocation!.Value + 0x11;
        private bool _WindDirection_IsSet => _DATALocation.HasValue;
        public Single WindDirection => _WindDirection_IsSet ? FloatBinaryTranslation.GetFloat(_data.Slice(_WindDirectionLocation, 1), FloatIntegerType.Byte, 0.002777777777777778) : default;
        #endregion
        #region WindDirectionRange
        private int _WindDirectionRangeLocation => _DATALocation!.Value + 0x12;
        private bool _WindDirectionRange_IsSet => _DATALocation.HasValue;
        public Single WindDirectionRange => _WindDirectionRange_IsSet ? FloatBinaryTranslation.GetFloat(_data.Slice(_WindDirectionRangeLocation, 1), FloatIntegerType.Byte, 0.005555555555555556) : default;
        #endregion
        #region DisabledCloudLayers
        partial void DisabledCloudLayersCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        public IReadOnlyList<IWeatherSoundGetter> Sounds { get; private set; } = ListExt.Empty<WeatherSoundBinaryOverlay>();
        public IReadOnlyList<IFormLink<IStaticGetter>> SkyStatics { get; private set; } = ListExt.Empty<IFormLink<IStaticGetter>>();
        #region ImageSpaces
        private RangeInt32? _ImageSpacesLocation;
        public IWeatherImageSpacesGetter? ImageSpaces => _ImageSpacesLocation.HasValue ? WeatherImageSpacesBinaryOverlay.WeatherImageSpacesFactory(new OverlayStream(_data.Slice(_ImageSpacesLocation!.Value.Min), _package), _package) : default;
        public bool ImageSpaces_IsSet => _ImageSpacesLocation.HasValue;
        #endregion
        #region DirectionalAmbientLightingColors
        partial void DirectionalAmbientLightingColorsCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public IWeatherAmbientColorSetGetter? DirectionalAmbientLightingColors => GetDirectionalAmbientLightingColorsCustom();
        #endregion
        #region NAM2
        private int? _NAM2Location;
        public ReadOnlyMemorySlice<Byte>? NAM2 => _NAM2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _NAM2Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NAM3
        private int? _NAM3Location;
        public ReadOnlyMemorySlice<Byte>? NAM3 => _NAM3Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _NAM3Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IModelGetter? Aurora { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeatherBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WeatherBinaryOverlay WeatherFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream);
            var ret = new WeatherBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static WeatherBinaryOverlay WeatherFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WeatherFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.DNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.CNAM;
                }
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.ANAM;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.BNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    _LNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.LNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    _PrecipitationLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.Precipitation;
                }
                case RecordTypeInts.NNAM:
                {
                    _VisualEffectLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.VisualEffect;
                }
                case RecordTypeInts.ONAM:
                {
                    _ONAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.ONAM;
                }
                case RecordTypeInts.RNAM:
                {
                    CloudsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Weather_FieldIndex.Clouds;
                }
                case RecordTypeInts.QNAM:
                {
                    CloudXSpeedsCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.PNAM:
                {
                    CloudColorsCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.JNAM:
                {
                    CloudAlphasCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.NAM0:
                {
                    _NAM0Location = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    var subLen = _package.MetaData.Constants.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0xD0)
                    {
                        this.NAM0DataTypeState |= Weather.NAM0DataType.Break0;
                    }
                    if (subLen <= 0xE0)
                    {
                        this.NAM0DataTypeState |= Weather.NAM0DataType.Break1;
                    }
                    return (int)Weather_FieldIndex.MoonGlareColor;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Weather_FieldIndex.FogDistanceNightMax;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength;
                    return (int)Weather_FieldIndex.WindDirectionRange;
                }
                case RecordTypeInts.NAM1:
                {
                    DisabledCloudLayersCustomParse(
                        stream,
                        offset);
                    return null;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Sounds = BinaryOverlayList<WeatherSoundBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => WeatherSoundBinaryOverlay.WeatherSoundFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Weather_FieldIndex.Sounds;
                }
                case RecordTypeInts.TNAM:
                {
                    this.SkyStatics = BinaryOverlayList<IFormLink<IStaticGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IStaticGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return (int)Weather_FieldIndex.SkyStatics;
                }
                case RecordTypeInts.IMSP:
                {
                    _ImageSpacesLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return (int)Weather_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.DALC:
                {
                    DirectionalAmbientLightingColorsCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)Weather_FieldIndex.DirectionalAmbientLightingColors;
                }
                case RecordTypeInts.NAM2:
                {
                    _NAM2Location = (stream.Position - offset);
                    return (int)Weather_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    _NAM3Location = (stream.Position - offset);
                    return (int)Weather_FieldIndex.NAM3;
                }
                case RecordTypeInts.MODL:
                {
                    this.Aurora = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return (int)Weather_FieldIndex.Aurora;
                }
                default:
                    return CustomRecordFallback(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

