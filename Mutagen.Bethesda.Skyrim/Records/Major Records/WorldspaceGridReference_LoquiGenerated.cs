/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class WorldspaceGridReference :
        IWorldspaceGridReference,
        ILoquiObjectSetter<WorldspaceGridReference>,
        IEquatable<WorldspaceGridReference>,
        IEqualsMask
    {
        #region Ctor
        public WorldspaceGridReference()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region GridPosition
        public P2Int16 GridPosition { get; set; } = default;
        #endregion
        #region References
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WorldspaceReference> _References = new ExtendedList<WorldspaceReference>();
        public ExtendedList<WorldspaceReference> References
        {
            get => this._References;
            protected set => this._References = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWorldspaceReferenceGetter> IWorldspaceGridReferenceGetter.References => _References;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceGridReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWorldspaceGridReferenceGetter rhs)) return false;
            return ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(WorldspaceGridReference obj)
        {
            return ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WorldspaceGridReferenceXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceGridReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static WorldspaceGridReference CreateFromXml(
            XElement node,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WorldspaceGridReference CreateFromXml(
            XElement node,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceGridReference.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WorldspaceGridReference CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new WorldspaceGridReference();
            ((WorldspaceGridReferenceSetterCommon)((IWorldspaceGridReferenceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static WorldspaceGridReference CreateFromXml(
            string path,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WorldspaceGridReference CreateFromXml(
            string path,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WorldspaceGridReference CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WorldspaceGridReference CreateFromXml(
            Stream stream,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WorldspaceGridReference CreateFromXml(
            Stream stream,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WorldspaceGridReference CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.GridPosition = initialValue;
                this.References = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceReference.Mask<TItem>?>>());
            }

            public Mask(
                TItem GridPosition,
                TItem References)
            {
                this.GridPosition = GridPosition;
                this.References = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceReference.Mask<TItem>?>>?>(References, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceReference.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem GridPosition;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceReference.Mask<TItem>?>>?>? References;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.GridPosition, rhs.GridPosition)) return false;
                if (!object.Equals(this.References, rhs.References)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.GridPosition);
                hash.Add(this.References);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.GridPosition)) return false;
                if (this.References != null)
                {
                    if (!eval(this.References.Overall)) return false;
                    if (this.References.Specific != null)
                    {
                        foreach (var item in this.References.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.GridPosition)) return true;
                if (this.References != null)
                {
                    if (eval(this.References.Overall)) return true;
                    if (this.References.Specific != null)
                    {
                        foreach (var item in this.References.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WorldspaceGridReference.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.GridPosition = eval(this.GridPosition);
                if (References != null)
                {
                    obj.References = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WorldspaceReference.Mask<R>?>>?>(eval(this.References.Overall), Enumerable.Empty<MaskItemIndexed<R, WorldspaceReference.Mask<R>?>>());
                    if (References.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WorldspaceReference.Mask<R>?>>();
                        obj.References.Specific = l;
                        foreach (var item in References.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WorldspaceReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WorldspaceReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WorldspaceGridReference.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WorldspaceGridReference.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WorldspaceGridReference.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.GridPosition ?? true)
                    {
                        fg.AppendItem(GridPosition, "GridPosition");
                    }
                    if ((printMask?.References?.Overall ?? true)
                        && References.TryGet(out var ReferencesItem))
                    {
                        fg.AppendLine("References =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ReferencesItem.Overall);
                            if (ReferencesItem.Specific != null)
                            {
                                foreach (var subItem in ReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? GridPosition;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceReference.ErrorMask?>>?>? References;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceGridReference_FieldIndex.GridPosition:
                        return GridPosition;
                    case WorldspaceGridReference_FieldIndex.References:
                        return References;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceGridReference_FieldIndex.GridPosition:
                        this.GridPosition = ex;
                        break;
                    case WorldspaceGridReference_FieldIndex.References:
                        this.References = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceReference.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceGridReference_FieldIndex.GridPosition:
                        this.GridPosition = (Exception?)obj;
                        break;
                    case WorldspaceGridReference_FieldIndex.References:
                        this.References = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceReference.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (GridPosition != null) return true;
                if (References != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(GridPosition, "GridPosition");
                if (References.TryGet(out var ReferencesItem))
                {
                    fg.AppendLine("References =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ReferencesItem.Overall);
                        if (ReferencesItem.Specific != null)
                        {
                            foreach (var subItem in ReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.GridPosition = this.GridPosition.Combine(rhs.GridPosition);
                ret.References = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceReference.ErrorMask?>>?>(ExceptionExt.Combine(this.References?.Overall, rhs.References?.Overall), ExceptionExt.Combine(this.References?.Specific, rhs.References?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool GridPosition;
            public MaskItem<bool, WorldspaceReference.TranslationMask?> References;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.GridPosition = defaultOn;
                this.References = new MaskItem<bool, WorldspaceReference.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((GridPosition, null));
                ret.Add((References?.Overall ?? true, References?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = WorldspaceGridReference_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => WorldspaceGridReferenceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WorldspaceGridReferenceCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceGridReferenceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceGridReferenceCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldspaceGridReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceGridReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static WorldspaceGridReference CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static WorldspaceGridReference CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WorldspaceGridReference();
            ((WorldspaceGridReferenceSetterCommon)((IWorldspaceGridReferenceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceGridReferenceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WorldspaceGridReferenceSetterCommon)((IWorldspaceGridReferenceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WorldspaceGridReference GetNew()
        {
            return new WorldspaceGridReference();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspaceGridReference :
        IWorldspaceGridReferenceGetter,
        ILoquiObjectSetter<IWorldspaceGridReference>
    {
        new P2Int16 GridPosition { get; set; }
        new ExtendedList<WorldspaceReference> References { get; }
    }

    public partial interface IWorldspaceGridReferenceGetter :
        ILoquiObject,
        ILoquiObject<IWorldspaceGridReferenceGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => WorldspaceGridReference_Registration.Instance;
        P2Int16 GridPosition { get; }
        IReadOnlyList<IWorldspaceReferenceGetter> References { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceGridReferenceMixIn
    {
        public static void Clear(this IWorldspaceGridReference item)
        {
            ((WorldspaceGridReferenceSetterCommon)((IWorldspaceGridReferenceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WorldspaceGridReference.Mask<bool> GetEqualsMask(
            this IWorldspaceGridReferenceGetter item,
            IWorldspaceGridReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceGridReferenceGetter item,
            string? name = null,
            WorldspaceGridReference.Mask<bool>? printMask = null)
        {
            return ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceGridReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceGridReference.Mask<bool>? printMask = null)
        {
            ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWorldspaceGridReferenceGetter item,
            WorldspaceGridReference.Mask<bool?> checkMask)
        {
            return ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static WorldspaceGridReference.Mask<bool> GetHasBeenSetMask(this IWorldspaceGridReferenceGetter item)
        {
            var ret = new WorldspaceGridReference.Mask<bool>(false);
            ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWorldspaceGridReferenceGetter item,
            IWorldspaceGridReferenceGetter rhs)
        {
            return ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWorldspaceGridReference lhs,
            IWorldspaceGridReferenceGetter rhs)
        {
            ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IWorldspaceGridReference lhs,
            IWorldspaceGridReferenceGetter rhs,
            WorldspaceGridReference.TranslationMask? copyMask = null)
        {
            ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWorldspaceGridReference lhs,
            IWorldspaceGridReferenceGetter rhs,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = WorldspaceGridReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceGridReference lhs,
            IWorldspaceGridReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static WorldspaceGridReference DeepCopy(
            this IWorldspaceGridReferenceGetter item,
            WorldspaceGridReference.TranslationMask? copyMask = null)
        {
            return ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WorldspaceGridReference DeepCopy(
            this IWorldspaceGridReferenceGetter item,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? copyMask = null)
        {
            return ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WorldspaceGridReference DeepCopy(
            this IWorldspaceGridReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceGridReferenceSetterTranslationCommon)((IWorldspaceGridReferenceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            XElement node,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            XElement node,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceGridReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WorldspaceGridReferenceSetterCommon)((IWorldspaceGridReferenceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            string path,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            string path,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            string path,
            ErrorMaskBuilder? errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            Stream stream,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            Stream stream,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceGridReference item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWorldspaceGridReference item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWorldspaceGridReference item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceGridReferenceSetterCommon)((IWorldspaceGridReferenceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum WorldspaceGridReference_FieldIndex
    {
        GridPosition = 0,
        References = 1,
    }
    #endregion

    #region Registration
    public partial class WorldspaceGridReference_Registration : ILoquiRegistration
    {
        public static readonly WorldspaceGridReference_Registration Instance = new WorldspaceGridReference_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 337,
            version: 0);

        public const string GUID = "2b2e308e-dd80-4d45-aff5-be2729f904dd";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(WorldspaceGridReference.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WorldspaceGridReference.ErrorMask);

        public static readonly Type ClassType = typeof(WorldspaceGridReference);

        public static readonly Type GetterType = typeof(IWorldspaceGridReferenceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspaceGridReference);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.WorldspaceGridReference";

        public const string Name = "WorldspaceGridReference";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "GRIDPOSITION":
                    return (ushort)WorldspaceGridReference_FieldIndex.GridPosition;
                case "REFERENCES":
                    return (ushort)WorldspaceGridReference_FieldIndex.References;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.References:
                    return true;
                case WorldspaceGridReference_FieldIndex.GridPosition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.References:
                    return true;
                case WorldspaceGridReference_FieldIndex.GridPosition:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.GridPosition:
                case WorldspaceGridReference_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.GridPosition:
                    return "GridPosition";
                case WorldspaceGridReference_FieldIndex.References:
                    return "References";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.GridPosition:
                case WorldspaceGridReference_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.GridPosition:
                case WorldspaceGridReference_FieldIndex.References:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WorldspaceGridReference_FieldIndex enu = (WorldspaceGridReference_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceGridReference_FieldIndex.GridPosition:
                    return typeof(P2Int16);
                case WorldspaceGridReference_FieldIndex.References:
                    return typeof(ExtendedList<WorldspaceReference>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WorldspaceGridReferenceXmlWriteTranslation);
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType TriggeringRecordType = RNAM_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceGridReferenceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceGridReferenceSetterCommon
    {
        public static readonly WorldspaceGridReferenceSetterCommon Instance = new WorldspaceGridReferenceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceGridReference item)
        {
            ClearPartial();
            item.GridPosition = default;
            item.References.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IWorldspaceGridReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceGridReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWorldspaceGridReference item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(WorldspaceGridReference_Registration.RNAM_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WorldspaceGridReferenceBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class WorldspaceGridReferenceCommon
    {
        public static readonly WorldspaceGridReferenceCommon Instance = new WorldspaceGridReferenceCommon();

        public WorldspaceGridReference.Mask<bool> GetEqualsMask(
            IWorldspaceGridReferenceGetter item,
            IWorldspaceGridReferenceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WorldspaceGridReference.Mask<bool>(false);
            ((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceGridReferenceGetter item,
            IWorldspaceGridReferenceGetter rhs,
            WorldspaceGridReference.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.GridPosition = item.GridPosition.Equals(rhs.GridPosition);
            ret.References = item.References.CollectionEqualsHelper(
                rhs.References,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IWorldspaceGridReferenceGetter item,
            string? name = null,
            WorldspaceGridReference.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceGridReferenceGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceGridReference.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WorldspaceGridReference =>");
            }
            else
            {
                fg.AppendLine($"{name} (WorldspaceGridReference) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceGridReferenceGetter item,
            FileGeneration fg,
            WorldspaceGridReference.Mask<bool>? printMask = null)
        {
            if (printMask?.GridPosition ?? true)
            {
                fg.AppendItem(item.GridPosition, "GridPosition");
            }
            if (printMask?.References?.Overall ?? true)
            {
                fg.AppendLine("References =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.References)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IWorldspaceGridReferenceGetter item,
            WorldspaceGridReference.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IWorldspaceGridReferenceGetter item,
            WorldspaceGridReference.Mask<bool> mask)
        {
            mask.GridPosition = true;
            var ReferencesItem = item.References;
            mask.References = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WorldspaceReference.Mask<bool>?>>?>(true, ReferencesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WorldspaceReference.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceGridReferenceGetter? lhs,
            IWorldspaceGridReferenceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.GridPosition.Equals(rhs.GridPosition)) return false;
            if (!lhs.References.SequenceEqual(rhs.References)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWorldspaceGridReferenceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.GridPosition);
            hash.Add(item.References);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WorldspaceGridReference.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWorldspaceGridReferenceGetter obj)
        {
            foreach (var item in obj.References.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IWorldspaceGridReferenceGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class WorldspaceGridReferenceSetterTranslationCommon
    {
        public static readonly WorldspaceGridReferenceSetterTranslationCommon Instance = new WorldspaceGridReferenceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWorldspaceGridReference item,
            IWorldspaceGridReferenceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)WorldspaceGridReference_FieldIndex.GridPosition) ?? true))
            {
                item.GridPosition = rhs.GridPosition;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceGridReference_FieldIndex.References) ?? true))
            {
                errorMask?.PushIndex((int)WorldspaceGridReference_FieldIndex.References);
                try
                {
                    item.References.SetTo(
                        rhs.References
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public WorldspaceGridReference DeepCopy(
            IWorldspaceGridReferenceGetter item,
            WorldspaceGridReference.TranslationMask? copyMask = null)
        {
            WorldspaceGridReference ret = (WorldspaceGridReference)((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public WorldspaceGridReference DeepCopy(
            IWorldspaceGridReferenceGetter item,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? copyMask = null)
        {
            WorldspaceGridReference ret = (WorldspaceGridReference)((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public WorldspaceGridReference DeepCopy(
            IWorldspaceGridReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WorldspaceGridReference ret = (WorldspaceGridReference)((WorldspaceGridReferenceCommon)((IWorldspaceGridReferenceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class WorldspaceGridReference
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceGridReference_Registration.Instance;
        public static WorldspaceGridReference_Registration Registration => WorldspaceGridReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldspaceGridReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WorldspaceGridReferenceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldspaceGridReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldspaceGridReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWorldspaceGridReferenceGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWorldspaceGridReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceGridReferenceXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static WorldspaceGridReferenceXmlWriteTranslation Instance = new WorldspaceGridReferenceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWorldspaceGridReferenceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WorldspaceGridReference_FieldIndex.GridPosition) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GridPosition),
                    item: item.GridPosition,
                    fieldIndex: (int)WorldspaceGridReference_FieldIndex.GridPosition,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WorldspaceGridReference_FieldIndex.References) ?? true))
            {
                ListXmlTranslation<IWorldspaceReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.References),
                    item: item.References,
                    fieldIndex: (int)WorldspaceGridReference_FieldIndex.References,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)WorldspaceGridReference_FieldIndex.References),
                    transl: (XElement subNode, IWorldspaceReferenceGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((WorldspaceReferenceXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IWorldspaceGridReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.WorldspaceGridReference");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.WorldspaceGridReference");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceGridReferenceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IWorldspaceGridReferenceGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IWorldspaceGridReferenceGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class WorldspaceGridReferenceXmlCreateTranslation
    {
        public readonly static WorldspaceGridReferenceXmlCreateTranslation Instance = new WorldspaceGridReferenceXmlCreateTranslation();

        public static void FillPublicXml(
            IWorldspaceGridReference item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceGridReferenceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWorldspaceGridReference item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "GridPosition":
                    errorMask?.PushIndex((int)WorldspaceGridReference_FieldIndex.GridPosition);
                    try
                    {
                        item.GridPosition = P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "References":
                    errorMask?.PushIndex((int)WorldspaceGridReference_FieldIndex.References);
                    try
                    {
                        if (ListXmlTranslation<WorldspaceReference>.Instance.Parse(
                            node: node,
                            enumer: out var ReferencesItem,
                            transl: LoquiXmlTranslation<WorldspaceReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.References.SetTo(ReferencesItem);
                        }
                        else
                        {
                            item.References.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class WorldspaceGridReferenceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            XElement node,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceGridReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceGridReference.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            string path,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            Stream stream,
            out WorldspaceGridReference.ErrorMask errorMask,
            WorldspaceGridReference.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((WorldspaceGridReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            XElement node,
            string? name = null,
            WorldspaceGridReference.TranslationMask? translationMask = null)
        {
            ((WorldspaceGridReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WorldspaceGridReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceGridReferenceGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WorldspaceGridReferenceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceGridReferenceBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WorldspaceGridReferenceBinaryWriteTranslation Instance = new WorldspaceGridReferenceBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWorldspaceGridReferenceGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GridPosition);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IWorldspaceReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.References,
                countLengthLength: 4,
                transl: (MutagenWriter subWriter, IWorldspaceReferenceGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((WorldspaceReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IWorldspaceGridReferenceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(WorldspaceGridReference_Registration.RNAM_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGridReferenceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WorldspaceGridReferenceBinaryCreateTranslation
    {
        public readonly static WorldspaceGridReferenceBinaryCreateTranslation Instance = new WorldspaceGridReferenceBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWorldspaceGridReference item,
            MutagenFrame frame)
        {
            item.GridPosition = Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(frame: frame);
            item.References.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<WorldspaceReference>.Instance.Parse(
                    amount: frame.ReadInt32(),
                    frame: frame,
                    transl: (MutagenFrame r, out WorldspaceReference listSubItem) =>
                    {
                        return LoquiBinaryTranslation<WorldspaceReference>.Instance.Parse(
                            frame: r,
                            item: out listSubItem!);
                    }));
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class WorldspaceGridReferenceBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWorldspaceGridReferenceGetter item,
            MutagenWriter writer)
        {
            ((WorldspaceGridReferenceBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceGridReferenceBinaryOverlay :
        BinaryOverlay,
        IWorldspaceGridReferenceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceGridReference_Registration.Instance;
        public static WorldspaceGridReference_Registration Registration => WorldspaceGridReference_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldspaceGridReferenceCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldspaceGridReferenceSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldspaceGridReferenceGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWorldspaceGridReferenceGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWorldspaceGridReferenceGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceGridReferenceGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => WorldspaceGridReferenceCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WorldspaceGridReferenceCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceGridReferenceCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceGridReferenceCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WorldspaceGridReferenceXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceGridReferenceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldspaceGridReferenceBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceGridReferenceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public P2Int16 GridPosition => P2Int16BinaryTranslation.Read(_data.Slice(0x0, 0x4));
        #region References
        public IReadOnlyList<IWorldspaceReferenceGetter> References => BinaryOverlayList<IWorldspaceReferenceGetter>.FactoryByCountLength(_data.Slice(0x4), _package, 8, countLength: 4, (s, p) => WorldspaceReferenceBinaryOverlay.WorldspaceReferenceFactory(s, p));
        protected int ReferencesEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WorldspaceGridReferenceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WorldspaceGridReferenceBinaryOverlay WorldspaceGridReferenceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WorldspaceGridReferenceBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            ret.ReferencesEndingPos = 0x4 + BinaryPrimitives.ReadInt32LittleEndian(ret._data.Slice(0x4)) * 8 + 4;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WorldspaceGridReferenceBinaryOverlay WorldspaceGridReferenceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WorldspaceGridReferenceFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceGridReferenceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

