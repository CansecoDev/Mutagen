/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class WorldspaceObjectBounds :
        IWorldspaceObjectBounds,
        ILoquiObjectSetter<WorldspaceObjectBounds>,
        IEquatable<WorldspaceObjectBounds>,
        IEqualsMask
    {
        #region Ctor
        public WorldspaceObjectBounds()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Min
        public P2Float Min { get; set; } = default;
        #endregion
        #region Max
        public P2Float Max { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceObjectBoundsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWorldspaceObjectBoundsGetter rhs)) return false;
            return ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(WorldspaceObjectBounds? obj)
        {
            return ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WorldspaceObjectBoundsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceObjectBoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static WorldspaceObjectBounds CreateFromXml(
            XElement node,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WorldspaceObjectBounds CreateFromXml(
            XElement node,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceObjectBounds.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WorldspaceObjectBounds CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new WorldspaceObjectBounds();
            ((WorldspaceObjectBoundsSetterCommon)((IWorldspaceObjectBoundsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static WorldspaceObjectBounds CreateFromXml(
            string path,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WorldspaceObjectBounds CreateFromXml(
            string path,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WorldspaceObjectBounds CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WorldspaceObjectBounds CreateFromXml(
            Stream stream,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WorldspaceObjectBounds CreateFromXml(
            Stream stream,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WorldspaceObjectBounds CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Min = initialValue;
                this.Max = initialValue;
            }

            public Mask(
                TItem Min,
                TItem Max)
            {
                this.Min = Min;
                this.Max = Max;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Min;
            public TItem Max;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Min);
                hash.Add(this.Max);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WorldspaceObjectBounds.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WorldspaceObjectBounds.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WorldspaceObjectBounds.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WorldspaceObjectBounds.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Min ?? true)
                    {
                        fg.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        fg.AppendItem(Max, "Max");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Min;
            public Exception? Max;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceObjectBounds_FieldIndex.Min:
                        return Min;
                    case WorldspaceObjectBounds_FieldIndex.Max:
                        return Max;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceObjectBounds_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case WorldspaceObjectBounds_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceObjectBounds_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case WorldspaceObjectBounds_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Min, "Min");
                fg.AppendItem(Max, "Max");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Min;
            public bool Max;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Min = defaultOn;
                this.Max = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Min, null));
                ret.Add((Max, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldspaceObjectBoundsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceObjectBoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static WorldspaceObjectBounds CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static WorldspaceObjectBounds CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WorldspaceObjectBounds();
            ((WorldspaceObjectBoundsSetterCommon)((IWorldspaceObjectBoundsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WorldspaceObjectBounds item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(frame, recordTypeConverter);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceObjectBoundsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WorldspaceObjectBoundsSetterCommon)((IWorldspaceObjectBoundsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WorldspaceObjectBounds GetNew()
        {
            return new WorldspaceObjectBounds();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspaceObjectBounds :
        IWorldspaceObjectBoundsGetter,
        ILoquiObjectSetter<IWorldspaceObjectBounds>
    {
        new P2Float Min { get; set; }
        new P2Float Max { get; set; }
    }

    public partial interface IWorldspaceObjectBoundsGetter :
        ILoquiObject,
        ILoquiObject<IWorldspaceObjectBoundsGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => WorldspaceObjectBounds_Registration.Instance;
        P2Float Min { get; }
        P2Float Max { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceObjectBoundsMixIn
    {
        public static void Clear(this IWorldspaceObjectBounds item)
        {
            ((WorldspaceObjectBoundsSetterCommon)((IWorldspaceObjectBoundsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WorldspaceObjectBounds.Mask<bool> GetEqualsMask(
            this IWorldspaceObjectBoundsGetter item,
            IWorldspaceObjectBoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceObjectBoundsGetter item,
            string? name = null,
            WorldspaceObjectBounds.Mask<bool>? printMask = null)
        {
            return ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceObjectBoundsGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceObjectBounds.Mask<bool>? printMask = null)
        {
            ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWorldspaceObjectBoundsGetter item,
            WorldspaceObjectBounds.Mask<bool?> checkMask)
        {
            return ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static WorldspaceObjectBounds.Mask<bool> GetHasBeenSetMask(this IWorldspaceObjectBoundsGetter item)
        {
            var ret = new WorldspaceObjectBounds.Mask<bool>(false);
            ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWorldspaceObjectBoundsGetter item,
            IWorldspaceObjectBoundsGetter rhs)
        {
            return ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWorldspaceObjectBounds lhs,
            IWorldspaceObjectBoundsGetter rhs)
        {
            ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IWorldspaceObjectBounds lhs,
            IWorldspaceObjectBoundsGetter rhs,
            WorldspaceObjectBounds.TranslationMask? copyMask = null)
        {
            ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWorldspaceObjectBounds lhs,
            IWorldspaceObjectBoundsGetter rhs,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = WorldspaceObjectBounds.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceObjectBounds lhs,
            IWorldspaceObjectBoundsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static WorldspaceObjectBounds DeepCopy(
            this IWorldspaceObjectBoundsGetter item,
            WorldspaceObjectBounds.TranslationMask? copyMask = null)
        {
            return ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WorldspaceObjectBounds DeepCopy(
            this IWorldspaceObjectBoundsGetter item,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? copyMask = null)
        {
            return ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WorldspaceObjectBounds DeepCopy(
            this IWorldspaceObjectBoundsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceObjectBoundsSetterTranslationCommon)((IWorldspaceObjectBoundsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            XElement node,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            XElement node,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceObjectBounds.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WorldspaceObjectBoundsSetterCommon)((IWorldspaceObjectBoundsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            string path,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            string path,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            string path,
            ErrorMaskBuilder? errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            Stream stream,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            Stream stream,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceObjectBounds item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWorldspaceObjectBounds item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWorldspaceObjectBounds item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceObjectBoundsSetterCommon)((IWorldspaceObjectBoundsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum WorldspaceObjectBounds_FieldIndex
    {
        Min = 0,
        Max = 1,
    }
    #endregion

    #region Registration
    public partial class WorldspaceObjectBounds_Registration : ILoquiRegistration
    {
        public static readonly WorldspaceObjectBounds_Registration Instance = new WorldspaceObjectBounds_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 345,
            version: 0);

        public const string GUID = "5863982b-d963-4fd8-a231-eb09b921d6ab";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(WorldspaceObjectBounds.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WorldspaceObjectBounds.ErrorMask);

        public static readonly Type ClassType = typeof(WorldspaceObjectBounds);

        public static readonly Type GetterType = typeof(IWorldspaceObjectBoundsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspaceObjectBounds);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.WorldspaceObjectBounds";

        public const string Name = "WorldspaceObjectBounds";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MIN":
                    return (ushort)WorldspaceObjectBounds_FieldIndex.Min;
                case "MAX":
                    return (ushort)WorldspaceObjectBounds_FieldIndex.Max;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                    return "Min";
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return "Max";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WorldspaceObjectBounds_FieldIndex enu = (WorldspaceObjectBounds_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceObjectBounds_FieldIndex.Min:
                    return typeof(P2Float);
                case WorldspaceObjectBounds_FieldIndex.Max:
                    return typeof(P2Float);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WorldspaceObjectBoundsXmlWriteTranslation);
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        RecordTypes.NAM0,
                        RecordTypes.NAM9
                    })
            );
        });
        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceObjectBoundsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceObjectBoundsSetterCommon
    {
        public static readonly WorldspaceObjectBoundsSetterCommon Instance = new WorldspaceObjectBoundsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceObjectBounds item)
        {
            ClearPartial();
            item.Min = default;
            item.Max = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IWorldspaceObjectBounds item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceObjectBoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWorldspaceObjectBounds item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: WorldspaceObjectBoundsBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WorldspaceObjectBoundsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class WorldspaceObjectBoundsCommon
    {
        public static readonly WorldspaceObjectBoundsCommon Instance = new WorldspaceObjectBoundsCommon();

        public WorldspaceObjectBounds.Mask<bool> GetEqualsMask(
            IWorldspaceObjectBoundsGetter item,
            IWorldspaceObjectBoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WorldspaceObjectBounds.Mask<bool>(false);
            ((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceObjectBoundsGetter item,
            IWorldspaceObjectBoundsGetter rhs,
            WorldspaceObjectBounds.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Min = item.Min.Equals(rhs.Min);
            ret.Max = item.Max.Equals(rhs.Max);
        }
        
        public string ToString(
            IWorldspaceObjectBoundsGetter item,
            string? name = null,
            WorldspaceObjectBounds.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceObjectBoundsGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceObjectBounds.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WorldspaceObjectBounds =>");
            }
            else
            {
                fg.AppendLine($"{name} (WorldspaceObjectBounds) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceObjectBoundsGetter item,
            FileGeneration fg,
            WorldspaceObjectBounds.Mask<bool>? printMask = null)
        {
            if (printMask?.Min ?? true)
            {
                fg.AppendItem(item.Min, "Min");
            }
            if (printMask?.Max ?? true)
            {
                fg.AppendItem(item.Max, "Max");
            }
        }
        
        public bool HasBeenSet(
            IWorldspaceObjectBoundsGetter item,
            WorldspaceObjectBounds.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IWorldspaceObjectBoundsGetter item,
            WorldspaceObjectBounds.Mask<bool> mask)
        {
            mask.Min = true;
            mask.Max = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceObjectBoundsGetter? lhs,
            IWorldspaceObjectBoundsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Min.Equals(rhs.Min)) return false;
            if (!lhs.Max.Equals(rhs.Max)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWorldspaceObjectBoundsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Min);
            hash.Add(item.Max);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WorldspaceObjectBounds.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWorldspaceObjectBoundsGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IWorldspaceObjectBoundsGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class WorldspaceObjectBoundsSetterTranslationCommon
    {
        public static readonly WorldspaceObjectBoundsSetterTranslationCommon Instance = new WorldspaceObjectBoundsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWorldspaceObjectBounds item,
            IWorldspaceObjectBoundsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)WorldspaceObjectBounds_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceObjectBounds_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
        }
        
        #endregion
        
        public WorldspaceObjectBounds DeepCopy(
            IWorldspaceObjectBoundsGetter item,
            WorldspaceObjectBounds.TranslationMask? copyMask = null)
        {
            WorldspaceObjectBounds ret = (WorldspaceObjectBounds)((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public WorldspaceObjectBounds DeepCopy(
            IWorldspaceObjectBoundsGetter item,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? copyMask = null)
        {
            WorldspaceObjectBounds ret = (WorldspaceObjectBounds)((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public WorldspaceObjectBounds DeepCopy(
            IWorldspaceObjectBoundsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WorldspaceObjectBounds ret = (WorldspaceObjectBounds)((WorldspaceObjectBoundsCommon)((IWorldspaceObjectBoundsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class WorldspaceObjectBounds
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceObjectBounds_Registration.Instance;
        public static WorldspaceObjectBounds_Registration Registration => WorldspaceObjectBounds_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldspaceObjectBoundsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WorldspaceObjectBoundsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldspaceObjectBoundsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldspaceObjectBoundsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWorldspaceObjectBoundsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWorldspaceObjectBoundsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceObjectBoundsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static WorldspaceObjectBoundsXmlWriteTranslation Instance = new WorldspaceObjectBoundsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWorldspaceObjectBoundsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WorldspaceObjectBounds_FieldIndex.Min) ?? true))
            {
                P2FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Min),
                    item: item.Min,
                    fieldIndex: (int)WorldspaceObjectBounds_FieldIndex.Min,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WorldspaceObjectBounds_FieldIndex.Max) ?? true))
            {
                P2FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Max),
                    item: item.Max,
                    fieldIndex: (int)WorldspaceObjectBounds_FieldIndex.Max,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWorldspaceObjectBoundsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.WorldspaceObjectBounds");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.WorldspaceObjectBounds");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceObjectBoundsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IWorldspaceObjectBoundsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IWorldspaceObjectBoundsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class WorldspaceObjectBoundsXmlCreateTranslation
    {
        public readonly static WorldspaceObjectBoundsXmlCreateTranslation Instance = new WorldspaceObjectBoundsXmlCreateTranslation();

        public static void FillPublicXml(
            IWorldspaceObjectBounds item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceObjectBoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWorldspaceObjectBounds item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Min":
                    errorMask?.PushIndex((int)WorldspaceObjectBounds_FieldIndex.Min);
                    try
                    {
                        item.Min = P2FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Max":
                    errorMask?.PushIndex((int)WorldspaceObjectBounds_FieldIndex.Max);
                    try
                    {
                        item.Max = P2FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class WorldspaceObjectBoundsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            XElement node,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceObjectBounds.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            string path,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            Stream stream,
            out WorldspaceObjectBounds.ErrorMask errorMask,
            WorldspaceObjectBounds.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((WorldspaceObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            XElement node,
            string? name = null,
            WorldspaceObjectBounds.TranslationMask? translationMask = null)
        {
            ((WorldspaceObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WorldspaceObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceObjectBoundsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WorldspaceObjectBoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceObjectBoundsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WorldspaceObjectBoundsBinaryWriteTranslation Instance = new WorldspaceObjectBoundsBinaryWriteTranslation();

        static partial void WriteBinaryMinCustom(
            MutagenWriter writer,
            IWorldspaceObjectBoundsGetter item);

        public static void WriteBinaryMin(
            MutagenWriter writer,
            IWorldspaceObjectBoundsGetter item)
        {
            WriteBinaryMinCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryMaxCustom(
            MutagenWriter writer,
            IWorldspaceObjectBoundsGetter item);

        public static void WriteBinaryMax(
            MutagenWriter writer,
            IWorldspaceObjectBoundsGetter item)
        {
            WriteBinaryMaxCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IWorldspaceObjectBoundsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            WorldspaceObjectBoundsBinaryWriteTranslation.WriteBinaryMin(
                writer: writer,
                item: item);
            WorldspaceObjectBoundsBinaryWriteTranslation.WriteBinaryMax(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IWorldspaceObjectBoundsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceObjectBoundsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WorldspaceObjectBoundsBinaryCreateTranslation
    {
        public readonly static WorldspaceObjectBoundsBinaryCreateTranslation Instance = new WorldspaceObjectBoundsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IWorldspaceObjectBounds item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IWorldspaceObjectBounds item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)WorldspaceObjectBounds_FieldIndex.Min) return ParseResult.Stop;
                    WorldspaceObjectBoundsBinaryCreateTranslation.FillBinaryMinCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)WorldspaceObjectBounds_FieldIndex.Min;
                }
                case RecordTypeInts.NAM9:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)WorldspaceObjectBounds_FieldIndex.Max) return ParseResult.Stop;
                    WorldspaceObjectBoundsBinaryCreateTranslation.FillBinaryMaxCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return (int)WorldspaceObjectBounds_FieldIndex.Max;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        static partial void FillBinaryMinCustom(
            MutagenFrame frame,
            IWorldspaceObjectBounds item);

        static partial void FillBinaryMaxCustom(
            MutagenFrame frame,
            IWorldspaceObjectBounds item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class WorldspaceObjectBoundsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWorldspaceObjectBoundsGetter item,
            MutagenWriter writer)
        {
            ((WorldspaceObjectBoundsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class WorldspaceObjectBoundsBinaryOverlay :
        BinaryOverlay,
        IWorldspaceObjectBoundsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceObjectBounds_Registration.Instance;
        public static WorldspaceObjectBounds_Registration Registration => WorldspaceObjectBounds_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldspaceObjectBoundsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldspaceObjectBoundsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldspaceObjectBoundsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWorldspaceObjectBoundsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWorldspaceObjectBoundsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceObjectBoundsGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WorldspaceObjectBoundsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceObjectBoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldspaceObjectBoundsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceObjectBoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Min
        partial void MinCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public P2Float Min => GetMinCustom();
        #endregion
        #region Max
        partial void MaxCustomParse(
            OverlayStream stream,
            long finalPos,
            int offset);
        public P2Float Max => GetMaxCustom();
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WorldspaceObjectBoundsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static WorldspaceObjectBoundsBinaryOverlay WorldspaceObjectBoundsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WorldspaceObjectBoundsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static WorldspaceObjectBoundsBinaryOverlay WorldspaceObjectBoundsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WorldspaceObjectBoundsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAM0:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)WorldspaceObjectBounds_FieldIndex.Min) return ParseResult.Stop;
                    MinCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)WorldspaceObjectBounds_FieldIndex.Min;
                }
                case RecordTypeInts.NAM9:
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)WorldspaceObjectBounds_FieldIndex.Max) return ParseResult.Stop;
                    MaxCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)WorldspaceObjectBounds_FieldIndex.Max;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceObjectBoundsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

