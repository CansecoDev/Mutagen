/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Internals;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ModStats : 
        LoquiNotifyingObject,
        IModStats,
        ILoquiObject<ModStats>,
        ILoquiObjectSetter,
        IEquatable<ModStats>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModStats_Registration.Instance;
        public static ModStats_Registration Registration => ModStats_Registration.Instance;

        #region Ctor
        public ModStats()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Version
        private Single _Version;
        public Single Version
        {
            get => this._Version;
            set => this.RaiseAndSetIfChanged(ref this._Version, value, nameof(Version));
        }
        #endregion
        #region NumRecords
        private Int32 _NumRecords;
        public Int32 NumRecords
        {
            get => this._NumRecords;
            set => this.RaiseAndSetIfChanged(ref this._NumRecords, value, nameof(NumRecords));
        }
        #endregion
        #region NextObjectID
        private UInt32 _NextObjectID;
        public UInt32 NextObjectID
        {
            get => this._NextObjectID;
            set => this.RaiseAndSetIfChanged(ref this._NextObjectID, value, nameof(NextObjectID));
        }
        #endregion

        IMask<bool> IEqualsMask<ModStats>.GetEqualsMask(ModStats rhs, EqualsMaskHelper.Include include) => ModStatsCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IModStatsGetter>.GetEqualsMask(IModStatsGetter rhs, EqualsMaskHelper.Include include) => ModStatsCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            return ModStatsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ModStatsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ModStats_Mask<bool> GetHasBeenSetMask()
        {
            return ModStatsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ModStats rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModStats rhs)
        {
            if (rhs == null) return false;
            if (!this.Version.EqualsWithin(rhs.Version)) return false;
            if (this.NumRecords != rhs.NumRecords) return false;
            if (this.NextObjectID != rhs.NextObjectID) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Version).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NumRecords).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NextObjectID).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static ModStats Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            ModStats_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ModStats Create_Xml(
            XElement node,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModStats Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new ModStats() : null;
                    break;
                default:
                    break;
            }
            var ret = new ModStats();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModStatsCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ModStats Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            ModStats_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModStats Create_Xml(
            string path,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModStats Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ModStats Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            ModStats_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static ModStats Create_Xml(
            Stream stream,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModStats Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ModStats_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true,
            ModStats_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ModStatsXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            ModStats_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ModStatsXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ModStats_FieldIndex)index)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = ModStats_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static ModStats Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences)
        {
            return Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static ModStats Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModStats Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new ModStats();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ModStats_Registration.HEDR_HEADER)));
            UtilityTranslation.RecordParse(
                record: ret,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out ModStats_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ModStatsBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences)
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            ModStatsBinaryTranslation.Instance.Write_Binary(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            ModStats item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            if (Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Single VersionParse))
            {
                item.Version = VersionParse;
            }
            else
            {
                item.Version = default(Single);
            }
            if (Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out Int32 NumRecordsParse))
            {
                item.NumRecords = NumRecordsParse;
            }
            else
            {
                item.NumRecords = default(Int32);
            }
            if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                frame: frame,
                item: out UInt32 NextObjectIDParse))
            {
                item.NextObjectID = NextObjectIDParse;
            }
            else
            {
                item.NextObjectID = default(UInt32);
            }
        }

        #endregion

        public ModStats Copy(
            ModStats_CopyMask copyMask = null,
            IModStatsGetter def = null)
        {
            return ModStats.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ModStats Copy(
            IModStats item,
            ModStats_CopyMask copyMask = null,
            IModStatsGetter def = null)
        {
            ModStats ret;
            if (item.GetType().Equals(typeof(ModStats)))
            {
                ret = new ModStats();
            }
            else
            {
                ret = (ModStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ModStats Copy_ToLoqui(
            IModStatsGetter item,
            ModStats_CopyMask copyMask = null,
            IModStatsGetter def = null)
        {
            ModStats ret;
            if (item.GetType().Equals(typeof(ModStats)))
            {
                ret = new ModStats() as ModStats;
            }
            else
            {
                ret = (ModStats)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IModStatsGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IModStatsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IModStatsGetter rhs,
            ModStats_CopyMask copyMask,
            IModStatsGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IModStatsGetter rhs,
            out ModStats_ErrorMask errorMask,
            ModStats_CopyMask copyMask = null,
            IModStatsGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ModStatsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IModStatsGetter rhs,
            ErrorMaskBuilder errorMask,
            ModStats_CopyMask copyMask = null,
            IModStatsGetter def = null,
            bool doMasks = true)
        {
            ModStatsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    this.Version = (Single)obj;
                    break;
                case ModStats_FieldIndex.NumRecords:
                    this.NumRecords = (Int32)obj;
                    break;
                case ModStats_FieldIndex.NextObjectID:
                    this.NextObjectID = (UInt32)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            ModStatsCommon.Clear(this);
        }


        public static ModStats Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ModStats();
            foreach (var pair in fields)
            {
                CopyInInternal_ModStats(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ModStats(ModStats obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ModStats_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    obj.Version = (Single)pair.Value;
                    break;
                case ModStats_FieldIndex.NumRecords:
                    obj.NumRecords = (Int32)pair.Value;
                    break;
                case ModStats_FieldIndex.NextObjectID:
                    obj.NextObjectID = (UInt32)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IModStats : IModStatsGetter, ILoquiClass<IModStats, IModStatsGetter>, ILoquiClass<ModStats, IModStatsGetter>
    {
        new Single Version { get; set; }

        new Int32 NumRecords { get; set; }

        new UInt32 NextObjectID { get; set; }

    }

    public partial interface IModStatsGetter : ILoquiObject
    {
        #region Version
        Single Version { get; }

        #endregion
        #region NumRecords
        Int32 NumRecords { get; }

        #endregion
        #region NextObjectID
        UInt32 NextObjectID { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum ModStats_FieldIndex
    {
        Version = 0,
        NumRecords = 1,
        NextObjectID = 2,
    }
    #endregion

    #region Registration
    public class ModStats_Registration : ILoquiRegistration
    {
        public static readonly ModStats_Registration Instance = new ModStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "df74bd92-cdb3-4e89-a90f-1aabd4f27c05";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(ModStats_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ModStats_ErrorMask);

        public static readonly Type ClassType = typeof(ModStats);

        public static readonly Type GetterType = typeof(IModStatsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModStats);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(ModStatsCommon);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ModStats";

        public const string Name = "ModStats";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSION":
                    return (ushort)ModStats_FieldIndex.Version;
                case "NUMRECORDS":
                    return (ushort)ModStats_FieldIndex.NumRecords;
                case "NEXTOBJECTID":
                    return (ushort)ModStats_FieldIndex.NextObjectID;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    return "Version";
                case ModStats_FieldIndex.NumRecords:
                    return "NumRecords";
                case ModStats_FieldIndex.NextObjectID:
                    return "NextObjectID";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                case ModStats_FieldIndex.NumRecords:
                case ModStats_FieldIndex.NextObjectID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    return typeof(Single);
                case ModStats_FieldIndex.NumRecords:
                    return typeof(Int32);
                case ModStats_FieldIndex.NextObjectID:
                    return typeof(UInt32);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = HEDR_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ModStatsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IModStats item,
            IModStatsGetter rhs,
            IModStatsGetter def,
            ErrorMaskBuilder errorMask,
            ModStats_CopyMask copyMask)
        {
            if (copyMask?.Version ?? true)
            {
                errorMask?.PushIndex((int)ModStats_FieldIndex.Version);
                try
                {
                    item.Version = rhs.Version;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NumRecords ?? true)
            {
                errorMask?.PushIndex((int)ModStats_FieldIndex.NumRecords);
                try
                {
                    item.NumRecords = rhs.NumRecords;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NextObjectID ?? true)
            {
                errorMask?.PushIndex((int)ModStats_FieldIndex.NextObjectID);
                try
                {
                    item.NextObjectID = rhs.NextObjectID;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IModStats item)
        {
            item.Version = default(Single);
            item.NumRecords = default(Int32);
            item.NextObjectID = default(UInt32);
        }

        public static ModStats_Mask<bool> GetEqualsMask(
            this IModStatsGetter item,
            IModStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ModStats_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IModStatsGetter item,
            IModStatsGetter rhs,
            ModStats_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Version = item.Version.EqualsWithin(rhs.Version);
            ret.NumRecords = item.NumRecords == rhs.NumRecords;
            ret.NextObjectID = item.NextObjectID == rhs.NextObjectID;
        }

        public static string ToString(
            this IModStatsGetter item,
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IModStatsGetter item,
            FileGeneration fg,
            string name = null,
            ModStats_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ModStats)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ModStats)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {item.Version}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {item.NumRecords}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {item.NextObjectID}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IModStatsGetter item,
            ModStats_Mask<bool?> checkMask)
        {
            return true;
        }

        public static ModStats_Mask<bool> GetHasBeenSetMask(IModStatsGetter item)
        {
            var ret = new ModStats_Mask<bool>();
            ret.Version = true;
            ret.NumRecords = true;
            ret.NextObjectID = true;
            return ret;
        }

        #region Xml Translation
        public static void FillPublic_Xml(
            this ModStats item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModStatsCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this ModStats item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Version":
                    try
                    {
                        errorMask?.PushIndex((int)ModStats_FieldIndex.Version);
                        if (FloatXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Single VersionParse,
                            errorMask: errorMask))
                        {
                            item.Version = VersionParse;
                        }
                        else
                        {
                            item.Version = default(Single);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NumRecords":
                    try
                    {
                        errorMask?.PushIndex((int)ModStats_FieldIndex.NumRecords);
                        if (Int32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out Int32 NumRecordsParse,
                            errorMask: errorMask))
                        {
                            item.NumRecords = NumRecordsParse;
                        }
                        else
                        {
                            item.NumRecords = default(Int32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NextObjectID":
                    try
                    {
                        errorMask?.PushIndex((int)ModStats_FieldIndex.NextObjectID);
                        if (UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            item: out UInt32 NextObjectIDParse,
                            errorMask: errorMask))
                        {
                            item.NextObjectID = NextObjectIDParse;
                        }
                        else
                        {
                            item.NextObjectID = default(UInt32);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class ModStatsXmlTranslation
    {
        public readonly static ModStatsXmlTranslation Instance = new ModStatsXmlTranslation();

        public static void WriteToNode_Xml(
            IModStatsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ModStats_FieldIndex.Version) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version),
                    item: item.Version,
                    fieldIndex: (int)ModStats_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModStats_FieldIndex.NumRecords) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumRecords),
                    item: item.NumRecords,
                    fieldIndex: (int)ModStats_FieldIndex.NumRecords,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModStats_FieldIndex.NextObjectID) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NextObjectID),
                    item: item.NextObjectID,
                    fieldIndex: (int)ModStats_FieldIndex.NextObjectID,
                    errorMask: errorMask);
            }
        }

        #region Xml Write
        public void Write_Xml(
            XElement node,
            IModStatsGetter item,
            bool doMasks,
            out ModStats_ErrorMask errorMask,
            ModStats_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Xml(
            XElement node,
            IModStatsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.ModStats");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.ModStats");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

    }
    #endregion

    #region Mask
    public class ModStats_Mask<T> : IMask<T>, IEquatable<ModStats_Mask<T>>
    {
        #region Ctors
        public ModStats_Mask()
        {
        }

        public ModStats_Mask(T initialValue)
        {
            this.Version = initialValue;
            this.NumRecords = initialValue;
            this.NextObjectID = initialValue;
        }
        #endregion

        #region Members
        public T Version;
        public T NumRecords;
        public T NextObjectID;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ModStats_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ModStats_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.NumRecords, rhs.NumRecords)) return false;
            if (!object.Equals(this.NextObjectID, rhs.NextObjectID)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.NumRecords?.GetHashCode());
            ret = ret.CombineHashCode(this.NextObjectID?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Version)) return false;
            if (!eval(this.NumRecords)) return false;
            if (!eval(this.NextObjectID)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ModStats_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ModStats_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ModStats_Mask<R> obj, Func<T, R> eval)
        {
            obj.Version = eval(this.Version);
            obj.NumRecords = eval(this.NumRecords);
            obj.NextObjectID = eval(this.NextObjectID);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ModStats_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ModStats_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ModStats_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version}");
                }
                if (printMask?.NumRecords ?? true)
                {
                    fg.AppendLine($"NumRecords => {NumRecords}");
                }
                if (printMask?.NextObjectID ?? true)
                {
                    fg.AppendLine($"NextObjectID => {NextObjectID}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ModStats_ErrorMask : IErrorMask, IErrorMask<ModStats_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Version;
        public Exception NumRecords;
        public Exception NextObjectID;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    return Version;
                case ModStats_FieldIndex.NumRecords:
                    return NumRecords;
                case ModStats_FieldIndex.NextObjectID:
                    return NextObjectID;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case ModStats_FieldIndex.NumRecords:
                    this.NumRecords = ex;
                    break;
                case ModStats_FieldIndex.NextObjectID:
                    this.NextObjectID = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ModStats_FieldIndex enu = (ModStats_FieldIndex)index;
            switch (enu)
            {
                case ModStats_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case ModStats_FieldIndex.NumRecords:
                    this.NumRecords = (Exception)obj;
                    break;
                case ModStats_FieldIndex.NextObjectID:
                    this.NextObjectID = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Version != null) return true;
            if (NumRecords != null) return true;
            if (NextObjectID != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ModStats_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Version => {Version}");
            fg.AppendLine($"NumRecords => {NumRecords}");
            fg.AppendLine($"NextObjectID => {NextObjectID}");
        }
        #endregion

        #region Combine
        public ModStats_ErrorMask Combine(ModStats_ErrorMask rhs)
        {
            var ret = new ModStats_ErrorMask();
            ret.Version = this.Version.Combine(rhs.Version);
            ret.NumRecords = this.NumRecords.Combine(rhs.NumRecords);
            ret.NextObjectID = this.NextObjectID.Combine(rhs.NextObjectID);
            return ret;
        }
        public static ModStats_ErrorMask Combine(ModStats_ErrorMask lhs, ModStats_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ModStats_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ModStats_ErrorMask();
        }
        #endregion

    }
    public class ModStats_CopyMask
    {
        public ModStats_CopyMask()
        {
        }

        public ModStats_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Version = defaultOn;
            this.NumRecords = defaultOn;
            this.NextObjectID = defaultOn;
        }

        #region Members
        public bool Version;
        public bool NumRecords;
        public bool NextObjectID;
        #endregion

    }

    public class ModStats_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Version;
        public bool NumRecords;
        public bool NextObjectID;
        #endregion

        #region Ctors
        public ModStats_TranslationMask()
        {
        }

        public ModStats_TranslationMask(bool defaultOn)
        {
            this.Version = defaultOn;
            this.NumRecords = defaultOn;
            this.NextObjectID = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Version, null));
            ret.Add((NumRecords, null));
            ret.Add((NextObjectID, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class ModStatsBinaryTranslation
    {
        public readonly static ModStatsBinaryTranslation Instance = new ModStatsBinaryTranslation();

        public static void Write_Binary_Embedded(
            IModStatsGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Version);
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NumRecords);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NextObjectID);
        }

        #region Binary Write
        public void Write_Binary(
            MutagenWriter writer,
            IModStatsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out ModStats_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = ModStats_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Binary(
            MutagenWriter writer,
            IModStatsGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: ModStats_Registration.HEDR_HEADER,
                type: ObjectType.Subrecord))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

    }
    #endregion

    #endregion

}
