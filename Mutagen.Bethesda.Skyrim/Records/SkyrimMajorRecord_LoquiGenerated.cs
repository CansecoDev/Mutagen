/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public abstract partial class SkyrimMajorRecord :
        MajorRecord,
        ISkyrimMajorRecord,
        ISkyrimMajorRecordInternal,
        ILoquiObject<SkyrimMajorRecord>,
        ILoquiObjectSetter,
        IEquatable<SkyrimMajorRecord>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMajorRecord_Registration.Instance;
        public new static SkyrimMajorRecord_Registration Registration => SkyrimMajorRecord_Registration.Instance;

        #region Ctor
        protected SkyrimMajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        IMask<bool> IEqualsMask<SkyrimMajorRecord>.GetEqualsMask(SkyrimMajorRecord rhs, EqualsMaskHelper.Include include) => SkyrimMajorRecordCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ISkyrimMajorRecordGetter>.GetEqualsMask(ISkyrimMajorRecordGetter rhs, EqualsMaskHelper.Include include) => SkyrimMajorRecordCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            SkyrimMajorRecord_Mask<bool> printMask = null)
        {
            return SkyrimMajorRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            SkyrimMajorRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new SkyrimMajorRecord_Mask<bool> GetHasBeenSetMask()
        {
            return SkyrimMajorRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SkyrimMajorRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkyrimMajorRecord rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.SkyrimMajorRecordFlags != rhs.SkyrimMajorRecordFlags) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(SkyrimMajorRecordFlags).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        protected override IXmlTranslator XmlTranslator => SkyrimMajorRecordXmlTranslation.Instance;
        #region Xml Create
        [DebuggerStepThrough]
        public static SkyrimMajorRecord Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SkyrimMajorRecord_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkyrimMajorRecord Create_Xml(
            XElement node,
            out SkyrimMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SkyrimMajorRecord_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SkyrimMajorRecord Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return null;
                    break;
                default:
                    break;
            }
            SkyrimMajorRecord ret;
            if (!LoquiXmlTranslation.Instance.TryCreate(node, out ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown SkyrimMajorRecord subclass: {node.Name.LocalName}");
            }
            return ret;
        }

        public static SkyrimMajorRecord Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SkyrimMajorRecord_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord Create_Xml(
            string path,
            out SkyrimMajorRecord_ErrorMask errorMask,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkyrimMajorRecord Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SkyrimMajorRecord_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord Create_Xml(
            Stream stream,
            out SkyrimMajorRecord_ErrorMask errorMask,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMajorRecord Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElement_Xml(
            SkyrimMajorRecord item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    MajorRecord.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((SkyrimMajorRecord_FieldIndex)index)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        #region Mutagen
        public SkyrimMajorRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        #endregion

        #region Binary Translation
        protected override IBinaryTranslator BinaryTranslator => SkyrimMajorRecordBinaryTranslation.Instance;
        protected static void Fill_Binary_Structs(
            SkyrimMajorRecord item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            MajorRecord.Fill_Binary_Structs(
                item: item,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        #endregion

        public SkyrimMajorRecord Copy(
            SkyrimMajorRecord_CopyMask copyMask = null,
            ISkyrimMajorRecordGetter def = null)
        {
            return SkyrimMajorRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SkyrimMajorRecord Copy(
            ISkyrimMajorRecord item,
            SkyrimMajorRecord_CopyMask copyMask = null,
            ISkyrimMajorRecordGetter def = null)
        {
            SkyrimMajorRecord ret = (SkyrimMajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SkyrimMajorRecord Copy_ToLoqui(
            ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord_CopyMask copyMask = null,
            ISkyrimMajorRecordGetter def = null)
        {
            SkyrimMajorRecord ret = (SkyrimMajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(IMajorRecordGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ISkyrimMajorRecordGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ISkyrimMajorRecordGetter rhs,
            SkyrimMajorRecord_CopyMask copyMask,
            ISkyrimMajorRecordGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ISkyrimMajorRecordGetter rhs,
            out SkyrimMajorRecord_ErrorMask errorMask,
            SkyrimMajorRecord_CopyMask copyMask = null,
            ISkyrimMajorRecordGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SkyrimMajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = SkyrimMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            SkyrimMajorRecord_CopyMask copyMask = null,
            ISkyrimMajorRecordGetter def = null)
        {
            SkyrimMajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected override void SetNthObject(ushort index, object obj)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    this.SkyrimMajorRecordFlags = (SkyrimMajorRecord.SkyrimMajorRecordFlag)obj;
                    break;
                default:
                    base.SetNthObject(index, obj);
                    break;
            }
        }

        public override void Clear()
        {
            CallClearPartial_Internal();
            SkyrimMajorRecordCommon.Clear(this);
        }


        protected new static void CopyInInternal_SkyrimMajorRecord(SkyrimMajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SkyrimMajorRecord_FieldIndex enu))
            {
                CopyInInternal_MajorRecord(obj, pair);
            }
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    obj.SkyrimMajorRecordFlags = (SkyrimMajorRecord.SkyrimMajorRecordFlag)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISkyrimMajorRecord :
        ISkyrimMajorRecordGetter,
        IMajorRecord,
        ILoquiClass<ISkyrimMajorRecord, ISkyrimMajorRecordGetter>,
        ILoquiClass<SkyrimMajorRecord, ISkyrimMajorRecordGetter>
    {
        new SkyrimMajorRecord.SkyrimMajorRecordFlag SkyrimMajorRecordFlags { get; set; }

        void CopyFieldsFrom(
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask = null,
            SkyrimMajorRecord_CopyMask copyMask = null,
            ISkyrimMajorRecordGetter def = null);
    }

    public partial interface ISkyrimMajorRecordInternal :
        IMajorRecordInternal,
        ISkyrimMajorRecord,
        ISkyrimMajorRecordInternalGetter
    {
    }

    public partial interface ISkyrimMajorRecordGetter :
        IMajorRecordGetter,
        IXmlItem,
        IBinaryItem
    {
        #region SkyrimMajorRecordFlags
        SkyrimMajorRecord.SkyrimMajorRecordFlag SkyrimMajorRecordFlags { get; }

        #endregion

    }

    public partial interface ISkyrimMajorRecordInternalGetter :
        IMajorRecordInternalGetter,
        ISkyrimMajorRecordGetter
    {

    }

    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SkyrimMajorRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        SkyrimMajorRecordFlags = 4,
    }
    #endregion

    #region Registration
    public class SkyrimMajorRecord_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMajorRecord_Registration Instance = new SkyrimMajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "4c3a4042-d85b-4f7e-8f54-443bb2efefd4";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SkyrimMajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMajorRecord);

        public static readonly Type GetterType = typeof(ISkyrimMajorRecordGetter);

        public static readonly Type InternalGetterType = typeof(ISkyrimMajorRecordInternalGetter);

        public static readonly Type SetterType = typeof(ISkyrimMajorRecord);

        public static readonly Type InternalSetterType = typeof(ISkyrimMajorRecordInternal);

        public static readonly Type CommonType = typeof(SkyrimMajorRecordCommon);

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMajorRecord";

        public const string Name = "SkyrimMajorRecord";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKYRIMMAJORRECORDFLAGS":
                    return (ushort)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return "SkyrimMajorRecordFlags";
                default:
                    return MajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return false;
                default:
                    return MajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return typeof(SkyrimMajorRecord.SkyrimMajorRecordFlag);
                default:
                    return MajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlTranslation = typeof(SkyrimMajorRecordXmlTranslation);
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        GMST_HEADER,
                        GLOB_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryTranslation = typeof(SkyrimMajorRecordBinaryTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class SkyrimMajorRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ISkyrimMajorRecordGetter def,
            ErrorMaskBuilder errorMask,
            SkyrimMajorRecord_CopyMask copyMask)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask);
            if (copyMask?.SkyrimMajorRecordFlags ?? true)
            {
                errorMask?.PushIndex((int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags);
                try
                {
                    item.SkyrimMajorRecordFlags = rhs.SkyrimMajorRecordFlags;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ISkyrimMajorRecord item)
        {
            item.SkyrimMajorRecordFlags = default(SkyrimMajorRecord.SkyrimMajorRecordFlag);
        }

        public static SkyrimMajorRecord_Mask<bool> GetEqualsMask(
            this ISkyrimMajorRecordGetter item,
            ISkyrimMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMajorRecord_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ISkyrimMajorRecordGetter item,
            ISkyrimMajorRecordGetter rhs,
            SkyrimMajorRecord_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SkyrimMajorRecordFlags = item.SkyrimMajorRecordFlags == rhs.SkyrimMajorRecordFlags;
            MajorRecordCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ISkyrimMajorRecordGetter item,
            string name = null,
            SkyrimMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ISkyrimMajorRecordGetter item,
            FileGeneration fg,
            string name = null,
            SkyrimMajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(SkyrimMajorRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(SkyrimMajorRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SkyrimMajorRecordFlags ?? true)
                {
                    fg.AppendLine($"SkyrimMajorRecordFlags => {item.SkyrimMajorRecordFlags}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ISkyrimMajorRecordGetter item,
            SkyrimMajorRecord_Mask<bool?> checkMask)
        {
            return true;
        }

        public static SkyrimMajorRecord_Mask<bool> GetHasBeenSetMask(ISkyrimMajorRecordGetter item)
        {
            var ret = new SkyrimMajorRecord_Mask<bool>();
            ret.SkyrimMajorRecordFlags = true;
            return ret;
        }

        public static SkyrimMajorRecord_FieldIndex? ConvertFieldIndex(MajorRecord_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static SkyrimMajorRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SkyrimMajorRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SkyrimMajorRecordXmlTranslation :
        MajorRecordXmlTranslation,
        IXmlTranslator
    {
        public new readonly static SkyrimMajorRecordXmlTranslation Instance = new SkyrimMajorRecordXmlTranslation();

        public static void WriteToNode_Xml(
            ISkyrimMajorRecordInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            MajorRecordXmlTranslation.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags) ?? true))
            {
                EnumXmlTranslation<SkyrimMajorRecord.SkyrimMajorRecordFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.SkyrimMajorRecordFlags),
                    item: item.SkyrimMajorRecordFlags,
                    fieldIndex: (int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkyrimMajorRecordXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            ISkyrimMajorRecordInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "SkyrimMajorRecordFlags":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags);
                        if (EnumXmlTranslation<SkyrimMajorRecord.SkyrimMajorRecordFlag>.Instance.Parse(
                            node: node,
                            item: out SkyrimMajorRecord.SkyrimMajorRecordFlag SkyrimMajorRecordFlagsParse,
                            errorMask: errorMask))
                        {
                            item.SkyrimMajorRecordFlags = SkyrimMajorRecordFlagsParse;
                        }
                        else
                        {
                            item.SkyrimMajorRecordFlags = default(SkyrimMajorRecord.SkyrimMajorRecordFlag);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    MajorRecordXmlTranslation.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        public virtual void Write(
            XElement node,
            ISkyrimMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SkyrimMajorRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SkyrimMajorRecord");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISkyrimMajorRecordInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISkyrimMajorRecordInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    #region Xml Write Mixins
    public static class SkyrimMajorRecordXmlTranslationMixIn
    {
        public static void Write_Xml(
            this ISkyrimMajorRecordInternalGetter item,
            XElement node,
            out SkyrimMajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SkyrimMajorRecordXmlTranslation)item.XmlTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this ISkyrimMajorRecordInternalGetter item,
            string path,
            out SkyrimMajorRecord_ErrorMask errorMask,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ISkyrimMajorRecordInternalGetter item,
            Stream stream,
            out SkyrimMajorRecord_ErrorMask errorMask,
            SkyrimMajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class SkyrimMajorRecord_Mask<T> : MajorRecord_Mask<T>, IMask<T>, IEquatable<SkyrimMajorRecord_Mask<T>>
    {
        #region Ctors
        public SkyrimMajorRecord_Mask()
        {
        }

        public SkyrimMajorRecord_Mask(T initialValue)
        {
            this.SkyrimMajorRecordFlags = initialValue;
        }
        #endregion

        #region Members
        public T SkyrimMajorRecordFlags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SkyrimMajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkyrimMajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.SkyrimMajorRecordFlags, rhs.SkyrimMajorRecordFlags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.SkyrimMajorRecordFlags?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.SkyrimMajorRecordFlags)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new SkyrimMajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SkyrimMajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SkyrimMajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.SkyrimMajorRecordFlags = eval(this.SkyrimMajorRecordFlags);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SkyrimMajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SkyrimMajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SkyrimMajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.SkyrimMajorRecordFlags ?? true)
                {
                    fg.AppendLine($"SkyrimMajorRecordFlags => {SkyrimMajorRecordFlags}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SkyrimMajorRecord_ErrorMask : MajorRecord_ErrorMask, IErrorMask<SkyrimMajorRecord_ErrorMask>
    {
        #region Members
        public Exception SkyrimMajorRecordFlags;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return SkyrimMajorRecordFlags;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    this.SkyrimMajorRecordFlags = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            SkyrimMajorRecord_FieldIndex enu = (SkyrimMajorRecord_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    this.SkyrimMajorRecordFlags = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (SkyrimMajorRecordFlags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("SkyrimMajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"SkyrimMajorRecordFlags => {SkyrimMajorRecordFlags}");
        }
        #endregion

        #region Combine
        public SkyrimMajorRecord_ErrorMask Combine(SkyrimMajorRecord_ErrorMask rhs)
        {
            var ret = new SkyrimMajorRecord_ErrorMask();
            ret.SkyrimMajorRecordFlags = this.SkyrimMajorRecordFlags.Combine(rhs.SkyrimMajorRecordFlags);
            return ret;
        }
        public static SkyrimMajorRecord_ErrorMask Combine(SkyrimMajorRecord_ErrorMask lhs, SkyrimMajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SkyrimMajorRecord_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SkyrimMajorRecord_ErrorMask();
        }
        #endregion

    }
    public class SkyrimMajorRecord_CopyMask : MajorRecord_CopyMask
    {
        public SkyrimMajorRecord_CopyMask()
        {
        }

        public SkyrimMajorRecord_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.SkyrimMajorRecordFlags = defaultOn;
        }

        #region Members
        public bool SkyrimMajorRecordFlags;
        #endregion

    }

    public class SkyrimMajorRecord_TranslationMask : MajorRecord_TranslationMask
    {
        #region Members
        public bool SkyrimMajorRecordFlags;
        #endregion

        #region Ctors
        public SkyrimMajorRecord_TranslationMask()
            : base()
        {
        }

        public SkyrimMajorRecord_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.SkyrimMajorRecordFlags = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((SkyrimMajorRecordFlags, null));
        }
    }
    #endregion

    #region Binary Translation
    public partial class SkyrimMajorRecordBinaryTranslation :
        MajorRecordBinaryTranslation,
        IBinaryTranslator
    {
        public new readonly static SkyrimMajorRecordBinaryTranslation Instance = new SkyrimMajorRecordBinaryTranslation();

        public static void Write_Embedded(
            ISkyrimMajorRecordInternalGetter item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
        {
            MajorRecordBinaryTranslation.Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public virtual void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask,
                masterReferences: masterReferences);
            MajorRecordBinaryTranslation.Write_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISkyrimMajorRecordInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordInternalGetter item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write(
                item: (ISkyrimMajorRecordInternalGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    #region Binary Write Mixins
    public static class SkyrimMajorRecordBinaryTranslationMixIn
    {
        public static void Write_Binary(
            this ISkyrimMajorRecordInternalGetter item,
            MutagenWriter writer,
            MasterReferences masterReferences,
            out SkyrimMajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SkyrimMajorRecordBinaryTranslation)item.BinaryTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SkyrimMajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

    }
    #endregion

    #endregion

    #endregion

}
