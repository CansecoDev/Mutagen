/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Skyrim.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SkyrimMod :
        ISkyrimMod,
        ILoquiObjectSetter<SkyrimMod>,
        IEquatable<SkyrimMod>,
        IEqualsMask
    {
        #region Ctor
        protected SkyrimMod()
        {
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _HeadParts_Object = new Group<HeadPart>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eyes>(this);
            _Races_Object = new Group<Race>(this);
            _SoundMarkers_Object = new Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Group<AcousticSpace>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Group<ObjectEffect>(this);
            _Spells_Object = new Group<Spell>(this);
            _Scrolls_Object = new Group<Scroll>(this);
            _Activators_Object = new Group<Activator>(this);
            _TalkingActivators_Object = new Group<TalkingActivator>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _MiscItems_Object = new Group<MiscItem>(this);
            _AlchemicalApparatuses_Object = new Group<AlchemicalApparatus>(this);
            _Statics_Object = new Group<Static>(this);
            _MoveableStatics_Object = new Group<MoveableStatic>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Florae_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _LeveledNpcs_Object = new Group<LeveledNpc>(this);
            _Keys_Object = new Group<Key>(this);
            _Ingestibles_Object = new Group<Ingestible>(this);
            _IdleMarkers_Object = new Group<IdleMarker>(this);
            _ConstructibleObjects_Object = new Group<ConstructibleObject>(this);
            _Projectiles_Object = new Group<Projectile>(this);
            _Hazards_Object = new Group<Hazard>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _ShaderParticleGeometries_Object = new Group<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new Group<VisualEffect>(this);
            _Regions_Object = new Group<Region>(this);
            _NavigationMeshInfoMaps_Object = new Group<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _Packages_Object = new Group<Package>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            _Explosions_Object = new Group<Explosion>(this);
            _Debris_Object = new Group<Debris>(this);
            _ImageSpaces_Object = new Group<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new Group<ImageSpaceAdapter>(this);
            _FormLists_Object = new Group<FormList>(this);
            _Perks_Object = new Group<Perk>(this);
            _BodyParts_Object = new Group<BodyPartData>(this);
            _AddonNodes_Object = new Group<AddonNode>(this);
            _ActorValueInformation_Object = new Group<ActorValueInformation>(this);
            _CameraShots_Object = new Group<CameraShot>(this);
            _CameraPaths_Object = new Group<CameraPath>(this);
            _VoiceTypes_Object = new Group<VoiceType>(this);
            _MaterialTypes_Object = new Group<MaterialType>(this);
            _Impacts_Object = new Group<Impact>(this);
            _ImpactDataSets_Object = new Group<ImpactDataSet>(this);
            _ArmorAddons_Object = new Group<ArmorAddon>(this);
            _EncounterZones_Object = new Group<EncounterZone>(this);
            _Locations_Object = new Group<Location>(this);
            _Messages_Object = new Group<Message>(this);
            _DefaultObjectManagers_Object = new Group<DefaultObjectManager>(this);
            _LightingTemplates_Object = new Group<LightingTemplate>(this);
            _MusicTypes_Object = new Group<MusicType>(this);
            _Footsteps_Object = new Group<Footstep>(this);
            _FootstepSets_Object = new Group<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new Group<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new Group<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new Group<StoryManagerEventNode>(this);
            _DialogBranches_Object = new Group<DialogBranch>(this);
            _MusicTracks_Object = new Group<MusicTrack>(this);
            _DialogViews_Object = new Group<DialogView>(this);
            _WordsOfPower_Object = new Group<WordOfPower>(this);
            _Shouts_Object = new Group<Shout>(this);
            _EquipTypes_Object = new Group<EquipType>(this);
            _Relationships_Object = new Group<Relationship>(this);
            _Scenes_Object = new Group<Scene>(this);
            _AssociationTypes_Object = new Group<AssociationType>(this);
            _Outfits_Object = new Group<Outfit>(this);
            _ArtObjects_Object = new Group<ArtObject>(this);
            _MaterialObjects_Object = new Group<MaterialObject>(this);
            _MovementTypes_Object = new Group<MovementType>(this);
            _SoundDescriptors_Object = new Group<SoundDescriptor>(this);
            _DualCastData_Object = new Group<DualCastData>(this);
            _SoundCategories_Object = new Group<SoundCategory>(this);
            _SoundOutputModels_Object = new Group<SoundOutputModel>(this);
            _CollisionLayers_Object = new Group<CollisionLayer>(this);
            _Colors_Object = new Group<ColorRecord>(this);
            _ReverbParameters_Object = new Group<ReverbParameters>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ModHeader _ModHeader_Object = new ModHeader();
        public ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModHeaderGetter ISkyrimModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGameSettingGetter> ISkyrimModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Keyword> _Keywords_Object;
        public Group<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeywordGetter> ISkyrimModGetter.Keywords => _Keywords_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LocationReferenceType> _LocationReferenceTypes_Object;
        public Group<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILocationReferenceTypeGetter> ISkyrimModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ActionRecord> _Actions_Object;
        public Group<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActionRecordGetter> ISkyrimModGetter.Actions => _Actions_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<TextureSet> _TextureSets_Object;
        public Group<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITextureSetGetter> ISkyrimModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGlobalGetter> ISkyrimModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Class> _Classes_Object;
        public Group<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClassGetter> ISkyrimModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Faction> _Factions_Object;
        public Group<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFactionGetter> ISkyrimModGetter.Factions => _Factions_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<HeadPart> _HeadParts_Object;
        public Group<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHeadPartGetter> ISkyrimModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hair> _Hairs_Object;
        public Group<Hair> Hairs => _Hairs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHairGetter> ISkyrimModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Eyes> _Eyes_Object;
        public Group<Eyes> Eyes => _Eyes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEyesGetter> ISkyrimModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Race> _Races_Object;
        public Group<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRaceGetter> ISkyrimModGetter.Races => _Races_Object;
        #endregion
        #region SoundMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundMarker> _SoundMarkers_Object;
        public Group<SoundMarker> SoundMarkers => _SoundMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundMarkerGetter> ISkyrimModGetter.SoundMarkers => _SoundMarkers_Object;
        #endregion
        #region AcousticSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AcousticSpace> _AcousticSpaces_Object;
        public Group<AcousticSpace> AcousticSpaces => _AcousticSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAcousticSpaceGetter> ISkyrimModGetter.AcousticSpaces => _AcousticSpaces_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MagicEffect> _MagicEffects_Object;
        public Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMagicEffectGetter> ISkyrimModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region LandscapeTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LandscapeTexture> _LandscapeTextures_Object;
        public Group<LandscapeTexture> LandscapeTextures => _LandscapeTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILandscapeTextureGetter> ISkyrimModGetter.LandscapeTextures => _LandscapeTextures_Object;
        #endregion
        #region ObjectEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ObjectEffect> _ObjectEffects_Object;
        public Group<ObjectEffect> ObjectEffects => _ObjectEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IObjectEffectGetter> ISkyrimModGetter.ObjectEffects => _ObjectEffects_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Spell> _Spells_Object;
        public Group<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISpellGetter> ISkyrimModGetter.Spells => _Spells_Object;
        #endregion
        #region Scrolls
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Scroll> _Scrolls_Object;
        public Group<Scroll> Scrolls => _Scrolls_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IScrollGetter> ISkyrimModGetter.Scrolls => _Scrolls_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Activator> _Activators_Object;
        public Group<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActivatorGetter> ISkyrimModGetter.Activators => _Activators_Object;
        #endregion
        #region TalkingActivators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<TalkingActivator> _TalkingActivators_Object;
        public Group<TalkingActivator> TalkingActivators => _TalkingActivators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITalkingActivatorGetter> ISkyrimModGetter.TalkingActivators => _TalkingActivators_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Armor> _Armors_Object;
        public Group<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArmorGetter> ISkyrimModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Book> _Books_Object;
        public Group<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBookGetter> ISkyrimModGetter.Books => _Books_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Container> _Containers_Object;
        public Group<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IContainerGetter> ISkyrimModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Door> _Doors_Object;
        public Group<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDoorGetter> ISkyrimModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingredient> _Ingredients_Object;
        public Group<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngredientGetter> ISkyrimModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Light> _Lights_Object;
        public Group<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILightGetter> ISkyrimModGetter.Lights => _Lights_Object;
        #endregion
        #region MiscItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MiscItem> _MiscItems_Object;
        public Group<MiscItem> MiscItems => _MiscItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMiscItemGetter> ISkyrimModGetter.MiscItems => _MiscItems_Object;
        #endregion
        #region AlchemicalApparatuses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AlchemicalApparatus> _AlchemicalApparatuses_Object;
        public Group<AlchemicalApparatus> AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAlchemicalApparatusGetter> ISkyrimModGetter.AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Static> _Statics_Object;
        public Group<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStaticGetter> ISkyrimModGetter.Statics => _Statics_Object;
        #endregion
        #region MoveableStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MoveableStatic> _MoveableStatics_Object;
        public Group<MoveableStatic> MoveableStatics => _MoveableStatics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMoveableStaticGetter> ISkyrimModGetter.MoveableStatics => _MoveableStatics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Grass> _Grasses_Object;
        public Group<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IGrassGetter> ISkyrimModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Tree> _Trees_Object;
        public Group<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ITreeGetter> ISkyrimModGetter.Trees => _Trees_Object;
        #endregion
        #region Florae
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Flora> _Florae_Object;
        public Group<Flora> Florae => _Florae_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFloraGetter> ISkyrimModGetter.Florae => _Florae_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Furniture> _Furniture_Object;
        public Group<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFurnitureGetter> ISkyrimModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weapon> _Weapons_Object;
        public Group<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeaponGetter> ISkyrimModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ammunition> _Ammunitions_Object;
        public Group<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAmmunitionGetter> ISkyrimModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Npc> _Npcs_Object;
        public Group<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<INpcGetter> ISkyrimModGetter.Npcs => _Npcs_Object;
        #endregion
        #region LeveledNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledNpc> _LeveledNpcs_Object;
        public Group<LeveledNpc> LeveledNpcs => _LeveledNpcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledNpcGetter> ISkyrimModGetter.LeveledNpcs => _LeveledNpcs_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Key> _Keys_Object;
        public Group<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IKeyGetter> ISkyrimModGetter.Keys => _Keys_Object;
        #endregion
        #region Ingestibles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Ingestible> _Ingestibles_Object;
        public Group<Ingestible> Ingestibles => _Ingestibles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIngestibleGetter> ISkyrimModGetter.Ingestibles => _Ingestibles_Object;
        #endregion
        #region IdleMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleMarker> _IdleMarkers_Object;
        public Group<IdleMarker> IdleMarkers => _IdleMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIdleMarkerGetter> ISkyrimModGetter.IdleMarkers => _IdleMarkers_Object;
        #endregion
        #region ConstructibleObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ConstructibleObject> _ConstructibleObjects_Object;
        public Group<ConstructibleObject> ConstructibleObjects => _ConstructibleObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IConstructibleObjectGetter> ISkyrimModGetter.ConstructibleObjects => _ConstructibleObjects_Object;
        #endregion
        #region Projectiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Projectile> _Projectiles_Object;
        public Group<Projectile> Projectiles => _Projectiles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IProjectileGetter> ISkyrimModGetter.Projectiles => _Projectiles_Object;
        #endregion
        #region Hazards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Hazard> _Hazards_Object;
        public Group<Hazard> Hazards => _Hazards_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IHazardGetter> ISkyrimModGetter.Hazards => _Hazards_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoulGem> _SoulGems_Object;
        public Group<SoulGem> SoulGems => _SoulGems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoulGemGetter> ISkyrimModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledItem> _LeveledItems_Object;
        public Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledItemGetter> ISkyrimModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Weather> _Weathers_Object;
        public Group<Weather> Weathers => _Weathers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWeatherGetter> ISkyrimModGetter.Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Climate> _Climates_Object;
        public Group<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IClimateGetter> ISkyrimModGetter.Climates => _Climates_Object;
        #endregion
        #region ShaderParticleGeometries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ShaderParticleGeometry> _ShaderParticleGeometries_Object;
        public Group<ShaderParticleGeometry> ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IShaderParticleGeometryGetter> ISkyrimModGetter.ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        #endregion
        #region VisualEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<VisualEffect> _VisualEffects_Object;
        public Group<VisualEffect> VisualEffects => _VisualEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IVisualEffectGetter> ISkyrimModGetter.VisualEffects => _VisualEffects_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Region> _Regions_Object;
        public Group<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRegionGetter> ISkyrimModGetter.Regions => _Regions_Object;
        #endregion
        #region NavigationMeshInfoMaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<NavigationMeshInfoMap> _NavigationMeshInfoMaps_Object;
        public Group<NavigationMeshInfoMap> NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<INavigationMeshInfoMapGetter> ISkyrimModGetter.NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ListGroup<CellBlock> _Cells_Object = new ListGroup<CellBlock>();
        public ListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IListGroupGetter<ICellBlockGetter> ISkyrimModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Worldspace> _Worldspaces_Object;
        public Group<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWorldspaceGetter> ISkyrimModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogTopic> _DialogTopics_Object;
        public Group<DialogTopic> DialogTopics => _DialogTopics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogTopicGetter> ISkyrimModGetter.DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Quest> _Quests_Object;
        public Group<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IQuestGetter> ISkyrimModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<IdleAnimation> _IdleAnimations_Object;
        public Group<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IIdleAnimationGetter> ISkyrimModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Package> _Packages_Object;
        public Group<Package> Packages => _Packages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IPackageGetter> ISkyrimModGetter.Packages => _Packages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CombatStyle> _CombatStyles_Object;
        public Group<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICombatStyleGetter> ISkyrimModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LoadScreen> _LoadScreens_Object;
        public Group<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILoadScreenGetter> ISkyrimModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LeveledSpell> _LeveledSpells_Object;
        public Group<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILeveledSpellGetter> ISkyrimModGetter.LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AnimatedObject> _AnimatedObjects_Object;
        public Group<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAnimatedObjectGetter> ISkyrimModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Water> _Waters_Object;
        public Group<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWaterGetter> ISkyrimModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EffectShader> _EffectShaders_Object;
        public Group<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEffectShaderGetter> ISkyrimModGetter.EffectShaders => _EffectShaders_Object;
        #endregion
        #region Explosions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Explosion> _Explosions_Object;
        public Group<Explosion> Explosions => _Explosions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IExplosionGetter> ISkyrimModGetter.Explosions => _Explosions_Object;
        #endregion
        #region Debris
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Debris> _Debris_Object;
        public Group<Debris> Debris => _Debris_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDebrisGetter> ISkyrimModGetter.Debris => _Debris_Object;
        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ImageSpace> _ImageSpaces_Object;
        public Group<ImageSpace> ImageSpaces => _ImageSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImageSpaceGetter> ISkyrimModGetter.ImageSpaces => _ImageSpaces_Object;
        #endregion
        #region ImageSpaceAdapters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ImageSpaceAdapter> _ImageSpaceAdapters_Object;
        public Group<ImageSpaceAdapter> ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImageSpaceAdapterGetter> ISkyrimModGetter.ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        #endregion
        #region FormLists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<FormList> _FormLists_Object;
        public Group<FormList> FormLists => _FormLists_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFormListGetter> ISkyrimModGetter.FormLists => _FormLists_Object;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Perk> _Perks_Object;
        public Group<Perk> Perks => _Perks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IPerkGetter> ISkyrimModGetter.Perks => _Perks_Object;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<BodyPartData> _BodyParts_Object;
        public Group<BodyPartData> BodyParts => _BodyParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IBodyPartDataGetter> ISkyrimModGetter.BodyParts => _BodyParts_Object;
        #endregion
        #region AddonNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AddonNode> _AddonNodes_Object;
        public Group<AddonNode> AddonNodes => _AddonNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAddonNodeGetter> ISkyrimModGetter.AddonNodes => _AddonNodes_Object;
        #endregion
        #region ActorValueInformation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ActorValueInformation> _ActorValueInformation_Object;
        public Group<ActorValueInformation> ActorValueInformation => _ActorValueInformation_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IActorValueInformationGetter> ISkyrimModGetter.ActorValueInformation => _ActorValueInformation_Object;
        #endregion
        #region CameraShots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CameraShot> _CameraShots_Object;
        public Group<CameraShot> CameraShots => _CameraShots_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICameraShotGetter> ISkyrimModGetter.CameraShots => _CameraShots_Object;
        #endregion
        #region CameraPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CameraPath> _CameraPaths_Object;
        public Group<CameraPath> CameraPaths => _CameraPaths_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICameraPathGetter> ISkyrimModGetter.CameraPaths => _CameraPaths_Object;
        #endregion
        #region VoiceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<VoiceType> _VoiceTypes_Object;
        public Group<VoiceType> VoiceTypes => _VoiceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IVoiceTypeGetter> ISkyrimModGetter.VoiceTypes => _VoiceTypes_Object;
        #endregion
        #region MaterialTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MaterialType> _MaterialTypes_Object;
        public Group<MaterialType> MaterialTypes => _MaterialTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMaterialTypeGetter> ISkyrimModGetter.MaterialTypes => _MaterialTypes_Object;
        #endregion
        #region Impacts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Impact> _Impacts_Object;
        public Group<Impact> Impacts => _Impacts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImpactGetter> ISkyrimModGetter.Impacts => _Impacts_Object;
        #endregion
        #region ImpactDataSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ImpactDataSet> _ImpactDataSets_Object;
        public Group<ImpactDataSet> ImpactDataSets => _ImpactDataSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IImpactDataSetGetter> ISkyrimModGetter.ImpactDataSets => _ImpactDataSets_Object;
        #endregion
        #region ArmorAddons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ArmorAddon> _ArmorAddons_Object;
        public Group<ArmorAddon> ArmorAddons => _ArmorAddons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArmorAddonGetter> ISkyrimModGetter.ArmorAddons => _ArmorAddons_Object;
        #endregion
        #region EncounterZones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EncounterZone> _EncounterZones_Object;
        public Group<EncounterZone> EncounterZones => _EncounterZones_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEncounterZoneGetter> ISkyrimModGetter.EncounterZones => _EncounterZones_Object;
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Location> _Locations_Object;
        public Group<Location> Locations => _Locations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILocationGetter> ISkyrimModGetter.Locations => _Locations_Object;
        #endregion
        #region Messages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Message> _Messages_Object;
        public Group<Message> Messages => _Messages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMessageGetter> ISkyrimModGetter.Messages => _Messages_Object;
        #endregion
        #region DefaultObjectManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DefaultObjectManager> _DefaultObjectManagers_Object;
        public Group<DefaultObjectManager> DefaultObjectManagers => _DefaultObjectManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDefaultObjectManagerGetter> ISkyrimModGetter.DefaultObjectManagers => _DefaultObjectManagers_Object;
        #endregion
        #region LightingTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<LightingTemplate> _LightingTemplates_Object;
        public Group<LightingTemplate> LightingTemplates => _LightingTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ILightingTemplateGetter> ISkyrimModGetter.LightingTemplates => _LightingTemplates_Object;
        #endregion
        #region MusicTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MusicType> _MusicTypes_Object;
        public Group<MusicType> MusicTypes => _MusicTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMusicTypeGetter> ISkyrimModGetter.MusicTypes => _MusicTypes_Object;
        #endregion
        #region Footsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Footstep> _Footsteps_Object;
        public Group<Footstep> Footsteps => _Footsteps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFootstepGetter> ISkyrimModGetter.Footsteps => _Footsteps_Object;
        #endregion
        #region FootstepSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<FootstepSet> _FootstepSets_Object;
        public Group<FootstepSet> FootstepSets => _FootstepSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IFootstepSetGetter> ISkyrimModGetter.FootstepSets => _FootstepSets_Object;
        #endregion
        #region StoryManagerBranchNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<StoryManagerBranchNode> _StoryManagerBranchNodes_Object;
        public Group<StoryManagerBranchNode> StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStoryManagerBranchNodeGetter> ISkyrimModGetter.StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        #endregion
        #region StoryManagerQuestNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<StoryManagerQuestNode> _StoryManagerQuestNodes_Object;
        public Group<StoryManagerQuestNode> StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStoryManagerQuestNodeGetter> ISkyrimModGetter.StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        #endregion
        #region StoryManagerEventNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<StoryManagerEventNode> _StoryManagerEventNodes_Object;
        public Group<StoryManagerEventNode> StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IStoryManagerEventNodeGetter> ISkyrimModGetter.StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        #endregion
        #region DialogBranches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogBranch> _DialogBranches_Object;
        public Group<DialogBranch> DialogBranches => _DialogBranches_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogBranchGetter> ISkyrimModGetter.DialogBranches => _DialogBranches_Object;
        #endregion
        #region MusicTracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MusicTrack> _MusicTracks_Object;
        public Group<MusicTrack> MusicTracks => _MusicTracks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMusicTrackGetter> ISkyrimModGetter.MusicTracks => _MusicTracks_Object;
        #endregion
        #region DialogViews
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DialogView> _DialogViews_Object;
        public Group<DialogView> DialogViews => _DialogViews_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDialogViewGetter> ISkyrimModGetter.DialogViews => _DialogViews_Object;
        #endregion
        #region WordsOfPower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<WordOfPower> _WordsOfPower_Object;
        public Group<WordOfPower> WordsOfPower => _WordsOfPower_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IWordOfPowerGetter> ISkyrimModGetter.WordsOfPower => _WordsOfPower_Object;
        #endregion
        #region Shouts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Shout> _Shouts_Object;
        public Group<Shout> Shouts => _Shouts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IShoutGetter> ISkyrimModGetter.Shouts => _Shouts_Object;
        #endregion
        #region EquipTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<EquipType> _EquipTypes_Object;
        public Group<EquipType> EquipTypes => _EquipTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IEquipTypeGetter> ISkyrimModGetter.EquipTypes => _EquipTypes_Object;
        #endregion
        #region Relationships
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Relationship> _Relationships_Object;
        public Group<Relationship> Relationships => _Relationships_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IRelationshipGetter> ISkyrimModGetter.Relationships => _Relationships_Object;
        #endregion
        #region Scenes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Scene> _Scenes_Object;
        public Group<Scene> Scenes => _Scenes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISceneGetter> ISkyrimModGetter.Scenes => _Scenes_Object;
        #endregion
        #region AssociationTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<AssociationType> _AssociationTypes_Object;
        public Group<AssociationType> AssociationTypes => _AssociationTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IAssociationTypeGetter> ISkyrimModGetter.AssociationTypes => _AssociationTypes_Object;
        #endregion
        #region Outfits
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<Outfit> _Outfits_Object;
        public Group<Outfit> Outfits => _Outfits_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IOutfitGetter> ISkyrimModGetter.Outfits => _Outfits_Object;
        #endregion
        #region ArtObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ArtObject> _ArtObjects_Object;
        public Group<ArtObject> ArtObjects => _ArtObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IArtObjectGetter> ISkyrimModGetter.ArtObjects => _ArtObjects_Object;
        #endregion
        #region MaterialObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MaterialObject> _MaterialObjects_Object;
        public Group<MaterialObject> MaterialObjects => _MaterialObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMaterialObjectGetter> ISkyrimModGetter.MaterialObjects => _MaterialObjects_Object;
        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<MovementType> _MovementTypes_Object;
        public Group<MovementType> MovementTypes => _MovementTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IMovementTypeGetter> ISkyrimModGetter.MovementTypes => _MovementTypes_Object;
        #endregion
        #region SoundDescriptors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundDescriptor> _SoundDescriptors_Object;
        public Group<SoundDescriptor> SoundDescriptors => _SoundDescriptors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundDescriptorGetter> ISkyrimModGetter.SoundDescriptors => _SoundDescriptors_Object;
        #endregion
        #region DualCastData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<DualCastData> _DualCastData_Object;
        public Group<DualCastData> DualCastData => _DualCastData_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IDualCastDataGetter> ISkyrimModGetter.DualCastData => _DualCastData_Object;
        #endregion
        #region SoundCategories
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundCategory> _SoundCategories_Object;
        public Group<SoundCategory> SoundCategories => _SoundCategories_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundCategoryGetter> ISkyrimModGetter.SoundCategories => _SoundCategories_Object;
        #endregion
        #region SoundOutputModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<SoundOutputModel> _SoundOutputModels_Object;
        public Group<SoundOutputModel> SoundOutputModels => _SoundOutputModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ISoundOutputModelGetter> ISkyrimModGetter.SoundOutputModels => _SoundOutputModels_Object;
        #endregion
        #region CollisionLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<CollisionLayer> _CollisionLayers_Object;
        public Group<CollisionLayer> CollisionLayers => _CollisionLayers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<ICollisionLayerGetter> ISkyrimModGetter.CollisionLayers => _CollisionLayers_Object;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ColorRecord> _Colors_Object;
        public Group<ColorRecord> Colors => _Colors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IColorRecordGetter> ISkyrimModGetter.Colors => _Colors_Object;
        #endregion
        #region ReverbParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Group<ReverbParameters> _ReverbParameters_Object;
        public Group<ReverbParameters> ReverbParameters => _ReverbParameters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGroupGetter<IReverbParametersGetter> ISkyrimModGetter.ReverbParameters => _ReverbParameters_Object;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkyrimModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISkyrimModGetter rhs)) return false;
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SkyrimMod? obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SkyrimMod();
            ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            string path,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, ModHeader.Mask<TItem>?>(initialValue, new ModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AcousticSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LandscapeTextures = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ObjectEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Scrolls = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.TalkingActivators = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MiscItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AlchemicalApparatuses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MoveableStatics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Florae = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledNpcs = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Ingestibles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.IdleMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ConstructibleObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Projectiles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Hazards = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Weathers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ShaderParticleGeometries = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.VisualEffects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, ListGroup.Mask<TItem>?>(initialValue, new ListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogTopics = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LeveledSpells = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Explosions = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Debris = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ImageSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ImageSpaceAdapters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.FormLists = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Perks = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.BodyParts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AddonNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ActorValueInformation = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CameraShots = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CameraPaths = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.VoiceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MaterialTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Impacts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ImpactDataSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ArmorAddons = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EncounterZones = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Locations = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Messages = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DefaultObjectManagers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.LightingTemplates = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MusicTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Footsteps = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.FootstepSets = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.StoryManagerBranchNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.StoryManagerQuestNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.StoryManagerEventNodes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogBranches = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MusicTracks = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DialogViews = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.WordsOfPower = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Shouts = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.EquipTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Relationships = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Scenes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.AssociationTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Outfits = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ArtObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MaterialObjects = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.MovementTypes = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundDescriptors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.DualCastData = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundCategories = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.SoundOutputModels = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.CollisionLayers = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.Colors = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
                this.ReverbParameters = new MaskItem<TItem, Group.Mask<TItem>?>(initialValue, new Group.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem TextureSets,
                TItem Globals,
                TItem Classes,
                TItem Factions,
                TItem HeadParts,
                TItem Hairs,
                TItem Eyes,
                TItem Races,
                TItem SoundMarkers,
                TItem AcousticSpaces,
                TItem MagicEffects,
                TItem LandscapeTextures,
                TItem ObjectEffects,
                TItem Spells,
                TItem Scrolls,
                TItem Activators,
                TItem TalkingActivators,
                TItem Armors,
                TItem Books,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem MiscItems,
                TItem AlchemicalApparatuses,
                TItem Statics,
                TItem MoveableStatics,
                TItem Grasses,
                TItem Trees,
                TItem Florae,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem LeveledNpcs,
                TItem Keys,
                TItem Ingestibles,
                TItem IdleMarkers,
                TItem ConstructibleObjects,
                TItem Projectiles,
                TItem Hazards,
                TItem SoulGems,
                TItem LeveledItems,
                TItem Weathers,
                TItem Climates,
                TItem ShaderParticleGeometries,
                TItem VisualEffects,
                TItem Regions,
                TItem NavigationMeshInfoMaps,
                TItem Cells,
                TItem Worldspaces,
                TItem DialogTopics,
                TItem Quests,
                TItem IdleAnimations,
                TItem Packages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem LeveledSpells,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders,
                TItem Explosions,
                TItem Debris,
                TItem ImageSpaces,
                TItem ImageSpaceAdapters,
                TItem FormLists,
                TItem Perks,
                TItem BodyParts,
                TItem AddonNodes,
                TItem ActorValueInformation,
                TItem CameraShots,
                TItem CameraPaths,
                TItem VoiceTypes,
                TItem MaterialTypes,
                TItem Impacts,
                TItem ImpactDataSets,
                TItem ArmorAddons,
                TItem EncounterZones,
                TItem Locations,
                TItem Messages,
                TItem DefaultObjectManagers,
                TItem LightingTemplates,
                TItem MusicTypes,
                TItem Footsteps,
                TItem FootstepSets,
                TItem StoryManagerBranchNodes,
                TItem StoryManagerQuestNodes,
                TItem StoryManagerEventNodes,
                TItem DialogBranches,
                TItem MusicTracks,
                TItem DialogViews,
                TItem WordsOfPower,
                TItem Shouts,
                TItem EquipTypes,
                TItem Relationships,
                TItem Scenes,
                TItem AssociationTypes,
                TItem Outfits,
                TItem ArtObjects,
                TItem MaterialObjects,
                TItem MovementTypes,
                TItem SoundDescriptors,
                TItem DualCastData,
                TItem SoundCategories,
                TItem SoundOutputModels,
                TItem CollisionLayers,
                TItem Colors,
                TItem ReverbParameters)
            {
                this.ModHeader = new MaskItem<TItem, ModHeader.Mask<TItem>?>(ModHeader, new ModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, Group.Mask<TItem>?>(GameSettings, new Group.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, Group.Mask<TItem>?>(Keywords, new Group.Mask<TItem>(Keywords));
                this.LocationReferenceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(LocationReferenceTypes, new Group.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, Group.Mask<TItem>?>(Actions, new Group.Mask<TItem>(Actions));
                this.TextureSets = new MaskItem<TItem, Group.Mask<TItem>?>(TextureSets, new Group.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, Group.Mask<TItem>?>(Globals, new Group.Mask<TItem>(Globals));
                this.Classes = new MaskItem<TItem, Group.Mask<TItem>?>(Classes, new Group.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, Group.Mask<TItem>?>(Factions, new Group.Mask<TItem>(Factions));
                this.HeadParts = new MaskItem<TItem, Group.Mask<TItem>?>(HeadParts, new Group.Mask<TItem>(HeadParts));
                this.Hairs = new MaskItem<TItem, Group.Mask<TItem>?>(Hairs, new Group.Mask<TItem>(Hairs));
                this.Eyes = new MaskItem<TItem, Group.Mask<TItem>?>(Eyes, new Group.Mask<TItem>(Eyes));
                this.Races = new MaskItem<TItem, Group.Mask<TItem>?>(Races, new Group.Mask<TItem>(Races));
                this.SoundMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(SoundMarkers, new Group.Mask<TItem>(SoundMarkers));
                this.AcousticSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(AcousticSpaces, new Group.Mask<TItem>(AcousticSpaces));
                this.MagicEffects = new MaskItem<TItem, Group.Mask<TItem>?>(MagicEffects, new Group.Mask<TItem>(MagicEffects));
                this.LandscapeTextures = new MaskItem<TItem, Group.Mask<TItem>?>(LandscapeTextures, new Group.Mask<TItem>(LandscapeTextures));
                this.ObjectEffects = new MaskItem<TItem, Group.Mask<TItem>?>(ObjectEffects, new Group.Mask<TItem>(ObjectEffects));
                this.Spells = new MaskItem<TItem, Group.Mask<TItem>?>(Spells, new Group.Mask<TItem>(Spells));
                this.Scrolls = new MaskItem<TItem, Group.Mask<TItem>?>(Scrolls, new Group.Mask<TItem>(Scrolls));
                this.Activators = new MaskItem<TItem, Group.Mask<TItem>?>(Activators, new Group.Mask<TItem>(Activators));
                this.TalkingActivators = new MaskItem<TItem, Group.Mask<TItem>?>(TalkingActivators, new Group.Mask<TItem>(TalkingActivators));
                this.Armors = new MaskItem<TItem, Group.Mask<TItem>?>(Armors, new Group.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, Group.Mask<TItem>?>(Books, new Group.Mask<TItem>(Books));
                this.Containers = new MaskItem<TItem, Group.Mask<TItem>?>(Containers, new Group.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, Group.Mask<TItem>?>(Doors, new Group.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, Group.Mask<TItem>?>(Ingredients, new Group.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, Group.Mask<TItem>?>(Lights, new Group.Mask<TItem>(Lights));
                this.MiscItems = new MaskItem<TItem, Group.Mask<TItem>?>(MiscItems, new Group.Mask<TItem>(MiscItems));
                this.AlchemicalApparatuses = new MaskItem<TItem, Group.Mask<TItem>?>(AlchemicalApparatuses, new Group.Mask<TItem>(AlchemicalApparatuses));
                this.Statics = new MaskItem<TItem, Group.Mask<TItem>?>(Statics, new Group.Mask<TItem>(Statics));
                this.MoveableStatics = new MaskItem<TItem, Group.Mask<TItem>?>(MoveableStatics, new Group.Mask<TItem>(MoveableStatics));
                this.Grasses = new MaskItem<TItem, Group.Mask<TItem>?>(Grasses, new Group.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, Group.Mask<TItem>?>(Trees, new Group.Mask<TItem>(Trees));
                this.Florae = new MaskItem<TItem, Group.Mask<TItem>?>(Florae, new Group.Mask<TItem>(Florae));
                this.Furniture = new MaskItem<TItem, Group.Mask<TItem>?>(Furniture, new Group.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, Group.Mask<TItem>?>(Weapons, new Group.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, Group.Mask<TItem>?>(Ammunitions, new Group.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, Group.Mask<TItem>?>(Npcs, new Group.Mask<TItem>(Npcs));
                this.LeveledNpcs = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledNpcs, new Group.Mask<TItem>(LeveledNpcs));
                this.Keys = new MaskItem<TItem, Group.Mask<TItem>?>(Keys, new Group.Mask<TItem>(Keys));
                this.Ingestibles = new MaskItem<TItem, Group.Mask<TItem>?>(Ingestibles, new Group.Mask<TItem>(Ingestibles));
                this.IdleMarkers = new MaskItem<TItem, Group.Mask<TItem>?>(IdleMarkers, new Group.Mask<TItem>(IdleMarkers));
                this.ConstructibleObjects = new MaskItem<TItem, Group.Mask<TItem>?>(ConstructibleObjects, new Group.Mask<TItem>(ConstructibleObjects));
                this.Projectiles = new MaskItem<TItem, Group.Mask<TItem>?>(Projectiles, new Group.Mask<TItem>(Projectiles));
                this.Hazards = new MaskItem<TItem, Group.Mask<TItem>?>(Hazards, new Group.Mask<TItem>(Hazards));
                this.SoulGems = new MaskItem<TItem, Group.Mask<TItem>?>(SoulGems, new Group.Mask<TItem>(SoulGems));
                this.LeveledItems = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledItems, new Group.Mask<TItem>(LeveledItems));
                this.Weathers = new MaskItem<TItem, Group.Mask<TItem>?>(Weathers, new Group.Mask<TItem>(Weathers));
                this.Climates = new MaskItem<TItem, Group.Mask<TItem>?>(Climates, new Group.Mask<TItem>(Climates));
                this.ShaderParticleGeometries = new MaskItem<TItem, Group.Mask<TItem>?>(ShaderParticleGeometries, new Group.Mask<TItem>(ShaderParticleGeometries));
                this.VisualEffects = new MaskItem<TItem, Group.Mask<TItem>?>(VisualEffects, new Group.Mask<TItem>(VisualEffects));
                this.Regions = new MaskItem<TItem, Group.Mask<TItem>?>(Regions, new Group.Mask<TItem>(Regions));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, Group.Mask<TItem>?>(NavigationMeshInfoMaps, new Group.Mask<TItem>(NavigationMeshInfoMaps));
                this.Cells = new MaskItem<TItem, ListGroup.Mask<TItem>?>(Cells, new ListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, Group.Mask<TItem>?>(Worldspaces, new Group.Mask<TItem>(Worldspaces));
                this.DialogTopics = new MaskItem<TItem, Group.Mask<TItem>?>(DialogTopics, new Group.Mask<TItem>(DialogTopics));
                this.Quests = new MaskItem<TItem, Group.Mask<TItem>?>(Quests, new Group.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, Group.Mask<TItem>?>(IdleAnimations, new Group.Mask<TItem>(IdleAnimations));
                this.Packages = new MaskItem<TItem, Group.Mask<TItem>?>(Packages, new Group.Mask<TItem>(Packages));
                this.CombatStyles = new MaskItem<TItem, Group.Mask<TItem>?>(CombatStyles, new Group.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, Group.Mask<TItem>?>(LoadScreens, new Group.Mask<TItem>(LoadScreens));
                this.LeveledSpells = new MaskItem<TItem, Group.Mask<TItem>?>(LeveledSpells, new Group.Mask<TItem>(LeveledSpells));
                this.AnimatedObjects = new MaskItem<TItem, Group.Mask<TItem>?>(AnimatedObjects, new Group.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, Group.Mask<TItem>?>(Waters, new Group.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, Group.Mask<TItem>?>(EffectShaders, new Group.Mask<TItem>(EffectShaders));
                this.Explosions = new MaskItem<TItem, Group.Mask<TItem>?>(Explosions, new Group.Mask<TItem>(Explosions));
                this.Debris = new MaskItem<TItem, Group.Mask<TItem>?>(Debris, new Group.Mask<TItem>(Debris));
                this.ImageSpaces = new MaskItem<TItem, Group.Mask<TItem>?>(ImageSpaces, new Group.Mask<TItem>(ImageSpaces));
                this.ImageSpaceAdapters = new MaskItem<TItem, Group.Mask<TItem>?>(ImageSpaceAdapters, new Group.Mask<TItem>(ImageSpaceAdapters));
                this.FormLists = new MaskItem<TItem, Group.Mask<TItem>?>(FormLists, new Group.Mask<TItem>(FormLists));
                this.Perks = new MaskItem<TItem, Group.Mask<TItem>?>(Perks, new Group.Mask<TItem>(Perks));
                this.BodyParts = new MaskItem<TItem, Group.Mask<TItem>?>(BodyParts, new Group.Mask<TItem>(BodyParts));
                this.AddonNodes = new MaskItem<TItem, Group.Mask<TItem>?>(AddonNodes, new Group.Mask<TItem>(AddonNodes));
                this.ActorValueInformation = new MaskItem<TItem, Group.Mask<TItem>?>(ActorValueInformation, new Group.Mask<TItem>(ActorValueInformation));
                this.CameraShots = new MaskItem<TItem, Group.Mask<TItem>?>(CameraShots, new Group.Mask<TItem>(CameraShots));
                this.CameraPaths = new MaskItem<TItem, Group.Mask<TItem>?>(CameraPaths, new Group.Mask<TItem>(CameraPaths));
                this.VoiceTypes = new MaskItem<TItem, Group.Mask<TItem>?>(VoiceTypes, new Group.Mask<TItem>(VoiceTypes));
                this.MaterialTypes = new MaskItem<TItem, Group.Mask<TItem>?>(MaterialTypes, new Group.Mask<TItem>(MaterialTypes));
                this.Impacts = new MaskItem<TItem, Group.Mask<TItem>?>(Impacts, new Group.Mask<TItem>(Impacts));
                this.ImpactDataSets = new MaskItem<TItem, Group.Mask<TItem>?>(ImpactDataSets, new Group.Mask<TItem>(ImpactDataSets));
                this.ArmorAddons = new MaskItem<TItem, Group.Mask<TItem>?>(ArmorAddons, new Group.Mask<TItem>(ArmorAddons));
                this.EncounterZones = new MaskItem<TItem, Group.Mask<TItem>?>(EncounterZones, new Group.Mask<TItem>(EncounterZones));
                this.Locations = new MaskItem<TItem, Group.Mask<TItem>?>(Locations, new Group.Mask<TItem>(Locations));
                this.Messages = new MaskItem<TItem, Group.Mask<TItem>?>(Messages, new Group.Mask<TItem>(Messages));
                this.DefaultObjectManagers = new MaskItem<TItem, Group.Mask<TItem>?>(DefaultObjectManagers, new Group.Mask<TItem>(DefaultObjectManagers));
                this.LightingTemplates = new MaskItem<TItem, Group.Mask<TItem>?>(LightingTemplates, new Group.Mask<TItem>(LightingTemplates));
                this.MusicTypes = new MaskItem<TItem, Group.Mask<TItem>?>(MusicTypes, new Group.Mask<TItem>(MusicTypes));
                this.Footsteps = new MaskItem<TItem, Group.Mask<TItem>?>(Footsteps, new Group.Mask<TItem>(Footsteps));
                this.FootstepSets = new MaskItem<TItem, Group.Mask<TItem>?>(FootstepSets, new Group.Mask<TItem>(FootstepSets));
                this.StoryManagerBranchNodes = new MaskItem<TItem, Group.Mask<TItem>?>(StoryManagerBranchNodes, new Group.Mask<TItem>(StoryManagerBranchNodes));
                this.StoryManagerQuestNodes = new MaskItem<TItem, Group.Mask<TItem>?>(StoryManagerQuestNodes, new Group.Mask<TItem>(StoryManagerQuestNodes));
                this.StoryManagerEventNodes = new MaskItem<TItem, Group.Mask<TItem>?>(StoryManagerEventNodes, new Group.Mask<TItem>(StoryManagerEventNodes));
                this.DialogBranches = new MaskItem<TItem, Group.Mask<TItem>?>(DialogBranches, new Group.Mask<TItem>(DialogBranches));
                this.MusicTracks = new MaskItem<TItem, Group.Mask<TItem>?>(MusicTracks, new Group.Mask<TItem>(MusicTracks));
                this.DialogViews = new MaskItem<TItem, Group.Mask<TItem>?>(DialogViews, new Group.Mask<TItem>(DialogViews));
                this.WordsOfPower = new MaskItem<TItem, Group.Mask<TItem>?>(WordsOfPower, new Group.Mask<TItem>(WordsOfPower));
                this.Shouts = new MaskItem<TItem, Group.Mask<TItem>?>(Shouts, new Group.Mask<TItem>(Shouts));
                this.EquipTypes = new MaskItem<TItem, Group.Mask<TItem>?>(EquipTypes, new Group.Mask<TItem>(EquipTypes));
                this.Relationships = new MaskItem<TItem, Group.Mask<TItem>?>(Relationships, new Group.Mask<TItem>(Relationships));
                this.Scenes = new MaskItem<TItem, Group.Mask<TItem>?>(Scenes, new Group.Mask<TItem>(Scenes));
                this.AssociationTypes = new MaskItem<TItem, Group.Mask<TItem>?>(AssociationTypes, new Group.Mask<TItem>(AssociationTypes));
                this.Outfits = new MaskItem<TItem, Group.Mask<TItem>?>(Outfits, new Group.Mask<TItem>(Outfits));
                this.ArtObjects = new MaskItem<TItem, Group.Mask<TItem>?>(ArtObjects, new Group.Mask<TItem>(ArtObjects));
                this.MaterialObjects = new MaskItem<TItem, Group.Mask<TItem>?>(MaterialObjects, new Group.Mask<TItem>(MaterialObjects));
                this.MovementTypes = new MaskItem<TItem, Group.Mask<TItem>?>(MovementTypes, new Group.Mask<TItem>(MovementTypes));
                this.SoundDescriptors = new MaskItem<TItem, Group.Mask<TItem>?>(SoundDescriptors, new Group.Mask<TItem>(SoundDescriptors));
                this.DualCastData = new MaskItem<TItem, Group.Mask<TItem>?>(DualCastData, new Group.Mask<TItem>(DualCastData));
                this.SoundCategories = new MaskItem<TItem, Group.Mask<TItem>?>(SoundCategories, new Group.Mask<TItem>(SoundCategories));
                this.SoundOutputModels = new MaskItem<TItem, Group.Mask<TItem>?>(SoundOutputModels, new Group.Mask<TItem>(SoundOutputModels));
                this.CollisionLayers = new MaskItem<TItem, Group.Mask<TItem>?>(CollisionLayers, new Group.Mask<TItem>(CollisionLayers));
                this.Colors = new MaskItem<TItem, Group.Mask<TItem>?>(Colors, new Group.Mask<TItem>(Colors));
                this.ReverbParameters = new MaskItem<TItem, Group.Mask<TItem>?>(ReverbParameters, new Group.Mask<TItem>(ReverbParameters));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hairs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Eyes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundMarkers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AcousticSpaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LandscapeTextures { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ObjectEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Scrolls { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? TalkingActivators { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MiscItems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AlchemicalApparatuses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MoveableStatics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Florae { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledNpcs { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Ingestibles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? IdleMarkers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ConstructibleObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Projectiles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Hazards { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoulGems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Weathers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ShaderParticleGeometries { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? VisualEffects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? NavigationMeshInfoMaps { get; set; }
            public MaskItem<TItem, ListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogTopics { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Packages { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LeveledSpells { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EffectShaders { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Explosions { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Debris { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ImageSpaceAdapters { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? FormLists { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Perks { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? BodyParts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AddonNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ActorValueInformation { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CameraShots { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CameraPaths { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? VoiceTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MaterialTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Impacts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ImpactDataSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ArmorAddons { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EncounterZones { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Locations { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Messages { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DefaultObjectManagers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? LightingTemplates { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MusicTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Footsteps { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? FootstepSets { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? StoryManagerBranchNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? StoryManagerQuestNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? StoryManagerEventNodes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogBranches { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MusicTracks { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DialogViews { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? WordsOfPower { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Shouts { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? EquipTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Relationships { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Scenes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? AssociationTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Outfits { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ArtObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MaterialObjects { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? MovementTypes { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundDescriptors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? DualCastData { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundCategories { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? SoundOutputModels { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? CollisionLayers { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, Group.Mask<TItem>?>? ReverbParameters { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.SoundMarkers, rhs.SoundMarkers)) return false;
                if (!object.Equals(this.AcousticSpaces, rhs.AcousticSpaces)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.LandscapeTextures, rhs.LandscapeTextures)) return false;
                if (!object.Equals(this.ObjectEffects, rhs.ObjectEffects)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Scrolls, rhs.Scrolls)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.TalkingActivators, rhs.TalkingActivators)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.MiscItems, rhs.MiscItems)) return false;
                if (!object.Equals(this.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.MoveableStatics, rhs.MoveableStatics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Florae, rhs.Florae)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.LeveledNpcs, rhs.LeveledNpcs)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Ingestibles, rhs.Ingestibles)) return false;
                if (!object.Equals(this.IdleMarkers, rhs.IdleMarkers)) return false;
                if (!object.Equals(this.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
                if (!object.Equals(this.Projectiles, rhs.Projectiles)) return false;
                if (!object.Equals(this.Hazards, rhs.Hazards)) return false;
                if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
                if (!object.Equals(this.VisualEffects, rhs.VisualEffects)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                if (!object.Equals(this.Explosions, rhs.Explosions)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
                if (!object.Equals(this.FormLists, rhs.FormLists)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
                if (!object.Equals(this.AddonNodes, rhs.AddonNodes)) return false;
                if (!object.Equals(this.ActorValueInformation, rhs.ActorValueInformation)) return false;
                if (!object.Equals(this.CameraShots, rhs.CameraShots)) return false;
                if (!object.Equals(this.CameraPaths, rhs.CameraPaths)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                if (!object.Equals(this.MaterialTypes, rhs.MaterialTypes)) return false;
                if (!object.Equals(this.Impacts, rhs.Impacts)) return false;
                if (!object.Equals(this.ImpactDataSets, rhs.ImpactDataSets)) return false;
                if (!object.Equals(this.ArmorAddons, rhs.ArmorAddons)) return false;
                if (!object.Equals(this.EncounterZones, rhs.EncounterZones)) return false;
                if (!object.Equals(this.Locations, rhs.Locations)) return false;
                if (!object.Equals(this.Messages, rhs.Messages)) return false;
                if (!object.Equals(this.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
                if (!object.Equals(this.LightingTemplates, rhs.LightingTemplates)) return false;
                if (!object.Equals(this.MusicTypes, rhs.MusicTypes)) return false;
                if (!object.Equals(this.Footsteps, rhs.Footsteps)) return false;
                if (!object.Equals(this.FootstepSets, rhs.FootstepSets)) return false;
                if (!object.Equals(this.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
                if (!object.Equals(this.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
                if (!object.Equals(this.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
                if (!object.Equals(this.DialogBranches, rhs.DialogBranches)) return false;
                if (!object.Equals(this.MusicTracks, rhs.MusicTracks)) return false;
                if (!object.Equals(this.DialogViews, rhs.DialogViews)) return false;
                if (!object.Equals(this.WordsOfPower, rhs.WordsOfPower)) return false;
                if (!object.Equals(this.Shouts, rhs.Shouts)) return false;
                if (!object.Equals(this.EquipTypes, rhs.EquipTypes)) return false;
                if (!object.Equals(this.Relationships, rhs.Relationships)) return false;
                if (!object.Equals(this.Scenes, rhs.Scenes)) return false;
                if (!object.Equals(this.AssociationTypes, rhs.AssociationTypes)) return false;
                if (!object.Equals(this.Outfits, rhs.Outfits)) return false;
                if (!object.Equals(this.ArtObjects, rhs.ArtObjects)) return false;
                if (!object.Equals(this.MaterialObjects, rhs.MaterialObjects)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.SoundDescriptors, rhs.SoundDescriptors)) return false;
                if (!object.Equals(this.DualCastData, rhs.DualCastData)) return false;
                if (!object.Equals(this.SoundCategories, rhs.SoundCategories)) return false;
                if (!object.Equals(this.SoundOutputModels, rhs.SoundOutputModels)) return false;
                if (!object.Equals(this.CollisionLayers, rhs.CollisionLayers)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.ReverbParameters, rhs.ReverbParameters)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.HeadParts);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.Races);
                hash.Add(this.SoundMarkers);
                hash.Add(this.AcousticSpaces);
                hash.Add(this.MagicEffects);
                hash.Add(this.LandscapeTextures);
                hash.Add(this.ObjectEffects);
                hash.Add(this.Spells);
                hash.Add(this.Scrolls);
                hash.Add(this.Activators);
                hash.Add(this.TalkingActivators);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.MiscItems);
                hash.Add(this.AlchemicalApparatuses);
                hash.Add(this.Statics);
                hash.Add(this.MoveableStatics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Florae);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.LeveledNpcs);
                hash.Add(this.Keys);
                hash.Add(this.Ingestibles);
                hash.Add(this.IdleMarkers);
                hash.Add(this.ConstructibleObjects);
                hash.Add(this.Projectiles);
                hash.Add(this.Hazards);
                hash.Add(this.SoulGems);
                hash.Add(this.LeveledItems);
                hash.Add(this.Weathers);
                hash.Add(this.Climates);
                hash.Add(this.ShaderParticleGeometries);
                hash.Add(this.VisualEffects);
                hash.Add(this.Regions);
                hash.Add(this.NavigationMeshInfoMaps);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.DialogTopics);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.Packages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.LeveledSpells);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                hash.Add(this.Explosions);
                hash.Add(this.Debris);
                hash.Add(this.ImageSpaces);
                hash.Add(this.ImageSpaceAdapters);
                hash.Add(this.FormLists);
                hash.Add(this.Perks);
                hash.Add(this.BodyParts);
                hash.Add(this.AddonNodes);
                hash.Add(this.ActorValueInformation);
                hash.Add(this.CameraShots);
                hash.Add(this.CameraPaths);
                hash.Add(this.VoiceTypes);
                hash.Add(this.MaterialTypes);
                hash.Add(this.Impacts);
                hash.Add(this.ImpactDataSets);
                hash.Add(this.ArmorAddons);
                hash.Add(this.EncounterZones);
                hash.Add(this.Locations);
                hash.Add(this.Messages);
                hash.Add(this.DefaultObjectManagers);
                hash.Add(this.LightingTemplates);
                hash.Add(this.MusicTypes);
                hash.Add(this.Footsteps);
                hash.Add(this.FootstepSets);
                hash.Add(this.StoryManagerBranchNodes);
                hash.Add(this.StoryManagerQuestNodes);
                hash.Add(this.StoryManagerEventNodes);
                hash.Add(this.DialogBranches);
                hash.Add(this.MusicTracks);
                hash.Add(this.DialogViews);
                hash.Add(this.WordsOfPower);
                hash.Add(this.Shouts);
                hash.Add(this.EquipTypes);
                hash.Add(this.Relationships);
                hash.Add(this.Scenes);
                hash.Add(this.AssociationTypes);
                hash.Add(this.Outfits);
                hash.Add(this.ArtObjects);
                hash.Add(this.MaterialObjects);
                hash.Add(this.MovementTypes);
                hash.Add(this.SoundDescriptors);
                hash.Add(this.DualCastData);
                hash.Add(this.SoundCategories);
                hash.Add(this.SoundOutputModels);
                hash.Add(this.CollisionLayers);
                hash.Add(this.Colors);
                hash.Add(this.ReverbParameters);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null && !this.Hairs.Specific.All(eval)) return false;
                }
                if (Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null && !this.Eyes.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (SoundMarkers != null)
                {
                    if (!eval(this.SoundMarkers.Overall)) return false;
                    if (this.SoundMarkers.Specific != null && !this.SoundMarkers.Specific.All(eval)) return false;
                }
                if (AcousticSpaces != null)
                {
                    if (!eval(this.AcousticSpaces.Overall)) return false;
                    if (this.AcousticSpaces.Specific != null && !this.AcousticSpaces.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (LandscapeTextures != null)
                {
                    if (!eval(this.LandscapeTextures.Overall)) return false;
                    if (this.LandscapeTextures.Specific != null && !this.LandscapeTextures.Specific.All(eval)) return false;
                }
                if (ObjectEffects != null)
                {
                    if (!eval(this.ObjectEffects.Overall)) return false;
                    if (this.ObjectEffects.Specific != null && !this.ObjectEffects.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Scrolls != null)
                {
                    if (!eval(this.Scrolls.Overall)) return false;
                    if (this.Scrolls.Specific != null && !this.Scrolls.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (TalkingActivators != null)
                {
                    if (!eval(this.TalkingActivators.Overall)) return false;
                    if (this.TalkingActivators.Specific != null && !this.TalkingActivators.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (MiscItems != null)
                {
                    if (!eval(this.MiscItems.Overall)) return false;
                    if (this.MiscItems.Specific != null && !this.MiscItems.Specific.All(eval)) return false;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (!eval(this.AlchemicalApparatuses.Overall)) return false;
                    if (this.AlchemicalApparatuses.Specific != null && !this.AlchemicalApparatuses.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (MoveableStatics != null)
                {
                    if (!eval(this.MoveableStatics.Overall)) return false;
                    if (this.MoveableStatics.Specific != null && !this.MoveableStatics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Florae != null)
                {
                    if (!eval(this.Florae.Overall)) return false;
                    if (this.Florae.Specific != null && !this.Florae.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (LeveledNpcs != null)
                {
                    if (!eval(this.LeveledNpcs.Overall)) return false;
                    if (this.LeveledNpcs.Specific != null && !this.LeveledNpcs.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Ingestibles != null)
                {
                    if (!eval(this.Ingestibles.Overall)) return false;
                    if (this.Ingestibles.Specific != null && !this.Ingestibles.Specific.All(eval)) return false;
                }
                if (IdleMarkers != null)
                {
                    if (!eval(this.IdleMarkers.Overall)) return false;
                    if (this.IdleMarkers.Specific != null && !this.IdleMarkers.Specific.All(eval)) return false;
                }
                if (ConstructibleObjects != null)
                {
                    if (!eval(this.ConstructibleObjects.Overall)) return false;
                    if (this.ConstructibleObjects.Specific != null && !this.ConstructibleObjects.Specific.All(eval)) return false;
                }
                if (Projectiles != null)
                {
                    if (!eval(this.Projectiles.Overall)) return false;
                    if (this.Projectiles.Specific != null && !this.Projectiles.Specific.All(eval)) return false;
                }
                if (Hazards != null)
                {
                    if (!eval(this.Hazards.Overall)) return false;
                    if (this.Hazards.Specific != null && !this.Hazards.Specific.All(eval)) return false;
                }
                if (SoulGems != null)
                {
                    if (!eval(this.SoulGems.Overall)) return false;
                    if (this.SoulGems.Specific != null && !this.SoulGems.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null && !this.Weathers.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (!eval(this.ShaderParticleGeometries.Overall)) return false;
                    if (this.ShaderParticleGeometries.Specific != null && !this.ShaderParticleGeometries.Specific.All(eval)) return false;
                }
                if (VisualEffects != null)
                {
                    if (!eval(this.VisualEffects.Overall)) return false;
                    if (this.VisualEffects.Specific != null && !this.VisualEffects.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (!eval(this.NavigationMeshInfoMaps.Overall)) return false;
                    if (this.NavigationMeshInfoMaps.Specific != null && !this.NavigationMeshInfoMaps.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (DialogTopics != null)
                {
                    if (!eval(this.DialogTopics.Overall)) return false;
                    if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null && !this.Packages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (LeveledSpells != null)
                {
                    if (!eval(this.LeveledSpells.Overall)) return false;
                    if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                if (Explosions != null)
                {
                    if (!eval(this.Explosions.Overall)) return false;
                    if (this.Explosions.Specific != null && !this.Explosions.Specific.All(eval)) return false;
                }
                if (Debris != null)
                {
                    if (!eval(this.Debris.Overall)) return false;
                    if (this.Debris.Specific != null && !this.Debris.Specific.All(eval)) return false;
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (!eval(this.ImageSpaceAdapters.Overall)) return false;
                    if (this.ImageSpaceAdapters.Specific != null && !this.ImageSpaceAdapters.Specific.All(eval)) return false;
                }
                if (FormLists != null)
                {
                    if (!eval(this.FormLists.Overall)) return false;
                    if (this.FormLists.Specific != null && !this.FormLists.Specific.All(eval)) return false;
                }
                if (Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null && !this.Perks.Specific.All(eval)) return false;
                }
                if (BodyParts != null)
                {
                    if (!eval(this.BodyParts.Overall)) return false;
                    if (this.BodyParts.Specific != null && !this.BodyParts.Specific.All(eval)) return false;
                }
                if (AddonNodes != null)
                {
                    if (!eval(this.AddonNodes.Overall)) return false;
                    if (this.AddonNodes.Specific != null && !this.AddonNodes.Specific.All(eval)) return false;
                }
                if (ActorValueInformation != null)
                {
                    if (!eval(this.ActorValueInformation.Overall)) return false;
                    if (this.ActorValueInformation.Specific != null && !this.ActorValueInformation.Specific.All(eval)) return false;
                }
                if (CameraShots != null)
                {
                    if (!eval(this.CameraShots.Overall)) return false;
                    if (this.CameraShots.Specific != null && !this.CameraShots.Specific.All(eval)) return false;
                }
                if (CameraPaths != null)
                {
                    if (!eval(this.CameraPaths.Overall)) return false;
                    if (this.CameraPaths.Specific != null && !this.CameraPaths.Specific.All(eval)) return false;
                }
                if (VoiceTypes != null)
                {
                    if (!eval(this.VoiceTypes.Overall)) return false;
                    if (this.VoiceTypes.Specific != null && !this.VoiceTypes.Specific.All(eval)) return false;
                }
                if (MaterialTypes != null)
                {
                    if (!eval(this.MaterialTypes.Overall)) return false;
                    if (this.MaterialTypes.Specific != null && !this.MaterialTypes.Specific.All(eval)) return false;
                }
                if (Impacts != null)
                {
                    if (!eval(this.Impacts.Overall)) return false;
                    if (this.Impacts.Specific != null && !this.Impacts.Specific.All(eval)) return false;
                }
                if (ImpactDataSets != null)
                {
                    if (!eval(this.ImpactDataSets.Overall)) return false;
                    if (this.ImpactDataSets.Specific != null && !this.ImpactDataSets.Specific.All(eval)) return false;
                }
                if (ArmorAddons != null)
                {
                    if (!eval(this.ArmorAddons.Overall)) return false;
                    if (this.ArmorAddons.Specific != null && !this.ArmorAddons.Specific.All(eval)) return false;
                }
                if (EncounterZones != null)
                {
                    if (!eval(this.EncounterZones.Overall)) return false;
                    if (this.EncounterZones.Specific != null && !this.EncounterZones.Specific.All(eval)) return false;
                }
                if (Locations != null)
                {
                    if (!eval(this.Locations.Overall)) return false;
                    if (this.Locations.Specific != null && !this.Locations.Specific.All(eval)) return false;
                }
                if (Messages != null)
                {
                    if (!eval(this.Messages.Overall)) return false;
                    if (this.Messages.Specific != null && !this.Messages.Specific.All(eval)) return false;
                }
                if (DefaultObjectManagers != null)
                {
                    if (!eval(this.DefaultObjectManagers.Overall)) return false;
                    if (this.DefaultObjectManagers.Specific != null && !this.DefaultObjectManagers.Specific.All(eval)) return false;
                }
                if (LightingTemplates != null)
                {
                    if (!eval(this.LightingTemplates.Overall)) return false;
                    if (this.LightingTemplates.Specific != null && !this.LightingTemplates.Specific.All(eval)) return false;
                }
                if (MusicTypes != null)
                {
                    if (!eval(this.MusicTypes.Overall)) return false;
                    if (this.MusicTypes.Specific != null && !this.MusicTypes.Specific.All(eval)) return false;
                }
                if (Footsteps != null)
                {
                    if (!eval(this.Footsteps.Overall)) return false;
                    if (this.Footsteps.Specific != null && !this.Footsteps.Specific.All(eval)) return false;
                }
                if (FootstepSets != null)
                {
                    if (!eval(this.FootstepSets.Overall)) return false;
                    if (this.FootstepSets.Specific != null && !this.FootstepSets.Specific.All(eval)) return false;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (!eval(this.StoryManagerBranchNodes.Overall)) return false;
                    if (this.StoryManagerBranchNodes.Specific != null && !this.StoryManagerBranchNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (!eval(this.StoryManagerQuestNodes.Overall)) return false;
                    if (this.StoryManagerQuestNodes.Specific != null && !this.StoryManagerQuestNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (!eval(this.StoryManagerEventNodes.Overall)) return false;
                    if (this.StoryManagerEventNodes.Specific != null && !this.StoryManagerEventNodes.Specific.All(eval)) return false;
                }
                if (DialogBranches != null)
                {
                    if (!eval(this.DialogBranches.Overall)) return false;
                    if (this.DialogBranches.Specific != null && !this.DialogBranches.Specific.All(eval)) return false;
                }
                if (MusicTracks != null)
                {
                    if (!eval(this.MusicTracks.Overall)) return false;
                    if (this.MusicTracks.Specific != null && !this.MusicTracks.Specific.All(eval)) return false;
                }
                if (DialogViews != null)
                {
                    if (!eval(this.DialogViews.Overall)) return false;
                    if (this.DialogViews.Specific != null && !this.DialogViews.Specific.All(eval)) return false;
                }
                if (WordsOfPower != null)
                {
                    if (!eval(this.WordsOfPower.Overall)) return false;
                    if (this.WordsOfPower.Specific != null && !this.WordsOfPower.Specific.All(eval)) return false;
                }
                if (Shouts != null)
                {
                    if (!eval(this.Shouts.Overall)) return false;
                    if (this.Shouts.Specific != null && !this.Shouts.Specific.All(eval)) return false;
                }
                if (EquipTypes != null)
                {
                    if (!eval(this.EquipTypes.Overall)) return false;
                    if (this.EquipTypes.Specific != null && !this.EquipTypes.Specific.All(eval)) return false;
                }
                if (Relationships != null)
                {
                    if (!eval(this.Relationships.Overall)) return false;
                    if (this.Relationships.Specific != null && !this.Relationships.Specific.All(eval)) return false;
                }
                if (Scenes != null)
                {
                    if (!eval(this.Scenes.Overall)) return false;
                    if (this.Scenes.Specific != null && !this.Scenes.Specific.All(eval)) return false;
                }
                if (AssociationTypes != null)
                {
                    if (!eval(this.AssociationTypes.Overall)) return false;
                    if (this.AssociationTypes.Specific != null && !this.AssociationTypes.Specific.All(eval)) return false;
                }
                if (Outfits != null)
                {
                    if (!eval(this.Outfits.Overall)) return false;
                    if (this.Outfits.Specific != null && !this.Outfits.Specific.All(eval)) return false;
                }
                if (ArtObjects != null)
                {
                    if (!eval(this.ArtObjects.Overall)) return false;
                    if (this.ArtObjects.Specific != null && !this.ArtObjects.Specific.All(eval)) return false;
                }
                if (MaterialObjects != null)
                {
                    if (!eval(this.MaterialObjects.Overall)) return false;
                    if (this.MaterialObjects.Specific != null && !this.MaterialObjects.Specific.All(eval)) return false;
                }
                if (MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null && !this.MovementTypes.Specific.All(eval)) return false;
                }
                if (SoundDescriptors != null)
                {
                    if (!eval(this.SoundDescriptors.Overall)) return false;
                    if (this.SoundDescriptors.Specific != null && !this.SoundDescriptors.Specific.All(eval)) return false;
                }
                if (DualCastData != null)
                {
                    if (!eval(this.DualCastData.Overall)) return false;
                    if (this.DualCastData.Specific != null && !this.DualCastData.Specific.All(eval)) return false;
                }
                if (SoundCategories != null)
                {
                    if (!eval(this.SoundCategories.Overall)) return false;
                    if (this.SoundCategories.Specific != null && !this.SoundCategories.Specific.All(eval)) return false;
                }
                if (SoundOutputModels != null)
                {
                    if (!eval(this.SoundOutputModels.Overall)) return false;
                    if (this.SoundOutputModels.Specific != null && !this.SoundOutputModels.Specific.All(eval)) return false;
                }
                if (CollisionLayers != null)
                {
                    if (!eval(this.CollisionLayers.Overall)) return false;
                    if (this.CollisionLayers.Specific != null && !this.CollisionLayers.Specific.All(eval)) return false;
                }
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (ReverbParameters != null)
                {
                    if (!eval(this.ReverbParameters.Overall)) return false;
                    if (this.ReverbParameters.Specific != null && !this.ReverbParameters.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null && this.Hairs.Specific.Any(eval)) return true;
                }
                if (Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null && this.Eyes.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (SoundMarkers != null)
                {
                    if (eval(this.SoundMarkers.Overall)) return true;
                    if (this.SoundMarkers.Specific != null && this.SoundMarkers.Specific.Any(eval)) return true;
                }
                if (AcousticSpaces != null)
                {
                    if (eval(this.AcousticSpaces.Overall)) return true;
                    if (this.AcousticSpaces.Specific != null && this.AcousticSpaces.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (LandscapeTextures != null)
                {
                    if (eval(this.LandscapeTextures.Overall)) return true;
                    if (this.LandscapeTextures.Specific != null && this.LandscapeTextures.Specific.Any(eval)) return true;
                }
                if (ObjectEffects != null)
                {
                    if (eval(this.ObjectEffects.Overall)) return true;
                    if (this.ObjectEffects.Specific != null && this.ObjectEffects.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Scrolls != null)
                {
                    if (eval(this.Scrolls.Overall)) return true;
                    if (this.Scrolls.Specific != null && this.Scrolls.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (TalkingActivators != null)
                {
                    if (eval(this.TalkingActivators.Overall)) return true;
                    if (this.TalkingActivators.Specific != null && this.TalkingActivators.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (MiscItems != null)
                {
                    if (eval(this.MiscItems.Overall)) return true;
                    if (this.MiscItems.Specific != null && this.MiscItems.Specific.Any(eval)) return true;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (eval(this.AlchemicalApparatuses.Overall)) return true;
                    if (this.AlchemicalApparatuses.Specific != null && this.AlchemicalApparatuses.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (MoveableStatics != null)
                {
                    if (eval(this.MoveableStatics.Overall)) return true;
                    if (this.MoveableStatics.Specific != null && this.MoveableStatics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Florae != null)
                {
                    if (eval(this.Florae.Overall)) return true;
                    if (this.Florae.Specific != null && this.Florae.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (LeveledNpcs != null)
                {
                    if (eval(this.LeveledNpcs.Overall)) return true;
                    if (this.LeveledNpcs.Specific != null && this.LeveledNpcs.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Ingestibles != null)
                {
                    if (eval(this.Ingestibles.Overall)) return true;
                    if (this.Ingestibles.Specific != null && this.Ingestibles.Specific.Any(eval)) return true;
                }
                if (IdleMarkers != null)
                {
                    if (eval(this.IdleMarkers.Overall)) return true;
                    if (this.IdleMarkers.Specific != null && this.IdleMarkers.Specific.Any(eval)) return true;
                }
                if (ConstructibleObjects != null)
                {
                    if (eval(this.ConstructibleObjects.Overall)) return true;
                    if (this.ConstructibleObjects.Specific != null && this.ConstructibleObjects.Specific.Any(eval)) return true;
                }
                if (Projectiles != null)
                {
                    if (eval(this.Projectiles.Overall)) return true;
                    if (this.Projectiles.Specific != null && this.Projectiles.Specific.Any(eval)) return true;
                }
                if (Hazards != null)
                {
                    if (eval(this.Hazards.Overall)) return true;
                    if (this.Hazards.Specific != null && this.Hazards.Specific.Any(eval)) return true;
                }
                if (SoulGems != null)
                {
                    if (eval(this.SoulGems.Overall)) return true;
                    if (this.SoulGems.Specific != null && this.SoulGems.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null && this.Weathers.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (eval(this.ShaderParticleGeometries.Overall)) return true;
                    if (this.ShaderParticleGeometries.Specific != null && this.ShaderParticleGeometries.Specific.Any(eval)) return true;
                }
                if (VisualEffects != null)
                {
                    if (eval(this.VisualEffects.Overall)) return true;
                    if (this.VisualEffects.Specific != null && this.VisualEffects.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (eval(this.NavigationMeshInfoMaps.Overall)) return true;
                    if (this.NavigationMeshInfoMaps.Specific != null && this.NavigationMeshInfoMaps.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (DialogTopics != null)
                {
                    if (eval(this.DialogTopics.Overall)) return true;
                    if (this.DialogTopics.Specific != null && this.DialogTopics.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null && this.Packages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (LeveledSpells != null)
                {
                    if (eval(this.LeveledSpells.Overall)) return true;
                    if (this.LeveledSpells.Specific != null && this.LeveledSpells.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                if (Explosions != null)
                {
                    if (eval(this.Explosions.Overall)) return true;
                    if (this.Explosions.Specific != null && this.Explosions.Specific.Any(eval)) return true;
                }
                if (Debris != null)
                {
                    if (eval(this.Debris.Overall)) return true;
                    if (this.Debris.Specific != null && this.Debris.Specific.Any(eval)) return true;
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (eval(this.ImageSpaceAdapters.Overall)) return true;
                    if (this.ImageSpaceAdapters.Specific != null && this.ImageSpaceAdapters.Specific.Any(eval)) return true;
                }
                if (FormLists != null)
                {
                    if (eval(this.FormLists.Overall)) return true;
                    if (this.FormLists.Specific != null && this.FormLists.Specific.Any(eval)) return true;
                }
                if (Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null && this.Perks.Specific.Any(eval)) return true;
                }
                if (BodyParts != null)
                {
                    if (eval(this.BodyParts.Overall)) return true;
                    if (this.BodyParts.Specific != null && this.BodyParts.Specific.Any(eval)) return true;
                }
                if (AddonNodes != null)
                {
                    if (eval(this.AddonNodes.Overall)) return true;
                    if (this.AddonNodes.Specific != null && this.AddonNodes.Specific.Any(eval)) return true;
                }
                if (ActorValueInformation != null)
                {
                    if (eval(this.ActorValueInformation.Overall)) return true;
                    if (this.ActorValueInformation.Specific != null && this.ActorValueInformation.Specific.Any(eval)) return true;
                }
                if (CameraShots != null)
                {
                    if (eval(this.CameraShots.Overall)) return true;
                    if (this.CameraShots.Specific != null && this.CameraShots.Specific.Any(eval)) return true;
                }
                if (CameraPaths != null)
                {
                    if (eval(this.CameraPaths.Overall)) return true;
                    if (this.CameraPaths.Specific != null && this.CameraPaths.Specific.Any(eval)) return true;
                }
                if (VoiceTypes != null)
                {
                    if (eval(this.VoiceTypes.Overall)) return true;
                    if (this.VoiceTypes.Specific != null && this.VoiceTypes.Specific.Any(eval)) return true;
                }
                if (MaterialTypes != null)
                {
                    if (eval(this.MaterialTypes.Overall)) return true;
                    if (this.MaterialTypes.Specific != null && this.MaterialTypes.Specific.Any(eval)) return true;
                }
                if (Impacts != null)
                {
                    if (eval(this.Impacts.Overall)) return true;
                    if (this.Impacts.Specific != null && this.Impacts.Specific.Any(eval)) return true;
                }
                if (ImpactDataSets != null)
                {
                    if (eval(this.ImpactDataSets.Overall)) return true;
                    if (this.ImpactDataSets.Specific != null && this.ImpactDataSets.Specific.Any(eval)) return true;
                }
                if (ArmorAddons != null)
                {
                    if (eval(this.ArmorAddons.Overall)) return true;
                    if (this.ArmorAddons.Specific != null && this.ArmorAddons.Specific.Any(eval)) return true;
                }
                if (EncounterZones != null)
                {
                    if (eval(this.EncounterZones.Overall)) return true;
                    if (this.EncounterZones.Specific != null && this.EncounterZones.Specific.Any(eval)) return true;
                }
                if (Locations != null)
                {
                    if (eval(this.Locations.Overall)) return true;
                    if (this.Locations.Specific != null && this.Locations.Specific.Any(eval)) return true;
                }
                if (Messages != null)
                {
                    if (eval(this.Messages.Overall)) return true;
                    if (this.Messages.Specific != null && this.Messages.Specific.Any(eval)) return true;
                }
                if (DefaultObjectManagers != null)
                {
                    if (eval(this.DefaultObjectManagers.Overall)) return true;
                    if (this.DefaultObjectManagers.Specific != null && this.DefaultObjectManagers.Specific.Any(eval)) return true;
                }
                if (LightingTemplates != null)
                {
                    if (eval(this.LightingTemplates.Overall)) return true;
                    if (this.LightingTemplates.Specific != null && this.LightingTemplates.Specific.Any(eval)) return true;
                }
                if (MusicTypes != null)
                {
                    if (eval(this.MusicTypes.Overall)) return true;
                    if (this.MusicTypes.Specific != null && this.MusicTypes.Specific.Any(eval)) return true;
                }
                if (Footsteps != null)
                {
                    if (eval(this.Footsteps.Overall)) return true;
                    if (this.Footsteps.Specific != null && this.Footsteps.Specific.Any(eval)) return true;
                }
                if (FootstepSets != null)
                {
                    if (eval(this.FootstepSets.Overall)) return true;
                    if (this.FootstepSets.Specific != null && this.FootstepSets.Specific.Any(eval)) return true;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (eval(this.StoryManagerBranchNodes.Overall)) return true;
                    if (this.StoryManagerBranchNodes.Specific != null && this.StoryManagerBranchNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (eval(this.StoryManagerQuestNodes.Overall)) return true;
                    if (this.StoryManagerQuestNodes.Specific != null && this.StoryManagerQuestNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (eval(this.StoryManagerEventNodes.Overall)) return true;
                    if (this.StoryManagerEventNodes.Specific != null && this.StoryManagerEventNodes.Specific.Any(eval)) return true;
                }
                if (DialogBranches != null)
                {
                    if (eval(this.DialogBranches.Overall)) return true;
                    if (this.DialogBranches.Specific != null && this.DialogBranches.Specific.Any(eval)) return true;
                }
                if (MusicTracks != null)
                {
                    if (eval(this.MusicTracks.Overall)) return true;
                    if (this.MusicTracks.Specific != null && this.MusicTracks.Specific.Any(eval)) return true;
                }
                if (DialogViews != null)
                {
                    if (eval(this.DialogViews.Overall)) return true;
                    if (this.DialogViews.Specific != null && this.DialogViews.Specific.Any(eval)) return true;
                }
                if (WordsOfPower != null)
                {
                    if (eval(this.WordsOfPower.Overall)) return true;
                    if (this.WordsOfPower.Specific != null && this.WordsOfPower.Specific.Any(eval)) return true;
                }
                if (Shouts != null)
                {
                    if (eval(this.Shouts.Overall)) return true;
                    if (this.Shouts.Specific != null && this.Shouts.Specific.Any(eval)) return true;
                }
                if (EquipTypes != null)
                {
                    if (eval(this.EquipTypes.Overall)) return true;
                    if (this.EquipTypes.Specific != null && this.EquipTypes.Specific.Any(eval)) return true;
                }
                if (Relationships != null)
                {
                    if (eval(this.Relationships.Overall)) return true;
                    if (this.Relationships.Specific != null && this.Relationships.Specific.Any(eval)) return true;
                }
                if (Scenes != null)
                {
                    if (eval(this.Scenes.Overall)) return true;
                    if (this.Scenes.Specific != null && this.Scenes.Specific.Any(eval)) return true;
                }
                if (AssociationTypes != null)
                {
                    if (eval(this.AssociationTypes.Overall)) return true;
                    if (this.AssociationTypes.Specific != null && this.AssociationTypes.Specific.Any(eval)) return true;
                }
                if (Outfits != null)
                {
                    if (eval(this.Outfits.Overall)) return true;
                    if (this.Outfits.Specific != null && this.Outfits.Specific.Any(eval)) return true;
                }
                if (ArtObjects != null)
                {
                    if (eval(this.ArtObjects.Overall)) return true;
                    if (this.ArtObjects.Specific != null && this.ArtObjects.Specific.Any(eval)) return true;
                }
                if (MaterialObjects != null)
                {
                    if (eval(this.MaterialObjects.Overall)) return true;
                    if (this.MaterialObjects.Specific != null && this.MaterialObjects.Specific.Any(eval)) return true;
                }
                if (MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null && this.MovementTypes.Specific.Any(eval)) return true;
                }
                if (SoundDescriptors != null)
                {
                    if (eval(this.SoundDescriptors.Overall)) return true;
                    if (this.SoundDescriptors.Specific != null && this.SoundDescriptors.Specific.Any(eval)) return true;
                }
                if (DualCastData != null)
                {
                    if (eval(this.DualCastData.Overall)) return true;
                    if (this.DualCastData.Specific != null && this.DualCastData.Specific.Any(eval)) return true;
                }
                if (SoundCategories != null)
                {
                    if (eval(this.SoundCategories.Overall)) return true;
                    if (this.SoundCategories.Specific != null && this.SoundCategories.Specific.Any(eval)) return true;
                }
                if (SoundOutputModels != null)
                {
                    if (eval(this.SoundOutputModels.Overall)) return true;
                    if (this.SoundOutputModels.Specific != null && this.SoundOutputModels.Specific.Any(eval)) return true;
                }
                if (CollisionLayers != null)
                {
                    if (eval(this.CollisionLayers.Overall)) return true;
                    if (this.CollisionLayers.Specific != null && this.CollisionLayers.Specific.Any(eval)) return true;
                }
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (ReverbParameters != null)
                {
                    if (eval(this.ReverbParameters.Overall)) return true;
                    if (this.ReverbParameters.Specific != null && this.ReverbParameters.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkyrimMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, ModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Hairs = this.Hairs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hairs.Overall), this.Hairs.Specific?.Translate(eval));
                obj.Eyes = this.Eyes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Eyes.Overall), this.Eyes.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.SoundMarkers = this.SoundMarkers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundMarkers.Overall), this.SoundMarkers.Specific?.Translate(eval));
                obj.AcousticSpaces = this.AcousticSpaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AcousticSpaces.Overall), this.AcousticSpaces.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.LandscapeTextures = this.LandscapeTextures == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LandscapeTextures.Overall), this.LandscapeTextures.Specific?.Translate(eval));
                obj.ObjectEffects = this.ObjectEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ObjectEffects.Overall), this.ObjectEffects.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Scrolls = this.Scrolls == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Scrolls.Overall), this.Scrolls.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.TalkingActivators = this.TalkingActivators == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.TalkingActivators.Overall), this.TalkingActivators.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.MiscItems = this.MiscItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MiscItems.Overall), this.MiscItems.Specific?.Translate(eval));
                obj.AlchemicalApparatuses = this.AlchemicalApparatuses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AlchemicalApparatuses.Overall), this.AlchemicalApparatuses.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.MoveableStatics = this.MoveableStatics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MoveableStatics.Overall), this.MoveableStatics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Florae = this.Florae == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Florae.Overall), this.Florae.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.LeveledNpcs = this.LeveledNpcs == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledNpcs.Overall), this.LeveledNpcs.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Ingestibles = this.Ingestibles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Ingestibles.Overall), this.Ingestibles.Specific?.Translate(eval));
                obj.IdleMarkers = this.IdleMarkers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.IdleMarkers.Overall), this.IdleMarkers.Specific?.Translate(eval));
                obj.ConstructibleObjects = this.ConstructibleObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ConstructibleObjects.Overall), this.ConstructibleObjects.Specific?.Translate(eval));
                obj.Projectiles = this.Projectiles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Projectiles.Overall), this.Projectiles.Specific?.Translate(eval));
                obj.Hazards = this.Hazards == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Hazards.Overall), this.Hazards.Specific?.Translate(eval));
                obj.SoulGems = this.SoulGems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoulGems.Overall), this.SoulGems.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.Weathers = this.Weathers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Weathers.Overall), this.Weathers.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.ShaderParticleGeometries = this.ShaderParticleGeometries == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ShaderParticleGeometries.Overall), this.ShaderParticleGeometries.Specific?.Translate(eval));
                obj.VisualEffects = this.VisualEffects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.VisualEffects.Overall), this.VisualEffects.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.NavigationMeshInfoMaps.Overall), this.NavigationMeshInfoMaps.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, ListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.DialogTopics = this.DialogTopics == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogTopics.Overall), this.DialogTopics.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.Packages = this.Packages == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Packages.Overall), this.Packages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.LeveledSpells = this.LeveledSpells == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LeveledSpells.Overall), this.LeveledSpells.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
                obj.Explosions = this.Explosions == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Explosions.Overall), this.Explosions.Specific?.Translate(eval));
                obj.Debris = this.Debris == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Debris.Overall), this.Debris.Specific?.Translate(eval));
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.ImageSpaceAdapters = this.ImageSpaceAdapters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ImageSpaceAdapters.Overall), this.ImageSpaceAdapters.Specific?.Translate(eval));
                obj.FormLists = this.FormLists == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.FormLists.Overall), this.FormLists.Specific?.Translate(eval));
                obj.Perks = this.Perks == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Perks.Overall), this.Perks.Specific?.Translate(eval));
                obj.BodyParts = this.BodyParts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.BodyParts.Overall), this.BodyParts.Specific?.Translate(eval));
                obj.AddonNodes = this.AddonNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AddonNodes.Overall), this.AddonNodes.Specific?.Translate(eval));
                obj.ActorValueInformation = this.ActorValueInformation == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ActorValueInformation.Overall), this.ActorValueInformation.Specific?.Translate(eval));
                obj.CameraShots = this.CameraShots == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CameraShots.Overall), this.CameraShots.Specific?.Translate(eval));
                obj.CameraPaths = this.CameraPaths == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CameraPaths.Overall), this.CameraPaths.Specific?.Translate(eval));
                obj.VoiceTypes = this.VoiceTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.VoiceTypes.Overall), this.VoiceTypes.Specific?.Translate(eval));
                obj.MaterialTypes = this.MaterialTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MaterialTypes.Overall), this.MaterialTypes.Specific?.Translate(eval));
                obj.Impacts = this.Impacts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Impacts.Overall), this.Impacts.Specific?.Translate(eval));
                obj.ImpactDataSets = this.ImpactDataSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ImpactDataSets.Overall), this.ImpactDataSets.Specific?.Translate(eval));
                obj.ArmorAddons = this.ArmorAddons == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ArmorAddons.Overall), this.ArmorAddons.Specific?.Translate(eval));
                obj.EncounterZones = this.EncounterZones == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EncounterZones.Overall), this.EncounterZones.Specific?.Translate(eval));
                obj.Locations = this.Locations == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Locations.Overall), this.Locations.Specific?.Translate(eval));
                obj.Messages = this.Messages == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Messages.Overall), this.Messages.Specific?.Translate(eval));
                obj.DefaultObjectManagers = this.DefaultObjectManagers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DefaultObjectManagers.Overall), this.DefaultObjectManagers.Specific?.Translate(eval));
                obj.LightingTemplates = this.LightingTemplates == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.LightingTemplates.Overall), this.LightingTemplates.Specific?.Translate(eval));
                obj.MusicTypes = this.MusicTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MusicTypes.Overall), this.MusicTypes.Specific?.Translate(eval));
                obj.Footsteps = this.Footsteps == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Footsteps.Overall), this.Footsteps.Specific?.Translate(eval));
                obj.FootstepSets = this.FootstepSets == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.FootstepSets.Overall), this.FootstepSets.Specific?.Translate(eval));
                obj.StoryManagerBranchNodes = this.StoryManagerBranchNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.StoryManagerBranchNodes.Overall), this.StoryManagerBranchNodes.Specific?.Translate(eval));
                obj.StoryManagerQuestNodes = this.StoryManagerQuestNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.StoryManagerQuestNodes.Overall), this.StoryManagerQuestNodes.Specific?.Translate(eval));
                obj.StoryManagerEventNodes = this.StoryManagerEventNodes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.StoryManagerEventNodes.Overall), this.StoryManagerEventNodes.Specific?.Translate(eval));
                obj.DialogBranches = this.DialogBranches == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogBranches.Overall), this.DialogBranches.Specific?.Translate(eval));
                obj.MusicTracks = this.MusicTracks == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MusicTracks.Overall), this.MusicTracks.Specific?.Translate(eval));
                obj.DialogViews = this.DialogViews == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DialogViews.Overall), this.DialogViews.Specific?.Translate(eval));
                obj.WordsOfPower = this.WordsOfPower == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.WordsOfPower.Overall), this.WordsOfPower.Specific?.Translate(eval));
                obj.Shouts = this.Shouts == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Shouts.Overall), this.Shouts.Specific?.Translate(eval));
                obj.EquipTypes = this.EquipTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.EquipTypes.Overall), this.EquipTypes.Specific?.Translate(eval));
                obj.Relationships = this.Relationships == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Relationships.Overall), this.Relationships.Specific?.Translate(eval));
                obj.Scenes = this.Scenes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Scenes.Overall), this.Scenes.Specific?.Translate(eval));
                obj.AssociationTypes = this.AssociationTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.AssociationTypes.Overall), this.AssociationTypes.Specific?.Translate(eval));
                obj.Outfits = this.Outfits == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Outfits.Overall), this.Outfits.Specific?.Translate(eval));
                obj.ArtObjects = this.ArtObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ArtObjects.Overall), this.ArtObjects.Specific?.Translate(eval));
                obj.MaterialObjects = this.MaterialObjects == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MaterialObjects.Overall), this.MaterialObjects.Specific?.Translate(eval));
                obj.MovementTypes = this.MovementTypes == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.MovementTypes.Overall), this.MovementTypes.Specific?.Translate(eval));
                obj.SoundDescriptors = this.SoundDescriptors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundDescriptors.Overall), this.SoundDescriptors.Specific?.Translate(eval));
                obj.DualCastData = this.DualCastData == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.DualCastData.Overall), this.DualCastData.Specific?.Translate(eval));
                obj.SoundCategories = this.SoundCategories == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundCategories.Overall), this.SoundCategories.Specific?.Translate(eval));
                obj.SoundOutputModels = this.SoundOutputModels == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.SoundOutputModels.Overall), this.SoundOutputModels.Specific?.Translate(eval));
                obj.CollisionLayers = this.CollisionLayers == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.CollisionLayers.Overall), this.CollisionLayers.Specific?.Translate(eval));
                obj.Colors = this.Colors == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.ReverbParameters = this.ReverbParameters == null ? null : new MaskItem<R, Group.Mask<R>?>(eval(this.ReverbParameters.Overall), this.ReverbParameters.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SkyrimMod.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SkyrimMod.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SkyrimMod.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.ToString(fg);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.ToString(fg);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.ToString(fg);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.ToString(fg);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.ToString(fg);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.ToString(fg);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.ToString(fg);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.ToString(fg);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.ToString(fg);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.ToString(fg);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        Hairs?.ToString(fg);
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        Eyes?.ToString(fg);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.ToString(fg);
                    }
                    if (printMask?.SoundMarkers?.Overall ?? true)
                    {
                        SoundMarkers?.ToString(fg);
                    }
                    if (printMask?.AcousticSpaces?.Overall ?? true)
                    {
                        AcousticSpaces?.ToString(fg);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.ToString(fg);
                    }
                    if (printMask?.LandscapeTextures?.Overall ?? true)
                    {
                        LandscapeTextures?.ToString(fg);
                    }
                    if (printMask?.ObjectEffects?.Overall ?? true)
                    {
                        ObjectEffects?.ToString(fg);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.ToString(fg);
                    }
                    if (printMask?.Scrolls?.Overall ?? true)
                    {
                        Scrolls?.ToString(fg);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.ToString(fg);
                    }
                    if (printMask?.TalkingActivators?.Overall ?? true)
                    {
                        TalkingActivators?.ToString(fg);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.ToString(fg);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.ToString(fg);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.ToString(fg);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.ToString(fg);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.ToString(fg);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.ToString(fg);
                    }
                    if (printMask?.MiscItems?.Overall ?? true)
                    {
                        MiscItems?.ToString(fg);
                    }
                    if (printMask?.AlchemicalApparatuses?.Overall ?? true)
                    {
                        AlchemicalApparatuses?.ToString(fg);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.ToString(fg);
                    }
                    if (printMask?.MoveableStatics?.Overall ?? true)
                    {
                        MoveableStatics?.ToString(fg);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.ToString(fg);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.ToString(fg);
                    }
                    if (printMask?.Florae?.Overall ?? true)
                    {
                        Florae?.ToString(fg);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.ToString(fg);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.ToString(fg);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.ToString(fg);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.ToString(fg);
                    }
                    if (printMask?.LeveledNpcs?.Overall ?? true)
                    {
                        LeveledNpcs?.ToString(fg);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.ToString(fg);
                    }
                    if (printMask?.Ingestibles?.Overall ?? true)
                    {
                        Ingestibles?.ToString(fg);
                    }
                    if (printMask?.IdleMarkers?.Overall ?? true)
                    {
                        IdleMarkers?.ToString(fg);
                    }
                    if (printMask?.ConstructibleObjects?.Overall ?? true)
                    {
                        ConstructibleObjects?.ToString(fg);
                    }
                    if (printMask?.Projectiles?.Overall ?? true)
                    {
                        Projectiles?.ToString(fg);
                    }
                    if (printMask?.Hazards?.Overall ?? true)
                    {
                        Hazards?.ToString(fg);
                    }
                    if (printMask?.SoulGems?.Overall ?? true)
                    {
                        SoulGems?.ToString(fg);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.ToString(fg);
                    }
                    if (printMask?.Weathers?.Overall ?? true)
                    {
                        Weathers?.ToString(fg);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.ToString(fg);
                    }
                    if (printMask?.ShaderParticleGeometries?.Overall ?? true)
                    {
                        ShaderParticleGeometries?.ToString(fg);
                    }
                    if (printMask?.VisualEffects?.Overall ?? true)
                    {
                        VisualEffects?.ToString(fg);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.ToString(fg);
                    }
                    if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
                    {
                        NavigationMeshInfoMaps?.ToString(fg);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.ToString(fg);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.ToString(fg);
                    }
                    if (printMask?.DialogTopics?.Overall ?? true)
                    {
                        DialogTopics?.ToString(fg);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.ToString(fg);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.ToString(fg);
                    }
                    if (printMask?.Packages?.Overall ?? true)
                    {
                        Packages?.ToString(fg);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.ToString(fg);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.ToString(fg);
                    }
                    if (printMask?.LeveledSpells?.Overall ?? true)
                    {
                        LeveledSpells?.ToString(fg);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.ToString(fg);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.ToString(fg);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.ToString(fg);
                    }
                    if (printMask?.Explosions?.Overall ?? true)
                    {
                        Explosions?.ToString(fg);
                    }
                    if (printMask?.Debris?.Overall ?? true)
                    {
                        Debris?.ToString(fg);
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.ToString(fg);
                    }
                    if (printMask?.ImageSpaceAdapters?.Overall ?? true)
                    {
                        ImageSpaceAdapters?.ToString(fg);
                    }
                    if (printMask?.FormLists?.Overall ?? true)
                    {
                        FormLists?.ToString(fg);
                    }
                    if (printMask?.Perks?.Overall ?? true)
                    {
                        Perks?.ToString(fg);
                    }
                    if (printMask?.BodyParts?.Overall ?? true)
                    {
                        BodyParts?.ToString(fg);
                    }
                    if (printMask?.AddonNodes?.Overall ?? true)
                    {
                        AddonNodes?.ToString(fg);
                    }
                    if (printMask?.ActorValueInformation?.Overall ?? true)
                    {
                        ActorValueInformation?.ToString(fg);
                    }
                    if (printMask?.CameraShots?.Overall ?? true)
                    {
                        CameraShots?.ToString(fg);
                    }
                    if (printMask?.CameraPaths?.Overall ?? true)
                    {
                        CameraPaths?.ToString(fg);
                    }
                    if (printMask?.VoiceTypes?.Overall ?? true)
                    {
                        VoiceTypes?.ToString(fg);
                    }
                    if (printMask?.MaterialTypes?.Overall ?? true)
                    {
                        MaterialTypes?.ToString(fg);
                    }
                    if (printMask?.Impacts?.Overall ?? true)
                    {
                        Impacts?.ToString(fg);
                    }
                    if (printMask?.ImpactDataSets?.Overall ?? true)
                    {
                        ImpactDataSets?.ToString(fg);
                    }
                    if (printMask?.ArmorAddons?.Overall ?? true)
                    {
                        ArmorAddons?.ToString(fg);
                    }
                    if (printMask?.EncounterZones?.Overall ?? true)
                    {
                        EncounterZones?.ToString(fg);
                    }
                    if (printMask?.Locations?.Overall ?? true)
                    {
                        Locations?.ToString(fg);
                    }
                    if (printMask?.Messages?.Overall ?? true)
                    {
                        Messages?.ToString(fg);
                    }
                    if (printMask?.DefaultObjectManagers?.Overall ?? true)
                    {
                        DefaultObjectManagers?.ToString(fg);
                    }
                    if (printMask?.LightingTemplates?.Overall ?? true)
                    {
                        LightingTemplates?.ToString(fg);
                    }
                    if (printMask?.MusicTypes?.Overall ?? true)
                    {
                        MusicTypes?.ToString(fg);
                    }
                    if (printMask?.Footsteps?.Overall ?? true)
                    {
                        Footsteps?.ToString(fg);
                    }
                    if (printMask?.FootstepSets?.Overall ?? true)
                    {
                        FootstepSets?.ToString(fg);
                    }
                    if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
                    {
                        StoryManagerBranchNodes?.ToString(fg);
                    }
                    if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
                    {
                        StoryManagerQuestNodes?.ToString(fg);
                    }
                    if (printMask?.StoryManagerEventNodes?.Overall ?? true)
                    {
                        StoryManagerEventNodes?.ToString(fg);
                    }
                    if (printMask?.DialogBranches?.Overall ?? true)
                    {
                        DialogBranches?.ToString(fg);
                    }
                    if (printMask?.MusicTracks?.Overall ?? true)
                    {
                        MusicTracks?.ToString(fg);
                    }
                    if (printMask?.DialogViews?.Overall ?? true)
                    {
                        DialogViews?.ToString(fg);
                    }
                    if (printMask?.WordsOfPower?.Overall ?? true)
                    {
                        WordsOfPower?.ToString(fg);
                    }
                    if (printMask?.Shouts?.Overall ?? true)
                    {
                        Shouts?.ToString(fg);
                    }
                    if (printMask?.EquipTypes?.Overall ?? true)
                    {
                        EquipTypes?.ToString(fg);
                    }
                    if (printMask?.Relationships?.Overall ?? true)
                    {
                        Relationships?.ToString(fg);
                    }
                    if (printMask?.Scenes?.Overall ?? true)
                    {
                        Scenes?.ToString(fg);
                    }
                    if (printMask?.AssociationTypes?.Overall ?? true)
                    {
                        AssociationTypes?.ToString(fg);
                    }
                    if (printMask?.Outfits?.Overall ?? true)
                    {
                        Outfits?.ToString(fg);
                    }
                    if (printMask?.ArtObjects?.Overall ?? true)
                    {
                        ArtObjects?.ToString(fg);
                    }
                    if (printMask?.MaterialObjects?.Overall ?? true)
                    {
                        MaterialObjects?.ToString(fg);
                    }
                    if (printMask?.MovementTypes?.Overall ?? true)
                    {
                        MovementTypes?.ToString(fg);
                    }
                    if (printMask?.SoundDescriptors?.Overall ?? true)
                    {
                        SoundDescriptors?.ToString(fg);
                    }
                    if (printMask?.DualCastData?.Overall ?? true)
                    {
                        DualCastData?.ToString(fg);
                    }
                    if (printMask?.SoundCategories?.Overall ?? true)
                    {
                        SoundCategories?.ToString(fg);
                    }
                    if (printMask?.SoundOutputModels?.Overall ?? true)
                    {
                        SoundOutputModels?.ToString(fg);
                    }
                    if (printMask?.CollisionLayers?.Overall ?? true)
                    {
                        CollisionLayers?.ToString(fg);
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.ToString(fg);
                    }
                    if (printMask?.ReverbParameters?.Overall ?? true)
                    {
                        ReverbParameters?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, ModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>? Hairs;
            public MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>? Eyes;
            public MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>? SoundMarkers;
            public MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>? AcousticSpaces;
            public MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>? LandscapeTextures;
            public MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>? ObjectEffects;
            public MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>? Scrolls;
            public MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>? TalkingActivators;
            public MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>? MiscItems;
            public MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>? AlchemicalApparatuses;
            public MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>? MoveableStatics;
            public MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>? Florae;
            public MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>? LeveledNpcs;
            public MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>? Ingestibles;
            public MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>? IdleMarkers;
            public MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>? ConstructibleObjects;
            public MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>? Projectiles;
            public MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>? Hazards;
            public MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>? SoulGems;
            public MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>? Weathers;
            public MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>? ShaderParticleGeometries;
            public MaskItem<Exception?, Group.ErrorMask<VisualEffect.ErrorMask>?>? VisualEffects;
            public MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>? NavigationMeshInfoMaps;
            public MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>? DialogTopics;
            public MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, Group.ErrorMask<Package.ErrorMask>?>? Packages;
            public MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>? LeveledSpells;
            public MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            public MaskItem<Exception?, Group.ErrorMask<Explosion.ErrorMask>?>? Explosions;
            public MaskItem<Exception?, Group.ErrorMask<Debris.ErrorMask>?>? Debris;
            public MaskItem<Exception?, Group.ErrorMask<ImageSpace.ErrorMask>?>? ImageSpaces;
            public MaskItem<Exception?, Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>? ImageSpaceAdapters;
            public MaskItem<Exception?, Group.ErrorMask<FormList.ErrorMask>?>? FormLists;
            public MaskItem<Exception?, Group.ErrorMask<Perk.ErrorMask>?>? Perks;
            public MaskItem<Exception?, Group.ErrorMask<BodyPartData.ErrorMask>?>? BodyParts;
            public MaskItem<Exception?, Group.ErrorMask<AddonNode.ErrorMask>?>? AddonNodes;
            public MaskItem<Exception?, Group.ErrorMask<ActorValueInformation.ErrorMask>?>? ActorValueInformation;
            public MaskItem<Exception?, Group.ErrorMask<CameraShot.ErrorMask>?>? CameraShots;
            public MaskItem<Exception?, Group.ErrorMask<CameraPath.ErrorMask>?>? CameraPaths;
            public MaskItem<Exception?, Group.ErrorMask<VoiceType.ErrorMask>?>? VoiceTypes;
            public MaskItem<Exception?, Group.ErrorMask<MaterialType.ErrorMask>?>? MaterialTypes;
            public MaskItem<Exception?, Group.ErrorMask<Impact.ErrorMask>?>? Impacts;
            public MaskItem<Exception?, Group.ErrorMask<ImpactDataSet.ErrorMask>?>? ImpactDataSets;
            public MaskItem<Exception?, Group.ErrorMask<ArmorAddon.ErrorMask>?>? ArmorAddons;
            public MaskItem<Exception?, Group.ErrorMask<EncounterZone.ErrorMask>?>? EncounterZones;
            public MaskItem<Exception?, Group.ErrorMask<Location.ErrorMask>?>? Locations;
            public MaskItem<Exception?, Group.ErrorMask<Message.ErrorMask>?>? Messages;
            public MaskItem<Exception?, Group.ErrorMask<DefaultObjectManager.ErrorMask>?>? DefaultObjectManagers;
            public MaskItem<Exception?, Group.ErrorMask<LightingTemplate.ErrorMask>?>? LightingTemplates;
            public MaskItem<Exception?, Group.ErrorMask<MusicType.ErrorMask>?>? MusicTypes;
            public MaskItem<Exception?, Group.ErrorMask<Footstep.ErrorMask>?>? Footsteps;
            public MaskItem<Exception?, Group.ErrorMask<FootstepSet.ErrorMask>?>? FootstepSets;
            public MaskItem<Exception?, Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>? StoryManagerBranchNodes;
            public MaskItem<Exception?, Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>? StoryManagerQuestNodes;
            public MaskItem<Exception?, Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>? StoryManagerEventNodes;
            public MaskItem<Exception?, Group.ErrorMask<DialogBranch.ErrorMask>?>? DialogBranches;
            public MaskItem<Exception?, Group.ErrorMask<MusicTrack.ErrorMask>?>? MusicTracks;
            public MaskItem<Exception?, Group.ErrorMask<DialogView.ErrorMask>?>? DialogViews;
            public MaskItem<Exception?, Group.ErrorMask<WordOfPower.ErrorMask>?>? WordsOfPower;
            public MaskItem<Exception?, Group.ErrorMask<Shout.ErrorMask>?>? Shouts;
            public MaskItem<Exception?, Group.ErrorMask<EquipType.ErrorMask>?>? EquipTypes;
            public MaskItem<Exception?, Group.ErrorMask<Relationship.ErrorMask>?>? Relationships;
            public MaskItem<Exception?, Group.ErrorMask<Scene.ErrorMask>?>? Scenes;
            public MaskItem<Exception?, Group.ErrorMask<AssociationType.ErrorMask>?>? AssociationTypes;
            public MaskItem<Exception?, Group.ErrorMask<Outfit.ErrorMask>?>? Outfits;
            public MaskItem<Exception?, Group.ErrorMask<ArtObject.ErrorMask>?>? ArtObjects;
            public MaskItem<Exception?, Group.ErrorMask<MaterialObject.ErrorMask>?>? MaterialObjects;
            public MaskItem<Exception?, Group.ErrorMask<MovementType.ErrorMask>?>? MovementTypes;
            public MaskItem<Exception?, Group.ErrorMask<SoundDescriptor.ErrorMask>?>? SoundDescriptors;
            public MaskItem<Exception?, Group.ErrorMask<DualCastData.ErrorMask>?>? DualCastData;
            public MaskItem<Exception?, Group.ErrorMask<SoundCategory.ErrorMask>?>? SoundCategories;
            public MaskItem<Exception?, Group.ErrorMask<SoundOutputModel.ErrorMask>?>? SoundOutputModels;
            public MaskItem<Exception?, Group.ErrorMask<CollisionLayer.ErrorMask>?>? CollisionLayers;
            public MaskItem<Exception?, Group.ErrorMask<ColorRecord.ErrorMask>?>? Colors;
            public MaskItem<Exception?, Group.ErrorMask<ReverbParameters.ErrorMask>?>? ReverbParameters;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case SkyrimMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case SkyrimMod_FieldIndex.Keywords:
                        return Keywords;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case SkyrimMod_FieldIndex.Actions:
                        return Actions;
                    case SkyrimMod_FieldIndex.TextureSets:
                        return TextureSets;
                    case SkyrimMod_FieldIndex.Globals:
                        return Globals;
                    case SkyrimMod_FieldIndex.Classes:
                        return Classes;
                    case SkyrimMod_FieldIndex.Factions:
                        return Factions;
                    case SkyrimMod_FieldIndex.HeadParts:
                        return HeadParts;
                    case SkyrimMod_FieldIndex.Hairs:
                        return Hairs;
                    case SkyrimMod_FieldIndex.Eyes:
                        return Eyes;
                    case SkyrimMod_FieldIndex.Races:
                        return Races;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        return SoundMarkers;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        return AcousticSpaces;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        return LandscapeTextures;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        return ObjectEffects;
                    case SkyrimMod_FieldIndex.Spells:
                        return Spells;
                    case SkyrimMod_FieldIndex.Scrolls:
                        return Scrolls;
                    case SkyrimMod_FieldIndex.Activators:
                        return Activators;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        return TalkingActivators;
                    case SkyrimMod_FieldIndex.Armors:
                        return Armors;
                    case SkyrimMod_FieldIndex.Books:
                        return Books;
                    case SkyrimMod_FieldIndex.Containers:
                        return Containers;
                    case SkyrimMod_FieldIndex.Doors:
                        return Doors;
                    case SkyrimMod_FieldIndex.Ingredients:
                        return Ingredients;
                    case SkyrimMod_FieldIndex.Lights:
                        return Lights;
                    case SkyrimMod_FieldIndex.MiscItems:
                        return MiscItems;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        return AlchemicalApparatuses;
                    case SkyrimMod_FieldIndex.Statics:
                        return Statics;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        return MoveableStatics;
                    case SkyrimMod_FieldIndex.Grasses:
                        return Grasses;
                    case SkyrimMod_FieldIndex.Trees:
                        return Trees;
                    case SkyrimMod_FieldIndex.Florae:
                        return Florae;
                    case SkyrimMod_FieldIndex.Furniture:
                        return Furniture;
                    case SkyrimMod_FieldIndex.Weapons:
                        return Weapons;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case SkyrimMod_FieldIndex.Npcs:
                        return Npcs;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        return LeveledNpcs;
                    case SkyrimMod_FieldIndex.Keys:
                        return Keys;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        return Ingestibles;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        return IdleMarkers;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        return ConstructibleObjects;
                    case SkyrimMod_FieldIndex.Projectiles:
                        return Projectiles;
                    case SkyrimMod_FieldIndex.Hazards:
                        return Hazards;
                    case SkyrimMod_FieldIndex.SoulGems:
                        return SoulGems;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case SkyrimMod_FieldIndex.Weathers:
                        return Weathers;
                    case SkyrimMod_FieldIndex.Climates:
                        return Climates;
                    case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                        return ShaderParticleGeometries;
                    case SkyrimMod_FieldIndex.VisualEffects:
                        return VisualEffects;
                    case SkyrimMod_FieldIndex.Regions:
                        return Regions;
                    case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                        return NavigationMeshInfoMaps;
                    case SkyrimMod_FieldIndex.Cells:
                        return Cells;
                    case SkyrimMod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case SkyrimMod_FieldIndex.DialogTopics:
                        return DialogTopics;
                    case SkyrimMod_FieldIndex.Quests:
                        return Quests;
                    case SkyrimMod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case SkyrimMod_FieldIndex.Packages:
                        return Packages;
                    case SkyrimMod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case SkyrimMod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case SkyrimMod_FieldIndex.LeveledSpells:
                        return LeveledSpells;
                    case SkyrimMod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case SkyrimMod_FieldIndex.Waters:
                        return Waters;
                    case SkyrimMod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    case SkyrimMod_FieldIndex.Explosions:
                        return Explosions;
                    case SkyrimMod_FieldIndex.Debris:
                        return Debris;
                    case SkyrimMod_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                        return ImageSpaceAdapters;
                    case SkyrimMod_FieldIndex.FormLists:
                        return FormLists;
                    case SkyrimMod_FieldIndex.Perks:
                        return Perks;
                    case SkyrimMod_FieldIndex.BodyParts:
                        return BodyParts;
                    case SkyrimMod_FieldIndex.AddonNodes:
                        return AddonNodes;
                    case SkyrimMod_FieldIndex.ActorValueInformation:
                        return ActorValueInformation;
                    case SkyrimMod_FieldIndex.CameraShots:
                        return CameraShots;
                    case SkyrimMod_FieldIndex.CameraPaths:
                        return CameraPaths;
                    case SkyrimMod_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    case SkyrimMod_FieldIndex.MaterialTypes:
                        return MaterialTypes;
                    case SkyrimMod_FieldIndex.Impacts:
                        return Impacts;
                    case SkyrimMod_FieldIndex.ImpactDataSets:
                        return ImpactDataSets;
                    case SkyrimMod_FieldIndex.ArmorAddons:
                        return ArmorAddons;
                    case SkyrimMod_FieldIndex.EncounterZones:
                        return EncounterZones;
                    case SkyrimMod_FieldIndex.Locations:
                        return Locations;
                    case SkyrimMod_FieldIndex.Messages:
                        return Messages;
                    case SkyrimMod_FieldIndex.DefaultObjectManagers:
                        return DefaultObjectManagers;
                    case SkyrimMod_FieldIndex.LightingTemplates:
                        return LightingTemplates;
                    case SkyrimMod_FieldIndex.MusicTypes:
                        return MusicTypes;
                    case SkyrimMod_FieldIndex.Footsteps:
                        return Footsteps;
                    case SkyrimMod_FieldIndex.FootstepSets:
                        return FootstepSets;
                    case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                        return StoryManagerBranchNodes;
                    case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                        return StoryManagerQuestNodes;
                    case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                        return StoryManagerEventNodes;
                    case SkyrimMod_FieldIndex.DialogBranches:
                        return DialogBranches;
                    case SkyrimMod_FieldIndex.MusicTracks:
                        return MusicTracks;
                    case SkyrimMod_FieldIndex.DialogViews:
                        return DialogViews;
                    case SkyrimMod_FieldIndex.WordsOfPower:
                        return WordsOfPower;
                    case SkyrimMod_FieldIndex.Shouts:
                        return Shouts;
                    case SkyrimMod_FieldIndex.EquipTypes:
                        return EquipTypes;
                    case SkyrimMod_FieldIndex.Relationships:
                        return Relationships;
                    case SkyrimMod_FieldIndex.Scenes:
                        return Scenes;
                    case SkyrimMod_FieldIndex.AssociationTypes:
                        return AssociationTypes;
                    case SkyrimMod_FieldIndex.Outfits:
                        return Outfits;
                    case SkyrimMod_FieldIndex.ArtObjects:
                        return ArtObjects;
                    case SkyrimMod_FieldIndex.MaterialObjects:
                        return MaterialObjects;
                    case SkyrimMod_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case SkyrimMod_FieldIndex.SoundDescriptors:
                        return SoundDescriptors;
                    case SkyrimMod_FieldIndex.DualCastData:
                        return DualCastData;
                    case SkyrimMod_FieldIndex.SoundCategories:
                        return SoundCategories;
                    case SkyrimMod_FieldIndex.SoundOutputModels:
                        return SoundOutputModels;
                    case SkyrimMod_FieldIndex.CollisionLayers:
                        return CollisionLayers;
                    case SkyrimMod_FieldIndex.Colors:
                        return Colors;
                    case SkyrimMod_FieldIndex.ReverbParameters:
                        return ReverbParameters;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, ModHeader.ErrorMask?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = new MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = new MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = new MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = new MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Scrolls:
                        this.Scrolls = new MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = new MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MiscItems:
                        this.MiscItems = new MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = new MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = new MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Florae:
                        this.Florae = new MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = new MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        this.Ingestibles = new MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = new MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = new MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Projectiles:
                        this.Projectiles = new MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Hazards:
                        this.Hazards = new MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoulGems:
                        this.SoulGems = new MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = new MaskItem<Exception?, Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.VisualEffects:
                        this.VisualEffects = new MaskItem<Exception?, Group.ErrorMask<VisualEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = new MaskItem<Exception?, Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DialogTopics:
                        this.DialogTopics = new MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, Group.ErrorMask<Package.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = new MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Explosions:
                        this.Explosions = new MaskItem<Exception?, Group.ErrorMask<Explosion.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Debris:
                        this.Debris = new MaskItem<Exception?, Group.ErrorMask<Debris.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, Group.ErrorMask<ImageSpace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = new MaskItem<Exception?, Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.FormLists:
                        this.FormLists = new MaskItem<Exception?, Group.ErrorMask<FormList.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, Group.ErrorMask<Perk.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.BodyParts:
                        this.BodyParts = new MaskItem<Exception?, Group.ErrorMask<BodyPartData.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AddonNodes:
                        this.AddonNodes = new MaskItem<Exception?, Group.ErrorMask<AddonNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = new MaskItem<Exception?, Group.ErrorMask<ActorValueInformation.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CameraShots:
                        this.CameraShots = new MaskItem<Exception?, Group.ErrorMask<CameraShot.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CameraPaths:
                        this.CameraPaths = new MaskItem<Exception?, Group.ErrorMask<CameraPath.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = new MaskItem<Exception?, Group.ErrorMask<VoiceType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = new MaskItem<Exception?, Group.ErrorMask<MaterialType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Impacts:
                        this.Impacts = new MaskItem<Exception?, Group.ErrorMask<Impact.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = new MaskItem<Exception?, Group.ErrorMask<ImpactDataSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = new MaskItem<Exception?, Group.ErrorMask<ArmorAddon.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.EncounterZones:
                        this.EncounterZones = new MaskItem<Exception?, Group.ErrorMask<EncounterZone.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Locations:
                        this.Locations = new MaskItem<Exception?, Group.ErrorMask<Location.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Messages:
                        this.Messages = new MaskItem<Exception?, Group.ErrorMask<Message.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = new MaskItem<Exception?, Group.ErrorMask<DefaultObjectManager.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = new MaskItem<Exception?, Group.ErrorMask<LightingTemplate.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MusicTypes:
                        this.MusicTypes = new MaskItem<Exception?, Group.ErrorMask<MusicType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Footsteps:
                        this.Footsteps = new MaskItem<Exception?, Group.ErrorMask<Footstep.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.FootstepSets:
                        this.FootstepSets = new MaskItem<Exception?, Group.ErrorMask<FootstepSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = new MaskItem<Exception?, Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = new MaskItem<Exception?, Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = new MaskItem<Exception?, Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DialogBranches:
                        this.DialogBranches = new MaskItem<Exception?, Group.ErrorMask<DialogBranch.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MusicTracks:
                        this.MusicTracks = new MaskItem<Exception?, Group.ErrorMask<MusicTrack.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DialogViews:
                        this.DialogViews = new MaskItem<Exception?, Group.ErrorMask<DialogView.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.WordsOfPower:
                        this.WordsOfPower = new MaskItem<Exception?, Group.ErrorMask<WordOfPower.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Shouts:
                        this.Shouts = new MaskItem<Exception?, Group.ErrorMask<Shout.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.EquipTypes:
                        this.EquipTypes = new MaskItem<Exception?, Group.ErrorMask<EquipType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Relationships:
                        this.Relationships = new MaskItem<Exception?, Group.ErrorMask<Relationship.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Scenes:
                        this.Scenes = new MaskItem<Exception?, Group.ErrorMask<Scene.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = new MaskItem<Exception?, Group.ErrorMask<AssociationType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Outfits:
                        this.Outfits = new MaskItem<Exception?, Group.ErrorMask<Outfit.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ArtObjects:
                        this.ArtObjects = new MaskItem<Exception?, Group.ErrorMask<ArtObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = new MaskItem<Exception?, Group.ErrorMask<MaterialObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, Group.ErrorMask<MovementType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = new MaskItem<Exception?, Group.ErrorMask<SoundDescriptor.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DualCastData:
                        this.DualCastData = new MaskItem<Exception?, Group.ErrorMask<DualCastData.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundCategories:
                        this.SoundCategories = new MaskItem<Exception?, Group.ErrorMask<SoundCategory.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = new MaskItem<Exception?, Group.ErrorMask<SoundOutputModel.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = new MaskItem<Exception?, Group.ErrorMask<CollisionLayer.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, Group.ErrorMask<ColorRecord.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = new MaskItem<Exception?, Group.ErrorMask<ReverbParameters.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, ModHeader.ErrorMask?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, Group.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, Group.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, Group.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, Group.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, Group.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, Group.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, Group.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, Group.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, Group.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, Group.ErrorMask<Hair.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, Group.ErrorMask<Eyes.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, Group.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = (MaskItem<Exception?, Group.ErrorMask<SoundMarker.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = (MaskItem<Exception?, Group.ErrorMask<AcousticSpace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, Group.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = (MaskItem<Exception?, Group.ErrorMask<LandscapeTexture.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = (MaskItem<Exception?, Group.ErrorMask<ObjectEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, Group.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Scrolls:
                        this.Scrolls = (MaskItem<Exception?, Group.ErrorMask<Scroll.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, Group.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = (MaskItem<Exception?, Group.ErrorMask<TalkingActivator.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, Group.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, Group.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, Group.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, Group.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, Group.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, Group.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MiscItems:
                        this.MiscItems = (MaskItem<Exception?, Group.ErrorMask<MiscItem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = (MaskItem<Exception?, Group.ErrorMask<AlchemicalApparatus.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, Group.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = (MaskItem<Exception?, Group.ErrorMask<MoveableStatic.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, Group.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, Group.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Florae:
                        this.Florae = (MaskItem<Exception?, Group.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, Group.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, Group.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, Group.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, Group.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = (MaskItem<Exception?, Group.ErrorMask<LeveledNpc.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, Group.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        this.Ingestibles = (MaskItem<Exception?, Group.ErrorMask<Ingestible.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = (MaskItem<Exception?, Group.ErrorMask<IdleMarker.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = (MaskItem<Exception?, Group.ErrorMask<ConstructibleObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Projectiles:
                        this.Projectiles = (MaskItem<Exception?, Group.ErrorMask<Projectile.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Hazards:
                        this.Hazards = (MaskItem<Exception?, Group.ErrorMask<Hazard.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoulGems:
                        this.SoulGems = (MaskItem<Exception?, Group.ErrorMask<SoulGem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, Group.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, Group.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, Group.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = (MaskItem<Exception?, Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.VisualEffects:
                        this.VisualEffects = (MaskItem<Exception?, Group.ErrorMask<VisualEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, Group.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = (MaskItem<Exception?, Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, ListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, Group.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DialogTopics:
                        this.DialogTopics = (MaskItem<Exception?, Group.ErrorMask<DialogTopic.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, Group.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, Group.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, Group.ErrorMask<Package.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, Group.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, Group.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = (MaskItem<Exception?, Group.ErrorMask<LeveledSpell.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, Group.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, Group.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, Group.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Explosions:
                        this.Explosions = (MaskItem<Exception?, Group.ErrorMask<Explosion.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Debris:
                        this.Debris = (MaskItem<Exception?, Group.ErrorMask<Debris.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, Group.ErrorMask<ImageSpace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = (MaskItem<Exception?, Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.FormLists:
                        this.FormLists = (MaskItem<Exception?, Group.ErrorMask<FormList.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, Group.ErrorMask<Perk.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.BodyParts:
                        this.BodyParts = (MaskItem<Exception?, Group.ErrorMask<BodyPartData.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AddonNodes:
                        this.AddonNodes = (MaskItem<Exception?, Group.ErrorMask<AddonNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = (MaskItem<Exception?, Group.ErrorMask<ActorValueInformation.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CameraShots:
                        this.CameraShots = (MaskItem<Exception?, Group.ErrorMask<CameraShot.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CameraPaths:
                        this.CameraPaths = (MaskItem<Exception?, Group.ErrorMask<CameraPath.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (MaskItem<Exception?, Group.ErrorMask<VoiceType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = (MaskItem<Exception?, Group.ErrorMask<MaterialType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Impacts:
                        this.Impacts = (MaskItem<Exception?, Group.ErrorMask<Impact.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = (MaskItem<Exception?, Group.ErrorMask<ImpactDataSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = (MaskItem<Exception?, Group.ErrorMask<ArmorAddon.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.EncounterZones:
                        this.EncounterZones = (MaskItem<Exception?, Group.ErrorMask<EncounterZone.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Locations:
                        this.Locations = (MaskItem<Exception?, Group.ErrorMask<Location.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Messages:
                        this.Messages = (MaskItem<Exception?, Group.ErrorMask<Message.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = (MaskItem<Exception?, Group.ErrorMask<DefaultObjectManager.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = (MaskItem<Exception?, Group.ErrorMask<LightingTemplate.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MusicTypes:
                        this.MusicTypes = (MaskItem<Exception?, Group.ErrorMask<MusicType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Footsteps:
                        this.Footsteps = (MaskItem<Exception?, Group.ErrorMask<Footstep.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.FootstepSets:
                        this.FootstepSets = (MaskItem<Exception?, Group.ErrorMask<FootstepSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = (MaskItem<Exception?, Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = (MaskItem<Exception?, Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = (MaskItem<Exception?, Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DialogBranches:
                        this.DialogBranches = (MaskItem<Exception?, Group.ErrorMask<DialogBranch.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MusicTracks:
                        this.MusicTracks = (MaskItem<Exception?, Group.ErrorMask<MusicTrack.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DialogViews:
                        this.DialogViews = (MaskItem<Exception?, Group.ErrorMask<DialogView.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.WordsOfPower:
                        this.WordsOfPower = (MaskItem<Exception?, Group.ErrorMask<WordOfPower.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Shouts:
                        this.Shouts = (MaskItem<Exception?, Group.ErrorMask<Shout.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.EquipTypes:
                        this.EquipTypes = (MaskItem<Exception?, Group.ErrorMask<EquipType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Relationships:
                        this.Relationships = (MaskItem<Exception?, Group.ErrorMask<Relationship.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Scenes:
                        this.Scenes = (MaskItem<Exception?, Group.ErrorMask<Scene.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = (MaskItem<Exception?, Group.ErrorMask<AssociationType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Outfits:
                        this.Outfits = (MaskItem<Exception?, Group.ErrorMask<Outfit.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ArtObjects:
                        this.ArtObjects = (MaskItem<Exception?, Group.ErrorMask<ArtObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = (MaskItem<Exception?, Group.ErrorMask<MaterialObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, Group.ErrorMask<MovementType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = (MaskItem<Exception?, Group.ErrorMask<SoundDescriptor.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DualCastData:
                        this.DualCastData = (MaskItem<Exception?, Group.ErrorMask<DualCastData.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundCategories:
                        this.SoundCategories = (MaskItem<Exception?, Group.ErrorMask<SoundCategory.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = (MaskItem<Exception?, Group.ErrorMask<SoundOutputModel.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = (MaskItem<Exception?, Group.ErrorMask<CollisionLayer.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, Group.ErrorMask<ColorRecord.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = (MaskItem<Exception?, Group.ErrorMask<ReverbParameters.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (HeadParts != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (Races != null) return true;
                if (SoundMarkers != null) return true;
                if (AcousticSpaces != null) return true;
                if (MagicEffects != null) return true;
                if (LandscapeTextures != null) return true;
                if (ObjectEffects != null) return true;
                if (Spells != null) return true;
                if (Scrolls != null) return true;
                if (Activators != null) return true;
                if (TalkingActivators != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (MiscItems != null) return true;
                if (AlchemicalApparatuses != null) return true;
                if (Statics != null) return true;
                if (MoveableStatics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Florae != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (LeveledNpcs != null) return true;
                if (Keys != null) return true;
                if (Ingestibles != null) return true;
                if (IdleMarkers != null) return true;
                if (ConstructibleObjects != null) return true;
                if (Projectiles != null) return true;
                if (Hazards != null) return true;
                if (SoulGems != null) return true;
                if (LeveledItems != null) return true;
                if (Weathers != null) return true;
                if (Climates != null) return true;
                if (ShaderParticleGeometries != null) return true;
                if (VisualEffects != null) return true;
                if (Regions != null) return true;
                if (NavigationMeshInfoMaps != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (DialogTopics != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (Packages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (LeveledSpells != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                if (Explosions != null) return true;
                if (Debris != null) return true;
                if (ImageSpaces != null) return true;
                if (ImageSpaceAdapters != null) return true;
                if (FormLists != null) return true;
                if (Perks != null) return true;
                if (BodyParts != null) return true;
                if (AddonNodes != null) return true;
                if (ActorValueInformation != null) return true;
                if (CameraShots != null) return true;
                if (CameraPaths != null) return true;
                if (VoiceTypes != null) return true;
                if (MaterialTypes != null) return true;
                if (Impacts != null) return true;
                if (ImpactDataSets != null) return true;
                if (ArmorAddons != null) return true;
                if (EncounterZones != null) return true;
                if (Locations != null) return true;
                if (Messages != null) return true;
                if (DefaultObjectManagers != null) return true;
                if (LightingTemplates != null) return true;
                if (MusicTypes != null) return true;
                if (Footsteps != null) return true;
                if (FootstepSets != null) return true;
                if (StoryManagerBranchNodes != null) return true;
                if (StoryManagerQuestNodes != null) return true;
                if (StoryManagerEventNodes != null) return true;
                if (DialogBranches != null) return true;
                if (MusicTracks != null) return true;
                if (DialogViews != null) return true;
                if (WordsOfPower != null) return true;
                if (Shouts != null) return true;
                if (EquipTypes != null) return true;
                if (Relationships != null) return true;
                if (Scenes != null) return true;
                if (AssociationTypes != null) return true;
                if (Outfits != null) return true;
                if (ArtObjects != null) return true;
                if (MaterialObjects != null) return true;
                if (MovementTypes != null) return true;
                if (SoundDescriptors != null) return true;
                if (DualCastData != null) return true;
                if (SoundCategories != null) return true;
                if (SoundOutputModels != null) return true;
                if (CollisionLayers != null) return true;
                if (Colors != null) return true;
                if (ReverbParameters != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                ModHeader?.ToString(fg);
                GameSettings?.ToString(fg);
                Keywords?.ToString(fg);
                LocationReferenceTypes?.ToString(fg);
                Actions?.ToString(fg);
                TextureSets?.ToString(fg);
                Globals?.ToString(fg);
                Classes?.ToString(fg);
                Factions?.ToString(fg);
                HeadParts?.ToString(fg);
                Hairs?.ToString(fg);
                Eyes?.ToString(fg);
                Races?.ToString(fg);
                SoundMarkers?.ToString(fg);
                AcousticSpaces?.ToString(fg);
                MagicEffects?.ToString(fg);
                LandscapeTextures?.ToString(fg);
                ObjectEffects?.ToString(fg);
                Spells?.ToString(fg);
                Scrolls?.ToString(fg);
                Activators?.ToString(fg);
                TalkingActivators?.ToString(fg);
                Armors?.ToString(fg);
                Books?.ToString(fg);
                Containers?.ToString(fg);
                Doors?.ToString(fg);
                Ingredients?.ToString(fg);
                Lights?.ToString(fg);
                MiscItems?.ToString(fg);
                AlchemicalApparatuses?.ToString(fg);
                Statics?.ToString(fg);
                MoveableStatics?.ToString(fg);
                Grasses?.ToString(fg);
                Trees?.ToString(fg);
                Florae?.ToString(fg);
                Furniture?.ToString(fg);
                Weapons?.ToString(fg);
                Ammunitions?.ToString(fg);
                Npcs?.ToString(fg);
                LeveledNpcs?.ToString(fg);
                Keys?.ToString(fg);
                Ingestibles?.ToString(fg);
                IdleMarkers?.ToString(fg);
                ConstructibleObjects?.ToString(fg);
                Projectiles?.ToString(fg);
                Hazards?.ToString(fg);
                SoulGems?.ToString(fg);
                LeveledItems?.ToString(fg);
                Weathers?.ToString(fg);
                Climates?.ToString(fg);
                ShaderParticleGeometries?.ToString(fg);
                VisualEffects?.ToString(fg);
                Regions?.ToString(fg);
                NavigationMeshInfoMaps?.ToString(fg);
                Cells?.ToString(fg);
                Worldspaces?.ToString(fg);
                DialogTopics?.ToString(fg);
                Quests?.ToString(fg);
                IdleAnimations?.ToString(fg);
                Packages?.ToString(fg);
                CombatStyles?.ToString(fg);
                LoadScreens?.ToString(fg);
                LeveledSpells?.ToString(fg);
                AnimatedObjects?.ToString(fg);
                Waters?.ToString(fg);
                EffectShaders?.ToString(fg);
                Explosions?.ToString(fg);
                Debris?.ToString(fg);
                ImageSpaces?.ToString(fg);
                ImageSpaceAdapters?.ToString(fg);
                FormLists?.ToString(fg);
                Perks?.ToString(fg);
                BodyParts?.ToString(fg);
                AddonNodes?.ToString(fg);
                ActorValueInformation?.ToString(fg);
                CameraShots?.ToString(fg);
                CameraPaths?.ToString(fg);
                VoiceTypes?.ToString(fg);
                MaterialTypes?.ToString(fg);
                Impacts?.ToString(fg);
                ImpactDataSets?.ToString(fg);
                ArmorAddons?.ToString(fg);
                EncounterZones?.ToString(fg);
                Locations?.ToString(fg);
                Messages?.ToString(fg);
                DefaultObjectManagers?.ToString(fg);
                LightingTemplates?.ToString(fg);
                MusicTypes?.ToString(fg);
                Footsteps?.ToString(fg);
                FootstepSets?.ToString(fg);
                StoryManagerBranchNodes?.ToString(fg);
                StoryManagerQuestNodes?.ToString(fg);
                StoryManagerEventNodes?.ToString(fg);
                DialogBranches?.ToString(fg);
                MusicTracks?.ToString(fg);
                DialogViews?.ToString(fg);
                WordsOfPower?.ToString(fg);
                Shouts?.ToString(fg);
                EquipTypes?.ToString(fg);
                Relationships?.ToString(fg);
                Scenes?.ToString(fg);
                AssociationTypes?.ToString(fg);
                Outfits?.ToString(fg);
                ArtObjects?.ToString(fg);
                MaterialObjects?.ToString(fg);
                MovementTypes?.ToString(fg);
                SoundDescriptors?.ToString(fg);
                DualCastData?.ToString(fg);
                SoundCategories?.ToString(fg);
                SoundOutputModels?.ToString(fg);
                CollisionLayers?.ToString(fg);
                Colors?.ToString(fg);
                ReverbParameters?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Hairs = this.Hairs.Combine(rhs.Hairs, (l, r) => l.Combine(r));
                ret.Eyes = this.Eyes.Combine(rhs.Eyes, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.SoundMarkers = this.SoundMarkers.Combine(rhs.SoundMarkers, (l, r) => l.Combine(r));
                ret.AcousticSpaces = this.AcousticSpaces.Combine(rhs.AcousticSpaces, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.LandscapeTextures = this.LandscapeTextures.Combine(rhs.LandscapeTextures, (l, r) => l.Combine(r));
                ret.ObjectEffects = this.ObjectEffects.Combine(rhs.ObjectEffects, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Scrolls = this.Scrolls.Combine(rhs.Scrolls, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.TalkingActivators = this.TalkingActivators.Combine(rhs.TalkingActivators, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.MiscItems = this.MiscItems.Combine(rhs.MiscItems, (l, r) => l.Combine(r));
                ret.AlchemicalApparatuses = this.AlchemicalApparatuses.Combine(rhs.AlchemicalApparatuses, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.MoveableStatics = this.MoveableStatics.Combine(rhs.MoveableStatics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Florae = this.Florae.Combine(rhs.Florae, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.LeveledNpcs = this.LeveledNpcs.Combine(rhs.LeveledNpcs, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Ingestibles = this.Ingestibles.Combine(rhs.Ingestibles, (l, r) => l.Combine(r));
                ret.IdleMarkers = this.IdleMarkers.Combine(rhs.IdleMarkers, (l, r) => l.Combine(r));
                ret.ConstructibleObjects = this.ConstructibleObjects.Combine(rhs.ConstructibleObjects, (l, r) => l.Combine(r));
                ret.Projectiles = this.Projectiles.Combine(rhs.Projectiles, (l, r) => l.Combine(r));
                ret.Hazards = this.Hazards.Combine(rhs.Hazards, (l, r) => l.Combine(r));
                ret.SoulGems = this.SoulGems.Combine(rhs.SoulGems, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.Weathers = this.Weathers.Combine(rhs.Weathers, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.ShaderParticleGeometries = this.ShaderParticleGeometries.Combine(rhs.ShaderParticleGeometries, (l, r) => l.Combine(r));
                ret.VisualEffects = this.VisualEffects.Combine(rhs.VisualEffects, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps.Combine(rhs.NavigationMeshInfoMaps, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.DialogTopics = this.DialogTopics.Combine(rhs.DialogTopics, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.Packages = this.Packages.Combine(rhs.Packages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.LeveledSpells = this.LeveledSpells.Combine(rhs.LeveledSpells, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                ret.Explosions = this.Explosions.Combine(rhs.Explosions, (l, r) => l.Combine(r));
                ret.Debris = this.Debris.Combine(rhs.Debris, (l, r) => l.Combine(r));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.ImageSpaceAdapters = this.ImageSpaceAdapters.Combine(rhs.ImageSpaceAdapters, (l, r) => l.Combine(r));
                ret.FormLists = this.FormLists.Combine(rhs.FormLists, (l, r) => l.Combine(r));
                ret.Perks = this.Perks.Combine(rhs.Perks, (l, r) => l.Combine(r));
                ret.BodyParts = this.BodyParts.Combine(rhs.BodyParts, (l, r) => l.Combine(r));
                ret.AddonNodes = this.AddonNodes.Combine(rhs.AddonNodes, (l, r) => l.Combine(r));
                ret.ActorValueInformation = this.ActorValueInformation.Combine(rhs.ActorValueInformation, (l, r) => l.Combine(r));
                ret.CameraShots = this.CameraShots.Combine(rhs.CameraShots, (l, r) => l.Combine(r));
                ret.CameraPaths = this.CameraPaths.Combine(rhs.CameraPaths, (l, r) => l.Combine(r));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes, (l, r) => l.Combine(r));
                ret.MaterialTypes = this.MaterialTypes.Combine(rhs.MaterialTypes, (l, r) => l.Combine(r));
                ret.Impacts = this.Impacts.Combine(rhs.Impacts, (l, r) => l.Combine(r));
                ret.ImpactDataSets = this.ImpactDataSets.Combine(rhs.ImpactDataSets, (l, r) => l.Combine(r));
                ret.ArmorAddons = this.ArmorAddons.Combine(rhs.ArmorAddons, (l, r) => l.Combine(r));
                ret.EncounterZones = this.EncounterZones.Combine(rhs.EncounterZones, (l, r) => l.Combine(r));
                ret.Locations = this.Locations.Combine(rhs.Locations, (l, r) => l.Combine(r));
                ret.Messages = this.Messages.Combine(rhs.Messages, (l, r) => l.Combine(r));
                ret.DefaultObjectManagers = this.DefaultObjectManagers.Combine(rhs.DefaultObjectManagers, (l, r) => l.Combine(r));
                ret.LightingTemplates = this.LightingTemplates.Combine(rhs.LightingTemplates, (l, r) => l.Combine(r));
                ret.MusicTypes = this.MusicTypes.Combine(rhs.MusicTypes, (l, r) => l.Combine(r));
                ret.Footsteps = this.Footsteps.Combine(rhs.Footsteps, (l, r) => l.Combine(r));
                ret.FootstepSets = this.FootstepSets.Combine(rhs.FootstepSets, (l, r) => l.Combine(r));
                ret.StoryManagerBranchNodes = this.StoryManagerBranchNodes.Combine(rhs.StoryManagerBranchNodes, (l, r) => l.Combine(r));
                ret.StoryManagerQuestNodes = this.StoryManagerQuestNodes.Combine(rhs.StoryManagerQuestNodes, (l, r) => l.Combine(r));
                ret.StoryManagerEventNodes = this.StoryManagerEventNodes.Combine(rhs.StoryManagerEventNodes, (l, r) => l.Combine(r));
                ret.DialogBranches = this.DialogBranches.Combine(rhs.DialogBranches, (l, r) => l.Combine(r));
                ret.MusicTracks = this.MusicTracks.Combine(rhs.MusicTracks, (l, r) => l.Combine(r));
                ret.DialogViews = this.DialogViews.Combine(rhs.DialogViews, (l, r) => l.Combine(r));
                ret.WordsOfPower = this.WordsOfPower.Combine(rhs.WordsOfPower, (l, r) => l.Combine(r));
                ret.Shouts = this.Shouts.Combine(rhs.Shouts, (l, r) => l.Combine(r));
                ret.EquipTypes = this.EquipTypes.Combine(rhs.EquipTypes, (l, r) => l.Combine(r));
                ret.Relationships = this.Relationships.Combine(rhs.Relationships, (l, r) => l.Combine(r));
                ret.Scenes = this.Scenes.Combine(rhs.Scenes, (l, r) => l.Combine(r));
                ret.AssociationTypes = this.AssociationTypes.Combine(rhs.AssociationTypes, (l, r) => l.Combine(r));
                ret.Outfits = this.Outfits.Combine(rhs.Outfits, (l, r) => l.Combine(r));
                ret.ArtObjects = this.ArtObjects.Combine(rhs.ArtObjects, (l, r) => l.Combine(r));
                ret.MaterialObjects = this.MaterialObjects.Combine(rhs.MaterialObjects, (l, r) => l.Combine(r));
                ret.MovementTypes = this.MovementTypes.Combine(rhs.MovementTypes, (l, r) => l.Combine(r));
                ret.SoundDescriptors = this.SoundDescriptors.Combine(rhs.SoundDescriptors, (l, r) => l.Combine(r));
                ret.DualCastData = this.DualCastData.Combine(rhs.DualCastData, (l, r) => l.Combine(r));
                ret.SoundCategories = this.SoundCategories.Combine(rhs.SoundCategories, (l, r) => l.Combine(r));
                ret.SoundOutputModels = this.SoundOutputModels.Combine(rhs.SoundOutputModels, (l, r) => l.Combine(r));
                ret.CollisionLayers = this.CollisionLayers.Combine(rhs.CollisionLayers, (l, r) => l.Combine(r));
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.ReverbParameters = this.ReverbParameters.Combine(rhs.ReverbParameters, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, ModHeader.TranslationMask?> ModHeader;
            public MaskItem<bool, Group.TranslationMask<GameSetting.TranslationMask>?> GameSettings;
            public MaskItem<bool, Group.TranslationMask<Keyword.TranslationMask>?> Keywords;
            public MaskItem<bool, Group.TranslationMask<LocationReferenceType.TranslationMask>?> LocationReferenceTypes;
            public MaskItem<bool, Group.TranslationMask<ActionRecord.TranslationMask>?> Actions;
            public MaskItem<bool, Group.TranslationMask<TextureSet.TranslationMask>?> TextureSets;
            public MaskItem<bool, Group.TranslationMask<Global.TranslationMask>?> Globals;
            public MaskItem<bool, Group.TranslationMask<Class.TranslationMask>?> Classes;
            public MaskItem<bool, Group.TranslationMask<Faction.TranslationMask>?> Factions;
            public MaskItem<bool, Group.TranslationMask<HeadPart.TranslationMask>?> HeadParts;
            public MaskItem<bool, Group.TranslationMask<Hair.TranslationMask>?> Hairs;
            public MaskItem<bool, Group.TranslationMask<Eyes.TranslationMask>?> Eyes;
            public MaskItem<bool, Group.TranslationMask<Race.TranslationMask>?> Races;
            public MaskItem<bool, Group.TranslationMask<SoundMarker.TranslationMask>?> SoundMarkers;
            public MaskItem<bool, Group.TranslationMask<AcousticSpace.TranslationMask>?> AcousticSpaces;
            public MaskItem<bool, Group.TranslationMask<MagicEffect.TranslationMask>?> MagicEffects;
            public MaskItem<bool, Group.TranslationMask<LandscapeTexture.TranslationMask>?> LandscapeTextures;
            public MaskItem<bool, Group.TranslationMask<ObjectEffect.TranslationMask>?> ObjectEffects;
            public MaskItem<bool, Group.TranslationMask<Spell.TranslationMask>?> Spells;
            public MaskItem<bool, Group.TranslationMask<Scroll.TranslationMask>?> Scrolls;
            public MaskItem<bool, Group.TranslationMask<Activator.TranslationMask>?> Activators;
            public MaskItem<bool, Group.TranslationMask<TalkingActivator.TranslationMask>?> TalkingActivators;
            public MaskItem<bool, Group.TranslationMask<Armor.TranslationMask>?> Armors;
            public MaskItem<bool, Group.TranslationMask<Book.TranslationMask>?> Books;
            public MaskItem<bool, Group.TranslationMask<Container.TranslationMask>?> Containers;
            public MaskItem<bool, Group.TranslationMask<Door.TranslationMask>?> Doors;
            public MaskItem<bool, Group.TranslationMask<Ingredient.TranslationMask>?> Ingredients;
            public MaskItem<bool, Group.TranslationMask<Light.TranslationMask>?> Lights;
            public MaskItem<bool, Group.TranslationMask<MiscItem.TranslationMask>?> MiscItems;
            public MaskItem<bool, Group.TranslationMask<AlchemicalApparatus.TranslationMask>?> AlchemicalApparatuses;
            public MaskItem<bool, Group.TranslationMask<Static.TranslationMask>?> Statics;
            public MaskItem<bool, Group.TranslationMask<MoveableStatic.TranslationMask>?> MoveableStatics;
            public MaskItem<bool, Group.TranslationMask<Grass.TranslationMask>?> Grasses;
            public MaskItem<bool, Group.TranslationMask<Tree.TranslationMask>?> Trees;
            public MaskItem<bool, Group.TranslationMask<Flora.TranslationMask>?> Florae;
            public MaskItem<bool, Group.TranslationMask<Furniture.TranslationMask>?> Furniture;
            public MaskItem<bool, Group.TranslationMask<Weapon.TranslationMask>?> Weapons;
            public MaskItem<bool, Group.TranslationMask<Ammunition.TranslationMask>?> Ammunitions;
            public MaskItem<bool, Group.TranslationMask<Npc.TranslationMask>?> Npcs;
            public MaskItem<bool, Group.TranslationMask<LeveledNpc.TranslationMask>?> LeveledNpcs;
            public MaskItem<bool, Group.TranslationMask<Key.TranslationMask>?> Keys;
            public MaskItem<bool, Group.TranslationMask<Ingestible.TranslationMask>?> Ingestibles;
            public MaskItem<bool, Group.TranslationMask<IdleMarker.TranslationMask>?> IdleMarkers;
            public MaskItem<bool, Group.TranslationMask<ConstructibleObject.TranslationMask>?> ConstructibleObjects;
            public MaskItem<bool, Group.TranslationMask<Projectile.TranslationMask>?> Projectiles;
            public MaskItem<bool, Group.TranslationMask<Hazard.TranslationMask>?> Hazards;
            public MaskItem<bool, Group.TranslationMask<SoulGem.TranslationMask>?> SoulGems;
            public MaskItem<bool, Group.TranslationMask<LeveledItem.TranslationMask>?> LeveledItems;
            public MaskItem<bool, Group.TranslationMask<Weather.TranslationMask>?> Weathers;
            public MaskItem<bool, Group.TranslationMask<Climate.TranslationMask>?> Climates;
            public MaskItem<bool, Group.TranslationMask<ShaderParticleGeometry.TranslationMask>?> ShaderParticleGeometries;
            public MaskItem<bool, Group.TranslationMask<VisualEffect.TranslationMask>?> VisualEffects;
            public MaskItem<bool, Group.TranslationMask<Region.TranslationMask>?> Regions;
            public MaskItem<bool, Group.TranslationMask<NavigationMeshInfoMap.TranslationMask>?> NavigationMeshInfoMaps;
            public MaskItem<bool, ListGroup.TranslationMask<CellBlock.TranslationMask>?> Cells;
            public MaskItem<bool, Group.TranslationMask<Worldspace.TranslationMask>?> Worldspaces;
            public MaskItem<bool, Group.TranslationMask<DialogTopic.TranslationMask>?> DialogTopics;
            public MaskItem<bool, Group.TranslationMask<Quest.TranslationMask>?> Quests;
            public MaskItem<bool, Group.TranslationMask<IdleAnimation.TranslationMask>?> IdleAnimations;
            public MaskItem<bool, Group.TranslationMask<Package.TranslationMask>?> Packages;
            public MaskItem<bool, Group.TranslationMask<CombatStyle.TranslationMask>?> CombatStyles;
            public MaskItem<bool, Group.TranslationMask<LoadScreen.TranslationMask>?> LoadScreens;
            public MaskItem<bool, Group.TranslationMask<LeveledSpell.TranslationMask>?> LeveledSpells;
            public MaskItem<bool, Group.TranslationMask<AnimatedObject.TranslationMask>?> AnimatedObjects;
            public MaskItem<bool, Group.TranslationMask<Water.TranslationMask>?> Waters;
            public MaskItem<bool, Group.TranslationMask<EffectShader.TranslationMask>?> EffectShaders;
            public MaskItem<bool, Group.TranslationMask<Explosion.TranslationMask>?> Explosions;
            public MaskItem<bool, Group.TranslationMask<Debris.TranslationMask>?> Debris;
            public MaskItem<bool, Group.TranslationMask<ImageSpace.TranslationMask>?> ImageSpaces;
            public MaskItem<bool, Group.TranslationMask<ImageSpaceAdapter.TranslationMask>?> ImageSpaceAdapters;
            public MaskItem<bool, Group.TranslationMask<FormList.TranslationMask>?> FormLists;
            public MaskItem<bool, Group.TranslationMask<Perk.TranslationMask>?> Perks;
            public MaskItem<bool, Group.TranslationMask<BodyPartData.TranslationMask>?> BodyParts;
            public MaskItem<bool, Group.TranslationMask<AddonNode.TranslationMask>?> AddonNodes;
            public MaskItem<bool, Group.TranslationMask<ActorValueInformation.TranslationMask>?> ActorValueInformation;
            public MaskItem<bool, Group.TranslationMask<CameraShot.TranslationMask>?> CameraShots;
            public MaskItem<bool, Group.TranslationMask<CameraPath.TranslationMask>?> CameraPaths;
            public MaskItem<bool, Group.TranslationMask<VoiceType.TranslationMask>?> VoiceTypes;
            public MaskItem<bool, Group.TranslationMask<MaterialType.TranslationMask>?> MaterialTypes;
            public MaskItem<bool, Group.TranslationMask<Impact.TranslationMask>?> Impacts;
            public MaskItem<bool, Group.TranslationMask<ImpactDataSet.TranslationMask>?> ImpactDataSets;
            public MaskItem<bool, Group.TranslationMask<ArmorAddon.TranslationMask>?> ArmorAddons;
            public MaskItem<bool, Group.TranslationMask<EncounterZone.TranslationMask>?> EncounterZones;
            public MaskItem<bool, Group.TranslationMask<Location.TranslationMask>?> Locations;
            public MaskItem<bool, Group.TranslationMask<Message.TranslationMask>?> Messages;
            public MaskItem<bool, Group.TranslationMask<DefaultObjectManager.TranslationMask>?> DefaultObjectManagers;
            public MaskItem<bool, Group.TranslationMask<LightingTemplate.TranslationMask>?> LightingTemplates;
            public MaskItem<bool, Group.TranslationMask<MusicType.TranslationMask>?> MusicTypes;
            public MaskItem<bool, Group.TranslationMask<Footstep.TranslationMask>?> Footsteps;
            public MaskItem<bool, Group.TranslationMask<FootstepSet.TranslationMask>?> FootstepSets;
            public MaskItem<bool, Group.TranslationMask<StoryManagerBranchNode.TranslationMask>?> StoryManagerBranchNodes;
            public MaskItem<bool, Group.TranslationMask<StoryManagerQuestNode.TranslationMask>?> StoryManagerQuestNodes;
            public MaskItem<bool, Group.TranslationMask<StoryManagerEventNode.TranslationMask>?> StoryManagerEventNodes;
            public MaskItem<bool, Group.TranslationMask<DialogBranch.TranslationMask>?> DialogBranches;
            public MaskItem<bool, Group.TranslationMask<MusicTrack.TranslationMask>?> MusicTracks;
            public MaskItem<bool, Group.TranslationMask<DialogView.TranslationMask>?> DialogViews;
            public MaskItem<bool, Group.TranslationMask<WordOfPower.TranslationMask>?> WordsOfPower;
            public MaskItem<bool, Group.TranslationMask<Shout.TranslationMask>?> Shouts;
            public MaskItem<bool, Group.TranslationMask<EquipType.TranslationMask>?> EquipTypes;
            public MaskItem<bool, Group.TranslationMask<Relationship.TranslationMask>?> Relationships;
            public MaskItem<bool, Group.TranslationMask<Scene.TranslationMask>?> Scenes;
            public MaskItem<bool, Group.TranslationMask<AssociationType.TranslationMask>?> AssociationTypes;
            public MaskItem<bool, Group.TranslationMask<Outfit.TranslationMask>?> Outfits;
            public MaskItem<bool, Group.TranslationMask<ArtObject.TranslationMask>?> ArtObjects;
            public MaskItem<bool, Group.TranslationMask<MaterialObject.TranslationMask>?> MaterialObjects;
            public MaskItem<bool, Group.TranslationMask<MovementType.TranslationMask>?> MovementTypes;
            public MaskItem<bool, Group.TranslationMask<SoundDescriptor.TranslationMask>?> SoundDescriptors;
            public MaskItem<bool, Group.TranslationMask<DualCastData.TranslationMask>?> DualCastData;
            public MaskItem<bool, Group.TranslationMask<SoundCategory.TranslationMask>?> SoundCategories;
            public MaskItem<bool, Group.TranslationMask<SoundOutputModel.TranslationMask>?> SoundOutputModels;
            public MaskItem<bool, Group.TranslationMask<CollisionLayer.TranslationMask>?> CollisionLayers;
            public MaskItem<bool, Group.TranslationMask<ColorRecord.TranslationMask>?> Colors;
            public MaskItem<bool, Group.TranslationMask<ReverbParameters.TranslationMask>?> ReverbParameters;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.ModHeader = new MaskItem<bool, ModHeader.TranslationMask?>(defaultOn, null);
                this.GameSettings = new MaskItem<bool, Group.TranslationMask<GameSetting.TranslationMask>?>(defaultOn, null);
                this.Keywords = new MaskItem<bool, Group.TranslationMask<Keyword.TranslationMask>?>(defaultOn, null);
                this.LocationReferenceTypes = new MaskItem<bool, Group.TranslationMask<LocationReferenceType.TranslationMask>?>(defaultOn, null);
                this.Actions = new MaskItem<bool, Group.TranslationMask<ActionRecord.TranslationMask>?>(defaultOn, null);
                this.TextureSets = new MaskItem<bool, Group.TranslationMask<TextureSet.TranslationMask>?>(defaultOn, null);
                this.Globals = new MaskItem<bool, Group.TranslationMask<Global.TranslationMask>?>(defaultOn, null);
                this.Classes = new MaskItem<bool, Group.TranslationMask<Class.TranslationMask>?>(defaultOn, null);
                this.Factions = new MaskItem<bool, Group.TranslationMask<Faction.TranslationMask>?>(defaultOn, null);
                this.HeadParts = new MaskItem<bool, Group.TranslationMask<HeadPart.TranslationMask>?>(defaultOn, null);
                this.Hairs = new MaskItem<bool, Group.TranslationMask<Hair.TranslationMask>?>(defaultOn, null);
                this.Eyes = new MaskItem<bool, Group.TranslationMask<Eyes.TranslationMask>?>(defaultOn, null);
                this.Races = new MaskItem<bool, Group.TranslationMask<Race.TranslationMask>?>(defaultOn, null);
                this.SoundMarkers = new MaskItem<bool, Group.TranslationMask<SoundMarker.TranslationMask>?>(defaultOn, null);
                this.AcousticSpaces = new MaskItem<bool, Group.TranslationMask<AcousticSpace.TranslationMask>?>(defaultOn, null);
                this.MagicEffects = new MaskItem<bool, Group.TranslationMask<MagicEffect.TranslationMask>?>(defaultOn, null);
                this.LandscapeTextures = new MaskItem<bool, Group.TranslationMask<LandscapeTexture.TranslationMask>?>(defaultOn, null);
                this.ObjectEffects = new MaskItem<bool, Group.TranslationMask<ObjectEffect.TranslationMask>?>(defaultOn, null);
                this.Spells = new MaskItem<bool, Group.TranslationMask<Spell.TranslationMask>?>(defaultOn, null);
                this.Scrolls = new MaskItem<bool, Group.TranslationMask<Scroll.TranslationMask>?>(defaultOn, null);
                this.Activators = new MaskItem<bool, Group.TranslationMask<Activator.TranslationMask>?>(defaultOn, null);
                this.TalkingActivators = new MaskItem<bool, Group.TranslationMask<TalkingActivator.TranslationMask>?>(defaultOn, null);
                this.Armors = new MaskItem<bool, Group.TranslationMask<Armor.TranslationMask>?>(defaultOn, null);
                this.Books = new MaskItem<bool, Group.TranslationMask<Book.TranslationMask>?>(defaultOn, null);
                this.Containers = new MaskItem<bool, Group.TranslationMask<Container.TranslationMask>?>(defaultOn, null);
                this.Doors = new MaskItem<bool, Group.TranslationMask<Door.TranslationMask>?>(defaultOn, null);
                this.Ingredients = new MaskItem<bool, Group.TranslationMask<Ingredient.TranslationMask>?>(defaultOn, null);
                this.Lights = new MaskItem<bool, Group.TranslationMask<Light.TranslationMask>?>(defaultOn, null);
                this.MiscItems = new MaskItem<bool, Group.TranslationMask<MiscItem.TranslationMask>?>(defaultOn, null);
                this.AlchemicalApparatuses = new MaskItem<bool, Group.TranslationMask<AlchemicalApparatus.TranslationMask>?>(defaultOn, null);
                this.Statics = new MaskItem<bool, Group.TranslationMask<Static.TranslationMask>?>(defaultOn, null);
                this.MoveableStatics = new MaskItem<bool, Group.TranslationMask<MoveableStatic.TranslationMask>?>(defaultOn, null);
                this.Grasses = new MaskItem<bool, Group.TranslationMask<Grass.TranslationMask>?>(defaultOn, null);
                this.Trees = new MaskItem<bool, Group.TranslationMask<Tree.TranslationMask>?>(defaultOn, null);
                this.Florae = new MaskItem<bool, Group.TranslationMask<Flora.TranslationMask>?>(defaultOn, null);
                this.Furniture = new MaskItem<bool, Group.TranslationMask<Furniture.TranslationMask>?>(defaultOn, null);
                this.Weapons = new MaskItem<bool, Group.TranslationMask<Weapon.TranslationMask>?>(defaultOn, null);
                this.Ammunitions = new MaskItem<bool, Group.TranslationMask<Ammunition.TranslationMask>?>(defaultOn, null);
                this.Npcs = new MaskItem<bool, Group.TranslationMask<Npc.TranslationMask>?>(defaultOn, null);
                this.LeveledNpcs = new MaskItem<bool, Group.TranslationMask<LeveledNpc.TranslationMask>?>(defaultOn, null);
                this.Keys = new MaskItem<bool, Group.TranslationMask<Key.TranslationMask>?>(defaultOn, null);
                this.Ingestibles = new MaskItem<bool, Group.TranslationMask<Ingestible.TranslationMask>?>(defaultOn, null);
                this.IdleMarkers = new MaskItem<bool, Group.TranslationMask<IdleMarker.TranslationMask>?>(defaultOn, null);
                this.ConstructibleObjects = new MaskItem<bool, Group.TranslationMask<ConstructibleObject.TranslationMask>?>(defaultOn, null);
                this.Projectiles = new MaskItem<bool, Group.TranslationMask<Projectile.TranslationMask>?>(defaultOn, null);
                this.Hazards = new MaskItem<bool, Group.TranslationMask<Hazard.TranslationMask>?>(defaultOn, null);
                this.SoulGems = new MaskItem<bool, Group.TranslationMask<SoulGem.TranslationMask>?>(defaultOn, null);
                this.LeveledItems = new MaskItem<bool, Group.TranslationMask<LeveledItem.TranslationMask>?>(defaultOn, null);
                this.Weathers = new MaskItem<bool, Group.TranslationMask<Weather.TranslationMask>?>(defaultOn, null);
                this.Climates = new MaskItem<bool, Group.TranslationMask<Climate.TranslationMask>?>(defaultOn, null);
                this.ShaderParticleGeometries = new MaskItem<bool, Group.TranslationMask<ShaderParticleGeometry.TranslationMask>?>(defaultOn, null);
                this.VisualEffects = new MaskItem<bool, Group.TranslationMask<VisualEffect.TranslationMask>?>(defaultOn, null);
                this.Regions = new MaskItem<bool, Group.TranslationMask<Region.TranslationMask>?>(defaultOn, null);
                this.NavigationMeshInfoMaps = new MaskItem<bool, Group.TranslationMask<NavigationMeshInfoMap.TranslationMask>?>(defaultOn, null);
                this.Cells = new MaskItem<bool, ListGroup.TranslationMask<CellBlock.TranslationMask>?>(defaultOn, null);
                this.Worldspaces = new MaskItem<bool, Group.TranslationMask<Worldspace.TranslationMask>?>(defaultOn, null);
                this.DialogTopics = new MaskItem<bool, Group.TranslationMask<DialogTopic.TranslationMask>?>(defaultOn, null);
                this.Quests = new MaskItem<bool, Group.TranslationMask<Quest.TranslationMask>?>(defaultOn, null);
                this.IdleAnimations = new MaskItem<bool, Group.TranslationMask<IdleAnimation.TranslationMask>?>(defaultOn, null);
                this.Packages = new MaskItem<bool, Group.TranslationMask<Package.TranslationMask>?>(defaultOn, null);
                this.CombatStyles = new MaskItem<bool, Group.TranslationMask<CombatStyle.TranslationMask>?>(defaultOn, null);
                this.LoadScreens = new MaskItem<bool, Group.TranslationMask<LoadScreen.TranslationMask>?>(defaultOn, null);
                this.LeveledSpells = new MaskItem<bool, Group.TranslationMask<LeveledSpell.TranslationMask>?>(defaultOn, null);
                this.AnimatedObjects = new MaskItem<bool, Group.TranslationMask<AnimatedObject.TranslationMask>?>(defaultOn, null);
                this.Waters = new MaskItem<bool, Group.TranslationMask<Water.TranslationMask>?>(defaultOn, null);
                this.EffectShaders = new MaskItem<bool, Group.TranslationMask<EffectShader.TranslationMask>?>(defaultOn, null);
                this.Explosions = new MaskItem<bool, Group.TranslationMask<Explosion.TranslationMask>?>(defaultOn, null);
                this.Debris = new MaskItem<bool, Group.TranslationMask<Debris.TranslationMask>?>(defaultOn, null);
                this.ImageSpaces = new MaskItem<bool, Group.TranslationMask<ImageSpace.TranslationMask>?>(defaultOn, null);
                this.ImageSpaceAdapters = new MaskItem<bool, Group.TranslationMask<ImageSpaceAdapter.TranslationMask>?>(defaultOn, null);
                this.FormLists = new MaskItem<bool, Group.TranslationMask<FormList.TranslationMask>?>(defaultOn, null);
                this.Perks = new MaskItem<bool, Group.TranslationMask<Perk.TranslationMask>?>(defaultOn, null);
                this.BodyParts = new MaskItem<bool, Group.TranslationMask<BodyPartData.TranslationMask>?>(defaultOn, null);
                this.AddonNodes = new MaskItem<bool, Group.TranslationMask<AddonNode.TranslationMask>?>(defaultOn, null);
                this.ActorValueInformation = new MaskItem<bool, Group.TranslationMask<ActorValueInformation.TranslationMask>?>(defaultOn, null);
                this.CameraShots = new MaskItem<bool, Group.TranslationMask<CameraShot.TranslationMask>?>(defaultOn, null);
                this.CameraPaths = new MaskItem<bool, Group.TranslationMask<CameraPath.TranslationMask>?>(defaultOn, null);
                this.VoiceTypes = new MaskItem<bool, Group.TranslationMask<VoiceType.TranslationMask>?>(defaultOn, null);
                this.MaterialTypes = new MaskItem<bool, Group.TranslationMask<MaterialType.TranslationMask>?>(defaultOn, null);
                this.Impacts = new MaskItem<bool, Group.TranslationMask<Impact.TranslationMask>?>(defaultOn, null);
                this.ImpactDataSets = new MaskItem<bool, Group.TranslationMask<ImpactDataSet.TranslationMask>?>(defaultOn, null);
                this.ArmorAddons = new MaskItem<bool, Group.TranslationMask<ArmorAddon.TranslationMask>?>(defaultOn, null);
                this.EncounterZones = new MaskItem<bool, Group.TranslationMask<EncounterZone.TranslationMask>?>(defaultOn, null);
                this.Locations = new MaskItem<bool, Group.TranslationMask<Location.TranslationMask>?>(defaultOn, null);
                this.Messages = new MaskItem<bool, Group.TranslationMask<Message.TranslationMask>?>(defaultOn, null);
                this.DefaultObjectManagers = new MaskItem<bool, Group.TranslationMask<DefaultObjectManager.TranslationMask>?>(defaultOn, null);
                this.LightingTemplates = new MaskItem<bool, Group.TranslationMask<LightingTemplate.TranslationMask>?>(defaultOn, null);
                this.MusicTypes = new MaskItem<bool, Group.TranslationMask<MusicType.TranslationMask>?>(defaultOn, null);
                this.Footsteps = new MaskItem<bool, Group.TranslationMask<Footstep.TranslationMask>?>(defaultOn, null);
                this.FootstepSets = new MaskItem<bool, Group.TranslationMask<FootstepSet.TranslationMask>?>(defaultOn, null);
                this.StoryManagerBranchNodes = new MaskItem<bool, Group.TranslationMask<StoryManagerBranchNode.TranslationMask>?>(defaultOn, null);
                this.StoryManagerQuestNodes = new MaskItem<bool, Group.TranslationMask<StoryManagerQuestNode.TranslationMask>?>(defaultOn, null);
                this.StoryManagerEventNodes = new MaskItem<bool, Group.TranslationMask<StoryManagerEventNode.TranslationMask>?>(defaultOn, null);
                this.DialogBranches = new MaskItem<bool, Group.TranslationMask<DialogBranch.TranslationMask>?>(defaultOn, null);
                this.MusicTracks = new MaskItem<bool, Group.TranslationMask<MusicTrack.TranslationMask>?>(defaultOn, null);
                this.DialogViews = new MaskItem<bool, Group.TranslationMask<DialogView.TranslationMask>?>(defaultOn, null);
                this.WordsOfPower = new MaskItem<bool, Group.TranslationMask<WordOfPower.TranslationMask>?>(defaultOn, null);
                this.Shouts = new MaskItem<bool, Group.TranslationMask<Shout.TranslationMask>?>(defaultOn, null);
                this.EquipTypes = new MaskItem<bool, Group.TranslationMask<EquipType.TranslationMask>?>(defaultOn, null);
                this.Relationships = new MaskItem<bool, Group.TranslationMask<Relationship.TranslationMask>?>(defaultOn, null);
                this.Scenes = new MaskItem<bool, Group.TranslationMask<Scene.TranslationMask>?>(defaultOn, null);
                this.AssociationTypes = new MaskItem<bool, Group.TranslationMask<AssociationType.TranslationMask>?>(defaultOn, null);
                this.Outfits = new MaskItem<bool, Group.TranslationMask<Outfit.TranslationMask>?>(defaultOn, null);
                this.ArtObjects = new MaskItem<bool, Group.TranslationMask<ArtObject.TranslationMask>?>(defaultOn, null);
                this.MaterialObjects = new MaskItem<bool, Group.TranslationMask<MaterialObject.TranslationMask>?>(defaultOn, null);
                this.MovementTypes = new MaskItem<bool, Group.TranslationMask<MovementType.TranslationMask>?>(defaultOn, null);
                this.SoundDescriptors = new MaskItem<bool, Group.TranslationMask<SoundDescriptor.TranslationMask>?>(defaultOn, null);
                this.DualCastData = new MaskItem<bool, Group.TranslationMask<DualCastData.TranslationMask>?>(defaultOn, null);
                this.SoundCategories = new MaskItem<bool, Group.TranslationMask<SoundCategory.TranslationMask>?>(defaultOn, null);
                this.SoundOutputModels = new MaskItem<bool, Group.TranslationMask<SoundOutputModel.TranslationMask>?>(defaultOn, null);
                this.CollisionLayers = new MaskItem<bool, Group.TranslationMask<CollisionLayer.TranslationMask>?>(defaultOn, null);
                this.Colors = new MaskItem<bool, Group.TranslationMask<ColorRecord.TranslationMask>?>(defaultOn, null);
                this.ReverbParameters = new MaskItem<bool, Group.TranslationMask<ReverbParameters.TranslationMask>?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader?.Overall ?? true, ModHeader?.Specific?.GetCrystal()));
                ret.Add((GameSettings?.Overall ?? true, GameSettings?.Specific?.GetCrystal()));
                ret.Add((Keywords?.Overall ?? true, Keywords?.Specific?.GetCrystal()));
                ret.Add((LocationReferenceTypes?.Overall ?? true, LocationReferenceTypes?.Specific?.GetCrystal()));
                ret.Add((Actions?.Overall ?? true, Actions?.Specific?.GetCrystal()));
                ret.Add((TextureSets?.Overall ?? true, TextureSets?.Specific?.GetCrystal()));
                ret.Add((Globals?.Overall ?? true, Globals?.Specific?.GetCrystal()));
                ret.Add((Classes?.Overall ?? true, Classes?.Specific?.GetCrystal()));
                ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
                ret.Add((HeadParts?.Overall ?? true, HeadParts?.Specific?.GetCrystal()));
                ret.Add((Hairs?.Overall ?? true, Hairs?.Specific?.GetCrystal()));
                ret.Add((Eyes?.Overall ?? true, Eyes?.Specific?.GetCrystal()));
                ret.Add((Races?.Overall ?? true, Races?.Specific?.GetCrystal()));
                ret.Add((SoundMarkers?.Overall ?? true, SoundMarkers?.Specific?.GetCrystal()));
                ret.Add((AcousticSpaces?.Overall ?? true, AcousticSpaces?.Specific?.GetCrystal()));
                ret.Add((MagicEffects?.Overall ?? true, MagicEffects?.Specific?.GetCrystal()));
                ret.Add((LandscapeTextures?.Overall ?? true, LandscapeTextures?.Specific?.GetCrystal()));
                ret.Add((ObjectEffects?.Overall ?? true, ObjectEffects?.Specific?.GetCrystal()));
                ret.Add((Spells?.Overall ?? true, Spells?.Specific?.GetCrystal()));
                ret.Add((Scrolls?.Overall ?? true, Scrolls?.Specific?.GetCrystal()));
                ret.Add((Activators?.Overall ?? true, Activators?.Specific?.GetCrystal()));
                ret.Add((TalkingActivators?.Overall ?? true, TalkingActivators?.Specific?.GetCrystal()));
                ret.Add((Armors?.Overall ?? true, Armors?.Specific?.GetCrystal()));
                ret.Add((Books?.Overall ?? true, Books?.Specific?.GetCrystal()));
                ret.Add((Containers?.Overall ?? true, Containers?.Specific?.GetCrystal()));
                ret.Add((Doors?.Overall ?? true, Doors?.Specific?.GetCrystal()));
                ret.Add((Ingredients?.Overall ?? true, Ingredients?.Specific?.GetCrystal()));
                ret.Add((Lights?.Overall ?? true, Lights?.Specific?.GetCrystal()));
                ret.Add((MiscItems?.Overall ?? true, MiscItems?.Specific?.GetCrystal()));
                ret.Add((AlchemicalApparatuses?.Overall ?? true, AlchemicalApparatuses?.Specific?.GetCrystal()));
                ret.Add((Statics?.Overall ?? true, Statics?.Specific?.GetCrystal()));
                ret.Add((MoveableStatics?.Overall ?? true, MoveableStatics?.Specific?.GetCrystal()));
                ret.Add((Grasses?.Overall ?? true, Grasses?.Specific?.GetCrystal()));
                ret.Add((Trees?.Overall ?? true, Trees?.Specific?.GetCrystal()));
                ret.Add((Florae?.Overall ?? true, Florae?.Specific?.GetCrystal()));
                ret.Add((Furniture?.Overall ?? true, Furniture?.Specific?.GetCrystal()));
                ret.Add((Weapons?.Overall ?? true, Weapons?.Specific?.GetCrystal()));
                ret.Add((Ammunitions?.Overall ?? true, Ammunitions?.Specific?.GetCrystal()));
                ret.Add((Npcs?.Overall ?? true, Npcs?.Specific?.GetCrystal()));
                ret.Add((LeveledNpcs?.Overall ?? true, LeveledNpcs?.Specific?.GetCrystal()));
                ret.Add((Keys?.Overall ?? true, Keys?.Specific?.GetCrystal()));
                ret.Add((Ingestibles?.Overall ?? true, Ingestibles?.Specific?.GetCrystal()));
                ret.Add((IdleMarkers?.Overall ?? true, IdleMarkers?.Specific?.GetCrystal()));
                ret.Add((ConstructibleObjects?.Overall ?? true, ConstructibleObjects?.Specific?.GetCrystal()));
                ret.Add((Projectiles?.Overall ?? true, Projectiles?.Specific?.GetCrystal()));
                ret.Add((Hazards?.Overall ?? true, Hazards?.Specific?.GetCrystal()));
                ret.Add((SoulGems?.Overall ?? true, SoulGems?.Specific?.GetCrystal()));
                ret.Add((LeveledItems?.Overall ?? true, LeveledItems?.Specific?.GetCrystal()));
                ret.Add((Weathers?.Overall ?? true, Weathers?.Specific?.GetCrystal()));
                ret.Add((Climates?.Overall ?? true, Climates?.Specific?.GetCrystal()));
                ret.Add((ShaderParticleGeometries?.Overall ?? true, ShaderParticleGeometries?.Specific?.GetCrystal()));
                ret.Add((VisualEffects?.Overall ?? true, VisualEffects?.Specific?.GetCrystal()));
                ret.Add((Regions?.Overall ?? true, Regions?.Specific?.GetCrystal()));
                ret.Add((NavigationMeshInfoMaps?.Overall ?? true, NavigationMeshInfoMaps?.Specific?.GetCrystal()));
                ret.Add((Cells?.Overall ?? true, Cells?.Specific?.GetCrystal()));
                ret.Add((Worldspaces?.Overall ?? true, Worldspaces?.Specific?.GetCrystal()));
                ret.Add((DialogTopics?.Overall ?? true, DialogTopics?.Specific?.GetCrystal()));
                ret.Add((Quests?.Overall ?? true, Quests?.Specific?.GetCrystal()));
                ret.Add((IdleAnimations?.Overall ?? true, IdleAnimations?.Specific?.GetCrystal()));
                ret.Add((Packages?.Overall ?? true, Packages?.Specific?.GetCrystal()));
                ret.Add((CombatStyles?.Overall ?? true, CombatStyles?.Specific?.GetCrystal()));
                ret.Add((LoadScreens?.Overall ?? true, LoadScreens?.Specific?.GetCrystal()));
                ret.Add((LeveledSpells?.Overall ?? true, LeveledSpells?.Specific?.GetCrystal()));
                ret.Add((AnimatedObjects?.Overall ?? true, AnimatedObjects?.Specific?.GetCrystal()));
                ret.Add((Waters?.Overall ?? true, Waters?.Specific?.GetCrystal()));
                ret.Add((EffectShaders?.Overall ?? true, EffectShaders?.Specific?.GetCrystal()));
                ret.Add((Explosions?.Overall ?? true, Explosions?.Specific?.GetCrystal()));
                ret.Add((Debris?.Overall ?? true, Debris?.Specific?.GetCrystal()));
                ret.Add((ImageSpaces?.Overall ?? true, ImageSpaces?.Specific?.GetCrystal()));
                ret.Add((ImageSpaceAdapters?.Overall ?? true, ImageSpaceAdapters?.Specific?.GetCrystal()));
                ret.Add((FormLists?.Overall ?? true, FormLists?.Specific?.GetCrystal()));
                ret.Add((Perks?.Overall ?? true, Perks?.Specific?.GetCrystal()));
                ret.Add((BodyParts?.Overall ?? true, BodyParts?.Specific?.GetCrystal()));
                ret.Add((AddonNodes?.Overall ?? true, AddonNodes?.Specific?.GetCrystal()));
                ret.Add((ActorValueInformation?.Overall ?? true, ActorValueInformation?.Specific?.GetCrystal()));
                ret.Add((CameraShots?.Overall ?? true, CameraShots?.Specific?.GetCrystal()));
                ret.Add((CameraPaths?.Overall ?? true, CameraPaths?.Specific?.GetCrystal()));
                ret.Add((VoiceTypes?.Overall ?? true, VoiceTypes?.Specific?.GetCrystal()));
                ret.Add((MaterialTypes?.Overall ?? true, MaterialTypes?.Specific?.GetCrystal()));
                ret.Add((Impacts?.Overall ?? true, Impacts?.Specific?.GetCrystal()));
                ret.Add((ImpactDataSets?.Overall ?? true, ImpactDataSets?.Specific?.GetCrystal()));
                ret.Add((ArmorAddons?.Overall ?? true, ArmorAddons?.Specific?.GetCrystal()));
                ret.Add((EncounterZones?.Overall ?? true, EncounterZones?.Specific?.GetCrystal()));
                ret.Add((Locations?.Overall ?? true, Locations?.Specific?.GetCrystal()));
                ret.Add((Messages?.Overall ?? true, Messages?.Specific?.GetCrystal()));
                ret.Add((DefaultObjectManagers?.Overall ?? true, DefaultObjectManagers?.Specific?.GetCrystal()));
                ret.Add((LightingTemplates?.Overall ?? true, LightingTemplates?.Specific?.GetCrystal()));
                ret.Add((MusicTypes?.Overall ?? true, MusicTypes?.Specific?.GetCrystal()));
                ret.Add((Footsteps?.Overall ?? true, Footsteps?.Specific?.GetCrystal()));
                ret.Add((FootstepSets?.Overall ?? true, FootstepSets?.Specific?.GetCrystal()));
                ret.Add((StoryManagerBranchNodes?.Overall ?? true, StoryManagerBranchNodes?.Specific?.GetCrystal()));
                ret.Add((StoryManagerQuestNodes?.Overall ?? true, StoryManagerQuestNodes?.Specific?.GetCrystal()));
                ret.Add((StoryManagerEventNodes?.Overall ?? true, StoryManagerEventNodes?.Specific?.GetCrystal()));
                ret.Add((DialogBranches?.Overall ?? true, DialogBranches?.Specific?.GetCrystal()));
                ret.Add((MusicTracks?.Overall ?? true, MusicTracks?.Specific?.GetCrystal()));
                ret.Add((DialogViews?.Overall ?? true, DialogViews?.Specific?.GetCrystal()));
                ret.Add((WordsOfPower?.Overall ?? true, WordsOfPower?.Specific?.GetCrystal()));
                ret.Add((Shouts?.Overall ?? true, Shouts?.Specific?.GetCrystal()));
                ret.Add((EquipTypes?.Overall ?? true, EquipTypes?.Specific?.GetCrystal()));
                ret.Add((Relationships?.Overall ?? true, Relationships?.Specific?.GetCrystal()));
                ret.Add((Scenes?.Overall ?? true, Scenes?.Specific?.GetCrystal()));
                ret.Add((AssociationTypes?.Overall ?? true, AssociationTypes?.Specific?.GetCrystal()));
                ret.Add((Outfits?.Overall ?? true, Outfits?.Specific?.GetCrystal()));
                ret.Add((ArtObjects?.Overall ?? true, ArtObjects?.Specific?.GetCrystal()));
                ret.Add((MaterialObjects?.Overall ?? true, MaterialObjects?.Specific?.GetCrystal()));
                ret.Add((MovementTypes?.Overall ?? true, MovementTypes?.Specific?.GetCrystal()));
                ret.Add((SoundDescriptors?.Overall ?? true, SoundDescriptors?.Specific?.GetCrystal()));
                ret.Add((DualCastData?.Overall ?? true, DualCastData?.Specific?.GetCrystal()));
                ret.Add((SoundCategories?.Overall ?? true, SoundCategories?.Specific?.GetCrystal()));
                ret.Add((SoundOutputModels?.Overall ?? true, SoundOutputModels?.Specific?.GetCrystal()));
                ret.Add((CollisionLayers?.Overall ?? true, CollisionLayers?.Specific?.GetCrystal()));
                ret.Add((Colors?.Overall ?? true, Colors?.Specific?.GetCrystal()));
                ret.Add((ReverbParameters?.Overall ?? true, ReverbParameters?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = SkyrimMod_Registration.TriggeringRecordType;
        public override GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        ICache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param);
        public override bool CanUseLocalization => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextObjectID
        {
            get => this.ModHeader.Stats.NextObjectID;
            set => this.ModHeader.Stats.NextObjectID = value;
        }
        public SkyrimMod(ModKey modKey)
            : base(modKey)
        {
            this.ModHeader.Stats.NextObjectID = GetDefaultInitialNextObjectID();
            _GameSettings_Object = new Group<GameSetting>(this);
            _Keywords_Object = new Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Group<LocationReferenceType>(this);
            _Actions_Object = new Group<ActionRecord>(this);
            _TextureSets_Object = new Group<TextureSet>(this);
            _Globals_Object = new Group<Global>(this);
            _Classes_Object = new Group<Class>(this);
            _Factions_Object = new Group<Faction>(this);
            _HeadParts_Object = new Group<HeadPart>(this);
            _Hairs_Object = new Group<Hair>(this);
            _Eyes_Object = new Group<Eyes>(this);
            _Races_Object = new Group<Race>(this);
            _SoundMarkers_Object = new Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Group<AcousticSpace>(this);
            _MagicEffects_Object = new Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Group<ObjectEffect>(this);
            _Spells_Object = new Group<Spell>(this);
            _Scrolls_Object = new Group<Scroll>(this);
            _Activators_Object = new Group<Activator>(this);
            _TalkingActivators_Object = new Group<TalkingActivator>(this);
            _Armors_Object = new Group<Armor>(this);
            _Books_Object = new Group<Book>(this);
            _Containers_Object = new Group<Container>(this);
            _Doors_Object = new Group<Door>(this);
            _Ingredients_Object = new Group<Ingredient>(this);
            _Lights_Object = new Group<Light>(this);
            _MiscItems_Object = new Group<MiscItem>(this);
            _AlchemicalApparatuses_Object = new Group<AlchemicalApparatus>(this);
            _Statics_Object = new Group<Static>(this);
            _MoveableStatics_Object = new Group<MoveableStatic>(this);
            _Grasses_Object = new Group<Grass>(this);
            _Trees_Object = new Group<Tree>(this);
            _Florae_Object = new Group<Flora>(this);
            _Furniture_Object = new Group<Furniture>(this);
            _Weapons_Object = new Group<Weapon>(this);
            _Ammunitions_Object = new Group<Ammunition>(this);
            _Npcs_Object = new Group<Npc>(this);
            _LeveledNpcs_Object = new Group<LeveledNpc>(this);
            _Keys_Object = new Group<Key>(this);
            _Ingestibles_Object = new Group<Ingestible>(this);
            _IdleMarkers_Object = new Group<IdleMarker>(this);
            _ConstructibleObjects_Object = new Group<ConstructibleObject>(this);
            _Projectiles_Object = new Group<Projectile>(this);
            _Hazards_Object = new Group<Hazard>(this);
            _SoulGems_Object = new Group<SoulGem>(this);
            _LeveledItems_Object = new Group<LeveledItem>(this);
            _Weathers_Object = new Group<Weather>(this);
            _Climates_Object = new Group<Climate>(this);
            _ShaderParticleGeometries_Object = new Group<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new Group<VisualEffect>(this);
            _Regions_Object = new Group<Region>(this);
            _NavigationMeshInfoMaps_Object = new Group<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new Group<Worldspace>(this);
            _DialogTopics_Object = new Group<DialogTopic>(this);
            _Quests_Object = new Group<Quest>(this);
            _IdleAnimations_Object = new Group<IdleAnimation>(this);
            _Packages_Object = new Group<Package>(this);
            _CombatStyles_Object = new Group<CombatStyle>(this);
            _LoadScreens_Object = new Group<LoadScreen>(this);
            _LeveledSpells_Object = new Group<LeveledSpell>(this);
            _AnimatedObjects_Object = new Group<AnimatedObject>(this);
            _Waters_Object = new Group<Water>(this);
            _EffectShaders_Object = new Group<EffectShader>(this);
            _Explosions_Object = new Group<Explosion>(this);
            _Debris_Object = new Group<Debris>(this);
            _ImageSpaces_Object = new Group<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new Group<ImageSpaceAdapter>(this);
            _FormLists_Object = new Group<FormList>(this);
            _Perks_Object = new Group<Perk>(this);
            _BodyParts_Object = new Group<BodyPartData>(this);
            _AddonNodes_Object = new Group<AddonNode>(this);
            _ActorValueInformation_Object = new Group<ActorValueInformation>(this);
            _CameraShots_Object = new Group<CameraShot>(this);
            _CameraPaths_Object = new Group<CameraPath>(this);
            _VoiceTypes_Object = new Group<VoiceType>(this);
            _MaterialTypes_Object = new Group<MaterialType>(this);
            _Impacts_Object = new Group<Impact>(this);
            _ImpactDataSets_Object = new Group<ImpactDataSet>(this);
            _ArmorAddons_Object = new Group<ArmorAddon>(this);
            _EncounterZones_Object = new Group<EncounterZone>(this);
            _Locations_Object = new Group<Location>(this);
            _Messages_Object = new Group<Message>(this);
            _DefaultObjectManagers_Object = new Group<DefaultObjectManager>(this);
            _LightingTemplates_Object = new Group<LightingTemplate>(this);
            _MusicTypes_Object = new Group<MusicType>(this);
            _Footsteps_Object = new Group<Footstep>(this);
            _FootstepSets_Object = new Group<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new Group<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new Group<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new Group<StoryManagerEventNode>(this);
            _DialogBranches_Object = new Group<DialogBranch>(this);
            _MusicTracks_Object = new Group<MusicTrack>(this);
            _DialogViews_Object = new Group<DialogView>(this);
            _WordsOfPower_Object = new Group<WordOfPower>(this);
            _Shouts_Object = new Group<Shout>(this);
            _EquipTypes_Object = new Group<EquipType>(this);
            _Relationships_Object = new Group<Relationship>(this);
            _Scenes_Object = new Group<Scene>(this);
            _AssociationTypes_Object = new Group<AssociationType>(this);
            _Outfits_Object = new Group<Outfit>(this);
            _ArtObjects_Object = new Group<ArtObject>(this);
            _MaterialObjects_Object = new Group<MaterialObject>(this);
            _MovementTypes_Object = new Group<MovementType>(this);
            _SoundDescriptors_Object = new Group<SoundDescriptor>(this);
            _DualCastData_Object = new Group<DualCastData>(this);
            _SoundCategories_Object = new Group<SoundCategory>(this);
            _SoundOutputModels_Object = new Group<SoundOutputModel>(this);
            _CollisionLayers_Object = new Group<CollisionLayer>(this);
            _Colors_Object = new Group<ColorRecord>(this);
            _ReverbParameters_Object = new Group<ReverbParameters>(this);
        }
        public void AddRecords(
            SkyrimMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(rhsMod.Hairs.RecordCache.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(rhsMod.Eyes.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(rhsMod.SoundMarkers.RecordCache.Items);
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(rhsMod.AcousticSpaces.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(rhsMod.LandscapeTextures.RecordCache.Items);
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(rhsMod.ObjectEffects.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Scrolls ?? true)
            {
                this.Scrolls.RecordCache.Set(rhsMod.Scrolls.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(rhsMod.TalkingActivators.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(rhsMod.MiscItems.RecordCache.Items);
            }
            if (mask?.AlchemicalApparatuses ?? true)
            {
                this.AlchemicalApparatuses.RecordCache.Set(rhsMod.AlchemicalApparatuses.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(rhsMod.MoveableStatics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(rhsMod.Florae.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(rhsMod.LeveledNpcs.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(rhsMod.Ingestibles.RecordCache.Items);
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(rhsMod.IdleMarkers.RecordCache.Items);
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(rhsMod.ConstructibleObjects.RecordCache.Items);
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(rhsMod.Projectiles.RecordCache.Items);
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(rhsMod.Hazards.RecordCache.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(rhsMod.SoulGems.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(rhsMod.Weathers.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.ShaderParticleGeometries ?? true)
            {
                this.ShaderParticleGeometries.RecordCache.Set(rhsMod.ShaderParticleGeometries.RecordCache.Items);
            }
            if (mask?.VisualEffects ?? true)
            {
                this.VisualEffects.RecordCache.Set(rhsMod.VisualEffects.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.NavigationMeshInfoMaps ?? true)
            {
                this.NavigationMeshInfoMaps.RecordCache.Set(rhsMod.NavigationMeshInfoMaps.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.RecordCache.Set(rhsMod.DialogTopics.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.Packages ?? true)
            {
                this.Packages.RecordCache.Set(rhsMod.Packages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.RecordCache.Set(rhsMod.LeveledSpells.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
            if (mask?.Explosions ?? true)
            {
                this.Explosions.RecordCache.Set(rhsMod.Explosions.RecordCache.Items);
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(rhsMod.Debris.RecordCache.Items);
            }
            if (mask?.ImageSpaces ?? true)
            {
                this.ImageSpaces.RecordCache.Set(rhsMod.ImageSpaces.RecordCache.Items);
            }
            if (mask?.ImageSpaceAdapters ?? true)
            {
                this.ImageSpaceAdapters.RecordCache.Set(rhsMod.ImageSpaceAdapters.RecordCache.Items);
            }
            if (mask?.FormLists ?? true)
            {
                this.FormLists.RecordCache.Set(rhsMod.FormLists.RecordCache.Items);
            }
            if (mask?.Perks ?? true)
            {
                this.Perks.RecordCache.Set(rhsMod.Perks.RecordCache.Items);
            }
            if (mask?.BodyParts ?? true)
            {
                this.BodyParts.RecordCache.Set(rhsMod.BodyParts.RecordCache.Items);
            }
            if (mask?.AddonNodes ?? true)
            {
                this.AddonNodes.RecordCache.Set(rhsMod.AddonNodes.RecordCache.Items);
            }
            if (mask?.ActorValueInformation ?? true)
            {
                this.ActorValueInformation.RecordCache.Set(rhsMod.ActorValueInformation.RecordCache.Items);
            }
            if (mask?.CameraShots ?? true)
            {
                this.CameraShots.RecordCache.Set(rhsMod.CameraShots.RecordCache.Items);
            }
            if (mask?.CameraPaths ?? true)
            {
                this.CameraPaths.RecordCache.Set(rhsMod.CameraPaths.RecordCache.Items);
            }
            if (mask?.VoiceTypes ?? true)
            {
                this.VoiceTypes.RecordCache.Set(rhsMod.VoiceTypes.RecordCache.Items);
            }
            if (mask?.MaterialTypes ?? true)
            {
                this.MaterialTypes.RecordCache.Set(rhsMod.MaterialTypes.RecordCache.Items);
            }
            if (mask?.Impacts ?? true)
            {
                this.Impacts.RecordCache.Set(rhsMod.Impacts.RecordCache.Items);
            }
            if (mask?.ImpactDataSets ?? true)
            {
                this.ImpactDataSets.RecordCache.Set(rhsMod.ImpactDataSets.RecordCache.Items);
            }
            if (mask?.ArmorAddons ?? true)
            {
                this.ArmorAddons.RecordCache.Set(rhsMod.ArmorAddons.RecordCache.Items);
            }
            if (mask?.EncounterZones ?? true)
            {
                this.EncounterZones.RecordCache.Set(rhsMod.EncounterZones.RecordCache.Items);
            }
            if (mask?.Locations ?? true)
            {
                this.Locations.RecordCache.Set(rhsMod.Locations.RecordCache.Items);
            }
            if (mask?.Messages ?? true)
            {
                this.Messages.RecordCache.Set(rhsMod.Messages.RecordCache.Items);
            }
            if (mask?.DefaultObjectManagers ?? true)
            {
                this.DefaultObjectManagers.RecordCache.Set(rhsMod.DefaultObjectManagers.RecordCache.Items);
            }
            if (mask?.LightingTemplates ?? true)
            {
                this.LightingTemplates.RecordCache.Set(rhsMod.LightingTemplates.RecordCache.Items);
            }
            if (mask?.MusicTypes ?? true)
            {
                this.MusicTypes.RecordCache.Set(rhsMod.MusicTypes.RecordCache.Items);
            }
            if (mask?.Footsteps ?? true)
            {
                this.Footsteps.RecordCache.Set(rhsMod.Footsteps.RecordCache.Items);
            }
            if (mask?.FootstepSets ?? true)
            {
                this.FootstepSets.RecordCache.Set(rhsMod.FootstepSets.RecordCache.Items);
            }
            if (mask?.StoryManagerBranchNodes ?? true)
            {
                this.StoryManagerBranchNodes.RecordCache.Set(rhsMod.StoryManagerBranchNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerQuestNodes ?? true)
            {
                this.StoryManagerQuestNodes.RecordCache.Set(rhsMod.StoryManagerQuestNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerEventNodes ?? true)
            {
                this.StoryManagerEventNodes.RecordCache.Set(rhsMod.StoryManagerEventNodes.RecordCache.Items);
            }
            if (mask?.DialogBranches ?? true)
            {
                this.DialogBranches.RecordCache.Set(rhsMod.DialogBranches.RecordCache.Items);
            }
            if (mask?.MusicTracks ?? true)
            {
                this.MusicTracks.RecordCache.Set(rhsMod.MusicTracks.RecordCache.Items);
            }
            if (mask?.DialogViews ?? true)
            {
                this.DialogViews.RecordCache.Set(rhsMod.DialogViews.RecordCache.Items);
            }
            if (mask?.WordsOfPower ?? true)
            {
                this.WordsOfPower.RecordCache.Set(rhsMod.WordsOfPower.RecordCache.Items);
            }
            if (mask?.Shouts ?? true)
            {
                this.Shouts.RecordCache.Set(rhsMod.Shouts.RecordCache.Items);
            }
            if (mask?.EquipTypes ?? true)
            {
                this.EquipTypes.RecordCache.Set(rhsMod.EquipTypes.RecordCache.Items);
            }
            if (mask?.Relationships ?? true)
            {
                this.Relationships.RecordCache.Set(rhsMod.Relationships.RecordCache.Items);
            }
            if (mask?.Scenes ?? true)
            {
                this.Scenes.RecordCache.Set(rhsMod.Scenes.RecordCache.Items);
            }
            if (mask?.AssociationTypes ?? true)
            {
                this.AssociationTypes.RecordCache.Set(rhsMod.AssociationTypes.RecordCache.Items);
            }
            if (mask?.Outfits ?? true)
            {
                this.Outfits.RecordCache.Set(rhsMod.Outfits.RecordCache.Items);
            }
            if (mask?.ArtObjects ?? true)
            {
                this.ArtObjects.RecordCache.Set(rhsMod.ArtObjects.RecordCache.Items);
            }
            if (mask?.MaterialObjects ?? true)
            {
                this.MaterialObjects.RecordCache.Set(rhsMod.MaterialObjects.RecordCache.Items);
            }
            if (mask?.MovementTypes ?? true)
            {
                this.MovementTypes.RecordCache.Set(rhsMod.MovementTypes.RecordCache.Items);
            }
            if (mask?.SoundDescriptors ?? true)
            {
                this.SoundDescriptors.RecordCache.Set(rhsMod.SoundDescriptors.RecordCache.Items);
            }
            if (mask?.DualCastData ?? true)
            {
                this.DualCastData.RecordCache.Set(rhsMod.DualCastData.RecordCache.Items);
            }
            if (mask?.SoundCategories ?? true)
            {
                this.SoundCategories.RecordCache.Set(rhsMod.SoundCategories.RecordCache.Items);
            }
            if (mask?.SoundOutputModels ?? true)
            {
                this.SoundOutputModels.RecordCache.Set(rhsMod.SoundOutputModels.RecordCache.Items);
            }
            if (mask?.CollisionLayers ?? true)
            {
                this.CollisionLayers.RecordCache.Set(rhsMod.CollisionLayers.RecordCache.Items);
            }
            if (mask?.Colors ?? true)
            {
                this.Colors.RecordCache.Set(rhsMod.Colors.RecordCache.Items);
            }
            if (mask?.ReverbParameters ?? true)
            {
                this.ReverbParameters.RecordCache.Set(rhsMod.ReverbParameters.RecordCache.Items);
            }
        }

        public Dictionary<FormKey, IMajorRecordCommon> CopyInDuplicate(
            SkyrimMod rhs,
            GroupMask? mask = null)
        {
            var duppedRecords = new List<(IMajorRecordCommon Record, FormKey OriginalFormKey)>();
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(
                    rhs.GameSettings.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<GameSetting>());
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(
                    rhs.Keywords.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Keyword>());
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(
                    rhs.LocationReferenceTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LocationReferenceType>());
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(
                    rhs.Actions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ActionRecord>());
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(
                    rhs.TextureSets.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<TextureSet>());
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(
                    rhs.Globals.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Global>());
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(
                    rhs.Classes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Class>());
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(
                    rhs.Factions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Faction>());
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(
                    rhs.HeadParts.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<HeadPart>());
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(
                    rhs.Hairs.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Hair>());
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(
                    rhs.Eyes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Eyes>());
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(
                    rhs.Races.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Race>());
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(
                    rhs.SoundMarkers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoundMarker>());
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(
                    rhs.AcousticSpaces.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AcousticSpace>());
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(
                    rhs.MagicEffects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MagicEffect>());
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(
                    rhs.LandscapeTextures.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LandscapeTexture>());
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(
                    rhs.ObjectEffects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ObjectEffect>());
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(
                    rhs.Spells.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Spell>());
            }
            if (mask?.Scrolls ?? true)
            {
                this.Scrolls.RecordCache.Set(
                    rhs.Scrolls.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Scroll>());
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(
                    rhs.Activators.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Activator>());
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(
                    rhs.TalkingActivators.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<TalkingActivator>());
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(
                    rhs.Armors.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Armor>());
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(
                    rhs.Books.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Book>());
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(
                    rhs.Containers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Container>());
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(
                    rhs.Doors.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Door>());
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(
                    rhs.Ingredients.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ingredient>());
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(
                    rhs.Lights.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Light>());
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(
                    rhs.MiscItems.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MiscItem>());
            }
            if (mask?.AlchemicalApparatuses ?? true)
            {
                this.AlchemicalApparatuses.RecordCache.Set(
                    rhs.AlchemicalApparatuses.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AlchemicalApparatus>());
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(
                    rhs.Statics.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Static>());
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(
                    rhs.MoveableStatics.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MoveableStatic>());
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(
                    rhs.Grasses.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Grass>());
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(
                    rhs.Trees.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Tree>());
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(
                    rhs.Florae.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Flora>());
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(
                    rhs.Furniture.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Furniture>());
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(
                    rhs.Weapons.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weapon>());
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(
                    rhs.Ammunitions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ammunition>());
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(
                    rhs.Npcs.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Npc>());
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(
                    rhs.LeveledNpcs.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledNpc>());
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(
                    rhs.Keys.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Key>());
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(
                    rhs.Ingestibles.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Ingestible>());
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(
                    rhs.IdleMarkers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<IdleMarker>());
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(
                    rhs.ConstructibleObjects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ConstructibleObject>());
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(
                    rhs.Projectiles.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Projectile>());
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(
                    rhs.Hazards.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Hazard>());
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(
                    rhs.SoulGems.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoulGem>());
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(
                    rhs.LeveledItems.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledItem>());
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(
                    rhs.Weathers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Weather>());
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(
                    rhs.Climates.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Climate>());
            }
            if (mask?.ShaderParticleGeometries ?? true)
            {
                this.ShaderParticleGeometries.RecordCache.Set(
                    rhs.ShaderParticleGeometries.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ShaderParticleGeometry>());
            }
            if (mask?.VisualEffects ?? true)
            {
                this.VisualEffects.RecordCache.Set(
                    rhs.VisualEffects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<VisualEffect>());
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(
                    rhs.Regions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Region>());
            }
            if (mask?.NavigationMeshInfoMaps ?? true)
            {
                this.NavigationMeshInfoMaps.RecordCache.Set(
                    rhs.NavigationMeshInfoMaps.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<NavigationMeshInfoMap>());
            }
            if (mask?.Cells ?? true)
            {
                this.Cells.Records.AddRange(
                    rhs.Cells.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CellBlock>());
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(
                    rhs.Worldspaces.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Worldspace>());
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.RecordCache.Set(
                    rhs.DialogTopics.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DialogTopic>());
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(
                    rhs.Quests.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Quest>());
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(
                    rhs.IdleAnimations.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<IdleAnimation>());
            }
            if (mask?.Packages ?? true)
            {
                this.Packages.RecordCache.Set(
                    rhs.Packages.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Package>());
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(
                    rhs.CombatStyles.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CombatStyle>());
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(
                    rhs.LoadScreens.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LoadScreen>());
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.RecordCache.Set(
                    rhs.LeveledSpells.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LeveledSpell>());
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(
                    rhs.AnimatedObjects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AnimatedObject>());
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(
                    rhs.Waters.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Water>());
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(
                    rhs.EffectShaders.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<EffectShader>());
            }
            if (mask?.Explosions ?? true)
            {
                this.Explosions.RecordCache.Set(
                    rhs.Explosions.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Explosion>());
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(
                    rhs.Debris.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Debris>());
            }
            if (mask?.ImageSpaces ?? true)
            {
                this.ImageSpaces.RecordCache.Set(
                    rhs.ImageSpaces.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ImageSpace>());
            }
            if (mask?.ImageSpaceAdapters ?? true)
            {
                this.ImageSpaceAdapters.RecordCache.Set(
                    rhs.ImageSpaceAdapters.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ImageSpaceAdapter>());
            }
            if (mask?.FormLists ?? true)
            {
                this.FormLists.RecordCache.Set(
                    rhs.FormLists.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<FormList>());
            }
            if (mask?.Perks ?? true)
            {
                this.Perks.RecordCache.Set(
                    rhs.Perks.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Perk>());
            }
            if (mask?.BodyParts ?? true)
            {
                this.BodyParts.RecordCache.Set(
                    rhs.BodyParts.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<BodyPartData>());
            }
            if (mask?.AddonNodes ?? true)
            {
                this.AddonNodes.RecordCache.Set(
                    rhs.AddonNodes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AddonNode>());
            }
            if (mask?.ActorValueInformation ?? true)
            {
                this.ActorValueInformation.RecordCache.Set(
                    rhs.ActorValueInformation.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ActorValueInformation>());
            }
            if (mask?.CameraShots ?? true)
            {
                this.CameraShots.RecordCache.Set(
                    rhs.CameraShots.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CameraShot>());
            }
            if (mask?.CameraPaths ?? true)
            {
                this.CameraPaths.RecordCache.Set(
                    rhs.CameraPaths.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CameraPath>());
            }
            if (mask?.VoiceTypes ?? true)
            {
                this.VoiceTypes.RecordCache.Set(
                    rhs.VoiceTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<VoiceType>());
            }
            if (mask?.MaterialTypes ?? true)
            {
                this.MaterialTypes.RecordCache.Set(
                    rhs.MaterialTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MaterialType>());
            }
            if (mask?.Impacts ?? true)
            {
                this.Impacts.RecordCache.Set(
                    rhs.Impacts.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Impact>());
            }
            if (mask?.ImpactDataSets ?? true)
            {
                this.ImpactDataSets.RecordCache.Set(
                    rhs.ImpactDataSets.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ImpactDataSet>());
            }
            if (mask?.ArmorAddons ?? true)
            {
                this.ArmorAddons.RecordCache.Set(
                    rhs.ArmorAddons.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ArmorAddon>());
            }
            if (mask?.EncounterZones ?? true)
            {
                this.EncounterZones.RecordCache.Set(
                    rhs.EncounterZones.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<EncounterZone>());
            }
            if (mask?.Locations ?? true)
            {
                this.Locations.RecordCache.Set(
                    rhs.Locations.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Location>());
            }
            if (mask?.Messages ?? true)
            {
                this.Messages.RecordCache.Set(
                    rhs.Messages.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Message>());
            }
            if (mask?.DefaultObjectManagers ?? true)
            {
                this.DefaultObjectManagers.RecordCache.Set(
                    rhs.DefaultObjectManagers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DefaultObjectManager>());
            }
            if (mask?.LightingTemplates ?? true)
            {
                this.LightingTemplates.RecordCache.Set(
                    rhs.LightingTemplates.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<LightingTemplate>());
            }
            if (mask?.MusicTypes ?? true)
            {
                this.MusicTypes.RecordCache.Set(
                    rhs.MusicTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MusicType>());
            }
            if (mask?.Footsteps ?? true)
            {
                this.Footsteps.RecordCache.Set(
                    rhs.Footsteps.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Footstep>());
            }
            if (mask?.FootstepSets ?? true)
            {
                this.FootstepSets.RecordCache.Set(
                    rhs.FootstepSets.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<FootstepSet>());
            }
            if (mask?.StoryManagerBranchNodes ?? true)
            {
                this.StoryManagerBranchNodes.RecordCache.Set(
                    rhs.StoryManagerBranchNodes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<StoryManagerBranchNode>());
            }
            if (mask?.StoryManagerQuestNodes ?? true)
            {
                this.StoryManagerQuestNodes.RecordCache.Set(
                    rhs.StoryManagerQuestNodes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<StoryManagerQuestNode>());
            }
            if (mask?.StoryManagerEventNodes ?? true)
            {
                this.StoryManagerEventNodes.RecordCache.Set(
                    rhs.StoryManagerEventNodes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<StoryManagerEventNode>());
            }
            if (mask?.DialogBranches ?? true)
            {
                this.DialogBranches.RecordCache.Set(
                    rhs.DialogBranches.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DialogBranch>());
            }
            if (mask?.MusicTracks ?? true)
            {
                this.MusicTracks.RecordCache.Set(
                    rhs.MusicTracks.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MusicTrack>());
            }
            if (mask?.DialogViews ?? true)
            {
                this.DialogViews.RecordCache.Set(
                    rhs.DialogViews.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DialogView>());
            }
            if (mask?.WordsOfPower ?? true)
            {
                this.WordsOfPower.RecordCache.Set(
                    rhs.WordsOfPower.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<WordOfPower>());
            }
            if (mask?.Shouts ?? true)
            {
                this.Shouts.RecordCache.Set(
                    rhs.Shouts.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Shout>());
            }
            if (mask?.EquipTypes ?? true)
            {
                this.EquipTypes.RecordCache.Set(
                    rhs.EquipTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<EquipType>());
            }
            if (mask?.Relationships ?? true)
            {
                this.Relationships.RecordCache.Set(
                    rhs.Relationships.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Relationship>());
            }
            if (mask?.Scenes ?? true)
            {
                this.Scenes.RecordCache.Set(
                    rhs.Scenes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Scene>());
            }
            if (mask?.AssociationTypes ?? true)
            {
                this.AssociationTypes.RecordCache.Set(
                    rhs.AssociationTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<AssociationType>());
            }
            if (mask?.Outfits ?? true)
            {
                this.Outfits.RecordCache.Set(
                    rhs.Outfits.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Outfit>());
            }
            if (mask?.ArtObjects ?? true)
            {
                this.ArtObjects.RecordCache.Set(
                    rhs.ArtObjects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ArtObject>());
            }
            if (mask?.MaterialObjects ?? true)
            {
                this.MaterialObjects.RecordCache.Set(
                    rhs.MaterialObjects.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MaterialObject>());
            }
            if (mask?.MovementTypes ?? true)
            {
                this.MovementTypes.RecordCache.Set(
                    rhs.MovementTypes.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<MovementType>());
            }
            if (mask?.SoundDescriptors ?? true)
            {
                this.SoundDescriptors.RecordCache.Set(
                    rhs.SoundDescriptors.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoundDescriptor>());
            }
            if (mask?.DualCastData ?? true)
            {
                this.DualCastData.RecordCache.Set(
                    rhs.DualCastData.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<DualCastData>());
            }
            if (mask?.SoundCategories ?? true)
            {
                this.SoundCategories.RecordCache.Set(
                    rhs.SoundCategories.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoundCategory>());
            }
            if (mask?.SoundOutputModels ?? true)
            {
                this.SoundOutputModels.RecordCache.Set(
                    rhs.SoundOutputModels.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<SoundOutputModel>());
            }
            if (mask?.CollisionLayers ?? true)
            {
                this.CollisionLayers.RecordCache.Set(
                    rhs.CollisionLayers.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<CollisionLayer>());
            }
            if (mask?.Colors ?? true)
            {
                this.Colors.RecordCache.Set(
                    rhs.Colors.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ColorRecord>());
            }
            if (mask?.ReverbParameters ?? true)
            {
                this.ReverbParameters.RecordCache.Set(
                    rhs.ReverbParameters.Records
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<ReverbParameters>());
            }
            var router = new Dictionary<FormKey, IMajorRecordCommon>();
            router.Set(duppedRecords.Select(dup => new KeyValuePair<FormKey, IMajorRecordCommon>(dup.OriginalFormKey, dup.Record)));
            var mapping = new Dictionary<FormKey, FormKey>();
            var package = this.CreateLinkCache();
            foreach (var rec in router.Values)
            {
                rec.RemapLinks(mapping);
            }
            return router;
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public int GetRecordCount()
        {
            int count = this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : 0;
            count += Keywords.RecordCache.Count > 0 ? 1 : 0;
            count += LocationReferenceTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Actions.RecordCache.Count > 0 ? 1 : 0;
            count += TextureSets.RecordCache.Count > 0 ? 1 : 0;
            count += Globals.RecordCache.Count > 0 ? 1 : 0;
            count += Classes.RecordCache.Count > 0 ? 1 : 0;
            count += Factions.RecordCache.Count > 0 ? 1 : 0;
            count += HeadParts.RecordCache.Count > 0 ? 1 : 0;
            count += Hairs.RecordCache.Count > 0 ? 1 : 0;
            count += Eyes.RecordCache.Count > 0 ? 1 : 0;
            count += Races.RecordCache.Count > 0 ? 1 : 0;
            count += SoundMarkers.RecordCache.Count > 0 ? 1 : 0;
            count += AcousticSpaces.RecordCache.Count > 0 ? 1 : 0;
            count += MagicEffects.RecordCache.Count > 0 ? 1 : 0;
            count += LandscapeTextures.RecordCache.Count > 0 ? 1 : 0;
            count += ObjectEffects.RecordCache.Count > 0 ? 1 : 0;
            count += Spells.RecordCache.Count > 0 ? 1 : 0;
            count += Scrolls.RecordCache.Count > 0 ? 1 : 0;
            count += Activators.RecordCache.Count > 0 ? 1 : 0;
            count += TalkingActivators.RecordCache.Count > 0 ? 1 : 0;
            count += Armors.RecordCache.Count > 0 ? 1 : 0;
            count += Books.RecordCache.Count > 0 ? 1 : 0;
            count += Containers.RecordCache.Count > 0 ? 1 : 0;
            count += Doors.RecordCache.Count > 0 ? 1 : 0;
            count += Ingredients.RecordCache.Count > 0 ? 1 : 0;
            count += Lights.RecordCache.Count > 0 ? 1 : 0;
            count += MiscItems.RecordCache.Count > 0 ? 1 : 0;
            count += AlchemicalApparatuses.RecordCache.Count > 0 ? 1 : 0;
            count += Statics.RecordCache.Count > 0 ? 1 : 0;
            count += MoveableStatics.RecordCache.Count > 0 ? 1 : 0;
            count += Grasses.RecordCache.Count > 0 ? 1 : 0;
            count += Trees.RecordCache.Count > 0 ? 1 : 0;
            count += Florae.RecordCache.Count > 0 ? 1 : 0;
            count += Furniture.RecordCache.Count > 0 ? 1 : 0;
            count += Weapons.RecordCache.Count > 0 ? 1 : 0;
            count += Ammunitions.RecordCache.Count > 0 ? 1 : 0;
            count += Npcs.RecordCache.Count > 0 ? 1 : 0;
            count += LeveledNpcs.RecordCache.Count > 0 ? 1 : 0;
            count += Keys.RecordCache.Count > 0 ? 1 : 0;
            count += Ingestibles.RecordCache.Count > 0 ? 1 : 0;
            count += IdleMarkers.RecordCache.Count > 0 ? 1 : 0;
            count += ConstructibleObjects.RecordCache.Count > 0 ? 1 : 0;
            count += Projectiles.RecordCache.Count > 0 ? 1 : 0;
            count += Hazards.RecordCache.Count > 0 ? 1 : 0;
            count += SoulGems.RecordCache.Count > 0 ? 1 : 0;
            count += LeveledItems.RecordCache.Count > 0 ? 1 : 0;
            count += Weathers.RecordCache.Count > 0 ? 1 : 0;
            count += Climates.RecordCache.Count > 0 ? 1 : 0;
            count += ShaderParticleGeometries.RecordCache.Count > 0 ? 1 : 0;
            count += VisualEffects.RecordCache.Count > 0 ? 1 : 0;
            count += Regions.RecordCache.Count > 0 ? 1 : 0;
            count += NavigationMeshInfoMaps.RecordCache.Count > 0 ? 1 : 0;
            count += Cells.Records.Count > 0 ? 1 : 0;
            count += Worldspaces.RecordCache.Count > 0 ? 1 : 0;
            count += DialogTopics.RecordCache.Count > 0 ? 1 : 0;
            count += Quests.RecordCache.Count > 0 ? 1 : 0;
            count += IdleAnimations.RecordCache.Count > 0 ? 1 : 0;
            count += Packages.RecordCache.Count > 0 ? 1 : 0;
            count += CombatStyles.RecordCache.Count > 0 ? 1 : 0;
            count += LoadScreens.RecordCache.Count > 0 ? 1 : 0;
            count += LeveledSpells.RecordCache.Count > 0 ? 1 : 0;
            count += AnimatedObjects.RecordCache.Count > 0 ? 1 : 0;
            count += Waters.RecordCache.Count > 0 ? 1 : 0;
            count += EffectShaders.RecordCache.Count > 0 ? 1 : 0;
            count += Explosions.RecordCache.Count > 0 ? 1 : 0;
            count += Debris.RecordCache.Count > 0 ? 1 : 0;
            count += ImageSpaces.RecordCache.Count > 0 ? 1 : 0;
            count += ImageSpaceAdapters.RecordCache.Count > 0 ? 1 : 0;
            count += FormLists.RecordCache.Count > 0 ? 1 : 0;
            count += Perks.RecordCache.Count > 0 ? 1 : 0;
            count += BodyParts.RecordCache.Count > 0 ? 1 : 0;
            count += AddonNodes.RecordCache.Count > 0 ? 1 : 0;
            count += ActorValueInformation.RecordCache.Count > 0 ? 1 : 0;
            count += CameraShots.RecordCache.Count > 0 ? 1 : 0;
            count += CameraPaths.RecordCache.Count > 0 ? 1 : 0;
            count += VoiceTypes.RecordCache.Count > 0 ? 1 : 0;
            count += MaterialTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Impacts.RecordCache.Count > 0 ? 1 : 0;
            count += ImpactDataSets.RecordCache.Count > 0 ? 1 : 0;
            count += ArmorAddons.RecordCache.Count > 0 ? 1 : 0;
            count += EncounterZones.RecordCache.Count > 0 ? 1 : 0;
            count += Locations.RecordCache.Count > 0 ? 1 : 0;
            count += Messages.RecordCache.Count > 0 ? 1 : 0;
            count += DefaultObjectManagers.RecordCache.Count > 0 ? 1 : 0;
            count += LightingTemplates.RecordCache.Count > 0 ? 1 : 0;
            count += MusicTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Footsteps.RecordCache.Count > 0 ? 1 : 0;
            count += FootstepSets.RecordCache.Count > 0 ? 1 : 0;
            count += StoryManagerBranchNodes.RecordCache.Count > 0 ? 1 : 0;
            count += StoryManagerQuestNodes.RecordCache.Count > 0 ? 1 : 0;
            count += StoryManagerEventNodes.RecordCache.Count > 0 ? 1 : 0;
            count += DialogBranches.RecordCache.Count > 0 ? 1 : 0;
            count += MusicTracks.RecordCache.Count > 0 ? 1 : 0;
            count += DialogViews.RecordCache.Count > 0 ? 1 : 0;
            count += WordsOfPower.RecordCache.Count > 0 ? 1 : 0;
            count += Shouts.RecordCache.Count > 0 ? 1 : 0;
            count += EquipTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Relationships.RecordCache.Count > 0 ? 1 : 0;
            count += Scenes.RecordCache.Count > 0 ? 1 : 0;
            count += AssociationTypes.RecordCache.Count > 0 ? 1 : 0;
            count += Outfits.RecordCache.Count > 0 ? 1 : 0;
            count += ArtObjects.RecordCache.Count > 0 ? 1 : 0;
            count += MaterialObjects.RecordCache.Count > 0 ? 1 : 0;
            count += MovementTypes.RecordCache.Count > 0 ? 1 : 0;
            count += SoundDescriptors.RecordCache.Count > 0 ? 1 : 0;
            count += DualCastData.RecordCache.Count > 0 ? 1 : 0;
            count += SoundCategories.RecordCache.Count > 0 ? 1 : 0;
            count += SoundOutputModels.RecordCache.Count > 0 ? 1 : 0;
            count += CollisionLayers.RecordCache.Count > 0 ? 1 : 0;
            count += Colors.RecordCache.Count > 0 ? 1 : 0;
            count += ReverbParameters.RecordCache.Count > 0 ? 1 : 0;
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<int> setter);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type, throwIfUnknown);
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static SkyrimMod CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            return CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null);
        }

        public static SkyrimMod CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            GroupMask? importMask = null)
        {
            var ret = new SkyrimMod(modKey);
            ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        public static SkyrimMod CreateFromBinary(
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim));
                frame.MetaData.Parallel = parallel;
                if (reader.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = reader.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, Mutagen.Bethesda.Internals.Constants.LocalizedFlag))
                {
                    frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(path, stringsParam, modKey);
                }
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static SkyrimMod CreateFromBinary(
            string path,
            ErrorMaskBuilder? errorMask,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim));
                frame.MetaData.Parallel = parallel;
                if (reader.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = reader.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, Mutagen.Bethesda.Internals.Constants.LocalizedFlag))
                {
                    frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(path, stringsParam, modKey);
                }
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null);
            }
        }

        public static SkyrimMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static SkyrimMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                return CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null);
            }
        }

        #endregion

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            ModKey modKey,
            IStringsFolderLookup? stringsLookup = null)
        {
            var meta = new ParsingBundle(GameMode.Skyrim);
            meta.RecordInfoCache = new RecordInfoCache(() => new MutagenMemoryReadStream(bytes, meta));
            meta.StringsLookup = stringsLookup;
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: new MutagenMemoryReadStream(
                    data: bytes,
                    metaData: meta),
                modKey: modKey,
                shouldDispose: false);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            string path,
            ModKey? modKeyOverride = null,
            StringsReadParameters? stringsParam = null)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                path: path,
                modKeyOverride ?? ModKey.Factory(Path.GetFileName(path)),
                stringsParam: stringsParam);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: stream,
                modKey: modKey,
                shouldDispose: false);
        }

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SkyrimMod GetNew()
        {
            return new SkyrimMod();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkyrimMod :
        ISkyrimModGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<ISkyrimMod>,
        IMod
    {
        new ModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Keyword> Keywords { get; }
        new Group<LocationReferenceType> LocationReferenceTypes { get; }
        new Group<ActionRecord> Actions { get; }
        new Group<TextureSet> TextureSets { get; }
        new Group<Global> Globals { get; }
        new Group<Class> Classes { get; }
        new Group<Faction> Factions { get; }
        new Group<HeadPart> HeadParts { get; }
        new Group<Hair> Hairs { get; }
        new Group<Eyes> Eyes { get; }
        new Group<Race> Races { get; }
        new Group<SoundMarker> SoundMarkers { get; }
        new Group<AcousticSpace> AcousticSpaces { get; }
        new Group<MagicEffect> MagicEffects { get; }
        new Group<LandscapeTexture> LandscapeTextures { get; }
        new Group<ObjectEffect> ObjectEffects { get; }
        new Group<Spell> Spells { get; }
        new Group<Scroll> Scrolls { get; }
        new Group<Activator> Activators { get; }
        new Group<TalkingActivator> TalkingActivators { get; }
        new Group<Armor> Armors { get; }
        new Group<Book> Books { get; }
        new Group<Container> Containers { get; }
        new Group<Door> Doors { get; }
        new Group<Ingredient> Ingredients { get; }
        new Group<Light> Lights { get; }
        new Group<MiscItem> MiscItems { get; }
        new Group<AlchemicalApparatus> AlchemicalApparatuses { get; }
        new Group<Static> Statics { get; }
        new Group<MoveableStatic> MoveableStatics { get; }
        new Group<Grass> Grasses { get; }
        new Group<Tree> Trees { get; }
        new Group<Flora> Florae { get; }
        new Group<Furniture> Furniture { get; }
        new Group<Weapon> Weapons { get; }
        new Group<Ammunition> Ammunitions { get; }
        new Group<Npc> Npcs { get; }
        new Group<LeveledNpc> LeveledNpcs { get; }
        new Group<Key> Keys { get; }
        new Group<Ingestible> Ingestibles { get; }
        new Group<IdleMarker> IdleMarkers { get; }
        new Group<ConstructibleObject> ConstructibleObjects { get; }
        new Group<Projectile> Projectiles { get; }
        new Group<Hazard> Hazards { get; }
        new Group<SoulGem> SoulGems { get; }
        new Group<LeveledItem> LeveledItems { get; }
        new Group<Weather> Weathers { get; }
        new Group<Climate> Climates { get; }
        new Group<ShaderParticleGeometry> ShaderParticleGeometries { get; }
        new Group<VisualEffect> VisualEffects { get; }
        new Group<Region> Regions { get; }
        new Group<NavigationMeshInfoMap> NavigationMeshInfoMaps { get; }
        new ListGroup<CellBlock> Cells { get; }
        new Group<Worldspace> Worldspaces { get; }
        new Group<DialogTopic> DialogTopics { get; }
        new Group<Quest> Quests { get; }
        new Group<IdleAnimation> IdleAnimations { get; }
        new Group<Package> Packages { get; }
        new Group<CombatStyle> CombatStyles { get; }
        new Group<LoadScreen> LoadScreens { get; }
        new Group<LeveledSpell> LeveledSpells { get; }
        new Group<AnimatedObject> AnimatedObjects { get; }
        new Group<Water> Waters { get; }
        new Group<EffectShader> EffectShaders { get; }
        new Group<Explosion> Explosions { get; }
        new Group<Debris> Debris { get; }
        new Group<ImageSpace> ImageSpaces { get; }
        new Group<ImageSpaceAdapter> ImageSpaceAdapters { get; }
        new Group<FormList> FormLists { get; }
        new Group<Perk> Perks { get; }
        new Group<BodyPartData> BodyParts { get; }
        new Group<AddonNode> AddonNodes { get; }
        new Group<ActorValueInformation> ActorValueInformation { get; }
        new Group<CameraShot> CameraShots { get; }
        new Group<CameraPath> CameraPaths { get; }
        new Group<VoiceType> VoiceTypes { get; }
        new Group<MaterialType> MaterialTypes { get; }
        new Group<Impact> Impacts { get; }
        new Group<ImpactDataSet> ImpactDataSets { get; }
        new Group<ArmorAddon> ArmorAddons { get; }
        new Group<EncounterZone> EncounterZones { get; }
        new Group<Location> Locations { get; }
        new Group<Message> Messages { get; }
        new Group<DefaultObjectManager> DefaultObjectManagers { get; }
        new Group<LightingTemplate> LightingTemplates { get; }
        new Group<MusicType> MusicTypes { get; }
        new Group<Footstep> Footsteps { get; }
        new Group<FootstepSet> FootstepSets { get; }
        new Group<StoryManagerBranchNode> StoryManagerBranchNodes { get; }
        new Group<StoryManagerQuestNode> StoryManagerQuestNodes { get; }
        new Group<StoryManagerEventNode> StoryManagerEventNodes { get; }
        new Group<DialogBranch> DialogBranches { get; }
        new Group<MusicTrack> MusicTracks { get; }
        new Group<DialogView> DialogViews { get; }
        new Group<WordOfPower> WordsOfPower { get; }
        new Group<Shout> Shouts { get; }
        new Group<EquipType> EquipTypes { get; }
        new Group<Relationship> Relationships { get; }
        new Group<Scene> Scenes { get; }
        new Group<AssociationType> AssociationTypes { get; }
        new Group<Outfit> Outfits { get; }
        new Group<ArtObject> ArtObjects { get; }
        new Group<MaterialObject> MaterialObjects { get; }
        new Group<MovementType> MovementTypes { get; }
        new Group<SoundDescriptor> SoundDescriptors { get; }
        new Group<DualCastData> DualCastData { get; }
        new Group<SoundCategory> SoundCategories { get; }
        new Group<SoundOutputModel> SoundOutputModels { get; }
        new Group<CollisionLayer> CollisionLayers { get; }
        new Group<ColorRecord> Colors { get; }
        new Group<ReverbParameters> ReverbParameters { get; }
    }

    public partial interface ISkyrimModGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<ISkyrimModGetter>,
        IXmlItem,
        IModGetter,
        ILinkedFormKeyContainer
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => SkyrimMod_Registration.Instance;
        IModHeaderGetter ModHeader { get; }
        IGroupGetter<IGameSettingGetter> GameSettings { get; }
        IGroupGetter<IKeywordGetter> Keywords { get; }
        IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IGroupGetter<IActionRecordGetter> Actions { get; }
        IGroupGetter<ITextureSetGetter> TextureSets { get; }
        IGroupGetter<IGlobalGetter> Globals { get; }
        IGroupGetter<IClassGetter> Classes { get; }
        IGroupGetter<IFactionGetter> Factions { get; }
        IGroupGetter<IHeadPartGetter> HeadParts { get; }
        IGroupGetter<IHairGetter> Hairs { get; }
        IGroupGetter<IEyesGetter> Eyes { get; }
        IGroupGetter<IRaceGetter> Races { get; }
        IGroupGetter<ISoundMarkerGetter> SoundMarkers { get; }
        IGroupGetter<IAcousticSpaceGetter> AcousticSpaces { get; }
        IGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IGroupGetter<ILandscapeTextureGetter> LandscapeTextures { get; }
        IGroupGetter<IObjectEffectGetter> ObjectEffects { get; }
        IGroupGetter<ISpellGetter> Spells { get; }
        IGroupGetter<IScrollGetter> Scrolls { get; }
        IGroupGetter<IActivatorGetter> Activators { get; }
        IGroupGetter<ITalkingActivatorGetter> TalkingActivators { get; }
        IGroupGetter<IArmorGetter> Armors { get; }
        IGroupGetter<IBookGetter> Books { get; }
        IGroupGetter<IContainerGetter> Containers { get; }
        IGroupGetter<IDoorGetter> Doors { get; }
        IGroupGetter<IIngredientGetter> Ingredients { get; }
        IGroupGetter<ILightGetter> Lights { get; }
        IGroupGetter<IMiscItemGetter> MiscItems { get; }
        IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses { get; }
        IGroupGetter<IStaticGetter> Statics { get; }
        IGroupGetter<IMoveableStaticGetter> MoveableStatics { get; }
        IGroupGetter<IGrassGetter> Grasses { get; }
        IGroupGetter<ITreeGetter> Trees { get; }
        IGroupGetter<IFloraGetter> Florae { get; }
        IGroupGetter<IFurnitureGetter> Furniture { get; }
        IGroupGetter<IWeaponGetter> Weapons { get; }
        IGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IGroupGetter<INpcGetter> Npcs { get; }
        IGroupGetter<ILeveledNpcGetter> LeveledNpcs { get; }
        IGroupGetter<IKeyGetter> Keys { get; }
        IGroupGetter<IIngestibleGetter> Ingestibles { get; }
        IGroupGetter<IIdleMarkerGetter> IdleMarkers { get; }
        IGroupGetter<IConstructibleObjectGetter> ConstructibleObjects { get; }
        IGroupGetter<IProjectileGetter> Projectiles { get; }
        IGroupGetter<IHazardGetter> Hazards { get; }
        IGroupGetter<ISoulGemGetter> SoulGems { get; }
        IGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        IGroupGetter<IWeatherGetter> Weathers { get; }
        IGroupGetter<IClimateGetter> Climates { get; }
        IGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries { get; }
        IGroupGetter<IVisualEffectGetter> VisualEffects { get; }
        IGroupGetter<IRegionGetter> Regions { get; }
        IGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps { get; }
        IListGroupGetter<ICellBlockGetter> Cells { get; }
        IGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        IGroupGetter<IDialogTopicGetter> DialogTopics { get; }
        IGroupGetter<IQuestGetter> Quests { get; }
        IGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        IGroupGetter<IPackageGetter> Packages { get; }
        IGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        IGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        IGroupGetter<ILeveledSpellGetter> LeveledSpells { get; }
        IGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        IGroupGetter<IWaterGetter> Waters { get; }
        IGroupGetter<IEffectShaderGetter> EffectShaders { get; }
        IGroupGetter<IExplosionGetter> Explosions { get; }
        IGroupGetter<IDebrisGetter> Debris { get; }
        IGroupGetter<IImageSpaceGetter> ImageSpaces { get; }
        IGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters { get; }
        IGroupGetter<IFormListGetter> FormLists { get; }
        IGroupGetter<IPerkGetter> Perks { get; }
        IGroupGetter<IBodyPartDataGetter> BodyParts { get; }
        IGroupGetter<IAddonNodeGetter> AddonNodes { get; }
        IGroupGetter<IActorValueInformationGetter> ActorValueInformation { get; }
        IGroupGetter<ICameraShotGetter> CameraShots { get; }
        IGroupGetter<ICameraPathGetter> CameraPaths { get; }
        IGroupGetter<IVoiceTypeGetter> VoiceTypes { get; }
        IGroupGetter<IMaterialTypeGetter> MaterialTypes { get; }
        IGroupGetter<IImpactGetter> Impacts { get; }
        IGroupGetter<IImpactDataSetGetter> ImpactDataSets { get; }
        IGroupGetter<IArmorAddonGetter> ArmorAddons { get; }
        IGroupGetter<IEncounterZoneGetter> EncounterZones { get; }
        IGroupGetter<ILocationGetter> Locations { get; }
        IGroupGetter<IMessageGetter> Messages { get; }
        IGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers { get; }
        IGroupGetter<ILightingTemplateGetter> LightingTemplates { get; }
        IGroupGetter<IMusicTypeGetter> MusicTypes { get; }
        IGroupGetter<IFootstepGetter> Footsteps { get; }
        IGroupGetter<IFootstepSetGetter> FootstepSets { get; }
        IGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes { get; }
        IGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes { get; }
        IGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes { get; }
        IGroupGetter<IDialogBranchGetter> DialogBranches { get; }
        IGroupGetter<IMusicTrackGetter> MusicTracks { get; }
        IGroupGetter<IDialogViewGetter> DialogViews { get; }
        IGroupGetter<IWordOfPowerGetter> WordsOfPower { get; }
        IGroupGetter<IShoutGetter> Shouts { get; }
        IGroupGetter<IEquipTypeGetter> EquipTypes { get; }
        IGroupGetter<IRelationshipGetter> Relationships { get; }
        IGroupGetter<ISceneGetter> Scenes { get; }
        IGroupGetter<IAssociationTypeGetter> AssociationTypes { get; }
        IGroupGetter<IOutfitGetter> Outfits { get; }
        IGroupGetter<IArtObjectGetter> ArtObjects { get; }
        IGroupGetter<IMaterialObjectGetter> MaterialObjects { get; }
        IGroupGetter<IMovementTypeGetter> MovementTypes { get; }
        IGroupGetter<ISoundDescriptorGetter> SoundDescriptors { get; }
        IGroupGetter<IDualCastDataGetter> DualCastData { get; }
        IGroupGetter<ISoundCategoryGetter> SoundCategories { get; }
        IGroupGetter<ISoundOutputModelGetter> SoundOutputModels { get; }
        IGroupGetter<ICollisionLayerGetter> CollisionLayers { get; }
        IGroupGetter<IColorRecordGetter> Colors { get; }
        IGroupGetter<IReverbParametersGetter> ReverbParameters { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SkyrimModMixIn
    {
        public static void Clear(this ISkyrimMod item)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkyrimMod.Mask<bool> GetEqualsMask(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkyrimModGetter item,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkyrimModGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkyrimModGetter item,
            SkyrimMod.Mask<bool?> checkMask)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkyrimMod.Mask<bool> GetHasBeenSetMask(this ISkyrimModGetter item)
        {
            var ret = new SkyrimMod.Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            string path,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkyrimMod item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        public static IReadOnlyCache<T, FormKey> GetGroupGetter<T>(this ISkyrimModGetter obj)
            where T : IMajorRecordCommonGetter
        {
            return (IReadOnlyCache<T, FormKey>)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static ICache<T, FormKey> GetGroup<T>(this ISkyrimMod obj)
            where T : IMajorRecordCommon
        {
            return (ICache<T, FormKey>)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup<T>(obj: obj);
        }

        public static void WriteToBinaryParallel(
            this ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null)
        {
            SkyrimModCommon.WriteParallel(
                item: item,
                stream: stream,
                param: param ?? BinaryWriteParameters.Default,
                modKey: item.ModKey);
        }

        public static void WriteToBinaryParallel(
            this ISkyrimModGetter item,
            string path,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            bool disposeStrings = param.StringsWriter == null;
            param.StringsWriter ??= EnumExt.HasFlag((int)item.ModHeader.Flags, Mutagen.Bethesda.Internals.Constants.LocalizedFlag) ? new StringsWriter(modKey, Path.Combine(Path.GetDirectoryName(path), "Strings")) : null;
            using (var stream = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                SkyrimModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    param: param,
                    modKey: modKey);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this ISkyrimModGetter obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimModGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            this ISkyrimModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommonGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this ISkyrimMod obj)
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimMod obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(
            this ISkyrimMod obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordCommon)m);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            GroupMask? importMask = null)
        {
            CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            GroupMask? importMask = null)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            string path,
            ModKey? modKeyOverride = null,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var modKey = modKeyOverride ?? ModKey.Factory(Path.GetFileName(path));
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim));
                frame.MetaData.Parallel = parallel;
                if (reader.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = reader.GetInt32(offset: 8);
                if (EnumExt.HasFlag(flags, Mutagen.Bethesda.Internals.Constants.LocalizedFlag))
                {
                    frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(path, stringsParam, modKey);
                }
                CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            Stream stream,
            ModKey modKey,
            RecordInfoCache infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                frame.MetaData.RecordInfoCache = infoCache;
                frame.MetaData.Parallel = parallel;
                CopyInFromBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SkyrimMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        LocationReferenceTypes = 3,
        Actions = 4,
        TextureSets = 5,
        Globals = 6,
        Classes = 7,
        Factions = 8,
        HeadParts = 9,
        Hairs = 10,
        Eyes = 11,
        Races = 12,
        SoundMarkers = 13,
        AcousticSpaces = 14,
        MagicEffects = 15,
        LandscapeTextures = 16,
        ObjectEffects = 17,
        Spells = 18,
        Scrolls = 19,
        Activators = 20,
        TalkingActivators = 21,
        Armors = 22,
        Books = 23,
        Containers = 24,
        Doors = 25,
        Ingredients = 26,
        Lights = 27,
        MiscItems = 28,
        AlchemicalApparatuses = 29,
        Statics = 30,
        MoveableStatics = 31,
        Grasses = 32,
        Trees = 33,
        Florae = 34,
        Furniture = 35,
        Weapons = 36,
        Ammunitions = 37,
        Npcs = 38,
        LeveledNpcs = 39,
        Keys = 40,
        Ingestibles = 41,
        IdleMarkers = 42,
        ConstructibleObjects = 43,
        Projectiles = 44,
        Hazards = 45,
        SoulGems = 46,
        LeveledItems = 47,
        Weathers = 48,
        Climates = 49,
        ShaderParticleGeometries = 50,
        VisualEffects = 51,
        Regions = 52,
        NavigationMeshInfoMaps = 53,
        Cells = 54,
        Worldspaces = 55,
        DialogTopics = 56,
        Quests = 57,
        IdleAnimations = 58,
        Packages = 59,
        CombatStyles = 60,
        LoadScreens = 61,
        LeveledSpells = 62,
        AnimatedObjects = 63,
        Waters = 64,
        EffectShaders = 65,
        Explosions = 66,
        Debris = 67,
        ImageSpaces = 68,
        ImageSpaceAdapters = 69,
        FormLists = 70,
        Perks = 71,
        BodyParts = 72,
        AddonNodes = 73,
        ActorValueInformation = 74,
        CameraShots = 75,
        CameraPaths = 76,
        VoiceTypes = 77,
        MaterialTypes = 78,
        Impacts = 79,
        ImpactDataSets = 80,
        ArmorAddons = 81,
        EncounterZones = 82,
        Locations = 83,
        Messages = 84,
        DefaultObjectManagers = 85,
        LightingTemplates = 86,
        MusicTypes = 87,
        Footsteps = 88,
        FootstepSets = 89,
        StoryManagerBranchNodes = 90,
        StoryManagerQuestNodes = 91,
        StoryManagerEventNodes = 92,
        DialogBranches = 93,
        MusicTracks = 94,
        DialogViews = 95,
        WordsOfPower = 96,
        Shouts = 97,
        EquipTypes = 98,
        Relationships = 99,
        Scenes = 100,
        AssociationTypes = 101,
        Outfits = 102,
        ArtObjects = 103,
        MaterialObjects = 104,
        MovementTypes = 105,
        SoundDescriptors = 106,
        DualCastData = 107,
        SoundCategories = 108,
        SoundOutputModels = 109,
        CollisionLayers = 110,
        Colors = 111,
        ReverbParameters = 112,
    }
    #endregion

    #region Registration
    public partial class SkyrimMod_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMod_Registration Instance = new SkyrimMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 66,
            version: 0);

        public const string GUID = "9dcb1a8f-db0a-44bd-9a30-9427a9350e7a";

        public const ushort AdditionalFieldCount = 113;

        public const ushort FieldCount = 113;

        public static readonly Type MaskType = typeof(SkyrimMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMod.ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMod);

        public static readonly Type GetterType = typeof(ISkyrimModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMod";

        public const string Name = "SkyrimMod";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODHEADER":
                    return (ushort)SkyrimMod_FieldIndex.ModHeader;
                case "GAMESETTINGS":
                    return (ushort)SkyrimMod_FieldIndex.GameSettings;
                case "KEYWORDS":
                    return (ushort)SkyrimMod_FieldIndex.Keywords;
                case "LOCATIONREFERENCETYPES":
                    return (ushort)SkyrimMod_FieldIndex.LocationReferenceTypes;
                case "ACTIONS":
                    return (ushort)SkyrimMod_FieldIndex.Actions;
                case "TEXTURESETS":
                    return (ushort)SkyrimMod_FieldIndex.TextureSets;
                case "GLOBALS":
                    return (ushort)SkyrimMod_FieldIndex.Globals;
                case "CLASSES":
                    return (ushort)SkyrimMod_FieldIndex.Classes;
                case "FACTIONS":
                    return (ushort)SkyrimMod_FieldIndex.Factions;
                case "HEADPARTS":
                    return (ushort)SkyrimMod_FieldIndex.HeadParts;
                case "HAIRS":
                    return (ushort)SkyrimMod_FieldIndex.Hairs;
                case "EYES":
                    return (ushort)SkyrimMod_FieldIndex.Eyes;
                case "RACES":
                    return (ushort)SkyrimMod_FieldIndex.Races;
                case "SOUNDMARKERS":
                    return (ushort)SkyrimMod_FieldIndex.SoundMarkers;
                case "ACOUSTICSPACES":
                    return (ushort)SkyrimMod_FieldIndex.AcousticSpaces;
                case "MAGICEFFECTS":
                    return (ushort)SkyrimMod_FieldIndex.MagicEffects;
                case "LANDSCAPETEXTURES":
                    return (ushort)SkyrimMod_FieldIndex.LandscapeTextures;
                case "OBJECTEFFECTS":
                    return (ushort)SkyrimMod_FieldIndex.ObjectEffects;
                case "SPELLS":
                    return (ushort)SkyrimMod_FieldIndex.Spells;
                case "SCROLLS":
                    return (ushort)SkyrimMod_FieldIndex.Scrolls;
                case "ACTIVATORS":
                    return (ushort)SkyrimMod_FieldIndex.Activators;
                case "TALKINGACTIVATORS":
                    return (ushort)SkyrimMod_FieldIndex.TalkingActivators;
                case "ARMORS":
                    return (ushort)SkyrimMod_FieldIndex.Armors;
                case "BOOKS":
                    return (ushort)SkyrimMod_FieldIndex.Books;
                case "CONTAINERS":
                    return (ushort)SkyrimMod_FieldIndex.Containers;
                case "DOORS":
                    return (ushort)SkyrimMod_FieldIndex.Doors;
                case "INGREDIENTS":
                    return (ushort)SkyrimMod_FieldIndex.Ingredients;
                case "LIGHTS":
                    return (ushort)SkyrimMod_FieldIndex.Lights;
                case "MISCITEMS":
                    return (ushort)SkyrimMod_FieldIndex.MiscItems;
                case "ALCHEMICALAPPARATUSES":
                    return (ushort)SkyrimMod_FieldIndex.AlchemicalApparatuses;
                case "STATICS":
                    return (ushort)SkyrimMod_FieldIndex.Statics;
                case "MOVEABLESTATICS":
                    return (ushort)SkyrimMod_FieldIndex.MoveableStatics;
                case "GRASSES":
                    return (ushort)SkyrimMod_FieldIndex.Grasses;
                case "TREES":
                    return (ushort)SkyrimMod_FieldIndex.Trees;
                case "FLORAE":
                    return (ushort)SkyrimMod_FieldIndex.Florae;
                case "FURNITURE":
                    return (ushort)SkyrimMod_FieldIndex.Furniture;
                case "WEAPONS":
                    return (ushort)SkyrimMod_FieldIndex.Weapons;
                case "AMMUNITIONS":
                    return (ushort)SkyrimMod_FieldIndex.Ammunitions;
                case "NPCS":
                    return (ushort)SkyrimMod_FieldIndex.Npcs;
                case "LEVELEDNPCS":
                    return (ushort)SkyrimMod_FieldIndex.LeveledNpcs;
                case "KEYS":
                    return (ushort)SkyrimMod_FieldIndex.Keys;
                case "INGESTIBLES":
                    return (ushort)SkyrimMod_FieldIndex.Ingestibles;
                case "IDLEMARKERS":
                    return (ushort)SkyrimMod_FieldIndex.IdleMarkers;
                case "CONSTRUCTIBLEOBJECTS":
                    return (ushort)SkyrimMod_FieldIndex.ConstructibleObjects;
                case "PROJECTILES":
                    return (ushort)SkyrimMod_FieldIndex.Projectiles;
                case "HAZARDS":
                    return (ushort)SkyrimMod_FieldIndex.Hazards;
                case "SOULGEMS":
                    return (ushort)SkyrimMod_FieldIndex.SoulGems;
                case "LEVELEDITEMS":
                    return (ushort)SkyrimMod_FieldIndex.LeveledItems;
                case "WEATHERS":
                    return (ushort)SkyrimMod_FieldIndex.Weathers;
                case "CLIMATES":
                    return (ushort)SkyrimMod_FieldIndex.Climates;
                case "SHADERPARTICLEGEOMETRIES":
                    return (ushort)SkyrimMod_FieldIndex.ShaderParticleGeometries;
                case "VISUALEFFECTS":
                    return (ushort)SkyrimMod_FieldIndex.VisualEffects;
                case "REGIONS":
                    return (ushort)SkyrimMod_FieldIndex.Regions;
                case "NAVIGATIONMESHINFOMAPS":
                    return (ushort)SkyrimMod_FieldIndex.NavigationMeshInfoMaps;
                case "CELLS":
                    return (ushort)SkyrimMod_FieldIndex.Cells;
                case "WORLDSPACES":
                    return (ushort)SkyrimMod_FieldIndex.Worldspaces;
                case "DIALOGTOPICS":
                    return (ushort)SkyrimMod_FieldIndex.DialogTopics;
                case "QUESTS":
                    return (ushort)SkyrimMod_FieldIndex.Quests;
                case "IDLEANIMATIONS":
                    return (ushort)SkyrimMod_FieldIndex.IdleAnimations;
                case "PACKAGES":
                    return (ushort)SkyrimMod_FieldIndex.Packages;
                case "COMBATSTYLES":
                    return (ushort)SkyrimMod_FieldIndex.CombatStyles;
                case "LOADSCREENS":
                    return (ushort)SkyrimMod_FieldIndex.LoadScreens;
                case "LEVELEDSPELLS":
                    return (ushort)SkyrimMod_FieldIndex.LeveledSpells;
                case "ANIMATEDOBJECTS":
                    return (ushort)SkyrimMod_FieldIndex.AnimatedObjects;
                case "WATERS":
                    return (ushort)SkyrimMod_FieldIndex.Waters;
                case "EFFECTSHADERS":
                    return (ushort)SkyrimMod_FieldIndex.EffectShaders;
                case "EXPLOSIONS":
                    return (ushort)SkyrimMod_FieldIndex.Explosions;
                case "DEBRIS":
                    return (ushort)SkyrimMod_FieldIndex.Debris;
                case "IMAGESPACES":
                    return (ushort)SkyrimMod_FieldIndex.ImageSpaces;
                case "IMAGESPACEADAPTERS":
                    return (ushort)SkyrimMod_FieldIndex.ImageSpaceAdapters;
                case "FORMLISTS":
                    return (ushort)SkyrimMod_FieldIndex.FormLists;
                case "PERKS":
                    return (ushort)SkyrimMod_FieldIndex.Perks;
                case "BODYPARTS":
                    return (ushort)SkyrimMod_FieldIndex.BodyParts;
                case "ADDONNODES":
                    return (ushort)SkyrimMod_FieldIndex.AddonNodes;
                case "ACTORVALUEINFORMATION":
                    return (ushort)SkyrimMod_FieldIndex.ActorValueInformation;
                case "CAMERASHOTS":
                    return (ushort)SkyrimMod_FieldIndex.CameraShots;
                case "CAMERAPATHS":
                    return (ushort)SkyrimMod_FieldIndex.CameraPaths;
                case "VOICETYPES":
                    return (ushort)SkyrimMod_FieldIndex.VoiceTypes;
                case "MATERIALTYPES":
                    return (ushort)SkyrimMod_FieldIndex.MaterialTypes;
                case "IMPACTS":
                    return (ushort)SkyrimMod_FieldIndex.Impacts;
                case "IMPACTDATASETS":
                    return (ushort)SkyrimMod_FieldIndex.ImpactDataSets;
                case "ARMORADDONS":
                    return (ushort)SkyrimMod_FieldIndex.ArmorAddons;
                case "ENCOUNTERZONES":
                    return (ushort)SkyrimMod_FieldIndex.EncounterZones;
                case "LOCATIONS":
                    return (ushort)SkyrimMod_FieldIndex.Locations;
                case "MESSAGES":
                    return (ushort)SkyrimMod_FieldIndex.Messages;
                case "DEFAULTOBJECTMANAGERS":
                    return (ushort)SkyrimMod_FieldIndex.DefaultObjectManagers;
                case "LIGHTINGTEMPLATES":
                    return (ushort)SkyrimMod_FieldIndex.LightingTemplates;
                case "MUSICTYPES":
                    return (ushort)SkyrimMod_FieldIndex.MusicTypes;
                case "FOOTSTEPS":
                    return (ushort)SkyrimMod_FieldIndex.Footsteps;
                case "FOOTSTEPSETS":
                    return (ushort)SkyrimMod_FieldIndex.FootstepSets;
                case "STORYMANAGERBRANCHNODES":
                    return (ushort)SkyrimMod_FieldIndex.StoryManagerBranchNodes;
                case "STORYMANAGERQUESTNODES":
                    return (ushort)SkyrimMod_FieldIndex.StoryManagerQuestNodes;
                case "STORYMANAGEREVENTNODES":
                    return (ushort)SkyrimMod_FieldIndex.StoryManagerEventNodes;
                case "DIALOGBRANCHES":
                    return (ushort)SkyrimMod_FieldIndex.DialogBranches;
                case "MUSICTRACKS":
                    return (ushort)SkyrimMod_FieldIndex.MusicTracks;
                case "DIALOGVIEWS":
                    return (ushort)SkyrimMod_FieldIndex.DialogViews;
                case "WORDSOFPOWER":
                    return (ushort)SkyrimMod_FieldIndex.WordsOfPower;
                case "SHOUTS":
                    return (ushort)SkyrimMod_FieldIndex.Shouts;
                case "EQUIPTYPES":
                    return (ushort)SkyrimMod_FieldIndex.EquipTypes;
                case "RELATIONSHIPS":
                    return (ushort)SkyrimMod_FieldIndex.Relationships;
                case "SCENES":
                    return (ushort)SkyrimMod_FieldIndex.Scenes;
                case "ASSOCIATIONTYPES":
                    return (ushort)SkyrimMod_FieldIndex.AssociationTypes;
                case "OUTFITS":
                    return (ushort)SkyrimMod_FieldIndex.Outfits;
                case "ARTOBJECTS":
                    return (ushort)SkyrimMod_FieldIndex.ArtObjects;
                case "MATERIALOBJECTS":
                    return (ushort)SkyrimMod_FieldIndex.MaterialObjects;
                case "MOVEMENTTYPES":
                    return (ushort)SkyrimMod_FieldIndex.MovementTypes;
                case "SOUNDDESCRIPTORS":
                    return (ushort)SkyrimMod_FieldIndex.SoundDescriptors;
                case "DUALCASTDATA":
                    return (ushort)SkyrimMod_FieldIndex.DualCastData;
                case "SOUNDCATEGORIES":
                    return (ushort)SkyrimMod_FieldIndex.SoundCategories;
                case "SOUNDOUTPUTMODELS":
                    return (ushort)SkyrimMod_FieldIndex.SoundOutputModels;
                case "COLLISIONLAYERS":
                    return (ushort)SkyrimMod_FieldIndex.CollisionLayers;
                case "COLORS":
                    return (ushort)SkyrimMod_FieldIndex.Colors;
                case "REVERBPARAMETERS":
                    return (ushort)SkyrimMod_FieldIndex.ReverbParameters;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                case SkyrimMod_FieldIndex.Weathers:
                case SkyrimMod_FieldIndex.Climates:
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                case SkyrimMod_FieldIndex.VisualEffects:
                case SkyrimMod_FieldIndex.Regions:
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                case SkyrimMod_FieldIndex.Cells:
                case SkyrimMod_FieldIndex.Worldspaces:
                case SkyrimMod_FieldIndex.DialogTopics:
                case SkyrimMod_FieldIndex.Quests:
                case SkyrimMod_FieldIndex.IdleAnimations:
                case SkyrimMod_FieldIndex.Packages:
                case SkyrimMod_FieldIndex.CombatStyles:
                case SkyrimMod_FieldIndex.LoadScreens:
                case SkyrimMod_FieldIndex.LeveledSpells:
                case SkyrimMod_FieldIndex.AnimatedObjects:
                case SkyrimMod_FieldIndex.Waters:
                case SkyrimMod_FieldIndex.EffectShaders:
                case SkyrimMod_FieldIndex.Explosions:
                case SkyrimMod_FieldIndex.Debris:
                case SkyrimMod_FieldIndex.ImageSpaces:
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                case SkyrimMod_FieldIndex.FormLists:
                case SkyrimMod_FieldIndex.Perks:
                case SkyrimMod_FieldIndex.BodyParts:
                case SkyrimMod_FieldIndex.AddonNodes:
                case SkyrimMod_FieldIndex.ActorValueInformation:
                case SkyrimMod_FieldIndex.CameraShots:
                case SkyrimMod_FieldIndex.CameraPaths:
                case SkyrimMod_FieldIndex.VoiceTypes:
                case SkyrimMod_FieldIndex.MaterialTypes:
                case SkyrimMod_FieldIndex.Impacts:
                case SkyrimMod_FieldIndex.ImpactDataSets:
                case SkyrimMod_FieldIndex.ArmorAddons:
                case SkyrimMod_FieldIndex.EncounterZones:
                case SkyrimMod_FieldIndex.Locations:
                case SkyrimMod_FieldIndex.Messages:
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                case SkyrimMod_FieldIndex.LightingTemplates:
                case SkyrimMod_FieldIndex.MusicTypes:
                case SkyrimMod_FieldIndex.Footsteps:
                case SkyrimMod_FieldIndex.FootstepSets:
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                case SkyrimMod_FieldIndex.DialogBranches:
                case SkyrimMod_FieldIndex.MusicTracks:
                case SkyrimMod_FieldIndex.DialogViews:
                case SkyrimMod_FieldIndex.WordsOfPower:
                case SkyrimMod_FieldIndex.Shouts:
                case SkyrimMod_FieldIndex.EquipTypes:
                case SkyrimMod_FieldIndex.Relationships:
                case SkyrimMod_FieldIndex.Scenes:
                case SkyrimMod_FieldIndex.AssociationTypes:
                case SkyrimMod_FieldIndex.Outfits:
                case SkyrimMod_FieldIndex.ArtObjects:
                case SkyrimMod_FieldIndex.MaterialObjects:
                case SkyrimMod_FieldIndex.MovementTypes:
                case SkyrimMod_FieldIndex.SoundDescriptors:
                case SkyrimMod_FieldIndex.DualCastData:
                case SkyrimMod_FieldIndex.SoundCategories:
                case SkyrimMod_FieldIndex.SoundOutputModels:
                case SkyrimMod_FieldIndex.CollisionLayers:
                case SkyrimMod_FieldIndex.Colors:
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                case SkyrimMod_FieldIndex.Weathers:
                case SkyrimMod_FieldIndex.Climates:
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                case SkyrimMod_FieldIndex.VisualEffects:
                case SkyrimMod_FieldIndex.Regions:
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                case SkyrimMod_FieldIndex.Cells:
                case SkyrimMod_FieldIndex.Worldspaces:
                case SkyrimMod_FieldIndex.DialogTopics:
                case SkyrimMod_FieldIndex.Quests:
                case SkyrimMod_FieldIndex.IdleAnimations:
                case SkyrimMod_FieldIndex.Packages:
                case SkyrimMod_FieldIndex.CombatStyles:
                case SkyrimMod_FieldIndex.LoadScreens:
                case SkyrimMod_FieldIndex.LeveledSpells:
                case SkyrimMod_FieldIndex.AnimatedObjects:
                case SkyrimMod_FieldIndex.Waters:
                case SkyrimMod_FieldIndex.EffectShaders:
                case SkyrimMod_FieldIndex.Explosions:
                case SkyrimMod_FieldIndex.Debris:
                case SkyrimMod_FieldIndex.ImageSpaces:
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                case SkyrimMod_FieldIndex.FormLists:
                case SkyrimMod_FieldIndex.Perks:
                case SkyrimMod_FieldIndex.BodyParts:
                case SkyrimMod_FieldIndex.AddonNodes:
                case SkyrimMod_FieldIndex.ActorValueInformation:
                case SkyrimMod_FieldIndex.CameraShots:
                case SkyrimMod_FieldIndex.CameraPaths:
                case SkyrimMod_FieldIndex.VoiceTypes:
                case SkyrimMod_FieldIndex.MaterialTypes:
                case SkyrimMod_FieldIndex.Impacts:
                case SkyrimMod_FieldIndex.ImpactDataSets:
                case SkyrimMod_FieldIndex.ArmorAddons:
                case SkyrimMod_FieldIndex.EncounterZones:
                case SkyrimMod_FieldIndex.Locations:
                case SkyrimMod_FieldIndex.Messages:
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                case SkyrimMod_FieldIndex.LightingTemplates:
                case SkyrimMod_FieldIndex.MusicTypes:
                case SkyrimMod_FieldIndex.Footsteps:
                case SkyrimMod_FieldIndex.FootstepSets:
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                case SkyrimMod_FieldIndex.DialogBranches:
                case SkyrimMod_FieldIndex.MusicTracks:
                case SkyrimMod_FieldIndex.DialogViews:
                case SkyrimMod_FieldIndex.WordsOfPower:
                case SkyrimMod_FieldIndex.Shouts:
                case SkyrimMod_FieldIndex.EquipTypes:
                case SkyrimMod_FieldIndex.Relationships:
                case SkyrimMod_FieldIndex.Scenes:
                case SkyrimMod_FieldIndex.AssociationTypes:
                case SkyrimMod_FieldIndex.Outfits:
                case SkyrimMod_FieldIndex.ArtObjects:
                case SkyrimMod_FieldIndex.MaterialObjects:
                case SkyrimMod_FieldIndex.MovementTypes:
                case SkyrimMod_FieldIndex.SoundDescriptors:
                case SkyrimMod_FieldIndex.DualCastData:
                case SkyrimMod_FieldIndex.SoundCategories:
                case SkyrimMod_FieldIndex.SoundOutputModels:
                case SkyrimMod_FieldIndex.CollisionLayers:
                case SkyrimMod_FieldIndex.Colors:
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                case SkyrimMod_FieldIndex.Weathers:
                case SkyrimMod_FieldIndex.Climates:
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                case SkyrimMod_FieldIndex.VisualEffects:
                case SkyrimMod_FieldIndex.Regions:
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                case SkyrimMod_FieldIndex.Cells:
                case SkyrimMod_FieldIndex.Worldspaces:
                case SkyrimMod_FieldIndex.DialogTopics:
                case SkyrimMod_FieldIndex.Quests:
                case SkyrimMod_FieldIndex.IdleAnimations:
                case SkyrimMod_FieldIndex.Packages:
                case SkyrimMod_FieldIndex.CombatStyles:
                case SkyrimMod_FieldIndex.LoadScreens:
                case SkyrimMod_FieldIndex.LeveledSpells:
                case SkyrimMod_FieldIndex.AnimatedObjects:
                case SkyrimMod_FieldIndex.Waters:
                case SkyrimMod_FieldIndex.EffectShaders:
                case SkyrimMod_FieldIndex.Explosions:
                case SkyrimMod_FieldIndex.Debris:
                case SkyrimMod_FieldIndex.ImageSpaces:
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                case SkyrimMod_FieldIndex.FormLists:
                case SkyrimMod_FieldIndex.Perks:
                case SkyrimMod_FieldIndex.BodyParts:
                case SkyrimMod_FieldIndex.AddonNodes:
                case SkyrimMod_FieldIndex.ActorValueInformation:
                case SkyrimMod_FieldIndex.CameraShots:
                case SkyrimMod_FieldIndex.CameraPaths:
                case SkyrimMod_FieldIndex.VoiceTypes:
                case SkyrimMod_FieldIndex.MaterialTypes:
                case SkyrimMod_FieldIndex.Impacts:
                case SkyrimMod_FieldIndex.ImpactDataSets:
                case SkyrimMod_FieldIndex.ArmorAddons:
                case SkyrimMod_FieldIndex.EncounterZones:
                case SkyrimMod_FieldIndex.Locations:
                case SkyrimMod_FieldIndex.Messages:
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                case SkyrimMod_FieldIndex.LightingTemplates:
                case SkyrimMod_FieldIndex.MusicTypes:
                case SkyrimMod_FieldIndex.Footsteps:
                case SkyrimMod_FieldIndex.FootstepSets:
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                case SkyrimMod_FieldIndex.DialogBranches:
                case SkyrimMod_FieldIndex.MusicTracks:
                case SkyrimMod_FieldIndex.DialogViews:
                case SkyrimMod_FieldIndex.WordsOfPower:
                case SkyrimMod_FieldIndex.Shouts:
                case SkyrimMod_FieldIndex.EquipTypes:
                case SkyrimMod_FieldIndex.Relationships:
                case SkyrimMod_FieldIndex.Scenes:
                case SkyrimMod_FieldIndex.AssociationTypes:
                case SkyrimMod_FieldIndex.Outfits:
                case SkyrimMod_FieldIndex.ArtObjects:
                case SkyrimMod_FieldIndex.MaterialObjects:
                case SkyrimMod_FieldIndex.MovementTypes:
                case SkyrimMod_FieldIndex.SoundDescriptors:
                case SkyrimMod_FieldIndex.DualCastData:
                case SkyrimMod_FieldIndex.SoundCategories:
                case SkyrimMod_FieldIndex.SoundOutputModels:
                case SkyrimMod_FieldIndex.CollisionLayers:
                case SkyrimMod_FieldIndex.Colors:
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return "ModHeader";
                case SkyrimMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case SkyrimMod_FieldIndex.Keywords:
                    return "Keywords";
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return "LocationReferenceTypes";
                case SkyrimMod_FieldIndex.Actions:
                    return "Actions";
                case SkyrimMod_FieldIndex.TextureSets:
                    return "TextureSets";
                case SkyrimMod_FieldIndex.Globals:
                    return "Globals";
                case SkyrimMod_FieldIndex.Classes:
                    return "Classes";
                case SkyrimMod_FieldIndex.Factions:
                    return "Factions";
                case SkyrimMod_FieldIndex.HeadParts:
                    return "HeadParts";
                case SkyrimMod_FieldIndex.Hairs:
                    return "Hairs";
                case SkyrimMod_FieldIndex.Eyes:
                    return "Eyes";
                case SkyrimMod_FieldIndex.Races:
                    return "Races";
                case SkyrimMod_FieldIndex.SoundMarkers:
                    return "SoundMarkers";
                case SkyrimMod_FieldIndex.AcousticSpaces:
                    return "AcousticSpaces";
                case SkyrimMod_FieldIndex.MagicEffects:
                    return "MagicEffects";
                case SkyrimMod_FieldIndex.LandscapeTextures:
                    return "LandscapeTextures";
                case SkyrimMod_FieldIndex.ObjectEffects:
                    return "ObjectEffects";
                case SkyrimMod_FieldIndex.Spells:
                    return "Spells";
                case SkyrimMod_FieldIndex.Scrolls:
                    return "Scrolls";
                case SkyrimMod_FieldIndex.Activators:
                    return "Activators";
                case SkyrimMod_FieldIndex.TalkingActivators:
                    return "TalkingActivators";
                case SkyrimMod_FieldIndex.Armors:
                    return "Armors";
                case SkyrimMod_FieldIndex.Books:
                    return "Books";
                case SkyrimMod_FieldIndex.Containers:
                    return "Containers";
                case SkyrimMod_FieldIndex.Doors:
                    return "Doors";
                case SkyrimMod_FieldIndex.Ingredients:
                    return "Ingredients";
                case SkyrimMod_FieldIndex.Lights:
                    return "Lights";
                case SkyrimMod_FieldIndex.MiscItems:
                    return "MiscItems";
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                    return "AlchemicalApparatuses";
                case SkyrimMod_FieldIndex.Statics:
                    return "Statics";
                case SkyrimMod_FieldIndex.MoveableStatics:
                    return "MoveableStatics";
                case SkyrimMod_FieldIndex.Grasses:
                    return "Grasses";
                case SkyrimMod_FieldIndex.Trees:
                    return "Trees";
                case SkyrimMod_FieldIndex.Florae:
                    return "Florae";
                case SkyrimMod_FieldIndex.Furniture:
                    return "Furniture";
                case SkyrimMod_FieldIndex.Weapons:
                    return "Weapons";
                case SkyrimMod_FieldIndex.Ammunitions:
                    return "Ammunitions";
                case SkyrimMod_FieldIndex.Npcs:
                    return "Npcs";
                case SkyrimMod_FieldIndex.LeveledNpcs:
                    return "LeveledNpcs";
                case SkyrimMod_FieldIndex.Keys:
                    return "Keys";
                case SkyrimMod_FieldIndex.Ingestibles:
                    return "Ingestibles";
                case SkyrimMod_FieldIndex.IdleMarkers:
                    return "IdleMarkers";
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                    return "ConstructibleObjects";
                case SkyrimMod_FieldIndex.Projectiles:
                    return "Projectiles";
                case SkyrimMod_FieldIndex.Hazards:
                    return "Hazards";
                case SkyrimMod_FieldIndex.SoulGems:
                    return "SoulGems";
                case SkyrimMod_FieldIndex.LeveledItems:
                    return "LeveledItems";
                case SkyrimMod_FieldIndex.Weathers:
                    return "Weathers";
                case SkyrimMod_FieldIndex.Climates:
                    return "Climates";
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                    return "ShaderParticleGeometries";
                case SkyrimMod_FieldIndex.VisualEffects:
                    return "VisualEffects";
                case SkyrimMod_FieldIndex.Regions:
                    return "Regions";
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                    return "NavigationMeshInfoMaps";
                case SkyrimMod_FieldIndex.Cells:
                    return "Cells";
                case SkyrimMod_FieldIndex.Worldspaces:
                    return "Worldspaces";
                case SkyrimMod_FieldIndex.DialogTopics:
                    return "DialogTopics";
                case SkyrimMod_FieldIndex.Quests:
                    return "Quests";
                case SkyrimMod_FieldIndex.IdleAnimations:
                    return "IdleAnimations";
                case SkyrimMod_FieldIndex.Packages:
                    return "Packages";
                case SkyrimMod_FieldIndex.CombatStyles:
                    return "CombatStyles";
                case SkyrimMod_FieldIndex.LoadScreens:
                    return "LoadScreens";
                case SkyrimMod_FieldIndex.LeveledSpells:
                    return "LeveledSpells";
                case SkyrimMod_FieldIndex.AnimatedObjects:
                    return "AnimatedObjects";
                case SkyrimMod_FieldIndex.Waters:
                    return "Waters";
                case SkyrimMod_FieldIndex.EffectShaders:
                    return "EffectShaders";
                case SkyrimMod_FieldIndex.Explosions:
                    return "Explosions";
                case SkyrimMod_FieldIndex.Debris:
                    return "Debris";
                case SkyrimMod_FieldIndex.ImageSpaces:
                    return "ImageSpaces";
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                    return "ImageSpaceAdapters";
                case SkyrimMod_FieldIndex.FormLists:
                    return "FormLists";
                case SkyrimMod_FieldIndex.Perks:
                    return "Perks";
                case SkyrimMod_FieldIndex.BodyParts:
                    return "BodyParts";
                case SkyrimMod_FieldIndex.AddonNodes:
                    return "AddonNodes";
                case SkyrimMod_FieldIndex.ActorValueInformation:
                    return "ActorValueInformation";
                case SkyrimMod_FieldIndex.CameraShots:
                    return "CameraShots";
                case SkyrimMod_FieldIndex.CameraPaths:
                    return "CameraPaths";
                case SkyrimMod_FieldIndex.VoiceTypes:
                    return "VoiceTypes";
                case SkyrimMod_FieldIndex.MaterialTypes:
                    return "MaterialTypes";
                case SkyrimMod_FieldIndex.Impacts:
                    return "Impacts";
                case SkyrimMod_FieldIndex.ImpactDataSets:
                    return "ImpactDataSets";
                case SkyrimMod_FieldIndex.ArmorAddons:
                    return "ArmorAddons";
                case SkyrimMod_FieldIndex.EncounterZones:
                    return "EncounterZones";
                case SkyrimMod_FieldIndex.Locations:
                    return "Locations";
                case SkyrimMod_FieldIndex.Messages:
                    return "Messages";
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                    return "DefaultObjectManagers";
                case SkyrimMod_FieldIndex.LightingTemplates:
                    return "LightingTemplates";
                case SkyrimMod_FieldIndex.MusicTypes:
                    return "MusicTypes";
                case SkyrimMod_FieldIndex.Footsteps:
                    return "Footsteps";
                case SkyrimMod_FieldIndex.FootstepSets:
                    return "FootstepSets";
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                    return "StoryManagerBranchNodes";
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                    return "StoryManagerQuestNodes";
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                    return "StoryManagerEventNodes";
                case SkyrimMod_FieldIndex.DialogBranches:
                    return "DialogBranches";
                case SkyrimMod_FieldIndex.MusicTracks:
                    return "MusicTracks";
                case SkyrimMod_FieldIndex.DialogViews:
                    return "DialogViews";
                case SkyrimMod_FieldIndex.WordsOfPower:
                    return "WordsOfPower";
                case SkyrimMod_FieldIndex.Shouts:
                    return "Shouts";
                case SkyrimMod_FieldIndex.EquipTypes:
                    return "EquipTypes";
                case SkyrimMod_FieldIndex.Relationships:
                    return "Relationships";
                case SkyrimMod_FieldIndex.Scenes:
                    return "Scenes";
                case SkyrimMod_FieldIndex.AssociationTypes:
                    return "AssociationTypes";
                case SkyrimMod_FieldIndex.Outfits:
                    return "Outfits";
                case SkyrimMod_FieldIndex.ArtObjects:
                    return "ArtObjects";
                case SkyrimMod_FieldIndex.MaterialObjects:
                    return "MaterialObjects";
                case SkyrimMod_FieldIndex.MovementTypes:
                    return "MovementTypes";
                case SkyrimMod_FieldIndex.SoundDescriptors:
                    return "SoundDescriptors";
                case SkyrimMod_FieldIndex.DualCastData:
                    return "DualCastData";
                case SkyrimMod_FieldIndex.SoundCategories:
                    return "SoundCategories";
                case SkyrimMod_FieldIndex.SoundOutputModels:
                    return "SoundOutputModels";
                case SkyrimMod_FieldIndex.CollisionLayers:
                    return "CollisionLayers";
                case SkyrimMod_FieldIndex.Colors:
                    return "Colors";
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return "ReverbParameters";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                case SkyrimMod_FieldIndex.Weathers:
                case SkyrimMod_FieldIndex.Climates:
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                case SkyrimMod_FieldIndex.VisualEffects:
                case SkyrimMod_FieldIndex.Regions:
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                case SkyrimMod_FieldIndex.Cells:
                case SkyrimMod_FieldIndex.Worldspaces:
                case SkyrimMod_FieldIndex.DialogTopics:
                case SkyrimMod_FieldIndex.Quests:
                case SkyrimMod_FieldIndex.IdleAnimations:
                case SkyrimMod_FieldIndex.Packages:
                case SkyrimMod_FieldIndex.CombatStyles:
                case SkyrimMod_FieldIndex.LoadScreens:
                case SkyrimMod_FieldIndex.LeveledSpells:
                case SkyrimMod_FieldIndex.AnimatedObjects:
                case SkyrimMod_FieldIndex.Waters:
                case SkyrimMod_FieldIndex.EffectShaders:
                case SkyrimMod_FieldIndex.Explosions:
                case SkyrimMod_FieldIndex.Debris:
                case SkyrimMod_FieldIndex.ImageSpaces:
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                case SkyrimMod_FieldIndex.FormLists:
                case SkyrimMod_FieldIndex.Perks:
                case SkyrimMod_FieldIndex.BodyParts:
                case SkyrimMod_FieldIndex.AddonNodes:
                case SkyrimMod_FieldIndex.ActorValueInformation:
                case SkyrimMod_FieldIndex.CameraShots:
                case SkyrimMod_FieldIndex.CameraPaths:
                case SkyrimMod_FieldIndex.VoiceTypes:
                case SkyrimMod_FieldIndex.MaterialTypes:
                case SkyrimMod_FieldIndex.Impacts:
                case SkyrimMod_FieldIndex.ImpactDataSets:
                case SkyrimMod_FieldIndex.ArmorAddons:
                case SkyrimMod_FieldIndex.EncounterZones:
                case SkyrimMod_FieldIndex.Locations:
                case SkyrimMod_FieldIndex.Messages:
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                case SkyrimMod_FieldIndex.LightingTemplates:
                case SkyrimMod_FieldIndex.MusicTypes:
                case SkyrimMod_FieldIndex.Footsteps:
                case SkyrimMod_FieldIndex.FootstepSets:
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                case SkyrimMod_FieldIndex.DialogBranches:
                case SkyrimMod_FieldIndex.MusicTracks:
                case SkyrimMod_FieldIndex.DialogViews:
                case SkyrimMod_FieldIndex.WordsOfPower:
                case SkyrimMod_FieldIndex.Shouts:
                case SkyrimMod_FieldIndex.EquipTypes:
                case SkyrimMod_FieldIndex.Relationships:
                case SkyrimMod_FieldIndex.Scenes:
                case SkyrimMod_FieldIndex.AssociationTypes:
                case SkyrimMod_FieldIndex.Outfits:
                case SkyrimMod_FieldIndex.ArtObjects:
                case SkyrimMod_FieldIndex.MaterialObjects:
                case SkyrimMod_FieldIndex.MovementTypes:
                case SkyrimMod_FieldIndex.SoundDescriptors:
                case SkyrimMod_FieldIndex.DualCastData:
                case SkyrimMod_FieldIndex.SoundCategories:
                case SkyrimMod_FieldIndex.SoundOutputModels:
                case SkyrimMod_FieldIndex.CollisionLayers:
                case SkyrimMod_FieldIndex.Colors:
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.Cells:
                    return true;
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Keywords:
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                case SkyrimMod_FieldIndex.Actions:
                case SkyrimMod_FieldIndex.TextureSets:
                case SkyrimMod_FieldIndex.Globals:
                case SkyrimMod_FieldIndex.Classes:
                case SkyrimMod_FieldIndex.Factions:
                case SkyrimMod_FieldIndex.HeadParts:
                case SkyrimMod_FieldIndex.Hairs:
                case SkyrimMod_FieldIndex.Eyes:
                case SkyrimMod_FieldIndex.Races:
                case SkyrimMod_FieldIndex.SoundMarkers:
                case SkyrimMod_FieldIndex.AcousticSpaces:
                case SkyrimMod_FieldIndex.MagicEffects:
                case SkyrimMod_FieldIndex.LandscapeTextures:
                case SkyrimMod_FieldIndex.ObjectEffects:
                case SkyrimMod_FieldIndex.Spells:
                case SkyrimMod_FieldIndex.Scrolls:
                case SkyrimMod_FieldIndex.Activators:
                case SkyrimMod_FieldIndex.TalkingActivators:
                case SkyrimMod_FieldIndex.Armors:
                case SkyrimMod_FieldIndex.Books:
                case SkyrimMod_FieldIndex.Containers:
                case SkyrimMod_FieldIndex.Doors:
                case SkyrimMod_FieldIndex.Ingredients:
                case SkyrimMod_FieldIndex.Lights:
                case SkyrimMod_FieldIndex.MiscItems:
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                case SkyrimMod_FieldIndex.Statics:
                case SkyrimMod_FieldIndex.MoveableStatics:
                case SkyrimMod_FieldIndex.Grasses:
                case SkyrimMod_FieldIndex.Trees:
                case SkyrimMod_FieldIndex.Florae:
                case SkyrimMod_FieldIndex.Furniture:
                case SkyrimMod_FieldIndex.Weapons:
                case SkyrimMod_FieldIndex.Ammunitions:
                case SkyrimMod_FieldIndex.Npcs:
                case SkyrimMod_FieldIndex.LeveledNpcs:
                case SkyrimMod_FieldIndex.Keys:
                case SkyrimMod_FieldIndex.Ingestibles:
                case SkyrimMod_FieldIndex.IdleMarkers:
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                case SkyrimMod_FieldIndex.Projectiles:
                case SkyrimMod_FieldIndex.Hazards:
                case SkyrimMod_FieldIndex.SoulGems:
                case SkyrimMod_FieldIndex.LeveledItems:
                case SkyrimMod_FieldIndex.Weathers:
                case SkyrimMod_FieldIndex.Climates:
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                case SkyrimMod_FieldIndex.VisualEffects:
                case SkyrimMod_FieldIndex.Regions:
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                case SkyrimMod_FieldIndex.Worldspaces:
                case SkyrimMod_FieldIndex.DialogTopics:
                case SkyrimMod_FieldIndex.Quests:
                case SkyrimMod_FieldIndex.IdleAnimations:
                case SkyrimMod_FieldIndex.Packages:
                case SkyrimMod_FieldIndex.CombatStyles:
                case SkyrimMod_FieldIndex.LoadScreens:
                case SkyrimMod_FieldIndex.LeveledSpells:
                case SkyrimMod_FieldIndex.AnimatedObjects:
                case SkyrimMod_FieldIndex.Waters:
                case SkyrimMod_FieldIndex.EffectShaders:
                case SkyrimMod_FieldIndex.Explosions:
                case SkyrimMod_FieldIndex.Debris:
                case SkyrimMod_FieldIndex.ImageSpaces:
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                case SkyrimMod_FieldIndex.FormLists:
                case SkyrimMod_FieldIndex.Perks:
                case SkyrimMod_FieldIndex.BodyParts:
                case SkyrimMod_FieldIndex.AddonNodes:
                case SkyrimMod_FieldIndex.ActorValueInformation:
                case SkyrimMod_FieldIndex.CameraShots:
                case SkyrimMod_FieldIndex.CameraPaths:
                case SkyrimMod_FieldIndex.VoiceTypes:
                case SkyrimMod_FieldIndex.MaterialTypes:
                case SkyrimMod_FieldIndex.Impacts:
                case SkyrimMod_FieldIndex.ImpactDataSets:
                case SkyrimMod_FieldIndex.ArmorAddons:
                case SkyrimMod_FieldIndex.EncounterZones:
                case SkyrimMod_FieldIndex.Locations:
                case SkyrimMod_FieldIndex.Messages:
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                case SkyrimMod_FieldIndex.LightingTemplates:
                case SkyrimMod_FieldIndex.MusicTypes:
                case SkyrimMod_FieldIndex.Footsteps:
                case SkyrimMod_FieldIndex.FootstepSets:
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                case SkyrimMod_FieldIndex.DialogBranches:
                case SkyrimMod_FieldIndex.MusicTracks:
                case SkyrimMod_FieldIndex.DialogViews:
                case SkyrimMod_FieldIndex.WordsOfPower:
                case SkyrimMod_FieldIndex.Shouts:
                case SkyrimMod_FieldIndex.EquipTypes:
                case SkyrimMod_FieldIndex.Relationships:
                case SkyrimMod_FieldIndex.Scenes:
                case SkyrimMod_FieldIndex.AssociationTypes:
                case SkyrimMod_FieldIndex.Outfits:
                case SkyrimMod_FieldIndex.ArtObjects:
                case SkyrimMod_FieldIndex.MaterialObjects:
                case SkyrimMod_FieldIndex.MovementTypes:
                case SkyrimMod_FieldIndex.SoundDescriptors:
                case SkyrimMod_FieldIndex.DualCastData:
                case SkyrimMod_FieldIndex.SoundCategories:
                case SkyrimMod_FieldIndex.SoundOutputModels:
                case SkyrimMod_FieldIndex.CollisionLayers:
                case SkyrimMod_FieldIndex.Colors:
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return typeof(ModHeader);
                case SkyrimMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case SkyrimMod_FieldIndex.Keywords:
                    return typeof(Group<Keyword>);
                case SkyrimMod_FieldIndex.LocationReferenceTypes:
                    return typeof(Group<LocationReferenceType>);
                case SkyrimMod_FieldIndex.Actions:
                    return typeof(Group<ActionRecord>);
                case SkyrimMod_FieldIndex.TextureSets:
                    return typeof(Group<TextureSet>);
                case SkyrimMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                case SkyrimMod_FieldIndex.Classes:
                    return typeof(Group<Class>);
                case SkyrimMod_FieldIndex.Factions:
                    return typeof(Group<Faction>);
                case SkyrimMod_FieldIndex.HeadParts:
                    return typeof(Group<HeadPart>);
                case SkyrimMod_FieldIndex.Hairs:
                    return typeof(Group<Hair>);
                case SkyrimMod_FieldIndex.Eyes:
                    return typeof(Group<Eyes>);
                case SkyrimMod_FieldIndex.Races:
                    return typeof(Group<Race>);
                case SkyrimMod_FieldIndex.SoundMarkers:
                    return typeof(Group<SoundMarker>);
                case SkyrimMod_FieldIndex.AcousticSpaces:
                    return typeof(Group<AcousticSpace>);
                case SkyrimMod_FieldIndex.MagicEffects:
                    return typeof(Group<MagicEffect>);
                case SkyrimMod_FieldIndex.LandscapeTextures:
                    return typeof(Group<LandscapeTexture>);
                case SkyrimMod_FieldIndex.ObjectEffects:
                    return typeof(Group<ObjectEffect>);
                case SkyrimMod_FieldIndex.Spells:
                    return typeof(Group<Spell>);
                case SkyrimMod_FieldIndex.Scrolls:
                    return typeof(Group<Scroll>);
                case SkyrimMod_FieldIndex.Activators:
                    return typeof(Group<Activator>);
                case SkyrimMod_FieldIndex.TalkingActivators:
                    return typeof(Group<TalkingActivator>);
                case SkyrimMod_FieldIndex.Armors:
                    return typeof(Group<Armor>);
                case SkyrimMod_FieldIndex.Books:
                    return typeof(Group<Book>);
                case SkyrimMod_FieldIndex.Containers:
                    return typeof(Group<Container>);
                case SkyrimMod_FieldIndex.Doors:
                    return typeof(Group<Door>);
                case SkyrimMod_FieldIndex.Ingredients:
                    return typeof(Group<Ingredient>);
                case SkyrimMod_FieldIndex.Lights:
                    return typeof(Group<Light>);
                case SkyrimMod_FieldIndex.MiscItems:
                    return typeof(Group<MiscItem>);
                case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                    return typeof(Group<AlchemicalApparatus>);
                case SkyrimMod_FieldIndex.Statics:
                    return typeof(Group<Static>);
                case SkyrimMod_FieldIndex.MoveableStatics:
                    return typeof(Group<MoveableStatic>);
                case SkyrimMod_FieldIndex.Grasses:
                    return typeof(Group<Grass>);
                case SkyrimMod_FieldIndex.Trees:
                    return typeof(Group<Tree>);
                case SkyrimMod_FieldIndex.Florae:
                    return typeof(Group<Flora>);
                case SkyrimMod_FieldIndex.Furniture:
                    return typeof(Group<Furniture>);
                case SkyrimMod_FieldIndex.Weapons:
                    return typeof(Group<Weapon>);
                case SkyrimMod_FieldIndex.Ammunitions:
                    return typeof(Group<Ammunition>);
                case SkyrimMod_FieldIndex.Npcs:
                    return typeof(Group<Npc>);
                case SkyrimMod_FieldIndex.LeveledNpcs:
                    return typeof(Group<LeveledNpc>);
                case SkyrimMod_FieldIndex.Keys:
                    return typeof(Group<Key>);
                case SkyrimMod_FieldIndex.Ingestibles:
                    return typeof(Group<Ingestible>);
                case SkyrimMod_FieldIndex.IdleMarkers:
                    return typeof(Group<IdleMarker>);
                case SkyrimMod_FieldIndex.ConstructibleObjects:
                    return typeof(Group<ConstructibleObject>);
                case SkyrimMod_FieldIndex.Projectiles:
                    return typeof(Group<Projectile>);
                case SkyrimMod_FieldIndex.Hazards:
                    return typeof(Group<Hazard>);
                case SkyrimMod_FieldIndex.SoulGems:
                    return typeof(Group<SoulGem>);
                case SkyrimMod_FieldIndex.LeveledItems:
                    return typeof(Group<LeveledItem>);
                case SkyrimMod_FieldIndex.Weathers:
                    return typeof(Group<Weather>);
                case SkyrimMod_FieldIndex.Climates:
                    return typeof(Group<Climate>);
                case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                    return typeof(Group<ShaderParticleGeometry>);
                case SkyrimMod_FieldIndex.VisualEffects:
                    return typeof(Group<VisualEffect>);
                case SkyrimMod_FieldIndex.Regions:
                    return typeof(Group<Region>);
                case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                    return typeof(Group<NavigationMeshInfoMap>);
                case SkyrimMod_FieldIndex.Cells:
                    return typeof(ListGroup<CellBlock>);
                case SkyrimMod_FieldIndex.Worldspaces:
                    return typeof(Group<Worldspace>);
                case SkyrimMod_FieldIndex.DialogTopics:
                    return typeof(Group<DialogTopic>);
                case SkyrimMod_FieldIndex.Quests:
                    return typeof(Group<Quest>);
                case SkyrimMod_FieldIndex.IdleAnimations:
                    return typeof(Group<IdleAnimation>);
                case SkyrimMod_FieldIndex.Packages:
                    return typeof(Group<Package>);
                case SkyrimMod_FieldIndex.CombatStyles:
                    return typeof(Group<CombatStyle>);
                case SkyrimMod_FieldIndex.LoadScreens:
                    return typeof(Group<LoadScreen>);
                case SkyrimMod_FieldIndex.LeveledSpells:
                    return typeof(Group<LeveledSpell>);
                case SkyrimMod_FieldIndex.AnimatedObjects:
                    return typeof(Group<AnimatedObject>);
                case SkyrimMod_FieldIndex.Waters:
                    return typeof(Group<Water>);
                case SkyrimMod_FieldIndex.EffectShaders:
                    return typeof(Group<EffectShader>);
                case SkyrimMod_FieldIndex.Explosions:
                    return typeof(Group<Explosion>);
                case SkyrimMod_FieldIndex.Debris:
                    return typeof(Group<Debris>);
                case SkyrimMod_FieldIndex.ImageSpaces:
                    return typeof(Group<ImageSpace>);
                case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                    return typeof(Group<ImageSpaceAdapter>);
                case SkyrimMod_FieldIndex.FormLists:
                    return typeof(Group<FormList>);
                case SkyrimMod_FieldIndex.Perks:
                    return typeof(Group<Perk>);
                case SkyrimMod_FieldIndex.BodyParts:
                    return typeof(Group<BodyPartData>);
                case SkyrimMod_FieldIndex.AddonNodes:
                    return typeof(Group<AddonNode>);
                case SkyrimMod_FieldIndex.ActorValueInformation:
                    return typeof(Group<ActorValueInformation>);
                case SkyrimMod_FieldIndex.CameraShots:
                    return typeof(Group<CameraShot>);
                case SkyrimMod_FieldIndex.CameraPaths:
                    return typeof(Group<CameraPath>);
                case SkyrimMod_FieldIndex.VoiceTypes:
                    return typeof(Group<VoiceType>);
                case SkyrimMod_FieldIndex.MaterialTypes:
                    return typeof(Group<MaterialType>);
                case SkyrimMod_FieldIndex.Impacts:
                    return typeof(Group<Impact>);
                case SkyrimMod_FieldIndex.ImpactDataSets:
                    return typeof(Group<ImpactDataSet>);
                case SkyrimMod_FieldIndex.ArmorAddons:
                    return typeof(Group<ArmorAddon>);
                case SkyrimMod_FieldIndex.EncounterZones:
                    return typeof(Group<EncounterZone>);
                case SkyrimMod_FieldIndex.Locations:
                    return typeof(Group<Location>);
                case SkyrimMod_FieldIndex.Messages:
                    return typeof(Group<Message>);
                case SkyrimMod_FieldIndex.DefaultObjectManagers:
                    return typeof(Group<DefaultObjectManager>);
                case SkyrimMod_FieldIndex.LightingTemplates:
                    return typeof(Group<LightingTemplate>);
                case SkyrimMod_FieldIndex.MusicTypes:
                    return typeof(Group<MusicType>);
                case SkyrimMod_FieldIndex.Footsteps:
                    return typeof(Group<Footstep>);
                case SkyrimMod_FieldIndex.FootstepSets:
                    return typeof(Group<FootstepSet>);
                case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                    return typeof(Group<StoryManagerBranchNode>);
                case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                    return typeof(Group<StoryManagerQuestNode>);
                case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                    return typeof(Group<StoryManagerEventNode>);
                case SkyrimMod_FieldIndex.DialogBranches:
                    return typeof(Group<DialogBranch>);
                case SkyrimMod_FieldIndex.MusicTracks:
                    return typeof(Group<MusicTrack>);
                case SkyrimMod_FieldIndex.DialogViews:
                    return typeof(Group<DialogView>);
                case SkyrimMod_FieldIndex.WordsOfPower:
                    return typeof(Group<WordOfPower>);
                case SkyrimMod_FieldIndex.Shouts:
                    return typeof(Group<Shout>);
                case SkyrimMod_FieldIndex.EquipTypes:
                    return typeof(Group<EquipType>);
                case SkyrimMod_FieldIndex.Relationships:
                    return typeof(Group<Relationship>);
                case SkyrimMod_FieldIndex.Scenes:
                    return typeof(Group<Scene>);
                case SkyrimMod_FieldIndex.AssociationTypes:
                    return typeof(Group<AssociationType>);
                case SkyrimMod_FieldIndex.Outfits:
                    return typeof(Group<Outfit>);
                case SkyrimMod_FieldIndex.ArtObjects:
                    return typeof(Group<ArtObject>);
                case SkyrimMod_FieldIndex.MaterialObjects:
                    return typeof(Group<MaterialObject>);
                case SkyrimMod_FieldIndex.MovementTypes:
                    return typeof(Group<MovementType>);
                case SkyrimMod_FieldIndex.SoundDescriptors:
                    return typeof(Group<SoundDescriptor>);
                case SkyrimMod_FieldIndex.DualCastData:
                    return typeof(Group<DualCastData>);
                case SkyrimMod_FieldIndex.SoundCategories:
                    return typeof(Group<SoundCategory>);
                case SkyrimMod_FieldIndex.SoundOutputModels:
                    return typeof(Group<SoundOutputModel>);
                case SkyrimMod_FieldIndex.CollisionLayers:
                    return typeof(Group<CollisionLayer>);
                case SkyrimMod_FieldIndex.Colors:
                    return typeof(Group<ColorRecord>);
                case SkyrimMod_FieldIndex.ReverbParameters:
                    return typeof(Group<ReverbParameters>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkyrimModXmlWriteTranslation);
        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkyrimModSetterCommon
    {
        public static readonly SkyrimModSetterCommon Instance = new SkyrimModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkyrimMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.HeadParts.Clear();
            item.Hairs.Clear();
            item.Eyes.Clear();
            item.Races.Clear();
            item.SoundMarkers.Clear();
            item.AcousticSpaces.Clear();
            item.MagicEffects.Clear();
            item.LandscapeTextures.Clear();
            item.ObjectEffects.Clear();
            item.Spells.Clear();
            item.Scrolls.Clear();
            item.Activators.Clear();
            item.TalkingActivators.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.MiscItems.Clear();
            item.AlchemicalApparatuses.Clear();
            item.Statics.Clear();
            item.MoveableStatics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Florae.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.LeveledNpcs.Clear();
            item.Keys.Clear();
            item.Ingestibles.Clear();
            item.IdleMarkers.Clear();
            item.ConstructibleObjects.Clear();
            item.Projectiles.Clear();
            item.Hazards.Clear();
            item.SoulGems.Clear();
            item.LeveledItems.Clear();
            item.Weathers.Clear();
            item.Climates.Clear();
            item.ShaderParticleGeometries.Clear();
            item.VisualEffects.Clear();
            item.Regions.Clear();
            item.NavigationMeshInfoMaps.Clear();
            item.Worldspaces.Clear();
            item.DialogTopics.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.Packages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.LeveledSpells.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
            item.Explosions.Clear();
            item.Debris.Clear();
            item.ImageSpaces.Clear();
            item.ImageSpaceAdapters.Clear();
            item.FormLists.Clear();
            item.Perks.Clear();
            item.BodyParts.Clear();
            item.AddonNodes.Clear();
            item.ActorValueInformation.Clear();
            item.CameraShots.Clear();
            item.CameraPaths.Clear();
            item.VoiceTypes.Clear();
            item.MaterialTypes.Clear();
            item.Impacts.Clear();
            item.ImpactDataSets.Clear();
            item.ArmorAddons.Clear();
            item.EncounterZones.Clear();
            item.Locations.Clear();
            item.Messages.Clear();
            item.DefaultObjectManagers.Clear();
            item.LightingTemplates.Clear();
            item.MusicTypes.Clear();
            item.Footsteps.Clear();
            item.FootstepSets.Clear();
            item.StoryManagerBranchNodes.Clear();
            item.StoryManagerQuestNodes.Clear();
            item.StoryManagerEventNodes.Clear();
            item.DialogBranches.Clear();
            item.MusicTracks.Clear();
            item.DialogViews.Clear();
            item.WordsOfPower.Clear();
            item.Shouts.Clear();
            item.EquipTypes.Clear();
            item.Relationships.Clear();
            item.Scenes.Clear();
            item.AssociationTypes.Clear();
            item.Outfits.Clear();
            item.ArtObjects.Clear();
            item.MaterialObjects.Clear();
            item.MovementTypes.Clear();
            item.SoundDescriptors.Clear();
            item.DualCastData.Clear();
            item.SoundCategories.Clear();
            item.SoundOutputModels.Clear();
            item.CollisionLayers.Clear();
            item.Colors.Clear();
            item.ReverbParameters.Clear();
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ModHeader":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                    try
                    {
                        item.ModHeader.CopyInFromXml(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Cells":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Cells);
                    try
                    {
                        item.Cells.CopyInFromXml<CellBlock>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(ISkyrimMod obj)
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ISkyrimMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISkyrimMod item,
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            GroupMask? importMask = null)
        {
            frame.Reader.MetaData.MasterReferences = new MasterReferenceReader(modKey, item.ModHeader.MasterReferences);
            UtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: SkyrimModBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SkyrimModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SkyrimModCommon
    {
        public static readonly SkyrimModCommon Instance = new SkyrimModCommon();

        public SkyrimMod.Mask<bool> GetEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMod.Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            SkyrimMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.SoundMarkers = MaskItemExt.Factory(item.SoundMarkers.GetEqualsMask(rhs.SoundMarkers, include), include);
            ret.AcousticSpaces = MaskItemExt.Factory(item.AcousticSpaces.GetEqualsMask(rhs.AcousticSpaces, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.LandscapeTextures = MaskItemExt.Factory(item.LandscapeTextures.GetEqualsMask(rhs.LandscapeTextures, include), include);
            ret.ObjectEffects = MaskItemExt.Factory(item.ObjectEffects.GetEqualsMask(rhs.ObjectEffects, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Scrolls = MaskItemExt.Factory(item.Scrolls.GetEqualsMask(rhs.Scrolls, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.TalkingActivators = MaskItemExt.Factory(item.TalkingActivators.GetEqualsMask(rhs.TalkingActivators, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.MiscItems = MaskItemExt.Factory(item.MiscItems.GetEqualsMask(rhs.MiscItems, include), include);
            ret.AlchemicalApparatuses = MaskItemExt.Factory(item.AlchemicalApparatuses.GetEqualsMask(rhs.AlchemicalApparatuses, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.MoveableStatics = MaskItemExt.Factory(item.MoveableStatics.GetEqualsMask(rhs.MoveableStatics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Florae = MaskItemExt.Factory(item.Florae.GetEqualsMask(rhs.Florae, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.LeveledNpcs = MaskItemExt.Factory(item.LeveledNpcs.GetEqualsMask(rhs.LeveledNpcs, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Ingestibles = MaskItemExt.Factory(item.Ingestibles.GetEqualsMask(rhs.Ingestibles, include), include);
            ret.IdleMarkers = MaskItemExt.Factory(item.IdleMarkers.GetEqualsMask(rhs.IdleMarkers, include), include);
            ret.ConstructibleObjects = MaskItemExt.Factory(item.ConstructibleObjects.GetEqualsMask(rhs.ConstructibleObjects, include), include);
            ret.Projectiles = MaskItemExt.Factory(item.Projectiles.GetEqualsMask(rhs.Projectiles, include), include);
            ret.Hazards = MaskItemExt.Factory(item.Hazards.GetEqualsMask(rhs.Hazards, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.ShaderParticleGeometries = MaskItemExt.Factory(item.ShaderParticleGeometries.GetEqualsMask(rhs.ShaderParticleGeometries, include), include);
            ret.VisualEffects = MaskItemExt.Factory(item.VisualEffects.GetEqualsMask(rhs.VisualEffects, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.NavigationMeshInfoMaps = MaskItemExt.Factory(item.NavigationMeshInfoMaps.GetEqualsMask(rhs.NavigationMeshInfoMaps, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(item.DialogTopics.GetEqualsMask(rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.Packages = MaskItemExt.Factory(item.Packages.GetEqualsMask(rhs.Packages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(item.LeveledSpells.GetEqualsMask(rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
            ret.Explosions = MaskItemExt.Factory(item.Explosions.GetEqualsMask(rhs.Explosions, include), include);
            ret.Debris = MaskItemExt.Factory(item.Debris.GetEqualsMask(rhs.Debris, include), include);
            ret.ImageSpaces = MaskItemExt.Factory(item.ImageSpaces.GetEqualsMask(rhs.ImageSpaces, include), include);
            ret.ImageSpaceAdapters = MaskItemExt.Factory(item.ImageSpaceAdapters.GetEqualsMask(rhs.ImageSpaceAdapters, include), include);
            ret.FormLists = MaskItemExt.Factory(item.FormLists.GetEqualsMask(rhs.FormLists, include), include);
            ret.Perks = MaskItemExt.Factory(item.Perks.GetEqualsMask(rhs.Perks, include), include);
            ret.BodyParts = MaskItemExt.Factory(item.BodyParts.GetEqualsMask(rhs.BodyParts, include), include);
            ret.AddonNodes = MaskItemExt.Factory(item.AddonNodes.GetEqualsMask(rhs.AddonNodes, include), include);
            ret.ActorValueInformation = MaskItemExt.Factory(item.ActorValueInformation.GetEqualsMask(rhs.ActorValueInformation, include), include);
            ret.CameraShots = MaskItemExt.Factory(item.CameraShots.GetEqualsMask(rhs.CameraShots, include), include);
            ret.CameraPaths = MaskItemExt.Factory(item.CameraPaths.GetEqualsMask(rhs.CameraPaths, include), include);
            ret.VoiceTypes = MaskItemExt.Factory(item.VoiceTypes.GetEqualsMask(rhs.VoiceTypes, include), include);
            ret.MaterialTypes = MaskItemExt.Factory(item.MaterialTypes.GetEqualsMask(rhs.MaterialTypes, include), include);
            ret.Impacts = MaskItemExt.Factory(item.Impacts.GetEqualsMask(rhs.Impacts, include), include);
            ret.ImpactDataSets = MaskItemExt.Factory(item.ImpactDataSets.GetEqualsMask(rhs.ImpactDataSets, include), include);
            ret.ArmorAddons = MaskItemExt.Factory(item.ArmorAddons.GetEqualsMask(rhs.ArmorAddons, include), include);
            ret.EncounterZones = MaskItemExt.Factory(item.EncounterZones.GetEqualsMask(rhs.EncounterZones, include), include);
            ret.Locations = MaskItemExt.Factory(item.Locations.GetEqualsMask(rhs.Locations, include), include);
            ret.Messages = MaskItemExt.Factory(item.Messages.GetEqualsMask(rhs.Messages, include), include);
            ret.DefaultObjectManagers = MaskItemExt.Factory(item.DefaultObjectManagers.GetEqualsMask(rhs.DefaultObjectManagers, include), include);
            ret.LightingTemplates = MaskItemExt.Factory(item.LightingTemplates.GetEqualsMask(rhs.LightingTemplates, include), include);
            ret.MusicTypes = MaskItemExt.Factory(item.MusicTypes.GetEqualsMask(rhs.MusicTypes, include), include);
            ret.Footsteps = MaskItemExt.Factory(item.Footsteps.GetEqualsMask(rhs.Footsteps, include), include);
            ret.FootstepSets = MaskItemExt.Factory(item.FootstepSets.GetEqualsMask(rhs.FootstepSets, include), include);
            ret.StoryManagerBranchNodes = MaskItemExt.Factory(item.StoryManagerBranchNodes.GetEqualsMask(rhs.StoryManagerBranchNodes, include), include);
            ret.StoryManagerQuestNodes = MaskItemExt.Factory(item.StoryManagerQuestNodes.GetEqualsMask(rhs.StoryManagerQuestNodes, include), include);
            ret.StoryManagerEventNodes = MaskItemExt.Factory(item.StoryManagerEventNodes.GetEqualsMask(rhs.StoryManagerEventNodes, include), include);
            ret.DialogBranches = MaskItemExt.Factory(item.DialogBranches.GetEqualsMask(rhs.DialogBranches, include), include);
            ret.MusicTracks = MaskItemExt.Factory(item.MusicTracks.GetEqualsMask(rhs.MusicTracks, include), include);
            ret.DialogViews = MaskItemExt.Factory(item.DialogViews.GetEqualsMask(rhs.DialogViews, include), include);
            ret.WordsOfPower = MaskItemExt.Factory(item.WordsOfPower.GetEqualsMask(rhs.WordsOfPower, include), include);
            ret.Shouts = MaskItemExt.Factory(item.Shouts.GetEqualsMask(rhs.Shouts, include), include);
            ret.EquipTypes = MaskItemExt.Factory(item.EquipTypes.GetEqualsMask(rhs.EquipTypes, include), include);
            ret.Relationships = MaskItemExt.Factory(item.Relationships.GetEqualsMask(rhs.Relationships, include), include);
            ret.Scenes = MaskItemExt.Factory(item.Scenes.GetEqualsMask(rhs.Scenes, include), include);
            ret.AssociationTypes = MaskItemExt.Factory(item.AssociationTypes.GetEqualsMask(rhs.AssociationTypes, include), include);
            ret.Outfits = MaskItemExt.Factory(item.Outfits.GetEqualsMask(rhs.Outfits, include), include);
            ret.ArtObjects = MaskItemExt.Factory(item.ArtObjects.GetEqualsMask(rhs.ArtObjects, include), include);
            ret.MaterialObjects = MaskItemExt.Factory(item.MaterialObjects.GetEqualsMask(rhs.MaterialObjects, include), include);
            ret.MovementTypes = MaskItemExt.Factory(item.MovementTypes.GetEqualsMask(rhs.MovementTypes, include), include);
            ret.SoundDescriptors = MaskItemExt.Factory(item.SoundDescriptors.GetEqualsMask(rhs.SoundDescriptors, include), include);
            ret.DualCastData = MaskItemExt.Factory(item.DualCastData.GetEqualsMask(rhs.DualCastData, include), include);
            ret.SoundCategories = MaskItemExt.Factory(item.SoundCategories.GetEqualsMask(rhs.SoundCategories, include), include);
            ret.SoundOutputModels = MaskItemExt.Factory(item.SoundOutputModels.GetEqualsMask(rhs.SoundOutputModels, include), include);
            ret.CollisionLayers = MaskItemExt.Factory(item.CollisionLayers.GetEqualsMask(rhs.CollisionLayers, include), include);
            ret.Colors = MaskItemExt.Factory(item.Colors.GetEqualsMask(rhs.Colors, include), include);
            ret.ReverbParameters = MaskItemExt.Factory(item.ReverbParameters.GetEqualsMask(rhs.ReverbParameters, include), include);
        }
        
        public string ToString(
            ISkyrimModGetter item,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISkyrimModGetter item,
            FileGeneration fg,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkyrimMod =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkyrimMod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISkyrimModGetter item,
            FileGeneration fg,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.ToString(fg, "Keywords");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.ToString(fg, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.ToString(fg, "Actions");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.ToString(fg, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.ToString(fg, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.ToString(fg, "Factions");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.ToString(fg, "HeadParts");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.ToString(fg, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.ToString(fg, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.ToString(fg, "Races");
            }
            if (printMask?.SoundMarkers?.Overall ?? true)
            {
                item.SoundMarkers?.ToString(fg, "SoundMarkers");
            }
            if (printMask?.AcousticSpaces?.Overall ?? true)
            {
                item.AcousticSpaces?.ToString(fg, "AcousticSpaces");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.ToString(fg, "MagicEffects");
            }
            if (printMask?.LandscapeTextures?.Overall ?? true)
            {
                item.LandscapeTextures?.ToString(fg, "LandscapeTextures");
            }
            if (printMask?.ObjectEffects?.Overall ?? true)
            {
                item.ObjectEffects?.ToString(fg, "ObjectEffects");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.ToString(fg, "Spells");
            }
            if (printMask?.Scrolls?.Overall ?? true)
            {
                item.Scrolls?.ToString(fg, "Scrolls");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.ToString(fg, "Activators");
            }
            if (printMask?.TalkingActivators?.Overall ?? true)
            {
                item.TalkingActivators?.ToString(fg, "TalkingActivators");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.ToString(fg, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.ToString(fg, "Books");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.ToString(fg, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.ToString(fg, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.ToString(fg, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.ToString(fg, "Lights");
            }
            if (printMask?.MiscItems?.Overall ?? true)
            {
                item.MiscItems?.ToString(fg, "MiscItems");
            }
            if (printMask?.AlchemicalApparatuses?.Overall ?? true)
            {
                item.AlchemicalApparatuses?.ToString(fg, "AlchemicalApparatuses");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.ToString(fg, "Statics");
            }
            if (printMask?.MoveableStatics?.Overall ?? true)
            {
                item.MoveableStatics?.ToString(fg, "MoveableStatics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.ToString(fg, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.ToString(fg, "Trees");
            }
            if (printMask?.Florae?.Overall ?? true)
            {
                item.Florae?.ToString(fg, "Florae");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.ToString(fg, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.ToString(fg, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.ToString(fg, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.ToString(fg, "Npcs");
            }
            if (printMask?.LeveledNpcs?.Overall ?? true)
            {
                item.LeveledNpcs?.ToString(fg, "LeveledNpcs");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.ToString(fg, "Keys");
            }
            if (printMask?.Ingestibles?.Overall ?? true)
            {
                item.Ingestibles?.ToString(fg, "Ingestibles");
            }
            if (printMask?.IdleMarkers?.Overall ?? true)
            {
                item.IdleMarkers?.ToString(fg, "IdleMarkers");
            }
            if (printMask?.ConstructibleObjects?.Overall ?? true)
            {
                item.ConstructibleObjects?.ToString(fg, "ConstructibleObjects");
            }
            if (printMask?.Projectiles?.Overall ?? true)
            {
                item.Projectiles?.ToString(fg, "Projectiles");
            }
            if (printMask?.Hazards?.Overall ?? true)
            {
                item.Hazards?.ToString(fg, "Hazards");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.ToString(fg, "SoulGems");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.ToString(fg, "LeveledItems");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.ToString(fg, "Weathers");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.ToString(fg, "Climates");
            }
            if (printMask?.ShaderParticleGeometries?.Overall ?? true)
            {
                item.ShaderParticleGeometries?.ToString(fg, "ShaderParticleGeometries");
            }
            if (printMask?.VisualEffects?.Overall ?? true)
            {
                item.VisualEffects?.ToString(fg, "VisualEffects");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.ToString(fg, "Regions");
            }
            if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
            {
                item.NavigationMeshInfoMaps?.ToString(fg, "NavigationMeshInfoMaps");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.ToString(fg, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.ToString(fg, "Worldspaces");
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                item.DialogTopics?.ToString(fg, "DialogTopics");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.ToString(fg, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.ToString(fg, "IdleAnimations");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                item.Packages?.ToString(fg, "Packages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.ToString(fg, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.ToString(fg, "LoadScreens");
            }
            if (printMask?.LeveledSpells?.Overall ?? true)
            {
                item.LeveledSpells?.ToString(fg, "LeveledSpells");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.ToString(fg, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.ToString(fg, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.ToString(fg, "EffectShaders");
            }
            if (printMask?.Explosions?.Overall ?? true)
            {
                item.Explosions?.ToString(fg, "Explosions");
            }
            if (printMask?.Debris?.Overall ?? true)
            {
                item.Debris?.ToString(fg, "Debris");
            }
            if (printMask?.ImageSpaces?.Overall ?? true)
            {
                item.ImageSpaces?.ToString(fg, "ImageSpaces");
            }
            if (printMask?.ImageSpaceAdapters?.Overall ?? true)
            {
                item.ImageSpaceAdapters?.ToString(fg, "ImageSpaceAdapters");
            }
            if (printMask?.FormLists?.Overall ?? true)
            {
                item.FormLists?.ToString(fg, "FormLists");
            }
            if (printMask?.Perks?.Overall ?? true)
            {
                item.Perks?.ToString(fg, "Perks");
            }
            if (printMask?.BodyParts?.Overall ?? true)
            {
                item.BodyParts?.ToString(fg, "BodyParts");
            }
            if (printMask?.AddonNodes?.Overall ?? true)
            {
                item.AddonNodes?.ToString(fg, "AddonNodes");
            }
            if (printMask?.ActorValueInformation?.Overall ?? true)
            {
                item.ActorValueInformation?.ToString(fg, "ActorValueInformation");
            }
            if (printMask?.CameraShots?.Overall ?? true)
            {
                item.CameraShots?.ToString(fg, "CameraShots");
            }
            if (printMask?.CameraPaths?.Overall ?? true)
            {
                item.CameraPaths?.ToString(fg, "CameraPaths");
            }
            if (printMask?.VoiceTypes?.Overall ?? true)
            {
                item.VoiceTypes?.ToString(fg, "VoiceTypes");
            }
            if (printMask?.MaterialTypes?.Overall ?? true)
            {
                item.MaterialTypes?.ToString(fg, "MaterialTypes");
            }
            if (printMask?.Impacts?.Overall ?? true)
            {
                item.Impacts?.ToString(fg, "Impacts");
            }
            if (printMask?.ImpactDataSets?.Overall ?? true)
            {
                item.ImpactDataSets?.ToString(fg, "ImpactDataSets");
            }
            if (printMask?.ArmorAddons?.Overall ?? true)
            {
                item.ArmorAddons?.ToString(fg, "ArmorAddons");
            }
            if (printMask?.EncounterZones?.Overall ?? true)
            {
                item.EncounterZones?.ToString(fg, "EncounterZones");
            }
            if (printMask?.Locations?.Overall ?? true)
            {
                item.Locations?.ToString(fg, "Locations");
            }
            if (printMask?.Messages?.Overall ?? true)
            {
                item.Messages?.ToString(fg, "Messages");
            }
            if (printMask?.DefaultObjectManagers?.Overall ?? true)
            {
                item.DefaultObjectManagers?.ToString(fg, "DefaultObjectManagers");
            }
            if (printMask?.LightingTemplates?.Overall ?? true)
            {
                item.LightingTemplates?.ToString(fg, "LightingTemplates");
            }
            if (printMask?.MusicTypes?.Overall ?? true)
            {
                item.MusicTypes?.ToString(fg, "MusicTypes");
            }
            if (printMask?.Footsteps?.Overall ?? true)
            {
                item.Footsteps?.ToString(fg, "Footsteps");
            }
            if (printMask?.FootstepSets?.Overall ?? true)
            {
                item.FootstepSets?.ToString(fg, "FootstepSets");
            }
            if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
            {
                item.StoryManagerBranchNodes?.ToString(fg, "StoryManagerBranchNodes");
            }
            if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
            {
                item.StoryManagerQuestNodes?.ToString(fg, "StoryManagerQuestNodes");
            }
            if (printMask?.StoryManagerEventNodes?.Overall ?? true)
            {
                item.StoryManagerEventNodes?.ToString(fg, "StoryManagerEventNodes");
            }
            if (printMask?.DialogBranches?.Overall ?? true)
            {
                item.DialogBranches?.ToString(fg, "DialogBranches");
            }
            if (printMask?.MusicTracks?.Overall ?? true)
            {
                item.MusicTracks?.ToString(fg, "MusicTracks");
            }
            if (printMask?.DialogViews?.Overall ?? true)
            {
                item.DialogViews?.ToString(fg, "DialogViews");
            }
            if (printMask?.WordsOfPower?.Overall ?? true)
            {
                item.WordsOfPower?.ToString(fg, "WordsOfPower");
            }
            if (printMask?.Shouts?.Overall ?? true)
            {
                item.Shouts?.ToString(fg, "Shouts");
            }
            if (printMask?.EquipTypes?.Overall ?? true)
            {
                item.EquipTypes?.ToString(fg, "EquipTypes");
            }
            if (printMask?.Relationships?.Overall ?? true)
            {
                item.Relationships?.ToString(fg, "Relationships");
            }
            if (printMask?.Scenes?.Overall ?? true)
            {
                item.Scenes?.ToString(fg, "Scenes");
            }
            if (printMask?.AssociationTypes?.Overall ?? true)
            {
                item.AssociationTypes?.ToString(fg, "AssociationTypes");
            }
            if (printMask?.Outfits?.Overall ?? true)
            {
                item.Outfits?.ToString(fg, "Outfits");
            }
            if (printMask?.ArtObjects?.Overall ?? true)
            {
                item.ArtObjects?.ToString(fg, "ArtObjects");
            }
            if (printMask?.MaterialObjects?.Overall ?? true)
            {
                item.MaterialObjects?.ToString(fg, "MaterialObjects");
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                item.MovementTypes?.ToString(fg, "MovementTypes");
            }
            if (printMask?.SoundDescriptors?.Overall ?? true)
            {
                item.SoundDescriptors?.ToString(fg, "SoundDescriptors");
            }
            if (printMask?.DualCastData?.Overall ?? true)
            {
                item.DualCastData?.ToString(fg, "DualCastData");
            }
            if (printMask?.SoundCategories?.Overall ?? true)
            {
                item.SoundCategories?.ToString(fg, "SoundCategories");
            }
            if (printMask?.SoundOutputModels?.Overall ?? true)
            {
                item.SoundOutputModels?.ToString(fg, "SoundOutputModels");
            }
            if (printMask?.CollisionLayers?.Overall ?? true)
            {
                item.CollisionLayers?.ToString(fg, "CollisionLayers");
            }
            if (printMask?.Colors?.Overall ?? true)
            {
                item.Colors?.ToString(fg, "Colors");
            }
            if (printMask?.ReverbParameters?.Overall ?? true)
            {
                item.ReverbParameters?.ToString(fg, "ReverbParameters");
            }
        }
        
        public bool HasBeenSet(
            ISkyrimModGetter item,
            SkyrimMod.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISkyrimModGetter item,
            SkyrimMod.Mask<bool> mask)
        {
            mask.ModHeader = new MaskItem<bool, ModHeader.Mask<bool>?>(true, item.ModHeader?.GetHasBeenSetMask());
            mask.GameSettings = new MaskItem<bool, Group.Mask<bool>?>(true, item.GameSettings?.GetHasBeenSetMask());
            mask.Keywords = new MaskItem<bool, Group.Mask<bool>?>(true, item.Keywords?.GetHasBeenSetMask());
            mask.LocationReferenceTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.LocationReferenceTypes?.GetHasBeenSetMask());
            mask.Actions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Actions?.GetHasBeenSetMask());
            mask.TextureSets = new MaskItem<bool, Group.Mask<bool>?>(true, item.TextureSets?.GetHasBeenSetMask());
            mask.Globals = new MaskItem<bool, Group.Mask<bool>?>(true, item.Globals?.GetHasBeenSetMask());
            mask.Classes = new MaskItem<bool, Group.Mask<bool>?>(true, item.Classes?.GetHasBeenSetMask());
            mask.Factions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Factions?.GetHasBeenSetMask());
            mask.HeadParts = new MaskItem<bool, Group.Mask<bool>?>(true, item.HeadParts?.GetHasBeenSetMask());
            mask.Hairs = new MaskItem<bool, Group.Mask<bool>?>(true, item.Hairs?.GetHasBeenSetMask());
            mask.Eyes = new MaskItem<bool, Group.Mask<bool>?>(true, item.Eyes?.GetHasBeenSetMask());
            mask.Races = new MaskItem<bool, Group.Mask<bool>?>(true, item.Races?.GetHasBeenSetMask());
            mask.SoundMarkers = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoundMarkers?.GetHasBeenSetMask());
            mask.AcousticSpaces = new MaskItem<bool, Group.Mask<bool>?>(true, item.AcousticSpaces?.GetHasBeenSetMask());
            mask.MagicEffects = new MaskItem<bool, Group.Mask<bool>?>(true, item.MagicEffects?.GetHasBeenSetMask());
            mask.LandscapeTextures = new MaskItem<bool, Group.Mask<bool>?>(true, item.LandscapeTextures?.GetHasBeenSetMask());
            mask.ObjectEffects = new MaskItem<bool, Group.Mask<bool>?>(true, item.ObjectEffects?.GetHasBeenSetMask());
            mask.Spells = new MaskItem<bool, Group.Mask<bool>?>(true, item.Spells?.GetHasBeenSetMask());
            mask.Scrolls = new MaskItem<bool, Group.Mask<bool>?>(true, item.Scrolls?.GetHasBeenSetMask());
            mask.Activators = new MaskItem<bool, Group.Mask<bool>?>(true, item.Activators?.GetHasBeenSetMask());
            mask.TalkingActivators = new MaskItem<bool, Group.Mask<bool>?>(true, item.TalkingActivators?.GetHasBeenSetMask());
            mask.Armors = new MaskItem<bool, Group.Mask<bool>?>(true, item.Armors?.GetHasBeenSetMask());
            mask.Books = new MaskItem<bool, Group.Mask<bool>?>(true, item.Books?.GetHasBeenSetMask());
            mask.Containers = new MaskItem<bool, Group.Mask<bool>?>(true, item.Containers?.GetHasBeenSetMask());
            mask.Doors = new MaskItem<bool, Group.Mask<bool>?>(true, item.Doors?.GetHasBeenSetMask());
            mask.Ingredients = new MaskItem<bool, Group.Mask<bool>?>(true, item.Ingredients?.GetHasBeenSetMask());
            mask.Lights = new MaskItem<bool, Group.Mask<bool>?>(true, item.Lights?.GetHasBeenSetMask());
            mask.MiscItems = new MaskItem<bool, Group.Mask<bool>?>(true, item.MiscItems?.GetHasBeenSetMask());
            mask.AlchemicalApparatuses = new MaskItem<bool, Group.Mask<bool>?>(true, item.AlchemicalApparatuses?.GetHasBeenSetMask());
            mask.Statics = new MaskItem<bool, Group.Mask<bool>?>(true, item.Statics?.GetHasBeenSetMask());
            mask.MoveableStatics = new MaskItem<bool, Group.Mask<bool>?>(true, item.MoveableStatics?.GetHasBeenSetMask());
            mask.Grasses = new MaskItem<bool, Group.Mask<bool>?>(true, item.Grasses?.GetHasBeenSetMask());
            mask.Trees = new MaskItem<bool, Group.Mask<bool>?>(true, item.Trees?.GetHasBeenSetMask());
            mask.Florae = new MaskItem<bool, Group.Mask<bool>?>(true, item.Florae?.GetHasBeenSetMask());
            mask.Furniture = new MaskItem<bool, Group.Mask<bool>?>(true, item.Furniture?.GetHasBeenSetMask());
            mask.Weapons = new MaskItem<bool, Group.Mask<bool>?>(true, item.Weapons?.GetHasBeenSetMask());
            mask.Ammunitions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Ammunitions?.GetHasBeenSetMask());
            mask.Npcs = new MaskItem<bool, Group.Mask<bool>?>(true, item.Npcs?.GetHasBeenSetMask());
            mask.LeveledNpcs = new MaskItem<bool, Group.Mask<bool>?>(true, item.LeveledNpcs?.GetHasBeenSetMask());
            mask.Keys = new MaskItem<bool, Group.Mask<bool>?>(true, item.Keys?.GetHasBeenSetMask());
            mask.Ingestibles = new MaskItem<bool, Group.Mask<bool>?>(true, item.Ingestibles?.GetHasBeenSetMask());
            mask.IdleMarkers = new MaskItem<bool, Group.Mask<bool>?>(true, item.IdleMarkers?.GetHasBeenSetMask());
            mask.ConstructibleObjects = new MaskItem<bool, Group.Mask<bool>?>(true, item.ConstructibleObjects?.GetHasBeenSetMask());
            mask.Projectiles = new MaskItem<bool, Group.Mask<bool>?>(true, item.Projectiles?.GetHasBeenSetMask());
            mask.Hazards = new MaskItem<bool, Group.Mask<bool>?>(true, item.Hazards?.GetHasBeenSetMask());
            mask.SoulGems = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoulGems?.GetHasBeenSetMask());
            mask.LeveledItems = new MaskItem<bool, Group.Mask<bool>?>(true, item.LeveledItems?.GetHasBeenSetMask());
            mask.Weathers = new MaskItem<bool, Group.Mask<bool>?>(true, item.Weathers?.GetHasBeenSetMask());
            mask.Climates = new MaskItem<bool, Group.Mask<bool>?>(true, item.Climates?.GetHasBeenSetMask());
            mask.ShaderParticleGeometries = new MaskItem<bool, Group.Mask<bool>?>(true, item.ShaderParticleGeometries?.GetHasBeenSetMask());
            mask.VisualEffects = new MaskItem<bool, Group.Mask<bool>?>(true, item.VisualEffects?.GetHasBeenSetMask());
            mask.Regions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Regions?.GetHasBeenSetMask());
            mask.NavigationMeshInfoMaps = new MaskItem<bool, Group.Mask<bool>?>(true, item.NavigationMeshInfoMaps?.GetHasBeenSetMask());
            mask.Cells = new MaskItem<bool, ListGroup.Mask<bool>?>(true, item.Cells?.GetHasBeenSetMask());
            mask.Worldspaces = new MaskItem<bool, Group.Mask<bool>?>(true, item.Worldspaces?.GetHasBeenSetMask());
            mask.DialogTopics = new MaskItem<bool, Group.Mask<bool>?>(true, item.DialogTopics?.GetHasBeenSetMask());
            mask.Quests = new MaskItem<bool, Group.Mask<bool>?>(true, item.Quests?.GetHasBeenSetMask());
            mask.IdleAnimations = new MaskItem<bool, Group.Mask<bool>?>(true, item.IdleAnimations?.GetHasBeenSetMask());
            mask.Packages = new MaskItem<bool, Group.Mask<bool>?>(true, item.Packages?.GetHasBeenSetMask());
            mask.CombatStyles = new MaskItem<bool, Group.Mask<bool>?>(true, item.CombatStyles?.GetHasBeenSetMask());
            mask.LoadScreens = new MaskItem<bool, Group.Mask<bool>?>(true, item.LoadScreens?.GetHasBeenSetMask());
            mask.LeveledSpells = new MaskItem<bool, Group.Mask<bool>?>(true, item.LeveledSpells?.GetHasBeenSetMask());
            mask.AnimatedObjects = new MaskItem<bool, Group.Mask<bool>?>(true, item.AnimatedObjects?.GetHasBeenSetMask());
            mask.Waters = new MaskItem<bool, Group.Mask<bool>?>(true, item.Waters?.GetHasBeenSetMask());
            mask.EffectShaders = new MaskItem<bool, Group.Mask<bool>?>(true, item.EffectShaders?.GetHasBeenSetMask());
            mask.Explosions = new MaskItem<bool, Group.Mask<bool>?>(true, item.Explosions?.GetHasBeenSetMask());
            mask.Debris = new MaskItem<bool, Group.Mask<bool>?>(true, item.Debris?.GetHasBeenSetMask());
            mask.ImageSpaces = new MaskItem<bool, Group.Mask<bool>?>(true, item.ImageSpaces?.GetHasBeenSetMask());
            mask.ImageSpaceAdapters = new MaskItem<bool, Group.Mask<bool>?>(true, item.ImageSpaceAdapters?.GetHasBeenSetMask());
            mask.FormLists = new MaskItem<bool, Group.Mask<bool>?>(true, item.FormLists?.GetHasBeenSetMask());
            mask.Perks = new MaskItem<bool, Group.Mask<bool>?>(true, item.Perks?.GetHasBeenSetMask());
            mask.BodyParts = new MaskItem<bool, Group.Mask<bool>?>(true, item.BodyParts?.GetHasBeenSetMask());
            mask.AddonNodes = new MaskItem<bool, Group.Mask<bool>?>(true, item.AddonNodes?.GetHasBeenSetMask());
            mask.ActorValueInformation = new MaskItem<bool, Group.Mask<bool>?>(true, item.ActorValueInformation?.GetHasBeenSetMask());
            mask.CameraShots = new MaskItem<bool, Group.Mask<bool>?>(true, item.CameraShots?.GetHasBeenSetMask());
            mask.CameraPaths = new MaskItem<bool, Group.Mask<bool>?>(true, item.CameraPaths?.GetHasBeenSetMask());
            mask.VoiceTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.VoiceTypes?.GetHasBeenSetMask());
            mask.MaterialTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.MaterialTypes?.GetHasBeenSetMask());
            mask.Impacts = new MaskItem<bool, Group.Mask<bool>?>(true, item.Impacts?.GetHasBeenSetMask());
            mask.ImpactDataSets = new MaskItem<bool, Group.Mask<bool>?>(true, item.ImpactDataSets?.GetHasBeenSetMask());
            mask.ArmorAddons = new MaskItem<bool, Group.Mask<bool>?>(true, item.ArmorAddons?.GetHasBeenSetMask());
            mask.EncounterZones = new MaskItem<bool, Group.Mask<bool>?>(true, item.EncounterZones?.GetHasBeenSetMask());
            mask.Locations = new MaskItem<bool, Group.Mask<bool>?>(true, item.Locations?.GetHasBeenSetMask());
            mask.Messages = new MaskItem<bool, Group.Mask<bool>?>(true, item.Messages?.GetHasBeenSetMask());
            mask.DefaultObjectManagers = new MaskItem<bool, Group.Mask<bool>?>(true, item.DefaultObjectManagers?.GetHasBeenSetMask());
            mask.LightingTemplates = new MaskItem<bool, Group.Mask<bool>?>(true, item.LightingTemplates?.GetHasBeenSetMask());
            mask.MusicTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.MusicTypes?.GetHasBeenSetMask());
            mask.Footsteps = new MaskItem<bool, Group.Mask<bool>?>(true, item.Footsteps?.GetHasBeenSetMask());
            mask.FootstepSets = new MaskItem<bool, Group.Mask<bool>?>(true, item.FootstepSets?.GetHasBeenSetMask());
            mask.StoryManagerBranchNodes = new MaskItem<bool, Group.Mask<bool>?>(true, item.StoryManagerBranchNodes?.GetHasBeenSetMask());
            mask.StoryManagerQuestNodes = new MaskItem<bool, Group.Mask<bool>?>(true, item.StoryManagerQuestNodes?.GetHasBeenSetMask());
            mask.StoryManagerEventNodes = new MaskItem<bool, Group.Mask<bool>?>(true, item.StoryManagerEventNodes?.GetHasBeenSetMask());
            mask.DialogBranches = new MaskItem<bool, Group.Mask<bool>?>(true, item.DialogBranches?.GetHasBeenSetMask());
            mask.MusicTracks = new MaskItem<bool, Group.Mask<bool>?>(true, item.MusicTracks?.GetHasBeenSetMask());
            mask.DialogViews = new MaskItem<bool, Group.Mask<bool>?>(true, item.DialogViews?.GetHasBeenSetMask());
            mask.WordsOfPower = new MaskItem<bool, Group.Mask<bool>?>(true, item.WordsOfPower?.GetHasBeenSetMask());
            mask.Shouts = new MaskItem<bool, Group.Mask<bool>?>(true, item.Shouts?.GetHasBeenSetMask());
            mask.EquipTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.EquipTypes?.GetHasBeenSetMask());
            mask.Relationships = new MaskItem<bool, Group.Mask<bool>?>(true, item.Relationships?.GetHasBeenSetMask());
            mask.Scenes = new MaskItem<bool, Group.Mask<bool>?>(true, item.Scenes?.GetHasBeenSetMask());
            mask.AssociationTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.AssociationTypes?.GetHasBeenSetMask());
            mask.Outfits = new MaskItem<bool, Group.Mask<bool>?>(true, item.Outfits?.GetHasBeenSetMask());
            mask.ArtObjects = new MaskItem<bool, Group.Mask<bool>?>(true, item.ArtObjects?.GetHasBeenSetMask());
            mask.MaterialObjects = new MaskItem<bool, Group.Mask<bool>?>(true, item.MaterialObjects?.GetHasBeenSetMask());
            mask.MovementTypes = new MaskItem<bool, Group.Mask<bool>?>(true, item.MovementTypes?.GetHasBeenSetMask());
            mask.SoundDescriptors = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoundDescriptors?.GetHasBeenSetMask());
            mask.DualCastData = new MaskItem<bool, Group.Mask<bool>?>(true, item.DualCastData?.GetHasBeenSetMask());
            mask.SoundCategories = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoundCategories?.GetHasBeenSetMask());
            mask.SoundOutputModels = new MaskItem<bool, Group.Mask<bool>?>(true, item.SoundOutputModels?.GetHasBeenSetMask());
            mask.CollisionLayers = new MaskItem<bool, Group.Mask<bool>?>(true, item.CollisionLayers?.GetHasBeenSetMask());
            mask.Colors = new MaskItem<bool, Group.Mask<bool>?>(true, item.Colors?.GetHasBeenSetMask());
            mask.ReverbParameters = new MaskItem<bool, Group.Mask<bool>?>(true, item.ReverbParameters?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkyrimModGetter? lhs,
            ISkyrimModGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(lhs.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(lhs.Keywords, rhs.Keywords)) return false;
            if (!object.Equals(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
            if (!object.Equals(lhs.Actions, rhs.Actions)) return false;
            if (!object.Equals(lhs.TextureSets, rhs.TextureSets)) return false;
            if (!object.Equals(lhs.Globals, rhs.Globals)) return false;
            if (!object.Equals(lhs.Classes, rhs.Classes)) return false;
            if (!object.Equals(lhs.Factions, rhs.Factions)) return false;
            if (!object.Equals(lhs.HeadParts, rhs.HeadParts)) return false;
            if (!object.Equals(lhs.Hairs, rhs.Hairs)) return false;
            if (!object.Equals(lhs.Eyes, rhs.Eyes)) return false;
            if (!object.Equals(lhs.Races, rhs.Races)) return false;
            if (!object.Equals(lhs.SoundMarkers, rhs.SoundMarkers)) return false;
            if (!object.Equals(lhs.AcousticSpaces, rhs.AcousticSpaces)) return false;
            if (!object.Equals(lhs.MagicEffects, rhs.MagicEffects)) return false;
            if (!object.Equals(lhs.LandscapeTextures, rhs.LandscapeTextures)) return false;
            if (!object.Equals(lhs.ObjectEffects, rhs.ObjectEffects)) return false;
            if (!object.Equals(lhs.Spells, rhs.Spells)) return false;
            if (!object.Equals(lhs.Scrolls, rhs.Scrolls)) return false;
            if (!object.Equals(lhs.Activators, rhs.Activators)) return false;
            if (!object.Equals(lhs.TalkingActivators, rhs.TalkingActivators)) return false;
            if (!object.Equals(lhs.Armors, rhs.Armors)) return false;
            if (!object.Equals(lhs.Books, rhs.Books)) return false;
            if (!object.Equals(lhs.Containers, rhs.Containers)) return false;
            if (!object.Equals(lhs.Doors, rhs.Doors)) return false;
            if (!object.Equals(lhs.Ingredients, rhs.Ingredients)) return false;
            if (!object.Equals(lhs.Lights, rhs.Lights)) return false;
            if (!object.Equals(lhs.MiscItems, rhs.MiscItems)) return false;
            if (!object.Equals(lhs.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
            if (!object.Equals(lhs.Statics, rhs.Statics)) return false;
            if (!object.Equals(lhs.MoveableStatics, rhs.MoveableStatics)) return false;
            if (!object.Equals(lhs.Grasses, rhs.Grasses)) return false;
            if (!object.Equals(lhs.Trees, rhs.Trees)) return false;
            if (!object.Equals(lhs.Florae, rhs.Florae)) return false;
            if (!object.Equals(lhs.Furniture, rhs.Furniture)) return false;
            if (!object.Equals(lhs.Weapons, rhs.Weapons)) return false;
            if (!object.Equals(lhs.Ammunitions, rhs.Ammunitions)) return false;
            if (!object.Equals(lhs.Npcs, rhs.Npcs)) return false;
            if (!object.Equals(lhs.LeveledNpcs, rhs.LeveledNpcs)) return false;
            if (!object.Equals(lhs.Keys, rhs.Keys)) return false;
            if (!object.Equals(lhs.Ingestibles, rhs.Ingestibles)) return false;
            if (!object.Equals(lhs.IdleMarkers, rhs.IdleMarkers)) return false;
            if (!object.Equals(lhs.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
            if (!object.Equals(lhs.Projectiles, rhs.Projectiles)) return false;
            if (!object.Equals(lhs.Hazards, rhs.Hazards)) return false;
            if (!object.Equals(lhs.SoulGems, rhs.SoulGems)) return false;
            if (!object.Equals(lhs.LeveledItems, rhs.LeveledItems)) return false;
            if (!object.Equals(lhs.Weathers, rhs.Weathers)) return false;
            if (!object.Equals(lhs.Climates, rhs.Climates)) return false;
            if (!object.Equals(lhs.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
            if (!object.Equals(lhs.VisualEffects, rhs.VisualEffects)) return false;
            if (!object.Equals(lhs.Regions, rhs.Regions)) return false;
            if (!object.Equals(lhs.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
            if (!object.Equals(lhs.Cells, rhs.Cells)) return false;
            if (!object.Equals(lhs.Worldspaces, rhs.Worldspaces)) return false;
            if (!object.Equals(lhs.DialogTopics, rhs.DialogTopics)) return false;
            if (!object.Equals(lhs.Quests, rhs.Quests)) return false;
            if (!object.Equals(lhs.IdleAnimations, rhs.IdleAnimations)) return false;
            if (!object.Equals(lhs.Packages, rhs.Packages)) return false;
            if (!object.Equals(lhs.CombatStyles, rhs.CombatStyles)) return false;
            if (!object.Equals(lhs.LoadScreens, rhs.LoadScreens)) return false;
            if (!object.Equals(lhs.LeveledSpells, rhs.LeveledSpells)) return false;
            if (!object.Equals(lhs.AnimatedObjects, rhs.AnimatedObjects)) return false;
            if (!object.Equals(lhs.Waters, rhs.Waters)) return false;
            if (!object.Equals(lhs.EffectShaders, rhs.EffectShaders)) return false;
            if (!object.Equals(lhs.Explosions, rhs.Explosions)) return false;
            if (!object.Equals(lhs.Debris, rhs.Debris)) return false;
            if (!object.Equals(lhs.ImageSpaces, rhs.ImageSpaces)) return false;
            if (!object.Equals(lhs.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
            if (!object.Equals(lhs.FormLists, rhs.FormLists)) return false;
            if (!object.Equals(lhs.Perks, rhs.Perks)) return false;
            if (!object.Equals(lhs.BodyParts, rhs.BodyParts)) return false;
            if (!object.Equals(lhs.AddonNodes, rhs.AddonNodes)) return false;
            if (!object.Equals(lhs.ActorValueInformation, rhs.ActorValueInformation)) return false;
            if (!object.Equals(lhs.CameraShots, rhs.CameraShots)) return false;
            if (!object.Equals(lhs.CameraPaths, rhs.CameraPaths)) return false;
            if (!object.Equals(lhs.VoiceTypes, rhs.VoiceTypes)) return false;
            if (!object.Equals(lhs.MaterialTypes, rhs.MaterialTypes)) return false;
            if (!object.Equals(lhs.Impacts, rhs.Impacts)) return false;
            if (!object.Equals(lhs.ImpactDataSets, rhs.ImpactDataSets)) return false;
            if (!object.Equals(lhs.ArmorAddons, rhs.ArmorAddons)) return false;
            if (!object.Equals(lhs.EncounterZones, rhs.EncounterZones)) return false;
            if (!object.Equals(lhs.Locations, rhs.Locations)) return false;
            if (!object.Equals(lhs.Messages, rhs.Messages)) return false;
            if (!object.Equals(lhs.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
            if (!object.Equals(lhs.LightingTemplates, rhs.LightingTemplates)) return false;
            if (!object.Equals(lhs.MusicTypes, rhs.MusicTypes)) return false;
            if (!object.Equals(lhs.Footsteps, rhs.Footsteps)) return false;
            if (!object.Equals(lhs.FootstepSets, rhs.FootstepSets)) return false;
            if (!object.Equals(lhs.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
            if (!object.Equals(lhs.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
            if (!object.Equals(lhs.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
            if (!object.Equals(lhs.DialogBranches, rhs.DialogBranches)) return false;
            if (!object.Equals(lhs.MusicTracks, rhs.MusicTracks)) return false;
            if (!object.Equals(lhs.DialogViews, rhs.DialogViews)) return false;
            if (!object.Equals(lhs.WordsOfPower, rhs.WordsOfPower)) return false;
            if (!object.Equals(lhs.Shouts, rhs.Shouts)) return false;
            if (!object.Equals(lhs.EquipTypes, rhs.EquipTypes)) return false;
            if (!object.Equals(lhs.Relationships, rhs.Relationships)) return false;
            if (!object.Equals(lhs.Scenes, rhs.Scenes)) return false;
            if (!object.Equals(lhs.AssociationTypes, rhs.AssociationTypes)) return false;
            if (!object.Equals(lhs.Outfits, rhs.Outfits)) return false;
            if (!object.Equals(lhs.ArtObjects, rhs.ArtObjects)) return false;
            if (!object.Equals(lhs.MaterialObjects, rhs.MaterialObjects)) return false;
            if (!object.Equals(lhs.MovementTypes, rhs.MovementTypes)) return false;
            if (!object.Equals(lhs.SoundDescriptors, rhs.SoundDescriptors)) return false;
            if (!object.Equals(lhs.DualCastData, rhs.DualCastData)) return false;
            if (!object.Equals(lhs.SoundCategories, rhs.SoundCategories)) return false;
            if (!object.Equals(lhs.SoundOutputModels, rhs.SoundOutputModels)) return false;
            if (!object.Equals(lhs.CollisionLayers, rhs.CollisionLayers)) return false;
            if (!object.Equals(lhs.Colors, rhs.Colors)) return false;
            if (!object.Equals(lhs.ReverbParameters, rhs.ReverbParameters)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISkyrimModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.HeadParts);
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.Races);
            hash.Add(item.SoundMarkers);
            hash.Add(item.AcousticSpaces);
            hash.Add(item.MagicEffects);
            hash.Add(item.LandscapeTextures);
            hash.Add(item.ObjectEffects);
            hash.Add(item.Spells);
            hash.Add(item.Scrolls);
            hash.Add(item.Activators);
            hash.Add(item.TalkingActivators);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.MiscItems);
            hash.Add(item.AlchemicalApparatuses);
            hash.Add(item.Statics);
            hash.Add(item.MoveableStatics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Florae);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.LeveledNpcs);
            hash.Add(item.Keys);
            hash.Add(item.Ingestibles);
            hash.Add(item.IdleMarkers);
            hash.Add(item.ConstructibleObjects);
            hash.Add(item.Projectiles);
            hash.Add(item.Hazards);
            hash.Add(item.SoulGems);
            hash.Add(item.LeveledItems);
            hash.Add(item.Weathers);
            hash.Add(item.Climates);
            hash.Add(item.ShaderParticleGeometries);
            hash.Add(item.VisualEffects);
            hash.Add(item.Regions);
            hash.Add(item.NavigationMeshInfoMaps);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.DialogTopics);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.Packages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.LeveledSpells);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            hash.Add(item.Explosions);
            hash.Add(item.Debris);
            hash.Add(item.ImageSpaces);
            hash.Add(item.ImageSpaceAdapters);
            hash.Add(item.FormLists);
            hash.Add(item.Perks);
            hash.Add(item.BodyParts);
            hash.Add(item.AddonNodes);
            hash.Add(item.ActorValueInformation);
            hash.Add(item.CameraShots);
            hash.Add(item.CameraPaths);
            hash.Add(item.VoiceTypes);
            hash.Add(item.MaterialTypes);
            hash.Add(item.Impacts);
            hash.Add(item.ImpactDataSets);
            hash.Add(item.ArmorAddons);
            hash.Add(item.EncounterZones);
            hash.Add(item.Locations);
            hash.Add(item.Messages);
            hash.Add(item.DefaultObjectManagers);
            hash.Add(item.LightingTemplates);
            hash.Add(item.MusicTypes);
            hash.Add(item.Footsteps);
            hash.Add(item.FootstepSets);
            hash.Add(item.StoryManagerBranchNodes);
            hash.Add(item.StoryManagerQuestNodes);
            hash.Add(item.StoryManagerEventNodes);
            hash.Add(item.DialogBranches);
            hash.Add(item.MusicTracks);
            hash.Add(item.DialogViews);
            hash.Add(item.WordsOfPower);
            hash.Add(item.Shouts);
            hash.Add(item.EquipTypes);
            hash.Add(item.Relationships);
            hash.Add(item.Scenes);
            hash.Add(item.AssociationTypes);
            hash.Add(item.Outfits);
            hash.Add(item.ArtObjects);
            hash.Add(item.MaterialObjects);
            hash.Add(item.MovementTypes);
            hash.Add(item.SoundDescriptors);
            hash.Add(item.DualCastData);
            hash.Add(item.SoundCategories);
            hash.Add(item.SoundOutputModels);
            hash.Add(item.CollisionLayers);
            hash.Add(item.Colors);
            hash.Add(item.ReverbParameters);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SkyrimMod.GetNew();
        }
        
        #region Mutagen
        public object GetGroup<TMajor>(ISkyrimModGetter obj)
            where TMajor : IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings.RecordCache;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords.RecordCache;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes.RecordCache;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions.RecordCache;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets.RecordCache;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals.RecordCache;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes.RecordCache;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions.RecordCache;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts.RecordCache;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs.RecordCache;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    return obj.Eyes.RecordCache;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races.RecordCache;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    return obj.SoundMarkers.RecordCache;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    return obj.AcousticSpaces.RecordCache;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects.RecordCache;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    return obj.LandscapeTextures.RecordCache;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    return obj.ObjectEffects.RecordCache;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells.RecordCache;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    return obj.Scrolls.RecordCache;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators.RecordCache;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    return obj.TalkingActivators.RecordCache;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors.RecordCache;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books.RecordCache;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers.RecordCache;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors.RecordCache;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients.RecordCache;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights.RecordCache;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    return obj.MiscItems.RecordCache;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatuses.RecordCache;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics.RecordCache;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    return obj.MoveableStatics.RecordCache;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses.RecordCache;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees.RecordCache;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Florae.RecordCache;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture.RecordCache;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons.RecordCache;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions.RecordCache;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs.RecordCache;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    return obj.LeveledNpcs.RecordCache;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys.RecordCache;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    return obj.Ingestibles.RecordCache;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    return obj.IdleMarkers.RecordCache;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    return obj.ConstructibleObjects.RecordCache;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    return obj.Projectiles.RecordCache;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    return obj.Hazards.RecordCache;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems.RecordCache;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems.RecordCache;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers.RecordCache;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates.RecordCache;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    return obj.ShaderParticleGeometries.RecordCache;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    return obj.VisualEffects.RecordCache;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions.RecordCache;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    return obj.NavigationMeshInfoMaps.RecordCache;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces.RecordCache;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    return obj.DialogTopics.RecordCache;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests.RecordCache;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations.RecordCache;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    return obj.Packages.RecordCache;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles.RecordCache;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens.RecordCache;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    return obj.LeveledSpells.RecordCache;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects.RecordCache;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters.RecordCache;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders.RecordCache;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    return obj.Explosions.RecordCache;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    return obj.Debris.RecordCache;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    return obj.ImageSpaces.RecordCache;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    return obj.ImageSpaceAdapters.RecordCache;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    return obj.FormLists.RecordCache;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    return obj.Perks.RecordCache;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    return obj.BodyParts.RecordCache;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    return obj.AddonNodes.RecordCache;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    return obj.ActorValueInformation.RecordCache;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    return obj.CameraShots.RecordCache;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    return obj.CameraPaths.RecordCache;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    return obj.VoiceTypes.RecordCache;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    return obj.MaterialTypes.RecordCache;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    return obj.Impacts.RecordCache;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    return obj.ImpactDataSets.RecordCache;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    return obj.ArmorAddons.RecordCache;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    return obj.EncounterZones.RecordCache;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    return obj.Locations.RecordCache;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    return obj.Messages.RecordCache;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    return obj.DefaultObjectManagers.RecordCache;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    return obj.LightingTemplates.RecordCache;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    return obj.MusicTypes.RecordCache;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    return obj.Footsteps.RecordCache;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    return obj.FootstepSets.RecordCache;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    return obj.StoryManagerBranchNodes.RecordCache;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    return obj.StoryManagerQuestNodes.RecordCache;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    return obj.StoryManagerEventNodes.RecordCache;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    return obj.DialogBranches.RecordCache;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    return obj.MusicTracks.RecordCache;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    return obj.DialogViews.RecordCache;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    return obj.WordsOfPower.RecordCache;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    return obj.Shouts.RecordCache;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    return obj.EquipTypes.RecordCache;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    return obj.Relationships.RecordCache;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    return obj.Scenes.RecordCache;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    return obj.AssociationTypes.RecordCache;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    return obj.Outfits.RecordCache;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    return obj.ArtObjects.RecordCache;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    return obj.MaterialObjects.RecordCache;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    return obj.MovementTypes.RecordCache;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    return obj.SoundDescriptors.RecordCache;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    return obj.DualCastData.RecordCache;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    return obj.SoundCategories.RecordCache;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    return obj.SoundOutputModels.RecordCache;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    return obj.CollisionLayers.RecordCache;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    return obj.Colors.RecordCache;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    return obj.ReverbParameters.RecordCache;
                default:
                    throw new ArgumentException($"Unknown major record type: {typeof(TMajor)}");
            }
        }
        
        const int CutCount = 100;
        public static void WriteParallel(
            ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            var masterRefs = UtilityTranslation.ConstructWriteMasters(item, param);
            var bundle = new WritingBundle(GameConstants.Skyrim);
            bundle.MasterReferences = masterRefs;
            SkyrimModBinaryWriteTranslation.WriteModHeader(
                item,
                new MutagenWriter(stream, bundle),
                modKey);
            Stream[] outputStreams = new Stream[112];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, masterRefs, 0, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Keywords, masterRefs, 1, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, masterRefs, 2, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Actions, masterRefs, 3, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, masterRefs, 4, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Globals, masterRefs, 5, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Classes, masterRefs, 6, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Factions, masterRefs, 7, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, masterRefs, 8, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Hairs, masterRefs, 9, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Eyes, masterRefs, 10, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Races, masterRefs, 11, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundMarkers, masterRefs, 12, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AcousticSpaces, masterRefs, 13, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, masterRefs, 14, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LandscapeTextures, masterRefs, 15, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ObjectEffects, masterRefs, 16, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Spells, masterRefs, 17, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Scrolls, masterRefs, 18, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Activators, masterRefs, 19, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.TalkingActivators, masterRefs, 20, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Armors, masterRefs, 21, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Books, masterRefs, 22, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Containers, masterRefs, 23, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Doors, masterRefs, 24, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, masterRefs, 25, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Lights, masterRefs, 26, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MiscItems, masterRefs, 27, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatuses, masterRefs, 28, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Statics, masterRefs, 29, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MoveableStatics, masterRefs, 30, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Grasses, masterRefs, 31, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Trees, masterRefs, 32, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Florae, masterRefs, 33, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Furniture, masterRefs, 34, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Weapons, masterRefs, 35, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, masterRefs, 36, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Npcs, masterRefs, 37, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LeveledNpcs, masterRefs, 38, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Keys, masterRefs, 39, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Ingestibles, masterRefs, 40, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.IdleMarkers, masterRefs, 41, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ConstructibleObjects, masterRefs, 42, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Projectiles, masterRefs, 43, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Hazards, masterRefs, 44, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, masterRefs, 45, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, masterRefs, 46, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Weathers, masterRefs, 47, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Climates, masterRefs, 48, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ShaderParticleGeometries, masterRefs, 49, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.VisualEffects, masterRefs, 50, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Regions, masterRefs, 51, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshInfoMaps, masterRefs, 52, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteCellsParallel(item.Cells, masterRefs, 53, outputStreams));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, masterRefs, 54, outputStreams));
            toDo.Add(() => WriteDialogTopicsParallel(item.DialogTopics, masterRefs, 55, outputStreams));
            toDo.Add(() => WriteGroupParallel(item.Quests, masterRefs, 56, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, masterRefs, 57, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Packages, masterRefs, 58, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, masterRefs, 59, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, masterRefs, 60, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpells, masterRefs, 61, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, masterRefs, 62, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Waters, masterRefs, 63, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, masterRefs, 64, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Explosions, masterRefs, 65, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Debris, masterRefs, 66, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaces, masterRefs, 67, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaceAdapters, masterRefs, 68, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.FormLists, masterRefs, 69, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Perks, masterRefs, 70, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.BodyParts, masterRefs, 71, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AddonNodes, masterRefs, 72, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ActorValueInformation, masterRefs, 73, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CameraShots, masterRefs, 74, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CameraPaths, masterRefs, 75, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.VoiceTypes, masterRefs, 76, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MaterialTypes, masterRefs, 77, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Impacts, masterRefs, 78, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ImpactDataSets, masterRefs, 79, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ArmorAddons, masterRefs, 80, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.EncounterZones, masterRefs, 81, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Locations, masterRefs, 82, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Messages, masterRefs, 83, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjectManagers, masterRefs, 84, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.LightingTemplates, masterRefs, 85, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MusicTypes, masterRefs, 86, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Footsteps, masterRefs, 87, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.FootstepSets, masterRefs, 88, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerBranchNodes, masterRefs, 89, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerQuestNodes, masterRefs, 90, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerEventNodes, masterRefs, 91, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DialogBranches, masterRefs, 92, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MusicTracks, masterRefs, 93, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DialogViews, masterRefs, 94, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.WordsOfPower, masterRefs, 95, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Shouts, masterRefs, 96, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.EquipTypes, masterRefs, 97, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Relationships, masterRefs, 98, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Scenes, masterRefs, 99, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.AssociationTypes, masterRefs, 100, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Outfits, masterRefs, 101, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ArtObjects, masterRefs, 102, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MaterialObjects, masterRefs, 103, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.MovementTypes, masterRefs, 104, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundDescriptors, masterRefs, 105, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.DualCastData, masterRefs, 106, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundCategories, masterRefs, 107, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.SoundOutputModels, masterRefs, 108, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.CollisionLayers, masterRefs, 109, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.Colors, masterRefs, 110, outputStreams, param.StringsWriter));
            toDo.Add(() => WriteGroupParallel(item.ReverbParameters, masterRefs, 111, outputStreams, param.StringsWriter));
            Parallel.Invoke(toDo.ToArray());
            UtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IGroupGetter<T> group,
            MasterReferenceReader masters,
            int targetIndex,
            Stream[] streamDepositArray,
            StringsWriter? stringsWriter)
            where T : class, ISkyrimMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Records.Cut(CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[GameConstants.Skyrim.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            var bundle = new WritingBundle(GameConstants.Skyrim)
            {
                MasterReferences = masters,
                StringsWriter = stringsWriter
            };
            using (var stream = new MutagenWriter(groupByteStream, GameConstants.Skyrim, dispose: false))
            {
                stream.Position += 8;
                GroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            UtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public IEnumerable<FormKey> GetLinkFormKeys(ISkyrimModGetter obj)
        {
            foreach (var item in obj.ModHeader.LinkFormKeys)
            {
                yield return item;
            }
            if (obj.GameSettings is ILinkedFormKeyContainer GameSettingslinkCont)
            {
                foreach (var item in GameSettingslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keywords is ILinkedFormKeyContainer KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is ILinkedFormKeyContainer LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Actions is ILinkedFormKeyContainer ActionslinkCont)
            {
                foreach (var item in ActionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.TextureSets is ILinkedFormKeyContainer TextureSetslinkCont)
            {
                foreach (var item in TextureSetslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Globals is ILinkedFormKeyContainer GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Classes is ILinkedFormKeyContainer ClasseslinkCont)
            {
                foreach (var item in ClasseslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Factions is ILinkedFormKeyContainer FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.HeadParts is ILinkedFormKeyContainer HeadPartslinkCont)
            {
                foreach (var item in HeadPartslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Hairs is ILinkedFormKeyContainer HairslinkCont)
            {
                foreach (var item in HairslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Eyes is ILinkedFormKeyContainer EyeslinkCont)
            {
                foreach (var item in EyeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Races is ILinkedFormKeyContainer RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoundMarkers is ILinkedFormKeyContainer SoundMarkerslinkCont)
            {
                foreach (var item in SoundMarkerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AcousticSpaces is ILinkedFormKeyContainer AcousticSpaceslinkCont)
            {
                foreach (var item in AcousticSpaceslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MagicEffects is ILinkedFormKeyContainer MagicEffectslinkCont)
            {
                foreach (var item in MagicEffectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LandscapeTextures is ILinkedFormKeyContainer LandscapeTextureslinkCont)
            {
                foreach (var item in LandscapeTextureslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ObjectEffects is ILinkedFormKeyContainer ObjectEffectslinkCont)
            {
                foreach (var item in ObjectEffectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Spells is ILinkedFormKeyContainer SpellslinkCont)
            {
                foreach (var item in SpellslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Scrolls is ILinkedFormKeyContainer ScrollslinkCont)
            {
                foreach (var item in ScrollslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Activators is ILinkedFormKeyContainer ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.TalkingActivators is ILinkedFormKeyContainer TalkingActivatorslinkCont)
            {
                foreach (var item in TalkingActivatorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Armors is ILinkedFormKeyContainer ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Books is ILinkedFormKeyContainer BookslinkCont)
            {
                foreach (var item in BookslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Containers is ILinkedFormKeyContainer ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Doors is ILinkedFormKeyContainer DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ingredients is ILinkedFormKeyContainer IngredientslinkCont)
            {
                foreach (var item in IngredientslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Lights is ILinkedFormKeyContainer LightslinkCont)
            {
                foreach (var item in LightslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MiscItems is ILinkedFormKeyContainer MiscItemslinkCont)
            {
                foreach (var item in MiscItemslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AlchemicalApparatuses is ILinkedFormKeyContainer AlchemicalApparatuseslinkCont)
            {
                foreach (var item in AlchemicalApparatuseslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Statics is ILinkedFormKeyContainer StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MoveableStatics is ILinkedFormKeyContainer MoveableStaticslinkCont)
            {
                foreach (var item in MoveableStaticslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Grasses is ILinkedFormKeyContainer GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Trees is ILinkedFormKeyContainer TreeslinkCont)
            {
                foreach (var item in TreeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Florae is ILinkedFormKeyContainer FloraelinkCont)
            {
                foreach (var item in FloraelinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Furniture is ILinkedFormKeyContainer FurniturelinkCont)
            {
                foreach (var item in FurniturelinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Weapons is ILinkedFormKeyContainer WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ammunitions is ILinkedFormKeyContainer AmmunitionslinkCont)
            {
                foreach (var item in AmmunitionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Npcs is ILinkedFormKeyContainer NpcslinkCont)
            {
                foreach (var item in NpcslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LeveledNpcs is ILinkedFormKeyContainer LeveledNpcslinkCont)
            {
                foreach (var item in LeveledNpcslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Keys is ILinkedFormKeyContainer KeyslinkCont)
            {
                foreach (var item in KeyslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Ingestibles is ILinkedFormKeyContainer IngestibleslinkCont)
            {
                foreach (var item in IngestibleslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.IdleMarkers is ILinkedFormKeyContainer IdleMarkerslinkCont)
            {
                foreach (var item in IdleMarkerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ConstructibleObjects is ILinkedFormKeyContainer ConstructibleObjectslinkCont)
            {
                foreach (var item in ConstructibleObjectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Projectiles is ILinkedFormKeyContainer ProjectileslinkCont)
            {
                foreach (var item in ProjectileslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Hazards is ILinkedFormKeyContainer HazardslinkCont)
            {
                foreach (var item in HazardslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoulGems is ILinkedFormKeyContainer SoulGemslinkCont)
            {
                foreach (var item in SoulGemslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is ILinkedFormKeyContainer LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Weathers is ILinkedFormKeyContainer WeatherslinkCont)
            {
                foreach (var item in WeatherslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Climates is ILinkedFormKeyContainer ClimateslinkCont)
            {
                foreach (var item in ClimateslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ShaderParticleGeometries is ILinkedFormKeyContainer ShaderParticleGeometrieslinkCont)
            {
                foreach (var item in ShaderParticleGeometrieslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.VisualEffects is ILinkedFormKeyContainer VisualEffectslinkCont)
            {
                foreach (var item in VisualEffectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Regions is ILinkedFormKeyContainer RegionslinkCont)
            {
                foreach (var item in RegionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.NavigationMeshInfoMaps is ILinkedFormKeyContainer NavigationMeshInfoMapslinkCont)
            {
                foreach (var item in NavigationMeshInfoMapslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Cells.LinkFormKeys)
            {
                yield return item;
            }
            if (obj.Worldspaces is ILinkedFormKeyContainer WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.DialogTopics is ILinkedFormKeyContainer DialogTopicslinkCont)
            {
                foreach (var item in DialogTopicslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Quests is ILinkedFormKeyContainer QuestslinkCont)
            {
                foreach (var item in QuestslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.IdleAnimations is ILinkedFormKeyContainer IdleAnimationslinkCont)
            {
                foreach (var item in IdleAnimationslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Packages is ILinkedFormKeyContainer PackageslinkCont)
            {
                foreach (var item in PackageslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.CombatStyles is ILinkedFormKeyContainer CombatStyleslinkCont)
            {
                foreach (var item in CombatStyleslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LoadScreens is ILinkedFormKeyContainer LoadScreenslinkCont)
            {
                foreach (var item in LoadScreenslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LeveledSpells is ILinkedFormKeyContainer LeveledSpellslinkCont)
            {
                foreach (var item in LeveledSpellslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AnimatedObjects is ILinkedFormKeyContainer AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Waters is ILinkedFormKeyContainer WaterslinkCont)
            {
                foreach (var item in WaterslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.EffectShaders is ILinkedFormKeyContainer EffectShaderslinkCont)
            {
                foreach (var item in EffectShaderslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Explosions is ILinkedFormKeyContainer ExplosionslinkCont)
            {
                foreach (var item in ExplosionslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Debris is ILinkedFormKeyContainer DebrislinkCont)
            {
                foreach (var item in DebrislinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ImageSpaces is ILinkedFormKeyContainer ImageSpaceslinkCont)
            {
                foreach (var item in ImageSpaceslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ImageSpaceAdapters is ILinkedFormKeyContainer ImageSpaceAdapterslinkCont)
            {
                foreach (var item in ImageSpaceAdapterslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.FormLists is ILinkedFormKeyContainer FormListslinkCont)
            {
                foreach (var item in FormListslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Perks is ILinkedFormKeyContainer PerkslinkCont)
            {
                foreach (var item in PerkslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.BodyParts is ILinkedFormKeyContainer BodyPartslinkCont)
            {
                foreach (var item in BodyPartslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AddonNodes is ILinkedFormKeyContainer AddonNodeslinkCont)
            {
                foreach (var item in AddonNodeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ActorValueInformation is ILinkedFormKeyContainer ActorValueInformationlinkCont)
            {
                foreach (var item in ActorValueInformationlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.CameraShots is ILinkedFormKeyContainer CameraShotslinkCont)
            {
                foreach (var item in CameraShotslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.CameraPaths is ILinkedFormKeyContainer CameraPathslinkCont)
            {
                foreach (var item in CameraPathslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.VoiceTypes is ILinkedFormKeyContainer VoiceTypeslinkCont)
            {
                foreach (var item in VoiceTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MaterialTypes is ILinkedFormKeyContainer MaterialTypeslinkCont)
            {
                foreach (var item in MaterialTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Impacts is ILinkedFormKeyContainer ImpactslinkCont)
            {
                foreach (var item in ImpactslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ImpactDataSets is ILinkedFormKeyContainer ImpactDataSetslinkCont)
            {
                foreach (var item in ImpactDataSetslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ArmorAddons is ILinkedFormKeyContainer ArmorAddonslinkCont)
            {
                foreach (var item in ArmorAddonslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.EncounterZones is ILinkedFormKeyContainer EncounterZoneslinkCont)
            {
                foreach (var item in EncounterZoneslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Locations is ILinkedFormKeyContainer LocationslinkCont)
            {
                foreach (var item in LocationslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Messages is ILinkedFormKeyContainer MessageslinkCont)
            {
                foreach (var item in MessageslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.DefaultObjectManagers is ILinkedFormKeyContainer DefaultObjectManagerslinkCont)
            {
                foreach (var item in DefaultObjectManagerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.LightingTemplates is ILinkedFormKeyContainer LightingTemplateslinkCont)
            {
                foreach (var item in LightingTemplateslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MusicTypes is ILinkedFormKeyContainer MusicTypeslinkCont)
            {
                foreach (var item in MusicTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Footsteps is ILinkedFormKeyContainer FootstepslinkCont)
            {
                foreach (var item in FootstepslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.FootstepSets is ILinkedFormKeyContainer FootstepSetslinkCont)
            {
                foreach (var item in FootstepSetslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.StoryManagerBranchNodes is ILinkedFormKeyContainer StoryManagerBranchNodeslinkCont)
            {
                foreach (var item in StoryManagerBranchNodeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.StoryManagerQuestNodes is ILinkedFormKeyContainer StoryManagerQuestNodeslinkCont)
            {
                foreach (var item in StoryManagerQuestNodeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.StoryManagerEventNodes is ILinkedFormKeyContainer StoryManagerEventNodeslinkCont)
            {
                foreach (var item in StoryManagerEventNodeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.DialogBranches is ILinkedFormKeyContainer DialogBrancheslinkCont)
            {
                foreach (var item in DialogBrancheslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MusicTracks is ILinkedFormKeyContainer MusicTrackslinkCont)
            {
                foreach (var item in MusicTrackslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.DialogViews is ILinkedFormKeyContainer DialogViewslinkCont)
            {
                foreach (var item in DialogViewslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.WordsOfPower is ILinkedFormKeyContainer WordsOfPowerlinkCont)
            {
                foreach (var item in WordsOfPowerlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Shouts is ILinkedFormKeyContainer ShoutslinkCont)
            {
                foreach (var item in ShoutslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.EquipTypes is ILinkedFormKeyContainer EquipTypeslinkCont)
            {
                foreach (var item in EquipTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Relationships is ILinkedFormKeyContainer RelationshipslinkCont)
            {
                foreach (var item in RelationshipslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Scenes is ILinkedFormKeyContainer SceneslinkCont)
            {
                foreach (var item in SceneslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.AssociationTypes is ILinkedFormKeyContainer AssociationTypeslinkCont)
            {
                foreach (var item in AssociationTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Outfits is ILinkedFormKeyContainer OutfitslinkCont)
            {
                foreach (var item in OutfitslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ArtObjects is ILinkedFormKeyContainer ArtObjectslinkCont)
            {
                foreach (var item in ArtObjectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MaterialObjects is ILinkedFormKeyContainer MaterialObjectslinkCont)
            {
                foreach (var item in MaterialObjectslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.MovementTypes is ILinkedFormKeyContainer MovementTypeslinkCont)
            {
                foreach (var item in MovementTypeslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoundDescriptors is ILinkedFormKeyContainer SoundDescriptorslinkCont)
            {
                foreach (var item in SoundDescriptorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.DualCastData is ILinkedFormKeyContainer DualCastDatalinkCont)
            {
                foreach (var item in DualCastDatalinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoundCategories is ILinkedFormKeyContainer SoundCategorieslinkCont)
            {
                foreach (var item in SoundCategorieslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.SoundOutputModels is ILinkedFormKeyContainer SoundOutputModelslinkCont)
            {
                foreach (var item in SoundOutputModelslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.CollisionLayers is ILinkedFormKeyContainer CollisionLayerslinkCont)
            {
                foreach (var item in CollisionLayerslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.Colors is ILinkedFormKeyContainer ColorslinkCont)
            {
                foreach (var item in ColorslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            if (obj.ReverbParameters is ILinkedFormKeyContainer ReverbParameterslinkCont)
            {
                foreach (var item in ReverbParameterslinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(ISkyrimModGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(ISkyrimModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scrolls.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VisualEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VoiceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EncounterZones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LightingTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogBranches.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogViews.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WordsOfPower.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Shouts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Relationships.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scenes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AssociationTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MovementTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DualCastData.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundCategories.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Colors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReverbParameters.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(
            ISkyrimModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "ISkyrimMajorRecordGetter":
                case "SkyrimMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    foreach (var item in obj.Scrolls.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in obj.TalkingActivators.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in obj.MoveableStatics.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in obj.VisualEffects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in obj.Packages.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in obj.Explosions.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in obj.ImageSpaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in obj.FormLists.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in obj.Perks.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in obj.BodyParts.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in obj.AddonNodes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in obj.CameraShots.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in obj.CameraPaths.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in obj.VoiceTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in obj.MaterialTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in obj.Impacts.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in obj.ArmorAddons.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in obj.EncounterZones.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in obj.Locations.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in obj.Messages.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in obj.LightingTemplates.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in obj.MusicTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in obj.Footsteps.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in obj.FootstepSets.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in obj.DialogBranches.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in obj.MusicTracks.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in obj.DialogViews.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    foreach (var item in obj.WordsOfPower.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    foreach (var item in obj.Shouts.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in obj.EquipTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in obj.Relationships.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in obj.Scenes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in obj.AssociationTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in obj.Outfits.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in obj.ArtObjects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in obj.MaterialObjects.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in obj.MovementTypes.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    foreach (var item in obj.DualCastData.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in obj.SoundCategories.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in obj.CollisionLayers.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in obj.Colors.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in obj.ReverbParameters.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "ANavigationMesh":
                case "IANavigationMeshGetter":
                case "IANavigationMesh":
                case "IANavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type))
                    {
                        yield return item;
                    }
                    yield break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ActionRecord), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IdleAnimation), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IObjectId":
                case "IObjectIdGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Activator), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ammunition), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Armor), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Book), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Container), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Door), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Faction), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(FormList), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Furniture), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(IdleMarker), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ingestible), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Key), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Light), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(MiscItem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(MoveableStatic), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Npc), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Projectile), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Scroll), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Shout), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(SoundMarker), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Spell), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Static), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(TextureSet), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Weapon), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IItem":
                case "IItemGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(AlchemicalApparatus), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ammunition), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Armor), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Book), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ingestible), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ingredient), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Key), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LeveledItem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Light), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(MiscItem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Scroll), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(SoulGem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Weapon), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IOutfitTarget":
                case "IOutfitTargetGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Armor), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LeveledItem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Worldspace), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IDialog":
                case "IDialogGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(DialogTopic), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ILocationTargetable":
                case "ILocationTargetableGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Door), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IOwner":
                case "IOwnerGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Faction), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IRelatable":
                case "IRelatableGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Faction), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Race), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IRegionTarget":
                case "IRegionTargetGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Flora), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LandscapeTexture), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(MoveableStatic), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Static), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Tree), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(FormList), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Npc), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ILockList":
                case "ILockListGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(FormList), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Npc), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IPlacedTrapTarget":
                case "IPlacedTrapTargetGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Hazard), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Projectile), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IHarvestTarget":
                case "IHarvestTargetGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ingestible), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Ingredient), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LeveledItem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(MiscItem), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Keyword), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "INpcSpawn":
                case "INpcSpawnGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LeveledNpc), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Npc), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ISpellSpawn":
                case "ISpellSpawnGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LeveledSpell), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Spell), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IEmittance":
                case "IEmittanceGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Light), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Region), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ILocationRecord":
                case "ILocationRecordGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Location), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(LocationReferenceType), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IEffectRecord":
                case "IEffectRecordGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(ObjectEffect), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(Spell), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    yield break;
                case "IPlaced":
                case "IPlacedGetter":
                    yield break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    yield break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    yield break;
                case "ISound":
                case "ISoundGetter":
                    foreach (var item in EnumerateMajorRecords(obj, typeof(SoundDescriptor), throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in EnumerateMajorRecords(obj, typeof(SoundMarker), throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #endregion
        
    }
    public partial class SkyrimModSetterTranslationCommon
    {
        public static readonly SkyrimModSetterTranslationCommon Instance = new SkyrimModSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISkyrimMod item,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyIn(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyIn(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundMarkers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundMarkers);
                try
                {
                    item.SoundMarkers.DeepCopyIn(
                        rhs: rhs.SoundMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AcousticSpaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AcousticSpaces);
                try
                {
                    item.AcousticSpaces.DeepCopyIn(
                        rhs: rhs.AcousticSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AcousticSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LandscapeTextures) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LandscapeTextures);
                try
                {
                    item.LandscapeTextures.DeepCopyIn(
                        rhs: rhs.LandscapeTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LandscapeTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ObjectEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ObjectEffects);
                try
                {
                    item.ObjectEffects.DeepCopyIn(
                        rhs: rhs.ObjectEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ObjectEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scrolls) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scrolls);
                try
                {
                    item.Scrolls.DeepCopyIn(
                        rhs: rhs.Scrolls,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scrolls));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TalkingActivators) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TalkingActivators);
                try
                {
                    item.TalkingActivators.DeepCopyIn(
                        rhs: rhs.TalkingActivators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TalkingActivators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MiscItems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MiscItems);
                try
                {
                    item.MiscItems.DeepCopyIn(
                        rhs: rhs.MiscItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MiscItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                try
                {
                    item.AlchemicalApparatuses.DeepCopyIn(
                        rhs: rhs.AlchemicalApparatuses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AlchemicalApparatuses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MoveableStatics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MoveableStatics);
                try
                {
                    item.MoveableStatics.DeepCopyIn(
                        rhs: rhs.MoveableStatics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MoveableStatics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Florae) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Florae);
                try
                {
                    item.Florae.DeepCopyIn(
                        rhs: rhs.Florae,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Florae));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledNpcs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledNpcs);
                try
                {
                    item.LeveledNpcs.DeepCopyIn(
                        rhs: rhs.LeveledNpcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledNpcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingestibles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingestibles);
                try
                {
                    item.Ingestibles.DeepCopyIn(
                        rhs: rhs.Ingestibles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingestibles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleMarkers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleMarkers);
                try
                {
                    item.IdleMarkers.DeepCopyIn(
                        rhs: rhs.IdleMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                try
                {
                    item.ConstructibleObjects.DeepCopyIn(
                        rhs: rhs.ConstructibleObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ConstructibleObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Projectiles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Projectiles);
                try
                {
                    item.Projectiles.DeepCopyIn(
                        rhs: rhs.Projectiles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Projectiles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hazards) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hazards);
                try
                {
                    item.Hazards.DeepCopyIn(
                        rhs: rhs.Hazards,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hazards));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyIn(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyIn(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ShaderParticleGeometries);
                try
                {
                    item.ShaderParticleGeometries.DeepCopyIn(
                        rhs: rhs.ShaderParticleGeometries,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ShaderParticleGeometries));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VisualEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VisualEffects);
                try
                {
                    item.VisualEffects.DeepCopyIn(
                        rhs: rhs.VisualEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VisualEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps);
                try
                {
                    item.NavigationMeshInfoMaps.DeepCopyIn(
                        rhs: rhs.NavigationMeshInfoMaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.DeepCopyIn(
                        rhs: rhs.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogTopics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Packages);
                try
                {
                    item.Packages.DeepCopyIn(
                        rhs: rhs.Packages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Packages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledSpells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledSpells);
                try
                {
                    item.LeveledSpells.DeepCopyIn(
                        rhs: rhs.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledSpells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Explosions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Explosions);
                try
                {
                    item.Explosions.DeepCopyIn(
                        rhs: rhs.Explosions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Explosions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Debris) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Debris);
                try
                {
                    item.Debris.DeepCopyIn(
                        rhs: rhs.Debris,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Debris));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImageSpaces);
                try
                {
                    item.ImageSpaces.DeepCopyIn(
                        rhs: rhs.ImageSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImageSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImageSpaceAdapters);
                try
                {
                    item.ImageSpaceAdapters.DeepCopyIn(
                        rhs: rhs.ImageSpaceAdapters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImageSpaceAdapters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FormLists) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.FormLists);
                try
                {
                    item.FormLists.DeepCopyIn(
                        rhs: rhs.FormLists,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.FormLists));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Perks);
                try
                {
                    item.Perks.DeepCopyIn(
                        rhs: rhs.Perks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Perks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.BodyParts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.BodyParts);
                try
                {
                    item.BodyParts.DeepCopyIn(
                        rhs: rhs.BodyParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.BodyParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AddonNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AddonNodes);
                try
                {
                    item.AddonNodes.DeepCopyIn(
                        rhs: rhs.AddonNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AddonNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ActorValueInformation) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ActorValueInformation);
                try
                {
                    item.ActorValueInformation.DeepCopyIn(
                        rhs: rhs.ActorValueInformation,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ActorValueInformation));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraShots) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CameraShots);
                try
                {
                    item.CameraShots.DeepCopyIn(
                        rhs: rhs.CameraShots,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CameraShots));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraPaths) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CameraPaths);
                try
                {
                    item.CameraPaths.DeepCopyIn(
                        rhs: rhs.CameraPaths,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CameraPaths));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VoiceTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VoiceTypes);
                try
                {
                    item.VoiceTypes.DeepCopyIn(
                        rhs: rhs.VoiceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VoiceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MaterialTypes);
                try
                {
                    item.MaterialTypes.DeepCopyIn(
                        rhs: rhs.MaterialTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MaterialTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Impacts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Impacts);
                try
                {
                    item.Impacts.DeepCopyIn(
                        rhs: rhs.Impacts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Impacts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImpactDataSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImpactDataSets);
                try
                {
                    item.ImpactDataSets.DeepCopyIn(
                        rhs: rhs.ImpactDataSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImpactDataSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArmorAddons) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ArmorAddons);
                try
                {
                    item.ArmorAddons.DeepCopyIn(
                        rhs: rhs.ArmorAddons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ArmorAddons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EncounterZones) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EncounterZones);
                try
                {
                    item.EncounterZones.DeepCopyIn(
                        rhs: rhs.EncounterZones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EncounterZones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Locations);
                try
                {
                    item.Locations.DeepCopyIn(
                        rhs: rhs.Locations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Locations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Messages) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Messages);
                try
                {
                    item.Messages.DeepCopyIn(
                        rhs: rhs.Messages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Messages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DefaultObjectManagers);
                try
                {
                    item.DefaultObjectManagers.DeepCopyIn(
                        rhs: rhs.DefaultObjectManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DefaultObjectManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LightingTemplates) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LightingTemplates);
                try
                {
                    item.LightingTemplates.DeepCopyIn(
                        rhs: rhs.LightingTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LightingTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MusicTypes);
                try
                {
                    item.MusicTypes.DeepCopyIn(
                        rhs: rhs.MusicTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MusicTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Footsteps) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Footsteps);
                try
                {
                    item.Footsteps.DeepCopyIn(
                        rhs: rhs.Footsteps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Footsteps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FootstepSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.FootstepSets);
                try
                {
                    item.FootstepSets.DeepCopyIn(
                        rhs: rhs.FootstepSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.FootstepSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes);
                try
                {
                    item.StoryManagerBranchNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerBranchNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes);
                try
                {
                    item.StoryManagerQuestNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerQuestNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerEventNodes);
                try
                {
                    item.StoryManagerEventNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerEventNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerEventNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogBranches) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogBranches);
                try
                {
                    item.DialogBranches.DeepCopyIn(
                        rhs: rhs.DialogBranches,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogBranches));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTracks) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MusicTracks);
                try
                {
                    item.MusicTracks.DeepCopyIn(
                        rhs: rhs.MusicTracks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MusicTracks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogViews) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogViews);
                try
                {
                    item.DialogViews.DeepCopyIn(
                        rhs: rhs.DialogViews,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogViews));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.WordsOfPower) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.WordsOfPower);
                try
                {
                    item.WordsOfPower.DeepCopyIn(
                        rhs: rhs.WordsOfPower,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.WordsOfPower));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Shouts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Shouts);
                try
                {
                    item.Shouts.DeepCopyIn(
                        rhs: rhs.Shouts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Shouts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EquipTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EquipTypes);
                try
                {
                    item.EquipTypes.DeepCopyIn(
                        rhs: rhs.EquipTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EquipTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Relationships) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Relationships);
                try
                {
                    item.Relationships.DeepCopyIn(
                        rhs: rhs.Relationships,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Relationships));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scenes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scenes);
                try
                {
                    item.Scenes.DeepCopyIn(
                        rhs: rhs.Scenes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scenes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AssociationTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AssociationTypes);
                try
                {
                    item.AssociationTypes.DeepCopyIn(
                        rhs: rhs.AssociationTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AssociationTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Outfits) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Outfits);
                try
                {
                    item.Outfits.DeepCopyIn(
                        rhs: rhs.Outfits,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Outfits));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArtObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ArtObjects);
                try
                {
                    item.ArtObjects.DeepCopyIn(
                        rhs: rhs.ArtObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ArtObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MaterialObjects);
                try
                {
                    item.MaterialObjects.DeepCopyIn(
                        rhs: rhs.MaterialObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MaterialObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.DeepCopyIn(
                        rhs: rhs.MovementTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MovementTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundDescriptors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundDescriptors);
                try
                {
                    item.SoundDescriptors.DeepCopyIn(
                        rhs: rhs.SoundDescriptors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundDescriptors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DualCastData) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DualCastData);
                try
                {
                    item.DualCastData.DeepCopyIn(
                        rhs: rhs.DualCastData,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DualCastData));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundCategories) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundCategories);
                try
                {
                    item.SoundCategories.DeepCopyIn(
                        rhs: rhs.SoundCategories,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundCategories));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundOutputModels) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundOutputModels);
                try
                {
                    item.SoundOutputModels.DeepCopyIn(
                        rhs: rhs.SoundOutputModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundOutputModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CollisionLayers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CollisionLayers);
                try
                {
                    item.CollisionLayers.DeepCopyIn(
                        rhs: rhs.CollisionLayers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CollisionLayers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Colors);
                try
                {
                    item.Colors.DeepCopyIn(
                        rhs: rhs.Colors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Colors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ReverbParameters) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ReverbParameters);
                try
                {
                    item.ReverbParameters.DeepCopyIn(
                        rhs: rhs.ReverbParameters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ReverbParameters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkyrimMod ret = (SkyrimMod)((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SkyrimModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SkyrimModXmlWriteTranslation Instance = new SkyrimModXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                var ModHeaderItem = item.ModHeader;
                ((ModHeaderXmlWriteTranslation)((IXmlItem)ModHeaderItem).XmlWriteTranslator).Write(
                    item: ModHeaderItem,
                    node: node,
                    name: nameof(item.ModHeader),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ModHeader,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                var GameSettingsItem = item.GameSettings;
                ((GroupXmlWriteTranslation)((IXmlItem)GameSettingsItem).XmlWriteTranslator).Write<IGameSettingGetter>(
                    item: GameSettingsItem,
                    node: node,
                    name: nameof(item.GameSettings),
                    fieldIndex: (int)SkyrimMod_FieldIndex.GameSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                var KeywordsItem = item.Keywords;
                ((GroupXmlWriteTranslation)((IXmlItem)KeywordsItem).XmlWriteTranslator).Write<IKeywordGetter>(
                    item: KeywordsItem,
                    node: node,
                    name: nameof(item.Keywords),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Keywords,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)LocationReferenceTypesItem).XmlWriteTranslator).Write<ILocationReferenceTypeGetter>(
                    item: LocationReferenceTypesItem,
                    node: node,
                    name: nameof(item.LocationReferenceTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LocationReferenceTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                var ActionsItem = item.Actions;
                ((GroupXmlWriteTranslation)((IXmlItem)ActionsItem).XmlWriteTranslator).Write<IActionRecordGetter>(
                    item: ActionsItem,
                    node: node,
                    name: nameof(item.Actions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Actions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                var TextureSetsItem = item.TextureSets;
                ((GroupXmlWriteTranslation)((IXmlItem)TextureSetsItem).XmlWriteTranslator).Write<ITextureSetGetter>(
                    item: TextureSetsItem,
                    node: node,
                    name: nameof(item.TextureSets),
                    fieldIndex: (int)SkyrimMod_FieldIndex.TextureSets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                var GlobalsItem = item.Globals;
                ((GroupXmlWriteTranslation)((IXmlItem)GlobalsItem).XmlWriteTranslator).Write<IGlobalGetter>(
                    item: GlobalsItem,
                    node: node,
                    name: nameof(item.Globals),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Globals,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                var ClassesItem = item.Classes;
                ((GroupXmlWriteTranslation)((IXmlItem)ClassesItem).XmlWriteTranslator).Write<IClassGetter>(
                    item: ClassesItem,
                    node: node,
                    name: nameof(item.Classes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Classes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                var FactionsItem = item.Factions;
                ((GroupXmlWriteTranslation)((IXmlItem)FactionsItem).XmlWriteTranslator).Write<IFactionGetter>(
                    item: FactionsItem,
                    node: node,
                    name: nameof(item.Factions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.HeadParts) ?? true))
            {
                var HeadPartsItem = item.HeadParts;
                ((GroupXmlWriteTranslation)((IXmlItem)HeadPartsItem).XmlWriteTranslator).Write<IHeadPartGetter>(
                    item: HeadPartsItem,
                    node: node,
                    name: nameof(item.HeadParts),
                    fieldIndex: (int)SkyrimMod_FieldIndex.HeadParts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.HeadParts));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hairs) ?? true))
            {
                var HairsItem = item.Hairs;
                ((GroupXmlWriteTranslation)((IXmlItem)HairsItem).XmlWriteTranslator).Write<IHairGetter>(
                    item: HairsItem,
                    node: node,
                    name: nameof(item.Hairs),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Hairs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hairs));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Eyes) ?? true))
            {
                var EyesItem = item.Eyes;
                ((GroupXmlWriteTranslation)((IXmlItem)EyesItem).XmlWriteTranslator).Write<IEyesGetter>(
                    item: EyesItem,
                    node: node,
                    name: nameof(item.Eyes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Eyes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Races) ?? true))
            {
                var RacesItem = item.Races;
                ((GroupXmlWriteTranslation)((IXmlItem)RacesItem).XmlWriteTranslator).Write<IRaceGetter>(
                    item: RacesItem,
                    node: node,
                    name: nameof(item.Races),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Races,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Races));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundMarkers) ?? true))
            {
                var SoundMarkersItem = item.SoundMarkers;
                ((GroupXmlWriteTranslation)((IXmlItem)SoundMarkersItem).XmlWriteTranslator).Write<ISoundMarkerGetter>(
                    item: SoundMarkersItem,
                    node: node,
                    name: nameof(item.SoundMarkers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoundMarkers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundMarkers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AcousticSpaces) ?? true))
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                ((GroupXmlWriteTranslation)((IXmlItem)AcousticSpacesItem).XmlWriteTranslator).Write<IAcousticSpaceGetter>(
                    item: AcousticSpacesItem,
                    node: node,
                    name: nameof(item.AcousticSpaces),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AcousticSpaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AcousticSpaces));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MagicEffects) ?? true))
            {
                var MagicEffectsItem = item.MagicEffects;
                ((GroupXmlWriteTranslation)((IXmlItem)MagicEffectsItem).XmlWriteTranslator).Write<IMagicEffectGetter>(
                    item: MagicEffectsItem,
                    node: node,
                    name: nameof(item.MagicEffects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MagicEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MagicEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LandscapeTextures) ?? true))
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                ((GroupXmlWriteTranslation)((IXmlItem)LandscapeTexturesItem).XmlWriteTranslator).Write<ILandscapeTextureGetter>(
                    item: LandscapeTexturesItem,
                    node: node,
                    name: nameof(item.LandscapeTextures),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LandscapeTextures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LandscapeTextures));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ObjectEffects) ?? true))
            {
                var ObjectEffectsItem = item.ObjectEffects;
                ((GroupXmlWriteTranslation)((IXmlItem)ObjectEffectsItem).XmlWriteTranslator).Write<IObjectEffectGetter>(
                    item: ObjectEffectsItem,
                    node: node,
                    name: nameof(item.ObjectEffects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ObjectEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ObjectEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Spells) ?? true))
            {
                var SpellsItem = item.Spells;
                ((GroupXmlWriteTranslation)((IXmlItem)SpellsItem).XmlWriteTranslator).Write<ISpellGetter>(
                    item: SpellsItem,
                    node: node,
                    name: nameof(item.Spells),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Spells));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scrolls) ?? true))
            {
                var ScrollsItem = item.Scrolls;
                ((GroupXmlWriteTranslation)((IXmlItem)ScrollsItem).XmlWriteTranslator).Write<IScrollGetter>(
                    item: ScrollsItem,
                    node: node,
                    name: nameof(item.Scrolls),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Scrolls,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scrolls));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Activators) ?? true))
            {
                var ActivatorsItem = item.Activators;
                ((GroupXmlWriteTranslation)((IXmlItem)ActivatorsItem).XmlWriteTranslator).Write<IActivatorGetter>(
                    item: ActivatorsItem,
                    node: node,
                    name: nameof(item.Activators),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Activators,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Activators));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TalkingActivators) ?? true))
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                ((GroupXmlWriteTranslation)((IXmlItem)TalkingActivatorsItem).XmlWriteTranslator).Write<ITalkingActivatorGetter>(
                    item: TalkingActivatorsItem,
                    node: node,
                    name: nameof(item.TalkingActivators),
                    fieldIndex: (int)SkyrimMod_FieldIndex.TalkingActivators,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TalkingActivators));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Armors) ?? true))
            {
                var ArmorsItem = item.Armors;
                ((GroupXmlWriteTranslation)((IXmlItem)ArmorsItem).XmlWriteTranslator).Write<IArmorGetter>(
                    item: ArmorsItem,
                    node: node,
                    name: nameof(item.Armors),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Armors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Armors));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Books) ?? true))
            {
                var BooksItem = item.Books;
                ((GroupXmlWriteTranslation)((IXmlItem)BooksItem).XmlWriteTranslator).Write<IBookGetter>(
                    item: BooksItem,
                    node: node,
                    name: nameof(item.Books),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Books,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Books));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Containers) ?? true))
            {
                var ContainersItem = item.Containers;
                ((GroupXmlWriteTranslation)((IXmlItem)ContainersItem).XmlWriteTranslator).Write<IContainerGetter>(
                    item: ContainersItem,
                    node: node,
                    name: nameof(item.Containers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Containers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Containers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Doors) ?? true))
            {
                var DoorsItem = item.Doors;
                ((GroupXmlWriteTranslation)((IXmlItem)DoorsItem).XmlWriteTranslator).Write<IDoorGetter>(
                    item: DoorsItem,
                    node: node,
                    name: nameof(item.Doors),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Doors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Doors));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingredients) ?? true))
            {
                var IngredientsItem = item.Ingredients;
                ((GroupXmlWriteTranslation)((IXmlItem)IngredientsItem).XmlWriteTranslator).Write<IIngredientGetter>(
                    item: IngredientsItem,
                    node: node,
                    name: nameof(item.Ingredients),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Ingredients,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingredients));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Lights) ?? true))
            {
                var LightsItem = item.Lights;
                ((GroupXmlWriteTranslation)((IXmlItem)LightsItem).XmlWriteTranslator).Write<ILightGetter>(
                    item: LightsItem,
                    node: node,
                    name: nameof(item.Lights),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Lights,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Lights));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MiscItems) ?? true))
            {
                var MiscItemsItem = item.MiscItems;
                ((GroupXmlWriteTranslation)((IXmlItem)MiscItemsItem).XmlWriteTranslator).Write<IMiscItemGetter>(
                    item: MiscItemsItem,
                    node: node,
                    name: nameof(item.MiscItems),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MiscItems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MiscItems));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                var AlchemicalApparatusesItem = item.AlchemicalApparatuses;
                ((GroupXmlWriteTranslation)((IXmlItem)AlchemicalApparatusesItem).XmlWriteTranslator).Write<IAlchemicalApparatusGetter>(
                    item: AlchemicalApparatusesItem,
                    node: node,
                    name: nameof(item.AlchemicalApparatuses),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AlchemicalApparatuses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AlchemicalApparatuses));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Statics) ?? true))
            {
                var StaticsItem = item.Statics;
                ((GroupXmlWriteTranslation)((IXmlItem)StaticsItem).XmlWriteTranslator).Write<IStaticGetter>(
                    item: StaticsItem,
                    node: node,
                    name: nameof(item.Statics),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Statics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Statics));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MoveableStatics) ?? true))
            {
                var MoveableStaticsItem = item.MoveableStatics;
                ((GroupXmlWriteTranslation)((IXmlItem)MoveableStaticsItem).XmlWriteTranslator).Write<IMoveableStaticGetter>(
                    item: MoveableStaticsItem,
                    node: node,
                    name: nameof(item.MoveableStatics),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MoveableStatics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MoveableStatics));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Grasses) ?? true))
            {
                var GrassesItem = item.Grasses;
                ((GroupXmlWriteTranslation)((IXmlItem)GrassesItem).XmlWriteTranslator).Write<IGrassGetter>(
                    item: GrassesItem,
                    node: node,
                    name: nameof(item.Grasses),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Grasses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Grasses));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Trees) ?? true))
            {
                var TreesItem = item.Trees;
                ((GroupXmlWriteTranslation)((IXmlItem)TreesItem).XmlWriteTranslator).Write<ITreeGetter>(
                    item: TreesItem,
                    node: node,
                    name: nameof(item.Trees),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Trees,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Trees));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Florae) ?? true))
            {
                var FloraeItem = item.Florae;
                ((GroupXmlWriteTranslation)((IXmlItem)FloraeItem).XmlWriteTranslator).Write<IFloraGetter>(
                    item: FloraeItem,
                    node: node,
                    name: nameof(item.Florae),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Florae,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Florae));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Furniture) ?? true))
            {
                var FurnitureItem = item.Furniture;
                ((GroupXmlWriteTranslation)((IXmlItem)FurnitureItem).XmlWriteTranslator).Write<IFurnitureGetter>(
                    item: FurnitureItem,
                    node: node,
                    name: nameof(item.Furniture),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Furniture,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Furniture));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weapons) ?? true))
            {
                var WeaponsItem = item.Weapons;
                ((GroupXmlWriteTranslation)((IXmlItem)WeaponsItem).XmlWriteTranslator).Write<IWeaponGetter>(
                    item: WeaponsItem,
                    node: node,
                    name: nameof(item.Weapons),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Weapons,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weapons));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ammunitions) ?? true))
            {
                var AmmunitionsItem = item.Ammunitions;
                ((GroupXmlWriteTranslation)((IXmlItem)AmmunitionsItem).XmlWriteTranslator).Write<IAmmunitionGetter>(
                    item: AmmunitionsItem,
                    node: node,
                    name: nameof(item.Ammunitions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Ammunitions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ammunitions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Npcs) ?? true))
            {
                var NpcsItem = item.Npcs;
                ((GroupXmlWriteTranslation)((IXmlItem)NpcsItem).XmlWriteTranslator).Write<INpcGetter>(
                    item: NpcsItem,
                    node: node,
                    name: nameof(item.Npcs),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Npcs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Npcs));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledNpcs) ?? true))
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                ((GroupXmlWriteTranslation)((IXmlItem)LeveledNpcsItem).XmlWriteTranslator).Write<ILeveledNpcGetter>(
                    item: LeveledNpcsItem,
                    node: node,
                    name: nameof(item.LeveledNpcs),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LeveledNpcs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledNpcs));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keys) ?? true))
            {
                var KeysItem = item.Keys;
                ((GroupXmlWriteTranslation)((IXmlItem)KeysItem).XmlWriteTranslator).Write<IKeyGetter>(
                    item: KeysItem,
                    node: node,
                    name: nameof(item.Keys),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Keys,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keys));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingestibles) ?? true))
            {
                var IngestiblesItem = item.Ingestibles;
                ((GroupXmlWriteTranslation)((IXmlItem)IngestiblesItem).XmlWriteTranslator).Write<IIngestibleGetter>(
                    item: IngestiblesItem,
                    node: node,
                    name: nameof(item.Ingestibles),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Ingestibles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingestibles));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleMarkers) ?? true))
            {
                var IdleMarkersItem = item.IdleMarkers;
                ((GroupXmlWriteTranslation)((IXmlItem)IdleMarkersItem).XmlWriteTranslator).Write<IIdleMarkerGetter>(
                    item: IdleMarkersItem,
                    node: node,
                    name: nameof(item.IdleMarkers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.IdleMarkers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleMarkers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                ((GroupXmlWriteTranslation)((IXmlItem)ConstructibleObjectsItem).XmlWriteTranslator).Write<IConstructibleObjectGetter>(
                    item: ConstructibleObjectsItem,
                    node: node,
                    name: nameof(item.ConstructibleObjects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ConstructibleObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ConstructibleObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Projectiles) ?? true))
            {
                var ProjectilesItem = item.Projectiles;
                ((GroupXmlWriteTranslation)((IXmlItem)ProjectilesItem).XmlWriteTranslator).Write<IProjectileGetter>(
                    item: ProjectilesItem,
                    node: node,
                    name: nameof(item.Projectiles),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Projectiles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Projectiles));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hazards) ?? true))
            {
                var HazardsItem = item.Hazards;
                ((GroupXmlWriteTranslation)((IXmlItem)HazardsItem).XmlWriteTranslator).Write<IHazardGetter>(
                    item: HazardsItem,
                    node: node,
                    name: nameof(item.Hazards),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Hazards,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hazards));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoulGems) ?? true))
            {
                var SoulGemsItem = item.SoulGems;
                ((GroupXmlWriteTranslation)((IXmlItem)SoulGemsItem).XmlWriteTranslator).Write<ISoulGemGetter>(
                    item: SoulGemsItem,
                    node: node,
                    name: nameof(item.SoulGems),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoulGems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoulGems));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledItems) ?? true))
            {
                var LeveledItemsItem = item.LeveledItems;
                ((GroupXmlWriteTranslation)((IXmlItem)LeveledItemsItem).XmlWriteTranslator).Write<ILeveledItemGetter>(
                    item: LeveledItemsItem,
                    node: node,
                    name: nameof(item.LeveledItems),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LeveledItems,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledItems));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weathers) ?? true))
            {
                var WeathersItem = item.Weathers;
                ((GroupXmlWriteTranslation)((IXmlItem)WeathersItem).XmlWriteTranslator).Write<IWeatherGetter>(
                    item: WeathersItem,
                    node: node,
                    name: nameof(item.Weathers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Weathers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weathers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Climates) ?? true))
            {
                var ClimatesItem = item.Climates;
                ((GroupXmlWriteTranslation)((IXmlItem)ClimatesItem).XmlWriteTranslator).Write<IClimateGetter>(
                    item: ClimatesItem,
                    node: node,
                    name: nameof(item.Climates),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Climates,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Climates));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                var ShaderParticleGeometriesItem = item.ShaderParticleGeometries;
                ((GroupXmlWriteTranslation)((IXmlItem)ShaderParticleGeometriesItem).XmlWriteTranslator).Write<IShaderParticleGeometryGetter>(
                    item: ShaderParticleGeometriesItem,
                    node: node,
                    name: nameof(item.ShaderParticleGeometries),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ShaderParticleGeometries,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ShaderParticleGeometries));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VisualEffects) ?? true))
            {
                var VisualEffectsItem = item.VisualEffects;
                ((GroupXmlWriteTranslation)((IXmlItem)VisualEffectsItem).XmlWriteTranslator).Write<IVisualEffectGetter>(
                    item: VisualEffectsItem,
                    node: node,
                    name: nameof(item.VisualEffects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.VisualEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VisualEffects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Regions) ?? true))
            {
                var RegionsItem = item.Regions;
                ((GroupXmlWriteTranslation)((IXmlItem)RegionsItem).XmlWriteTranslator).Write<IRegionGetter>(
                    item: RegionsItem,
                    node: node,
                    name: nameof(item.Regions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Regions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Regions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                var NavigationMeshInfoMapsItem = item.NavigationMeshInfoMaps;
                ((GroupXmlWriteTranslation)((IXmlItem)NavigationMeshInfoMapsItem).XmlWriteTranslator).Write<INavigationMeshInfoMapGetter>(
                    item: NavigationMeshInfoMapsItem,
                    node: node,
                    name: nameof(item.NavigationMeshInfoMaps),
                    fieldIndex: (int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Cells) ?? true))
            {
                var CellsItem = item.Cells;
                ((ListGroupXmlWriteTranslation)((IXmlItem)CellsItem).XmlWriteTranslator).Write<ICellBlockGetter>(
                    item: CellsItem,
                    node: node,
                    name: nameof(item.Cells),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Cells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Cells));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Worldspaces) ?? true))
            {
                var WorldspacesItem = item.Worldspaces;
                ((GroupXmlWriteTranslation)((IXmlItem)WorldspacesItem).XmlWriteTranslator).Write<IWorldspaceGetter>(
                    item: WorldspacesItem,
                    node: node,
                    name: nameof(item.Worldspaces),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Worldspaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Worldspaces));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogTopics) ?? true))
            {
                var DialogTopicsItem = item.DialogTopics;
                ((GroupXmlWriteTranslation)((IXmlItem)DialogTopicsItem).XmlWriteTranslator).Write<IDialogTopicGetter>(
                    item: DialogTopicsItem,
                    node: node,
                    name: nameof(item.DialogTopics),
                    fieldIndex: (int)SkyrimMod_FieldIndex.DialogTopics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogTopics));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Quests) ?? true))
            {
                var QuestsItem = item.Quests;
                ((GroupXmlWriteTranslation)((IXmlItem)QuestsItem).XmlWriteTranslator).Write<IQuestGetter>(
                    item: QuestsItem,
                    node: node,
                    name: nameof(item.Quests),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Quests,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Quests));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleAnimations) ?? true))
            {
                var IdleAnimationsItem = item.IdleAnimations;
                ((GroupXmlWriteTranslation)((IXmlItem)IdleAnimationsItem).XmlWriteTranslator).Write<IIdleAnimationGetter>(
                    item: IdleAnimationsItem,
                    node: node,
                    name: nameof(item.IdleAnimations),
                    fieldIndex: (int)SkyrimMod_FieldIndex.IdleAnimations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleAnimations));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Packages) ?? true))
            {
                var PackagesItem = item.Packages;
                ((GroupXmlWriteTranslation)((IXmlItem)PackagesItem).XmlWriteTranslator).Write<IPackageGetter>(
                    item: PackagesItem,
                    node: node,
                    name: nameof(item.Packages),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Packages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Packages));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CombatStyles) ?? true))
            {
                var CombatStylesItem = item.CombatStyles;
                ((GroupXmlWriteTranslation)((IXmlItem)CombatStylesItem).XmlWriteTranslator).Write<ICombatStyleGetter>(
                    item: CombatStylesItem,
                    node: node,
                    name: nameof(item.CombatStyles),
                    fieldIndex: (int)SkyrimMod_FieldIndex.CombatStyles,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CombatStyles));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LoadScreens) ?? true))
            {
                var LoadScreensItem = item.LoadScreens;
                ((GroupXmlWriteTranslation)((IXmlItem)LoadScreensItem).XmlWriteTranslator).Write<ILoadScreenGetter>(
                    item: LoadScreensItem,
                    node: node,
                    name: nameof(item.LoadScreens),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LoadScreens,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LoadScreens));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledSpells) ?? true))
            {
                var LeveledSpellsItem = item.LeveledSpells;
                ((GroupXmlWriteTranslation)((IXmlItem)LeveledSpellsItem).XmlWriteTranslator).Write<ILeveledSpellGetter>(
                    item: LeveledSpellsItem,
                    node: node,
                    name: nameof(item.LeveledSpells),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LeveledSpells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledSpells));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AnimatedObjects) ?? true))
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                ((GroupXmlWriteTranslation)((IXmlItem)AnimatedObjectsItem).XmlWriteTranslator).Write<IAnimatedObjectGetter>(
                    item: AnimatedObjectsItem,
                    node: node,
                    name: nameof(item.AnimatedObjects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AnimatedObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AnimatedObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Waters) ?? true))
            {
                var WatersItem = item.Waters;
                ((GroupXmlWriteTranslation)((IXmlItem)WatersItem).XmlWriteTranslator).Write<IWaterGetter>(
                    item: WatersItem,
                    node: node,
                    name: nameof(item.Waters),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Waters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Waters));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EffectShaders) ?? true))
            {
                var EffectShadersItem = item.EffectShaders;
                ((GroupXmlWriteTranslation)((IXmlItem)EffectShadersItem).XmlWriteTranslator).Write<IEffectShaderGetter>(
                    item: EffectShadersItem,
                    node: node,
                    name: nameof(item.EffectShaders),
                    fieldIndex: (int)SkyrimMod_FieldIndex.EffectShaders,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EffectShaders));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Explosions) ?? true))
            {
                var ExplosionsItem = item.Explosions;
                ((GroupXmlWriteTranslation)((IXmlItem)ExplosionsItem).XmlWriteTranslator).Write<IExplosionGetter>(
                    item: ExplosionsItem,
                    node: node,
                    name: nameof(item.Explosions),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Explosions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Explosions));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Debris) ?? true))
            {
                var DebrisItem = item.Debris;
                ((GroupXmlWriteTranslation)((IXmlItem)DebrisItem).XmlWriteTranslator).Write<IDebrisGetter>(
                    item: DebrisItem,
                    node: node,
                    name: nameof(item.Debris),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Debris,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Debris));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaces) ?? true))
            {
                var ImageSpacesItem = item.ImageSpaces;
                ((GroupXmlWriteTranslation)((IXmlItem)ImageSpacesItem).XmlWriteTranslator).Write<IImageSpaceGetter>(
                    item: ImageSpacesItem,
                    node: node,
                    name: nameof(item.ImageSpaces),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ImageSpaces,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImageSpaces));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                var ImageSpaceAdaptersItem = item.ImageSpaceAdapters;
                ((GroupXmlWriteTranslation)((IXmlItem)ImageSpaceAdaptersItem).XmlWriteTranslator).Write<IImageSpaceAdapterGetter>(
                    item: ImageSpaceAdaptersItem,
                    node: node,
                    name: nameof(item.ImageSpaceAdapters),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ImageSpaceAdapters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImageSpaceAdapters));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FormLists) ?? true))
            {
                var FormListsItem = item.FormLists;
                ((GroupXmlWriteTranslation)((IXmlItem)FormListsItem).XmlWriteTranslator).Write<IFormListGetter>(
                    item: FormListsItem,
                    node: node,
                    name: nameof(item.FormLists),
                    fieldIndex: (int)SkyrimMod_FieldIndex.FormLists,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.FormLists));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Perks) ?? true))
            {
                var PerksItem = item.Perks;
                ((GroupXmlWriteTranslation)((IXmlItem)PerksItem).XmlWriteTranslator).Write<IPerkGetter>(
                    item: PerksItem,
                    node: node,
                    name: nameof(item.Perks),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Perks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Perks));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.BodyParts) ?? true))
            {
                var BodyPartsItem = item.BodyParts;
                ((GroupXmlWriteTranslation)((IXmlItem)BodyPartsItem).XmlWriteTranslator).Write<IBodyPartDataGetter>(
                    item: BodyPartsItem,
                    node: node,
                    name: nameof(item.BodyParts),
                    fieldIndex: (int)SkyrimMod_FieldIndex.BodyParts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.BodyParts));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AddonNodes) ?? true))
            {
                var AddonNodesItem = item.AddonNodes;
                ((GroupXmlWriteTranslation)((IXmlItem)AddonNodesItem).XmlWriteTranslator).Write<IAddonNodeGetter>(
                    item: AddonNodesItem,
                    node: node,
                    name: nameof(item.AddonNodes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AddonNodes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AddonNodes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ActorValueInformation) ?? true))
            {
                var ActorValueInformationItem = item.ActorValueInformation;
                ((GroupXmlWriteTranslation)((IXmlItem)ActorValueInformationItem).XmlWriteTranslator).Write<IActorValueInformationGetter>(
                    item: ActorValueInformationItem,
                    node: node,
                    name: nameof(item.ActorValueInformation),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ActorValueInformation,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ActorValueInformation));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraShots) ?? true))
            {
                var CameraShotsItem = item.CameraShots;
                ((GroupXmlWriteTranslation)((IXmlItem)CameraShotsItem).XmlWriteTranslator).Write<ICameraShotGetter>(
                    item: CameraShotsItem,
                    node: node,
                    name: nameof(item.CameraShots),
                    fieldIndex: (int)SkyrimMod_FieldIndex.CameraShots,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CameraShots));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraPaths) ?? true))
            {
                var CameraPathsItem = item.CameraPaths;
                ((GroupXmlWriteTranslation)((IXmlItem)CameraPathsItem).XmlWriteTranslator).Write<ICameraPathGetter>(
                    item: CameraPathsItem,
                    node: node,
                    name: nameof(item.CameraPaths),
                    fieldIndex: (int)SkyrimMod_FieldIndex.CameraPaths,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CameraPaths));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VoiceTypes) ?? true))
            {
                var VoiceTypesItem = item.VoiceTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)VoiceTypesItem).XmlWriteTranslator).Write<IVoiceTypeGetter>(
                    item: VoiceTypesItem,
                    node: node,
                    name: nameof(item.VoiceTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.VoiceTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VoiceTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialTypes) ?? true))
            {
                var MaterialTypesItem = item.MaterialTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)MaterialTypesItem).XmlWriteTranslator).Write<IMaterialTypeGetter>(
                    item: MaterialTypesItem,
                    node: node,
                    name: nameof(item.MaterialTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MaterialTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MaterialTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Impacts) ?? true))
            {
                var ImpactsItem = item.Impacts;
                ((GroupXmlWriteTranslation)((IXmlItem)ImpactsItem).XmlWriteTranslator).Write<IImpactGetter>(
                    item: ImpactsItem,
                    node: node,
                    name: nameof(item.Impacts),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Impacts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Impacts));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImpactDataSets) ?? true))
            {
                var ImpactDataSetsItem = item.ImpactDataSets;
                ((GroupXmlWriteTranslation)((IXmlItem)ImpactDataSetsItem).XmlWriteTranslator).Write<IImpactDataSetGetter>(
                    item: ImpactDataSetsItem,
                    node: node,
                    name: nameof(item.ImpactDataSets),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ImpactDataSets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImpactDataSets));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArmorAddons) ?? true))
            {
                var ArmorAddonsItem = item.ArmorAddons;
                ((GroupXmlWriteTranslation)((IXmlItem)ArmorAddonsItem).XmlWriteTranslator).Write<IArmorAddonGetter>(
                    item: ArmorAddonsItem,
                    node: node,
                    name: nameof(item.ArmorAddons),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ArmorAddons,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ArmorAddons));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EncounterZones) ?? true))
            {
                var EncounterZonesItem = item.EncounterZones;
                ((GroupXmlWriteTranslation)((IXmlItem)EncounterZonesItem).XmlWriteTranslator).Write<IEncounterZoneGetter>(
                    item: EncounterZonesItem,
                    node: node,
                    name: nameof(item.EncounterZones),
                    fieldIndex: (int)SkyrimMod_FieldIndex.EncounterZones,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EncounterZones));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Locations) ?? true))
            {
                var LocationsItem = item.Locations;
                ((GroupXmlWriteTranslation)((IXmlItem)LocationsItem).XmlWriteTranslator).Write<ILocationGetter>(
                    item: LocationsItem,
                    node: node,
                    name: nameof(item.Locations),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Locations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Locations));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Messages) ?? true))
            {
                var MessagesItem = item.Messages;
                ((GroupXmlWriteTranslation)((IXmlItem)MessagesItem).XmlWriteTranslator).Write<IMessageGetter>(
                    item: MessagesItem,
                    node: node,
                    name: nameof(item.Messages),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Messages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Messages));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                var DefaultObjectManagersItem = item.DefaultObjectManagers;
                ((GroupXmlWriteTranslation)((IXmlItem)DefaultObjectManagersItem).XmlWriteTranslator).Write<IDefaultObjectManagerGetter>(
                    item: DefaultObjectManagersItem,
                    node: node,
                    name: nameof(item.DefaultObjectManagers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.DefaultObjectManagers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DefaultObjectManagers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LightingTemplates) ?? true))
            {
                var LightingTemplatesItem = item.LightingTemplates;
                ((GroupXmlWriteTranslation)((IXmlItem)LightingTemplatesItem).XmlWriteTranslator).Write<ILightingTemplateGetter>(
                    item: LightingTemplatesItem,
                    node: node,
                    name: nameof(item.LightingTemplates),
                    fieldIndex: (int)SkyrimMod_FieldIndex.LightingTemplates,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LightingTemplates));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTypes) ?? true))
            {
                var MusicTypesItem = item.MusicTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)MusicTypesItem).XmlWriteTranslator).Write<IMusicTypeGetter>(
                    item: MusicTypesItem,
                    node: node,
                    name: nameof(item.MusicTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MusicTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MusicTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Footsteps) ?? true))
            {
                var FootstepsItem = item.Footsteps;
                ((GroupXmlWriteTranslation)((IXmlItem)FootstepsItem).XmlWriteTranslator).Write<IFootstepGetter>(
                    item: FootstepsItem,
                    node: node,
                    name: nameof(item.Footsteps),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Footsteps,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Footsteps));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FootstepSets) ?? true))
            {
                var FootstepSetsItem = item.FootstepSets;
                ((GroupXmlWriteTranslation)((IXmlItem)FootstepSetsItem).XmlWriteTranslator).Write<IFootstepSetGetter>(
                    item: FootstepSetsItem,
                    node: node,
                    name: nameof(item.FootstepSets),
                    fieldIndex: (int)SkyrimMod_FieldIndex.FootstepSets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.FootstepSets));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                var StoryManagerBranchNodesItem = item.StoryManagerBranchNodes;
                ((GroupXmlWriteTranslation)((IXmlItem)StoryManagerBranchNodesItem).XmlWriteTranslator).Write<IStoryManagerBranchNodeGetter>(
                    item: StoryManagerBranchNodesItem,
                    node: node,
                    name: nameof(item.StoryManagerBranchNodes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.StoryManagerBranchNodes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                var StoryManagerQuestNodesItem = item.StoryManagerQuestNodes;
                ((GroupXmlWriteTranslation)((IXmlItem)StoryManagerQuestNodesItem).XmlWriteTranslator).Write<IStoryManagerQuestNodeGetter>(
                    item: StoryManagerQuestNodesItem,
                    node: node,
                    name: nameof(item.StoryManagerQuestNodes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.StoryManagerQuestNodes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                var StoryManagerEventNodesItem = item.StoryManagerEventNodes;
                ((GroupXmlWriteTranslation)((IXmlItem)StoryManagerEventNodesItem).XmlWriteTranslator).Write<IStoryManagerEventNodeGetter>(
                    item: StoryManagerEventNodesItem,
                    node: node,
                    name: nameof(item.StoryManagerEventNodes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.StoryManagerEventNodes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerEventNodes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogBranches) ?? true))
            {
                var DialogBranchesItem = item.DialogBranches;
                ((GroupXmlWriteTranslation)((IXmlItem)DialogBranchesItem).XmlWriteTranslator).Write<IDialogBranchGetter>(
                    item: DialogBranchesItem,
                    node: node,
                    name: nameof(item.DialogBranches),
                    fieldIndex: (int)SkyrimMod_FieldIndex.DialogBranches,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogBranches));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTracks) ?? true))
            {
                var MusicTracksItem = item.MusicTracks;
                ((GroupXmlWriteTranslation)((IXmlItem)MusicTracksItem).XmlWriteTranslator).Write<IMusicTrackGetter>(
                    item: MusicTracksItem,
                    node: node,
                    name: nameof(item.MusicTracks),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MusicTracks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MusicTracks));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogViews) ?? true))
            {
                var DialogViewsItem = item.DialogViews;
                ((GroupXmlWriteTranslation)((IXmlItem)DialogViewsItem).XmlWriteTranslator).Write<IDialogViewGetter>(
                    item: DialogViewsItem,
                    node: node,
                    name: nameof(item.DialogViews),
                    fieldIndex: (int)SkyrimMod_FieldIndex.DialogViews,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogViews));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.WordsOfPower) ?? true))
            {
                var WordsOfPowerItem = item.WordsOfPower;
                ((GroupXmlWriteTranslation)((IXmlItem)WordsOfPowerItem).XmlWriteTranslator).Write<IWordOfPowerGetter>(
                    item: WordsOfPowerItem,
                    node: node,
                    name: nameof(item.WordsOfPower),
                    fieldIndex: (int)SkyrimMod_FieldIndex.WordsOfPower,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.WordsOfPower));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Shouts) ?? true))
            {
                var ShoutsItem = item.Shouts;
                ((GroupXmlWriteTranslation)((IXmlItem)ShoutsItem).XmlWriteTranslator).Write<IShoutGetter>(
                    item: ShoutsItem,
                    node: node,
                    name: nameof(item.Shouts),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Shouts,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Shouts));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EquipTypes) ?? true))
            {
                var EquipTypesItem = item.EquipTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)EquipTypesItem).XmlWriteTranslator).Write<IEquipTypeGetter>(
                    item: EquipTypesItem,
                    node: node,
                    name: nameof(item.EquipTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.EquipTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EquipTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Relationships) ?? true))
            {
                var RelationshipsItem = item.Relationships;
                ((GroupXmlWriteTranslation)((IXmlItem)RelationshipsItem).XmlWriteTranslator).Write<IRelationshipGetter>(
                    item: RelationshipsItem,
                    node: node,
                    name: nameof(item.Relationships),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Relationships,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Relationships));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scenes) ?? true))
            {
                var ScenesItem = item.Scenes;
                ((GroupXmlWriteTranslation)((IXmlItem)ScenesItem).XmlWriteTranslator).Write<ISceneGetter>(
                    item: ScenesItem,
                    node: node,
                    name: nameof(item.Scenes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Scenes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scenes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AssociationTypes) ?? true))
            {
                var AssociationTypesItem = item.AssociationTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)AssociationTypesItem).XmlWriteTranslator).Write<IAssociationTypeGetter>(
                    item: AssociationTypesItem,
                    node: node,
                    name: nameof(item.AssociationTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.AssociationTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AssociationTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Outfits) ?? true))
            {
                var OutfitsItem = item.Outfits;
                ((GroupXmlWriteTranslation)((IXmlItem)OutfitsItem).XmlWriteTranslator).Write<IOutfitGetter>(
                    item: OutfitsItem,
                    node: node,
                    name: nameof(item.Outfits),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Outfits,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Outfits));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArtObjects) ?? true))
            {
                var ArtObjectsItem = item.ArtObjects;
                ((GroupXmlWriteTranslation)((IXmlItem)ArtObjectsItem).XmlWriteTranslator).Write<IArtObjectGetter>(
                    item: ArtObjectsItem,
                    node: node,
                    name: nameof(item.ArtObjects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ArtObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ArtObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialObjects) ?? true))
            {
                var MaterialObjectsItem = item.MaterialObjects;
                ((GroupXmlWriteTranslation)((IXmlItem)MaterialObjectsItem).XmlWriteTranslator).Write<IMaterialObjectGetter>(
                    item: MaterialObjectsItem,
                    node: node,
                    name: nameof(item.MaterialObjects),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MaterialObjects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MaterialObjects));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MovementTypes) ?? true))
            {
                var MovementTypesItem = item.MovementTypes;
                ((GroupXmlWriteTranslation)((IXmlItem)MovementTypesItem).XmlWriteTranslator).Write<IMovementTypeGetter>(
                    item: MovementTypesItem,
                    node: node,
                    name: nameof(item.MovementTypes),
                    fieldIndex: (int)SkyrimMod_FieldIndex.MovementTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MovementTypes));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundDescriptors) ?? true))
            {
                var SoundDescriptorsItem = item.SoundDescriptors;
                ((GroupXmlWriteTranslation)((IXmlItem)SoundDescriptorsItem).XmlWriteTranslator).Write<ISoundDescriptorGetter>(
                    item: SoundDescriptorsItem,
                    node: node,
                    name: nameof(item.SoundDescriptors),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoundDescriptors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundDescriptors));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DualCastData) ?? true))
            {
                var DualCastDataItem = item.DualCastData;
                ((GroupXmlWriteTranslation)((IXmlItem)DualCastDataItem).XmlWriteTranslator).Write<IDualCastDataGetter>(
                    item: DualCastDataItem,
                    node: node,
                    name: nameof(item.DualCastData),
                    fieldIndex: (int)SkyrimMod_FieldIndex.DualCastData,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DualCastData));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundCategories) ?? true))
            {
                var SoundCategoriesItem = item.SoundCategories;
                ((GroupXmlWriteTranslation)((IXmlItem)SoundCategoriesItem).XmlWriteTranslator).Write<ISoundCategoryGetter>(
                    item: SoundCategoriesItem,
                    node: node,
                    name: nameof(item.SoundCategories),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoundCategories,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundCategories));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundOutputModels) ?? true))
            {
                var SoundOutputModelsItem = item.SoundOutputModels;
                ((GroupXmlWriteTranslation)((IXmlItem)SoundOutputModelsItem).XmlWriteTranslator).Write<ISoundOutputModelGetter>(
                    item: SoundOutputModelsItem,
                    node: node,
                    name: nameof(item.SoundOutputModels),
                    fieldIndex: (int)SkyrimMod_FieldIndex.SoundOutputModels,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundOutputModels));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CollisionLayers) ?? true))
            {
                var CollisionLayersItem = item.CollisionLayers;
                ((GroupXmlWriteTranslation)((IXmlItem)CollisionLayersItem).XmlWriteTranslator).Write<ICollisionLayerGetter>(
                    item: CollisionLayersItem,
                    node: node,
                    name: nameof(item.CollisionLayers),
                    fieldIndex: (int)SkyrimMod_FieldIndex.CollisionLayers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CollisionLayers));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Colors) ?? true))
            {
                var ColorsItem = item.Colors;
                ((GroupXmlWriteTranslation)((IXmlItem)ColorsItem).XmlWriteTranslator).Write<IColorRecordGetter>(
                    item: ColorsItem,
                    node: node,
                    name: nameof(item.Colors),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Colors,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Colors));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ReverbParameters) ?? true))
            {
                var ReverbParametersItem = item.ReverbParameters;
                ((GroupXmlWriteTranslation)((IXmlItem)ReverbParametersItem).XmlWriteTranslator).Write<IReverbParametersGetter>(
                    item: ReverbParametersItem,
                    node: node,
                    name: nameof(item.ReverbParameters),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ReverbParameters,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ReverbParameters));
            }
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SkyrimMod");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SkyrimMod");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ISkyrimModGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SkyrimModXmlCreateTranslation
    {
        public readonly static SkyrimModXmlCreateTranslation Instance = new SkyrimModXmlCreateTranslation();

        public static void FillPublicXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "GameSettings":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                    try
                    {
                        item.GameSettings.CopyInFromXml<GameSetting>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keywords":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                    try
                    {
                        item.Keywords.CopyInFromXml<Keyword>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LocationReferenceTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                    try
                    {
                        item.LocationReferenceTypes.CopyInFromXml<LocationReferenceType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Actions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                    try
                    {
                        item.Actions.CopyInFromXml<ActionRecord>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSets":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                    try
                    {
                        item.TextureSets.CopyInFromXml<TextureSet>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Globals":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                    try
                    {
                        item.Globals.CopyInFromXml<Global>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                    try
                    {
                        item.Classes.CopyInFromXml<Class>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                    try
                    {
                        item.Factions.CopyInFromXml<Faction>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HeadParts":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.HeadParts);
                    try
                    {
                        item.HeadParts.CopyInFromXml<HeadPart>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hairs":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hairs);
                    try
                    {
                        item.Hairs.CopyInFromXml<Hair>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Eyes);
                    try
                    {
                        item.Eyes.CopyInFromXml<Eyes>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Races":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Races);
                    try
                    {
                        item.Races.CopyInFromXml<Race>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundMarkers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundMarkers);
                    try
                    {
                        item.SoundMarkers.CopyInFromXml<SoundMarker>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AcousticSpaces":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AcousticSpaces);
                    try
                    {
                        item.AcousticSpaces.CopyInFromXml<AcousticSpace>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicEffects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MagicEffects);
                    try
                    {
                        item.MagicEffects.CopyInFromXml<MagicEffect>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LandscapeTextures":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LandscapeTextures);
                    try
                    {
                        item.LandscapeTextures.CopyInFromXml<LandscapeTexture>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectEffects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ObjectEffects);
                    try
                    {
                        item.ObjectEffects.CopyInFromXml<ObjectEffect>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Spells);
                    try
                    {
                        item.Spells.CopyInFromXml<Spell>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scrolls":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scrolls);
                    try
                    {
                        item.Scrolls.CopyInFromXml<Scroll>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Activators":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Activators);
                    try
                    {
                        item.Activators.CopyInFromXml<Activator>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TalkingActivators":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TalkingActivators);
                    try
                    {
                        item.TalkingActivators.CopyInFromXml<TalkingActivator>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Armors":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Armors);
                    try
                    {
                        item.Armors.CopyInFromXml<Armor>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Books":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Books);
                    try
                    {
                        item.Books.CopyInFromXml<Book>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Containers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Containers);
                    try
                    {
                        item.Containers.CopyInFromXml<Container>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Doors":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Doors);
                    try
                    {
                        item.Doors.CopyInFromXml<Door>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingredients":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingredients);
                    try
                    {
                        item.Ingredients.CopyInFromXml<Ingredient>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lights":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Lights);
                    try
                    {
                        item.Lights.CopyInFromXml<Light>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MiscItems":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MiscItems);
                    try
                    {
                        item.MiscItems.CopyInFromXml<MiscItem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AlchemicalApparatuses":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                    try
                    {
                        item.AlchemicalApparatuses.CopyInFromXml<AlchemicalApparatus>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Statics":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Statics);
                    try
                    {
                        item.Statics.CopyInFromXml<Static>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MoveableStatics":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MoveableStatics);
                    try
                    {
                        item.MoveableStatics.CopyInFromXml<MoveableStatic>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Grasses":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Grasses);
                    try
                    {
                        item.Grasses.CopyInFromXml<Grass>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Trees":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Trees);
                    try
                    {
                        item.Trees.CopyInFromXml<Tree>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Florae":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Florae);
                    try
                    {
                        item.Florae.CopyInFromXml<Flora>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Furniture":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Furniture);
                    try
                    {
                        item.Furniture.CopyInFromXml<Furniture>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weapons":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weapons);
                    try
                    {
                        item.Weapons.CopyInFromXml<Weapon>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ammunitions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ammunitions);
                    try
                    {
                        item.Ammunitions.CopyInFromXml<Ammunition>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Npcs":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Npcs);
                    try
                    {
                        item.Npcs.CopyInFromXml<Npc>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledNpcs":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledNpcs);
                    try
                    {
                        item.LeveledNpcs.CopyInFromXml<LeveledNpc>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Keys":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keys);
                    try
                    {
                        item.Keys.CopyInFromXml<Key>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Ingestibles":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingestibles);
                    try
                    {
                        item.Ingestibles.CopyInFromXml<Ingestible>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleMarkers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleMarkers);
                    try
                    {
                        item.IdleMarkers.CopyInFromXml<IdleMarker>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ConstructibleObjects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                    try
                    {
                        item.ConstructibleObjects.CopyInFromXml<ConstructibleObject>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Projectiles":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Projectiles);
                    try
                    {
                        item.Projectiles.CopyInFromXml<Projectile>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hazards":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hazards);
                    try
                    {
                        item.Hazards.CopyInFromXml<Hazard>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulGems":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoulGems);
                    try
                    {
                        item.SoulGems.CopyInFromXml<SoulGem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledItems":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledItems);
                    try
                    {
                        item.LeveledItems.CopyInFromXml<LeveledItem>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weathers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weathers);
                    try
                    {
                        item.Weathers.CopyInFromXml<Weather>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climates":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Climates);
                    try
                    {
                        item.Climates.CopyInFromXml<Climate>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ShaderParticleGeometries":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ShaderParticleGeometries);
                    try
                    {
                        item.ShaderParticleGeometries.CopyInFromXml<ShaderParticleGeometry>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisualEffects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VisualEffects);
                    try
                    {
                        item.VisualEffects.CopyInFromXml<VisualEffect>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Regions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Regions);
                    try
                    {
                        item.Regions.CopyInFromXml<Region>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NavigationMeshInfoMaps":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps);
                    try
                    {
                        item.NavigationMeshInfoMaps.CopyInFromXml<NavigationMeshInfoMap>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Worldspaces":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Worldspaces);
                    try
                    {
                        item.Worldspaces.CopyInFromXml<Worldspace>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogTopics":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogTopics);
                    try
                    {
                        item.DialogTopics.CopyInFromXml<DialogTopic>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quests":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Quests);
                    try
                    {
                        item.Quests.CopyInFromXml<Quest>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IdleAnimations":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleAnimations);
                    try
                    {
                        item.IdleAnimations.CopyInFromXml<IdleAnimation>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Packages":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Packages);
                    try
                    {
                        item.Packages.CopyInFromXml<Package>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyles":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CombatStyles);
                    try
                    {
                        item.CombatStyles.CopyInFromXml<CombatStyle>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LoadScreens":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LoadScreens);
                    try
                    {
                        item.LoadScreens.CopyInFromXml<LoadScreen>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LeveledSpells":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledSpells);
                    try
                    {
                        item.LeveledSpells.CopyInFromXml<LeveledSpell>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AnimatedObjects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AnimatedObjects);
                    try
                    {
                        item.AnimatedObjects.CopyInFromXml<AnimatedObject>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Waters":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Waters);
                    try
                    {
                        item.Waters.CopyInFromXml<Water>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectShaders":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EffectShaders);
                    try
                    {
                        item.EffectShaders.CopyInFromXml<EffectShader>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Explosions":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Explosions);
                    try
                    {
                        item.Explosions.CopyInFromXml<Explosion>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Debris":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Debris);
                    try
                    {
                        item.Debris.CopyInFromXml<Debris>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ImageSpaces":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImageSpaces);
                    try
                    {
                        item.ImageSpaces.CopyInFromXml<ImageSpace>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ImageSpaceAdapters":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImageSpaceAdapters);
                    try
                    {
                        item.ImageSpaceAdapters.CopyInFromXml<ImageSpaceAdapter>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FormLists":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.FormLists);
                    try
                    {
                        item.FormLists.CopyInFromXml<FormList>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Perks":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Perks);
                    try
                    {
                        item.Perks.CopyInFromXml<Perk>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BodyParts":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.BodyParts);
                    try
                    {
                        item.BodyParts.CopyInFromXml<BodyPartData>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AddonNodes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AddonNodes);
                    try
                    {
                        item.AddonNodes.CopyInFromXml<AddonNode>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorValueInformation":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ActorValueInformation);
                    try
                    {
                        item.ActorValueInformation.CopyInFromXml<ActorValueInformation>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CameraShots":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CameraShots);
                    try
                    {
                        item.CameraShots.CopyInFromXml<CameraShot>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CameraPaths":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CameraPaths);
                    try
                    {
                        item.CameraPaths.CopyInFromXml<CameraPath>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VoiceTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VoiceTypes);
                    try
                    {
                        item.VoiceTypes.CopyInFromXml<VoiceType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MaterialTypes);
                    try
                    {
                        item.MaterialTypes.CopyInFromXml<MaterialType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Impacts":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Impacts);
                    try
                    {
                        item.Impacts.CopyInFromXml<Impact>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ImpactDataSets":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImpactDataSets);
                    try
                    {
                        item.ImpactDataSets.CopyInFromXml<ImpactDataSet>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ArmorAddons":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ArmorAddons);
                    try
                    {
                        item.ArmorAddons.CopyInFromXml<ArmorAddon>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EncounterZones":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EncounterZones);
                    try
                    {
                        item.EncounterZones.CopyInFromXml<EncounterZone>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Locations":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Locations);
                    try
                    {
                        item.Locations.CopyInFromXml<Location>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Messages":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Messages);
                    try
                    {
                        item.Messages.CopyInFromXml<Message>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DefaultObjectManagers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DefaultObjectManagers);
                    try
                    {
                        item.DefaultObjectManagers.CopyInFromXml<DefaultObjectManager>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightingTemplates":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LightingTemplates);
                    try
                    {
                        item.LightingTemplates.CopyInFromXml<LightingTemplate>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MusicTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MusicTypes);
                    try
                    {
                        item.MusicTypes.CopyInFromXml<MusicType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Footsteps":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Footsteps);
                    try
                    {
                        item.Footsteps.CopyInFromXml<Footstep>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FootstepSets":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.FootstepSets);
                    try
                    {
                        item.FootstepSets.CopyInFromXml<FootstepSet>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StoryManagerBranchNodes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes);
                    try
                    {
                        item.StoryManagerBranchNodes.CopyInFromXml<StoryManagerBranchNode>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StoryManagerQuestNodes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes);
                    try
                    {
                        item.StoryManagerQuestNodes.CopyInFromXml<StoryManagerQuestNode>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StoryManagerEventNodes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerEventNodes);
                    try
                    {
                        item.StoryManagerEventNodes.CopyInFromXml<StoryManagerEventNode>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogBranches":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogBranches);
                    try
                    {
                        item.DialogBranches.CopyInFromXml<DialogBranch>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MusicTracks":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MusicTracks);
                    try
                    {
                        item.MusicTracks.CopyInFromXml<MusicTrack>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DialogViews":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogViews);
                    try
                    {
                        item.DialogViews.CopyInFromXml<DialogView>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "WordsOfPower":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.WordsOfPower);
                    try
                    {
                        item.WordsOfPower.CopyInFromXml<WordOfPower>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Shouts":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Shouts);
                    try
                    {
                        item.Shouts.CopyInFromXml<Shout>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EquipTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EquipTypes);
                    try
                    {
                        item.EquipTypes.CopyInFromXml<EquipType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Relationships":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Relationships);
                    try
                    {
                        item.Relationships.CopyInFromXml<Relationship>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scenes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scenes);
                    try
                    {
                        item.Scenes.CopyInFromXml<Scene>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AssociationTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AssociationTypes);
                    try
                    {
                        item.AssociationTypes.CopyInFromXml<AssociationType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Outfits":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Outfits);
                    try
                    {
                        item.Outfits.CopyInFromXml<Outfit>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ArtObjects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ArtObjects);
                    try
                    {
                        item.ArtObjects.CopyInFromXml<ArtObject>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialObjects":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MaterialObjects);
                    try
                    {
                        item.MaterialObjects.CopyInFromXml<MaterialObject>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MovementTypes":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MovementTypes);
                    try
                    {
                        item.MovementTypes.CopyInFromXml<MovementType>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundDescriptors":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundDescriptors);
                    try
                    {
                        item.SoundDescriptors.CopyInFromXml<SoundDescriptor>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DualCastData":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DualCastData);
                    try
                    {
                        item.DualCastData.CopyInFromXml<DualCastData>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundCategories":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundCategories);
                    try
                    {
                        item.SoundCategories.CopyInFromXml<SoundCategory>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoundOutputModels":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundOutputModels);
                    try
                    {
                        item.SoundOutputModels.CopyInFromXml<SoundOutputModel>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CollisionLayers":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CollisionLayers);
                    try
                    {
                        item.CollisionLayers.CopyInFromXml<CollisionLayer>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Colors":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Colors);
                    try
                    {
                        item.Colors.CopyInFromXml<ColorRecord>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ReverbParameters":
                    errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ReverbParameters);
                    try
                    {
                        item.ReverbParameters.CopyInFromXml<ReverbParameters>(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Xml Write Mixins
    public static class SkyrimModXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            string? name = null,
            SkyrimMod.TranslationMask? translationMask = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mutagen
namespace Mutagen.Bethesda.Skyrim
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool TextureSets;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool HeadParts;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool SoundMarkers;
        public bool AcousticSpaces;
        public bool MagicEffects;
        public bool LandscapeTextures;
        public bool ObjectEffects;
        public bool Spells;
        public bool Scrolls;
        public bool Activators;
        public bool TalkingActivators;
        public bool Armors;
        public bool Books;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool MiscItems;
        public bool AlchemicalApparatuses;
        public bool Statics;
        public bool MoveableStatics;
        public bool Grasses;
        public bool Trees;
        public bool Florae;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool LeveledNpcs;
        public bool Keys;
        public bool Ingestibles;
        public bool IdleMarkers;
        public bool ConstructibleObjects;
        public bool Projectiles;
        public bool Hazards;
        public bool SoulGems;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool ShaderParticleGeometries;
        public bool VisualEffects;
        public bool Regions;
        public bool NavigationMeshInfoMaps;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool Packages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public bool Explosions;
        public bool Debris;
        public bool ImageSpaces;
        public bool ImageSpaceAdapters;
        public bool FormLists;
        public bool Perks;
        public bool BodyParts;
        public bool AddonNodes;
        public bool ActorValueInformation;
        public bool CameraShots;
        public bool CameraPaths;
        public bool VoiceTypes;
        public bool MaterialTypes;
        public bool Impacts;
        public bool ImpactDataSets;
        public bool ArmorAddons;
        public bool EncounterZones;
        public bool Locations;
        public bool Messages;
        public bool DefaultObjectManagers;
        public bool LightingTemplates;
        public bool MusicTypes;
        public bool Footsteps;
        public bool FootstepSets;
        public bool StoryManagerBranchNodes;
        public bool StoryManagerQuestNodes;
        public bool StoryManagerEventNodes;
        public bool DialogBranches;
        public bool MusicTracks;
        public bool DialogViews;
        public bool WordsOfPower;
        public bool Shouts;
        public bool EquipTypes;
        public bool Relationships;
        public bool Scenes;
        public bool AssociationTypes;
        public bool Outfits;
        public bool ArtObjects;
        public bool MaterialObjects;
        public bool MovementTypes;
        public bool SoundDescriptors;
        public bool DualCastData;
        public bool SoundCategories;
        public bool SoundOutputModels;
        public bool CollisionLayers;
        public bool Colors;
        public bool ReverbParameters;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            HeadParts = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            SoundMarkers = defaultValue;
            AcousticSpaces = defaultValue;
            MagicEffects = defaultValue;
            LandscapeTextures = defaultValue;
            ObjectEffects = defaultValue;
            Spells = defaultValue;
            Scrolls = defaultValue;
            Activators = defaultValue;
            TalkingActivators = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            MiscItems = defaultValue;
            AlchemicalApparatuses = defaultValue;
            Statics = defaultValue;
            MoveableStatics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Florae = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            LeveledNpcs = defaultValue;
            Keys = defaultValue;
            Ingestibles = defaultValue;
            IdleMarkers = defaultValue;
            ConstructibleObjects = defaultValue;
            Projectiles = defaultValue;
            Hazards = defaultValue;
            SoulGems = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            ShaderParticleGeometries = defaultValue;
            VisualEffects = defaultValue;
            Regions = defaultValue;
            NavigationMeshInfoMaps = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            Packages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
            Explosions = defaultValue;
            Debris = defaultValue;
            ImageSpaces = defaultValue;
            ImageSpaceAdapters = defaultValue;
            FormLists = defaultValue;
            Perks = defaultValue;
            BodyParts = defaultValue;
            AddonNodes = defaultValue;
            ActorValueInformation = defaultValue;
            CameraShots = defaultValue;
            CameraPaths = defaultValue;
            VoiceTypes = defaultValue;
            MaterialTypes = defaultValue;
            Impacts = defaultValue;
            ImpactDataSets = defaultValue;
            ArmorAddons = defaultValue;
            EncounterZones = defaultValue;
            Locations = defaultValue;
            Messages = defaultValue;
            DefaultObjectManagers = defaultValue;
            LightingTemplates = defaultValue;
            MusicTypes = defaultValue;
            Footsteps = defaultValue;
            FootstepSets = defaultValue;
            StoryManagerBranchNodes = defaultValue;
            StoryManagerQuestNodes = defaultValue;
            StoryManagerEventNodes = defaultValue;
            DialogBranches = defaultValue;
            MusicTracks = defaultValue;
            DialogViews = defaultValue;
            WordsOfPower = defaultValue;
            Shouts = defaultValue;
            EquipTypes = defaultValue;
            Relationships = defaultValue;
            Scenes = defaultValue;
            AssociationTypes = defaultValue;
            Outfits = defaultValue;
            ArtObjects = defaultValue;
            MaterialObjects = defaultValue;
            MovementTypes = defaultValue;
            SoundDescriptors = defaultValue;
            DualCastData = defaultValue;
            SoundCategories = defaultValue;
            SoundOutputModels = defaultValue;
            CollisionLayers = defaultValue;
            Colors = defaultValue;
            ReverbParameters = defaultValue;
        }
    }

    public interface ISkyrimModDisposableGetter : ISkyrimModGetter, IModDisposeGetter
    {
    }
}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModBinaryWriteTranslation
    {
        public readonly static SkyrimModBinaryWriteTranslation Instance = new SkyrimModBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ISkyrimModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            ModKey modKey,
            BinaryWriteParameters param,
            RecordTypeConverter? recordTypeConverter)
        {
            WriteModHeader(
                mod: item,
                writer: writer,
                modKey: modKey);
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                var HairsItem = item.Hairs;
                if (HairsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HairsItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: HairsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                var EyesItem = item.Eyes;
                if (EyesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EyesItem).BinaryWriteTranslator).Write<IEyesGetter>(
                        item: EyesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundMarkers ?? true)
            {
                var SoundMarkersItem = item.SoundMarkers;
                if (SoundMarkersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundMarkersItem).BinaryWriteTranslator).Write<ISoundMarkerGetter>(
                        item: SoundMarkersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AcousticSpaces ?? true)
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                if (AcousticSpacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AcousticSpacesItem).BinaryWriteTranslator).Write<IAcousticSpaceGetter>(
                        item: AcousticSpacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LandscapeTextures ?? true)
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                if (LandscapeTexturesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LandscapeTexturesItem).BinaryWriteTranslator).Write<ILandscapeTextureGetter>(
                        item: LandscapeTexturesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ObjectEffects ?? true)
            {
                var ObjectEffectsItem = item.ObjectEffects;
                if (ObjectEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ObjectEffectsItem).BinaryWriteTranslator).Write<IObjectEffectGetter>(
                        item: ObjectEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Scrolls ?? true)
            {
                var ScrollsItem = item.Scrolls;
                if (ScrollsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ScrollsItem).BinaryWriteTranslator).Write<IScrollGetter>(
                        item: ScrollsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.TalkingActivators ?? true)
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                if (TalkingActivatorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TalkingActivatorsItem).BinaryWriteTranslator).Write<ITalkingActivatorGetter>(
                        item: TalkingActivatorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MiscItems ?? true)
            {
                var MiscItemsItem = item.MiscItems;
                if (MiscItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MiscItemsItem).BinaryWriteTranslator).Write<IMiscItemGetter>(
                        item: MiscItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AlchemicalApparatuses ?? true)
            {
                var AlchemicalApparatusesItem = item.AlchemicalApparatuses;
                if (AlchemicalApparatusesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AlchemicalApparatusesItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: AlchemicalApparatusesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MoveableStatics ?? true)
            {
                var MoveableStaticsItem = item.MoveableStatics;
                if (MoveableStaticsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MoveableStaticsItem).BinaryWriteTranslator).Write<IMoveableStaticGetter>(
                        item: MoveableStaticsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Florae ?? true)
            {
                var FloraeItem = item.Florae;
                if (FloraeItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FloraeItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraeItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledNpcs ?? true)
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                if (LeveledNpcsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledNpcsItem).BinaryWriteTranslator).Write<ILeveledNpcGetter>(
                        item: LeveledNpcsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Ingestibles ?? true)
            {
                var IngestiblesItem = item.Ingestibles;
                if (IngestiblesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IngestiblesItem).BinaryWriteTranslator).Write<IIngestibleGetter>(
                        item: IngestiblesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.IdleMarkers ?? true)
            {
                var IdleMarkersItem = item.IdleMarkers;
                if (IdleMarkersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IdleMarkersItem).BinaryWriteTranslator).Write<IIdleMarkerGetter>(
                        item: IdleMarkersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ConstructibleObjects ?? true)
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                if (ConstructibleObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ConstructibleObjectsItem).BinaryWriteTranslator).Write<IConstructibleObjectGetter>(
                        item: ConstructibleObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Projectiles ?? true)
            {
                var ProjectilesItem = item.Projectiles;
                if (ProjectilesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ProjectilesItem).BinaryWriteTranslator).Write<IProjectileGetter>(
                        item: ProjectilesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Hazards ?? true)
            {
                var HazardsItem = item.Hazards;
                if (HazardsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)HazardsItem).BinaryWriteTranslator).Write<IHazardGetter>(
                        item: HazardsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                var SoulGemsItem = item.SoulGems;
                if (SoulGemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoulGemsItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: SoulGemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                var WeathersItem = item.Weathers;
                if (WeathersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WeathersItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeathersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ShaderParticleGeometries ?? true)
            {
                var ShaderParticleGeometriesItem = item.ShaderParticleGeometries;
                if (ShaderParticleGeometriesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ShaderParticleGeometriesItem).BinaryWriteTranslator).Write<IShaderParticleGeometryGetter>(
                        item: ShaderParticleGeometriesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.VisualEffects ?? true)
            {
                var VisualEffectsItem = item.VisualEffects;
                if (VisualEffectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)VisualEffectsItem).BinaryWriteTranslator).Write<IVisualEffectGetter>(
                        item: VisualEffectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.NavigationMeshInfoMaps ?? true)
            {
                var NavigationMeshInfoMapsItem = item.NavigationMeshInfoMaps;
                if (NavigationMeshInfoMapsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshInfoMapsItem).BinaryWriteTranslator).Write<INavigationMeshInfoMapGetter>(
                        item: NavigationMeshInfoMapsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((ListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                var DialogTopicsItem = item.DialogTopics;
                if (DialogTopicsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogTopicsItem).BinaryWriteTranslator).Write<IDialogTopicGetter>(
                        item: DialogTopicsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Packages ?? true)
            {
                var PackagesItem = item.Packages;
                if (PackagesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)PackagesItem).BinaryWriteTranslator).Write<IPackageGetter>(
                        item: PackagesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                var LeveledSpellsItem = item.LeveledSpells;
                if (LeveledSpellsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LeveledSpellsItem).BinaryWriteTranslator).Write<ILeveledSpellGetter>(
                        item: LeveledSpellsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Explosions ?? true)
            {
                var ExplosionsItem = item.Explosions;
                if (ExplosionsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ExplosionsItem).BinaryWriteTranslator).Write<IExplosionGetter>(
                        item: ExplosionsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Debris ?? true)
            {
                var DebrisItem = item.Debris;
                if (DebrisItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DebrisItem).BinaryWriteTranslator).Write<IDebrisGetter>(
                        item: DebrisItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ImageSpaces ?? true)
            {
                var ImageSpacesItem = item.ImageSpaces;
                if (ImageSpacesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write<IImageSpaceGetter>(
                        item: ImageSpacesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ImageSpaceAdapters ?? true)
            {
                var ImageSpaceAdaptersItem = item.ImageSpaceAdapters;
                if (ImageSpaceAdaptersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImageSpaceAdaptersItem).BinaryWriteTranslator).Write<IImageSpaceAdapterGetter>(
                        item: ImageSpaceAdaptersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.FormLists ?? true)
            {
                var FormListsItem = item.FormLists;
                if (FormListsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FormListsItem).BinaryWriteTranslator).Write<IFormListGetter>(
                        item: FormListsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Perks ?? true)
            {
                var PerksItem = item.Perks;
                if (PerksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)PerksItem).BinaryWriteTranslator).Write<IPerkGetter>(
                        item: PerksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.BodyParts ?? true)
            {
                var BodyPartsItem = item.BodyParts;
                if (BodyPartsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)BodyPartsItem).BinaryWriteTranslator).Write<IBodyPartDataGetter>(
                        item: BodyPartsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AddonNodes ?? true)
            {
                var AddonNodesItem = item.AddonNodes;
                if (AddonNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AddonNodesItem).BinaryWriteTranslator).Write<IAddonNodeGetter>(
                        item: AddonNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ActorValueInformation ?? true)
            {
                var ActorValueInformationItem = item.ActorValueInformation;
                if (ActorValueInformationItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ActorValueInformationItem).BinaryWriteTranslator).Write<IActorValueInformationGetter>(
                        item: ActorValueInformationItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CameraShots ?? true)
            {
                var CameraShotsItem = item.CameraShots;
                if (CameraShotsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CameraShotsItem).BinaryWriteTranslator).Write<ICameraShotGetter>(
                        item: CameraShotsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CameraPaths ?? true)
            {
                var CameraPathsItem = item.CameraPaths;
                if (CameraPathsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CameraPathsItem).BinaryWriteTranslator).Write<ICameraPathGetter>(
                        item: CameraPathsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.VoiceTypes ?? true)
            {
                var VoiceTypesItem = item.VoiceTypes;
                if (VoiceTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)VoiceTypesItem).BinaryWriteTranslator).Write<IVoiceTypeGetter>(
                        item: VoiceTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MaterialTypes ?? true)
            {
                var MaterialTypesItem = item.MaterialTypes;
                if (MaterialTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MaterialTypesItem).BinaryWriteTranslator).Write<IMaterialTypeGetter>(
                        item: MaterialTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Impacts ?? true)
            {
                var ImpactsItem = item.Impacts;
                if (ImpactsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImpactsItem).BinaryWriteTranslator).Write<IImpactGetter>(
                        item: ImpactsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ImpactDataSets ?? true)
            {
                var ImpactDataSetsItem = item.ImpactDataSets;
                if (ImpactDataSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ImpactDataSetsItem).BinaryWriteTranslator).Write<IImpactDataSetGetter>(
                        item: ImpactDataSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ArmorAddons ?? true)
            {
                var ArmorAddonsItem = item.ArmorAddons;
                if (ArmorAddonsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArmorAddonsItem).BinaryWriteTranslator).Write<IArmorAddonGetter>(
                        item: ArmorAddonsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EncounterZones ?? true)
            {
                var EncounterZonesItem = item.EncounterZones;
                if (EncounterZonesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EncounterZonesItem).BinaryWriteTranslator).Write<IEncounterZoneGetter>(
                        item: EncounterZonesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Locations ?? true)
            {
                var LocationsItem = item.Locations;
                if (LocationsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LocationsItem).BinaryWriteTranslator).Write<ILocationGetter>(
                        item: LocationsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Messages ?? true)
            {
                var MessagesItem = item.Messages;
                if (MessagesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MessagesItem).BinaryWriteTranslator).Write<IMessageGetter>(
                        item: MessagesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DefaultObjectManagers ?? true)
            {
                var DefaultObjectManagersItem = item.DefaultObjectManagers;
                if (DefaultObjectManagersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectManagersItem).BinaryWriteTranslator).Write<IDefaultObjectManagerGetter>(
                        item: DefaultObjectManagersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.LightingTemplates ?? true)
            {
                var LightingTemplatesItem = item.LightingTemplates;
                if (LightingTemplatesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)LightingTemplatesItem).BinaryWriteTranslator).Write<ILightingTemplateGetter>(
                        item: LightingTemplatesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MusicTypes ?? true)
            {
                var MusicTypesItem = item.MusicTypes;
                if (MusicTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MusicTypesItem).BinaryWriteTranslator).Write<IMusicTypeGetter>(
                        item: MusicTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Footsteps ?? true)
            {
                var FootstepsItem = item.Footsteps;
                if (FootstepsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FootstepsItem).BinaryWriteTranslator).Write<IFootstepGetter>(
                        item: FootstepsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.FootstepSets ?? true)
            {
                var FootstepSetsItem = item.FootstepSets;
                if (FootstepSetsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)FootstepSetsItem).BinaryWriteTranslator).Write<IFootstepSetGetter>(
                        item: FootstepSetsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.StoryManagerBranchNodes ?? true)
            {
                var StoryManagerBranchNodesItem = item.StoryManagerBranchNodes;
                if (StoryManagerBranchNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerBranchNodesItem).BinaryWriteTranslator).Write<IStoryManagerBranchNodeGetter>(
                        item: StoryManagerBranchNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.StoryManagerQuestNodes ?? true)
            {
                var StoryManagerQuestNodesItem = item.StoryManagerQuestNodes;
                if (StoryManagerQuestNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerQuestNodesItem).BinaryWriteTranslator).Write<IStoryManagerQuestNodeGetter>(
                        item: StoryManagerQuestNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.StoryManagerEventNodes ?? true)
            {
                var StoryManagerEventNodesItem = item.StoryManagerEventNodes;
                if (StoryManagerEventNodesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerEventNodesItem).BinaryWriteTranslator).Write<IStoryManagerEventNodeGetter>(
                        item: StoryManagerEventNodesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogBranches ?? true)
            {
                var DialogBranchesItem = item.DialogBranches;
                if (DialogBranchesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogBranchesItem).BinaryWriteTranslator).Write<IDialogBranchGetter>(
                        item: DialogBranchesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MusicTracks ?? true)
            {
                var MusicTracksItem = item.MusicTracks;
                if (MusicTracksItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MusicTracksItem).BinaryWriteTranslator).Write<IMusicTrackGetter>(
                        item: MusicTracksItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DialogViews ?? true)
            {
                var DialogViewsItem = item.DialogViews;
                if (DialogViewsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DialogViewsItem).BinaryWriteTranslator).Write<IDialogViewGetter>(
                        item: DialogViewsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.WordsOfPower ?? true)
            {
                var WordsOfPowerItem = item.WordsOfPower;
                if (WordsOfPowerItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)WordsOfPowerItem).BinaryWriteTranslator).Write<IWordOfPowerGetter>(
                        item: WordsOfPowerItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Shouts ?? true)
            {
                var ShoutsItem = item.Shouts;
                if (ShoutsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ShoutsItem).BinaryWriteTranslator).Write<IShoutGetter>(
                        item: ShoutsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.EquipTypes ?? true)
            {
                var EquipTypesItem = item.EquipTypes;
                if (EquipTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)EquipTypesItem).BinaryWriteTranslator).Write<IEquipTypeGetter>(
                        item: EquipTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Relationships ?? true)
            {
                var RelationshipsItem = item.Relationships;
                if (RelationshipsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)RelationshipsItem).BinaryWriteTranslator).Write<IRelationshipGetter>(
                        item: RelationshipsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Scenes ?? true)
            {
                var ScenesItem = item.Scenes;
                if (ScenesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ScenesItem).BinaryWriteTranslator).Write<ISceneGetter>(
                        item: ScenesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.AssociationTypes ?? true)
            {
                var AssociationTypesItem = item.AssociationTypes;
                if (AssociationTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)AssociationTypesItem).BinaryWriteTranslator).Write<IAssociationTypeGetter>(
                        item: AssociationTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Outfits ?? true)
            {
                var OutfitsItem = item.Outfits;
                if (OutfitsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)OutfitsItem).BinaryWriteTranslator).Write<IOutfitGetter>(
                        item: OutfitsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ArtObjects ?? true)
            {
                var ArtObjectsItem = item.ArtObjects;
                if (ArtObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ArtObjectsItem).BinaryWriteTranslator).Write<IArtObjectGetter>(
                        item: ArtObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MaterialObjects ?? true)
            {
                var MaterialObjectsItem = item.MaterialObjects;
                if (MaterialObjectsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MaterialObjectsItem).BinaryWriteTranslator).Write<IMaterialObjectGetter>(
                        item: MaterialObjectsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.MovementTypes ?? true)
            {
                var MovementTypesItem = item.MovementTypes;
                if (MovementTypesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)MovementTypesItem).BinaryWriteTranslator).Write<IMovementTypeGetter>(
                        item: MovementTypesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundDescriptors ?? true)
            {
                var SoundDescriptorsItem = item.SoundDescriptors;
                if (SoundDescriptorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundDescriptorsItem).BinaryWriteTranslator).Write<ISoundDescriptorGetter>(
                        item: SoundDescriptorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.DualCastData ?? true)
            {
                var DualCastDataItem = item.DualCastData;
                if (DualCastDataItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)DualCastDataItem).BinaryWriteTranslator).Write<IDualCastDataGetter>(
                        item: DualCastDataItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundCategories ?? true)
            {
                var SoundCategoriesItem = item.SoundCategories;
                if (SoundCategoriesItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundCategoriesItem).BinaryWriteTranslator).Write<ISoundCategoryGetter>(
                        item: SoundCategoriesItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.SoundOutputModels ?? true)
            {
                var SoundOutputModelsItem = item.SoundOutputModels;
                if (SoundOutputModelsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)SoundOutputModelsItem).BinaryWriteTranslator).Write<ISoundOutputModelGetter>(
                        item: SoundOutputModelsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.CollisionLayers ?? true)
            {
                var CollisionLayersItem = item.CollisionLayers;
                if (CollisionLayersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)CollisionLayersItem).BinaryWriteTranslator).Write<ICollisionLayerGetter>(
                        item: CollisionLayersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.Colors ?? true)
            {
                var ColorsItem = item.Colors;
                if (ColorsItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ColorsItem).BinaryWriteTranslator).Write<IColorRecordGetter>(
                        item: ColorsItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
            if (importMask?.ReverbParameters ?? true)
            {
                var ReverbParametersItem = item.ReverbParameters;
                if (ReverbParametersItem.RecordCache.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)ReverbParametersItem).BinaryWriteTranslator).Write<IReverbParametersGetter>(
                        item: ReverbParametersItem,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISkyrimModGetter item,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            writer.MetaData.MasterReferences = UtilityTranslation.ConstructWriteMasters(item, param);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask,
                modKey: modKey,
                param: param,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            RecordTypeConverter? recordTypeConverter = null,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SkyrimModBinaryCreateTranslation
    {
        public readonly static SkyrimModBinaryCreateTranslation Instance = new SkyrimModBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISkyrimMod item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            ISkyrimMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null);
                    frame.MetaData.MasterReferences!.SetTo(item.ModHeader.MasterReferences);
                    return (int)SkyrimMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HAIR:
                {
                    if (importMask?.Hairs ?? true)
                    {
                        item.Hairs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    if (importMask?.Eyes ?? true)
                    {
                        item.Eyes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.SoundMarkers ?? true)
                    {
                        item.SoundMarkers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    if (importMask?.AcousticSpaces ?? true)
                    {
                        item.AcousticSpaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandscapeTextures ?? true)
                    {
                        item.LandscapeTextures.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.ObjectEffects ?? true)
                    {
                        item.ObjectEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRL:
                {
                    if (importMask?.Scrolls ?? true)
                    {
                        item.Scrolls.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Scrolls;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    if (importMask?.TalkingActivators ?? true)
                    {
                        item.TalkingActivators.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.MiscItems ?? true)
                    {
                        item.MiscItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.APPA:
                {
                    if (importMask?.AlchemicalApparatuses ?? true)
                    {
                        item.AlchemicalApparatuses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AlchemicalApparatuses;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Statics;
                }
                case RecordTypeInts.MSTT:
                {
                    if (importMask?.MoveableStatics ?? true)
                    {
                        item.MoveableStatics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Florae ?? true)
                    {
                        item.Florae.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    if (importMask?.LeveledNpcs ?? true)
                    {
                        item.LeveledNpcs.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Ingestibles ?? true)
                    {
                        item.Ingestibles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    if (importMask?.IdleMarkers ?? true)
                    {
                        item.IdleMarkers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.COBJ:
                {
                    if (importMask?.ConstructibleObjects ?? true)
                    {
                        item.ConstructibleObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.PROJ:
                {
                    if (importMask?.Projectiles ?? true)
                    {
                        item.Projectiles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    if (importMask?.Hazards ?? true)
                    {
                        item.Hazards.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Hazards;
                }
                case RecordTypeInts.SLGM:
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        item.SoulGems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weathers ?? true)
                    {
                        item.Weathers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    if (importMask?.ShaderParticleGeometries ?? true)
                    {
                        item.ShaderParticleGeometries.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    if (importMask?.VisualEffects ?? true)
                    {
                        item.VisualEffects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    if (importMask?.NavigationMeshInfoMaps ?? true)
                    {
                        item.NavigationMeshInfoMaps.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    if (importMask?.DialogTopics ?? true)
                    {
                        item.DialogTopics.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.Packages ?? true)
                    {
                        item.Packages.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    if (importMask?.LeveledSpells ?? true)
                    {
                        item.LeveledSpells.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    if (importMask?.Explosions ?? true)
                    {
                        item.Explosions.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    if (importMask?.Debris ?? true)
                    {
                        item.Debris.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    if (importMask?.ImageSpaces ?? true)
                    {
                        item.ImageSpaces.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    if (importMask?.ImageSpaceAdapters ?? true)
                    {
                        item.ImageSpaceAdapters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    if (importMask?.FormLists ?? true)
                    {
                        item.FormLists.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    if (importMask?.Perks ?? true)
                    {
                        item.Perks.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    if (importMask?.BodyParts ?? true)
                    {
                        item.BodyParts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    if (importMask?.AddonNodes ?? true)
                    {
                        item.AddonNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    if (importMask?.ActorValueInformation ?? true)
                    {
                        item.ActorValueInformation.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    if (importMask?.CameraShots ?? true)
                    {
                        item.CameraShots.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    if (importMask?.CameraPaths ?? true)
                    {
                        item.CameraPaths.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    if (importMask?.VoiceTypes ?? true)
                    {
                        item.VoiceTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    if (importMask?.MaterialTypes ?? true)
                    {
                        item.MaterialTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    if (importMask?.Impacts ?? true)
                    {
                        item.Impacts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    if (importMask?.ImpactDataSets ?? true)
                    {
                        item.ImpactDataSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    if (importMask?.ArmorAddons ?? true)
                    {
                        item.ArmorAddons.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    if (importMask?.EncounterZones ?? true)
                    {
                        item.EncounterZones.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    if (importMask?.Locations ?? true)
                    {
                        item.Locations.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    if (importMask?.Messages ?? true)
                    {
                        item.Messages.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    if (importMask?.DefaultObjectManagers ?? true)
                    {
                        item.DefaultObjectManagers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.LGTM:
                {
                    if (importMask?.LightingTemplates ?? true)
                    {
                        item.LightingTemplates.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    if (importMask?.MusicTypes ?? true)
                    {
                        item.MusicTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    if (importMask?.Footsteps ?? true)
                    {
                        item.Footsteps.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    if (importMask?.FootstepSets ?? true)
                    {
                        item.FootstepSets.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    if (importMask?.StoryManagerBranchNodes ?? true)
                    {
                        item.StoryManagerBranchNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    if (importMask?.StoryManagerQuestNodes ?? true)
                    {
                        item.StoryManagerQuestNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    if (importMask?.StoryManagerEventNodes ?? true)
                    {
                        item.StoryManagerEventNodes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.DLBR:
                {
                    if (importMask?.DialogBranches ?? true)
                    {
                        item.DialogBranches.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DialogBranches;
                }
                case RecordTypeInts.MUST:
                {
                    if (importMask?.MusicTracks ?? true)
                    {
                        item.MusicTracks.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    if (importMask?.DialogViews ?? true)
                    {
                        item.DialogViews.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.WOOP:
                {
                    if (importMask?.WordsOfPower ?? true)
                    {
                        item.WordsOfPower.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.WordsOfPower;
                }
                case RecordTypeInts.SHOU:
                {
                    if (importMask?.Shouts ?? true)
                    {
                        item.Shouts.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Shouts;
                }
                case RecordTypeInts.EQUP:
                {
                    if (importMask?.EquipTypes ?? true)
                    {
                        item.EquipTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    if (importMask?.Relationships ?? true)
                    {
                        item.Relationships.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Relationships;
                }
                case RecordTypeInts.SCEN:
                {
                    if (importMask?.Scenes ?? true)
                    {
                        item.Scenes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Scenes;
                }
                case RecordTypeInts.ASTP:
                {
                    if (importMask?.AssociationTypes ?? true)
                    {
                        item.AssociationTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    if (importMask?.Outfits ?? true)
                    {
                        item.Outfits.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    if (importMask?.ArtObjects ?? true)
                    {
                        item.ArtObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    if (importMask?.MaterialObjects ?? true)
                    {
                        item.MaterialObjects.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    if (importMask?.MovementTypes ?? true)
                    {
                        item.MovementTypes.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    if (importMask?.SoundDescriptors ?? true)
                    {
                        item.SoundDescriptors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.DUAL:
                {
                    if (importMask?.DualCastData ?? true)
                    {
                        item.DualCastData.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DualCastData;
                }
                case RecordTypeInts.SNCT:
                {
                    if (importMask?.SoundCategories ?? true)
                    {
                        item.SoundCategories.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    if (importMask?.SoundOutputModels ?? true)
                    {
                        item.SoundOutputModels.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    if (importMask?.CollisionLayers ?? true)
                    {
                        item.CollisionLayers.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    if (importMask?.Colors ?? true)
                    {
                        item.Colors.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    if (importMask?.ReverbParameters ?? true)
                    {
                        item.ReverbParameters.CopyInFromBinary(
                            frame: frame,
                            recordTypeConverter: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ReverbParameters;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SkyrimModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                writer: writer,
                param: param,
                modKey: modKey,
                recordTypeConverter: null);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            string path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            bool disposeStrings = param.StringsWriter == null;
            var stringsWriter = param.StringsWriter ?? (EnumExt.HasFlag((int)item.ModHeader.Flags, Mutagen.Bethesda.Internals.Constants.LocalizedFlag) ? new StringsWriter(modKey, Path.Combine(Path.GetDirectoryName(path), "Strings")) : null);
            var bundle = new WritingBundle(item.GameMode)
            {
                StringsWriter = stringsWriter
            };
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey,
                    recordTypeConverter: null);
            }
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.GameMode),
                dispose: false))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey,
                    recordTypeConverter: null);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim.Internals
{
    public partial class SkyrimModBinaryOverlay : ISkyrimModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISkyrimModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);

        public GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroupGetter<T>() => this.GetGroupGetter<T>();
        void IModGetter.WriteToBinary(string path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(string path, BinaryWriteParameters? param) => this.WriteToBinaryParallel(path, param: param);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => SkyrimModCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type, throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkyrimModXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _data;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _data.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? ModHeaderBinaryOverlay.ModHeaderFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package), _package) : default;
        public IModHeaderGetter ModHeader => _ModHeader ?? new ModHeader();
        #endregion
        #region GameSettings
        private RangeInt64? _GameSettingsLocation;
        private IGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocation.HasValue ? GroupBinaryOverlay<IGameSettingGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GameSettingsLocation!.Value.Min, _GameSettingsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Group<GameSetting>(this);
        #endregion
        #region Keywords
        private RangeInt64? _KeywordsLocation;
        private IGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocation.HasValue ? GroupBinaryOverlay<IKeywordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _KeywordsLocation!.Value.Min, _KeywordsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new Group<Keyword>(this);
        #endregion
        #region LocationReferenceTypes
        private RangeInt64? _LocationReferenceTypesLocation;
        private IGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocation.HasValue ? GroupBinaryOverlay<ILocationReferenceTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LocationReferenceTypesLocation!.Value.Min, _LocationReferenceTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new Group<LocationReferenceType>(this);
        #endregion
        #region Actions
        private RangeInt64? _ActionsLocation;
        private IGroupGetter<IActionRecordGetter>? _Actions => _ActionsLocation.HasValue ? GroupBinaryOverlay<IActionRecordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActionsLocation!.Value.Min, _ActionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActionRecordGetter> Actions => _Actions ?? new Group<ActionRecord>(this);
        #endregion
        #region TextureSets
        private RangeInt64? _TextureSetsLocation;
        private IGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocation.HasValue ? GroupBinaryOverlay<ITextureSetGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TextureSetsLocation!.Value.Min, _TextureSetsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new Group<TextureSet>(this);
        #endregion
        #region Globals
        private RangeInt64? _GlobalsLocation;
        private IGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocation.HasValue ? GroupBinaryOverlay<IGlobalGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GlobalsLocation!.Value.Min, _GlobalsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGlobalGetter> Globals => _Globals ?? new Group<Global>(this);
        #endregion
        #region Classes
        private RangeInt64? _ClassesLocation;
        private IGroupGetter<IClassGetter>? _Classes => _ClassesLocation.HasValue ? GroupBinaryOverlay<IClassGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClassesLocation!.Value.Min, _ClassesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClassGetter> Classes => _Classes ?? new Group<Class>(this);
        #endregion
        #region Factions
        private RangeInt64? _FactionsLocation;
        private IGroupGetter<IFactionGetter>? _Factions => _FactionsLocation.HasValue ? GroupBinaryOverlay<IFactionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FactionsLocation!.Value.Min, _FactionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFactionGetter> Factions => _Factions ?? new Group<Faction>(this);
        #endregion
        #region HeadParts
        private RangeInt64? _HeadPartsLocation;
        private IGroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocation.HasValue ? GroupBinaryOverlay<IHeadPartGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HeadPartsLocation!.Value.Min, _HeadPartsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new Group<HeadPart>(this);
        #endregion
        #region Hairs
        private RangeInt64? _HairsLocation;
        private IGroupGetter<IHairGetter>? _Hairs => _HairsLocation.HasValue ? GroupBinaryOverlay<IHairGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HairsLocation!.Value.Min, _HairsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHairGetter> Hairs => _Hairs ?? new Group<Hair>(this);
        #endregion
        #region Eyes
        private RangeInt64? _EyesLocation;
        private IGroupGetter<IEyesGetter>? _Eyes => _EyesLocation.HasValue ? GroupBinaryOverlay<IEyesGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EyesLocation!.Value.Min, _EyesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEyesGetter> Eyes => _Eyes ?? new Group<Eyes>(this);
        #endregion
        #region Races
        private RangeInt64? _RacesLocation;
        private IGroupGetter<IRaceGetter>? _Races => _RacesLocation.HasValue ? GroupBinaryOverlay<IRaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RacesLocation!.Value.Min, _RacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRaceGetter> Races => _Races ?? new Group<Race>(this);
        #endregion
        #region SoundMarkers
        private RangeInt64? _SoundMarkersLocation;
        private IGroupGetter<ISoundMarkerGetter>? _SoundMarkers => _SoundMarkersLocation.HasValue ? GroupBinaryOverlay<ISoundMarkerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundMarkersLocation!.Value.Min, _SoundMarkersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundMarkerGetter> SoundMarkers => _SoundMarkers ?? new Group<SoundMarker>(this);
        #endregion
        #region AcousticSpaces
        private RangeInt64? _AcousticSpacesLocation;
        private IGroupGetter<IAcousticSpaceGetter>? _AcousticSpaces => _AcousticSpacesLocation.HasValue ? GroupBinaryOverlay<IAcousticSpaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AcousticSpacesLocation!.Value.Min, _AcousticSpacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAcousticSpaceGetter> AcousticSpaces => _AcousticSpaces ?? new Group<AcousticSpace>(this);
        #endregion
        #region MagicEffects
        private RangeInt64? _MagicEffectsLocation;
        private IGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocation.HasValue ? GroupBinaryOverlay<IMagicEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MagicEffectsLocation!.Value.Min, _MagicEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new Group<MagicEffect>(this);
        #endregion
        #region LandscapeTextures
        private RangeInt64? _LandscapeTexturesLocation;
        private IGroupGetter<ILandscapeTextureGetter>? _LandscapeTextures => _LandscapeTexturesLocation.HasValue ? GroupBinaryOverlay<ILandscapeTextureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LandscapeTexturesLocation!.Value.Min, _LandscapeTexturesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILandscapeTextureGetter> LandscapeTextures => _LandscapeTextures ?? new Group<LandscapeTexture>(this);
        #endregion
        #region ObjectEffects
        private RangeInt64? _ObjectEffectsLocation;
        private IGroupGetter<IObjectEffectGetter>? _ObjectEffects => _ObjectEffectsLocation.HasValue ? GroupBinaryOverlay<IObjectEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ObjectEffectsLocation!.Value.Min, _ObjectEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IObjectEffectGetter> ObjectEffects => _ObjectEffects ?? new Group<ObjectEffect>(this);
        #endregion
        #region Spells
        private RangeInt64? _SpellsLocation;
        private IGroupGetter<ISpellGetter>? _Spells => _SpellsLocation.HasValue ? GroupBinaryOverlay<ISpellGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SpellsLocation!.Value.Min, _SpellsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISpellGetter> Spells => _Spells ?? new Group<Spell>(this);
        #endregion
        #region Scrolls
        private RangeInt64? _ScrollsLocation;
        private IGroupGetter<IScrollGetter>? _Scrolls => _ScrollsLocation.HasValue ? GroupBinaryOverlay<IScrollGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ScrollsLocation!.Value.Min, _ScrollsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IScrollGetter> Scrolls => _Scrolls ?? new Group<Scroll>(this);
        #endregion
        #region Activators
        private RangeInt64? _ActivatorsLocation;
        private IGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocation.HasValue ? GroupBinaryOverlay<IActivatorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActivatorsLocation!.Value.Min, _ActivatorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActivatorGetter> Activators => _Activators ?? new Group<Activator>(this);
        #endregion
        #region TalkingActivators
        private RangeInt64? _TalkingActivatorsLocation;
        private IGroupGetter<ITalkingActivatorGetter>? _TalkingActivators => _TalkingActivatorsLocation.HasValue ? GroupBinaryOverlay<ITalkingActivatorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TalkingActivatorsLocation!.Value.Min, _TalkingActivatorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITalkingActivatorGetter> TalkingActivators => _TalkingActivators ?? new Group<TalkingActivator>(this);
        #endregion
        #region Armors
        private RangeInt64? _ArmorsLocation;
        private IGroupGetter<IArmorGetter>? _Armors => _ArmorsLocation.HasValue ? GroupBinaryOverlay<IArmorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArmorsLocation!.Value.Min, _ArmorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArmorGetter> Armors => _Armors ?? new Group<Armor>(this);
        #endregion
        #region Books
        private RangeInt64? _BooksLocation;
        private IGroupGetter<IBookGetter>? _Books => _BooksLocation.HasValue ? GroupBinaryOverlay<IBookGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _BooksLocation!.Value.Min, _BooksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IBookGetter> Books => _Books ?? new Group<Book>(this);
        #endregion
        #region Containers
        private RangeInt64? _ContainersLocation;
        private IGroupGetter<IContainerGetter>? _Containers => _ContainersLocation.HasValue ? GroupBinaryOverlay<IContainerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ContainersLocation!.Value.Min, _ContainersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IContainerGetter> Containers => _Containers ?? new Group<Container>(this);
        #endregion
        #region Doors
        private RangeInt64? _DoorsLocation;
        private IGroupGetter<IDoorGetter>? _Doors => _DoorsLocation.HasValue ? GroupBinaryOverlay<IDoorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DoorsLocation!.Value.Min, _DoorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDoorGetter> Doors => _Doors ?? new Group<Door>(this);
        #endregion
        #region Ingredients
        private RangeInt64? _IngredientsLocation;
        private IGroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocation.HasValue ? GroupBinaryOverlay<IIngredientGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IngredientsLocation!.Value.Min, _IngredientsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new Group<Ingredient>(this);
        #endregion
        #region Lights
        private RangeInt64? _LightsLocation;
        private IGroupGetter<ILightGetter>? _Lights => _LightsLocation.HasValue ? GroupBinaryOverlay<ILightGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LightsLocation!.Value.Min, _LightsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILightGetter> Lights => _Lights ?? new Group<Light>(this);
        #endregion
        #region MiscItems
        private RangeInt64? _MiscItemsLocation;
        private IGroupGetter<IMiscItemGetter>? _MiscItems => _MiscItemsLocation.HasValue ? GroupBinaryOverlay<IMiscItemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MiscItemsLocation!.Value.Min, _MiscItemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMiscItemGetter> MiscItems => _MiscItems ?? new Group<MiscItem>(this);
        #endregion
        #region AlchemicalApparatuses
        private RangeInt64? _AlchemicalApparatusesLocation;
        private IGroupGetter<IAlchemicalApparatusGetter>? _AlchemicalApparatuses => _AlchemicalApparatusesLocation.HasValue ? GroupBinaryOverlay<IAlchemicalApparatusGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AlchemicalApparatusesLocation!.Value.Min, _AlchemicalApparatusesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses => _AlchemicalApparatuses ?? new Group<AlchemicalApparatus>(this);
        #endregion
        #region Statics
        private RangeInt64? _StaticsLocation;
        private IGroupGetter<IStaticGetter>? _Statics => _StaticsLocation.HasValue ? GroupBinaryOverlay<IStaticGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StaticsLocation!.Value.Min, _StaticsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStaticGetter> Statics => _Statics ?? new Group<Static>(this);
        #endregion
        #region MoveableStatics
        private RangeInt64? _MoveableStaticsLocation;
        private IGroupGetter<IMoveableStaticGetter>? _MoveableStatics => _MoveableStaticsLocation.HasValue ? GroupBinaryOverlay<IMoveableStaticGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MoveableStaticsLocation!.Value.Min, _MoveableStaticsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMoveableStaticGetter> MoveableStatics => _MoveableStatics ?? new Group<MoveableStatic>(this);
        #endregion
        #region Grasses
        private RangeInt64? _GrassesLocation;
        private IGroupGetter<IGrassGetter>? _Grasses => _GrassesLocation.HasValue ? GroupBinaryOverlay<IGrassGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _GrassesLocation!.Value.Min, _GrassesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IGrassGetter> Grasses => _Grasses ?? new Group<Grass>(this);
        #endregion
        #region Trees
        private RangeInt64? _TreesLocation;
        private IGroupGetter<ITreeGetter>? _Trees => _TreesLocation.HasValue ? GroupBinaryOverlay<ITreeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _TreesLocation!.Value.Min, _TreesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ITreeGetter> Trees => _Trees ?? new Group<Tree>(this);
        #endregion
        #region Florae
        private RangeInt64? _FloraeLocation;
        private IGroupGetter<IFloraGetter>? _Florae => _FloraeLocation.HasValue ? GroupBinaryOverlay<IFloraGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FloraeLocation!.Value.Min, _FloraeLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFloraGetter> Florae => _Florae ?? new Group<Flora>(this);
        #endregion
        #region Furniture
        private RangeInt64? _FurnitureLocation;
        private IGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocation.HasValue ? GroupBinaryOverlay<IFurnitureGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FurnitureLocation!.Value.Min, _FurnitureLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new Group<Furniture>(this);
        #endregion
        #region Weapons
        private RangeInt64? _WeaponsLocation;
        private IGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocation.HasValue ? GroupBinaryOverlay<IWeaponGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WeaponsLocation!.Value.Min, _WeaponsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new Group<Weapon>(this);
        #endregion
        #region Ammunitions
        private RangeInt64? _AmmunitionsLocation;
        private IGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocation.HasValue ? GroupBinaryOverlay<IAmmunitionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AmmunitionsLocation!.Value.Min, _AmmunitionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new Group<Ammunition>(this);
        #endregion
        #region Npcs
        private RangeInt64? _NpcsLocation;
        private IGroupGetter<INpcGetter>? _Npcs => _NpcsLocation.HasValue ? GroupBinaryOverlay<INpcGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _NpcsLocation!.Value.Min, _NpcsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<INpcGetter> Npcs => _Npcs ?? new Group<Npc>(this);
        #endregion
        #region LeveledNpcs
        private RangeInt64? _LeveledNpcsLocation;
        private IGroupGetter<ILeveledNpcGetter>? _LeveledNpcs => _LeveledNpcsLocation.HasValue ? GroupBinaryOverlay<ILeveledNpcGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledNpcsLocation!.Value.Min, _LeveledNpcsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledNpcGetter> LeveledNpcs => _LeveledNpcs ?? new Group<LeveledNpc>(this);
        #endregion
        #region Keys
        private RangeInt64? _KeysLocation;
        private IGroupGetter<IKeyGetter>? _Keys => _KeysLocation.HasValue ? GroupBinaryOverlay<IKeyGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _KeysLocation!.Value.Min, _KeysLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IKeyGetter> Keys => _Keys ?? new Group<Key>(this);
        #endregion
        #region Ingestibles
        private RangeInt64? _IngestiblesLocation;
        private IGroupGetter<IIngestibleGetter>? _Ingestibles => _IngestiblesLocation.HasValue ? GroupBinaryOverlay<IIngestibleGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IngestiblesLocation!.Value.Min, _IngestiblesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIngestibleGetter> Ingestibles => _Ingestibles ?? new Group<Ingestible>(this);
        #endregion
        #region IdleMarkers
        private RangeInt64? _IdleMarkersLocation;
        private IGroupGetter<IIdleMarkerGetter>? _IdleMarkers => _IdleMarkersLocation.HasValue ? GroupBinaryOverlay<IIdleMarkerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IdleMarkersLocation!.Value.Min, _IdleMarkersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIdleMarkerGetter> IdleMarkers => _IdleMarkers ?? new Group<IdleMarker>(this);
        #endregion
        #region ConstructibleObjects
        private RangeInt64? _ConstructibleObjectsLocation;
        private IGroupGetter<IConstructibleObjectGetter>? _ConstructibleObjects => _ConstructibleObjectsLocation.HasValue ? GroupBinaryOverlay<IConstructibleObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ConstructibleObjectsLocation!.Value.Min, _ConstructibleObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IConstructibleObjectGetter> ConstructibleObjects => _ConstructibleObjects ?? new Group<ConstructibleObject>(this);
        #endregion
        #region Projectiles
        private RangeInt64? _ProjectilesLocation;
        private IGroupGetter<IProjectileGetter>? _Projectiles => _ProjectilesLocation.HasValue ? GroupBinaryOverlay<IProjectileGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ProjectilesLocation!.Value.Min, _ProjectilesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IProjectileGetter> Projectiles => _Projectiles ?? new Group<Projectile>(this);
        #endregion
        #region Hazards
        private RangeInt64? _HazardsLocation;
        private IGroupGetter<IHazardGetter>? _Hazards => _HazardsLocation.HasValue ? GroupBinaryOverlay<IHazardGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _HazardsLocation!.Value.Min, _HazardsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IHazardGetter> Hazards => _Hazards ?? new Group<Hazard>(this);
        #endregion
        #region SoulGems
        private RangeInt64? _SoulGemsLocation;
        private IGroupGetter<ISoulGemGetter>? _SoulGems => _SoulGemsLocation.HasValue ? GroupBinaryOverlay<ISoulGemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoulGemsLocation!.Value.Min, _SoulGemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new Group<SoulGem>(this);
        #endregion
        #region LeveledItems
        private RangeInt64? _LeveledItemsLocation;
        private IGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocation.HasValue ? GroupBinaryOverlay<ILeveledItemGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledItemsLocation!.Value.Min, _LeveledItemsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new Group<LeveledItem>(this);
        #endregion
        #region Weathers
        private RangeInt64? _WeathersLocation;
        private IGroupGetter<IWeatherGetter>? _Weathers => _WeathersLocation.HasValue ? GroupBinaryOverlay<IWeatherGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WeathersLocation!.Value.Min, _WeathersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new Group<Weather>(this);
        #endregion
        #region Climates
        private RangeInt64? _ClimatesLocation;
        private IGroupGetter<IClimateGetter>? _Climates => _ClimatesLocation.HasValue ? GroupBinaryOverlay<IClimateGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ClimatesLocation!.Value.Min, _ClimatesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IClimateGetter> Climates => _Climates ?? new Group<Climate>(this);
        #endregion
        #region ShaderParticleGeometries
        private RangeInt64? _ShaderParticleGeometriesLocation;
        private IGroupGetter<IShaderParticleGeometryGetter>? _ShaderParticleGeometries => _ShaderParticleGeometriesLocation.HasValue ? GroupBinaryOverlay<IShaderParticleGeometryGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ShaderParticleGeometriesLocation!.Value.Min, _ShaderParticleGeometriesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries => _ShaderParticleGeometries ?? new Group<ShaderParticleGeometry>(this);
        #endregion
        #region VisualEffects
        private RangeInt64? _VisualEffectsLocation;
        private IGroupGetter<IVisualEffectGetter>? _VisualEffects => _VisualEffectsLocation.HasValue ? GroupBinaryOverlay<IVisualEffectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _VisualEffectsLocation!.Value.Min, _VisualEffectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IVisualEffectGetter> VisualEffects => _VisualEffects ?? new Group<VisualEffect>(this);
        #endregion
        #region Regions
        private RangeInt64? _RegionsLocation;
        private IGroupGetter<IRegionGetter>? _Regions => _RegionsLocation.HasValue ? GroupBinaryOverlay<IRegionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RegionsLocation!.Value.Min, _RegionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRegionGetter> Regions => _Regions ?? new Group<Region>(this);
        #endregion
        #region NavigationMeshInfoMaps
        private RangeInt64? _NavigationMeshInfoMapsLocation;
        private IGroupGetter<INavigationMeshInfoMapGetter>? _NavigationMeshInfoMaps => _NavigationMeshInfoMapsLocation.HasValue ? GroupBinaryOverlay<INavigationMeshInfoMapGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _NavigationMeshInfoMapsLocation!.Value.Min, _NavigationMeshInfoMapsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps => _NavigationMeshInfoMaps ?? new Group<NavigationMeshInfoMap>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private IListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? ListGroupBinaryOverlay<ICellBlockGetter>.ListGroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package), _package) : default;
        public IListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new ListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private RangeInt64? _WorldspacesLocation;
        private IGroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocation.HasValue ? GroupBinaryOverlay<IWorldspaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WorldspacesLocation!.Value.Min, _WorldspacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new Group<Worldspace>(this);
        #endregion
        #region DialogTopics
        private RangeInt64? _DialogTopicsLocation;
        private IGroupGetter<IDialogTopicGetter>? _DialogTopics => _DialogTopicsLocation.HasValue ? GroupBinaryOverlay<IDialogTopicGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogTopicsLocation!.Value.Min, _DialogTopicsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogTopicGetter> DialogTopics => _DialogTopics ?? new Group<DialogTopic>(this);
        #endregion
        #region Quests
        private RangeInt64? _QuestsLocation;
        private IGroupGetter<IQuestGetter>? _Quests => _QuestsLocation.HasValue ? GroupBinaryOverlay<IQuestGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _QuestsLocation!.Value.Min, _QuestsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IQuestGetter> Quests => _Quests ?? new Group<Quest>(this);
        #endregion
        #region IdleAnimations
        private RangeInt64? _IdleAnimationsLocation;
        private IGroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocation.HasValue ? GroupBinaryOverlay<IIdleAnimationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _IdleAnimationsLocation!.Value.Min, _IdleAnimationsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new Group<IdleAnimation>(this);
        #endregion
        #region Packages
        private RangeInt64? _PackagesLocation;
        private IGroupGetter<IPackageGetter>? _Packages => _PackagesLocation.HasValue ? GroupBinaryOverlay<IPackageGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _PackagesLocation!.Value.Min, _PackagesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IPackageGetter> Packages => _Packages ?? new Group<Package>(this);
        #endregion
        #region CombatStyles
        private RangeInt64? _CombatStylesLocation;
        private IGroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocation.HasValue ? GroupBinaryOverlay<ICombatStyleGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CombatStylesLocation!.Value.Min, _CombatStylesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new Group<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private RangeInt64? _LoadScreensLocation;
        private IGroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocation.HasValue ? GroupBinaryOverlay<ILoadScreenGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LoadScreensLocation!.Value.Min, _LoadScreensLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new Group<LoadScreen>(this);
        #endregion
        #region LeveledSpells
        private RangeInt64? _LeveledSpellsLocation;
        private IGroupGetter<ILeveledSpellGetter>? _LeveledSpells => _LeveledSpellsLocation.HasValue ? GroupBinaryOverlay<ILeveledSpellGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LeveledSpellsLocation!.Value.Min, _LeveledSpellsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILeveledSpellGetter> LeveledSpells => _LeveledSpells ?? new Group<LeveledSpell>(this);
        #endregion
        #region AnimatedObjects
        private RangeInt64? _AnimatedObjectsLocation;
        private IGroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocation.HasValue ? GroupBinaryOverlay<IAnimatedObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AnimatedObjectsLocation!.Value.Min, _AnimatedObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new Group<AnimatedObject>(this);
        #endregion
        #region Waters
        private RangeInt64? _WatersLocation;
        private IGroupGetter<IWaterGetter>? _Waters => _WatersLocation.HasValue ? GroupBinaryOverlay<IWaterGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WatersLocation!.Value.Min, _WatersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWaterGetter> Waters => _Waters ?? new Group<Water>(this);
        #endregion
        #region EffectShaders
        private RangeInt64? _EffectShadersLocation;
        private IGroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocation.HasValue ? GroupBinaryOverlay<IEffectShaderGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EffectShadersLocation!.Value.Min, _EffectShadersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new Group<EffectShader>(this);
        #endregion
        #region Explosions
        private RangeInt64? _ExplosionsLocation;
        private IGroupGetter<IExplosionGetter>? _Explosions => _ExplosionsLocation.HasValue ? GroupBinaryOverlay<IExplosionGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ExplosionsLocation!.Value.Min, _ExplosionsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IExplosionGetter> Explosions => _Explosions ?? new Group<Explosion>(this);
        #endregion
        #region Debris
        private RangeInt64? _DebrisLocation;
        private IGroupGetter<IDebrisGetter>? _Debris => _DebrisLocation.HasValue ? GroupBinaryOverlay<IDebrisGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DebrisLocation!.Value.Min, _DebrisLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDebrisGetter> Debris => _Debris ?? new Group<Debris>(this);
        #endregion
        #region ImageSpaces
        private RangeInt64? _ImageSpacesLocation;
        private IGroupGetter<IImageSpaceGetter>? _ImageSpaces => _ImageSpacesLocation.HasValue ? GroupBinaryOverlay<IImageSpaceGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImageSpacesLocation!.Value.Min, _ImageSpacesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImageSpaceGetter> ImageSpaces => _ImageSpaces ?? new Group<ImageSpace>(this);
        #endregion
        #region ImageSpaceAdapters
        private RangeInt64? _ImageSpaceAdaptersLocation;
        private IGroupGetter<IImageSpaceAdapterGetter>? _ImageSpaceAdapters => _ImageSpaceAdaptersLocation.HasValue ? GroupBinaryOverlay<IImageSpaceAdapterGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImageSpaceAdaptersLocation!.Value.Min, _ImageSpaceAdaptersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters => _ImageSpaceAdapters ?? new Group<ImageSpaceAdapter>(this);
        #endregion
        #region FormLists
        private RangeInt64? _FormListsLocation;
        private IGroupGetter<IFormListGetter>? _FormLists => _FormListsLocation.HasValue ? GroupBinaryOverlay<IFormListGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FormListsLocation!.Value.Min, _FormListsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFormListGetter> FormLists => _FormLists ?? new Group<FormList>(this);
        #endregion
        #region Perks
        private RangeInt64? _PerksLocation;
        private IGroupGetter<IPerkGetter>? _Perks => _PerksLocation.HasValue ? GroupBinaryOverlay<IPerkGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _PerksLocation!.Value.Min, _PerksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IPerkGetter> Perks => _Perks ?? new Group<Perk>(this);
        #endregion
        #region BodyParts
        private RangeInt64? _BodyPartsLocation;
        private IGroupGetter<IBodyPartDataGetter>? _BodyParts => _BodyPartsLocation.HasValue ? GroupBinaryOverlay<IBodyPartDataGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _BodyPartsLocation!.Value.Min, _BodyPartsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IBodyPartDataGetter> BodyParts => _BodyParts ?? new Group<BodyPartData>(this);
        #endregion
        #region AddonNodes
        private RangeInt64? _AddonNodesLocation;
        private IGroupGetter<IAddonNodeGetter>? _AddonNodes => _AddonNodesLocation.HasValue ? GroupBinaryOverlay<IAddonNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AddonNodesLocation!.Value.Min, _AddonNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAddonNodeGetter> AddonNodes => _AddonNodes ?? new Group<AddonNode>(this);
        #endregion
        #region ActorValueInformation
        private RangeInt64? _ActorValueInformationLocation;
        private IGroupGetter<IActorValueInformationGetter>? _ActorValueInformation => _ActorValueInformationLocation.HasValue ? GroupBinaryOverlay<IActorValueInformationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ActorValueInformationLocation!.Value.Min, _ActorValueInformationLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IActorValueInformationGetter> ActorValueInformation => _ActorValueInformation ?? new Group<ActorValueInformation>(this);
        #endregion
        #region CameraShots
        private RangeInt64? _CameraShotsLocation;
        private IGroupGetter<ICameraShotGetter>? _CameraShots => _CameraShotsLocation.HasValue ? GroupBinaryOverlay<ICameraShotGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CameraShotsLocation!.Value.Min, _CameraShotsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICameraShotGetter> CameraShots => _CameraShots ?? new Group<CameraShot>(this);
        #endregion
        #region CameraPaths
        private RangeInt64? _CameraPathsLocation;
        private IGroupGetter<ICameraPathGetter>? _CameraPaths => _CameraPathsLocation.HasValue ? GroupBinaryOverlay<ICameraPathGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CameraPathsLocation!.Value.Min, _CameraPathsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICameraPathGetter> CameraPaths => _CameraPaths ?? new Group<CameraPath>(this);
        #endregion
        #region VoiceTypes
        private RangeInt64? _VoiceTypesLocation;
        private IGroupGetter<IVoiceTypeGetter>? _VoiceTypes => _VoiceTypesLocation.HasValue ? GroupBinaryOverlay<IVoiceTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _VoiceTypesLocation!.Value.Min, _VoiceTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IVoiceTypeGetter> VoiceTypes => _VoiceTypes ?? new Group<VoiceType>(this);
        #endregion
        #region MaterialTypes
        private RangeInt64? _MaterialTypesLocation;
        private IGroupGetter<IMaterialTypeGetter>? _MaterialTypes => _MaterialTypesLocation.HasValue ? GroupBinaryOverlay<IMaterialTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MaterialTypesLocation!.Value.Min, _MaterialTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMaterialTypeGetter> MaterialTypes => _MaterialTypes ?? new Group<MaterialType>(this);
        #endregion
        #region Impacts
        private RangeInt64? _ImpactsLocation;
        private IGroupGetter<IImpactGetter>? _Impacts => _ImpactsLocation.HasValue ? GroupBinaryOverlay<IImpactGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImpactsLocation!.Value.Min, _ImpactsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImpactGetter> Impacts => _Impacts ?? new Group<Impact>(this);
        #endregion
        #region ImpactDataSets
        private RangeInt64? _ImpactDataSetsLocation;
        private IGroupGetter<IImpactDataSetGetter>? _ImpactDataSets => _ImpactDataSetsLocation.HasValue ? GroupBinaryOverlay<IImpactDataSetGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ImpactDataSetsLocation!.Value.Min, _ImpactDataSetsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IImpactDataSetGetter> ImpactDataSets => _ImpactDataSets ?? new Group<ImpactDataSet>(this);
        #endregion
        #region ArmorAddons
        private RangeInt64? _ArmorAddonsLocation;
        private IGroupGetter<IArmorAddonGetter>? _ArmorAddons => _ArmorAddonsLocation.HasValue ? GroupBinaryOverlay<IArmorAddonGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArmorAddonsLocation!.Value.Min, _ArmorAddonsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArmorAddonGetter> ArmorAddons => _ArmorAddons ?? new Group<ArmorAddon>(this);
        #endregion
        #region EncounterZones
        private RangeInt64? _EncounterZonesLocation;
        private IGroupGetter<IEncounterZoneGetter>? _EncounterZones => _EncounterZonesLocation.HasValue ? GroupBinaryOverlay<IEncounterZoneGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EncounterZonesLocation!.Value.Min, _EncounterZonesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEncounterZoneGetter> EncounterZones => _EncounterZones ?? new Group<EncounterZone>(this);
        #endregion
        #region Locations
        private RangeInt64? _LocationsLocation;
        private IGroupGetter<ILocationGetter>? _Locations => _LocationsLocation.HasValue ? GroupBinaryOverlay<ILocationGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LocationsLocation!.Value.Min, _LocationsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILocationGetter> Locations => _Locations ?? new Group<Location>(this);
        #endregion
        #region Messages
        private RangeInt64? _MessagesLocation;
        private IGroupGetter<IMessageGetter>? _Messages => _MessagesLocation.HasValue ? GroupBinaryOverlay<IMessageGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MessagesLocation!.Value.Min, _MessagesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMessageGetter> Messages => _Messages ?? new Group<Message>(this);
        #endregion
        #region DefaultObjectManagers
        private RangeInt64? _DefaultObjectManagersLocation;
        private IGroupGetter<IDefaultObjectManagerGetter>? _DefaultObjectManagers => _DefaultObjectManagersLocation.HasValue ? GroupBinaryOverlay<IDefaultObjectManagerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DefaultObjectManagersLocation!.Value.Min, _DefaultObjectManagersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers => _DefaultObjectManagers ?? new Group<DefaultObjectManager>(this);
        #endregion
        #region LightingTemplates
        private RangeInt64? _LightingTemplatesLocation;
        private IGroupGetter<ILightingTemplateGetter>? _LightingTemplates => _LightingTemplatesLocation.HasValue ? GroupBinaryOverlay<ILightingTemplateGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _LightingTemplatesLocation!.Value.Min, _LightingTemplatesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ILightingTemplateGetter> LightingTemplates => _LightingTemplates ?? new Group<LightingTemplate>(this);
        #endregion
        #region MusicTypes
        private RangeInt64? _MusicTypesLocation;
        private IGroupGetter<IMusicTypeGetter>? _MusicTypes => _MusicTypesLocation.HasValue ? GroupBinaryOverlay<IMusicTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MusicTypesLocation!.Value.Min, _MusicTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMusicTypeGetter> MusicTypes => _MusicTypes ?? new Group<MusicType>(this);
        #endregion
        #region Footsteps
        private RangeInt64? _FootstepsLocation;
        private IGroupGetter<IFootstepGetter>? _Footsteps => _FootstepsLocation.HasValue ? GroupBinaryOverlay<IFootstepGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FootstepsLocation!.Value.Min, _FootstepsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFootstepGetter> Footsteps => _Footsteps ?? new Group<Footstep>(this);
        #endregion
        #region FootstepSets
        private RangeInt64? _FootstepSetsLocation;
        private IGroupGetter<IFootstepSetGetter>? _FootstepSets => _FootstepSetsLocation.HasValue ? GroupBinaryOverlay<IFootstepSetGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _FootstepSetsLocation!.Value.Min, _FootstepSetsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IFootstepSetGetter> FootstepSets => _FootstepSets ?? new Group<FootstepSet>(this);
        #endregion
        #region StoryManagerBranchNodes
        private RangeInt64? _StoryManagerBranchNodesLocation;
        private IGroupGetter<IStoryManagerBranchNodeGetter>? _StoryManagerBranchNodes => _StoryManagerBranchNodesLocation.HasValue ? GroupBinaryOverlay<IStoryManagerBranchNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StoryManagerBranchNodesLocation!.Value.Min, _StoryManagerBranchNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes => _StoryManagerBranchNodes ?? new Group<StoryManagerBranchNode>(this);
        #endregion
        #region StoryManagerQuestNodes
        private RangeInt64? _StoryManagerQuestNodesLocation;
        private IGroupGetter<IStoryManagerQuestNodeGetter>? _StoryManagerQuestNodes => _StoryManagerQuestNodesLocation.HasValue ? GroupBinaryOverlay<IStoryManagerQuestNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StoryManagerQuestNodesLocation!.Value.Min, _StoryManagerQuestNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes => _StoryManagerQuestNodes ?? new Group<StoryManagerQuestNode>(this);
        #endregion
        #region StoryManagerEventNodes
        private RangeInt64? _StoryManagerEventNodesLocation;
        private IGroupGetter<IStoryManagerEventNodeGetter>? _StoryManagerEventNodes => _StoryManagerEventNodesLocation.HasValue ? GroupBinaryOverlay<IStoryManagerEventNodeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _StoryManagerEventNodesLocation!.Value.Min, _StoryManagerEventNodesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes => _StoryManagerEventNodes ?? new Group<StoryManagerEventNode>(this);
        #endregion
        #region DialogBranches
        private RangeInt64? _DialogBranchesLocation;
        private IGroupGetter<IDialogBranchGetter>? _DialogBranches => _DialogBranchesLocation.HasValue ? GroupBinaryOverlay<IDialogBranchGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogBranchesLocation!.Value.Min, _DialogBranchesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogBranchGetter> DialogBranches => _DialogBranches ?? new Group<DialogBranch>(this);
        #endregion
        #region MusicTracks
        private RangeInt64? _MusicTracksLocation;
        private IGroupGetter<IMusicTrackGetter>? _MusicTracks => _MusicTracksLocation.HasValue ? GroupBinaryOverlay<IMusicTrackGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MusicTracksLocation!.Value.Min, _MusicTracksLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMusicTrackGetter> MusicTracks => _MusicTracks ?? new Group<MusicTrack>(this);
        #endregion
        #region DialogViews
        private RangeInt64? _DialogViewsLocation;
        private IGroupGetter<IDialogViewGetter>? _DialogViews => _DialogViewsLocation.HasValue ? GroupBinaryOverlay<IDialogViewGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DialogViewsLocation!.Value.Min, _DialogViewsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDialogViewGetter> DialogViews => _DialogViews ?? new Group<DialogView>(this);
        #endregion
        #region WordsOfPower
        private RangeInt64? _WordsOfPowerLocation;
        private IGroupGetter<IWordOfPowerGetter>? _WordsOfPower => _WordsOfPowerLocation.HasValue ? GroupBinaryOverlay<IWordOfPowerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _WordsOfPowerLocation!.Value.Min, _WordsOfPowerLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IWordOfPowerGetter> WordsOfPower => _WordsOfPower ?? new Group<WordOfPower>(this);
        #endregion
        #region Shouts
        private RangeInt64? _ShoutsLocation;
        private IGroupGetter<IShoutGetter>? _Shouts => _ShoutsLocation.HasValue ? GroupBinaryOverlay<IShoutGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ShoutsLocation!.Value.Min, _ShoutsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IShoutGetter> Shouts => _Shouts ?? new Group<Shout>(this);
        #endregion
        #region EquipTypes
        private RangeInt64? _EquipTypesLocation;
        private IGroupGetter<IEquipTypeGetter>? _EquipTypes => _EquipTypesLocation.HasValue ? GroupBinaryOverlay<IEquipTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _EquipTypesLocation!.Value.Min, _EquipTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IEquipTypeGetter> EquipTypes => _EquipTypes ?? new Group<EquipType>(this);
        #endregion
        #region Relationships
        private RangeInt64? _RelationshipsLocation;
        private IGroupGetter<IRelationshipGetter>? _Relationships => _RelationshipsLocation.HasValue ? GroupBinaryOverlay<IRelationshipGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _RelationshipsLocation!.Value.Min, _RelationshipsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IRelationshipGetter> Relationships => _Relationships ?? new Group<Relationship>(this);
        #endregion
        #region Scenes
        private RangeInt64? _ScenesLocation;
        private IGroupGetter<ISceneGetter>? _Scenes => _ScenesLocation.HasValue ? GroupBinaryOverlay<ISceneGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ScenesLocation!.Value.Min, _ScenesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISceneGetter> Scenes => _Scenes ?? new Group<Scene>(this);
        #endregion
        #region AssociationTypes
        private RangeInt64? _AssociationTypesLocation;
        private IGroupGetter<IAssociationTypeGetter>? _AssociationTypes => _AssociationTypesLocation.HasValue ? GroupBinaryOverlay<IAssociationTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _AssociationTypesLocation!.Value.Min, _AssociationTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IAssociationTypeGetter> AssociationTypes => _AssociationTypes ?? new Group<AssociationType>(this);
        #endregion
        #region Outfits
        private RangeInt64? _OutfitsLocation;
        private IGroupGetter<IOutfitGetter>? _Outfits => _OutfitsLocation.HasValue ? GroupBinaryOverlay<IOutfitGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _OutfitsLocation!.Value.Min, _OutfitsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IOutfitGetter> Outfits => _Outfits ?? new Group<Outfit>(this);
        #endregion
        #region ArtObjects
        private RangeInt64? _ArtObjectsLocation;
        private IGroupGetter<IArtObjectGetter>? _ArtObjects => _ArtObjectsLocation.HasValue ? GroupBinaryOverlay<IArtObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ArtObjectsLocation!.Value.Min, _ArtObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IArtObjectGetter> ArtObjects => _ArtObjects ?? new Group<ArtObject>(this);
        #endregion
        #region MaterialObjects
        private RangeInt64? _MaterialObjectsLocation;
        private IGroupGetter<IMaterialObjectGetter>? _MaterialObjects => _MaterialObjectsLocation.HasValue ? GroupBinaryOverlay<IMaterialObjectGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MaterialObjectsLocation!.Value.Min, _MaterialObjectsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMaterialObjectGetter> MaterialObjects => _MaterialObjects ?? new Group<MaterialObject>(this);
        #endregion
        #region MovementTypes
        private RangeInt64? _MovementTypesLocation;
        private IGroupGetter<IMovementTypeGetter>? _MovementTypes => _MovementTypesLocation.HasValue ? GroupBinaryOverlay<IMovementTypeGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _MovementTypesLocation!.Value.Min, _MovementTypesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IMovementTypeGetter> MovementTypes => _MovementTypes ?? new Group<MovementType>(this);
        #endregion
        #region SoundDescriptors
        private RangeInt64? _SoundDescriptorsLocation;
        private IGroupGetter<ISoundDescriptorGetter>? _SoundDescriptors => _SoundDescriptorsLocation.HasValue ? GroupBinaryOverlay<ISoundDescriptorGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundDescriptorsLocation!.Value.Min, _SoundDescriptorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundDescriptorGetter> SoundDescriptors => _SoundDescriptors ?? new Group<SoundDescriptor>(this);
        #endregion
        #region DualCastData
        private RangeInt64? _DualCastDataLocation;
        private IGroupGetter<IDualCastDataGetter>? _DualCastData => _DualCastDataLocation.HasValue ? GroupBinaryOverlay<IDualCastDataGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _DualCastDataLocation!.Value.Min, _DualCastDataLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IDualCastDataGetter> DualCastData => _DualCastData ?? new Group<DualCastData>(this);
        #endregion
        #region SoundCategories
        private RangeInt64? _SoundCategoriesLocation;
        private IGroupGetter<ISoundCategoryGetter>? _SoundCategories => _SoundCategoriesLocation.HasValue ? GroupBinaryOverlay<ISoundCategoryGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundCategoriesLocation!.Value.Min, _SoundCategoriesLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundCategoryGetter> SoundCategories => _SoundCategories ?? new Group<SoundCategory>(this);
        #endregion
        #region SoundOutputModels
        private RangeInt64? _SoundOutputModelsLocation;
        private IGroupGetter<ISoundOutputModelGetter>? _SoundOutputModels => _SoundOutputModelsLocation.HasValue ? GroupBinaryOverlay<ISoundOutputModelGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _SoundOutputModelsLocation!.Value.Min, _SoundOutputModelsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ISoundOutputModelGetter> SoundOutputModels => _SoundOutputModels ?? new Group<SoundOutputModel>(this);
        #endregion
        #region CollisionLayers
        private RangeInt64? _CollisionLayersLocation;
        private IGroupGetter<ICollisionLayerGetter>? _CollisionLayers => _CollisionLayersLocation.HasValue ? GroupBinaryOverlay<ICollisionLayerGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _CollisionLayersLocation!.Value.Min, _CollisionLayersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<ICollisionLayerGetter> CollisionLayers => _CollisionLayers ?? new Group<CollisionLayer>(this);
        #endregion
        #region Colors
        private RangeInt64? _ColorsLocation;
        private IGroupGetter<IColorRecordGetter>? _Colors => _ColorsLocation.HasValue ? GroupBinaryOverlay<IColorRecordGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ColorsLocation!.Value.Min, _ColorsLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IColorRecordGetter> Colors => _Colors ?? new Group<ColorRecord>(this);
        #endregion
        #region ReverbParameters
        private RangeInt64? _ReverbParametersLocation;
        private IGroupGetter<IReverbParametersGetter>? _ReverbParameters => _ReverbParametersLocation.HasValue ? GroupBinaryOverlay<IReverbParametersGetter>.GroupFactory(new OverlayStream(BinaryOverlay.LockExtractMemory(_data, _ReverbParametersLocation!.Value.Min, _ReverbParametersLocation!.Value.Max), _package), _package) : default;
        public IGroupGetter<IReverbParametersGetter> ReverbParameters => _ReverbParameters ?? new Group<ReverbParameters>(this);
        #endregion
        protected SkyrimModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            this.ModKey = modKey;
            this._data = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._package.MetaData.MasterReferences = new MasterReferenceReader(modKey);
            this._shouldDispose = shouldDispose;
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            ReadOnlyMemorySlice<byte> data,
            ModKey modKey,
            IStringsFolderLookup? stringsLookup = null)
        {
            var meta = new ParsingBundle(GameMode.Skyrim);
            meta.RecordInfoCache = new RecordInfoCache(() => new MutagenMemoryReadStream(data, meta));
            meta.StringsLookup = stringsLookup;
            return SkyrimModFactory(
                stream: new MutagenMemoryReadStream(
                    data: data,
                    metaData: meta),
                modKey: modKey,
                shouldDispose: false);
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            string path,
            ModKey modKey,
            StringsReadParameters? stringsParam = null)
        {
            var meta = new ParsingBundle(GameMode.Skyrim)
            {
                RecordInfoCache = new RecordInfoCache(() => new MutagenBinaryReadStream(path, GameMode.Skyrim))
            };
            var stream = new MutagenBinaryReadStream(
                path: path,
                metaData: meta);
            if (stream.Remaining < 12)
            {
                throw new ArgumentException("File stream was too short to parse flags");
            }
            var flags = stream.GetInt32(offset: 8);
            if (EnumExt.HasFlag(flags, Mutagen.Bethesda.Internals.Constants.LocalizedFlag))
            {
                meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(path, stringsParam, modKey);
            }
            return SkyrimModFactory(
                stream: stream,
                modKey: modKey,
                shouldDispose: true);
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            var ret = new SkyrimModBinaryOverlay(
                stream: stream,
                modKey: modKey,
                shouldDispose: shouldDispose);
            BinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter = null)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos);
                    _package.MetaData.MasterReferences!.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return (int)SkyrimMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    _ActionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    _HeadPartsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HAIR:
                {
                    _HairsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    _EyesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundMarkersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    _AcousticSpacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandscapeTexturesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    _ObjectEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRL:
                {
                    _ScrollsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Scrolls;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    _TalkingActivatorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    _IngredientsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.APPA:
                {
                    _AlchemicalApparatusesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.AlchemicalApparatuses;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Statics;
                }
                case RecordTypeInts.MSTT:
                {
                    _MoveableStaticsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    _TreesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraeLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    _LeveledNpcsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _IngestiblesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    _IdleMarkersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.COBJ:
                {
                    _ConstructibleObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.PROJ:
                {
                    _ProjectilesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    _HazardsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Hazards;
                }
                case RecordTypeInts.SLGM:
                {
                    _SoulGemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeathersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    _ShaderParticleGeometriesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    _VisualEffectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    _NavigationMeshInfoMapsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    _DialogTopicsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _PackagesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    _LeveledSpellsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    _ExplosionsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    _DebrisLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    _ImageSpacesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    _ImageSpaceAdaptersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    _FormListsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    _PerksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    _BodyPartsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    _AddonNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    _ActorValueInformationLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    _CameraShotsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    _CameraPathsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    _VoiceTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    _MaterialTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    _ImpactsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    _ImpactDataSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    _ArmorAddonsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    _EncounterZonesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    _LocationsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    _MessagesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    _DefaultObjectManagersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.LGTM:
                {
                    _LightingTemplatesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    _MusicTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    _FootstepsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    _FootstepSetsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    _StoryManagerBranchNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    _StoryManagerQuestNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    _StoryManagerEventNodesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.DLBR:
                {
                    _DialogBranchesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.DialogBranches;
                }
                case RecordTypeInts.MUST:
                {
                    _MusicTracksLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    _DialogViewsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.WOOP:
                {
                    _WordsOfPowerLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.WordsOfPower;
                }
                case RecordTypeInts.SHOU:
                {
                    _ShoutsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Shouts;
                }
                case RecordTypeInts.EQUP:
                {
                    _EquipTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    _RelationshipsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Relationships;
                }
                case RecordTypeInts.SCEN:
                {
                    _ScenesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Scenes;
                }
                case RecordTypeInts.ASTP:
                {
                    _AssociationTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    _OutfitsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    _ArtObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    _MaterialObjectsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    _MovementTypesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    _SoundDescriptorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.DUAL:
                {
                    _DualCastDataLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.DualCastData;
                }
                case RecordTypeInts.SNCT:
                {
                    _SoundCategoriesLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    _SoundOutputModelsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    _CollisionLayersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    _ColorsLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    _ReverbParametersLocation = new RangeInt64((stream.Position - offset), finalPos);
                    return (int)SkyrimMod_FieldIndex.ReverbParameters;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkyrimModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

