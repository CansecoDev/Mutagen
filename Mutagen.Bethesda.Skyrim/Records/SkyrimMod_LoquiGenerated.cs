/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Skyrim.Internals;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using DynamicData;
using CSharpExt.Rx;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;

namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SkyrimMod :
        LoquiNotifyingObject,
        ISkyrimMod,
        ILoquiObjectSetter<SkyrimMod>,
        ILinkContainer,
        IEquatable<SkyrimMod>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static SkyrimMod_Registration Registration => SkyrimMod_Registration.Instance;
        protected object CommonInstance => SkyrimModCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        protected SkyrimMod()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            _hasBeenSetTracker[(int)SkyrimMod_FieldIndex.ModHeader] = true;
            _GameSettings_Object = new Group<GameSetting>(this);
            _Globals_Object = new Group<Global>(this);
            Observable.Merge(
                _GameSettings_Object.Items.Connect().Transform<IMajorRecord, GameSetting, FormKey>((i) => i),
                _Globals_Object.Items.Connect().Transform<IMajorRecord, Global, FormKey>((i) => i))
                .PopulateInto(_majorRecords);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        private readonly ModHeader _ModHeader_Object = new ModHeader();
        public bool ModHeader_IsSet => true;
        bool ISkyrimModGetter.ModHeader_IsSet => ModHeader_IsSet;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModHeaderGetter ISkyrimModGetter.ModHeader => this.ModHeader;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<GameSetting> _GameSettings_Object;
        public Group<GameSetting> GameSettings => _GameSettings_Object;
        IGroupGetter<IGameSettingInternalGetter> ISkyrimModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Group<Global> _Globals_Object;
        public Group<Global> Globals => _Globals_Object;
        IGroupGetter<IGlobalInternalGetter> ISkyrimModGetter.Globals => _Globals_Object;
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkyrimModGetter)rhs, include);
        #region To String

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            SkyrimModMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is SkyrimMod rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkyrimMod rhs)
        {
            if (rhs == null) return false;
            if (ModHeader_IsSet != rhs.ModHeader_IsSet) return false;
            if (ModHeader_IsSet)
            {
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
            }
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (ModHeader_IsSet)
            {
                ret = HashHelper.GetHashCode(ModHeader).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(GameSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Globals).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected object XmlWriteTranslator => SkyrimModXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            SkyrimMod_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkyrimMod CreateFromXml(
            XElement node,
            out SkyrimMod_ErrorMask errorMask,
            bool doMasks = true,
            SkyrimMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new SkyrimMod() : null;
                    break;
                default:
                    break;
            }
            var ret = new SkyrimMod();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
                foreach (var link in ret.Links)
                {
                    if (link.Linked) continue;
                    link.Link(modList: null, sourceMod: ret);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static SkyrimMod CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            SkyrimMod_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            SkyrimMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            SkyrimMod_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkyrimMod CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            SkyrimMod_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        protected static void FillPrivateElementXml(
            SkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ModHeader":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                        item.ModHeader.CopyFieldsFrom(
                            rhs: ModHeader.CreateFromXml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask),
                            def: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((SkyrimMod_FieldIndex)index)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return _hasBeenSetTracker[index];
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Globals:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public GameMode GameMode => GameMode.Skyrim;
        IReadOnlyCache<T, FormKey> IModGetter.GetGroup<T>() => this.GetGroup<T>();
        ISourceCache<T, FormKey> IMod.GetGroup<T>() => this.GetGroup<T>();
        private ISourceCache<IMajorRecord, FormKey> _majorRecords = new SourceCache<IMajorRecord, FormKey>(m => m.FormKey);
        public IObservableCache<IMajorRecord, FormKey> MajorRecords => _majorRecords;
        public IMajorRecord this[FormKey id]
        {
            get => MajorRecords.Lookup(id).Value;
            set => SetMajorRecord(id, value);
        }
        protected void SetMajorRecord(
            FormKey id,
            IMajorRecord record)
        {
            switch (record)
            {
                case GameSetting gamesettings:
                    _GameSettings_Object.Items.Set(gamesettings);
                    break;
                case Global globals:
                    _Globals_Object.Items.Set(globals);
                    break;
                default:
                    throw new ArgumentException($"Unknown settable MajorRecord type: {record?.GetType()}");
            }
        }

        public void AddRecords(
            SkyrimMod rhsMod,
            GroupMask mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.Items.Set(rhsMod.GameSettings.Items.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.Items.Set(rhsMod.Globals.Items.Items);
            }
        }

        public Dictionary<FormKey, IMajorRecordCommon> CopyInDuplicate(
            SkyrimMod rhs,
            GroupMask mask = null)
        {
            var duppedRecords = new List<(IMajorRecordCommon Record, FormKey OriginalFormKey)>();
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.Items.Set(
                    rhs.GameSettings.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<GameSetting>());
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.Items.Set(
                    rhs.Globals.Items.Items
                        .Select(i => i.Duplicate(this.GetNextFormKey, duppedRecords))
                        .Cast<Global>());
            }
            Dictionary<FormKey, IMajorRecordCommon> router = new Dictionary<FormKey, IMajorRecordCommon>();
            router.Set(duppedRecords.Select(dup => new KeyValuePair<FormKey, IMajorRecordCommon>(dup.OriginalFormKey, dup.Record)));
            foreach (var rec in router.Values)
            {
                foreach (var link in rec.Links)
                {
                    if (link.FormKey.ModKey == rhs.ModKey
                        && router.TryGetValue(link.FormKey, out var duppedRecord))
                    {
                        link.FormKey = duppedRecord.FormKey;
                    }
                }
            }
            foreach (var rec in router.Values)
            {
                foreach (var link in rec.Links)
                {
                    link.Link(modList: null, sourceMod: this);
                }
            }
            return router;
        }

        public void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public int GetRecordCount()
        {
            int count = this.MajorRecords.Count;
            count += GameSettings.Items.Count > 0 ? 1 : 0;
            count += Globals.Items.Count > 0 ? 1 : 0;
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<int> setter);

        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in GameSettings.Links)
            {
                yield return item;
            }
            foreach (var item in Globals.Links)
            {
                yield return item;
            }
            yield break;
        }

        public static Task<SkyrimMod> CreateFromXmlFolder(
            DirectoryPath dir,
            ModKey modKey)
        {
            return CreateFromXmlFolder(
                dir: dir,
                modKey: modKey,
                errorMask: null);
        }

        public static async Task<(SkyrimMod Mod, SkyrimMod_ErrorMask ErrorMask)> CreateFromXmlFolderWithErrors(
            DirectoryPath dir,
            ModKey modKey)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = await CreateFromXmlFolder(
                dir: dir,
                modKey: modKey,
                errorMask: errorMaskBuilder);
            var errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
            return (ret, errorMask);
        }

        public static async Task<SkyrimMod> CreateFromXmlFolder(
            DirectoryPath dir,
            ModKey modKey,
            ErrorMaskBuilder errorMask)
        {
            var ret = new SkyrimMod(modKey);
            var tasks = new List<Task>();
            ret.ModHeader.CopyFieldsFrom(ModHeader.CreateFromXml(
                path: Path.Combine(dir.Path, "ModHeader.xml"),
                errorMask: errorMask,
                translationMask: null));
            tasks.Add(Task.Run(() => ret.GameSettings.CreateFromXmlFolder<GameSetting>(
                dir: dir,
                name: nameof(GameSettings),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.GameSettings)));
            tasks.Add(Task.Run(() => ret.Globals.CreateFromXmlFolder<Global>(
                dir: dir,
                name: nameof(Globals),
                errorMask: errorMask,
                index: (int)SkyrimMod_FieldIndex.Globals)));
            await Task.WhenAll(tasks);
            foreach (var link in ret.Links)
            {
                if (link.Linked) continue;
                link.Link(modList: null, sourceMod: ret);
            }
            return ret;
        }

        public async Task<SkyrimMod_ErrorMask> WriteToXmlFolder(
            DirectoryPath dir,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = null;
            dir.Create();
            using (new FolderCleaner(dir, FolderCleaner.CleanType.AccessTime))
            {
                var tasks = new List<Task>();
                tasks.Add(Task.Run(() => this.ModHeader.WriteToXml(
                    path: Path.Combine(dir.Path, "ModHeader.xml"),
                    errorMask: errorMaskBuilder,
                    translationMask: null)));
                tasks.Add(Task.Run(() => GameSettings.WriteToXmlFolder<GameSetting, GameSetting_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(GameSettings),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.GameSettings)));
                tasks.Add(Task.Run(() => Globals.WriteToXmlFolder<Global, Global_ErrorMask>(
                    dir: dir.Path,
                    name: nameof(Globals),
                    errorMask: errorMaskBuilder,
                    index: (int)SkyrimMod_FieldIndex.Globals)));
                await Task.WhenAll(tasks);
            }
            return null;
        }
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<SkyrimMod> CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            GroupMask importMask = null)
        {
            return await CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static async Task<(SkyrimMod Object, SkyrimMod_ErrorMask ErrorMask)> CreateFromBinary_Error(
            MutagenFrame frame,
            ModKey modKey,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = await CreateFromBinary(
                importMask: importMask,
                modKey: modKey,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            return (ret, SkyrimMod_ErrorMask.Factory(errorMaskBuilder));
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            MutagenFrame frame,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            var ret = new SkyrimMod(modKey);
            var masterReferences = new MasterReferences(ret.ModHeader.MasterReferences, modKey);
            await UtilityAsyncTranslation.ModParse(
                record: ret,
                frame: frame,
                importMask: importMask,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes).ConfigureAwait(false);
            foreach (var link in ret.Links)
            {
                if (link.Linked) continue;
                link.Link(modList: null, sourceMod: ret);
            }
            return ret;
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            string path,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<(SkyrimMod Object, SkyrimMod_ErrorMask ErrorMask)> CreateFromBinary_Error(
            string path,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary_Error(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            string path,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(path, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<(SkyrimMod Object, SkyrimMod_ErrorMask ErrorMask)> CreateFromBinary_Error(
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary_Error(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame);
            }
        }

        public static async Task<SkyrimMod> CreateFromBinary(
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            using (var reader = new MutagenBinaryReadStream(stream, GameMode.Skyrim))
            {
                var frame = new MutagenFrame(reader);
                return await CreateFromBinary(
                    importMask: importMask,
                    modKey: modKey,
                    frame: frame,
                    recordTypeConverter: null,
                    errorMask: errorMask);
            }
        }

        #endregion

        protected static void FillBinaryStructs(
            SkyrimMod item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
        }

        protected static async Task<TryGet<int?>> FillBinaryRecordTypes(
            SkyrimMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            GroupMask importMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x34534554: // TES4
                {
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                        var tmpModHeader = ModHeader.CreateFromBinary(
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: null,
                            masterReferences: masterReferences);
                        item.ModHeader.CopyFieldsFrom(
                            rhs: tmpModHeader,
                            def: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.ModHeader);
                }
                case 0x54534D47: // GMST
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                            var tmpGameSettings = await Group<GameSetting>.CreateFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.GameSettings.CopyFieldsFrom<GameSetting_CopyMask>(
                                rhs: tmpGameSettings,
                                def: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.GameSettings);
                }
                case 0x424F4C47: // GLOB
                {
                    if (importMask?.Globals ?? true)
                    {
                        try
                        {
                            errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                            var tmpGlobals = await Group<Global>.CreateFromBinary(
                                frame: frame,
                                errorMask: errorMask,
                                recordTypeConverter: null,
                                masterReferences: masterReferences);
                            item.Globals.CopyFieldsFrom<Global_CopyMask>(
                                rhs: tmpGlobals,
                                def: null,
                                copyMask: null,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return TryGet<int?>.Succeed((int)SkyrimMod_FieldIndex.Globals);
                }
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public SkyrimMod Copy(
            SkyrimMod_CopyMask copyMask = null,
            SkyrimMod def = null)
        {
            return SkyrimMod.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static SkyrimMod Copy(
            SkyrimMod item,
            SkyrimMod_CopyMask copyMask = null,
            SkyrimMod def = null)
        {
            SkyrimMod ret;
            if (item.GetType().Equals(typeof(SkyrimMod)))
            {
                ret = new SkyrimMod();
            }
            else
            {
                ret = (SkyrimMod)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static SkyrimMod Copy_ToLoqui(
            SkyrimMod item,
            SkyrimMod_CopyMask copyMask = null,
            SkyrimMod def = null)
        {
            SkyrimMod ret;
            if (item.GetType().Equals(typeof(SkyrimMod)))
            {
                ret = new SkyrimMod() as SkyrimMod;
            }
            else
            {
                ret = (SkyrimMod)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(SkyrimMod rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            SkyrimMod rhs,
            SkyrimMod_CopyMask copyMask,
            SkyrimMod def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            SkyrimMod rhs,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_CopyMask copyMask = null,
            SkyrimMod def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SkyrimModCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            SkyrimMod rhs,
            ErrorMaskBuilder errorMask,
            SkyrimMod_CopyMask copyMask = null,
            SkyrimMod def = null)
        {
            SkyrimModCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    this.ModHeader.CopyFieldsFrom(rhs: (ModHeader)obj);
                    break;
                case SkyrimMod_FieldIndex.GameSettings:
                    this._GameSettings_Object.CopyFieldsFrom<GameSetting_CopyMask>(rhs: (Group<GameSetting>)obj);
                    break;
                case SkyrimMod_FieldIndex.Globals:
                    this._Globals_Object.CopyFieldsFrom<Global_CopyMask>(rhs: (Group<Global>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            SkyrimModCommon.Instance.Clear(this);
        }

        public static SkyrimMod Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new SkyrimMod();
            foreach (var pair in fields)
            {
                CopyInInternal_SkyrimMod(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_SkyrimMod(SkyrimMod obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out SkyrimMod_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    obj.ModHeader.CopyFieldsFrom(rhs: (ModHeader)pair.Value);
                    break;
                case SkyrimMod_FieldIndex.GameSettings:
                    obj._GameSettings_Object.CopyFieldsFrom<GameSetting_CopyMask>(rhs: (Group<GameSetting>)pair.Value);
                    break;
                case SkyrimMod_FieldIndex.Globals:
                    obj._Globals_Object.CopyFieldsFrom<Global_CopyMask>(rhs: (Group<Global>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ISkyrimMod :
        ISkyrimModGetter,
        ILoquiObjectSetter<ISkyrimMod>
    {
        new ModHeader ModHeader { get; }
        new Group<GameSetting> GameSettings { get; }
        new Group<Global> Globals { get; }
        void CopyFieldsFrom(
            SkyrimMod rhs,
            ErrorMaskBuilder errorMask = null,
            SkyrimMod_CopyMask copyMask = null,
            SkyrimMod def = null);
    }

    public partial interface ISkyrimModGetter :
        ILoquiObject,
        ILoquiObject<ISkyrimModGetter>,
        IXmlItem
    {
        #region ModHeader
        IModHeaderGetter ModHeader { get; }
        bool ModHeader_IsSet { get; }

        #endregion
        #region GameSettings
        IGroupGetter<IGameSettingInternalGetter> GameSettings { get; }
        #endregion
        #region Globals
        IGroupGetter<IGlobalInternalGetter> Globals { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class SkyrimModMixIn
    {
        public static void Clear(this ISkyrimMod item)
        {
            ((SkyrimModCommon)item.CommonInstance).Clear(item: item);
        }

        public static SkyrimMod_Mask<bool> GetEqualsMask(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkyrimModCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkyrimModGetter item,
            string name = null,
            SkyrimMod_Mask<bool> printMask = null)
        {
            return ((SkyrimModCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkyrimModGetter item,
            FileGeneration fg,
            string name = null,
            SkyrimMod_Mask<bool> printMask = null)
        {
            ((SkyrimModCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkyrimModGetter item,
            SkyrimMod_Mask<bool?> checkMask)
        {
            return ((SkyrimModCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkyrimMod_Mask<bool> GetHasBeenSetMask(this ISkyrimModGetter item)
        {
            var ret = new SkyrimMod_Mask<bool>();
            ((SkyrimModCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        #region Mutagen
        public static ISourceCache<T, FormKey> GetGroup<T>(this ISkyrimModGetter obj)
            where T : IMajorRecordInternalGetter
        {
            return ((SkyrimModCommon)obj.CommonInstance).GetGroup<T>(obj: obj);
        }
        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim.Internals
{
    #region Field Index
    public enum SkyrimMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Globals = 2,
    }
    #endregion

    #region Registration
    public class SkyrimMod_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMod_Registration Instance = new SkyrimMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Skyrim.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "61f5127d-406d-41a1-897e-6d17188258ea";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(SkyrimMod_Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMod_ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMod);

        public static readonly Type GetterType = typeof(ISkyrimModGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimMod);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(SkyrimModCommon);

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMod";

        public const string Name = "SkyrimMod";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODHEADER":
                    return (ushort)SkyrimMod_FieldIndex.ModHeader;
                case "GAMESETTINGS":
                    return (ushort)SkyrimMod_FieldIndex.GameSettings;
                case "GLOBALS":
                    return (ushort)SkyrimMod_FieldIndex.Globals;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Globals:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Globals:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Globals:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return "ModHeader";
                case SkyrimMod_FieldIndex.GameSettings:
                    return "GameSettings";
                case SkyrimMod_FieldIndex.Globals:
                    return "Globals";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Globals:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return true;
                case SkyrimMod_FieldIndex.GameSettings:
                case SkyrimMod_FieldIndex.Globals:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return typeof(ModHeader);
                case SkyrimMod_FieldIndex.GameSettings:
                    return typeof(Group<GameSetting>);
                case SkyrimMod_FieldIndex.Globals:
                    return typeof(Group<Global>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkyrimModXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        TES4_HEADER,
                        GMST_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkyrimModCommon
    {
        public static readonly SkyrimModCommon Instance = new SkyrimModCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            SkyrimMod item,
            SkyrimMod rhs,
            SkyrimMod def,
            ErrorMaskBuilder errorMask,
            SkyrimMod_CopyMask copyMask)
        {
            if (copyMask?.ModHeader.Overall ?? true)
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                try
                {
                    ModHeaderCommon.CopyFieldsFrom(
                        item: item.ModHeader,
                        rhs: rhs.ModHeader,
                        def: def?.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.ModHeader.Specific);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GameSettings.Overall ?? true)
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                try
                {
                    GroupCommon.CopyFieldsFrom<GameSetting, GameSetting_CopyMask>(
                        item: item.GameSettings,
                        rhs: rhs.GameSettings,
                        def: def?.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GameSettings.Specific);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Globals.Overall ?? true)
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                try
                {
                    GroupCommon.CopyFieldsFrom<Global, Global_CopyMask>(
                        item: item.Globals,
                        rhs: rhs.Globals,
                        def: def?.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.Globals.Specific);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ISkyrimMod item)
        {
            ClearPartial();
        }

        public SkyrimMod_Mask<bool> GetEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMod_Mask<bool>();
            ((SkyrimModCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            SkyrimMod_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ModHeader = EqualsMaskHelper.EqualsHelper(
                item.ModHeader_IsSet,
                rhs.ModHeader_IsSet,
                item.ModHeader,
                rhs.ModHeader,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
        }

        public string ToString(
            ISkyrimModGetter item,
            string name = null,
            SkyrimMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ISkyrimModGetter item,
            FileGeneration fg,
            string name = null,
            SkyrimMod_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkyrimMod =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkyrimMod) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ISkyrimModGetter item,
            FileGeneration fg,
            SkyrimMod_Mask<bool> printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.ToString(fg, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.ToString(fg, "GameSettings");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.ToString(fg, "Globals");
            }
        }

        public bool HasBeenSet(
            ISkyrimModGetter item,
            SkyrimMod_Mask<bool?> checkMask)
        {
            if (checkMask.ModHeader.Overall.HasValue && checkMask.ModHeader.Overall.Value != item.ModHeader_IsSet) return false;
            if (checkMask.ModHeader.Specific != null && (item.ModHeader == null || !item.ModHeader.HasBeenSet(checkMask.ModHeader.Specific))) return false;
            return true;
        }

        public void FillHasBeenSetMask(
            ISkyrimModGetter item,
            SkyrimMod_Mask<bool> mask)
        {
            mask.ModHeader = new MaskItem<bool, ModHeader_Mask<bool>>(item.ModHeader_IsSet, item.ModHeader.GetHasBeenSetMask());
            mask.GameSettings = new MaskItem<bool, Group_Mask<bool>>(true, item.GameSettings.GetHasBeenSetMask());
            mask.Globals = new MaskItem<bool, Group_Mask<bool>>(true, item.Globals.GetHasBeenSetMask());
        }

        #region Mutagen
        public ISourceCache<T, FormKey> GetGroup<T>(ISkyrimModGetter obj)
            where T : IMajorRecordInternalGetter
        {
            switch (typeof(T).Name)
            {
                case "GameSetting":
                    return (ISourceCache<T, FormKey>)obj.GameSettings.Items;
                case "Global":
                    return (ISourceCache<T, FormKey>)obj.Globals.Items;
                default:
                    throw new ArgumentException($"Unknown group type: {typeof(T)}");
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class SkyrimModXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SkyrimModXmlWriteTranslation Instance = new SkyrimModXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.ModHeader_IsSet
                && (translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                ((ModHeaderXmlWriteTranslation)((IXmlItem)item.ModHeader).XmlWriteTranslator).Write(
                    item: item.ModHeader,
                    node: node,
                    name: nameof(item.ModHeader),
                    fieldIndex: (int)SkyrimMod_FieldIndex.ModHeader,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                ((GroupXmlWriteTranslation)((IXmlItem)item.GameSettings).XmlWriteTranslator).Write<IGameSettingInternalGetter>(
                    item: item.GameSettings,
                    node: node,
                    name: nameof(item.GameSettings),
                    fieldIndex: (int)SkyrimMod_FieldIndex.GameSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                ((GroupXmlWriteTranslation)((IXmlItem)item.Globals).XmlWriteTranslator).Write<IGlobalInternalGetter>(
                    item: item.Globals,
                    node: node,
                    name: nameof(item.Globals),
                    fieldIndex: (int)SkyrimMod_FieldIndex.Globals,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
            }
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Skyrim.SkyrimMod");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Skyrim.SkyrimMod");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISkyrimModGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ISkyrimModGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SkyrimModXmlCreateTranslation
    {
        public readonly static SkyrimModXmlCreateTranslation Instance = new SkyrimModXmlCreateTranslation();

        public static void FillPublicXml(
            ISkyrimMod item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkyrimModXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkyrimMod item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "GameSettings":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                        item.GameSettings.CopyFieldsFrom<GameSetting_CopyMask>(
                            rhs: Group<GameSetting>.CreateFromXml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask),
                            def: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Globals":
                    try
                    {
                        errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                        item.Globals.CopyFieldsFrom<Global_CopyMask>(
                            rhs: Group<Global>.CreateFromXml(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask),
                            def: null,
                            copyMask: null,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class SkyrimModXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            out SkyrimMod_ErrorMask errorMask,
            bool doMasks = true,
            SkyrimMod_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            out SkyrimMod_ErrorMask errorMask,
            SkyrimMod_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            XElement node,
            string name = null,
            SkyrimMod_TranslationMask translationMask = null)
        {
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkyrimModGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((SkyrimModXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class SkyrimMod_Mask<T> : IMask<T>, IEquatable<SkyrimMod_Mask<T>>
    {
        #region Ctors
        public SkyrimMod_Mask()
        {
        }

        public SkyrimMod_Mask(T initialValue)
        {
            this.ModHeader = new MaskItem<T, ModHeader_Mask<T>>(initialValue, new ModHeader_Mask<T>(initialValue));
            this.GameSettings = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
            this.Globals = new MaskItem<T, Group_Mask<T>>(initialValue, new Group_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, ModHeader_Mask<T>> ModHeader { get; set; }
        public MaskItem<T, Group_Mask<T>> GameSettings { get; set; }
        public MaskItem<T, Group_Mask<T>> Globals { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is SkyrimMod_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(SkyrimMod_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
            if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
            if (!object.Equals(this.Globals, rhs.Globals)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ModHeader?.GetHashCode());
            ret = ret.CombineHashCode(this.GameSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.Globals?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (ModHeader != null)
            {
                if (!eval(this.ModHeader.Overall)) return false;
                if (this.ModHeader.Specific != null && !this.ModHeader.Specific.AllEqual(eval)) return false;
            }
            if (GameSettings != null)
            {
                if (!eval(this.GameSettings.Overall)) return false;
                if (this.GameSettings.Specific != null && !this.GameSettings.Specific.AllEqual(eval)) return false;
            }
            if (Globals != null)
            {
                if (!eval(this.Globals.Overall)) return false;
                if (this.Globals.Specific != null && !this.Globals.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public SkyrimMod_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new SkyrimMod_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(SkyrimMod_Mask<R> obj, Func<T, R> eval)
        {
            if (this.ModHeader != null)
            {
                obj.ModHeader = new MaskItem<R, ModHeader_Mask<R>>();
                obj.ModHeader.Overall = eval(this.ModHeader.Overall);
                if (this.ModHeader.Specific != null)
                {
                    obj.ModHeader.Specific = this.ModHeader.Specific.Translate(eval);
                }
            }
            if (this.GameSettings != null)
            {
                obj.GameSettings = new MaskItem<R, Group_Mask<R>>();
                obj.GameSettings.Overall = eval(this.GameSettings.Overall);
                if (this.GameSettings.Specific != null)
                {
                    obj.GameSettings.Specific = this.GameSettings.Specific.Translate(eval);
                }
            }
            if (this.Globals != null)
            {
                obj.Globals = new MaskItem<R, Group_Mask<R>>();
                obj.Globals.Overall = eval(this.Globals.Overall);
                if (this.Globals.Specific != null)
                {
                    obj.Globals.Specific = this.Globals.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(SkyrimMod_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, SkyrimMod_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(SkyrimMod_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ModHeader?.Overall ?? true)
                {
                    ModHeader?.ToString(fg);
                }
                if (printMask?.GameSettings?.Overall ?? true)
                {
                    GameSettings?.ToString(fg);
                }
                if (printMask?.Globals?.Overall ?? true)
                {
                    Globals?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class SkyrimMod_ErrorMask : IErrorMask, IErrorMask<SkyrimMod_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, ModHeader_ErrorMask> ModHeader;
        public MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>> GameSettings;
        public MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>> Globals;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    return ModHeader;
                case SkyrimMod_FieldIndex.GameSettings:
                    return GameSettings;
                case SkyrimMod_FieldIndex.Globals:
                    return Globals;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    this.ModHeader = new MaskItem<Exception, ModHeader_ErrorMask>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.GameSettings:
                    this.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(ex, null);
                    break;
                case SkyrimMod_FieldIndex.Globals:
                    this.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
            switch (enu)
            {
                case SkyrimMod_FieldIndex.ModHeader:
                    this.ModHeader = (MaskItem<Exception, ModHeader_ErrorMask>)obj;
                    break;
                case SkyrimMod_FieldIndex.GameSettings:
                    this.GameSettings = (MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>)obj;
                    break;
                case SkyrimMod_FieldIndex.Globals:
                    this.Globals = (MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ModHeader != null) return true;
            if (GameSettings != null) return true;
            if (Globals != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("SkyrimMod_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            ModHeader?.ToString(fg);
            GameSettings?.ToString(fg);
            Globals?.ToString(fg);
        }
        #endregion

        #region Combine
        public SkyrimMod_ErrorMask Combine(SkyrimMod_ErrorMask rhs)
        {
            var ret = new SkyrimMod_ErrorMask();
            ret.ModHeader = new MaskItem<Exception, ModHeader_ErrorMask>(this.ModHeader.Overall.Combine(rhs.ModHeader.Overall), ((IErrorMask<ModHeader_ErrorMask>)this.ModHeader.Specific).Combine(rhs.ModHeader.Specific));
            ret.GameSettings = new MaskItem<Exception, Group_ErrorMask<GameSetting_ErrorMask>>(this.GameSettings.Overall.Combine(rhs.GameSettings.Overall), ((IErrorMask<Group_ErrorMask<GameSetting_ErrorMask>>)this.GameSettings.Specific).Combine(rhs.GameSettings.Specific));
            ret.Globals = new MaskItem<Exception, Group_ErrorMask<Global_ErrorMask>>(this.Globals.Overall.Combine(rhs.Globals.Overall), ((IErrorMask<Group_ErrorMask<Global_ErrorMask>>)this.Globals.Specific).Combine(rhs.Globals.Specific));
            return ret;
        }
        public static SkyrimMod_ErrorMask Combine(SkyrimMod_ErrorMask lhs, SkyrimMod_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static SkyrimMod_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new SkyrimMod_ErrorMask();
        }
        #endregion

    }
    public class SkyrimMod_CopyMask
    {
        public SkyrimMod_CopyMask()
        {
        }

        public SkyrimMod_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ModHeader = new MaskItem<bool, ModHeader_CopyMask>(defaultOn, default);
            this.GameSettings = new MaskItem<bool, Group_CopyMask<GameSetting_CopyMask>>(defaultOn, default);
            this.Globals = new MaskItem<bool, Group_CopyMask<Global_CopyMask>>(defaultOn, default);
        }

        #region Members
        public MaskItem<bool, ModHeader_CopyMask> ModHeader;
        public MaskItem<bool, Group_CopyMask<GameSetting_CopyMask>> GameSettings;
        public MaskItem<bool, Group_CopyMask<Global_CopyMask>> Globals;
        #endregion

    }

    public class SkyrimMod_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, ModHeader_TranslationMask> ModHeader;
        public MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>> GameSettings;
        public MaskItem<bool, Group_TranslationMask<Global_TranslationMask>> Globals;
        #endregion

        #region Ctors
        public SkyrimMod_TranslationMask()
        {
        }

        public SkyrimMod_TranslationMask(bool defaultOn)
        {
            this.ModHeader = new MaskItem<bool, ModHeader_TranslationMask>(defaultOn, null);
            this.GameSettings = new MaskItem<bool, Group_TranslationMask<GameSetting_TranslationMask>>(defaultOn, null);
            this.Globals = new MaskItem<bool, Group_TranslationMask<Global_TranslationMask>>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ModHeader?.Overall ?? true, ModHeader?.Specific?.GetCrystal()));
            ret.Add((GameSettings?.Overall ?? true, GameSettings?.Specific?.GetCrystal()));
            ret.Add((Globals?.Overall ?? true, Globals?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #region Mutagen
    public class GroupMask
    {
        public bool GameSettings;
        public bool Globals;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Globals = defaultValue;
        }
    }
    #endregion

    #region Binary Translation
    public partial class SkyrimModBinaryWriteTranslation
    {
        public readonly static SkyrimModBinaryWriteTranslation Instance = new SkyrimModBinaryWriteTranslation();

        public static void Write_RecordTypes(
            ISkyrimModGetter item,
            MutagenWriter writer,
            GroupMask importMask,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MasterReferences masterReferences = new MasterReferences(item.ModHeader.MasterReferences, modKey);
            if (item.ModHeader_IsSet)
            {
                ((ModHeaderBinaryWriteTranslation)((IBinaryItem)item.ModHeader).BinaryWriteTranslator).Write(
                    item: item.ModHeader,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            if (importMask?.GameSettings ?? true)
            {
                if (item.GameSettings.Items.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)item.GameSettings).BinaryWriteTranslator).Write<IGameSettingInternalGetter>(
                        item: item.GameSettings,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
            if (importMask?.Globals ?? true)
            {
                if (item.Globals.Items.Count > 0)
                {
                    ((GroupBinaryWriteTranslation)((IBinaryItem)item.Globals).BinaryWriteTranslator).Write<IGlobalInternalGetter>(
                        item: item.Globals,
                        writer: writer,
                        errorMask: errorMask,
                        masterReferences: masterReferences,
                        recordTypeConverter: null);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISkyrimModGetter item,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            Write_RecordTypes(
                item: item,
                writer: writer,
                importMask: importMask,
                modKey: modKey,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }

    }

    public partial class SkyrimModBinaryCreateTranslation
    {
        public readonly static SkyrimModBinaryCreateTranslation Instance = new SkyrimModBinaryCreateTranslation();

    }

    #region Binary Write Mixins
    public static class SkyrimModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            out SkyrimMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = SkyrimMod_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            string path,
            ModKey modKey,
            out SkyrimMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    WriteToBinary(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            string path,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    WriteToBinary(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        errorMask: errorMask);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            ModKey modKey,
            out SkyrimMod_ErrorMask errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream, item.GameMode))
            {
                WriteToBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            bool doMasks = true,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream, item.GameMode))
            {
                WriteToBinary(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    errorMask: errorMask);
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            ErrorMaskBuilder errorMask,
            GroupMask importMask = null)
        {
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMask);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            ModKey modKey,
            GroupMask importMask = null)
        {
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                importMask: importMask,
                modKey: modKey,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            string path,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false, meta: MetaDataConstants.Get(item.GameMode)))
                {
                    SkyrimModBinaryWriteTranslation.Instance.Write(
                        item: item,
                        importMask: importMask,
                        modKey: modKey,
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            ModKey modKey,
            GroupMask importMask = null)
        {
            using (var writer = new MutagenWriter(stream, item.GameMode))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    modKey: modKey,
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

    }
    #endregion

    #endregion

    #endregion

}
