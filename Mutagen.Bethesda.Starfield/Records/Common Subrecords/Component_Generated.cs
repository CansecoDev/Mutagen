/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Component :
        IComponent,
        IEquatable<IComponentGetter>,
        ILoquiObjectSetter<Component>
    {
        #region Ctor
        public Component()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ComponentType
        public String? ComponentType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IComponentGetter.ComponentType => this.ComponentType;
        #endregion
        #region FLCS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLCS;
        public MemorySlice<Byte>? FLCS
        {
            get => this._FLCS;
            set => this._FLCS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IComponentGetter.FLCS => this.FLCS;
        #endregion
        #region INTV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _INTV;
        public MemorySlice<Byte>? INTV
        {
            get => this._INTV;
            set => this._INTV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IComponentGetter.INTV => this.INTV;
        #endregion
        #region FLTR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FLTR;
        public MemorySlice<Byte>? FLTR
        {
            get => this._FLTR;
            set => this._FLTR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IComponentGetter.FLTR => this.FLTR;
        #endregion
        #region BFCE
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BFCE;
        public MemorySlice<Byte>? BFCE
        {
            get => this._BFCE;
            set => this._BFCE = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IComponentGetter.BFCE => this.BFCE;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IComponentGetter rhs) return false;
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IComponentGetter? obj)
        {
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ComponentType = initialValue;
                this.FLCS = initialValue;
                this.INTV = initialValue;
                this.FLTR = initialValue;
                this.BFCE = initialValue;
            }

            public Mask(
                TItem ComponentType,
                TItem FLCS,
                TItem INTV,
                TItem FLTR,
                TItem BFCE)
            {
                this.ComponentType = ComponentType;
                this.FLCS = FLCS;
                this.INTV = INTV;
                this.FLTR = FLTR;
                this.BFCE = BFCE;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ComponentType;
            public TItem FLCS;
            public TItem INTV;
            public TItem FLTR;
            public TItem BFCE;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ComponentType, rhs.ComponentType)) return false;
                if (!object.Equals(this.FLCS, rhs.FLCS)) return false;
                if (!object.Equals(this.INTV, rhs.INTV)) return false;
                if (!object.Equals(this.FLTR, rhs.FLTR)) return false;
                if (!object.Equals(this.BFCE, rhs.BFCE)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ComponentType);
                hash.Add(this.FLCS);
                hash.Add(this.INTV);
                hash.Add(this.FLTR);
                hash.Add(this.BFCE);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ComponentType)) return false;
                if (!eval(this.FLCS)) return false;
                if (!eval(this.INTV)) return false;
                if (!eval(this.FLTR)) return false;
                if (!eval(this.BFCE)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ComponentType)) return true;
                if (eval(this.FLCS)) return true;
                if (eval(this.INTV)) return true;
                if (eval(this.FLTR)) return true;
                if (eval(this.BFCE)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Component.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ComponentType = eval(this.ComponentType);
                obj.FLCS = eval(this.FLCS);
                obj.INTV = eval(this.INTV);
                obj.FLTR = eval(this.FLTR);
                obj.BFCE = eval(this.BFCE);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Component.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Component.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Component.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ComponentType ?? true)
                    {
                        sb.AppendItem(ComponentType, "ComponentType");
                    }
                    if (printMask?.FLCS ?? true)
                    {
                        sb.AppendItem(FLCS, "FLCS");
                    }
                    if (printMask?.INTV ?? true)
                    {
                        sb.AppendItem(INTV, "INTV");
                    }
                    if (printMask?.FLTR ?? true)
                    {
                        sb.AppendItem(FLTR, "FLTR");
                    }
                    if (printMask?.BFCE ?? true)
                    {
                        sb.AppendItem(BFCE, "BFCE");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ComponentType;
            public Exception? FLCS;
            public Exception? INTV;
            public Exception? FLTR;
            public Exception? BFCE;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Component_FieldIndex enu = (Component_FieldIndex)index;
                switch (enu)
                {
                    case Component_FieldIndex.ComponentType:
                        return ComponentType;
                    case Component_FieldIndex.FLCS:
                        return FLCS;
                    case Component_FieldIndex.INTV:
                        return INTV;
                    case Component_FieldIndex.FLTR:
                        return FLTR;
                    case Component_FieldIndex.BFCE:
                        return BFCE;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Component_FieldIndex enu = (Component_FieldIndex)index;
                switch (enu)
                {
                    case Component_FieldIndex.ComponentType:
                        this.ComponentType = ex;
                        break;
                    case Component_FieldIndex.FLCS:
                        this.FLCS = ex;
                        break;
                    case Component_FieldIndex.INTV:
                        this.INTV = ex;
                        break;
                    case Component_FieldIndex.FLTR:
                        this.FLTR = ex;
                        break;
                    case Component_FieldIndex.BFCE:
                        this.BFCE = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Component_FieldIndex enu = (Component_FieldIndex)index;
                switch (enu)
                {
                    case Component_FieldIndex.ComponentType:
                        this.ComponentType = (Exception?)obj;
                        break;
                    case Component_FieldIndex.FLCS:
                        this.FLCS = (Exception?)obj;
                        break;
                    case Component_FieldIndex.INTV:
                        this.INTV = (Exception?)obj;
                        break;
                    case Component_FieldIndex.FLTR:
                        this.FLTR = (Exception?)obj;
                        break;
                    case Component_FieldIndex.BFCE:
                        this.BFCE = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ComponentType != null) return true;
                if (FLCS != null) return true;
                if (INTV != null) return true;
                if (FLTR != null) return true;
                if (BFCE != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ComponentType, "ComponentType");
                }
                {
                    sb.AppendItem(FLCS, "FLCS");
                }
                {
                    sb.AppendItem(INTV, "INTV");
                }
                {
                    sb.AppendItem(FLTR, "FLTR");
                }
                {
                    sb.AppendItem(BFCE, "BFCE");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ComponentType = this.ComponentType.Combine(rhs.ComponentType);
                ret.FLCS = this.FLCS.Combine(rhs.FLCS);
                ret.INTV = this.INTV.Combine(rhs.INTV);
                ret.FLTR = this.FLTR.Combine(rhs.FLTR);
                ret.BFCE = this.BFCE.Combine(rhs.BFCE);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ComponentType;
            public bool FLCS;
            public bool INTV;
            public bool FLTR;
            public bool BFCE;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ComponentType = defaultOn;
                this.FLCS = defaultOn;
                this.INTV = defaultOn;
                this.FLTR = defaultOn;
                this.BFCE = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ComponentType, null));
                ret.Add((FLCS, null));
                ret.Add((INTV, null));
                ret.Add((FLTR, null));
                ret.Add((BFCE, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ComponentBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Component CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Component();
            ((ComponentSetterCommon)((IComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Component item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ComponentSetterCommon)((IComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Component GetNew()
        {
            return new Component();
        }

    }
    #endregion

    #region Interface
    public partial interface IComponent :
        IComponentGetter,
        ILoquiObjectSetter<IComponent>
    {
        new String? ComponentType { get; set; }
        new MemorySlice<Byte>? FLCS { get; set; }
        new MemorySlice<Byte>? INTV { get; set; }
        new MemorySlice<Byte>? FLTR { get; set; }
        new MemorySlice<Byte>? BFCE { get; set; }
    }

    public partial interface IComponentGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IComponentGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Component_Registration.Instance;
        String? ComponentType { get; }
        ReadOnlyMemorySlice<Byte>? FLCS { get; }
        ReadOnlyMemorySlice<Byte>? INTV { get; }
        ReadOnlyMemorySlice<Byte>? FLTR { get; }
        ReadOnlyMemorySlice<Byte>? BFCE { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ComponentMixIn
    {
        public static void Clear(this IComponent item)
        {
            ((ComponentSetterCommon)((IComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Component.Mask<bool> GetEqualsMask(
            this IComponentGetter item,
            IComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IComponentGetter item,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IComponentGetter item,
            IComponentGetter rhs,
            Component.TranslationMask? equalsMask = null)
        {
            return ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IComponent lhs,
            IComponentGetter rhs)
        {
            ((ComponentSetterTranslationCommon)((IComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IComponent lhs,
            IComponentGetter rhs,
            Component.TranslationMask? copyMask = null)
        {
            ((ComponentSetterTranslationCommon)((IComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IComponent lhs,
            IComponentGetter rhs,
            out Component.ErrorMask errorMask,
            Component.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ComponentSetterTranslationCommon)((IComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Component.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IComponent lhs,
            IComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ComponentSetterTranslationCommon)((IComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Component DeepCopy(
            this IComponentGetter item,
            Component.TranslationMask? copyMask = null)
        {
            return ((ComponentSetterTranslationCommon)((IComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Component DeepCopy(
            this IComponentGetter item,
            out Component.ErrorMask errorMask,
            Component.TranslationMask? copyMask = null)
        {
            return ((ComponentSetterTranslationCommon)((IComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Component DeepCopy(
            this IComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ComponentSetterTranslationCommon)((IComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ComponentSetterCommon)((IComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Component_FieldIndex
    {
        ComponentType = 0,
        FLCS = 1,
        INTV = 2,
        FLTR = 3,
        BFCE = 4,
    }
    #endregion

    #region Registration
    internal partial class Component_Registration : ILoquiRegistration
    {
        public static readonly Component_Registration Instance = new Component_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Starfield.ProtocolKey,
            msgID: 82,
            version: 0);

        public const string GUID = "1bb731ad-a02f-45b0-aa19-05819773d468";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Component.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Component.ErrorMask);

        public static readonly Type ClassType = typeof(Component);

        public static readonly Type GetterType = typeof(IComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Component";

        public const string Name = "Component";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.FLCS,
                RecordTypes.INTV,
                RecordTypes.FLTR,
                RecordTypes.BFCE);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ComponentSetterCommon
    {
        public static readonly ComponentSetterCommon Instance = new ComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IComponent item)
        {
            ClearPartial();
            item.ComponentType = default;
            item.FLCS = default;
            item.INTV = default;
            item.FLTR = default;
            item.BFCE = default;
        }
        
        #region Mutagen
        public void RemapLinks(IComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ComponentCommon
    {
        public static readonly ComponentCommon Instance = new ComponentCommon();

        public Component.Mask<bool> GetEqualsMask(
            IComponentGetter item,
            IComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Component.Mask<bool>(false);
            ((ComponentCommon)((IComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IComponentGetter item,
            IComponentGetter rhs,
            Component.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ComponentType = string.Equals(item.ComponentType, rhs.ComponentType);
            ret.FLCS = MemorySliceExt.SequenceEqual(item.FLCS, rhs.FLCS);
            ret.INTV = MemorySliceExt.SequenceEqual(item.INTV, rhs.INTV);
            ret.FLTR = MemorySliceExt.SequenceEqual(item.FLTR, rhs.FLTR);
            ret.BFCE = MemorySliceExt.SequenceEqual(item.BFCE, rhs.BFCE);
        }
        
        public string Print(
            IComponentGetter item,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Component.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Component =>");
            }
            else
            {
                sb.AppendLine($"{name} (Component) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IComponentGetter item,
            StructuredStringBuilder sb,
            Component.Mask<bool>? printMask = null)
        {
            if ((printMask?.ComponentType ?? true)
                && item.ComponentType is {} ComponentTypeItem)
            {
                sb.AppendItem(ComponentTypeItem, "ComponentType");
            }
            if ((printMask?.FLCS ?? true)
                && item.FLCS is {} FLCSItem)
            {
                sb.AppendLine($"FLCS => {SpanExt.ToHexString(FLCSItem)}");
            }
            if ((printMask?.INTV ?? true)
                && item.INTV is {} INTVItem)
            {
                sb.AppendLine($"INTV => {SpanExt.ToHexString(INTVItem)}");
            }
            if ((printMask?.FLTR ?? true)
                && item.FLTR is {} FLTRItem)
            {
                sb.AppendLine($"FLTR => {SpanExt.ToHexString(FLTRItem)}");
            }
            if ((printMask?.BFCE ?? true)
                && item.BFCE is {} BFCEItem)
            {
                sb.AppendLine($"BFCE => {SpanExt.ToHexString(BFCEItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IComponentGetter? lhs,
            IComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Component_FieldIndex.ComponentType) ?? true))
            {
                if (!string.Equals(lhs.ComponentType, rhs.ComponentType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Component_FieldIndex.FLCS) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLCS, rhs.FLCS)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Component_FieldIndex.INTV) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.INTV, rhs.INTV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Component_FieldIndex.FLTR) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FLTR, rhs.FLTR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Component_FieldIndex.BFCE) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BFCE, rhs.BFCE)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IComponentGetter item)
        {
            var hash = new HashCode();
            if (item.ComponentType is {} ComponentTypeitem)
            {
                hash.Add(ComponentTypeitem);
            }
            if (item.FLCS is {} FLCSItem)
            {
                hash.Add(FLCSItem);
            }
            if (item.INTV is {} INTVItem)
            {
                hash.Add(INTVItem);
            }
            if (item.FLTR is {} FLTRItem)
            {
                hash.Add(FLTRItem);
            }
            if (item.BFCE is {} BFCEItem)
            {
                hash.Add(BFCEItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Component.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IComponentGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ComponentSetterTranslationCommon
    {
        public static readonly ComponentSetterTranslationCommon Instance = new ComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IComponent item,
            IComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.ComponentType) ?? true))
            {
                item.ComponentType = rhs.ComponentType;
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.FLCS) ?? true))
            {
                if(rhs.FLCS is {} FLCSrhs)
                {
                    item.FLCS = FLCSrhs.ToArray();
                }
                else
                {
                    item.FLCS = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.INTV) ?? true))
            {
                if(rhs.INTV is {} INTVrhs)
                {
                    item.INTV = INTVrhs.ToArray();
                }
                else
                {
                    item.INTV = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.FLTR) ?? true))
            {
                if(rhs.FLTR is {} FLTRrhs)
                {
                    item.FLTR = FLTRrhs.ToArray();
                }
                else
                {
                    item.FLTR = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Component_FieldIndex.BFCE) ?? true))
            {
                if(rhs.BFCE is {} BFCErhs)
                {
                    item.BFCE = BFCErhs.ToArray();
                }
                else
                {
                    item.BFCE = default;
                }
            }
        }
        
        #endregion
        
        public Component DeepCopy(
            IComponentGetter item,
            Component.TranslationMask? copyMask = null)
        {
            Component ret = (Component)((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetNew();
            ((ComponentSetterTranslationCommon)((IComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Component DeepCopy(
            IComponentGetter item,
            out Component.ErrorMask errorMask,
            Component.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Component ret = (Component)((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetNew();
            ((ComponentSetterTranslationCommon)((IComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Component.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Component DeepCopy(
            IComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Component ret = (Component)((ComponentCommon)((IComponentGetter)item).CommonInstance()!).GetNew();
            ((ComponentSetterTranslationCommon)((IComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Component
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Component_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Component_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ComponentCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ComponentSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IComponentGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IComponentGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IComponentGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ComponentBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ComponentType,
                header: translationParams.ConvertToCustom(RecordTypes.BFCB),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLCS,
                header: translationParams.ConvertToCustom(RecordTypes.FLCS));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.INTV,
                header: translationParams.ConvertToCustom(RecordTypes.INTV));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLTR,
                header: translationParams.ConvertToCustom(RecordTypes.FLTR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BFCE,
                header: translationParams.ConvertToCustom(RecordTypes.BFCE));
        }

        public void Write(
            MutagenWriter writer,
            IComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ComponentBinaryCreateTranslation
    {
        public static readonly ComponentBinaryCreateTranslation Instance = new ComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.ComponentType, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ComponentType = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Component_FieldIndex.ComponentType;
                }
                case RecordTypeInts.FLCS:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.FLCS, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLCS = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Component_FieldIndex.FLCS;
                }
                case RecordTypeInts.INTV:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.INTV, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INTV = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Component_FieldIndex.INTV;
                }
                case RecordTypeInts.FLTR:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.FLTR, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLTR = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Component_FieldIndex.FLTR;
                }
                case RecordTypeInts.BFCE:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.BFCE, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BFCE = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Component_FieldIndex.BFCE;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ComponentBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ComponentBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ComponentBinaryOverlay :
        PluginBinaryOverlay,
        IComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Component_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Component_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ComponentCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ComponentSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IComponentGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IComponentGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IComponentGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ComponentBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ComponentType
        private int? _ComponentTypeLocation;
        public String? ComponentType => _ComponentTypeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ComponentTypeLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FLCS
        private int? _FLCSLocation;
        public ReadOnlyMemorySlice<Byte>? FLCS => _FLCSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLCSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region INTV
        private int? _INTVLocation;
        public ReadOnlyMemorySlice<Byte>? INTV => _INTVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _INTVLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FLTR
        private int? _FLTRLocation;
        public ReadOnlyMemorySlice<Byte>? FLTR => _FLTRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLTRLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region BFCE
        private int? _BFCELocation;
        public ReadOnlyMemorySlice<Byte>? BFCE => _BFCELocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BFCELocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IComponentGetter ComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IComponentGetter ComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.ComponentType, translationParams)) return ParseResult.Stop;
                    _ComponentTypeLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.ComponentType;
                }
                case RecordTypeInts.FLCS:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.FLCS, translationParams)) return ParseResult.Stop;
                    _FLCSLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.FLCS;
                }
                case RecordTypeInts.INTV:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.INTV, translationParams)) return ParseResult.Stop;
                    _INTVLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.INTV;
                }
                case RecordTypeInts.FLTR:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.FLTR, translationParams)) return ParseResult.Stop;
                    _FLTRLocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.FLTR;
                }
                case RecordTypeInts.BFCE:
                {
                    if (lastParsed.ShortCircuit((int)Component_FieldIndex.BFCE, translationParams)) return ParseResult.Stop;
                    _BFCELocation = (stream.Position - offset);
                    return (int)Component_FieldIndex.BFCE;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IComponentGetter rhs) return false;
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IComponentGetter? obj)
        {
            return ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ComponentCommon)((IComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

