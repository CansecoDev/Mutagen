/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlanetModelComponentXMPM :
        AComponent,
        IEquatable<IPlanetModelComponentXMPMGetter>,
        ILoquiObjectSetter<PlanetModelComponentXMPM>,
        IPlanetModelComponentXMPM
    {
        #region Ctor
        public PlanetModelComponentXMPM()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UnknownStrings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _UnknownStrings = new ExtendedList<String>();
        public ExtendedList<String> UnknownStrings
        {
            get => this._UnknownStrings;
            init => this._UnknownStrings = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IPlanetModelComponentXMPMGetter.UnknownStrings => _UnknownStrings;
        #endregion

        #endregion
        #region UnknownSubItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PlanetModelComponentXMPMSubItem> _UnknownSubItems = new ExtendedList<PlanetModelComponentXMPMSubItem>();
        public ExtendedList<PlanetModelComponentXMPMSubItem> UnknownSubItems
        {
            get => this._UnknownSubItems;
            init => this._UnknownSubItems = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlanetModelComponentXMPMSubItemGetter> IPlanetModelComponentXMPMGetter.UnknownSubItems => _UnknownSubItems;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetModelComponentXMPMMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetModelComponentXMPMGetter rhs) return false;
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetModelComponentXMPMGetter? obj)
        {
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.UnknownStrings = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnknownSubItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetModelComponentXMPMSubItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PlanetModelComponentXMPMSubItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem UnknownStrings,
                TItem UnknownSubItems)
            : base()
            {
                this.UnknownStrings = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(UnknownStrings, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnknownSubItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetModelComponentXMPMSubItem.Mask<TItem>?>>?>(UnknownSubItems, Enumerable.Empty<MaskItemIndexed<TItem, PlanetModelComponentXMPMSubItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? UnknownStrings;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PlanetModelComponentXMPMSubItem.Mask<TItem>?>>?>? UnknownSubItems;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.UnknownStrings, rhs.UnknownStrings)) return false;
                if (!object.Equals(this.UnknownSubItems, rhs.UnknownSubItems)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.UnknownStrings);
                hash.Add(this.UnknownSubItems);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.UnknownStrings != null)
                {
                    if (!eval(this.UnknownStrings.Overall)) return false;
                    if (this.UnknownStrings.Specific != null)
                    {
                        foreach (var item in this.UnknownStrings.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.UnknownSubItems != null)
                {
                    if (!eval(this.UnknownSubItems.Overall)) return false;
                    if (this.UnknownSubItems.Specific != null)
                    {
                        foreach (var item in this.UnknownSubItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.UnknownStrings != null)
                {
                    if (eval(this.UnknownStrings.Overall)) return true;
                    if (this.UnknownStrings.Specific != null)
                    {
                        foreach (var item in this.UnknownStrings.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.UnknownSubItems != null)
                {
                    if (eval(this.UnknownSubItems.Overall)) return true;
                    if (this.UnknownSubItems.Specific != null)
                    {
                        foreach (var item in this.UnknownSubItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlanetModelComponentXMPM.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (UnknownStrings != null)
                {
                    obj.UnknownStrings = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.UnknownStrings.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (UnknownStrings.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.UnknownStrings.Specific = l;
                        foreach (var item in UnknownStrings.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (UnknownSubItems != null)
                {
                    obj.UnknownSubItems = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PlanetModelComponentXMPMSubItem.Mask<R>?>>?>(eval(this.UnknownSubItems.Overall), Enumerable.Empty<MaskItemIndexed<R, PlanetModelComponentXMPMSubItem.Mask<R>?>>());
                    if (UnknownSubItems.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PlanetModelComponentXMPMSubItem.Mask<R>?>>();
                        obj.UnknownSubItems.Specific = l;
                        foreach (var item in UnknownSubItems.Specific)
                        {
                            MaskItemIndexed<R, PlanetModelComponentXMPMSubItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PlanetModelComponentXMPMSubItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlanetModelComponentXMPM.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlanetModelComponentXMPM.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlanetModelComponentXMPM.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.UnknownStrings?.Overall ?? true)
                        && UnknownStrings is {} UnknownStringsItem)
                    {
                        sb.AppendLine("UnknownStrings =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnknownStringsItem.Overall);
                            if (UnknownStringsItem.Specific != null)
                            {
                                foreach (var subItem in UnknownStringsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.UnknownSubItems?.Overall ?? true)
                        && UnknownSubItems is {} UnknownSubItemsItem)
                    {
                        sb.AppendLine("UnknownSubItems =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnknownSubItemsItem.Overall);
                            if (UnknownSubItemsItem.Specific != null)
                            {
                                foreach (var subItem in UnknownSubItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? UnknownStrings;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetModelComponentXMPMSubItem.ErrorMask?>>?>? UnknownSubItems;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlanetModelComponentXMPM_FieldIndex enu = (PlanetModelComponentXMPM_FieldIndex)index;
                switch (enu)
                {
                    case PlanetModelComponentXMPM_FieldIndex.UnknownStrings:
                        return UnknownStrings;
                    case PlanetModelComponentXMPM_FieldIndex.UnknownSubItems:
                        return UnknownSubItems;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlanetModelComponentXMPM_FieldIndex enu = (PlanetModelComponentXMPM_FieldIndex)index;
                switch (enu)
                {
                    case PlanetModelComponentXMPM_FieldIndex.UnknownStrings:
                        this.UnknownStrings = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlanetModelComponentXMPM_FieldIndex.UnknownSubItems:
                        this.UnknownSubItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetModelComponentXMPMSubItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlanetModelComponentXMPM_FieldIndex enu = (PlanetModelComponentXMPM_FieldIndex)index;
                switch (enu)
                {
                    case PlanetModelComponentXMPM_FieldIndex.UnknownStrings:
                        this.UnknownStrings = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlanetModelComponentXMPM_FieldIndex.UnknownSubItems:
                        this.UnknownSubItems = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetModelComponentXMPMSubItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (UnknownStrings != null) return true;
                if (UnknownSubItems != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (UnknownStrings is {} UnknownStringsItem)
                {
                    sb.AppendLine("UnknownStrings =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnknownStringsItem.Overall);
                        if (UnknownStringsItem.Specific != null)
                        {
                            foreach (var subItem in UnknownStringsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (UnknownSubItems is {} UnknownSubItemsItem)
                {
                    sb.AppendLine("UnknownSubItems =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnknownSubItemsItem.Overall);
                        if (UnknownSubItemsItem.Specific != null)
                        {
                            foreach (var subItem in UnknownSubItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.UnknownStrings = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.UnknownStrings?.Overall, rhs.UnknownStrings?.Overall), Noggog.ExceptionExt.Combine(this.UnknownStrings?.Specific, rhs.UnknownStrings?.Specific));
                ret.UnknownSubItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PlanetModelComponentXMPMSubItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.UnknownSubItems?.Overall, rhs.UnknownSubItems?.Overall), Noggog.ExceptionExt.Combine(this.UnknownSubItems?.Specific, rhs.UnknownSubItems?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool UnknownStrings;
            public PlanetModelComponentXMPMSubItem.TranslationMask? UnknownSubItems;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.UnknownStrings = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((UnknownStrings, null));
                ret.Add((UnknownSubItems == null ? DefaultOn : !UnknownSubItems.GetCrystal().CopyNothing, UnknownSubItems?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetModelComponentXMPMBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetModelComponentXMPMBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlanetModelComponentXMPM CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlanetModelComponentXMPM();
            ((PlanetModelComponentXMPMSetterCommon)((IPlanetModelComponentXMPMGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlanetModelComponentXMPM item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetModelComponentXMPMSetterCommon)((IPlanetModelComponentXMPMGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlanetModelComponentXMPM GetNew()
        {
            return new PlanetModelComponentXMPM();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanetModelComponentXMPM :
        IAComponent,
        ILoquiObjectSetter<IPlanetModelComponentXMPM>,
        IPlanetModelComponentXMPMGetter
    {
        new ExtendedList<String> UnknownStrings { get; }
        new ExtendedList<PlanetModelComponentXMPMSubItem> UnknownSubItems { get; }
    }

    public partial interface IPlanetModelComponentXMPMGetter :
        IAComponentGetter,
        IBinaryItem,
        ILoquiObject<IPlanetModelComponentXMPMGetter>
    {
        static new ILoquiRegistration StaticRegistration => PlanetModelComponentXMPM_Registration.Instance;
        IReadOnlyList<String> UnknownStrings { get; }
        IReadOnlyList<IPlanetModelComponentXMPMSubItemGetter> UnknownSubItems { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetModelComponentXMPMMixIn
    {
        public static void Clear(this IPlanetModelComponentXMPM item)
        {
            ((PlanetModelComponentXMPMSetterCommon)((IPlanetModelComponentXMPMGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlanetModelComponentXMPM.Mask<bool> GetEqualsMask(
            this IPlanetModelComponentXMPMGetter item,
            IPlanetModelComponentXMPMGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetModelComponentXMPMGetter item,
            string? name = null,
            PlanetModelComponentXMPM.Mask<bool>? printMask = null)
        {
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetModelComponentXMPMGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetModelComponentXMPM.Mask<bool>? printMask = null)
        {
            ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetModelComponentXMPMGetter item,
            IPlanetModelComponentXMPMGetter rhs,
            PlanetModelComponentXMPM.TranslationMask? equalsMask = null)
        {
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetModelComponentXMPM lhs,
            IPlanetModelComponentXMPMGetter rhs,
            out PlanetModelComponentXMPM.ErrorMask errorMask,
            PlanetModelComponentXMPM.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlanetModelComponentXMPM.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetModelComponentXMPM lhs,
            IPlanetModelComponentXMPMGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlanetModelComponentXMPM DeepCopy(
            this IPlanetModelComponentXMPMGetter item,
            PlanetModelComponentXMPM.TranslationMask? copyMask = null)
        {
            return ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlanetModelComponentXMPM DeepCopy(
            this IPlanetModelComponentXMPMGetter item,
            out PlanetModelComponentXMPM.ErrorMask errorMask,
            PlanetModelComponentXMPM.TranslationMask? copyMask = null)
        {
            return ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlanetModelComponentXMPM DeepCopy(
            this IPlanetModelComponentXMPMGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetModelComponentXMPM item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetModelComponentXMPMSetterCommon)((IPlanetModelComponentXMPMGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlanetModelComponentXMPM_FieldIndex
    {
        UnknownStrings = 0,
        UnknownSubItems = 1,
    }
    #endregion

    #region Registration
    internal partial class PlanetModelComponentXMPM_Registration : ILoquiRegistration
    {
        public static readonly PlanetModelComponentXMPM_Registration Instance = new PlanetModelComponentXMPM_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Starfield.ProtocolKey,
            msgID: 899,
            version: 0);

        public const string GUID = "b154265a-1bd3-47bd-9928-e2b35f67e514";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PlanetModelComponentXMPM.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlanetModelComponentXMPM.ErrorMask);

        public static readonly Type ClassType = typeof(PlanetModelComponentXMPM);

        public static readonly Type GetterType = typeof(IPlanetModelComponentXMPMGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanetModelComponentXMPM);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlanetModelComponentXMPM";

        public const string Name = "PlanetModelComponentXMPM";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.XMPM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.XMPM);
            var all = RecordCollection.Factory(
                RecordTypes.XMPM,
                RecordTypes.BFCB);
            return new RecordTriggerSpecs(allRecordTypes: all, triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetModelComponentXMPMBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetModelComponentXMPMSetterCommon : AComponentSetterCommon
    {
        public new static readonly PlanetModelComponentXMPMSetterCommon Instance = new PlanetModelComponentXMPMSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetModelComponentXMPM item)
        {
            ClearPartial();
            item.UnknownStrings.Clear();
            item.UnknownSubItems.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IPlanetModelComponentXMPM)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlanetModelComponentXMPM obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetModelComponentXMPM item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlanetModelComponentXMPMBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlanetModelComponentXMPMBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlanetModelComponentXMPM)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlanetModelComponentXMPMCommon : AComponentCommon
    {
        public new static readonly PlanetModelComponentXMPMCommon Instance = new PlanetModelComponentXMPMCommon();

        public PlanetModelComponentXMPM.Mask<bool> GetEqualsMask(
            IPlanetModelComponentXMPMGetter item,
            IPlanetModelComponentXMPMGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlanetModelComponentXMPM.Mask<bool>(false);
            ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetModelComponentXMPMGetter item,
            IPlanetModelComponentXMPMGetter rhs,
            PlanetModelComponentXMPM.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.UnknownStrings = item.UnknownStrings.CollectionEqualsHelper(
                rhs.UnknownStrings,
                (l, r) => string.Equals(l, r),
                include);
            ret.UnknownSubItems = item.UnknownSubItems.CollectionEqualsHelper(
                rhs.UnknownSubItems,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlanetModelComponentXMPMGetter item,
            string? name = null,
            PlanetModelComponentXMPM.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetModelComponentXMPMGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetModelComponentXMPM.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlanetModelComponentXMPM =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlanetModelComponentXMPM) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetModelComponentXMPMGetter item,
            StructuredStringBuilder sb,
            PlanetModelComponentXMPM.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.UnknownStrings?.Overall ?? true)
            {
                sb.AppendLine("UnknownStrings =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.UnknownStrings)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.UnknownSubItems?.Overall ?? true)
            {
                sb.AppendLine("UnknownSubItems =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.UnknownSubItems)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static PlanetModelComponentXMPM_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetModelComponentXMPMGetter? lhs,
            IPlanetModelComponentXMPMGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponentXMPM_FieldIndex.UnknownStrings) ?? true))
            {
                if (!lhs.UnknownStrings.SequenceEqualNullable(rhs.UnknownStrings)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetModelComponentXMPM_FieldIndex.UnknownSubItems) ?? true))
            {
                if (!lhs.UnknownSubItems.SequenceEqual(rhs.UnknownSubItems, (l, r) => ((PlanetModelComponentXMPMSubItemCommon)((IPlanetModelComponentXMPMSubItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlanetModelComponentXMPM_FieldIndex.UnknownSubItems)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetModelComponentXMPMGetter?)lhs,
                rhs: rhs as IPlanetModelComponentXMPMGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlanetModelComponentXMPMGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.UnknownStrings);
            hash.Add(item.UnknownSubItems);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IPlanetModelComponentXMPMGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlanetModelComponentXMPM.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetModelComponentXMPMGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlanetModelComponentXMPMSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly PlanetModelComponentXMPMSetterTranslationCommon Instance = new PlanetModelComponentXMPMSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetModelComponentXMPM item,
            IPlanetModelComponentXMPMGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponentXMPM_FieldIndex.UnknownStrings) ?? true))
            {
                errorMask?.PushIndex((int)PlanetModelComponentXMPM_FieldIndex.UnknownStrings);
                try
                {
                    item.UnknownStrings.SetTo(rhs.UnknownStrings);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetModelComponentXMPM_FieldIndex.UnknownSubItems) ?? true))
            {
                errorMask?.PushIndex((int)PlanetModelComponentXMPM_FieldIndex.UnknownSubItems);
                try
                {
                    item.UnknownSubItems.SetTo(
                        rhs.UnknownSubItems
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetModelComponentXMPM)item,
                rhs: (IPlanetModelComponentXMPMGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlanetModelComponentXMPM DeepCopy(
            IPlanetModelComponentXMPMGetter item,
            PlanetModelComponentXMPM.TranslationMask? copyMask = null)
        {
            PlanetModelComponentXMPM ret = (PlanetModelComponentXMPM)((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).GetNew();
            ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlanetModelComponentXMPM DeepCopy(
            IPlanetModelComponentXMPMGetter item,
            out PlanetModelComponentXMPM.ErrorMask errorMask,
            PlanetModelComponentXMPM.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlanetModelComponentXMPM ret = (PlanetModelComponentXMPM)((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).GetNew();
            ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlanetModelComponentXMPM.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlanetModelComponentXMPM DeepCopy(
            IPlanetModelComponentXMPMGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlanetModelComponentXMPM ret = (PlanetModelComponentXMPM)((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)item).CommonInstance()!).GetNew();
            ((PlanetModelComponentXMPMSetterTranslationCommon)((IPlanetModelComponentXMPMGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetModelComponentXMPM
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetModelComponentXMPM_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetModelComponentXMPM_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetModelComponentXMPMCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlanetModelComponentXMPMSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetModelComponentXMPMSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetModelComponentXMPMBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlanetModelComponentXMPMBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlanetModelComponentXMPMGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.UnknownStrings,
                countLengthLength: 2,
                transl: (MutagenWriter subWriter, String subItem) =>
                {
                    StringBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        binaryType: StringBinaryType.PrependLengthUShort);
                });
        }

        public static void WriteRecordTypes(
            IPlanetModelComponentXMPMGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPlanetModelComponentXMPMSubItemGetter>.Instance.Write(
                writer: writer,
                items: item.UnknownSubItems,
                countLengthLength: 2,
                transl: (MutagenWriter subWriter, IPlanetModelComponentXMPMSubItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PlanetModelComponentXMPMSubItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IPlanetModelComponentXMPMGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.XMPM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
                WriteRecordTypes(
                    item: item,
                    writer: writerToUse,
                    translationParams: translationParams);
                using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetModelComponentXMPMGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetModelComponentXMPMGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetModelComponentXMPMBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly PlanetModelComponentXMPMBinaryCreateTranslation Instance = new PlanetModelComponentXMPMBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlanetModelComponentXMPM item,
            MutagenFrame frame)
        {
            item.UnknownStrings.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                    amount: frame.ReadUInt16(),
                    reader: frame,
                    transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                    {
                        return StringBinaryTranslation.Instance.Parse(
                            r,
                            item: out listSubItem,
                            parseWhole: false,
                            binaryType: StringBinaryType.PrependLengthUShort);
                    }));
        }

        public static ParseResult FillBinaryRecordTypes(
            IPlanetModelComponentXMPM item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.UnknownSubItems.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PlanetModelComponentXMPMSubItem>.Instance.Parse(
                            amount: frame.ReadUInt16(),
                            reader: frame,
                            translationParams: translationParams,
                            transl: PlanetModelComponentXMPMSubItem.TryCreateFromBinary));
                    return (int)PlanetModelComponentXMPM_FieldIndex.UnknownSubItems;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetModelComponentXMPMBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetModelComponentXMPMBinaryOverlay :
        AComponentBinaryOverlay,
        IPlanetModelComponentXMPMGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetModelComponentXMPM_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetModelComponentXMPM_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetModelComponentXMPMCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetModelComponentXMPMSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetModelComponentXMPMBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetModelComponentXMPMBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region UnknownStrings
        public IReadOnlyList<String> UnknownStrings => BinaryOverlayList.FactoryByCountLength<String>(_structData, _package, countLength: 2, (s, p) => BinaryStringUtility.ParsePrependedString(s, lengthLength: 2, encoding: p.MetaData.Encodings.NonTranslated));
        protected int UnknownStringsEndingPos;
        #endregion
        public IReadOnlyList<IPlanetModelComponentXMPMSubItemGetter> UnknownSubItems { get; private set; } = Array.Empty<IPlanetModelComponentXMPMSubItemGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetModelComponentXMPMBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlanetModelComponentXMPMGetter PlanetModelComponentXMPMFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetModelComponentXMPMBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlanetModelComponentXMPMGetter PlanetModelComponentXMPMFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetModelComponentXMPMFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    var count = stream.ReadUInt16();
                    this.UnknownSubItems = BinaryOverlayList.FactoryByCount<IPlanetModelComponentXMPMSubItemGetter>(
                        stream: stream,
                        package: _package,
                        count: count,
                        getter: (s, p) => PlanetModelComponentXMPMSubItemBinaryOverlay.PlanetModelComponentXMPMSubItemFactory(s, p));
                    return (int)PlanetModelComponentXMPM_FieldIndex.UnknownSubItems;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetModelComponentXMPMMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetModelComponentXMPMGetter rhs) return false;
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetModelComponentXMPMGetter? obj)
        {
            return ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetModelComponentXMPMCommon)((IPlanetModelComponentXMPMGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

