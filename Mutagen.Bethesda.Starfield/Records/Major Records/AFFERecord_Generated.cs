/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AFFERecord :
        StarfieldMajorRecord,
        IAFFERecordInternal,
        IEquatable<IAFFERecordGetter>,
        ILoquiObjectSetter<AFFERecord>
    {
        #region Ctor
        protected AFFERecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.FNAM => this.FNAM;
        #endregion
        #region NLDT
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NLDT;
        public MemorySlice<Byte>? NLDT
        {
            get => this._NLDT;
            set => this._NLDT = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.NLDT => this.NLDT;
        #endregion
        #region NNAMs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AFFESubrecord> _NNAMs = new ExtendedList<AFFESubrecord>();
        public ExtendedList<AFFESubrecord> NNAMs
        {
            get => this._NNAMs;
            init => this._NNAMs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAFFESubrecordGetter> IAFFERecordGetter.NNAMs => _NNAMs;
        #endregion

        #endregion
        #region ANAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ANAM;
        public MemorySlice<Byte>? ANAM
        {
            get => this._ANAM;
            set => this._ANAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.ANAM => this.ANAM;
        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.ENAM => this.ENAM;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.DNAM => this.DNAM;
        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.CNAM => this.CNAM;
        #endregion
        #region BNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BNAM;
        public MemorySlice<Byte>? BNAM
        {
            get => this._BNAM;
            set => this._BNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAFFERecordGetter.BNAM => this.BNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AFFERecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FNAM = initialValue;
                this.NLDT = initialValue;
                this.NNAMs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AFFESubrecord.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AFFESubrecord.Mask<TItem>?>>());
                this.ANAM = initialValue;
                this.ENAM = initialValue;
                this.DNAM = initialValue;
                this.CNAM = initialValue;
                this.BNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem FNAM,
                TItem NLDT,
                TItem NNAMs,
                TItem ANAM,
                TItem ENAM,
                TItem DNAM,
                TItem CNAM,
                TItem BNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.FNAM = FNAM;
                this.NLDT = NLDT;
                this.NNAMs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AFFESubrecord.Mask<TItem>?>>?>(NNAMs, Enumerable.Empty<MaskItemIndexed<TItem, AFFESubrecord.Mask<TItem>?>>());
                this.ANAM = ANAM;
                this.ENAM = ENAM;
                this.DNAM = DNAM;
                this.CNAM = CNAM;
                this.BNAM = BNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FNAM;
            public TItem NLDT;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AFFESubrecord.Mask<TItem>?>>?>? NNAMs;
            public TItem ANAM;
            public TItem ENAM;
            public TItem DNAM;
            public TItem CNAM;
            public TItem BNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.NLDT, rhs.NLDT)) return false;
                if (!object.Equals(this.NNAMs, rhs.NNAMs)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FNAM);
                hash.Add(this.NLDT);
                hash.Add(this.NNAMs);
                hash.Add(this.ANAM);
                hash.Add(this.ENAM);
                hash.Add(this.DNAM);
                hash.Add(this.CNAM);
                hash.Add(this.BNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.NLDT)) return false;
                if (this.NNAMs != null)
                {
                    if (!eval(this.NNAMs.Overall)) return false;
                    if (this.NNAMs.Specific != null)
                    {
                        foreach (var item in this.NNAMs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ANAM)) return false;
                if (!eval(this.ENAM)) return false;
                if (!eval(this.DNAM)) return false;
                if (!eval(this.CNAM)) return false;
                if (!eval(this.BNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.NLDT)) return true;
                if (this.NNAMs != null)
                {
                    if (eval(this.NNAMs.Overall)) return true;
                    if (this.NNAMs.Specific != null)
                    {
                        foreach (var item in this.NNAMs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ANAM)) return true;
                if (eval(this.ENAM)) return true;
                if (eval(this.DNAM)) return true;
                if (eval(this.CNAM)) return true;
                if (eval(this.BNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AFFERecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FNAM = eval(this.FNAM);
                obj.NLDT = eval(this.NLDT);
                if (NNAMs != null)
                {
                    obj.NNAMs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AFFESubrecord.Mask<R>?>>?>(eval(this.NNAMs.Overall), Enumerable.Empty<MaskItemIndexed<R, AFFESubrecord.Mask<R>?>>());
                    if (NNAMs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AFFESubrecord.Mask<R>?>>();
                        obj.NNAMs.Specific = l;
                        foreach (var item in NNAMs.Specific)
                        {
                            MaskItemIndexed<R, AFFESubrecord.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AFFESubrecord.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ANAM = eval(this.ANAM);
                obj.ENAM = eval(this.ENAM);
                obj.DNAM = eval(this.DNAM);
                obj.CNAM = eval(this.CNAM);
                obj.BNAM = eval(this.BNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AFFERecord.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AFFERecord.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AFFERecord.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.NLDT ?? true)
                    {
                        sb.AppendItem(NLDT, "NLDT");
                    }
                    if ((printMask?.NNAMs?.Overall ?? true)
                        && NNAMs is {} NNAMsItem)
                    {
                        sb.AppendLine("NNAMs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(NNAMsItem.Overall);
                            if (NNAMsItem.Specific != null)
                            {
                                foreach (var subItem in NNAMsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ANAM ?? true)
                    {
                        sb.AppendItem(ANAM, "ANAM");
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FNAM;
            public Exception? NLDT;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AFFESubrecord.ErrorMask?>>?>? NNAMs;
            public Exception? ANAM;
            public Exception? ENAM;
            public Exception? DNAM;
            public Exception? CNAM;
            public Exception? BNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AFFERecord_FieldIndex enu = (AFFERecord_FieldIndex)index;
                switch (enu)
                {
                    case AFFERecord_FieldIndex.FNAM:
                        return FNAM;
                    case AFFERecord_FieldIndex.NLDT:
                        return NLDT;
                    case AFFERecord_FieldIndex.NNAMs:
                        return NNAMs;
                    case AFFERecord_FieldIndex.ANAM:
                        return ANAM;
                    case AFFERecord_FieldIndex.ENAM:
                        return ENAM;
                    case AFFERecord_FieldIndex.DNAM:
                        return DNAM;
                    case AFFERecord_FieldIndex.CNAM:
                        return CNAM;
                    case AFFERecord_FieldIndex.BNAM:
                        return BNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AFFERecord_FieldIndex enu = (AFFERecord_FieldIndex)index;
                switch (enu)
                {
                    case AFFERecord_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case AFFERecord_FieldIndex.NLDT:
                        this.NLDT = ex;
                        break;
                    case AFFERecord_FieldIndex.NNAMs:
                        this.NNAMs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AFFESubrecord.ErrorMask?>>?>(ex, null);
                        break;
                    case AFFERecord_FieldIndex.ANAM:
                        this.ANAM = ex;
                        break;
                    case AFFERecord_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case AFFERecord_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case AFFERecord_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case AFFERecord_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AFFERecord_FieldIndex enu = (AFFERecord_FieldIndex)index;
                switch (enu)
                {
                    case AFFERecord_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case AFFERecord_FieldIndex.NLDT:
                        this.NLDT = (Exception?)obj;
                        break;
                    case AFFERecord_FieldIndex.NNAMs:
                        this.NNAMs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AFFESubrecord.ErrorMask?>>?>)obj;
                        break;
                    case AFFERecord_FieldIndex.ANAM:
                        this.ANAM = (Exception?)obj;
                        break;
                    case AFFERecord_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case AFFERecord_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case AFFERecord_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case AFFERecord_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FNAM != null) return true;
                if (NLDT != null) return true;
                if (NNAMs != null) return true;
                if (ANAM != null) return true;
                if (ENAM != null) return true;
                if (DNAM != null) return true;
                if (CNAM != null) return true;
                if (BNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(NLDT, "NLDT");
                }
                if (NNAMs is {} NNAMsItem)
                {
                    sb.AppendLine("NNAMs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(NNAMsItem.Overall);
                        if (NNAMsItem.Specific != null)
                        {
                            foreach (var subItem in NNAMsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ANAM, "ANAM");
                }
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.NLDT = this.NLDT.Combine(rhs.NLDT);
                ret.NNAMs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AFFESubrecord.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.NNAMs?.Overall, rhs.NNAMs?.Overall), Noggog.ExceptionExt.Combine(this.NNAMs?.Specific, rhs.NNAMs?.Specific));
                ret.ANAM = this.ANAM.Combine(rhs.ANAM);
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FNAM;
            public bool NLDT;
            public AFFESubrecord.TranslationMask? NNAMs;
            public bool ANAM;
            public bool ENAM;
            public bool DNAM;
            public bool CNAM;
            public bool BNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FNAM = defaultOn;
                this.NLDT = defaultOn;
                this.ANAM = defaultOn;
                this.ENAM = defaultOn;
                this.DNAM = defaultOn;
                this.CNAM = defaultOn;
                this.BNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FNAM, null));
                ret.Add((NLDT, null));
                ret.Add((NNAMs == null ? DefaultOn : !NNAMs.GetCrystal().CopyNothing, NNAMs?.GetCrystal()));
                ret.Add((ANAM, null));
                ret.Add((ENAM, null));
                ret.Add((DNAM, null));
                ret.Add((CNAM, null));
                ret.Add((BNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AFFERecord_Registration.TriggeringRecordType;
        public AFFERecord(FormKey formKey)
        {
            this.FormKey = formKey;
            this.FormVersion = GameRelease.Starfield.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        private AFFERecord(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = gameRelease.GetDefaultFormVersion()!.Value;
            CustomCtor();
        }

        internal AFFERecord(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AFFERecord(IStarfieldMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AFFERecord(IStarfieldMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AFFERecord>.ToString(this);
        }

        protected override Type LinkType => typeof(IAFFERecord);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAFFERecordGetter rhs) return false;
            return ((AFFERecordCommon)((IAFFERecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAFFERecordGetter? obj)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AFFERecordCommon)((IAFFERecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AFFERecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AFFERecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AFFERecord CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AFFERecord();
            ((AFFERecordSetterCommon)((IAFFERecordGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AFFERecord item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AFFERecordSetterCommon)((IAFFERecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AFFERecord GetNew()
        {
            return new AFFERecord();
        }

    }
    #endregion

    #region Interface
    public partial interface IAFFERecord :
        IAFFERecordGetter,
        ILoquiObjectSetter<IAFFERecordInternal>,
        IStarfieldMajorRecordInternal
    {
        new MemorySlice<Byte>? FNAM { get; set; }
        new MemorySlice<Byte>? NLDT { get; set; }
        new ExtendedList<AFFESubrecord> NNAMs { get; }
        new MemorySlice<Byte>? ANAM { get; set; }
        new MemorySlice<Byte>? ENAM { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? CNAM { get; set; }
        new MemorySlice<Byte>? BNAM { get; set; }
    }

    public partial interface IAFFERecordInternal :
        IStarfieldMajorRecordInternal,
        IAFFERecord,
        IAFFERecordGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AFFE)]
    public partial interface IAFFERecordGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IAFFERecordGetter>,
        IMapsToGetter<IAFFERecordGetter>
    {
        static new ILoquiRegistration StaticRegistration => AFFERecord_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        ReadOnlyMemorySlice<Byte>? NLDT { get; }
        IReadOnlyList<IAFFESubrecordGetter> NNAMs { get; }
        ReadOnlyMemorySlice<Byte>? ANAM { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        ReadOnlyMemorySlice<Byte>? BNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AFFERecordMixIn
    {
        public static void Clear(this IAFFERecordInternal item)
        {
            ((AFFERecordSetterCommon)((IAFFERecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AFFERecord.Mask<bool> GetEqualsMask(
            this IAFFERecordGetter item,
            IAFFERecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAFFERecordGetter item,
            string? name = null,
            AFFERecord.Mask<bool>? printMask = null)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAFFERecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AFFERecord.Mask<bool>? printMask = null)
        {
            ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAFFERecordGetter item,
            IAFFERecordGetter rhs,
            AFFERecord.TranslationMask? equalsMask = null)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAFFERecordInternal lhs,
            IAFFERecordGetter rhs,
            out AFFERecord.ErrorMask errorMask,
            AFFERecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AFFERecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAFFERecordInternal lhs,
            IAFFERecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AFFERecord DeepCopy(
            this IAFFERecordGetter item,
            AFFERecord.TranslationMask? copyMask = null)
        {
            return ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AFFERecord DeepCopy(
            this IAFFERecordGetter item,
            out AFFERecord.ErrorMask errorMask,
            AFFERecord.TranslationMask? copyMask = null)
        {
            return ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AFFERecord DeepCopy(
            this IAFFERecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AFFERecord Duplicate(
            this IAFFERecordGetter item,
            FormKey formKey,
            AFFERecord.TranslationMask? copyMask = null)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AFFERecord Duplicate(
            this IAFFERecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAFFERecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AFFERecordSetterCommon)((IAFFERecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AFFERecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        FNAM = 7,
        NLDT = 8,
        NNAMs = 9,
        ANAM = 10,
        ENAM = 11,
        DNAM = 12,
        CNAM = 13,
        BNAM = 14,
    }
    #endregion

    #region Registration
    internal partial class AFFERecord_Registration : ILoquiRegistration
    {
        public static readonly AFFERecord_Registration Instance = new AFFERecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Starfield.ProtocolKey,
            msgID: 708,
            version: 0);

        public const string GUID = "484ec00c-9926-41b1-b54e-fb0575337ee4";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(AFFERecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AFFERecord.ErrorMask);

        public static readonly Type ClassType = typeof(AFFERecord);

        public static readonly Type GetterType = typeof(IAFFERecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAFFERecord);

        public static readonly Type? InternalSetterType = typeof(IAFFERecordInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AFFERecord";

        public const string Name = "AFFERecord";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AFFE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AFFE);
            var all = RecordCollection.Factory(
                RecordTypes.AFFE,
                RecordTypes.FNAM,
                RecordTypes.NLDT,
                RecordTypes.NNAM,
                RecordTypes.RNAM,
                RecordTypes.ANAM,
                RecordTypes.ENAM,
                RecordTypes.DNAM,
                RecordTypes.CNAM,
                RecordTypes.BNAM);
            return new RecordTriggerSpecs(allRecordTypes: all, triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AFFERecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AFFERecordSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AFFERecordSetterCommon Instance = new AFFERecordSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAFFERecordInternal item)
        {
            ClearPartial();
            item.FNAM = default;
            item.NLDT = default;
            item.NNAMs.Clear();
            item.ANAM = default;
            item.ENAM = default;
            item.DNAM = default;
            item.CNAM = default;
            item.BNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAFFERecordInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAFFERecordInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAFFERecord obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAFFERecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAFFERecordInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AFFERecordBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AFFERecordBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AFFERecord)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AFFERecord)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AFFERecordCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AFFERecordCommon Instance = new AFFERecordCommon();

        public AFFERecord.Mask<bool> GetEqualsMask(
            IAFFERecordGetter item,
            IAFFERecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AFFERecord.Mask<bool>(false);
            ((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAFFERecordGetter item,
            IAFFERecordGetter rhs,
            AFFERecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.NLDT = MemorySliceExt.SequenceEqual(item.NLDT, rhs.NLDT);
            ret.NNAMs = item.NNAMs.CollectionEqualsHelper(
                rhs.NNAMs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ANAM = MemorySliceExt.SequenceEqual(item.ANAM, rhs.ANAM);
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            ret.CNAM = MemorySliceExt.SequenceEqual(item.CNAM, rhs.CNAM);
            ret.BNAM = MemorySliceExt.SequenceEqual(item.BNAM, rhs.BNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAFFERecordGetter item,
            string? name = null,
            AFFERecord.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAFFERecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AFFERecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AFFERecord =>");
            }
            else
            {
                sb.AppendLine($"{name} (AFFERecord) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAFFERecordGetter item,
            StructuredStringBuilder sb,
            AFFERecord.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.NLDT ?? true)
                && item.NLDT is {} NLDTItem)
            {
                sb.AppendLine($"NLDT => {SpanExt.ToHexString(NLDTItem)}");
            }
            if (printMask?.NNAMs?.Overall ?? true)
            {
                sb.AppendLine("NNAMs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.NNAMs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ANAM ?? true)
                && item.ANAM is {} ANAMItem)
            {
                sb.AppendLine($"ANAM => {SpanExt.ToHexString(ANAMItem)}");
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM is {} CNAMItem)
            {
                sb.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendLine($"BNAM => {SpanExt.ToHexString(BNAMItem)}");
            }
        }
        
        public static AFFERecord_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AFFERecord_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AFFERecord_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AFFERecord_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AFFERecord_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AFFERecord_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AFFERecord_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AFFERecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AFFERecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AFFERecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AFFERecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AFFERecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AFFERecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAFFERecordGetter? lhs,
            IAFFERecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.NLDT) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NLDT, rhs.NLDT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.NNAMs) ?? true))
            {
                if (!lhs.NNAMs.SequenceEqual(rhs.NNAMs, (l, r) => ((AFFESubrecordCommon)((IAFFESubrecordGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)AFFERecord_FieldIndex.NNAMs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.ANAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ANAM, rhs.ANAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.CNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CNAM, rhs.CNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.BNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BNAM, rhs.BNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAFFERecordGetter?)lhs,
                rhs: rhs as IAFFERecordGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAFFERecordGetter?)lhs,
                rhs: rhs as IAFFERecordGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAFFERecordGetter item)
        {
            var hash = new HashCode();
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            if (item.NLDT is {} NLDTItem)
            {
                hash.Add(NLDTItem);
            }
            hash.Add(item.NNAMs);
            if (item.ANAM is {} ANAMItem)
            {
                hash.Add(ANAMItem);
            }
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            if (item.CNAM is {} CNAMItem)
            {
                hash.Add(CNAMItem);
            }
            if (item.BNAM is {} BNAMItem)
            {
                hash.Add(BNAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAFFERecordGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAFFERecordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AFFERecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAFFERecordGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public AFFERecord Duplicate(
            IAFFERecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AFFERecord(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAFFERecordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAFFERecordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AFFERecordSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AFFERecordSetterTranslationCommon Instance = new AFFERecordSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAFFERecordInternal item,
            IAFFERecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAFFERecord item,
            IAFFERecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.NLDT) ?? true))
            {
                if(rhs.NLDT is {} NLDTrhs)
                {
                    item.NLDT = NLDTrhs.ToArray();
                }
                else
                {
                    item.NLDT = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.NNAMs) ?? true))
            {
                errorMask?.PushIndex((int)AFFERecord_FieldIndex.NNAMs);
                try
                {
                    item.NNAMs.SetTo(
                        rhs.NNAMs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.ANAM) ?? true))
            {
                if(rhs.ANAM is {} ANAMrhs)
                {
                    item.ANAM = ANAMrhs.ToArray();
                }
                else
                {
                    item.ANAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM is {} CNAMrhs)
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AFFERecord_FieldIndex.BNAM) ?? true))
            {
                if(rhs.BNAM is {} BNAMrhs)
                {
                    item.BNAM = BNAMrhs.ToArray();
                }
                else
                {
                    item.BNAM = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAFFERecordInternal)item,
                rhs: (IAFFERecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAFFERecord)item,
                rhs: (IAFFERecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAFFERecordInternal)item,
                rhs: (IAFFERecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAFFERecord)item,
                rhs: (IAFFERecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AFFERecord DeepCopy(
            IAFFERecordGetter item,
            AFFERecord.TranslationMask? copyMask = null)
        {
            AFFERecord ret = (AFFERecord)((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).GetNew();
            ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AFFERecord DeepCopy(
            IAFFERecordGetter item,
            out AFFERecord.ErrorMask errorMask,
            AFFERecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AFFERecord ret = (AFFERecord)((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).GetNew();
            ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AFFERecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AFFERecord DeepCopy(
            IAFFERecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AFFERecord ret = (AFFERecord)((AFFERecordCommon)((IAFFERecordGetter)item).CommonInstance()!).GetNew();
            ((AFFERecordSetterTranslationCommon)((IAFFERecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AFFERecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AFFERecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AFFERecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AFFERecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AFFERecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AFFERecordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AFFERecordBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AFFERecordBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAFFERecordGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NLDT,
                header: translationParams.ConvertToCustom(RecordTypes.NLDT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAFFESubrecordGetter>.Instance.Write(
                writer: writer,
                items: item.NNAMs,
                transl: (MutagenWriter subWriter, IAFFESubrecordGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AFFESubrecordBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ANAM,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
        }

        public void Write(
            MutagenWriter writer,
            IAFFERecordGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.AFFE)))
            {
                try
                {
                    StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    if (!item.IsDeleted)
                    {
                        writer.MetaData.FormVersion = item.FormVersion;
                        WriteRecordTypes(
                            item: item,
                            writer: writer,
                            translationParams: translationParams);
                        writer.MetaData.FormVersion = null;
                    }
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAFFERecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAFFERecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAFFERecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AFFERecordBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AFFERecordBinaryCreateTranslation Instance = new AFFERecordBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AFFE;
        public static ParseResult FillBinaryRecordTypes(
            IAFFERecordInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.FNAM;
                }
                case RecordTypeInts.NLDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NLDT = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.NLDT;
                }
                case RecordTypeInts.NNAM:
                case RecordTypeInts.RNAM:
                {
                    item.NNAMs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AFFESubrecord>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AFFESubrecord_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AFFESubrecord.TryCreateFromBinary));
                    return (int)AFFERecord_FieldIndex.NNAMs;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ANAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.ANAM;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.ENAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.DNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.CNAM;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)AFFERecord_FieldIndex.BNAM;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AFFERecordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AFFERecordBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAFFERecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AFFERecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AFFERecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AFFERecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AFFERecordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AFFERecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AFFERecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAFFERecord);


        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NLDT
        private int? _NLDTLocation;
        public ReadOnlyMemorySlice<Byte>? NLDT => _NLDTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NLDTLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IAFFESubrecordGetter> NNAMs { get; private set; } = Array.Empty<IAFFESubrecordGetter>();
        #region ANAM
        private int? _ANAMLocation;
        public ReadOnlyMemorySlice<Byte>? ANAM => _ANAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ANAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public ReadOnlyMemorySlice<Byte>? BNAM => _BNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AFFERecordBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAFFERecordGetter AFFERecordFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AFFERecordBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAFFERecordGetter AFFERecordFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AFFERecordFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.FNAM;
                }
                case RecordTypeInts.NLDT:
                {
                    _NLDTLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.NLDT;
                }
                case RecordTypeInts.NNAM:
                case RecordTypeInts.RNAM:
                {
                    this.NNAMs = this.ParseRepeatedTypelessSubrecord<IAFFESubrecordGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AFFESubrecord_Registration.TriggerSpecs,
                        factory: AFFESubrecordBinaryOverlay.AFFESubrecordFactory);
                    return (int)AFFERecord_FieldIndex.NNAMs;
                }
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.ANAM;
                }
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.ENAM;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.DNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.CNAM;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)AFFERecord_FieldIndex.BNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AFFERecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AFFERecord>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAFFERecordGetter rhs) return false;
            return ((AFFERecordCommon)((IAFFERecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAFFERecordGetter? obj)
        {
            return ((AFFERecordCommon)((IAFFERecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AFFERecordCommon)((IAFFERecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

