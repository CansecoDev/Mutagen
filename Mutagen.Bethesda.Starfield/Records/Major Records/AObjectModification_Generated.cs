/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.RecordTypeMapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    /// <summary>
    /// Implemented by: [WeaponModification, ObjectModification, UnknownObjectModification]
    /// </summary>
    public abstract partial class AObjectModification :
        StarfieldMajorRecord,
        IAObjectModificationInternal,
        IEquatable<IAObjectModificationGetter>,
        ILoquiObjectSetter<AObjectModification>
    {
        #region Ctor
        protected AObjectModification()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AObjectModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AObjectModification.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AObjectModification.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AObjectModification.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AObjectModification.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AObjectModification_FieldIndex enu = (AObjectModification_FieldIndex)index;
                switch (enu)
                {
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AObjectModification_FieldIndex enu = (AObjectModification_FieldIndex)index;
                switch (enu)
                {
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AObjectModification_FieldIndex enu = (AObjectModification_FieldIndex)index;
                switch (enu)
                {
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AObjectModification_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AObjectModificationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AObjectModificationSetterCommon.Instance.RemapLinks(this, mapping);
        public AObjectModification(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AObjectModification(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AObjectModification(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AObjectModification(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public AObjectModification(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AObjectModification>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAObjectModificationGetter rhs) return false;
            return ((AObjectModificationCommon)((IAObjectModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAObjectModificationGetter? obj)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AObjectModificationCommon)((IAObjectModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AObjectModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AObjectModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AObjectModificationSetterCommon)((IAObjectModificationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AObjectModification GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [WeaponModification, ObjectModification, UnknownObjectModification]
    /// </summary>
    public partial interface IAObjectModification :
        IAObjectModificationGetter,
        IConstructibleObjectTarget,
        IFormLinkContainer,
        ILoquiObjectSetter<IAObjectModificationInternal>,
        IStarfieldMajorRecordInternal
    {
    }

    public partial interface IAObjectModificationInternal :
        IStarfieldMajorRecordInternal,
        IAObjectModification,
        IAObjectModificationGetter
    {
    }

    /// <summary>
    /// Implemented by: [WeaponModification, ObjectModification, UnknownObjectModification]
    /// </summary>
    public partial interface IAObjectModificationGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IFormLinkContainerGetter,
        ILoquiObject<IAObjectModificationGetter>
    {
        static new ILoquiRegistration StaticRegistration => AObjectModification_Registration.Instance;

    }

    #endregion

    #region Common MixIn
    public static partial class AObjectModificationMixIn
    {
        public static void Clear(this IAObjectModificationInternal item)
        {
            ((AObjectModificationSetterCommon)((IAObjectModificationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AObjectModification.Mask<bool> GetEqualsMask(
            this IAObjectModificationGetter item,
            IAObjectModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAObjectModificationGetter item,
            string? name = null,
            AObjectModification.Mask<bool>? printMask = null)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAObjectModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AObjectModification.Mask<bool>? printMask = null)
        {
            ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAObjectModificationGetter item,
            IAObjectModificationGetter rhs,
            AObjectModification.TranslationMask? equalsMask = null)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAObjectModificationInternal lhs,
            IAObjectModificationGetter rhs,
            out AObjectModification.ErrorMask errorMask,
            AObjectModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AObjectModification.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAObjectModificationInternal lhs,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AObjectModification DeepCopy(
            this IAObjectModificationGetter item,
            AObjectModification.TranslationMask? copyMask = null)
        {
            return ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AObjectModification DeepCopy(
            this IAObjectModificationGetter item,
            out AObjectModification.ErrorMask errorMask,
            AObjectModification.TranslationMask? copyMask = null)
        {
            return ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AObjectModification DeepCopy(
            this IAObjectModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AObjectModification Duplicate(
            this IAObjectModificationGetter item,
            FormKey formKey,
            AObjectModification.TranslationMask? copyMask = null)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AObjectModification Duplicate(
            this IAObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AObjectModificationSetterCommon)((IAObjectModificationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AObjectModification_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
    }
    #endregion

    #region Registration
    internal partial class AObjectModification_Registration : ILoquiRegistration
    {
        public static readonly AObjectModification_Registration Instance = new AObjectModification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(AObjectModification.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AObjectModification.ErrorMask);

        public static readonly Type ClassType = typeof(AObjectModification);

        public static readonly Type GetterType = typeof(IAObjectModificationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAObjectModification);

        public static readonly Type? InternalSetterType = typeof(IAObjectModificationInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AObjectModification";

        public const string Name = "AObjectModification";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.OMOD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.OMOD);
            var all = RecordCollection.Factory(
                RecordTypes.OMOD,
                RecordTypes.NONE);
            return new RecordTriggerSpecs(allRecordTypes: all, triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AObjectModificationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AObjectModificationSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AObjectModificationSetterCommon Instance = new AObjectModificationSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAObjectModificationInternal item)
        {
            ClearPartial();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAObjectModificationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAObjectModificationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAObjectModification obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAObjectModificationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AObjectModificationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AObjectModificationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AObjectModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AObjectModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AObjectModificationCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AObjectModificationCommon Instance = new AObjectModificationCommon();

        public AObjectModification.Mask<bool> GetEqualsMask(
            IAObjectModificationGetter item,
            IAObjectModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AObjectModification.Mask<bool>(false);
            ((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAObjectModificationGetter item,
            IAObjectModificationGetter rhs,
            AObjectModification.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAObjectModificationGetter item,
            string? name = null,
            AObjectModification.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAObjectModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AObjectModification.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AObjectModification =>");
            }
            else
            {
                sb.AppendLine($"{name} (AObjectModification) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAObjectModificationGetter item,
            StructuredStringBuilder sb,
            AObjectModification.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
        }
        
        public static AObjectModification_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AObjectModification_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AObjectModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AObjectModification_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AObjectModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AObjectModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AObjectModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AObjectModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAObjectModificationGetter? lhs,
            IAObjectModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAObjectModificationGetter?)lhs,
                rhs: rhs as IAObjectModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAObjectModificationGetter?)lhs,
                rhs: rhs as IAObjectModificationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAObjectModificationGetter item)
        {
            var hash = new HashCode();
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAObjectModificationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAObjectModificationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AObjectModification.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAObjectModificationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public virtual AObjectModification Duplicate(
            IAObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAObjectModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAObjectModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AObjectModificationSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AObjectModificationSetterTranslationCommon Instance = new AObjectModificationSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAObjectModificationInternal item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IAObjectModification item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAObjectModificationInternal)item,
                rhs: (IAObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAObjectModification)item,
                rhs: (IAObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAObjectModificationInternal)item,
                rhs: (IAObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAObjectModification)item,
                rhs: (IAObjectModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AObjectModification DeepCopy(
            IAObjectModificationGetter item,
            AObjectModification.TranslationMask? copyMask = null)
        {
            AObjectModification ret = (AObjectModification)((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).GetNew();
            ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AObjectModification DeepCopy(
            IAObjectModificationGetter item,
            out AObjectModification.ErrorMask errorMask,
            AObjectModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AObjectModification ret = (AObjectModification)((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).GetNew();
            ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AObjectModification.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AObjectModification DeepCopy(
            IAObjectModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AObjectModification ret = (AObjectModification)((AObjectModificationCommon)((IAObjectModificationGetter)item).CommonInstance()!).GetNew();
            ((AObjectModificationSetterTranslationCommon)((IAObjectModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AObjectModification
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AObjectModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AObjectModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AObjectModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AObjectModificationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AObjectModificationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AObjectModificationBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AObjectModificationBinaryWriteTranslation Instance = new();

        public virtual void Write(
            MutagenWriter writer,
            IAObjectModificationGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.OMOD)))
            {
                try
                {
                    StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                        item: item,
                        writer: writer);
                    if (!item.IsDeleted)
                    {
                        MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                            item: item,
                            writer: writer,
                            translationParams: translationParams);
                    }
                }
                catch (Exception ex)
                {
                    throw RecordException.Enrich(ex, item);
                }
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAObjectModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AObjectModificationBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AObjectModificationBinaryCreateTranslation Instance = new AObjectModificationBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AObjectModificationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal abstract partial class AObjectModificationBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAObjectModificationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AObjectModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AObjectModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AObjectModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AObjectModificationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AObjectModificationCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AObjectModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AObjectModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AObjectModificationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AObjectModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AObjectModification>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAObjectModificationGetter rhs) return false;
            return ((AObjectModificationCommon)((IAObjectModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAObjectModificationGetter? obj)
        {
            return ((AObjectModificationCommon)((IAObjectModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AObjectModificationCommon)((IAObjectModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

