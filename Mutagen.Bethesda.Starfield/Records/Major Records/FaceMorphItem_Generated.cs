/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class FaceMorphItem :
        IEquatable<IFaceMorphItemGetter>,
        IFaceMorphItem,
        ILoquiObjectSetter<FaceMorphItem>
    {
        #region Ctor
        public FaceMorphItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FMRU
        public String? FMRU { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFaceMorphItemGetter.FMRU => this.FMRU;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFaceMorphItemGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region FMRS
        public String? FMRS { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFaceMorphItemGetter.FMRS => this.FMRS;
        #endregion
        #region FMSR
        public Int32? FMSR { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IFaceMorphItemGetter.FMSR => this.FMSR;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FaceMorphItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFaceMorphItemGetter rhs) return false;
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFaceMorphItemGetter? obj)
        {
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FaceMorphItemCommon)((IFaceMorphItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.FMRU = initialValue;
                this.Name = initialValue;
                this.FMRS = initialValue;
                this.FMSR = initialValue;
            }

            public Mask(
                TItem FMRU,
                TItem Name,
                TItem FMRS,
                TItem FMSR)
            {
                this.FMRU = FMRU;
                this.Name = Name;
                this.FMRS = FMRS;
                this.FMSR = FMSR;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FMRU;
            public TItem Name;
            public TItem FMRS;
            public TItem FMSR;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.FMRU, rhs.FMRU)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.FMRS, rhs.FMRS)) return false;
                if (!object.Equals(this.FMSR, rhs.FMSR)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FMRU);
                hash.Add(this.Name);
                hash.Add(this.FMRS);
                hash.Add(this.FMSR);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.FMRU)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.FMRS)) return false;
                if (!eval(this.FMSR)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.FMRU)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.FMRS)) return true;
                if (eval(this.FMSR)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FaceMorphItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.FMRU = eval(this.FMRU);
                obj.Name = eval(this.Name);
                obj.FMRS = eval(this.FMRS);
                obj.FMSR = eval(this.FMSR);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FaceMorphItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FaceMorphItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FaceMorphItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FMRU ?? true)
                    {
                        sb.AppendItem(FMRU, "FMRU");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.FMRS ?? true)
                    {
                        sb.AppendItem(FMRS, "FMRS");
                    }
                    if (printMask?.FMSR ?? true)
                    {
                        sb.AppendItem(FMSR, "FMSR");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? FMRU;
            public Exception? Name;
            public Exception? FMRS;
            public Exception? FMSR;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FaceMorphItem_FieldIndex enu = (FaceMorphItem_FieldIndex)index;
                switch (enu)
                {
                    case FaceMorphItem_FieldIndex.FMRU:
                        return FMRU;
                    case FaceMorphItem_FieldIndex.Name:
                        return Name;
                    case FaceMorphItem_FieldIndex.FMRS:
                        return FMRS;
                    case FaceMorphItem_FieldIndex.FMSR:
                        return FMSR;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FaceMorphItem_FieldIndex enu = (FaceMorphItem_FieldIndex)index;
                switch (enu)
                {
                    case FaceMorphItem_FieldIndex.FMRU:
                        this.FMRU = ex;
                        break;
                    case FaceMorphItem_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case FaceMorphItem_FieldIndex.FMRS:
                        this.FMRS = ex;
                        break;
                    case FaceMorphItem_FieldIndex.FMSR:
                        this.FMSR = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FaceMorphItem_FieldIndex enu = (FaceMorphItem_FieldIndex)index;
                switch (enu)
                {
                    case FaceMorphItem_FieldIndex.FMRU:
                        this.FMRU = (Exception?)obj;
                        break;
                    case FaceMorphItem_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case FaceMorphItem_FieldIndex.FMRS:
                        this.FMRS = (Exception?)obj;
                        break;
                    case FaceMorphItem_FieldIndex.FMSR:
                        this.FMSR = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (FMRU != null) return true;
                if (Name != null) return true;
                if (FMRS != null) return true;
                if (FMSR != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(FMRU, "FMRU");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(FMRS, "FMRS");
                }
                {
                    sb.AppendItem(FMSR, "FMSR");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FMRU = this.FMRU.Combine(rhs.FMRU);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.FMRS = this.FMRS.Combine(rhs.FMRS);
                ret.FMSR = this.FMSR.Combine(rhs.FMSR);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool FMRU;
            public bool Name;
            public bool FMRS;
            public bool FMSR;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.FMRU = defaultOn;
                this.Name = defaultOn;
                this.FMRS = defaultOn;
                this.FMSR = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((FMRU, null));
                ret.Add((Name, null));
                ret.Add((FMRS, null));
                ret.Add((FMSR, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceMorphItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FaceMorphItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static FaceMorphItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FaceMorphItem();
            ((FaceMorphItemSetterCommon)((IFaceMorphItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FaceMorphItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FaceMorphItemSetterCommon)((IFaceMorphItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FaceMorphItem GetNew()
        {
            return new FaceMorphItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaceMorphItem :
        IFaceMorphItemGetter,
        ILoquiObjectSetter<IFaceMorphItem>,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new String? FMRU { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new String? FMRS { get; set; }
        new Int32? FMSR { get; set; }
    }

    public partial interface IFaceMorphItemGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IFaceMorphItemGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => FaceMorphItem_Registration.Instance;
        String? FMRU { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        String? FMRS { get; }
        Int32? FMSR { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FaceMorphItemMixIn
    {
        public static void Clear(this IFaceMorphItem item)
        {
            ((FaceMorphItemSetterCommon)((IFaceMorphItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FaceMorphItem.Mask<bool> GetEqualsMask(
            this IFaceMorphItemGetter item,
            IFaceMorphItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFaceMorphItemGetter item,
            string? name = null,
            FaceMorphItem.Mask<bool>? printMask = null)
        {
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFaceMorphItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FaceMorphItem.Mask<bool>? printMask = null)
        {
            ((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFaceMorphItemGetter item,
            IFaceMorphItemGetter rhs,
            FaceMorphItem.TranslationMask? equalsMask = null)
        {
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFaceMorphItem lhs,
            IFaceMorphItemGetter rhs)
        {
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFaceMorphItem lhs,
            IFaceMorphItemGetter rhs,
            FaceMorphItem.TranslationMask? copyMask = null)
        {
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFaceMorphItem lhs,
            IFaceMorphItemGetter rhs,
            out FaceMorphItem.ErrorMask errorMask,
            FaceMorphItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FaceMorphItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFaceMorphItem lhs,
            IFaceMorphItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FaceMorphItem DeepCopy(
            this IFaceMorphItemGetter item,
            FaceMorphItem.TranslationMask? copyMask = null)
        {
            return ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FaceMorphItem DeepCopy(
            this IFaceMorphItemGetter item,
            out FaceMorphItem.ErrorMask errorMask,
            FaceMorphItem.TranslationMask? copyMask = null)
        {
            return ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FaceMorphItem DeepCopy(
            this IFaceMorphItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFaceMorphItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FaceMorphItemSetterCommon)((IFaceMorphItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum FaceMorphItem_FieldIndex
    {
        FMRU = 0,
        Name = 1,
        FMRS = 2,
        FMSR = 3,
    }
    #endregion

    #region Registration
    internal partial class FaceMorphItem_Registration : ILoquiRegistration
    {
        public static readonly FaceMorphItem_Registration Instance = new FaceMorphItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(FaceMorphItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FaceMorphItem.ErrorMask);

        public static readonly Type ClassType = typeof(FaceMorphItem);

        public static readonly Type GetterType = typeof(IFaceMorphItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaceMorphItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.FaceMorphItem";

        public const string Name = "FaceMorphItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.FMRU,
                RecordTypes.FMRN,
                RecordTypes.FMRS,
                RecordTypes.FMSR);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FaceMorphItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FaceMorphItemSetterCommon
    {
        public static readonly FaceMorphItemSetterCommon Instance = new FaceMorphItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFaceMorphItem item)
        {
            ClearPartial();
            item.FMRU = default;
            item.Name = default;
            item.FMRS = default;
            item.FMSR = default;
        }
        
        #region Mutagen
        public void RemapLinks(IFaceMorphItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFaceMorphItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: FaceMorphItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class FaceMorphItemCommon
    {
        public static readonly FaceMorphItemCommon Instance = new FaceMorphItemCommon();

        public FaceMorphItem.Mask<bool> GetEqualsMask(
            IFaceMorphItemGetter item,
            IFaceMorphItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FaceMorphItem.Mask<bool>(false);
            ((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFaceMorphItemGetter item,
            IFaceMorphItemGetter rhs,
            FaceMorphItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FMRU = string.Equals(item.FMRU, rhs.FMRU);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.FMRS = string.Equals(item.FMRS, rhs.FMRS);
            ret.FMSR = item.FMSR == rhs.FMSR;
        }
        
        public string Print(
            IFaceMorphItemGetter item,
            string? name = null,
            FaceMorphItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFaceMorphItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FaceMorphItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FaceMorphItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (FaceMorphItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFaceMorphItemGetter item,
            StructuredStringBuilder sb,
            FaceMorphItem.Mask<bool>? printMask = null)
        {
            if ((printMask?.FMRU ?? true)
                && item.FMRU is {} FMRUItem)
            {
                sb.AppendItem(FMRUItem, "FMRU");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.FMRS ?? true)
                && item.FMRS is {} FMRSItem)
            {
                sb.AppendItem(FMRSItem, "FMRS");
            }
            if ((printMask?.FMSR ?? true)
                && item.FMSR is {} FMSRItem)
            {
                sb.AppendItem(FMSRItem, "FMSR");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFaceMorphItemGetter? lhs,
            IFaceMorphItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.FMRU) ?? true))
            {
                if (!string.Equals(lhs.FMRU, rhs.FMRU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.FMRS) ?? true))
            {
                if (!string.Equals(lhs.FMRS, rhs.FMRS)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.FMSR) ?? true))
            {
                if (lhs.FMSR != rhs.FMSR) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFaceMorphItemGetter item)
        {
            var hash = new HashCode();
            if (item.FMRU is {} FMRUitem)
            {
                hash.Add(FMRUitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.FMRS is {} FMRSitem)
            {
                hash.Add(FMRSitem);
            }
            if (item.FMSR is {} FMSRitem)
            {
                hash.Add(FMSRitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FaceMorphItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFaceMorphItemGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FaceMorphItemSetterTranslationCommon
    {
        public static readonly FaceMorphItemSetterTranslationCommon Instance = new FaceMorphItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFaceMorphItem item,
            IFaceMorphItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.FMRU) ?? true))
            {
                item.FMRU = rhs.FMRU;
            }
            if ((copyMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.FMRS) ?? true))
            {
                item.FMRS = rhs.FMRS;
            }
            if ((copyMask?.GetShouldTranslate((int)FaceMorphItem_FieldIndex.FMSR) ?? true))
            {
                item.FMSR = rhs.FMSR;
            }
        }
        
        #endregion
        
        public FaceMorphItem DeepCopy(
            IFaceMorphItemGetter item,
            FaceMorphItem.TranslationMask? copyMask = null)
        {
            FaceMorphItem ret = (FaceMorphItem)((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).GetNew();
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FaceMorphItem DeepCopy(
            IFaceMorphItemGetter item,
            out FaceMorphItem.ErrorMask errorMask,
            FaceMorphItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FaceMorphItem ret = (FaceMorphItem)((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).GetNew();
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FaceMorphItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FaceMorphItem DeepCopy(
            IFaceMorphItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FaceMorphItem ret = (FaceMorphItem)((FaceMorphItemCommon)((IFaceMorphItemGetter)item).CommonInstance()!).GetNew();
            ((FaceMorphItemSetterTranslationCommon)((IFaceMorphItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class FaceMorphItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceMorphItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => FaceMorphItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceMorphItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FaceMorphItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceMorphItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceMorphItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFaceMorphItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFaceMorphItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FaceMorphItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly FaceMorphItemBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFaceMorphItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FMRU,
                header: translationParams.ConvertToCustom(RecordTypes.FMRU),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FMRN),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FMRS,
                header: translationParams.ConvertToCustom(RecordTypes.FMRS),
                binaryType: StringBinaryType.NullTerminate);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FMSR,
                header: translationParams.ConvertToCustom(RecordTypes.FMSR));
        }

        public void Write(
            MutagenWriter writer,
            IFaceMorphItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFaceMorphItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FaceMorphItemBinaryCreateTranslation
    {
        public static readonly FaceMorphItemBinaryCreateTranslation Instance = new FaceMorphItemBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFaceMorphItem item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FMRU:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.FMRU, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FMRU = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)FaceMorphItem_FieldIndex.FMRU;
                }
                case RecordTypeInts.FMRN:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)FaceMorphItem_FieldIndex.Name;
                }
                case RecordTypeInts.FMRS:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.FMRS, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FMRS = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)FaceMorphItem_FieldIndex.FMRS;
                }
                case RecordTypeInts.FMSR:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.FMSR, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FMSR = frame.ReadInt32();
                    return (int)FaceMorphItem_FieldIndex.FMSR;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FaceMorphItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFaceMorphItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FaceMorphItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FaceMorphItemBinaryOverlay :
        PluginBinaryOverlay,
        IFaceMorphItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceMorphItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => FaceMorphItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceMorphItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceMorphItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceMorphItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFaceMorphItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFaceMorphItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceMorphItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FaceMorphItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region FMRU
        private int? _FMRULocation;
        public String? FMRU => _FMRULocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FMRULocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region FMRS
        private int? _FMRSLocation;
        public String? FMRS => _FMRSLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FMRSLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region FMSR
        private int? _FMSRLocation;
        public Int32? FMSR => _FMSRLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FMSRLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FaceMorphItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFaceMorphItemGetter FaceMorphItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FaceMorphItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFaceMorphItemGetter FaceMorphItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FaceMorphItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FMRU:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.FMRU, translationParams)) return ParseResult.Stop;
                    _FMRULocation = (stream.Position - offset);
                    return (int)FaceMorphItem_FieldIndex.FMRU;
                }
                case RecordTypeInts.FMRN:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)FaceMorphItem_FieldIndex.Name;
                }
                case RecordTypeInts.FMRS:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.FMRS, translationParams)) return ParseResult.Stop;
                    _FMRSLocation = (stream.Position - offset);
                    return (int)FaceMorphItem_FieldIndex.FMRS;
                }
                case RecordTypeInts.FMSR:
                {
                    if (lastParsed.ShortCircuit((int)FaceMorphItem_FieldIndex.FMSR, translationParams)) return ParseResult.Stop;
                    _FMSRLocation = (stream.Position - offset);
                    return (int)FaceMorphItem_FieldIndex.FMSR;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FaceMorphItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFaceMorphItemGetter rhs) return false;
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFaceMorphItemGetter? obj)
        {
            return ((FaceMorphItemCommon)((IFaceMorphItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FaceMorphItemCommon)((IFaceMorphItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

