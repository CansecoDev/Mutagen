/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Assets;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SkeletalModel :
        Model,
        IEquatable<ISkeletalModelGetter>,
        ILoquiObjectSetter<SkeletalModel>,
        ISkeletalModel
    {
        #region Ctor
        public SkeletalModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Rig
        public AssetLink<StarfieldRigAssetType>? Rig { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<StarfieldRigAssetType>? ISkeletalModelGetter.Rig => this.Rig;
        #endregion
        #region AnimationText
        public AssetLink<StarfieldAnimationTextAssetType>? AnimationText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<StarfieldAnimationTextAssetType>? ISkeletalModelGetter.AnimationText => this.AnimationText;
        #endregion
        #region DNAM
        public String? DNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkeletalModelGetter.DNAM => this.DNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkeletalModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISkeletalModelGetter rhs) return false;
            return ((SkeletalModelCommon)((ISkeletalModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkeletalModelGetter? obj)
        {
            return ((SkeletalModelCommon)((ISkeletalModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkeletalModelCommon)((ISkeletalModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Model.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Rig = initialValue;
                this.AnimationText = initialValue;
                this.DNAM = initialValue;
            }

            public Mask(
                TItem File,
                TItem MOLM,
                TItem FLLD,
                TItem XFLG,
                TItem Rig,
                TItem AnimationText,
                TItem DNAM)
            : base(
                File: File,
                MOLM: MOLM,
                FLLD: FLLD,
                XFLG: XFLG)
            {
                this.Rig = Rig;
                this.AnimationText = AnimationText;
                this.DNAM = DNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Rig;
            public TItem AnimationText;
            public TItem DNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Rig, rhs.Rig)) return false;
                if (!object.Equals(this.AnimationText, rhs.AnimationText)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Rig);
                hash.Add(this.AnimationText);
                hash.Add(this.DNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Rig)) return false;
                if (!eval(this.AnimationText)) return false;
                if (!eval(this.DNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Rig)) return true;
                if (eval(this.AnimationText)) return true;
                if (eval(this.DNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkeletalModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Rig = eval(this.Rig);
                obj.AnimationText = eval(this.AnimationText);
                obj.DNAM = eval(this.DNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SkeletalModel.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SkeletalModel.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SkeletalModel.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Rig ?? true)
                    {
                        sb.AppendItem(Rig, "Rig");
                    }
                    if (printMask?.AnimationText ?? true)
                    {
                        sb.AppendItem(AnimationText, "AnimationText");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Model.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Rig;
            public Exception? AnimationText;
            public Exception? DNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SkeletalModel_FieldIndex enu = (SkeletalModel_FieldIndex)index;
                switch (enu)
                {
                    case SkeletalModel_FieldIndex.Rig:
                        return Rig;
                    case SkeletalModel_FieldIndex.AnimationText:
                        return AnimationText;
                    case SkeletalModel_FieldIndex.DNAM:
                        return DNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SkeletalModel_FieldIndex enu = (SkeletalModel_FieldIndex)index;
                switch (enu)
                {
                    case SkeletalModel_FieldIndex.Rig:
                        this.Rig = ex;
                        break;
                    case SkeletalModel_FieldIndex.AnimationText:
                        this.AnimationText = ex;
                        break;
                    case SkeletalModel_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SkeletalModel_FieldIndex enu = (SkeletalModel_FieldIndex)index;
                switch (enu)
                {
                    case SkeletalModel_FieldIndex.Rig:
                        this.Rig = (Exception?)obj;
                        break;
                    case SkeletalModel_FieldIndex.AnimationText:
                        this.AnimationText = (Exception?)obj;
                        break;
                    case SkeletalModel_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Rig != null) return true;
                if (AnimationText != null) return true;
                if (DNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Rig, "Rig");
                }
                {
                    sb.AppendItem(AnimationText, "AnimationText");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Rig = this.Rig.Combine(rhs.Rig);
                ret.AnimationText = this.AnimationText.Combine(rhs.AnimationText);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Model.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Rig;
            public bool AnimationText;
            public bool DNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Rig = defaultOn;
                this.AnimationText = defaultOn;
                this.DNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Rig, null));
                ret.Add((AnimationText, null));
                ret.Add((DNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SkeletalModelCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SkeletalModelSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SkeletalModelSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SkeletalModelSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkeletalModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SkeletalModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SkeletalModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SkeletalModel();
            ((SkeletalModelSetterCommon)((ISkeletalModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SkeletalModel item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SkeletalModelSetterCommon)((ISkeletalModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SkeletalModel GetNew()
        {
            return new SkeletalModel();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkeletalModel :
        IAssetLinkContainer,
        ILoquiObjectSetter<ISkeletalModel>,
        IModel,
        ISkeletalModelGetter
    {
        new AssetLink<StarfieldRigAssetType>? Rig { get; set; }
        new AssetLink<StarfieldAnimationTextAssetType>? AnimationText { get; set; }
        new String? DNAM { get; set; }
    }

    public partial interface ISkeletalModelGetter :
        IModelGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        ILoquiObject<ISkeletalModelGetter>
    {
        static new ILoquiRegistration StaticRegistration => SkeletalModel_Registration.Instance;
        AssetLinkGetter<StarfieldRigAssetType>? Rig { get; }
        AssetLinkGetter<StarfieldAnimationTextAssetType>? AnimationText { get; }
        String? DNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SkeletalModelMixIn
    {
        public static void Clear(this ISkeletalModel item)
        {
            ((SkeletalModelSetterCommon)((ISkeletalModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkeletalModel.Mask<bool> GetEqualsMask(
            this ISkeletalModelGetter item,
            ISkeletalModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISkeletalModelGetter item,
            string? name = null,
            SkeletalModel.Mask<bool>? printMask = null)
        {
            return ((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISkeletalModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SkeletalModel.Mask<bool>? printMask = null)
        {
            ((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISkeletalModelGetter item,
            ISkeletalModelGetter rhs,
            SkeletalModel.TranslationMask? equalsMask = null)
        {
            return ((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISkeletalModel lhs,
            ISkeletalModelGetter rhs,
            out SkeletalModel.ErrorMask errorMask,
            SkeletalModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SkeletalModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkeletalModel lhs,
            ISkeletalModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SkeletalModel DeepCopy(
            this ISkeletalModelGetter item,
            SkeletalModel.TranslationMask? copyMask = null)
        {
            return ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkeletalModel DeepCopy(
            this ISkeletalModelGetter item,
            out SkeletalModel.ErrorMask errorMask,
            SkeletalModel.TranslationMask? copyMask = null)
        {
            return ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkeletalModel DeepCopy(
            this ISkeletalModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISkeletalModel item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SkeletalModelSetterCommon)((ISkeletalModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SkeletalModel_FieldIndex
    {
        File = 0,
        MOLM = 1,
        FLLD = 2,
        XFLG = 3,
        Rig = 4,
        AnimationText = 5,
        DNAM = 6,
    }
    #endregion

    #region Registration
    internal partial class SkeletalModel_Registration : ILoquiRegistration
    {
        public static readonly SkeletalModel_Registration Instance = new SkeletalModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Starfield.ProtocolKey,
            msgID: 729,
            version: 0);

        public const string GUID = "cac6a709-a4cd-463f-b85f-203ac7a58097";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(SkeletalModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkeletalModel.ErrorMask);

        public static readonly Type ClassType = typeof(SkeletalModel);

        public static readonly Type GetterType = typeof(ISkeletalModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkeletalModel);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.SkeletalModel";

        public const string Name = "SkeletalModel";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ANAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ANAM);
            var all = RecordCollection.Factory(
                RecordTypes.ANAM,
                RecordTypes.NAM5,
                RecordTypes.NAM6,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(allRecordTypes: all, triggeringRecordTypes: triggers);
        });
        public static RecordTypeConverter BaseConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.ANAM));
        public static readonly Type BinaryWriteTranslation = typeof(SkeletalModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SkeletalModelSetterCommon : ModelSetterCommon
    {
        public new static readonly SkeletalModelSetterCommon Instance = new SkeletalModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkeletalModel item)
        {
            ClearPartial();
            item.Rig = default;
            item.AnimationText = default;
            item.DNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IModel item)
        {
            Clear(item: (ISkeletalModel)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISkeletalModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISkeletalModel obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Rig != null)
            {
                yield return obj.Rig;
            }
            if (obj.AnimationText != null)
            {
                yield return obj.AnimationText;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISkeletalModel obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.Rig?.Relink(mapping);
                obj.AnimationText?.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISkeletalModel item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: SkeletalModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IModel item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SkeletalModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SkeletalModelCommon : ModelCommon
    {
        public new static readonly SkeletalModelCommon Instance = new SkeletalModelCommon();

        public SkeletalModel.Mask<bool> GetEqualsMask(
            ISkeletalModelGetter item,
            ISkeletalModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkeletalModel.Mask<bool>(false);
            ((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkeletalModelGetter item,
            ISkeletalModelGetter rhs,
            SkeletalModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Rig = object.Equals(item.Rig, rhs.Rig);
            ret.AnimationText = object.Equals(item.AnimationText, rhs.AnimationText);
            ret.DNAM = string.Equals(item.DNAM, rhs.DNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISkeletalModelGetter item,
            string? name = null,
            SkeletalModel.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISkeletalModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SkeletalModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SkeletalModel =>");
            }
            else
            {
                sb.AppendLine($"{name} (SkeletalModel) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISkeletalModelGetter item,
            StructuredStringBuilder sb,
            SkeletalModel.Mask<bool>? printMask = null)
        {
            ModelCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Rig ?? true)
                && item.Rig is {} RigItem)
            {
                sb.AppendItem(RigItem, "Rig");
            }
            if ((printMask?.AnimationText ?? true)
                && item.AnimationText is {} AnimationTextItem)
            {
                sb.AppendItem(AnimationTextItem, "AnimationText");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendItem(DNAMItem, "DNAM");
            }
        }
        
        public static SkeletalModel_FieldIndex ConvertFieldIndex(Model_FieldIndex index)
        {
            switch (index)
            {
                case Model_FieldIndex.File:
                    return (SkeletalModel_FieldIndex)((int)index);
                case Model_FieldIndex.MOLM:
                    return (SkeletalModel_FieldIndex)((int)index);
                case Model_FieldIndex.FLLD:
                    return (SkeletalModel_FieldIndex)((int)index);
                case Model_FieldIndex.XFLG:
                    return (SkeletalModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkeletalModelGetter? lhs,
            ISkeletalModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IModelGetter)lhs, (IModelGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SkeletalModel_FieldIndex.Rig) ?? true))
            {
                if (!object.Equals(lhs.Rig, rhs.Rig)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkeletalModel_FieldIndex.AnimationText) ?? true))
            {
                if (!object.Equals(lhs.AnimationText, rhs.AnimationText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkeletalModel_FieldIndex.DNAM) ?? true))
            {
                if (!string.Equals(lhs.DNAM, rhs.DNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IModelGetter? lhs,
            IModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISkeletalModelGetter?)lhs,
                rhs: rhs as ISkeletalModelGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISkeletalModelGetter item)
        {
            var hash = new HashCode();
            if (item.Rig is {} Rigitem)
            {
                hash.Add(Rigitem);
            }
            if (item.AnimationText is {} AnimationTextitem)
            {
                hash.Add(AnimationTextitem);
            }
            if (item.DNAM is {} DNAMitem)
            {
                hash.Add(DNAMitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IModelGetter item)
        {
            return GetHashCode(item: (ISkeletalModelGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SkeletalModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISkeletalModelGetter obj)
        {
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISkeletalModelGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.Rig != null)
                {
                    yield return obj.Rig;
                }
                if (obj.AnimationText != null)
                {
                    yield return obj.AnimationText;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SkeletalModelSetterTranslationCommon : ModelSetterTranslationCommon
    {
        public new static readonly SkeletalModelSetterTranslationCommon Instance = new SkeletalModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISkeletalModel item,
            ISkeletalModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IModel)item,
                (IModelGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            item.Rig = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.Rig, rhs.Rig);
            item.AnimationText = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.AnimationText, rhs.AnimationText);
            if ((copyMask?.GetShouldTranslate((int)SkeletalModel_FieldIndex.DNAM) ?? true))
            {
                item.DNAM = rhs.DNAM;
            }
        }
        
        
        public override void DeepCopyIn(
            IModel item,
            IModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISkeletalModel)item,
                rhs: (ISkeletalModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SkeletalModel DeepCopy(
            ISkeletalModelGetter item,
            SkeletalModel.TranslationMask? copyMask = null)
        {
            SkeletalModel ret = (SkeletalModel)((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).GetNew();
            ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SkeletalModel DeepCopy(
            ISkeletalModelGetter item,
            out SkeletalModel.ErrorMask errorMask,
            SkeletalModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SkeletalModel ret = (SkeletalModel)((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).GetNew();
            ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SkeletalModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SkeletalModel DeepCopy(
            ISkeletalModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkeletalModel ret = (SkeletalModel)((SkeletalModelCommon)((ISkeletalModelGetter)item).CommonInstance()!).GetNew();
            ((SkeletalModelSetterTranslationCommon)((ISkeletalModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SkeletalModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkeletalModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SkeletalModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkeletalModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SkeletalModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkeletalModelSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SkeletalModelBinaryWriteTranslation :
        ModelBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SkeletalModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISkeletalModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ModelBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams.Combine(SkeletalModel_Registration.BaseConverter));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Rig?.RawPath,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationText?.RawPath,
                header: translationParams.ConvertToCustom(RecordTypes.NAM6),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            ISkeletalModelGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISkeletalModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IModelGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISkeletalModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SkeletalModelBinaryCreateTranslation : ModelBinaryCreateTranslation
    {
        public new static readonly SkeletalModelBinaryCreateTranslation Instance = new SkeletalModelBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ISkeletalModel item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Rig = AssetLinkBinaryTranslation.Instance.Parse<StarfieldRigAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)SkeletalModel_FieldIndex.Rig;
                }
                case RecordTypeInts.NAM6:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationText = AssetLinkBinaryTranslation.Instance.Parse<StarfieldAnimationTextAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)SkeletalModel_FieldIndex.AnimationText;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)SkeletalModel_FieldIndex.DNAM;
                }
                default:
                    return ModelBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.With(SkeletalModel_Registration.BaseConverter));
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SkeletalModelBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SkeletalModelBinaryOverlay :
        ModelBinaryOverlay,
        ISkeletalModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkeletalModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SkeletalModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkeletalModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkeletalModelSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SkeletalModelCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkeletalModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SkeletalModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Rig
        private int? _RigLocation;
        public AssetLinkGetter<StarfieldRigAssetType>? Rig => _RigLocation.HasValue ? new AssetLinkGetter<StarfieldRigAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RigLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : null;
        #endregion
        #region AnimationText
        private int? _AnimationTextLocation;
        public AssetLinkGetter<StarfieldAnimationTextAssetType>? AnimationText => _AnimationTextLocation.HasValue ? new AssetLinkGetter<StarfieldAnimationTextAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AnimationTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : null;
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public String? DNAM => _DNAMLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SkeletalModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISkeletalModelGetter SkeletalModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SkeletalModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISkeletalModelGetter SkeletalModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SkeletalModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAM5:
                {
                    _RigLocation = (stream.Position - offset);
                    return (int)SkeletalModel_FieldIndex.Rig;
                }
                case RecordTypeInts.NAM6:
                {
                    _AnimationTextLocation = (stream.Position - offset);
                    return (int)SkeletalModel_FieldIndex.AnimationText;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)SkeletalModel_FieldIndex.DNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: SkeletalModel_Registration.BaseConverter);
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkeletalModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISkeletalModelGetter rhs) return false;
            return ((SkeletalModelCommon)((ISkeletalModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkeletalModelGetter? obj)
        {
            return ((SkeletalModelCommon)((ISkeletalModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkeletalModelCommon)((ISkeletalModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

