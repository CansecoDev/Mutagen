/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StarfieldMod :
        IEquatable<IStarfieldModGetter>,
        ILoquiObjectSetter<StarfieldMod>,
        IStarfieldMod
    {
        #region Ctor
        protected StarfieldMod()
        {
            _GameSettings_Object = new StarfieldGroup<GameSetting>(this);
            _Keywords_Object = new StarfieldGroup<Keyword>(this);
            _FFKW_Object = new StarfieldGroup<FFKW>(this);
            _LocationReferenceTypes_Object = new StarfieldGroup<LocationReferenceType>(this);
            _Npcs_Object = new StarfieldGroup<Npc>(this);
            _Races_Object = new StarfieldGroup<Race>(this);
            _Weapons_Object = new StarfieldGroup<Weapon>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly StarfieldModHeader _ModHeader_Object = new StarfieldModHeader();
        public StarfieldModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldModHeaderGetter IStarfieldModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GameSetting> _GameSettings_Object;
        public StarfieldGroup<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGameSettingGetter> IStarfieldModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Keyword> _Keywords_Object;
        public StarfieldGroup<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IKeywordGetter> IStarfieldModGetter.Keywords => _Keywords_Object;
        #endregion
        #region FFKW
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FFKW> _FFKW_Object;
        public StarfieldGroup<FFKW> FFKW => _FFKW_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFFKWGetter> IStarfieldModGetter.FFKW => _FFKW_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LocationReferenceType> _LocationReferenceTypes_Object;
        public StarfieldGroup<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILocationReferenceTypeGetter> IStarfieldModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Npc> _Npcs_Object;
        public StarfieldGroup<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<INpcGetter> IStarfieldModGetter.Npcs => _Npcs_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Race> _Races_Object;
        public StarfieldGroup<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IRaceGetter> IStarfieldModGetter.Races => _Races_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Weapon> _Weapons_Object;
        public StarfieldGroup<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWeaponGetter> IStarfieldModGetter.Weapons => _Weapons_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModGetter rhs) return false;
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModGetter? obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>(initialValue, new StarfieldModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FFKW = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem FFKW,
                TItem LocationReferenceTypes,
                TItem Npcs,
                TItem Races,
                TItem Weapons)
            {
                this.ModHeader = new MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>(ModHeader, new StarfieldModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GameSettings, new StarfieldGroup.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Keywords, new StarfieldGroup.Mask<TItem>(Keywords));
                this.FFKW = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FFKW, new StarfieldGroup.Mask<TItem>(FFKW));
                this.LocationReferenceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LocationReferenceTypes, new StarfieldGroup.Mask<TItem>(LocationReferenceTypes));
                this.Npcs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Npcs, new StarfieldGroup.Mask<TItem>(Npcs));
                this.Races = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Races, new StarfieldGroup.Mask<TItem>(Races));
                this.Weapons = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Weapons, new StarfieldGroup.Mask<TItem>(Weapons));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FFKW { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Weapons { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.FFKW, rhs.FFKW)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.FFKW);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Npcs);
                hash.Add(this.Races);
                hash.Add(this.Weapons);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (FFKW != null)
                {
                    if (!eval(this.FFKW.Overall)) return false;
                    if (this.FFKW.Specific != null && !this.FFKW.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (FFKW != null)
                {
                    if (eval(this.FFKW.Overall)) return true;
                    if (this.FFKW.Specific != null && this.FFKW.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StarfieldMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, StarfieldModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.FFKW = this.FFKW == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FFKW.Overall), this.FFKW.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StarfieldMod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StarfieldMod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StarfieldMod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.Print(sb);
                    }
                    if (printMask?.FFKW?.Overall ?? true)
                    {
                        FFKW?.Print(sb);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.Print(sb);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.Print(sb);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.Print(sb);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, StarfieldModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKW.ErrorMask>?>? FFKW;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case StarfieldMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case StarfieldMod_FieldIndex.Keywords:
                        return Keywords;
                    case StarfieldMod_FieldIndex.FFKW:
                        return FFKW;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case StarfieldMod_FieldIndex.Npcs:
                        return Npcs;
                    case StarfieldMod_FieldIndex.Races:
                        return Races;
                    case StarfieldMod_FieldIndex.Weapons:
                        return Weapons;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, StarfieldModHeader.ErrorMask?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FFKW:
                        this.FFKW = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKW.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, StarfieldModHeader.ErrorMask?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FFKW:
                        this.FFKW = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKW.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (FFKW != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Npcs != null) return true;
                if (Races != null) return true;
                if (Weapons != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                Keywords?.Print(sb);
                FFKW?.Print(sb);
                LocationReferenceTypes?.Print(sb);
                Npcs?.Print(sb);
                Races?.Print(sb);
                Weapons?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.FFKW = this.FFKW.Combine(rhs.FFKW, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public StarfieldModHeader.TranslationMask? ModHeader;
            public StarfieldGroup.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public StarfieldGroup.TranslationMask<Keyword.TranslationMask>? Keywords;
            public StarfieldGroup.TranslationMask<FFKW.TranslationMask>? FFKW;
            public StarfieldGroup.TranslationMask<LocationReferenceType.TranslationMask>? LocationReferenceTypes;
            public StarfieldGroup.TranslationMask<Npc.TranslationMask>? Npcs;
            public StarfieldGroup.TranslationMask<Race.TranslationMask>? Races;
            public StarfieldGroup.TranslationMask<Weapon.TranslationMask>? Weapons;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Keywords != null ? Keywords.OnOverall : DefaultOn, Keywords?.GetCrystal()));
                ret.Add((FFKW != null ? FFKW.OnOverall : DefaultOn, FFKW?.GetCrystal()));
                ret.Add((LocationReferenceTypes != null ? LocationReferenceTypes.OnOverall : DefaultOn, LocationReferenceTypes?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override GameRelease GameRelease => GameRelease.Starfield;
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem) => this.WriteToBinary(path, importMask: null, param: param, fileSystem: fileSystem);
        void IModGetter.WriteToBinaryParallel(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(path, param, fileSystem: fileSystem, parallelParam: parallelWriteParams);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(Stream stream, BinaryWriteParameters? param, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(stream, param, parallelParam: parallelWriteParams);
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => StarfieldModMixIn.GetEqualsMask(this, (IStarfieldModGetter)rhs, include);
        public override bool CanUseLocalization => true;
        public override bool UsingLocalization
        {
            get => this.ModHeader.Flags.HasFlag(StarfieldModHeader.HeaderFlag.Localized);
            set => this.ModHeader.Flags = this.ModHeader.Flags.SetFlag(StarfieldModHeader.HeaderFlag.Localized, value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        public StarfieldMod(ModKey modKey)
            : base(modKey)
        {
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID();
            _GameSettings_Object = new StarfieldGroup<GameSetting>(this);
            _Keywords_Object = new StarfieldGroup<Keyword>(this);
            _FFKW_Object = new StarfieldGroup<FFKW>(this);
            _LocationReferenceTypes_Object = new StarfieldGroup<LocationReferenceType>(this);
            _Npcs_Object = new StarfieldGroup<Npc>(this);
            _Races_Object = new StarfieldGroup<Race>(this);
            _Weapons_Object = new StarfieldGroup<Weapon>(this);
            CustomCtor();
        }
        public void AddRecords(
            StarfieldMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.FFKW ?? true)
            {
                this.FFKW.RecordCache.Set(rhsMod.FFKW.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = GetRecordCount();
        }

        public uint GetRecordCount()
        {
            uint count = (uint)this.EnumerateMajorRecords().Count();
            count += GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += Keywords.RecordCache.Count > 0 ? 1 : default(uint);
            count += FFKW.RecordCache.Count > 0 ? 1 : default(uint);
            count += LocationReferenceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount((customCount) => count += customCount);
            return count;
        }

        partial void GetCustomRecordCount(Action<uint> setter);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StarfieldModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarfieldModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => StarfieldModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => StarfieldModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => StarfieldModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static StarfieldMod CreateFromBinary(
            ModPath path,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true,
            IFileSystem? fileSystem = null)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem));
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = path.ModKey;
                    frame.MetaData.Absorb(stringsParam);
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                    }
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static StarfieldMod CreateFromBinary(
            ModPath path,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true,
            IFileSystem? fileSystem = null)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem));
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = path.ModKey;
                    frame.MetaData.Absorb(stringsParam);
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                    }
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static StarfieldMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordTypeInfoCacheReader infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = modKey;
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        public static StarfieldMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = modKey;
                    return CreateFromBinary(
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        #endregion

        public static IStarfieldModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            StringsReadParameters? stringsParam = null,
            IFileSystem? fileSystem = null)
        {
            return StarfieldModBinaryOverlay.StarfieldModFactory(
                path: path,
                stringsParam: stringsParam,
                fileSystem: fileSystem);
        }

        public static IStarfieldModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            ModKey modKey)
        {
            return StarfieldModBinaryOverlay.StarfieldModFactory(
                stream: new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield),
                modKey: modKey,
                shouldDispose: false);
        }

        public static StarfieldMod CreateFromBinary(
            MutagenFrame frame,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new StarfieldMod(modKey: frame.MetaData.ModKey);
                ((StarfieldModSetterCommon)((IStarfieldModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, frame.MetaData.ModKey);
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StarfieldMod GetNew()
        {
            return new StarfieldMod();
        }

    }
    #endregion

    #region Interface
    public partial interface IStarfieldMod :
        IAssetLinkContainer,
        IContextMod<IStarfieldMod, IStarfieldModGetter>,
        IFormLinkContainer,
        ILoquiObjectSetter<IStarfieldMod>,
        IMajorRecordEnumerable,
        IMod,
        IStarfieldModGetter
    {
        new StarfieldModHeader ModHeader { get; }
        new StarfieldGroup<GameSetting> GameSettings { get; }
        new StarfieldGroup<Keyword> Keywords { get; }
        new StarfieldGroup<FFKW> FFKW { get; }
        new StarfieldGroup<LocationReferenceType> LocationReferenceTypes { get; }
        new StarfieldGroup<Npc> Npcs { get; }
        new StarfieldGroup<Race> Races { get; }
        new StarfieldGroup<Weapon> Weapons { get; }
    }

    public partial interface IStarfieldModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<IStarfieldMod, IStarfieldModGetter>,
        IFormLinkContainerGetter,
        ILoquiObject<IStarfieldModGetter>,
        IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        IStarfieldModHeaderGetter ModHeader { get; }
        IStarfieldGroupGetter<IGameSettingGetter> GameSettings { get; }
        IStarfieldGroupGetter<IKeywordGetter> Keywords { get; }
        IStarfieldGroupGetter<IFFKWGetter> FFKW { get; }
        IStarfieldGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IStarfieldGroupGetter<INpcGetter> Npcs { get; }
        IStarfieldGroupGetter<IRaceGetter> Races { get; }
        IStarfieldGroupGetter<IWeaponGetter> Weapons { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StarfieldModMixIn
    {
        public static void Clear(this IStarfieldMod item)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StarfieldMod.Mask<bool> GetEqualsMask(
            this IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStarfieldModGetter item,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStarfieldModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            StarfieldMod.TranslationMask? equalsMask = null)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StarfieldMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this IStarfieldModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this IStarfieldModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this IStarfieldMod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this IStarfieldMod obj,
            Type type)
        {
            return (IGroup?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static void WriteToBinaryParallel(
            this IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            ParallelWriteParameters? parallelParam = null)
        {
            StarfieldModCommon.WriteParallel(
                item: item,
                stream: stream,
                parallelParam: parallelParam ?? ParallelWriteParameters.Default,
                param: param ?? BinaryWriteParameters.Default,
                modKey: item.ModKey);
        }

        public static void WriteToBinaryParallel(
            this IStarfieldModGetter item,
            string path,
            BinaryWriteParameters? param = null,
            ParallelWriteParameters? parallelParam = null,
            IFileSystem? fileSystem = null)
        {
            param ??= BinaryWriteParameters.Default;
            parallelParam ??= ParallelWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param.StringsWriter ??= Enums.HasFlag((int)item.ModHeader.Flags, (int)ModHeaderCommonFlag.Localized) ? new StringsWriter(GameRelease.Starfield, modKey, Path.Combine(Path.GetDirectoryName(path)!, "Strings"), MutagenEncodingProvider.Instance) : null;
            bool disposeStrings = param.StringsWriter != null;
            using (var stream = fileSystem.GetOrDefault().FileStream.Create(path, FileMode.Create, FileAccess.Write))
            {
                StarfieldModCommon.WriteParallel(
                    item: item,
                    stream: stream,
                    parallelParam: parallelParam,
                    param: param,
                    modKey: modKey);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IStarfieldModGetter obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IStarfieldModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IStarfieldModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IStarfieldMod obj)
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IStarfieldMod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IStarfieldMod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            HashSet<FormKey> keys)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IStarfieldModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IStarfieldMod, IStarfieldModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this IStarfieldModGetter obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this IStarfieldModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStarfieldMod item,
            MutagenFrame frame,
            GroupMask? importMask = null)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this IStarfieldMod item,
            ModPath path,
            GroupMask? importMask = null,
            StringsReadParameters? stringsParam = null,
            bool parallel = true,
            IFileSystem? fileSystem = null)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem));
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = path.ModKey;
                    frame.MetaData.Absorb(stringsParam);
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                    }
                    CopyInFromBinary(
                        item: item,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static void CopyInFromBinary(
            this IStarfieldMod item,
            Stream stream,
            ModKey modKey,
            RecordTypeInfoCacheReader infoCache,
            GroupMask? importMask = null,
            bool parallel = true)
        {
            try
            {
                using (var reader = new MutagenBinaryReadStream(stream, modKey, GameRelease.Starfield))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    frame.MetaData.Parallel = parallel;
                    frame.MetaData.ModKey = modKey;
                    CopyInFromBinary(
                        item: item,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StarfieldMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        FFKW = 3,
        LocationReferenceTypes = 4,
        Npcs = 5,
        Races = 6,
        Weapons = 7,
    }
    #endregion

    #region Registration
    internal partial class StarfieldMod_Registration : ILoquiRegistration
    {
        public static readonly StarfieldMod_Registration Instance = new StarfieldMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Starfield.ProtocolKey,
            msgID: 66,
            version: 0);

        public const string GUID = "9dcb1a8f-db0a-44bd-9a30-9427a9350e7a";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(StarfieldMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StarfieldMod.ErrorMask);

        public static readonly Type ClassType = typeof(StarfieldMod);

        public static readonly Type GetterType = typeof(IStarfieldModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStarfieldMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StarfieldMod";

        public const string Name = "StarfieldMod";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(StarfieldModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StarfieldModSetterCommon
    {
        public static readonly StarfieldModSetterCommon Instance = new StarfieldModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStarfieldMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.FFKW.Clear();
            item.LocationReferenceTypes.Clear();
            item.Npcs.Clear();
            item.Races.Clear();
            item.Weapons.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IStarfieldMod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ModHeader.RemapLinks(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IStarfieldMod obj)
        {
            foreach (var item in StarfieldModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IStarfieldMod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IStarfieldMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in StarfieldModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IStarfieldMod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Keywords.Remove(keys);
            obj.FFKW.Remove(keys);
            obj.LocationReferenceTypes.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.Races.Remove(keys);
            obj.Weapons.Remove(keys);
        }
        
        public void Remove(
            IStarfieldMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                case "GameSettingBool":
                case "IGameSettingBoolGetter":
                case "IGameSettingBool":
                case "IGameSettingBoolInternal":
                case "GameSettingUInt":
                case "IGameSettingUIntGetter":
                case "IGameSettingUInt":
                case "IGameSettingUIntInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    obj.Keywords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FFKW":
                case "IFFKWGetter":
                case "IFFKW":
                case "IFFKWInternal":
                    obj.FFKW.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    obj.LocationReferenceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    Remove(obj, keys, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILocationRecord":
                case "ILocationRecordGetter":
                    Remove(obj, keys, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IStarfieldMod obj)
        {
            {
                foreach (var item in obj.Weapons.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        private static partial void RemapInferredAssetLinks(
            IStarfieldMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            AssetLinkQuery queryCategories);
        
        public void RemapAssetLinks(
            IStarfieldMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            RemapInferredAssetLinks(obj, mapping, queryCategories);
            obj.Weapons.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStarfieldMod item,
            MutagenFrame frame,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: StarfieldModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StarfieldModCommon
    {
        public static readonly StarfieldModCommon Instance = new StarfieldModCommon();

        public StarfieldMod.Mask<bool> GetEqualsMask(
            IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StarfieldMod.Mask<bool>(false);
            ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            StarfieldMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.FFKW = MaskItemExt.Factory(item.FFKW.GetEqualsMask(rhs.FFKW, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
        }
        
        public string Print(
            IStarfieldModGetter item,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStarfieldModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StarfieldMod =>");
            }
            else
            {
                sb.AppendLine($"{name} (StarfieldMod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStarfieldModGetter item,
            StructuredStringBuilder sb,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.Print(sb, "Keywords");
            }
            if (printMask?.FFKW?.Overall ?? true)
            {
                item.FFKW?.Print(sb, "FFKW");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.Print(sb, "LocationReferenceTypes");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.Print(sb, "Npcs");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.Print(sb, "Races");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.Print(sb, "Weapons");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStarfieldModGetter? lhs,
            IStarfieldModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keywords) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keywords, rhs.Keywords, out var lhsKeywords, out var rhsKeywords, out var isKeywordsEqual))
                {
                    if (!object.Equals(lhsKeywords, rhsKeywords)) return false;
                }
                else if (!isKeywordsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FFKW) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FFKW, rhs.FFKW, out var lhsFFKW, out var rhsFFKW, out var isFFKWEqual))
                {
                    if (!object.Equals(lhsFFKW, rhsFFKW)) return false;
                }
                else if (!isFFKWEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes, out var lhsLocationReferenceTypes, out var rhsLocationReferenceTypes, out var isLocationReferenceTypesEqual))
                {
                    if (!object.Equals(lhsLocationReferenceTypes, rhsLocationReferenceTypes)) return false;
                }
                else if (!isLocationReferenceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Npcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Npcs, rhs.Npcs, out var lhsNpcs, out var rhsNpcs, out var isNpcsEqual))
                {
                    if (!object.Equals(lhsNpcs, rhsNpcs)) return false;
                }
                else if (!isNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Races) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Races, rhs.Races, out var lhsRaces, out var rhsRaces, out var isRacesEqual))
                {
                    if (!object.Equals(lhsRaces, rhsRaces)) return false;
                }
                else if (!isRacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Weapons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weapons, rhs.Weapons, out var lhsWeapons, out var rhsWeapons, out var isWeaponsEqual))
                {
                    if (!object.Equals(lhsWeapons, rhsWeapons)) return false;
                }
                else if (!isWeaponsEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStarfieldModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.FFKW);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Npcs);
            hash.Add(item.Races);
            hash.Add(item.Weapons);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StarfieldMod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            IStarfieldModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords;
                case "FFKW":
                case "IFFKWGetter":
                case "IFFKW":
                case "IFFKWInternal":
                    return obj.FFKW;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters param,
            ParallelWriteParameters parallelParam,
            ModKey modKey)
        {
            var bundle = new WritingBundle(GameConstants.Starfield)
            {
                StringsWriter = param.StringsWriter,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Encodings = param.Encodings ?? GameConstants.Starfield.Encodings,
            };
            var writer = new MutagenWriter(stream, bundle);
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[7];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Keywords, 1, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.FFKW, 2, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, 3, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Npcs, 4, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Races, 5, outputStreams, bundle, parallelParam));
            toDo.Add(() => WriteGroupParallel(item.Weapons, 6, outputStreams, bundle, parallelParam));
            Parallel.Invoke(parallelParam.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                stream);
        }
        
        public static void WriteGroupParallel<T>(
            IStarfieldGroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, IStarfieldMajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                StarfieldGroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStarfieldModGetter obj)
        {
            foreach (var item in obj.ModHeader.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IStarfieldModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FFKW.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IStarfieldModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IStarfieldModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FFKW":
                case "IFFKWGetter":
                case "IFFKW":
                case "IFFKWInternal":
                    foreach (var item in obj.FFKW.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Starfield, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IStarfieldModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Keyword, IKeywordGetter>(
                srcGroup: obj.Keywords,
                type: typeof(IKeywordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keywords,
                groupGetter: (m) => m.Keywords))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FFKW, IFFKWGetter>(
                srcGroup: obj.FFKW,
                type: typeof(IFFKWGetter),
                modKey: obj.ModKey,
                group: (m) => m.FFKW,
                groupGetter: (m) => m.FFKW))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                srcGroup: obj.LocationReferenceTypes,
                type: typeof(ILocationReferenceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.LocationReferenceTypes,
                groupGetter: (m) => m.LocationReferenceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Npc, INpcGetter>(
                srcGroup: obj.Npcs,
                type: typeof(INpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.Npcs,
                groupGetter: (m) => m.Npcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Race, IRaceGetter>(
                srcGroup: obj.Races,
                type: typeof(IRaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Races,
                groupGetter: (m) => m.Races))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Weapon, IWeaponGetter>(
                srcGroup: obj.Weapons,
                type: typeof(IWeaponGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weapons,
                groupGetter: (m) => m.Weapons))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IStarfieldModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Keyword, IKeywordGetter>(
                        srcGroup: obj.Keywords,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keywords,
                        groupGetter: (m) => m.Keywords))
                    {
                        yield return item;
                    }
                    yield break;
                case "FFKW":
                case "IFFKWGetter":
                case "IFFKW":
                case "IFFKWInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FFKW, IFFKWGetter>(
                        srcGroup: obj.FFKW,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FFKW,
                        groupGetter: (m) => m.FFKW))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                        srcGroup: obj.LocationReferenceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LocationReferenceTypes,
                        groupGetter: (m) => m.LocationReferenceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Npc, INpcGetter>(
                        srcGroup: obj.Npcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Npcs,
                        groupGetter: (m) => m.Npcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Race, IRaceGetter>(
                        srcGroup: obj.Races,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Races,
                        groupGetter: (m) => m.Races))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Weapon, IWeaponGetter>(
                        srcGroup: obj.Weapons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weapons,
                        groupGetter: (m) => m.Weapons))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IStarfieldModGetter, IStarfieldMod, IStarfieldModGetter>(
                        GameCategory.Starfield,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public static partial IEnumerable<IAssetLinkGetter> GetInferredAssetLinks(IStarfieldModGetter obj, Type? assetType);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IStarfieldModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Inferred))
            {
                foreach (var additional in GetInferredAssetLinks(obj, assetType))
                {
                    yield return additional;
                }
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                foreach (var item in obj.Weapons.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StarfieldModSetterTranslationCommon
    {
        public static readonly StarfieldModSetterTranslationCommon Instance = new StarfieldModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStarfieldMod item,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FFKW) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FFKW);
                try
                {
                    item.FFKW.DeepCopyIn(
                        rhs: rhs.FFKW,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FFKW));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            StarfieldMod ret = (StarfieldMod)((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StarfieldMod ret = (StarfieldMod)((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StarfieldMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StarfieldMod ret = (StarfieldMod)((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StarfieldModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Starfield
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool FFKW;
        public bool LocationReferenceTypes;
        public bool Npcs;
        public bool Races;
        public bool Weapons;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            FFKW = defaultValue;
            LocationReferenceTypes = defaultValue;
            Npcs = defaultValue;
            Races = defaultValue;
            Weapons = defaultValue;
        }
    }

    public interface IStarfieldModDisposableGetter : IStarfieldModGetter, IModDisposeGetter
    {
    }

}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StarfieldMod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Starfield;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldModBinaryWriteTranslation
    {
        public static readonly StarfieldModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStarfieldModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FFKW ?? true)
            {
                var FFKWItem = item.FFKW;
                if (FFKWItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FFKWItem).BinaryWriteTranslator).Write<IFFKWGetter>(
                        item: FFKWItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IStarfieldModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (IStarfieldModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class StarfieldModBinaryCreateTranslation
    {
        public static readonly StarfieldModBinaryCreateTranslation Instance = new StarfieldModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStarfieldMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)StarfieldMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.FFKW:
                {
                    if (importMask?.FFKW ?? true)
                    {
                        item.FFKW.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FFKW;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Races;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Weapons;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StarfieldModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStarfieldModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            StarfieldModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IStarfieldModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null,
            IFileSystem? fileSystem = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param.StringsWriter ??= (Enums.HasFlag((int)item.ModHeader.Flags, (int)ModHeaderCommonFlag.Localized) ? new StringsWriter(GameRelease.Starfield, modKey, Path.Combine(Path.GetDirectoryName(path)!, "Strings"), MutagenEncodingProvider.Instance) : null);
            bool disposeStrings = param.StringsWriter != null;
            var bundle = new WritingBundle(GameRelease.Starfield)
            {
                StringsWriter = param.StringsWriter,
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                StarfieldModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = fileSystem.GetOrDefault().FileStream.Create(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            if (disposeStrings)
            {
                param.StringsWriter?.Dispose();
            }
        }

        public static void WriteToBinary(
            this IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(GameRelease.Starfield),
                dispose: false))
            {
                StarfieldModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class StarfieldModBinaryOverlay : IStarfieldModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStarfieldModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public GameRelease GameRelease => GameRelease.Starfield;
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem) => this.WriteToBinary(path, importMask: null, param: param, fileSystem: fileSystem);
        void IModGetter.WriteToBinaryParallel(FilePath path, BinaryWriteParameters? param, IFileSystem? fileSystem, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(path, param: param, fileSystem: fileSystem, parallelParam: parallelWriteParams);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        void IModGetter.WriteToBinaryParallel(Stream stream, BinaryWriteParameters? param, ParallelWriteParameters? parallelWriteParams) => this.WriteToBinaryParallel(stream, param, parallelParam: parallelWriteParams);
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        public bool UsingLocalization => this.ModHeader.Flags.HasFlag(StarfieldModHeader.HeaderFlag.Localized);
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarfieldModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IStarfieldModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? StarfieldModHeaderBinaryOverlay.StarfieldModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public IStarfieldModHeaderGetter ModHeader => _ModHeader ?? new StarfieldModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private IStarfieldGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? StarfieldGroupBinaryOverlay<IGameSettingGetter>.StarfieldGroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public IStarfieldGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new StarfieldGroup<GameSetting>(this);
        #endregion
        #region Keywords
        private List<RangeInt64>? _KeywordsLocations;
        private IStarfieldGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocations != null ? StarfieldGroupBinaryOverlay<IKeywordGetter>.StarfieldGroupFactory(_stream, _KeywordsLocations, _package) : default;
        public IStarfieldGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new StarfieldGroup<Keyword>(this);
        #endregion
        #region FFKW
        private List<RangeInt64>? _FFKWLocations;
        private IStarfieldGroupGetter<IFFKWGetter>? _FFKW => _FFKWLocations != null ? StarfieldGroupBinaryOverlay<IFFKWGetter>.StarfieldGroupFactory(_stream, _FFKWLocations, _package) : default;
        public IStarfieldGroupGetter<IFFKWGetter> FFKW => _FFKW ?? new StarfieldGroup<FFKW>(this);
        #endregion
        #region LocationReferenceTypes
        private List<RangeInt64>? _LocationReferenceTypesLocations;
        private IStarfieldGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocations != null ? StarfieldGroupBinaryOverlay<ILocationReferenceTypeGetter>.StarfieldGroupFactory(_stream, _LocationReferenceTypesLocations, _package) : default;
        public IStarfieldGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new StarfieldGroup<LocationReferenceType>(this);
        #endregion
        #region Npcs
        private List<RangeInt64>? _NpcsLocations;
        private IStarfieldGroupGetter<INpcGetter>? _Npcs => _NpcsLocations != null ? StarfieldGroupBinaryOverlay<INpcGetter>.StarfieldGroupFactory(_stream, _NpcsLocations, _package) : default;
        public IStarfieldGroupGetter<INpcGetter> Npcs => _Npcs ?? new StarfieldGroup<Npc>(this);
        #endregion
        #region Races
        private List<RangeInt64>? _RacesLocations;
        private IStarfieldGroupGetter<IRaceGetter>? _Races => _RacesLocations != null ? StarfieldGroupBinaryOverlay<IRaceGetter>.StarfieldGroupFactory(_stream, _RacesLocations, _package) : default;
        public IStarfieldGroupGetter<IRaceGetter> Races => _Races ?? new StarfieldGroup<Race>(this);
        #endregion
        #region Weapons
        private List<RangeInt64>? _WeaponsLocations;
        private IStarfieldGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocations != null ? StarfieldGroupBinaryOverlay<IWeaponGetter>.StarfieldGroupFactory(_stream, _WeaponsLocations, _package) : default;
        public IStarfieldGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new StarfieldGroup<Weapon>(this);
        #endregion
        protected StarfieldModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            this.ModKey = modKey;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static StarfieldModBinaryOverlay StarfieldModFactory(
            ModPath path,
            StringsReadParameters? stringsParam = null,
            IFileSystem? fileSystem = null)
        {
            var meta = new ParsingBundle(GameRelease.Starfield, new MasterReferenceCollection(path.ModKey))
            {
                RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, GameRelease.Starfield, fileSystem: fileSystem))
            };
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta,
                fileSystem: fileSystem);
            try
            {
                meta.Absorb(stringsParam);
                if (stream.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = stream.GetInt32(offset: 8);
                if (Enums.HasFlag(flags, (int)ModHeaderCommonFlag.Localized))
                {
                    meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(GameRelease.Starfield, path.ModKey, Path.GetDirectoryName(path.Path)!, stringsParam);
                }
                return StarfieldModFactory(
                    stream: stream,
                    path.ModKey,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static StarfieldModBinaryOverlay StarfieldModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose)
        {
            var ret = new StarfieldModBinaryOverlay(
                stream: stream,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    _package.MetaData.MasterReferences!.SetTo(
                        this.ModHeader.MasterReferences.Select(
                            master => new MasterReference()
                            {
                                Master = master.Master,
                                FileSize = master.FileSize,
                            }));
                    return (int)StarfieldMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocations ??= new();
                    _KeywordsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.FFKW:
                {
                    _FFKWLocations ??= new();
                    _FFKWLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FFKW;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocations ??= new();
                    _LocationReferenceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocations ??= new();
                    _NpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocations ??= new();
                    _RacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Races;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocations ??= new();
                    _WeaponsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Weapons;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModGetter rhs) return false;
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModGetter? obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => StarfieldModMixIn.GetEqualsMask(this, (IStarfieldModGetter)rhs, include);
    }

}
#endregion

#endregion

