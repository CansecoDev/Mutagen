/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class BinaryProcessorInstructions : IBinaryProcessorInstructions, ILoquiObjectSetter, IEquatable<BinaryProcessorInstructions>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BinaryProcessorInstructions_Registration.Instance;
        public static BinaryProcessorInstructions_Registration Registration => BinaryProcessorInstructions_Registration.Instance;

        #region Ctor
        public BinaryProcessorInstructions()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CompressionInstructions
        private readonly INotifyingKeyedCollection<FormID, RecordInstruction> _CompressionInstructions = new NotifyingKeyedCollection<FormID, RecordInstruction>((item) => item.Record);
        public INotifyingKeyedCollection<FormID, RecordInstruction> CompressionInstructions => _CompressionInstructions;
        #region Interface Members
        INotifyingKeyedCollection<FormID, RecordInstruction> IBinaryProcessorInstructions.CompressionInstructions => _CompressionInstructions;
        INotifyingKeyedCollectionGetter<FormID, RecordInstruction> IBinaryProcessorInstructionsGetter.CompressionInstructions => _CompressionInstructions;
        #endregion

        #endregion
        #region Instruction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Instruction _Instruction = new Instruction();
        public Instruction Instruction
        {
            get => _Instruction;
            set => _Instruction = value ?? new Instruction();
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => BinaryProcessorInstructionsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => BinaryProcessorInstructionsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => BinaryProcessorInstructionsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            BinaryProcessorInstructionsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return BinaryProcessorInstructionsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            BinaryProcessorInstructions_Mask<bool> printMask = null)
        {
            return BinaryProcessorInstructionsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            BinaryProcessorInstructionsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public BinaryProcessorInstructions_Mask<bool> GetHasBeenSetMask()
        {
            return BinaryProcessorInstructionsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is BinaryProcessorInstructions rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BinaryProcessorInstructions rhs)
        {
            if (rhs == null) return false;
            if (!CompressionInstructions.SequenceEqual(rhs.CompressionInstructions)) return false;
            if (!object.Equals(Instruction, rhs.Instruction)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(CompressionInstructions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Instruction).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static BinaryProcessorInstructions Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static BinaryProcessorInstructions Create_XML(
            XElement root,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (BinaryProcessorInstructions Object, BinaryProcessorInstructions_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            BinaryProcessorInstructions_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new BinaryProcessorInstructions_ErrorMask()) : default(Func<BinaryProcessorInstructions_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static BinaryProcessorInstructions Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static BinaryProcessorInstructions Create_XML(
            string path,
            out BinaryProcessorInstructions_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static BinaryProcessorInstructions Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static BinaryProcessorInstructions Create_XML(
            Stream stream,
            out BinaryProcessorInstructions_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<BinaryProcessorInstructions, BinaryProcessorInstructions_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<BinaryProcessorInstructions, BinaryProcessorInstructions_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: doMasks) as BinaryProcessorInstructions_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected object Write_XML_Internal(
            XElement node,
            bool doMasks,
            string name = null)
        {
            BinaryProcessorInstructionsCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                node: node,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static BinaryProcessorInstructions Create_XML_Internal(
            XElement root,
            Func<BinaryProcessorInstructions_ErrorMask> errorMask)
        {
            var ret = new BinaryProcessorInstructions();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            BinaryProcessorInstructions item,
            XElement root,
            string name,
            Func<BinaryProcessorInstructions_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "CompressionInstructions":
                    var CompressionInstructionsdict = KeyedDictXmlTranslation<FormID, RecordInstruction, MaskItem<Exception, RecordInstruction_ErrorMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)BinaryProcessorInstructions_FieldIndex.CompressionInstructions,
                        errorMask: errorMask,
                        valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, RecordInstruction_ErrorMask> dictSubMask) =>
                        {
                            return LoquiXmlTranslation<RecordInstruction, RecordInstruction_ErrorMask>.Instance.Parse(
                                root: r,
                                doMasks: dictDoMasks,
                                errorMask: out dictSubMask);
                        }
                        );
                    if (CompressionInstructionsdict.Succeeded)
                    {
                        item._CompressionInstructions.SetTo(CompressionInstructionsdict.Value);
                    }
                    break;
                case "Instruction":
                    item.Instruction = LoquiXmlTranslation<Instruction, Instruction_ErrorMask>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)BinaryProcessorInstructions_FieldIndex.Instruction,
                        errorMask: errorMask).GetOrDefault(item.Instruction);
                    break;
                default:
                    break;
            }
        }

        #endregion

        public BinaryProcessorInstructions Copy(
            BinaryProcessorInstructions_CopyMask copyMask = null,
            IBinaryProcessorInstructionsGetter def = null)
        {
            return BinaryProcessorInstructions.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static BinaryProcessorInstructions Copy(
            IBinaryProcessorInstructions item,
            BinaryProcessorInstructions_CopyMask copyMask = null,
            IBinaryProcessorInstructionsGetter def = null)
        {
            BinaryProcessorInstructions ret;
            if (item.GetType().Equals(typeof(BinaryProcessorInstructions)))
            {
                ret = new BinaryProcessorInstructions();
            }
            else
            {
                ret = (BinaryProcessorInstructions)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            BinaryProcessorInstructions_CopyMask copyMask = null,
            IBinaryProcessorInstructionsGetter def = null)
            where CopyType : class, IBinaryProcessorInstructions
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(BinaryProcessorInstructions)))
            {
                ret = new BinaryProcessorInstructions() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static BinaryProcessorInstructions Copy_ToLoqui(
            IBinaryProcessorInstructionsGetter item,
            BinaryProcessorInstructions_CopyMask copyMask = null,
            IBinaryProcessorInstructionsGetter def = null)
        {
            BinaryProcessorInstructions ret;
            if (item.GetType().Equals(typeof(BinaryProcessorInstructions)))
            {
                ret = new BinaryProcessorInstructions() as BinaryProcessorInstructions;
            }
            else
            {
                ret = (BinaryProcessorInstructions)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    this.CompressionInstructions.SetTo(
                        ((IEnumerable<RecordInstruction>)(NotifyingDictionary<FormID, RecordInstruction>)obj),
                        cmds);
                    break;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    this.Instruction = (Instruction)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            BinaryProcessorInstructionsCommon.Clear(this, cmds);
        }


        public static BinaryProcessorInstructions Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new BinaryProcessorInstructions();
            foreach (var pair in fields)
            {
                CopyInInternal_BinaryProcessorInstructions(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_BinaryProcessorInstructions(BinaryProcessorInstructions obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out BinaryProcessorInstructions_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    obj.CompressionInstructions.SetTo(
                        ((IEnumerable<RecordInstruction>)(NotifyingDictionary<FormID, RecordInstruction>)pair.Value),
                        null);
                    break;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    obj.Instruction = (Instruction)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, BinaryProcessorInstructions obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IBinaryProcessorInstructions : IBinaryProcessorInstructionsGetter, ILoquiClass<IBinaryProcessorInstructions, IBinaryProcessorInstructionsGetter>, ILoquiClass<BinaryProcessorInstructions, IBinaryProcessorInstructionsGetter>
    {
        new INotifyingKeyedCollection<FormID, RecordInstruction> CompressionInstructions { get; }
        new Instruction Instruction { get; set; }

    }

    public interface IBinaryProcessorInstructionsGetter : ILoquiObject
    {
        #region CompressionInstructions
        INotifyingKeyedCollectionGetter<FormID, RecordInstruction> CompressionInstructions { get; }
        #endregion
        #region Instruction
        Instruction Instruction { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum BinaryProcessorInstructions_FieldIndex
    {
        CompressionInstructions = 0,
        Instruction = 1,
    }
    #endregion

    #region Registration
    public class BinaryProcessorInstructions_Registration : ILoquiRegistration
    {
        public static readonly BinaryProcessorInstructions_Registration Instance = new BinaryProcessorInstructions_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "73f79186-d8ce-4187-a063-f443409f5f78";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(BinaryProcessorInstructions_Mask<>);

        public static readonly Type ErrorMaskType = typeof(BinaryProcessorInstructions_ErrorMask);

        public static readonly Type ClassType = typeof(BinaryProcessorInstructions);

        public static readonly Type GetterType = typeof(IBinaryProcessorInstructionsGetter);

        public static readonly Type SetterType = typeof(IBinaryProcessorInstructions);

        public static readonly Type CommonType = typeof(BinaryProcessorInstructionsCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.BinaryProcessorInstructions";

        public const string Name = "BinaryProcessorInstructions";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "COMPRESSIONINSTRUCTIONS":
                    return (ushort)BinaryProcessorInstructions_FieldIndex.CompressionInstructions;
                case "INSTRUCTION":
                    return (ushort)BinaryProcessorInstructions_FieldIndex.Instruction;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return true;
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    return "CompressionInstructions";
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return "Instruction";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    return typeof(NotifyingDictionary<FormID, RecordInstruction>);
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return typeof(Instruction);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class BinaryProcessorInstructionsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IBinaryProcessorInstructions item,
            IBinaryProcessorInstructionsGetter rhs,
            BinaryProcessorInstructions_CopyMask copyMask = null,
            IBinaryProcessorInstructionsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            BinaryProcessorInstructionsCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IBinaryProcessorInstructions item,
            IBinaryProcessorInstructionsGetter rhs,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            BinaryProcessorInstructions_CopyMask copyMask = null,
            IBinaryProcessorInstructionsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            BinaryProcessorInstructionsCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IBinaryProcessorInstructions item,
            IBinaryProcessorInstructionsGetter rhs,
            IBinaryProcessorInstructionsGetter def,
            bool doMasks,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            BinaryProcessorInstructions_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            BinaryProcessorInstructions_ErrorMask retErrorMask = null;
            Func<BinaryProcessorInstructions_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new BinaryProcessorInstructions_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IBinaryProcessorInstructions item,
            IBinaryProcessorInstructionsGetter rhs,
            IBinaryProcessorInstructionsGetter def,
            bool doMasks,
            Func<BinaryProcessorInstructions_ErrorMask> errorMask,
            BinaryProcessorInstructions_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.CompressionInstructions.Overall != CopyOption.Skip)
            {
                try
                {
                    item.CompressionInstructions.SetToWithDefault(
                        rhs.CompressionInstructions,
                        def?.CompressionInstructions,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.CompressionInstructions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RecordInstruction);
                                    return RecordInstruction.Copy(
                                        r,
                                        copyMask?.CompressionInstructions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.CompressionInstructions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)BinaryProcessorInstructions_FieldIndex.CompressionInstructions, ex);
                }
            }
            if (copyMask?.Instruction.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.Instruction?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Instruction = rhs.Instruction;
                            break;
                        case CopyOption.CopyIn:
                            InstructionCommon.CopyFieldsFrom(
                                item: item.Instruction,
                                rhs: rhs.Instruction,
                                def: def?.Instruction,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<Instruction_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.Instruction.Specific == null)
                                    {
                                        baseMask.Instruction = new MaskItem<Exception, Instruction_ErrorMask>(null, new Instruction_ErrorMask());
                                    }
                                    return baseMask.Instruction.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.Instruction.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Instruction == null)
                            {
                                item.Instruction = null;
                            }
                            else
                            {
                                item.Instruction = Instruction.Copy(
                                    rhs.Instruction,
                                    copyMask?.Instruction?.Specific,
                                    def?.Instruction);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Instruction?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)BinaryProcessorInstructions_FieldIndex.Instruction, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IBinaryProcessorInstructions obj,
            NotifyingFireParameters cmds = null)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IBinaryProcessorInstructions obj,
            NotifyingUnsetParameters cmds = null)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    obj.CompressionInstructions.Unset(cmds);
                    break;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    obj.Instruction = default(Instruction);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IBinaryProcessorInstructions obj)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IBinaryProcessorInstructionsGetter obj)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    return obj.CompressionInstructions;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return obj.Instruction;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IBinaryProcessorInstructions item,
            NotifyingUnsetParameters cmds = null)
        {
            item.CompressionInstructions.Unset(cmds.ToUnsetParams());
            item.Instruction = default(Instruction);
        }

        public static BinaryProcessorInstructions_Mask<bool> GetEqualsMask(
            this IBinaryProcessorInstructionsGetter item,
            IBinaryProcessorInstructionsGetter rhs)
        {
            var ret = new BinaryProcessorInstructions_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IBinaryProcessorInstructionsGetter item,
            IBinaryProcessorInstructionsGetter rhs,
            BinaryProcessorInstructions_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.CompressionInstructions = new MaskItem<bool, IEnumerable<MaskItem<bool, RecordInstruction_Mask<bool>>>>();
            ret.CompressionInstructions.Specific = item.CompressionInstructions.Values.SelectAgainst<RecordInstruction, MaskItem<bool, RecordInstruction_Mask<bool>>>(rhs.CompressionInstructions.Values, ((l, r) =>
            {
                MaskItem<bool, RecordInstruction_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, RecordInstruction_Mask<bool>>();
                itemRet.Specific = RecordInstructionCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.CompressionInstructions.Overall);
            ret.CompressionInstructions.Overall = ret.CompressionInstructions.Overall && ret.CompressionInstructions.Specific.All((b) => b.Overall);
            ret.Instruction = new MaskItem<bool, Instruction_Mask<bool>>();
            ret.Instruction.Specific = InstructionCommon.GetEqualsMask(item.Instruction, rhs.Instruction);
            ret.Instruction.Overall = ret.Instruction.Specific.AllEqual((b) => b);
        }

        public static string ToString(
            this IBinaryProcessorInstructionsGetter item,
            string name = null,
            BinaryProcessorInstructions_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IBinaryProcessorInstructionsGetter item,
            FileGeneration fg,
            string name = null,
            BinaryProcessorInstructions_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(BinaryProcessorInstructions)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(BinaryProcessorInstructions)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompressionInstructions?.Overall ?? true)
                {
                    fg.AppendLine("CompressionInstructions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.CompressionInstructions.Values)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Instruction?.Overall ?? true)
                {
                    item.Instruction?.ToString(fg, "Instruction");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IBinaryProcessorInstructionsGetter item,
            BinaryProcessorInstructions_Mask<bool?> checkMask)
        {
            return true;
        }

        public static BinaryProcessorInstructions_Mask<bool> GetHasBeenSetMask(IBinaryProcessorInstructionsGetter item)
        {
            var ret = new BinaryProcessorInstructions_Mask<bool>();
            ret.CompressionInstructions = new MaskItem<bool, IEnumerable<MaskItem<bool, RecordInstruction_Mask<bool>>>>(item.CompressionInstructions.HasBeenSet, item.CompressionInstructions.Values.Select((i) => new MaskItem<bool, RecordInstruction_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Instruction = new MaskItem<bool, Instruction_Mask<bool>>(true, InstructionCommon.GetHasBeenSetMask(item.Instruction));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IBinaryProcessorInstructionsGetter item,
            bool doMasks,
            out BinaryProcessorInstructions_ErrorMask errorMask,
            string name = null)
        {
            BinaryProcessorInstructions_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                node: node,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new BinaryProcessorInstructions_ErrorMask()) : default(Func<BinaryProcessorInstructions_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XElement node,
            IBinaryProcessorInstructionsGetter item,
            Func<BinaryProcessorInstructions_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.BinaryProcessorInstructions");
                node.Add(elem);
                if (name != null)
                {
                    elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.BinaryProcessorInstructions");
                }
                KeyedDictXmlTranslation<FormID, RecordInstruction, MaskItem<Exception, RecordInstruction_ErrorMask>>.Instance.Write(
                    node: elem,
                    name: nameof(item.CompressionInstructions),
                    items: item.CompressionInstructions.Values,
                    fieldIndex: (int)BinaryProcessorInstructions_FieldIndex.CompressionInstructions,
                    errorMask: errorMask,
                    valTransl: (XElement subNode, RecordInstruction subItem, bool dictDoMask, out MaskItem<Exception, RecordInstruction_ErrorMask> dictSubMask) =>
                    {
                        LoquiXmlTranslation<RecordInstruction, RecordInstruction_ErrorMask>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: "Item",
                            doMasks: dictDoMask,
                            errorMask: out dictSubMask);
                    }
                    );
                LoquiXmlTranslation<Instruction, Instruction_ErrorMask>.Instance.Write(
                    node: elem,
                    item: item.Instruction,
                    name: nameof(item.Instruction),
                    fieldIndex: (int)BinaryProcessorInstructions_FieldIndex.Instruction,
                    errorMask: errorMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class BinaryProcessorInstructions_Mask<T> : IMask<T>, IEquatable<BinaryProcessorInstructions_Mask<T>>
    {
        #region Ctors
        public BinaryProcessorInstructions_Mask()
        {
        }

        public BinaryProcessorInstructions_Mask(T initialValue)
        {
            this.CompressionInstructions = new MaskItem<T, IEnumerable<MaskItem<T, RecordInstruction_Mask<T>>>>(initialValue, null);
            this.Instruction = new MaskItem<T, Instruction_Mask<T>>(initialValue, new Instruction_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, RecordInstruction_Mask<T>>>> CompressionInstructions;
        public MaskItem<T, Instruction_Mask<T>> Instruction { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is BinaryProcessorInstructions_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(BinaryProcessorInstructions_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.CompressionInstructions, rhs.CompressionInstructions)) return false;
            if (!object.Equals(this.Instruction, rhs.Instruction)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.CompressionInstructions?.GetHashCode());
            ret = ret.CombineHashCode(this.Instruction?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (this.CompressionInstructions != null)
            {
                if (!eval(this.CompressionInstructions.Overall)) return false;
                if (this.CompressionInstructions.Specific != null)
                {
                    foreach (var item in this.CompressionInstructions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Instruction != null)
            {
                if (!eval(this.Instruction.Overall)) return false;
                if (this.Instruction.Specific != null && !this.Instruction.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public BinaryProcessorInstructions_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new BinaryProcessorInstructions_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(BinaryProcessorInstructions_Mask<R> obj, Func<T, R> eval)
        {
            if (CompressionInstructions != null)
            {
                obj.CompressionInstructions = new MaskItem<R, IEnumerable<MaskItem<R, RecordInstruction_Mask<R>>>>();
                obj.CompressionInstructions.Overall = eval(this.CompressionInstructions.Overall);
                if (CompressionInstructions.Specific != null)
                {
                    List<MaskItem<R, RecordInstruction_Mask<R>>> l = new List<MaskItem<R, RecordInstruction_Mask<R>>>();
                    obj.CompressionInstructions.Specific = l;
                    foreach (var item in CompressionInstructions.Specific)
                    {
                        MaskItem<R, RecordInstruction_Mask<R>> mask = default(MaskItem<R, RecordInstruction_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, RecordInstruction_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (this.Instruction != null)
            {
                obj.Instruction = new MaskItem<R, Instruction_Mask<R>>();
                obj.Instruction.Overall = eval(this.Instruction.Overall);
                if (this.Instruction.Specific != null)
                {
                    obj.Instruction.Specific = this.Instruction.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.CompressionInstructions.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(BinaryProcessorInstructions_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, BinaryProcessorInstructions_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(BinaryProcessorInstructions_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.CompressionInstructions?.Overall ?? true)
                {
                    fg.AppendLine("CompressionInstructions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (CompressionInstructions.Overall != null)
                        {
                            fg.AppendLine(CompressionInstructions.Overall.ToString());
                        }
                        if (CompressionInstructions.Specific != null)
                        {
                            foreach (var subItem in CompressionInstructions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($"Record => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Instruction?.Overall ?? true)
                {
                    Instruction?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class BinaryProcessorInstructions_ErrorMask : IErrorMask, IErrorMask<BinaryProcessorInstructions_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RecordInstruction_ErrorMask>>> CompressionInstructions;
        public MaskItem<Exception, Instruction_ErrorMask> Instruction;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    return CompressionInstructions;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    return Instruction;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    this.CompressionInstructions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RecordInstruction_ErrorMask>>>(ex, null);
                    break;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    this.Instruction = new MaskItem<Exception, Instruction_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            BinaryProcessorInstructions_FieldIndex enu = (BinaryProcessorInstructions_FieldIndex)index;
            switch (enu)
            {
                case BinaryProcessorInstructions_FieldIndex.CompressionInstructions:
                    this.CompressionInstructions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RecordInstruction_ErrorMask>>>)obj;
                    break;
                case BinaryProcessorInstructions_FieldIndex.Instruction:
                    this.Instruction = (MaskItem<Exception, Instruction_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (CompressionInstructions != null) return true;
            if (Instruction != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("BinaryProcessorInstructions_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine("CompressionInstructions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (CompressionInstructions.Overall != null)
                {
                    fg.AppendLine(CompressionInstructions.Overall.ToString());
                }
                if (CompressionInstructions.Specific != null)
                {
                    foreach (var subItem in CompressionInstructions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Record => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            Instruction?.ToString(fg);
        }
        #endregion

        #region Combine
        public BinaryProcessorInstructions_ErrorMask Combine(BinaryProcessorInstructions_ErrorMask rhs)
        {
            var ret = new BinaryProcessorInstructions_ErrorMask();
            ret.CompressionInstructions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RecordInstruction_ErrorMask>>>(this.CompressionInstructions.Overall.Combine(rhs.CompressionInstructions.Overall), new List<MaskItem<Exception, RecordInstruction_ErrorMask>>(this.CompressionInstructions.Specific.And(rhs.CompressionInstructions.Specific)));
            ret.Instruction = new MaskItem<Exception, Instruction_ErrorMask>(this.Instruction.Overall.Combine(rhs.Instruction.Overall), ((IErrorMask<Instruction_ErrorMask>)this.Instruction.Specific).Combine(rhs.Instruction.Specific));
            return ret;
        }
        public static BinaryProcessorInstructions_ErrorMask Combine(BinaryProcessorInstructions_ErrorMask lhs, BinaryProcessorInstructions_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class BinaryProcessorInstructions_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, RecordInstruction_CopyMask> CompressionInstructions;
        public MaskItem<CopyOption, Instruction_CopyMask> Instruction;
        #endregion

    }
    #endregion


    #endregion

}
