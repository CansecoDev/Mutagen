/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class DataTarget : IDataTarget, ILoquiObject<DataTarget>, ILoquiObjectSetter, IEquatable<DataTarget>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DataTarget_Registration.Instance;
        public static DataTarget_Registration Registration => DataTarget_Registration.Instance;

        #region Ctor
        public DataTarget()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Location
        private Int64 _Location;
        public Int64 Location { get => _Location; set => _Location = value; }
        #endregion
        #region Data
        private Byte[] _Data;
        public Byte[] Data
        {
            get => _Data;
            set { this._Data = value; }
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => DataTargetCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => DataTargetCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => DataTargetCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            DataTargetCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<DataTarget>.GetEqualsMask(DataTarget rhs) => DataTargetCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IDataTargetGetter>.GetEqualsMask(IDataTargetGetter rhs) => DataTargetCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return DataTargetCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            DataTarget_Mask<bool> printMask = null)
        {
            return DataTargetCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            DataTargetCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public DataTarget_Mask<bool> GetHasBeenSetMask()
        {
            return DataTargetCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is DataTarget rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DataTarget rhs)
        {
            if (rhs == null) return false;
            if (this.Location != rhs.Location) return false;
            if (!this.Data.EqualsFast(rhs.Data)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Location).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Data).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static DataTarget Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static DataTarget Create_XML(
            XElement root,
            out DataTarget_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = DataTarget_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static DataTarget Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new DataTarget();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DataTarget Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static DataTarget Create_XML(
            string path,
            out DataTarget_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static DataTarget Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static DataTarget Create_XML(
            Stream stream,
            out DataTarget_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<DataTarget>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out DataTarget_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<DataTarget>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = DataTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out DataTarget_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out DataTarget_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out DataTarget_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = DataTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out DataTarget_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out DataTarget_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            DataTargetCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            DataTarget item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Location":
                    Int64XmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)DataTarget_FieldIndex.Location,
                        item: out item._Location,
                        errorMask: errorMask);
                    break;
                case "Data":
                    ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)DataTarget_FieldIndex.Data,
                        item: out item._Data,
                        errorMask: errorMask);
                    break;
                default:
                    break;
            }
        }

        #endregion

        public DataTarget Copy(
            DataTarget_CopyMask copyMask = null,
            IDataTargetGetter def = null)
        {
            return DataTarget.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DataTarget Copy(
            IDataTarget item,
            DataTarget_CopyMask copyMask = null,
            IDataTargetGetter def = null)
        {
            DataTarget ret;
            if (item.GetType().Equals(typeof(DataTarget)))
            {
                ret = new DataTarget();
            }
            else
            {
                ret = (DataTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DataTarget Copy_ToLoqui(
            IDataTargetGetter item,
            DataTarget_CopyMask copyMask = null,
            IDataTargetGetter def = null)
        {
            DataTarget ret;
            if (item.GetType().Equals(typeof(DataTarget)))
            {
                ret = new DataTarget() as DataTarget;
            }
            else
            {
                ret = (DataTarget)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IDataTargetGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDataTargetGetter rhs,
            DataTarget_CopyMask copyMask,
            IDataTargetGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IDataTargetGetter rhs,
            out DataTarget_ErrorMask errorMask,
            DataTarget_CopyMask copyMask = null,
            IDataTargetGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DataTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = DataTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IDataTargetGetter rhs,
            ErrorMaskBuilder errorMask,
            DataTarget_CopyMask copyMask = null,
            IDataTargetGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            DataTargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    this._Location = (Int64)obj;
                    break;
                case DataTarget_FieldIndex.Data:
                    this._Data = (Byte[])obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            DataTargetCommon.Clear(this, cmds);
        }


        public static DataTarget Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new DataTarget();
            foreach (var pair in fields)
            {
                CopyInInternal_DataTarget(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_DataTarget(DataTarget obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out DataTarget_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    obj._Location = (Int64)pair.Value;
                    break;
                case DataTarget_FieldIndex.Data:
                    obj._Data = (Byte[])pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, DataTarget obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IDataTarget : IDataTargetGetter, ILoquiClass<IDataTarget, IDataTargetGetter>, ILoquiClass<DataTarget, IDataTargetGetter>
    {
        new Int64 Location { get; set; }

        new Byte[] Data { get; set; }

    }

    public partial interface IDataTargetGetter : ILoquiObject
    {
        #region Location
        Int64 Location { get; }

        #endregion
        #region Data
        Byte[] Data { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum DataTarget_FieldIndex
    {
        Location = 0,
        Data = 1,
    }
    #endregion

    #region Registration
    public class DataTarget_Registration : ILoquiRegistration
    {
        public static readonly DataTarget_Registration Instance = new DataTarget_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "501872cd-0ed9-4e48-a622-f5d43cbf8d4b";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(DataTarget_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DataTarget_ErrorMask);

        public static readonly Type ClassType = typeof(DataTarget);

        public static readonly Type GetterType = typeof(IDataTargetGetter);

        public static readonly Type SetterType = typeof(IDataTarget);

        public static readonly Type CommonType = typeof(DataTargetCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.DataTarget";

        public const string Name = "DataTarget";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "LOCATION":
                    return (ushort)DataTarget_FieldIndex.Location;
                case "DATA":
                    return (ushort)DataTarget_FieldIndex.Data;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    return "Location";
                case DataTarget_FieldIndex.Data:
                    return "Data";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    return typeof(Int64);
                case DataTarget_FieldIndex.Data:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class DataTargetCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IDataTarget item,
            IDataTargetGetter rhs,
            IDataTargetGetter def,
            ErrorMaskBuilder errorMask,
            DataTarget_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Location ?? true)
            {
                errorMask.PushIndex((int)DataTarget_FieldIndex.Location);
                item.Location = rhs.Location;
                errorMask.PopIndex();
            }
            if (copyMask?.Data ?? true)
            {
                errorMask.PushIndex((int)DataTarget_FieldIndex.Data);
                item.Data = rhs.Data;
                errorMask.PopIndex();
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IDataTarget obj,
            NotifyingFireParameters cmds = null)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IDataTarget obj,
            NotifyingUnsetParameters cmds = null)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    obj.Location = default(Int64);
                    break;
                case DataTarget_FieldIndex.Data:
                    obj.Data = default(Byte[]);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IDataTarget obj)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                case DataTarget_FieldIndex.Data:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IDataTargetGetter obj)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    return obj.Location;
                case DataTarget_FieldIndex.Data:
                    return obj.Data;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IDataTarget item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Location = default(Int64);
            item.Data = default(Byte[]);
        }

        public static DataTarget_Mask<bool> GetEqualsMask(
            this IDataTargetGetter item,
            IDataTargetGetter rhs)
        {
            var ret = new DataTarget_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IDataTargetGetter item,
            IDataTargetGetter rhs,
            DataTarget_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Location = item.Location == rhs.Location;
            ret.Data = item.Data.EqualsFast(rhs.Data);
        }

        public static string ToString(
            this IDataTargetGetter item,
            string name = null,
            DataTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IDataTargetGetter item,
            FileGeneration fg,
            string name = null,
            DataTarget_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(DataTarget)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(DataTarget)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Location ?? true)
                {
                    fg.AppendLine($"Location => {item.Location}");
                }
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {item.Data}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IDataTargetGetter item,
            DataTarget_Mask<bool?> checkMask)
        {
            return true;
        }

        public static DataTarget_Mask<bool> GetHasBeenSetMask(IDataTargetGetter item)
        {
            var ret = new DataTarget_Mask<bool>();
            ret.Location = true;
            ret.Data = true;
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IDataTargetGetter item,
            bool doMasks,
            out DataTarget_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = DataTarget_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IDataTargetGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.DataTarget");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.DataTarget");
            }
            Int64XmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Location),
                item: item.Location,
                fieldIndex: (int)DataTarget_FieldIndex.Location,
                errorMask: errorMask);
            ByteArrayXmlTranslation.Instance.Write(
                node: elem,
                name: nameof(item.Data),
                item: item.Data,
                fieldIndex: (int)DataTarget_FieldIndex.Data,
                errorMask: errorMask);
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class DataTarget_Mask<T> : IMask<T>, IEquatable<DataTarget_Mask<T>>
    {
        #region Ctors
        public DataTarget_Mask()
        {
        }

        public DataTarget_Mask(T initialValue)
        {
            this.Location = initialValue;
            this.Data = initialValue;
        }
        #endregion

        #region Members
        public T Location;
        public T Data;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DataTarget_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DataTarget_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Location, rhs.Location)) return false;
            if (!object.Equals(this.Data, rhs.Data)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Location?.GetHashCode());
            ret = ret.CombineHashCode(this.Data?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Location)) return false;
            if (!eval(this.Data)) return false;
            return true;
        }
        #endregion

        #region Translate
        public DataTarget_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DataTarget_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DataTarget_Mask<R> obj, Func<T, R> eval)
        {
            obj.Location = eval(this.Location);
            obj.Data = eval(this.Data);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DataTarget_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DataTarget_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DataTarget_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Location ?? true)
                {
                    fg.AppendLine($"Location => {Location}");
                }
                if (printMask?.Data ?? true)
                {
                    fg.AppendLine($"Data => {Data}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DataTarget_ErrorMask : IErrorMask, IErrorMask<DataTarget_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Location;
        public Exception Data;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    return Location;
                case DataTarget_FieldIndex.Data:
                    return Data;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    this.Location = ex;
                    break;
                case DataTarget_FieldIndex.Data:
                    this.Data = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            DataTarget_FieldIndex enu = (DataTarget_FieldIndex)index;
            switch (enu)
            {
                case DataTarget_FieldIndex.Location:
                    this.Location = (Exception)obj;
                    break;
                case DataTarget_FieldIndex.Data:
                    this.Data = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Location != null) return true;
            if (Data != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("DataTarget_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Location => {Location}");
            fg.AppendLine($"Data => {Data}");
        }
        #endregion

        #region Combine
        public DataTarget_ErrorMask Combine(DataTarget_ErrorMask rhs)
        {
            var ret = new DataTarget_ErrorMask();
            ret.Location = this.Location.Combine(rhs.Location);
            ret.Data = this.Data.Combine(rhs.Data);
            return ret;
        }
        public static DataTarget_ErrorMask Combine(DataTarget_ErrorMask lhs, DataTarget_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DataTarget_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DataTarget_ErrorMask();
        }
        #endregion

    }
    public class DataTarget_CopyMask
    {
        #region Members
        public bool Location;
        public bool Data;
        #endregion

    }
    #endregion


    #endregion

}
