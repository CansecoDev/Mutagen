/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class Instruction : 
        IInstruction,
        ILoquiObject<Instruction>,
        ILoquiObjectSetter,
        IEquatable<Instruction>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Instruction_Registration.Instance;
        public static Instruction_Registration Registration => Instruction_Registration.Instance;

        #region Ctor
        public Instruction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Moves
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Move> _Moves = new NotifyingList<Move>();
        public INotifyingList<Move> Moves => _Moves;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Move> MovesEnumerable
        {
            get => _Moves;
            set => _Moves.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Move> IInstruction.Moves => _Moves;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Move> IInstructionGetter.Moves => _Moves;
        #endregion

        #endregion
        #region Substitutions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<DataTarget> _Substitutions = new NotifyingList<DataTarget>();
        public INotifyingList<DataTarget> Substitutions => _Substitutions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<DataTarget> SubstitutionsEnumerable
        {
            get => _Substitutions;
            set => _Substitutions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<DataTarget> IInstruction.Substitutions => _Substitutions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<DataTarget> IInstructionGetter.Substitutions => _Substitutions;
        #endregion

        #endregion
        #region Additions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<DataTarget> _Additions = new NotifyingList<DataTarget>();
        public INotifyingList<DataTarget> Additions => _Additions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<DataTarget> AdditionsEnumerable
        {
            get => _Additions;
            set => _Additions.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<DataTarget> IInstruction.Additions => _Additions;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<DataTarget> IInstructionGetter.Additions => _Additions;
        #endregion

        #endregion
        #region SkipSourceSections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RangeInt64> _SkipSourceSections = new NotifyingList<RangeInt64>();
        public INotifyingList<RangeInt64> SkipSourceSections => _SkipSourceSections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RangeInt64> SkipSourceSectionsEnumerable
        {
            get => _SkipSourceSections;
            set => _SkipSourceSections.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RangeInt64> IInstruction.SkipSourceSections => _SkipSourceSections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RangeInt64> IInstructionGetter.SkipSourceSections => _SkipSourceSections;
        #endregion

        #endregion
        #region SkipOutputSections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RangeInt64> _SkipOutputSections = new NotifyingList<RangeInt64>();
        public INotifyingList<RangeInt64> SkipOutputSections => _SkipOutputSections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RangeInt64> SkipOutputSectionsEnumerable
        {
            get => _SkipOutputSections;
            set => _SkipOutputSections.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RangeInt64> IInstruction.SkipOutputSections => _SkipOutputSections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RangeInt64> IInstructionGetter.SkipOutputSections => _SkipOutputSections;
        #endregion

        #endregion
        #region IgnoreDifferenceSections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<RangeInt64> _IgnoreDifferenceSections = new NotifyingList<RangeInt64>();
        public INotifyingList<RangeInt64> IgnoreDifferenceSections => _IgnoreDifferenceSections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RangeInt64> IgnoreDifferenceSectionsEnumerable
        {
            get => _IgnoreDifferenceSections;
            set => _IgnoreDifferenceSections.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<RangeInt64> IInstruction.IgnoreDifferenceSections => _IgnoreDifferenceSections;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<RangeInt64> IInstructionGetter.IgnoreDifferenceSections => _IgnoreDifferenceSections;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => InstructionCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => InstructionCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => InstructionCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            InstructionCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Instruction>.GetEqualsMask(Instruction rhs) => InstructionCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IInstructionGetter>.GetEqualsMask(IInstructionGetter rhs) => InstructionCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return InstructionCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Instruction_Mask<bool> printMask = null)
        {
            return InstructionCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            InstructionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Instruction_Mask<bool> GetHasBeenSetMask()
        {
            return InstructionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Instruction rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Instruction rhs)
        {
            if (rhs == null) return false;
            if (!this.Moves.SequenceEqual(rhs.Moves)) return false;
            if (!this.Substitutions.SequenceEqual(rhs.Substitutions)) return false;
            if (!this.Additions.SequenceEqual(rhs.Additions)) return false;
            if (!this.SkipSourceSections.SequenceEqual(rhs.SkipSourceSections)) return false;
            if (!this.SkipOutputSections.SequenceEqual(rhs.SkipOutputSections)) return false;
            if (!this.IgnoreDifferenceSections.SequenceEqual(rhs.IgnoreDifferenceSections)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Moves).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Substitutions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Additions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SkipSourceSections).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SkipOutputSections).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(IgnoreDifferenceSections).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static Instruction Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                errorMask: null);
        }

        [DebuggerStepThrough]
        public static Instruction Create_XML(
            XElement root,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_XML(
                root: root,
                errorMask: errorMaskBuilder);
            errorMask = Instruction_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        [DebuggerStepThrough]
        public static Instruction Create_XML(
            XElement root,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Instruction();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Instruction Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Instruction Create_XML(
            string path,
            out Instruction_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Instruction Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Instruction Create_XML(
            Stream stream,
            out Instruction_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public virtual void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Instruction>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out Instruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            LoquiXmlTranslation<Instruction>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMaskBuilder,
                cmds: cmds);
            errorMask = Instruction_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out Instruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out Instruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XElement node,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder);
            errorMask = Instruction_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_XML(
            string path,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks);
            topNode.Elements().First().Save(stream);
        }

        public virtual void Write_XML(
            XElement node,
            string name = null)
        {
            this.Write_XML_Internal(
                node: node,
                name: name,
                errorMask: null);
        }

        public virtual void Write_XML(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_XML(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_XML(
                node: topNode,
                name: name);
            topNode.Elements().First().Save(stream);
        }

        protected virtual void Write_XML_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            InstructionCommon.Write_XML(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_XML_Internal(
            Instruction item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask)
        {
            switch (name)
            {
                case "Moves":
                    try
                    {
                        errorMask?.PushIndex((int)Instruction_FieldIndex.Moves);
                        if (ListXmlTranslation<Move>.Instance.Parse(
                            root: root,
                            enumer: out var MovesItem,
                            transl: LoquiXmlTranslation<Move>.Instance.Parse,
                            errorMask: errorMask))
                        {
                            item.Moves.SetTo(MovesItem);
                        }
                        else
                        {
                            item.Moves.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Substitutions":
                    try
                    {
                        errorMask?.PushIndex((int)Instruction_FieldIndex.Substitutions);
                        if (ListXmlTranslation<DataTarget>.Instance.Parse(
                            root: root,
                            enumer: out var SubstitutionsItem,
                            transl: LoquiXmlTranslation<DataTarget>.Instance.Parse,
                            errorMask: errorMask))
                        {
                            item.Substitutions.SetTo(SubstitutionsItem);
                        }
                        else
                        {
                            item.Substitutions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Additions":
                    try
                    {
                        errorMask?.PushIndex((int)Instruction_FieldIndex.Additions);
                        if (ListXmlTranslation<DataTarget>.Instance.Parse(
                            root: root,
                            enumer: out var AdditionsItem,
                            transl: LoquiXmlTranslation<DataTarget>.Instance.Parse,
                            errorMask: errorMask))
                        {
                            item.Additions.SetTo(AdditionsItem);
                        }
                        else
                        {
                            item.Additions.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkipSourceSections":
                    try
                    {
                        errorMask?.PushIndex((int)Instruction_FieldIndex.SkipSourceSections);
                        if (ListXmlTranslation<RangeInt64>.Instance.Parse(
                            root: root,
                            enumer: out var SkipSourceSectionsItem,
                            transl: RangeInt64XmlTranslation.Instance.Parse,
                            errorMask: errorMask))
                        {
                            item.SkipSourceSections.SetTo(SkipSourceSectionsItem);
                        }
                        else
                        {
                            item.SkipSourceSections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkipOutputSections":
                    try
                    {
                        errorMask?.PushIndex((int)Instruction_FieldIndex.SkipOutputSections);
                        if (ListXmlTranslation<RangeInt64>.Instance.Parse(
                            root: root,
                            enumer: out var SkipOutputSectionsItem,
                            transl: RangeInt64XmlTranslation.Instance.Parse,
                            errorMask: errorMask))
                        {
                            item.SkipOutputSections.SetTo(SkipOutputSectionsItem);
                        }
                        else
                        {
                            item.SkipOutputSections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "IgnoreDifferenceSections":
                    try
                    {
                        errorMask?.PushIndex((int)Instruction_FieldIndex.IgnoreDifferenceSections);
                        if (ListXmlTranslation<RangeInt64>.Instance.Parse(
                            root: root,
                            enumer: out var IgnoreDifferenceSectionsItem,
                            transl: RangeInt64XmlTranslation.Instance.Parse,
                            errorMask: errorMask))
                        {
                            item.IgnoreDifferenceSections.SetTo(IgnoreDifferenceSectionsItem);
                        }
                        else
                        {
                            item.IgnoreDifferenceSections.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public Instruction Copy(
            Instruction_CopyMask copyMask = null,
            IInstructionGetter def = null)
        {
            return Instruction.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Instruction Copy(
            IInstruction item,
            Instruction_CopyMask copyMask = null,
            IInstructionGetter def = null)
        {
            Instruction ret;
            if (item.GetType().Equals(typeof(Instruction)))
            {
                ret = new Instruction();
            }
            else
            {
                ret = (Instruction)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Instruction Copy_ToLoqui(
            IInstructionGetter item,
            Instruction_CopyMask copyMask = null,
            IInstructionGetter def = null)
        {
            Instruction ret;
            if (item.GetType().Equals(typeof(Instruction)))
            {
                ret = new Instruction() as Instruction;
            }
            else
            {
                ret = (Instruction)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IInstructionGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IInstructionGetter rhs,
            Instruction_CopyMask copyMask,
            IInstructionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IInstructionGetter rhs,
            out Instruction_ErrorMask errorMask,
            Instruction_CopyMask copyMask = null,
            IInstructionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            InstructionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Instruction_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IInstructionGetter rhs,
            ErrorMaskBuilder errorMask,
            Instruction_CopyMask copyMask = null,
            IInstructionGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            InstructionCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    this._Moves.SetTo((IEnumerable<Move>)obj, cmds);
                    break;
                case Instruction_FieldIndex.Substitutions:
                    this._Substitutions.SetTo((IEnumerable<DataTarget>)obj, cmds);
                    break;
                case Instruction_FieldIndex.Additions:
                    this._Additions.SetTo((IEnumerable<DataTarget>)obj, cmds);
                    break;
                case Instruction_FieldIndex.SkipSourceSections:
                    this._SkipSourceSections.SetTo((IEnumerable<RangeInt64>)obj, cmds);
                    break;
                case Instruction_FieldIndex.SkipOutputSections:
                    this._SkipOutputSections.SetTo((IEnumerable<RangeInt64>)obj, cmds);
                    break;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    this._IgnoreDifferenceSections.SetTo((IEnumerable<RangeInt64>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            InstructionCommon.Clear(this, cmds);
        }


        public static Instruction Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Instruction();
            foreach (var pair in fields)
            {
                CopyInInternal_Instruction(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Instruction(Instruction obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Instruction_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    obj._Moves.SetTo((IEnumerable<Move>)pair.Value, null);
                    break;
                case Instruction_FieldIndex.Substitutions:
                    obj._Substitutions.SetTo((IEnumerable<DataTarget>)pair.Value, null);
                    break;
                case Instruction_FieldIndex.Additions:
                    obj._Additions.SetTo((IEnumerable<DataTarget>)pair.Value, null);
                    break;
                case Instruction_FieldIndex.SkipSourceSections:
                    obj._SkipSourceSections.SetTo((IEnumerable<RangeInt64>)pair.Value, null);
                    break;
                case Instruction_FieldIndex.SkipOutputSections:
                    obj._SkipOutputSections.SetTo((IEnumerable<RangeInt64>)pair.Value, null);
                    break;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    obj._IgnoreDifferenceSections.SetTo((IEnumerable<RangeInt64>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Instruction obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IInstruction : IInstructionGetter, ILoquiClass<IInstruction, IInstructionGetter>, ILoquiClass<Instruction, IInstructionGetter>
    {
        new INotifyingList<Move> Moves { get; }
        new INotifyingList<DataTarget> Substitutions { get; }
        new INotifyingList<DataTarget> Additions { get; }
        new INotifyingList<RangeInt64> SkipSourceSections { get; }
        new INotifyingList<RangeInt64> SkipOutputSections { get; }
        new INotifyingList<RangeInt64> IgnoreDifferenceSections { get; }
    }

    public partial interface IInstructionGetter : ILoquiObject
    {
        #region Moves
        INotifyingListGetter<Move> Moves { get; }
        #endregion
        #region Substitutions
        INotifyingListGetter<DataTarget> Substitutions { get; }
        #endregion
        #region Additions
        INotifyingListGetter<DataTarget> Additions { get; }
        #endregion
        #region SkipSourceSections
        INotifyingListGetter<RangeInt64> SkipSourceSections { get; }
        #endregion
        #region SkipOutputSections
        INotifyingListGetter<RangeInt64> SkipOutputSections { get; }
        #endregion
        #region IgnoreDifferenceSections
        INotifyingListGetter<RangeInt64> IgnoreDifferenceSections { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum Instruction_FieldIndex
    {
        Moves = 0,
        Substitutions = 1,
        Additions = 2,
        SkipSourceSections = 3,
        SkipOutputSections = 4,
        IgnoreDifferenceSections = 5,
    }
    #endregion

    #region Registration
    public class Instruction_Registration : ILoquiRegistration
    {
        public static readonly Instruction_Registration Instance = new Instruction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "85d3bf63-316f-466e-98a8-35e8421b96a8";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Instruction_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Instruction_ErrorMask);

        public static readonly Type ClassType = typeof(Instruction);

        public static readonly Type GetterType = typeof(IInstructionGetter);

        public static readonly Type SetterType = typeof(IInstruction);

        public static readonly Type CommonType = typeof(InstructionCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.Instruction";

        public const string Name = "Instruction";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MOVES":
                    return (ushort)Instruction_FieldIndex.Moves;
                case "SUBSTITUTIONS":
                    return (ushort)Instruction_FieldIndex.Substitutions;
                case "ADDITIONS":
                    return (ushort)Instruction_FieldIndex.Additions;
                case "SKIPSOURCESECTIONS":
                    return (ushort)Instruction_FieldIndex.SkipSourceSections;
                case "SKIPOUTPUTSECTIONS":
                    return (ushort)Instruction_FieldIndex.SkipOutputSections;
                case "IGNOREDIFFERENCESECTIONS":
                    return (ushort)Instruction_FieldIndex.IgnoreDifferenceSections;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                    return true;
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    return "Moves";
                case Instruction_FieldIndex.Substitutions:
                    return "Substitutions";
                case Instruction_FieldIndex.Additions:
                    return "Additions";
                case Instruction_FieldIndex.SkipSourceSections:
                    return "SkipSourceSections";
                case Instruction_FieldIndex.SkipOutputSections:
                    return "SkipOutputSections";
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return "IgnoreDifferenceSections";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    return typeof(NotifyingList<Move>);
                case Instruction_FieldIndex.Substitutions:
                    return typeof(NotifyingList<DataTarget>);
                case Instruction_FieldIndex.Additions:
                    return typeof(NotifyingList<DataTarget>);
                case Instruction_FieldIndex.SkipSourceSections:
                    return typeof(NotifyingList<RangeInt64>);
                case Instruction_FieldIndex.SkipOutputSections:
                    return typeof(NotifyingList<RangeInt64>);
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return typeof(NotifyingList<RangeInt64>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class InstructionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IInstruction item,
            IInstructionGetter rhs,
            IInstructionGetter def,
            ErrorMaskBuilder errorMask,
            Instruction_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Moves.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Instruction_FieldIndex.Moves);
                try
                {
                    item.Moves.SetToWithDefault(
                        rhs: rhs.Moves,
                        def: def?.Moves,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Moves.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(Move);
                                    return Move.Copy(
                                        r,
                                        copyMask?.Moves?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Moves.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Substitutions.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Instruction_FieldIndex.Substitutions);
                try
                {
                    item.Substitutions.SetToWithDefault(
                        rhs: rhs.Substitutions,
                        def: def?.Substitutions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Substitutions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(DataTarget);
                                    return DataTarget.Copy(
                                        r,
                                        copyMask?.Substitutions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Substitutions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.Additions.Overall != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Instruction_FieldIndex.Additions);
                try
                {
                    item.Additions.SetToWithDefault(
                        rhs: rhs.Additions,
                        def: def?.Additions,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Additions.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(DataTarget);
                                    return DataTarget.Copy(
                                        r,
                                        copyMask?.Additions?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Additions.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SkipSourceSections != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Instruction_FieldIndex.SkipSourceSections);
                try
                {
                    item.SkipSourceSections.SetToWithDefault(
                        rhs.SkipSourceSections,
                        def?.SkipSourceSections,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.SkipOutputSections != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Instruction_FieldIndex.SkipOutputSections);
                try
                {
                    item.SkipOutputSections.SetToWithDefault(
                        rhs.SkipOutputSections,
                        def?.SkipOutputSections,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
            if (copyMask?.IgnoreDifferenceSections != CopyOption.Skip)
            {
                errorMask.PushIndex((int)Instruction_FieldIndex.IgnoreDifferenceSections);
                try
                {
                    item.IgnoreDifferenceSections.SetToWithDefault(
                        rhs.IgnoreDifferenceSections,
                        def?.IgnoreDifferenceSections,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IInstruction obj,
            NotifyingFireParameters cmds = null)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IInstruction obj,
            NotifyingUnsetParameters cmds = null)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    obj.Moves.Unset(cmds);
                    break;
                case Instruction_FieldIndex.Substitutions:
                    obj.Substitutions.Unset(cmds);
                    break;
                case Instruction_FieldIndex.Additions:
                    obj.Additions.Unset(cmds);
                    break;
                case Instruction_FieldIndex.SkipSourceSections:
                    obj.SkipSourceSections.Unset(cmds);
                    break;
                case Instruction_FieldIndex.SkipOutputSections:
                    obj.SkipOutputSections.Unset(cmds);
                    break;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    obj.IgnoreDifferenceSections.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IInstruction obj)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                case Instruction_FieldIndex.Substitutions:
                case Instruction_FieldIndex.Additions:
                case Instruction_FieldIndex.SkipSourceSections:
                case Instruction_FieldIndex.SkipOutputSections:
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IInstructionGetter obj)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    return obj.Moves;
                case Instruction_FieldIndex.Substitutions:
                    return obj.Substitutions;
                case Instruction_FieldIndex.Additions:
                    return obj.Additions;
                case Instruction_FieldIndex.SkipSourceSections:
                    return obj.SkipSourceSections;
                case Instruction_FieldIndex.SkipOutputSections:
                    return obj.SkipOutputSections;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return obj.IgnoreDifferenceSections;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IInstruction item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Moves.Unset(cmds.ToUnsetParams());
            item.Substitutions.Unset(cmds.ToUnsetParams());
            item.Additions.Unset(cmds.ToUnsetParams());
            item.SkipSourceSections.Unset(cmds.ToUnsetParams());
            item.SkipOutputSections.Unset(cmds.ToUnsetParams());
            item.IgnoreDifferenceSections.Unset(cmds.ToUnsetParams());
        }

        public static Instruction_Mask<bool> GetEqualsMask(
            this IInstructionGetter item,
            IInstructionGetter rhs)
        {
            var ret = new Instruction_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IInstructionGetter item,
            IInstructionGetter rhs,
            Instruction_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Moves = new MaskItem<bool, IEnumerable<MaskItem<bool, Move_Mask<bool>>>>();
            ret.Moves.Specific = item.Moves.SelectAgainst<Move, MaskItem<bool, Move_Mask<bool>>>(rhs.Moves, ((l, r) =>
            {
                MaskItem<bool, Move_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, Move_Mask<bool>>();
                itemRet.Specific = MoveCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.Moves.Overall);
            ret.Moves.Overall = ret.Moves.Overall && ret.Moves.Specific.All((b) => b.Overall);
            ret.Substitutions = new MaskItem<bool, IEnumerable<MaskItem<bool, DataTarget_Mask<bool>>>>();
            ret.Substitutions.Specific = item.Substitutions.SelectAgainst<DataTarget, MaskItem<bool, DataTarget_Mask<bool>>>(rhs.Substitutions, ((l, r) =>
            {
                MaskItem<bool, DataTarget_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, DataTarget_Mask<bool>>();
                itemRet.Specific = DataTargetCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.Substitutions.Overall);
            ret.Substitutions.Overall = ret.Substitutions.Overall && ret.Substitutions.Specific.All((b) => b.Overall);
            ret.Additions = new MaskItem<bool, IEnumerable<MaskItem<bool, DataTarget_Mask<bool>>>>();
            ret.Additions.Specific = item.Additions.SelectAgainst<DataTarget, MaskItem<bool, DataTarget_Mask<bool>>>(rhs.Additions, ((l, r) =>
            {
                MaskItem<bool, DataTarget_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, DataTarget_Mask<bool>>();
                itemRet.Specific = DataTargetCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.Additions.Overall);
            ret.Additions.Overall = ret.Additions.Overall && ret.Additions.Specific.All((b) => b.Overall);
            ret.SkipSourceSections = new MaskItem<bool, IEnumerable<bool>>();
            ret.SkipSourceSections.Specific = item.SkipSourceSections.SelectAgainst<RangeInt64, bool>(rhs.SkipSourceSections, ((l, r) => object.Equals(l, r)), out ret.SkipSourceSections.Overall);
            ret.SkipSourceSections.Overall = ret.SkipSourceSections.Overall && ret.SkipSourceSections.Specific.All((b) => b);
            ret.SkipOutputSections = new MaskItem<bool, IEnumerable<bool>>();
            ret.SkipOutputSections.Specific = item.SkipOutputSections.SelectAgainst<RangeInt64, bool>(rhs.SkipOutputSections, ((l, r) => object.Equals(l, r)), out ret.SkipOutputSections.Overall);
            ret.SkipOutputSections.Overall = ret.SkipOutputSections.Overall && ret.SkipOutputSections.Specific.All((b) => b);
            ret.IgnoreDifferenceSections = new MaskItem<bool, IEnumerable<bool>>();
            ret.IgnoreDifferenceSections.Specific = item.IgnoreDifferenceSections.SelectAgainst<RangeInt64, bool>(rhs.IgnoreDifferenceSections, ((l, r) => object.Equals(l, r)), out ret.IgnoreDifferenceSections.Overall);
            ret.IgnoreDifferenceSections.Overall = ret.IgnoreDifferenceSections.Overall && ret.IgnoreDifferenceSections.Specific.All((b) => b);
        }

        public static string ToString(
            this IInstructionGetter item,
            string name = null,
            Instruction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IInstructionGetter item,
            FileGeneration fg,
            string name = null,
            Instruction_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Instruction)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Instruction)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Moves?.Overall ?? true)
                {
                    fg.AppendLine("Moves =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Moves)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Substitutions?.Overall ?? true)
                {
                    fg.AppendLine("Substitutions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Substitutions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Additions?.Overall ?? true)
                {
                    fg.AppendLine("Additions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Additions)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkipSourceSections?.Overall ?? true)
                {
                    fg.AppendLine("SkipSourceSections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SkipSourceSections)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkipOutputSections?.Overall ?? true)
                {
                    fg.AppendLine("SkipOutputSections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.SkipOutputSections)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.IgnoreDifferenceSections?.Overall ?? true)
                {
                    fg.AppendLine("IgnoreDifferenceSections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.IgnoreDifferenceSections)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IInstructionGetter item,
            Instruction_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Instruction_Mask<bool> GetHasBeenSetMask(IInstructionGetter item)
        {
            var ret = new Instruction_Mask<bool>();
            ret.Moves = new MaskItem<bool, IEnumerable<MaskItem<bool, Move_Mask<bool>>>>(item.Moves.HasBeenSet, item.Moves.Select((i) => new MaskItem<bool, Move_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Substitutions = new MaskItem<bool, IEnumerable<MaskItem<bool, DataTarget_Mask<bool>>>>(item.Substitutions.HasBeenSet, item.Substitutions.Select((i) => new MaskItem<bool, DataTarget_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Additions = new MaskItem<bool, IEnumerable<MaskItem<bool, DataTarget_Mask<bool>>>>(item.Additions.HasBeenSet, item.Additions.Select((i) => new MaskItem<bool, DataTarget_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.SkipSourceSections = new MaskItem<bool, IEnumerable<bool>>(item.SkipSourceSections.HasBeenSet, null);
            ret.SkipOutputSections = new MaskItem<bool, IEnumerable<bool>>(item.SkipOutputSections.HasBeenSet, null);
            ret.IgnoreDifferenceSections = new MaskItem<bool, IEnumerable<bool>>(item.IgnoreDifferenceSections.HasBeenSet, null);
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XElement node,
            IInstructionGetter item,
            bool doMasks,
            out Instruction_ErrorMask errorMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_XML(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder);
            errorMask = Instruction_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_XML(
            XElement node,
            IInstructionGetter item,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.Instruction");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.Instruction");
            }
            ListXmlTranslation<Move>.Instance.Write(
                node: elem,
                name: nameof(item.Moves),
                item: item.Moves,
                fieldIndex: (int)Instruction_FieldIndex.Moves,
                errorMask: errorMask,
                transl: (XElement subNode, Move subItem, ErrorMaskBuilder listSubMask) =>
                {
                    LoquiXmlTranslation<Move>.Instance.Write(
                        node: subNode,
                        item: subItem,
                        name: "Item",
                        errorMask: listSubMask);
                }
                );
            ListXmlTranslation<DataTarget>.Instance.Write(
                node: elem,
                name: nameof(item.Substitutions),
                item: item.Substitutions,
                fieldIndex: (int)Instruction_FieldIndex.Substitutions,
                errorMask: errorMask,
                transl: (XElement subNode, DataTarget subItem, ErrorMaskBuilder listSubMask) =>
                {
                    LoquiXmlTranslation<DataTarget>.Instance.Write(
                        node: subNode,
                        item: subItem,
                        name: "Item",
                        errorMask: listSubMask);
                }
                );
            ListXmlTranslation<DataTarget>.Instance.Write(
                node: elem,
                name: nameof(item.Additions),
                item: item.Additions,
                fieldIndex: (int)Instruction_FieldIndex.Additions,
                errorMask: errorMask,
                transl: (XElement subNode, DataTarget subItem, ErrorMaskBuilder listSubMask) =>
                {
                    LoquiXmlTranslation<DataTarget>.Instance.Write(
                        node: subNode,
                        item: subItem,
                        name: "Item",
                        errorMask: listSubMask);
                }
                );
            ListXmlTranslation<RangeInt64>.Instance.Write(
                node: elem,
                name: nameof(item.SkipSourceSections),
                item: item.SkipSourceSections,
                fieldIndex: (int)Instruction_FieldIndex.SkipSourceSections,
                errorMask: errorMask,
                transl: (XElement subNode, RangeInt64 subItem, ErrorMaskBuilder listSubMask) =>
                {
                    RangeInt64XmlTranslation.Instance.Write(
                        node: subNode,
                        name: "Item",
                        item: subItem,
                        errorMask: listSubMask);
                }
                );
            ListXmlTranslation<RangeInt64>.Instance.Write(
                node: elem,
                name: nameof(item.SkipOutputSections),
                item: item.SkipOutputSections,
                fieldIndex: (int)Instruction_FieldIndex.SkipOutputSections,
                errorMask: errorMask,
                transl: (XElement subNode, RangeInt64 subItem, ErrorMaskBuilder listSubMask) =>
                {
                    RangeInt64XmlTranslation.Instance.Write(
                        node: subNode,
                        name: "Item",
                        item: subItem,
                        errorMask: listSubMask);
                }
                );
            ListXmlTranslation<RangeInt64>.Instance.Write(
                node: elem,
                name: nameof(item.IgnoreDifferenceSections),
                item: item.IgnoreDifferenceSections,
                fieldIndex: (int)Instruction_FieldIndex.IgnoreDifferenceSections,
                errorMask: errorMask,
                transl: (XElement subNode, RangeInt64 subItem, ErrorMaskBuilder listSubMask) =>
                {
                    RangeInt64XmlTranslation.Instance.Write(
                        node: subNode,
                        name: "Item",
                        item: subItem,
                        errorMask: listSubMask);
                }
                );
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Instruction_Mask<T> : IMask<T>, IEquatable<Instruction_Mask<T>>
    {
        #region Ctors
        public Instruction_Mask()
        {
        }

        public Instruction_Mask(T initialValue)
        {
            this.Moves = new MaskItem<T, IEnumerable<MaskItem<T, Move_Mask<T>>>>(initialValue, null);
            this.Substitutions = new MaskItem<T, IEnumerable<MaskItem<T, DataTarget_Mask<T>>>>(initialValue, null);
            this.Additions = new MaskItem<T, IEnumerable<MaskItem<T, DataTarget_Mask<T>>>>(initialValue, null);
            this.SkipSourceSections = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.SkipOutputSections = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.IgnoreDifferenceSections = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, Move_Mask<T>>>> Moves;
        public MaskItem<T, IEnumerable<MaskItem<T, DataTarget_Mask<T>>>> Substitutions;
        public MaskItem<T, IEnumerable<MaskItem<T, DataTarget_Mask<T>>>> Additions;
        public MaskItem<T, IEnumerable<T>> SkipSourceSections;
        public MaskItem<T, IEnumerable<T>> SkipOutputSections;
        public MaskItem<T, IEnumerable<T>> IgnoreDifferenceSections;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Instruction_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Instruction_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Moves, rhs.Moves)) return false;
            if (!object.Equals(this.Substitutions, rhs.Substitutions)) return false;
            if (!object.Equals(this.Additions, rhs.Additions)) return false;
            if (!object.Equals(this.SkipSourceSections, rhs.SkipSourceSections)) return false;
            if (!object.Equals(this.SkipOutputSections, rhs.SkipOutputSections)) return false;
            if (!object.Equals(this.IgnoreDifferenceSections, rhs.IgnoreDifferenceSections)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Moves?.GetHashCode());
            ret = ret.CombineHashCode(this.Substitutions?.GetHashCode());
            ret = ret.CombineHashCode(this.Additions?.GetHashCode());
            ret = ret.CombineHashCode(this.SkipSourceSections?.GetHashCode());
            ret = ret.CombineHashCode(this.SkipOutputSections?.GetHashCode());
            ret = ret.CombineHashCode(this.IgnoreDifferenceSections?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (this.Moves != null)
            {
                if (!eval(this.Moves.Overall)) return false;
                if (this.Moves.Specific != null)
                {
                    foreach (var item in this.Moves.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Substitutions != null)
            {
                if (!eval(this.Substitutions.Overall)) return false;
                if (this.Substitutions.Specific != null)
                {
                    foreach (var item in this.Substitutions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.Additions != null)
            {
                if (!eval(this.Additions.Overall)) return false;
                if (this.Additions.Specific != null)
                {
                    foreach (var item in this.Additions.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            if (this.SkipSourceSections != null)
            {
                if (!eval(this.SkipSourceSections.Overall)) return false;
                if (this.SkipSourceSections.Specific != null)
                {
                    foreach (var item in this.SkipSourceSections.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.SkipOutputSections != null)
            {
                if (!eval(this.SkipOutputSections.Overall)) return false;
                if (this.SkipOutputSections.Specific != null)
                {
                    foreach (var item in this.SkipOutputSections.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (this.IgnoreDifferenceSections != null)
            {
                if (!eval(this.IgnoreDifferenceSections.Overall)) return false;
                if (this.IgnoreDifferenceSections.Specific != null)
                {
                    foreach (var item in this.IgnoreDifferenceSections.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public Instruction_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Instruction_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Instruction_Mask<R> obj, Func<T, R> eval)
        {
            if (Moves != null)
            {
                obj.Moves = new MaskItem<R, IEnumerable<MaskItem<R, Move_Mask<R>>>>();
                obj.Moves.Overall = eval(this.Moves.Overall);
                if (Moves.Specific != null)
                {
                    List<MaskItem<R, Move_Mask<R>>> l = new List<MaskItem<R, Move_Mask<R>>>();
                    obj.Moves.Specific = l;
                    foreach (var item in Moves.Specific)
                    {
                        MaskItem<R, Move_Mask<R>> mask = default(MaskItem<R, Move_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Move_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Substitutions != null)
            {
                obj.Substitutions = new MaskItem<R, IEnumerable<MaskItem<R, DataTarget_Mask<R>>>>();
                obj.Substitutions.Overall = eval(this.Substitutions.Overall);
                if (Substitutions.Specific != null)
                {
                    List<MaskItem<R, DataTarget_Mask<R>>> l = new List<MaskItem<R, DataTarget_Mask<R>>>();
                    obj.Substitutions.Specific = l;
                    foreach (var item in Substitutions.Specific)
                    {
                        MaskItem<R, DataTarget_Mask<R>> mask = default(MaskItem<R, DataTarget_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, DataTarget_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Additions != null)
            {
                obj.Additions = new MaskItem<R, IEnumerable<MaskItem<R, DataTarget_Mask<R>>>>();
                obj.Additions.Overall = eval(this.Additions.Overall);
                if (Additions.Specific != null)
                {
                    List<MaskItem<R, DataTarget_Mask<R>>> l = new List<MaskItem<R, DataTarget_Mask<R>>>();
                    obj.Additions.Specific = l;
                    foreach (var item in Additions.Specific)
                    {
                        MaskItem<R, DataTarget_Mask<R>> mask = default(MaskItem<R, DataTarget_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, DataTarget_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (SkipSourceSections != null)
            {
                obj.SkipSourceSections = new MaskItem<R, IEnumerable<R>>();
                obj.SkipSourceSections.Overall = eval(this.SkipSourceSections.Overall);
                if (SkipSourceSections.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.SkipSourceSections.Specific = l;
                    foreach (var item in SkipSourceSections.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (SkipOutputSections != null)
            {
                obj.SkipOutputSections = new MaskItem<R, IEnumerable<R>>();
                obj.SkipOutputSections.Overall = eval(this.SkipOutputSections.Overall);
                if (SkipOutputSections.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.SkipOutputSections.Specific = l;
                    foreach (var item in SkipOutputSections.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (IgnoreDifferenceSections != null)
            {
                obj.IgnoreDifferenceSections = new MaskItem<R, IEnumerable<R>>();
                obj.IgnoreDifferenceSections.Overall = eval(this.IgnoreDifferenceSections.Overall);
                if (IgnoreDifferenceSections.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.IgnoreDifferenceSections.Specific = l;
                    foreach (var item in IgnoreDifferenceSections.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
            this.Moves.Specific = null;
            this.Substitutions.Specific = null;
            this.Additions.Specific = null;
            this.SkipSourceSections.Specific = null;
            this.SkipOutputSections.Specific = null;
            this.IgnoreDifferenceSections.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Instruction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Instruction_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Instruction_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Moves?.Overall ?? true)
                {
                    fg.AppendLine("Moves =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Moves.Overall != null)
                        {
                            fg.AppendLine(Moves.Overall.ToString());
                        }
                        if (Moves.Specific != null)
                        {
                            foreach (var subItem in Moves.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Substitutions?.Overall ?? true)
                {
                    fg.AppendLine("Substitutions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Substitutions.Overall != null)
                        {
                            fg.AppendLine(Substitutions.Overall.ToString());
                        }
                        if (Substitutions.Specific != null)
                        {
                            foreach (var subItem in Substitutions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Additions?.Overall ?? true)
                {
                    fg.AppendLine("Additions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Additions.Overall != null)
                        {
                            fg.AppendLine(Additions.Overall.ToString());
                        }
                        if (Additions.Specific != null)
                        {
                            foreach (var subItem in Additions.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkipSourceSections?.Overall ?? true)
                {
                    fg.AppendLine("SkipSourceSections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SkipSourceSections.Overall != null)
                        {
                            fg.AppendLine(SkipSourceSections.Overall.ToString());
                        }
                        if (SkipSourceSections.Specific != null)
                        {
                            foreach (var subItem in SkipSourceSections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.SkipOutputSections?.Overall ?? true)
                {
                    fg.AppendLine("SkipOutputSections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (SkipOutputSections.Overall != null)
                        {
                            fg.AppendLine(SkipOutputSections.Overall.ToString());
                        }
                        if (SkipOutputSections.Specific != null)
                        {
                            foreach (var subItem in SkipOutputSections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.IgnoreDifferenceSections?.Overall ?? true)
                {
                    fg.AppendLine("IgnoreDifferenceSections =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (IgnoreDifferenceSections.Overall != null)
                        {
                            fg.AppendLine(IgnoreDifferenceSections.Overall.ToString());
                        }
                        if (IgnoreDifferenceSections.Specific != null)
                        {
                            foreach (var subItem in IgnoreDifferenceSections.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Instruction_ErrorMask : IErrorMask, IErrorMask<Instruction_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Move_ErrorMask>>> Moves;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>> Substitutions;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>> Additions;
        public MaskItem<Exception, IEnumerable<Exception>> SkipSourceSections;
        public MaskItem<Exception, IEnumerable<Exception>> SkipOutputSections;
        public MaskItem<Exception, IEnumerable<Exception>> IgnoreDifferenceSections;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    return Moves;
                case Instruction_FieldIndex.Substitutions:
                    return Substitutions;
                case Instruction_FieldIndex.Additions:
                    return Additions;
                case Instruction_FieldIndex.SkipSourceSections:
                    return SkipSourceSections;
                case Instruction_FieldIndex.SkipOutputSections:
                    return SkipOutputSections;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return IgnoreDifferenceSections;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    this.Moves = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Move_ErrorMask>>>(ex, null);
                    break;
                case Instruction_FieldIndex.Substitutions:
                    this.Substitutions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>>(ex, null);
                    break;
                case Instruction_FieldIndex.Additions:
                    this.Additions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>>(ex, null);
                    break;
                case Instruction_FieldIndex.SkipSourceSections:
                    this.SkipSourceSections = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Instruction_FieldIndex.SkipOutputSections:
                    this.SkipOutputSections = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    this.IgnoreDifferenceSections = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            Instruction_FieldIndex enu = (Instruction_FieldIndex)index;
            switch (enu)
            {
                case Instruction_FieldIndex.Moves:
                    this.Moves = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Move_ErrorMask>>>)obj;
                    break;
                case Instruction_FieldIndex.Substitutions:
                    this.Substitutions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>>)obj;
                    break;
                case Instruction_FieldIndex.Additions:
                    this.Additions = (MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>>)obj;
                    break;
                case Instruction_FieldIndex.SkipSourceSections:
                    this.SkipSourceSections = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Instruction_FieldIndex.SkipOutputSections:
                    this.SkipOutputSections = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    this.IgnoreDifferenceSections = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (Moves != null) return true;
            if (Substitutions != null) return true;
            if (Additions != null) return true;
            if (SkipSourceSections != null) return true;
            if (SkipOutputSections != null) return true;
            if (IgnoreDifferenceSections != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("Instruction_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine("Moves =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Moves.Overall != null)
                {
                    fg.AppendLine(Moves.Overall.ToString());
                }
                if (Moves.Specific != null)
                {
                    foreach (var subItem in Moves.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Substitutions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Substitutions.Overall != null)
                {
                    fg.AppendLine(Substitutions.Overall.ToString());
                }
                if (Substitutions.Specific != null)
                {
                    foreach (var subItem in Substitutions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Additions =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Additions.Overall != null)
                {
                    fg.AppendLine(Additions.Overall.ToString());
                }
                if (Additions.Specific != null)
                {
                    foreach (var subItem in Additions.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("SkipSourceSections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SkipSourceSections.Overall != null)
                {
                    fg.AppendLine(SkipSourceSections.Overall.ToString());
                }
                if (SkipSourceSections.Specific != null)
                {
                    foreach (var subItem in SkipSourceSections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("SkipOutputSections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (SkipOutputSections.Overall != null)
                {
                    fg.AppendLine(SkipOutputSections.Overall.ToString());
                }
                if (SkipOutputSections.Specific != null)
                {
                    foreach (var subItem in SkipOutputSections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("IgnoreDifferenceSections =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (IgnoreDifferenceSections.Overall != null)
                {
                    fg.AppendLine(IgnoreDifferenceSections.Overall.ToString());
                }
                if (IgnoreDifferenceSections.Specific != null)
                {
                    foreach (var subItem in IgnoreDifferenceSections.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Instruction_ErrorMask Combine(Instruction_ErrorMask rhs)
        {
            var ret = new Instruction_ErrorMask();
            ret.Moves = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Move_ErrorMask>>>(this.Moves.Overall.Combine(rhs.Moves.Overall), new List<MaskItem<Exception, Move_ErrorMask>>(this.Moves.Specific.And(rhs.Moves.Specific)));
            ret.Substitutions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>>(this.Substitutions.Overall.Combine(rhs.Substitutions.Overall), new List<MaskItem<Exception, DataTarget_ErrorMask>>(this.Substitutions.Specific.And(rhs.Substitutions.Specific)));
            ret.Additions = new MaskItem<Exception, IEnumerable<MaskItem<Exception, DataTarget_ErrorMask>>>(this.Additions.Overall.Combine(rhs.Additions.Overall), new List<MaskItem<Exception, DataTarget_ErrorMask>>(this.Additions.Specific.And(rhs.Additions.Specific)));
            ret.SkipSourceSections = new MaskItem<Exception, IEnumerable<Exception>>(this.SkipSourceSections.Overall.Combine(rhs.SkipSourceSections.Overall), new List<Exception>(this.SkipSourceSections.Specific.And(rhs.SkipSourceSections.Specific)));
            ret.SkipOutputSections = new MaskItem<Exception, IEnumerable<Exception>>(this.SkipOutputSections.Overall.Combine(rhs.SkipOutputSections.Overall), new List<Exception>(this.SkipOutputSections.Specific.And(rhs.SkipOutputSections.Specific)));
            ret.IgnoreDifferenceSections = new MaskItem<Exception, IEnumerable<Exception>>(this.IgnoreDifferenceSections.Overall.Combine(rhs.IgnoreDifferenceSections.Overall), new List<Exception>(this.IgnoreDifferenceSections.Specific.And(rhs.IgnoreDifferenceSections.Specific)));
            return ret;
        }
        public static Instruction_ErrorMask Combine(Instruction_ErrorMask lhs, Instruction_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Instruction_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Instruction_ErrorMask();
        }
        #endregion

    }
    public class Instruction_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, Move_CopyMask> Moves;
        public MaskItem<CopyOption, DataTarget_CopyMask> Substitutions;
        public MaskItem<CopyOption, DataTarget_CopyMask> Additions;
        public CopyOption SkipSourceSections;
        public CopyOption SkipOutputSections;
        public CopyOption IgnoreDifferenceSections;
        #endregion

    }
    #endregion



    #endregion

}
