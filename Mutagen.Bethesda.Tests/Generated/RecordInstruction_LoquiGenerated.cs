/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class RecordInstruction : Instruction, IRecordInstruction, ILoquiObjectSetter, IEquatable<RecordInstruction>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RecordInstruction_Registration.Instance;
        public new static RecordInstruction_Registration Registration => RecordInstruction_Registration.Instance;

        #region Ctor
        public RecordInstruction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Record
        public FormID Record { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => RecordInstructionCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => RecordInstructionCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => RecordInstructionCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            RecordInstructionCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return RecordInstructionCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            RecordInstruction_Mask<bool> printMask = null)
        {
            return RecordInstructionCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            RecordInstructionCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new RecordInstruction_Mask<bool> GetHasBeenSetMask()
        {
            return RecordInstructionCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RecordInstruction rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RecordInstruction rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (Record != rhs.Record) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Record).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static RecordInstruction Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static RecordInstruction Create_XML(
            XElement root,
            out RecordInstruction_ErrorMask errorMask,
            bool doMasks = true)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (RecordInstruction Object, RecordInstruction_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            RecordInstruction_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RecordInstruction_ErrorMask()) : default(Func<RecordInstruction_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static RecordInstruction Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static RecordInstruction Create_XML(
            string path,
            out RecordInstruction_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static RecordInstruction Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static RecordInstruction Create_XML(
            Stream stream,
            out RecordInstruction_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RecordInstruction, RecordInstruction_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out RecordInstruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<RecordInstruction, RecordInstruction_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out RecordInstruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out RecordInstruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML(
            XElement root,
            out Instruction_ErrorMask errorMask,
            NotifyingFireParameters cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out RecordInstruction_ErrorMask errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out RecordInstruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            errorMask = this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: doMasks) as RecordInstruction_ErrorMask;
        }

        public virtual void Write_XML(
            string path,
            out RecordInstruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out RecordInstruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_XML(
            XmlWriter writer,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            Write_XML(
                writer: writer,
                name: name,
                errorMask: out RecordInstruction_ErrorMask errMask,
                doMasks: doMasks);
            errorMask = errMask;
        }

        public override void Write_XML(
            string path,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            Write_XML(
                path: path,
                name: name,
                errorMask: out RecordInstruction_ErrorMask errMask,
                doMasks: doMasks);
            errorMask = errMask;
        }

        public override void Write_XML(
            Stream stream,
            out Instruction_ErrorMask errorMask,
            bool doMasks = true,
            string name = null)
        {
            Write_XML(
                stream: stream,
                name: name,
                errorMask: out RecordInstruction_ErrorMask errMask,
                doMasks: doMasks);
            errorMask = errMask;
        }

        #endregion

        protected override object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            RecordInstructionCommon.Write_XML(
                item: this,
                doMasks: doMasks,
                writer: writer,
                name: name,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static RecordInstruction Create_XML_Internal(
            XElement root,
            Func<RecordInstruction_ErrorMask> errorMask)
        {
            var ret = new RecordInstruction();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            RecordInstruction item,
            XElement root,
            string name,
            Func<RecordInstruction_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "Record":
                    item.Record = FormIDXmlTranslation.Instance.ParseNonNull(
                        root,
                        fieldIndex: (int)RecordInstruction_FieldIndex.Record,
                        errorMask: errorMask).GetOrDefault(item.Record);
                    break;
                default:
                    Instruction.Fill_XML_Internal(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        public RecordInstruction Copy(
            RecordInstruction_CopyMask copyMask = null,
            IRecordInstructionGetter def = null)
        {
            return RecordInstruction.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RecordInstruction Copy(
            IRecordInstruction item,
            RecordInstruction_CopyMask copyMask = null,
            IRecordInstructionGetter def = null)
        {
            RecordInstruction ret;
            if (item.GetType().Equals(typeof(RecordInstruction)))
            {
                ret = new RecordInstruction();
            }
            else
            {
                ret = (RecordInstruction)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            RecordInstruction_CopyMask copyMask = null,
            IRecordInstructionGetter def = null)
            where CopyType : class, IRecordInstruction
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(RecordInstruction)))
            {
                ret = new RecordInstruction() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static RecordInstruction Copy_ToLoqui(
            IRecordInstructionGetter item,
            RecordInstruction_CopyMask copyMask = null,
            IRecordInstructionGetter def = null)
        {
            RecordInstruction ret;
            if (item.GetType().Equals(typeof(RecordInstruction)))
            {
                ret = new RecordInstruction() as RecordInstruction;
            }
            else
            {
                ret = (RecordInstruction)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    this.Record = (FormID)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            RecordInstructionCommon.Clear(this, cmds);
        }


        public new static RecordInstruction Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RecordInstruction();
            foreach (var pair in fields)
            {
                CopyInInternal_RecordInstruction(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_RecordInstruction(RecordInstruction obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RecordInstruction_FieldIndex enu))
            {
                CopyInInternal_Instruction(obj, pair);
            }
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    obj.Record = (FormID)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, RecordInstruction obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IRecordInstruction : IRecordInstructionGetter, IInstruction, ILoquiClass<IRecordInstruction, IRecordInstructionGetter>, ILoquiClass<RecordInstruction, IRecordInstructionGetter>
    {
        new FormID Record { get; set; }

    }

    public interface IRecordInstructionGetter : IInstructionGetter
    {
        #region Record
        FormID Record { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum RecordInstruction_FieldIndex
    {
        Moves = 0,
        Substitutions = 1,
        Additions = 2,
        SkipSourceSections = 3,
        SkipOutputSections = 4,
        IgnoreDifferenceSections = 5,
        Record = 6,
    }
    #endregion

    #region Registration
    public class RecordInstruction_Registration : ILoquiRegistration
    {
        public static readonly RecordInstruction_Registration Instance = new RecordInstruction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "bf254321-e86f-49a5-9699-105f6b5d2457";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(RecordInstruction_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RecordInstruction_ErrorMask);

        public static readonly Type ClassType = typeof(RecordInstruction);

        public static readonly Type GetterType = typeof(IRecordInstructionGetter);

        public static readonly Type SetterType = typeof(IRecordInstruction);

        public static readonly Type CommonType = typeof(RecordInstructionCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.RecordInstruction";

        public const string Name = "RecordInstruction";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "RECORD":
                    return (ushort)RecordInstruction_FieldIndex.Record;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return false;
                default:
                    return Instruction_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return false;
                default:
                    return Instruction_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return false;
                default:
                    return Instruction_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return "Record";
                default:
                    return Instruction_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return false;
                default:
                    return Instruction_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return false;
                default:
                    return Instruction_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return typeof(FormID);
                default:
                    return Instruction_Registration.GetNthType(index);
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class RecordInstructionCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this IRecordInstruction item,
            IRecordInstructionGetter rhs,
            RecordInstruction_CopyMask copyMask = null,
            IRecordInstructionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            RecordInstructionCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRecordInstruction item,
            IRecordInstructionGetter rhs,
            out RecordInstruction_ErrorMask errorMask,
            RecordInstruction_CopyMask copyMask = null,
            IRecordInstructionGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            RecordInstructionCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this IRecordInstruction item,
            IRecordInstructionGetter rhs,
            IRecordInstructionGetter def,
            bool doMasks,
            out RecordInstruction_ErrorMask errorMask,
            RecordInstruction_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            RecordInstruction_ErrorMask retErrorMask = null;
            Func<RecordInstruction_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new RecordInstruction_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this IRecordInstruction item,
            IRecordInstructionGetter rhs,
            IRecordInstructionGetter def,
            bool doMasks,
            Func<RecordInstruction_ErrorMask> errorMask,
            RecordInstruction_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            InstructionCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.Record ?? true)
            {
                item.Record = rhs.Record;
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IRecordInstruction obj,
            NotifyingFireParameters cmds = null)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    InstructionCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IRecordInstruction obj,
            NotifyingUnsetParameters cmds = null)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    obj.Record = default(FormID);
                    break;
                default:
                    InstructionCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IRecordInstruction obj)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return true;
                default:
                    return InstructionCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            IRecordInstructionGetter obj)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return obj.Record;
                default:
                    return InstructionCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            IRecordInstruction item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Record = default(FormID);
        }

        public static RecordInstruction_Mask<bool> GetEqualsMask(
            this IRecordInstructionGetter item,
            IRecordInstructionGetter rhs)
        {
            var ret = new RecordInstruction_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IRecordInstructionGetter item,
            IRecordInstructionGetter rhs,
            RecordInstruction_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Record = item.Record == rhs.Record;
            InstructionCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this IRecordInstructionGetter item,
            string name = null,
            RecordInstruction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IRecordInstructionGetter item,
            FileGeneration fg,
            string name = null,
            RecordInstruction_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(RecordInstruction)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(RecordInstruction)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Record ?? true)
                {
                    fg.AppendLine($"Record => {item.Record}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IRecordInstructionGetter item,
            RecordInstruction_Mask<bool?> checkMask)
        {
            return true;
        }

        public static RecordInstruction_Mask<bool> GetHasBeenSetMask(IRecordInstructionGetter item)
        {
            var ret = new RecordInstruction_Mask<bool>();
            ret.Record = true;
            return ret;
        }

        public static RecordInstruction_FieldIndex? ConvertFieldIndex(Instruction_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static RecordInstruction_FieldIndex ConvertFieldIndex(Instruction_FieldIndex index)
        {
            switch (index)
            {
                case Instruction_FieldIndex.Moves:
                    return (RecordInstruction_FieldIndex)((int)index);
                case Instruction_FieldIndex.Substitutions:
                    return (RecordInstruction_FieldIndex)((int)index);
                case Instruction_FieldIndex.Additions:
                    return (RecordInstruction_FieldIndex)((int)index);
                case Instruction_FieldIndex.SkipSourceSections:
                    return (RecordInstruction_FieldIndex)((int)index);
                case Instruction_FieldIndex.SkipOutputSections:
                    return (RecordInstruction_FieldIndex)((int)index);
                case Instruction_FieldIndex.IgnoreDifferenceSections:
                    return (RecordInstruction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            IRecordInstructionGetter item,
            bool doMasks,
            out RecordInstruction_ErrorMask errorMask,
            string name = null)
        {
            RecordInstruction_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new RecordInstruction_ErrorMask()) : default(Func<RecordInstruction_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            IRecordInstructionGetter item,
            Func<RecordInstruction_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Tests.RecordInstruction"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Tests.RecordInstruction");
                    }
                    FormIDXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.Record),
                        item: item.Record,
                        fieldIndex: (int)RecordInstruction_FieldIndex.Record,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class RecordInstruction_Mask<T> : Instruction_Mask<T>, IMask<T>, IEquatable<RecordInstruction_Mask<T>>
    {
        #region Ctors
        public RecordInstruction_Mask()
        {
        }

        public RecordInstruction_Mask(T initialValue)
        {
            this.Record = initialValue;
        }
        #endregion

        #region Members
        public T Record;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RecordInstruction_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RecordInstruction_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.Record, rhs.Record)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Record?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.Record)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new RecordInstruction_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RecordInstruction_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RecordInstruction_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.Record = eval(this.Record);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RecordInstruction_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RecordInstruction_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RecordInstruction_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Record ?? true)
                {
                    fg.AppendLine($"Record => {Record}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RecordInstruction_ErrorMask : Instruction_ErrorMask, IErrorMask<RecordInstruction_ErrorMask>
    {
        #region Members
        public Exception Record;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    return Record;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    this.Record = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            RecordInstruction_FieldIndex enu = (RecordInstruction_FieldIndex)index;
            switch (enu)
            {
                case RecordInstruction_FieldIndex.Record:
                    this.Record = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (Record != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("RecordInstruction_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"Record => {Record}");
        }
        #endregion

        #region Combine
        public RecordInstruction_ErrorMask Combine(RecordInstruction_ErrorMask rhs)
        {
            var ret = new RecordInstruction_ErrorMask();
            ret.Record = this.Record.Combine(rhs.Record);
            return ret;
        }
        public static RecordInstruction_ErrorMask Combine(RecordInstruction_ErrorMask lhs, RecordInstruction_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class RecordInstruction_CopyMask : Instruction_CopyMask
    {
        #region Members
        public bool Record;
        #endregion

    }
    #endregion


    #endregion

}
