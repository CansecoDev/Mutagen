/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class CacheReuse :
        ICacheReuse,
        ILoquiObjectSetter<CacheReuse>,
        IEquatable<CacheReuse>,
        IEqualsMask
    {
        #region Ctor
        public CacheReuse()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ReuseAny
        public Boolean ReuseAny { get; set; } = default;
        #endregion
        #region ReuseDecompression
        public Boolean ReuseDecompression { get; set; } = default;
        #endregion
        #region ReuseAlignment
        public Boolean ReuseAlignment { get; set; } = default;
        #endregion
        #region ReuseProcessing
        public Boolean ReuseProcessing { get; set; } = default;
        #endregion

        #region To String
        public override string ToString()
        {
            return CacheReuseMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CacheReuseMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICacheReuseGetter rhs)) return false;
            return ((CacheReuseCommon)((ICacheReuseGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CacheReuse? obj)
        {
            return ((CacheReuseCommon)((ICacheReuseGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CacheReuseCommon)((ICacheReuseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ReuseAny = initialValue;
                this.ReuseDecompression = initialValue;
                this.ReuseAlignment = initialValue;
                this.ReuseProcessing = initialValue;
            }

            public Mask(
                TItem ReuseAny,
                TItem ReuseDecompression,
                TItem ReuseAlignment,
                TItem ReuseProcessing)
            {
                this.ReuseAny = ReuseAny;
                this.ReuseDecompression = ReuseDecompression;
                this.ReuseAlignment = ReuseAlignment;
                this.ReuseProcessing = ReuseProcessing;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ReuseAny;
            public TItem ReuseDecompression;
            public TItem ReuseAlignment;
            public TItem ReuseProcessing;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ReuseAny, rhs.ReuseAny)) return false;
                if (!object.Equals(this.ReuseDecompression, rhs.ReuseDecompression)) return false;
                if (!object.Equals(this.ReuseAlignment, rhs.ReuseAlignment)) return false;
                if (!object.Equals(this.ReuseProcessing, rhs.ReuseProcessing)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ReuseAny);
                hash.Add(this.ReuseDecompression);
                hash.Add(this.ReuseAlignment);
                hash.Add(this.ReuseProcessing);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ReuseAny)) return false;
                if (!eval(this.ReuseDecompression)) return false;
                if (!eval(this.ReuseAlignment)) return false;
                if (!eval(this.ReuseProcessing)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ReuseAny)) return true;
                if (eval(this.ReuseDecompression)) return true;
                if (eval(this.ReuseAlignment)) return true;
                if (eval(this.ReuseProcessing)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CacheReuse.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ReuseAny = eval(this.ReuseAny);
                obj.ReuseDecompression = eval(this.ReuseDecompression);
                obj.ReuseAlignment = eval(this.ReuseAlignment);
                obj.ReuseProcessing = eval(this.ReuseProcessing);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CacheReuse.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CacheReuse.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CacheReuse.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ReuseAny ?? true)
                    {
                        fg.AppendItem(ReuseAny, "ReuseAny");
                    }
                    if (printMask?.ReuseDecompression ?? true)
                    {
                        fg.AppendItem(ReuseDecompression, "ReuseDecompression");
                    }
                    if (printMask?.ReuseAlignment ?? true)
                    {
                        fg.AppendItem(ReuseAlignment, "ReuseAlignment");
                    }
                    if (printMask?.ReuseProcessing ?? true)
                    {
                        fg.AppendItem(ReuseProcessing, "ReuseProcessing");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ReuseAny;
            public Exception? ReuseDecompression;
            public Exception? ReuseAlignment;
            public Exception? ReuseProcessing;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
                switch (enu)
                {
                    case CacheReuse_FieldIndex.ReuseAny:
                        return ReuseAny;
                    case CacheReuse_FieldIndex.ReuseDecompression:
                        return ReuseDecompression;
                    case CacheReuse_FieldIndex.ReuseAlignment:
                        return ReuseAlignment;
                    case CacheReuse_FieldIndex.ReuseProcessing:
                        return ReuseProcessing;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
                switch (enu)
                {
                    case CacheReuse_FieldIndex.ReuseAny:
                        this.ReuseAny = ex;
                        break;
                    case CacheReuse_FieldIndex.ReuseDecompression:
                        this.ReuseDecompression = ex;
                        break;
                    case CacheReuse_FieldIndex.ReuseAlignment:
                        this.ReuseAlignment = ex;
                        break;
                    case CacheReuse_FieldIndex.ReuseProcessing:
                        this.ReuseProcessing = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
                switch (enu)
                {
                    case CacheReuse_FieldIndex.ReuseAny:
                        this.ReuseAny = (Exception?)obj;
                        break;
                    case CacheReuse_FieldIndex.ReuseDecompression:
                        this.ReuseDecompression = (Exception?)obj;
                        break;
                    case CacheReuse_FieldIndex.ReuseAlignment:
                        this.ReuseAlignment = (Exception?)obj;
                        break;
                    case CacheReuse_FieldIndex.ReuseProcessing:
                        this.ReuseProcessing = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ReuseAny != null) return true;
                if (ReuseDecompression != null) return true;
                if (ReuseAlignment != null) return true;
                if (ReuseProcessing != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(ReuseAny, "ReuseAny");
                fg.AppendItem(ReuseDecompression, "ReuseDecompression");
                fg.AppendItem(ReuseAlignment, "ReuseAlignment");
                fg.AppendItem(ReuseProcessing, "ReuseProcessing");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ReuseAny = this.ReuseAny.Combine(rhs.ReuseAny);
                ret.ReuseDecompression = this.ReuseDecompression.Combine(rhs.ReuseDecompression);
                ret.ReuseAlignment = this.ReuseAlignment.Combine(rhs.ReuseAlignment);
                ret.ReuseProcessing = this.ReuseProcessing.Combine(rhs.ReuseProcessing);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool ReuseAny;
            public bool ReuseDecompression;
            public bool ReuseAlignment;
            public bool ReuseProcessing;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.ReuseAny = defaultOn;
                this.ReuseDecompression = defaultOn;
                this.ReuseAlignment = defaultOn;
                this.ReuseProcessing = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ReuseAny, null));
                ret.Add((ReuseDecompression, null));
                ret.Add((ReuseAlignment, null));
                ret.Add((ReuseProcessing, null));
            }
        }
        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CacheReuseXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CacheReuseXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static CacheReuse CreateFromXml(
            XElement node,
            CacheReuse.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CacheReuse CreateFromXml(
            XElement node,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CacheReuse.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CacheReuse CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CacheReuse();
            ((CacheReuseSetterCommon)((ICacheReuseGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CacheReuse CreateFromXml(
            string path,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CacheReuse CreateFromXml(
            string path,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CacheReuse CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CacheReuse CreateFromXml(
            Stream stream,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CacheReuse CreateFromXml(
            Stream stream,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CacheReuse CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICacheReuseGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CacheReuseSetterCommon)((ICacheReuseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CacheReuse GetNew()
        {
            return new CacheReuse();
        }

    }
    #endregion

    #region Interface
    public partial interface ICacheReuse :
        ICacheReuseGetter,
        ILoquiObjectSetter<ICacheReuse>
    {
        new Boolean ReuseAny { get; set; }
        new Boolean ReuseDecompression { get; set; }
        new Boolean ReuseAlignment { get; set; }
        new Boolean ReuseProcessing { get; set; }
    }

    public partial interface ICacheReuseGetter :
        ILoquiObject,
        ILoquiObject<ICacheReuseGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => CacheReuse_Registration.Instance;
        Boolean ReuseAny { get; }
        Boolean ReuseDecompression { get; }
        Boolean ReuseAlignment { get; }
        Boolean ReuseProcessing { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CacheReuseMixIn
    {
        public static void Clear(this ICacheReuse item)
        {
            ((CacheReuseSetterCommon)((ICacheReuseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CacheReuse.Mask<bool> GetEqualsMask(
            this ICacheReuseGetter item,
            ICacheReuseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICacheReuseGetter item,
            string? name = null,
            CacheReuse.Mask<bool>? printMask = null)
        {
            return ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICacheReuseGetter item,
            FileGeneration fg,
            string? name = null,
            CacheReuse.Mask<bool>? printMask = null)
        {
            ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICacheReuseGetter item,
            CacheReuse.Mask<bool?> checkMask)
        {
            return ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CacheReuse.Mask<bool> GetHasBeenSetMask(this ICacheReuseGetter item)
        {
            var ret = new CacheReuse.Mask<bool>(false);
            ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICacheReuseGetter item,
            ICacheReuseGetter rhs)
        {
            return ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICacheReuse lhs,
            ICacheReuseGetter rhs)
        {
            ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ICacheReuse lhs,
            ICacheReuseGetter rhs,
            CacheReuse.TranslationMask? copyMask = null)
        {
            ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICacheReuse lhs,
            ICacheReuseGetter rhs,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CacheReuse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICacheReuse lhs,
            ICacheReuseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CacheReuse DeepCopy(
            this ICacheReuseGetter item,
            CacheReuse.TranslationMask? copyMask = null)
        {
            return ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CacheReuse DeepCopy(
            this ICacheReuseGetter item,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? copyMask = null)
        {
            return ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CacheReuse DeepCopy(
            this ICacheReuseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CacheReuseSetterTranslationCommon)((ICacheReuseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICacheReuse item,
            XElement node,
            CacheReuse.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICacheReuse item,
            XElement node,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CacheReuse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CacheReuseSetterCommon)((ICacheReuseGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            string path,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            string path,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            string path,
            ErrorMaskBuilder? errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            Stream stream,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            Stream stream,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICacheReuse item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CacheReuse.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum CacheReuse_FieldIndex
    {
        ReuseAny = 0,
        ReuseDecompression = 1,
        ReuseAlignment = 2,
        ReuseProcessing = 3,
    }
    #endregion

    #region Registration
    public partial class CacheReuse_Registration : ILoquiRegistration
    {
        public static readonly CacheReuse_Registration Instance = new CacheReuse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 7,
            version: 0);

        public const string GUID = "37625ad0-31c3-4779-b431-abbc89d3c2f8";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(CacheReuse.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CacheReuse.ErrorMask);

        public static readonly Type ClassType = typeof(CacheReuse);

        public static readonly Type GetterType = typeof(ICacheReuseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICacheReuse);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.CacheReuse";

        public const string Name = "CacheReuse";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REUSEANY":
                    return (ushort)CacheReuse_FieldIndex.ReuseAny;
                case "REUSEDECOMPRESSION":
                    return (ushort)CacheReuse_FieldIndex.ReuseDecompression;
                case "REUSEALIGNMENT":
                    return (ushort)CacheReuse_FieldIndex.ReuseAlignment;
                case "REUSEPROCESSING":
                    return (ushort)CacheReuse_FieldIndex.ReuseProcessing;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                case CacheReuse_FieldIndex.ReuseDecompression:
                case CacheReuse_FieldIndex.ReuseAlignment:
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                case CacheReuse_FieldIndex.ReuseDecompression:
                case CacheReuse_FieldIndex.ReuseAlignment:
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                case CacheReuse_FieldIndex.ReuseDecompression:
                case CacheReuse_FieldIndex.ReuseAlignment:
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                    return "ReuseAny";
                case CacheReuse_FieldIndex.ReuseDecompression:
                    return "ReuseDecompression";
                case CacheReuse_FieldIndex.ReuseAlignment:
                    return "ReuseAlignment";
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return "ReuseProcessing";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                case CacheReuse_FieldIndex.ReuseDecompression:
                case CacheReuse_FieldIndex.ReuseAlignment:
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                case CacheReuse_FieldIndex.ReuseDecompression:
                case CacheReuse_FieldIndex.ReuseAlignment:
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CacheReuse_FieldIndex enu = (CacheReuse_FieldIndex)index;
            switch (enu)
            {
                case CacheReuse_FieldIndex.ReuseAny:
                    return typeof(Boolean);
                case CacheReuse_FieldIndex.ReuseDecompression:
                    return typeof(Boolean);
                case CacheReuse_FieldIndex.ReuseAlignment:
                    return typeof(Boolean);
                case CacheReuse_FieldIndex.ReuseProcessing:
                    return typeof(Boolean);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CacheReuseXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CacheReuseSetterCommon
    {
        public static readonly CacheReuseSetterCommon Instance = new CacheReuseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICacheReuse item)
        {
            ClearPartial();
            item.ReuseAny = default;
            item.ReuseDecompression = default;
            item.ReuseAlignment = default;
            item.ReuseProcessing = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ICacheReuse item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CacheReuseXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class CacheReuseCommon
    {
        public static readonly CacheReuseCommon Instance = new CacheReuseCommon();

        public CacheReuse.Mask<bool> GetEqualsMask(
            ICacheReuseGetter item,
            ICacheReuseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CacheReuse.Mask<bool>(false);
            ((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICacheReuseGetter item,
            ICacheReuseGetter rhs,
            CacheReuse.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ReuseAny = item.ReuseAny == rhs.ReuseAny;
            ret.ReuseDecompression = item.ReuseDecompression == rhs.ReuseDecompression;
            ret.ReuseAlignment = item.ReuseAlignment == rhs.ReuseAlignment;
            ret.ReuseProcessing = item.ReuseProcessing == rhs.ReuseProcessing;
        }
        
        public string ToString(
            ICacheReuseGetter item,
            string? name = null,
            CacheReuse.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICacheReuseGetter item,
            FileGeneration fg,
            string? name = null,
            CacheReuse.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CacheReuse =>");
            }
            else
            {
                fg.AppendLine($"{name} (CacheReuse) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICacheReuseGetter item,
            FileGeneration fg,
            CacheReuse.Mask<bool>? printMask = null)
        {
            if (printMask?.ReuseAny ?? true)
            {
                fg.AppendItem(item.ReuseAny, "ReuseAny");
            }
            if (printMask?.ReuseDecompression ?? true)
            {
                fg.AppendItem(item.ReuseDecompression, "ReuseDecompression");
            }
            if (printMask?.ReuseAlignment ?? true)
            {
                fg.AppendItem(item.ReuseAlignment, "ReuseAlignment");
            }
            if (printMask?.ReuseProcessing ?? true)
            {
                fg.AppendItem(item.ReuseProcessing, "ReuseProcessing");
            }
        }
        
        public bool HasBeenSet(
            ICacheReuseGetter item,
            CacheReuse.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ICacheReuseGetter item,
            CacheReuse.Mask<bool> mask)
        {
            mask.ReuseAny = true;
            mask.ReuseDecompression = true;
            mask.ReuseAlignment = true;
            mask.ReuseProcessing = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICacheReuseGetter? lhs,
            ICacheReuseGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.ReuseAny != rhs.ReuseAny) return false;
            if (lhs.ReuseDecompression != rhs.ReuseDecompression) return false;
            if (lhs.ReuseAlignment != rhs.ReuseAlignment) return false;
            if (lhs.ReuseProcessing != rhs.ReuseProcessing) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICacheReuseGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ReuseAny);
            hash.Add(item.ReuseDecompression);
            hash.Add(item.ReuseAlignment);
            hash.Add(item.ReuseProcessing);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CacheReuse.GetNew();
        }
        
    }
    public partial class CacheReuseSetterTranslationCommon
    {
        public static readonly CacheReuseSetterTranslationCommon Instance = new CacheReuseSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICacheReuse item,
            ICacheReuseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseAny) ?? true))
            {
                item.ReuseAny = rhs.ReuseAny;
            }
            if ((copyMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseDecompression) ?? true))
            {
                item.ReuseDecompression = rhs.ReuseDecompression;
            }
            if ((copyMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseAlignment) ?? true))
            {
                item.ReuseAlignment = rhs.ReuseAlignment;
            }
            if ((copyMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseProcessing) ?? true))
            {
                item.ReuseProcessing = rhs.ReuseProcessing;
            }
        }
        
        #endregion
        
        public CacheReuse DeepCopy(
            ICacheReuseGetter item,
            CacheReuse.TranslationMask? copyMask = null)
        {
            CacheReuse ret = (CacheReuse)((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CacheReuse DeepCopy(
            ICacheReuseGetter item,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? copyMask = null)
        {
            CacheReuse ret = (CacheReuse)((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CacheReuse DeepCopy(
            ICacheReuseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CacheReuse ret = (CacheReuse)((CacheReuseCommon)((ICacheReuseGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class CacheReuse
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CacheReuse_Registration.Instance;
        public static CacheReuse_Registration Registration => CacheReuse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CacheReuseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CacheReuseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CacheReuseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICacheReuseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICacheReuseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICacheReuseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class CacheReuseXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CacheReuseXmlWriteTranslation Instance = new CacheReuseXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICacheReuseGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseAny) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseAny),
                    item: item.ReuseAny,
                    fieldIndex: (int)CacheReuse_FieldIndex.ReuseAny,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseDecompression) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseDecompression),
                    item: item.ReuseDecompression,
                    fieldIndex: (int)CacheReuse_FieldIndex.ReuseDecompression,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseAlignment) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseAlignment),
                    item: item.ReuseAlignment,
                    fieldIndex: (int)CacheReuse_FieldIndex.ReuseAlignment,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseProcessing) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseProcessing),
                    item: item.ReuseProcessing,
                    fieldIndex: (int)CacheReuse_FieldIndex.ReuseProcessing,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICacheReuseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.CacheReuse");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.CacheReuse");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICacheReuseGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICacheReuseGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ICacheReuseGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CacheReuseXmlCreateTranslation
    {
        public readonly static CacheReuseXmlCreateTranslation Instance = new CacheReuseXmlCreateTranslation();

        public static void FillPublicXml(
            ICacheReuse item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CacheReuseXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICacheReuse item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ReuseAny":
                    if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseAny) ?? true))
                    {
                        errorMask?.PushIndex((int)CacheReuse_FieldIndex.ReuseAny);
                        try
                        {
                            item.ReuseAny = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ReuseDecompression":
                    if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseDecompression) ?? true))
                    {
                        errorMask?.PushIndex((int)CacheReuse_FieldIndex.ReuseDecompression);
                        try
                        {
                            item.ReuseDecompression = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ReuseAlignment":
                    if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseAlignment) ?? true))
                    {
                        errorMask?.PushIndex((int)CacheReuse_FieldIndex.ReuseAlignment);
                        try
                        {
                            item.ReuseAlignment = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ReuseProcessing":
                    if ((translationMask?.GetShouldTranslate((int)CacheReuse_FieldIndex.ReuseProcessing) ?? true))
                    {
                        errorMask?.PushIndex((int)CacheReuse_FieldIndex.ReuseProcessing);
                        try
                        {
                            item.ReuseProcessing = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class CacheReuseXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICacheReuseGetter item,
            XElement node,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CacheReuseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CacheReuse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            string path,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            Stream stream,
            out CacheReuse.ErrorMask errorMask,
            CacheReuse.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((CacheReuseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            XElement node,
            string? name = null,
            CacheReuse.TranslationMask? translationMask = null)
        {
            ((CacheReuseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CacheReuseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICacheReuseGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CacheReuseXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#endregion

