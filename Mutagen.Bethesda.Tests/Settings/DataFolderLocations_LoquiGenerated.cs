/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class DataFolderLocations :
        LoquiNotifyingObject,
        IDataFolderLocationsInternal,
        ILoquiObjectSetter<DataFolderLocations>,
        IEquatable<DataFolderLocations>,
        IEqualsMask
    {
        #region Ctor
        public DataFolderLocations()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Oblivion
        private String _Oblivion;
        public String Oblivion
        {
            get => this._Oblivion;
            set => this.RaiseAndSetIfChanged(ref this._Oblivion, value, nameof(Oblivion));
        }
        #endregion
        #region Skyrim
        private String _Skyrim;
        public String Skyrim
        {
            get => this._Skyrim;
            set => this.RaiseAndSetIfChanged(ref this._Skyrim, value, nameof(Skyrim));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDataFolderLocationsInternalGetter)rhs, include);
        #region To String
        public override string ToString()
        {
            return DataFolderLocationsMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            DataFolderLocationsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IDataFolderLocationsInternalGetter rhs)) return false;
            return ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(DataFolderLocations obj)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => DataFolderLocationsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((DataFolderLocationsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static DataFolderLocations CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            DataFolderLocations_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DataFolderLocations CreateFromXml(
            XElement node,
            out DataFolderLocations_ErrorMask errorMask,
            bool doMasks = true,
            DataFolderLocations_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = DataFolderLocations_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DataFolderLocations CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new DataFolderLocations() : null;
                    break;
                default:
                    break;
            }
            var ret = new DataFolderLocations();
            try
            {
                foreach (var elem in node.Elements())
                {
                    DataFolderLocationsXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static DataFolderLocations CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            DataFolderLocations_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            string path,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DataFolderLocations CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            DataFolderLocations_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            Stream stream,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXmlInternal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXmlInternal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DataFolderLocations_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXmlInternal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            var obj = DataFolderLocations.CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            this.CopyFieldsFrom(obj);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((DataFolderLocations_FieldIndex)index)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public DataFolderLocations Copy(
            DataFolderLocations_CopyMask copyMask = null,
            DataFolderLocations def = null)
        {
            return DataFolderLocations.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static DataFolderLocations Copy(
            DataFolderLocations item,
            DataFolderLocations_CopyMask copyMask = null,
            DataFolderLocations def = null)
        {
            DataFolderLocations ret;
            if (item.GetType().Equals(typeof(DataFolderLocations)))
            {
                ret = new DataFolderLocations();
            }
            else
            {
                ret = (DataFolderLocations)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static DataFolderLocations Copy_ToLoqui(
            DataFolderLocations item,
            DataFolderLocations_CopyMask copyMask = null,
            DataFolderLocations def = null)
        {
            DataFolderLocations ret;
            if (item.GetType().Equals(typeof(DataFolderLocations)))
            {
                ret = new DataFolderLocations() as DataFolderLocations;
            }
            else
            {
                ret = (DataFolderLocations)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(DataFolderLocations rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            DataFolderLocations rhs,
            DataFolderLocations_CopyMask copyMask,
            DataFolderLocations def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            DataFolderLocations rhs,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_CopyMask copyMask = null,
            DataFolderLocations def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DataFolderLocationsSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = DataFolderLocations_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            DataFolderLocations rhs,
            ErrorMaskBuilder errorMask,
            DataFolderLocations_CopyMask copyMask = null,
            DataFolderLocations def = null)
        {
            DataFolderLocationsSetterCopyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    this.Oblivion = (String)obj;
                    break;
                case DataFolderLocations_FieldIndex.Skyrim:
                    this.Skyrim = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            DataFolderLocationsSetterCommon.Instance.Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface IDataFolderLocations :
        IDataFolderLocationsInternalGetter,
        ILoquiObjectSetter<IDataFolderLocationsInternal>
    {
        new String Oblivion { get; set; }

        new String Skyrim { get; set; }

        void CopyFieldsFrom(
            DataFolderLocations rhs,
            ErrorMaskBuilder errorMask = null,
            DataFolderLocations_CopyMask copyMask = null,
            DataFolderLocations def = null);
    }

    public partial interface IDataFolderLocationsInternal :
        IDataFolderLocations,
        IDataFolderLocationsInternalGetter
    {
    }

    public partial interface IDataFolderLocationsGetter :
        ILoquiObject,
        ILoquiObject<IDataFolderLocationsInternalGetter>,
        IXmlItem
    {
        #region Oblivion
        String Oblivion { get; }

        #endregion
        #region Skyrim
        String Skyrim { get; }

        #endregion

    }

    public partial interface IDataFolderLocationsInternalGetter : IDataFolderLocationsGetter
    {
        object CommonInstance();
        object CommonSetterInstance();
        object CommonSetterCopyInstance();

    }

    #endregion

    #region Common MixIn
    public static class DataFolderLocationsMixIn
    {
        public static void Clear(this IDataFolderLocationsInternal item)
        {
            ((DataFolderLocationsSetterCommon)((IDataFolderLocationsInternalGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static DataFolderLocations_Mask<bool> GetEqualsMask(
            this IDataFolderLocationsInternalGetter item,
            IDataFolderLocationsInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDataFolderLocationsInternalGetter item,
            string name = null,
            DataFolderLocations_Mask<bool> printMask = null)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDataFolderLocationsInternalGetter item,
            FileGeneration fg,
            string name = null,
            DataFolderLocations_Mask<bool> printMask = null)
        {
            ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDataFolderLocationsInternalGetter item,
            DataFolderLocations_Mask<bool?> checkMask)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DataFolderLocations_Mask<bool> GetHasBeenSetMask(this IDataFolderLocationsInternalGetter item)
        {
            var ret = new DataFolderLocations_Mask<bool>();
            ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDataFolderLocationsInternalGetter item,
            IDataFolderLocationsInternalGetter rhs)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum DataFolderLocations_FieldIndex
    {
        Oblivion = 0,
        Skyrim = 1,
    }
    #endregion

    #region Registration
    public class DataFolderLocations_Registration : ILoquiRegistration
    {
        public static readonly DataFolderLocations_Registration Instance = new DataFolderLocations_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "352acadd-2222-4274-a2a2-5678a465527e";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(DataFolderLocations_Mask<>);

        public static readonly Type ErrorMaskType = typeof(DataFolderLocations_ErrorMask);

        public static readonly Type ClassType = typeof(DataFolderLocations);

        public static readonly Type GetterType = typeof(IDataFolderLocationsGetter);

        public static readonly Type InternalGetterType = typeof(IDataFolderLocationsInternalGetter);

        public static readonly Type SetterType = typeof(IDataFolderLocations);

        public static readonly Type InternalSetterType = typeof(IDataFolderLocationsInternal);

        public const string FullName = "Mutagen.Bethesda.Tests.DataFolderLocations";

        public const string Name = "DataFolderLocations";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBLIVION":
                    return (ushort)DataFolderLocations_FieldIndex.Oblivion;
                case "SKYRIM":
                    return (ushort)DataFolderLocations_FieldIndex.Skyrim;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    return "Oblivion";
                case DataFolderLocations_FieldIndex.Skyrim:
                    return "Skyrim";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    return typeof(String);
                case DataFolderLocations_FieldIndex.Skyrim:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DataFolderLocationsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DataFolderLocationsSetterCommon
    {
        public static readonly DataFolderLocationsSetterCommon Instance = new DataFolderLocationsSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IDataFolderLocationsInternal item)
        {
            ClearPartial();
            item.Oblivion = default(String);
            item.Skyrim = default(String);
        }
        
    }
    public partial class DataFolderLocationsCommon
    {
        public static readonly DataFolderLocationsCommon Instance = new DataFolderLocationsCommon();

        public DataFolderLocations_Mask<bool> GetEqualsMask(
            IDataFolderLocationsInternalGetter item,
            IDataFolderLocationsInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DataFolderLocations_Mask<bool>();
            ((DataFolderLocationsCommon)((IDataFolderLocationsInternalGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDataFolderLocationsInternalGetter item,
            IDataFolderLocationsInternalGetter rhs,
            DataFolderLocations_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Oblivion = string.Equals(item.Oblivion, rhs.Oblivion);
            ret.Skyrim = string.Equals(item.Skyrim, rhs.Skyrim);
        }
        
        public string ToString(
            IDataFolderLocationsInternalGetter item,
            string name = null,
            DataFolderLocations_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDataFolderLocationsInternalGetter item,
            FileGeneration fg,
            string name = null,
            DataFolderLocations_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DataFolderLocations =>");
            }
            else
            {
                fg.AppendLine($"{name} (DataFolderLocations) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDataFolderLocationsInternalGetter item,
            FileGeneration fg,
            DataFolderLocations_Mask<bool> printMask = null)
        {
            if (printMask?.Oblivion ?? true)
            {
                fg.AppendLine($"Oblivion => {item.Oblivion}");
            }
            if (printMask?.Skyrim ?? true)
            {
                fg.AppendLine($"Skyrim => {item.Skyrim}");
            }
        }
        
        public bool HasBeenSet(
            IDataFolderLocationsInternalGetter item,
            DataFolderLocations_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IDataFolderLocationsInternalGetter item,
            DataFolderLocations_Mask<bool> mask)
        {
            mask.Oblivion = true;
            mask.Skyrim = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDataFolderLocationsInternalGetter lhs,
            IDataFolderLocationsInternalGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.Oblivion, rhs.Oblivion)) return false;
            if (!string.Equals(lhs.Skyrim, rhs.Skyrim)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDataFolderLocationsInternalGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Oblivion).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Skyrim).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class DataFolderLocationsSetterCopyCommon
    {
        public static readonly DataFolderLocationsSetterCopyCommon Instance = new DataFolderLocationsSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            DataFolderLocations item,
            DataFolderLocations rhs,
            DataFolderLocations def,
            ErrorMaskBuilder errorMask,
            DataFolderLocations_CopyMask copyMask)
        {
            if (copyMask?.Oblivion ?? true)
            {
                errorMask?.PushIndex((int)DataFolderLocations_FieldIndex.Oblivion);
                try
                {
                    item.Oblivion = rhs.Oblivion;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Skyrim ?? true)
            {
                errorMask?.PushIndex((int)DataFolderLocations_FieldIndex.Skyrim);
                try
                {
                    item.Skyrim = rhs.Skyrim;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class DataFolderLocations
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DataFolderLocations_Registration.Instance;
        public static DataFolderLocations_Registration Registration => DataFolderLocations_Registration.Instance;
        protected object CommonInstance()
        {
            return DataFolderLocationsCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return DataFolderLocationsSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return DataFolderLocationsSetterCopyCommon.Instance;
        }
        object IDataFolderLocationsInternalGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object IDataFolderLocationsInternalGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object IDataFolderLocationsInternalGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}
#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class DataFolderLocationsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static DataFolderLocationsXmlWriteTranslation Instance = new DataFolderLocationsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDataFolderLocationsInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Oblivion) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Oblivion),
                    item: item.Oblivion,
                    fieldIndex: (int)DataFolderLocations_FieldIndex.Oblivion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Skyrim) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Skyrim),
                    item: item.Skyrim,
                    fieldIndex: (int)DataFolderLocations_FieldIndex.Skyrim,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDataFolderLocationsInternalGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.DataFolderLocations");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.DataFolderLocations");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IDataFolderLocationsInternalGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IDataFolderLocationsInternalGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IDataFolderLocationsInternalGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class DataFolderLocationsXmlCreateTranslation
    {
        public readonly static DataFolderLocationsXmlCreateTranslation Instance = new DataFolderLocationsXmlCreateTranslation();

        public static void FillPublicXml(
            IDataFolderLocationsInternal item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DataFolderLocationsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDataFolderLocationsInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Oblivion":
                    if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Oblivion) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)DataFolderLocations_FieldIndex.Oblivion);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String OblivionParse,
                                errorMask: errorMask))
                            {
                                item.Oblivion = OblivionParse;
                            }
                            else
                            {
                                item.Oblivion = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Skyrim":
                    if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Skyrim) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)DataFolderLocations_FieldIndex.Skyrim);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String SkyrimParse,
                                errorMask: errorMask))
                            {
                                item.Skyrim = SkyrimParse;
                            }
                            else
                            {
                                item.Skyrim = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class DataFolderLocationsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            XElement node,
            out DataFolderLocations_ErrorMask errorMask,
            bool doMasks = true,
            DataFolderLocations_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DataFolderLocations_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            string path,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            Stream stream,
            out DataFolderLocations_ErrorMask errorMask,
            DataFolderLocations_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            XElement node,
            string name = null,
            DataFolderLocations_TranslationMask translationMask = null)
        {
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDataFolderLocationsInternalGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Tests.Internals
{
    public class DataFolderLocations_Mask<T> : IMask<T>, IEquatable<DataFolderLocations_Mask<T>>
    {
        #region Ctors
        public DataFolderLocations_Mask()
        {
        }

        public DataFolderLocations_Mask(T initialValue)
        {
            this.Oblivion = initialValue;
            this.Skyrim = initialValue;
        }
        #endregion

        #region Members
        public T Oblivion;
        public T Skyrim;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is DataFolderLocations_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(DataFolderLocations_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Oblivion, rhs.Oblivion)) return false;
            if (!object.Equals(this.Skyrim, rhs.Skyrim)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Oblivion?.GetHashCode());
            ret = ret.CombineHashCode(this.Skyrim?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Oblivion)) return false;
            if (!eval(this.Skyrim)) return false;
            return true;
        }
        #endregion

        #region Translate
        public DataFolderLocations_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new DataFolderLocations_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(DataFolderLocations_Mask<R> obj, Func<T, R> eval)
        {
            obj.Oblivion = eval(this.Oblivion);
            obj.Skyrim = eval(this.Skyrim);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(DataFolderLocations_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, DataFolderLocations_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(DataFolderLocations_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Oblivion ?? true)
                {
                    fg.AppendLine($"Oblivion => {Oblivion}");
                }
                if (printMask?.Skyrim ?? true)
                {
                    fg.AppendLine($"Skyrim => {Skyrim}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class DataFolderLocations_ErrorMask : IErrorMask, IErrorMask<DataFolderLocations_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Oblivion;
        public Exception Skyrim;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    return Oblivion;
                case DataFolderLocations_FieldIndex.Skyrim:
                    return Skyrim;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    this.Oblivion = ex;
                    break;
                case DataFolderLocations_FieldIndex.Skyrim:
                    this.Skyrim = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    this.Oblivion = (Exception)obj;
                    break;
                case DataFolderLocations_FieldIndex.Skyrim:
                    this.Skyrim = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Oblivion != null) return true;
            if (Skyrim != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("DataFolderLocations_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Oblivion => {Oblivion}");
            fg.AppendLine($"Skyrim => {Skyrim}");
        }
        #endregion

        #region Combine
        public DataFolderLocations_ErrorMask Combine(DataFolderLocations_ErrorMask rhs)
        {
            var ret = new DataFolderLocations_ErrorMask();
            ret.Oblivion = this.Oblivion.Combine(rhs.Oblivion);
            ret.Skyrim = this.Skyrim.Combine(rhs.Skyrim);
            return ret;
        }
        public static DataFolderLocations_ErrorMask Combine(DataFolderLocations_ErrorMask lhs, DataFolderLocations_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static DataFolderLocations_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new DataFolderLocations_ErrorMask();
        }
        #endregion

    }
    public class DataFolderLocations_CopyMask
    {
        public DataFolderLocations_CopyMask()
        {
        }

        public DataFolderLocations_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Oblivion = defaultOn;
            this.Skyrim = defaultOn;
        }

        #region Members
        public bool Oblivion;
        public bool Skyrim;
        #endregion

    }

    public class DataFolderLocations_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Oblivion;
        public bool Skyrim;
        #endregion

        #region Ctors
        public DataFolderLocations_TranslationMask()
        {
        }

        public DataFolderLocations_TranslationMask(bool defaultOn)
        {
            this.Oblivion = defaultOn;
            this.Skyrim = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Oblivion, null));
            ret.Add((Skyrim, null));
        }
    }
}
#endregion

#endregion

