/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class DataFolderLocations :
        IDataFolderLocations,
        ILoquiObjectSetter<DataFolderLocations>,
        IEquatable<DataFolderLocations>,
        IEqualsMask
    {
        #region Ctor
        public DataFolderLocations()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Oblivion
        public String Oblivion { get; set; } = string.Empty;
        #endregion
        #region Skyrim
        public String Skyrim { get; set; } = string.Empty;
        #endregion

        #region To String
        public override string ToString()
        {
            return DataFolderLocationsMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DataFolderLocationsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDataFolderLocationsGetter rhs)) return false;
            return ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DataFolderLocations obj)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Oblivion = initialValue;
                this.Skyrim = initialValue;
            }

            public Mask(
                TItem Oblivion,
                TItem Skyrim)
            {
                this.Oblivion = Oblivion;
                this.Skyrim = Skyrim;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Oblivion;
            public TItem Skyrim;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Oblivion, rhs.Oblivion)) return false;
                if (!object.Equals(this.Skyrim, rhs.Skyrim)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Oblivion);
                hash.Add(this.Skyrim);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Oblivion)) return false;
                if (!eval(this.Skyrim)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Oblivion)) return true;
                if (eval(this.Skyrim)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DataFolderLocations.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Oblivion = eval(this.Oblivion);
                obj.Skyrim = eval(this.Skyrim);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DataFolderLocations.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DataFolderLocations.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DataFolderLocations.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Oblivion ?? true)
                    {
                        fg.AppendItem(Oblivion, "Oblivion");
                    }
                    if (printMask?.Skyrim ?? true)
                    {
                        fg.AppendItem(Skyrim, "Skyrim");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Oblivion;
            public Exception? Skyrim;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
                switch (enu)
                {
                    case DataFolderLocations_FieldIndex.Oblivion:
                        return Oblivion;
                    case DataFolderLocations_FieldIndex.Skyrim:
                        return Skyrim;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
                switch (enu)
                {
                    case DataFolderLocations_FieldIndex.Oblivion:
                        this.Oblivion = ex;
                        break;
                    case DataFolderLocations_FieldIndex.Skyrim:
                        this.Skyrim = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
                switch (enu)
                {
                    case DataFolderLocations_FieldIndex.Oblivion:
                        this.Oblivion = (Exception?)obj;
                        break;
                    case DataFolderLocations_FieldIndex.Skyrim:
                        this.Skyrim = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Oblivion != null) return true;
                if (Skyrim != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Oblivion, "Oblivion");
                fg.AppendItem(Skyrim, "Skyrim");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Oblivion = this.Oblivion.Combine(rhs.Oblivion);
                ret.Skyrim = this.Skyrim.Combine(rhs.Skyrim);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Oblivion;
            public bool Skyrim;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Oblivion = defaultOn;
                this.Skyrim = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Oblivion, null));
                ret.Add((Skyrim, null));
            }
        }
        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => DataFolderLocationsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DataFolderLocationsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static DataFolderLocations CreateFromXml(
            XElement node,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DataFolderLocations CreateFromXml(
            XElement node,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DataFolderLocations.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DataFolderLocations CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DataFolderLocations();
            ((DataFolderLocationsSetterCommon)((IDataFolderLocationsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DataFolderLocations CreateFromXml(
            string path,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            string path,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DataFolderLocations CreateFromXml(
            Stream stream,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            Stream stream,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DataFolderLocations CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDataFolderLocationsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DataFolderLocationsSetterCommon)((IDataFolderLocationsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DataFolderLocations GetNew()
        {
            return new DataFolderLocations();
        }

    }
    #endregion

    #region Interface
    public partial interface IDataFolderLocations :
        IDataFolderLocationsGetter,
        ILoquiObjectSetter<IDataFolderLocations>
    {
        new String Oblivion { get; set; }
        new String Skyrim { get; set; }
    }

    public partial interface IDataFolderLocationsGetter :
        ILoquiObject,
        ILoquiObject<IDataFolderLocationsGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        String Oblivion { get; }
        String Skyrim { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DataFolderLocationsMixIn
    {
        public static void Clear(this IDataFolderLocations item)
        {
            ((DataFolderLocationsSetterCommon)((IDataFolderLocationsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DataFolderLocations.Mask<bool> GetEqualsMask(
            this IDataFolderLocationsGetter item,
            IDataFolderLocationsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDataFolderLocationsGetter item,
            string? name = null,
            DataFolderLocations.Mask<bool>? printMask = null)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDataFolderLocationsGetter item,
            FileGeneration fg,
            string? name = null,
            DataFolderLocations.Mask<bool>? printMask = null)
        {
            ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDataFolderLocationsGetter item,
            DataFolderLocations.Mask<bool?> checkMask)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DataFolderLocations.Mask<bool> GetHasBeenSetMask(this IDataFolderLocationsGetter item)
        {
            var ret = new DataFolderLocations.Mask<bool>(false);
            ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDataFolderLocationsGetter item,
            IDataFolderLocationsGetter rhs)
        {
            return ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDataFolderLocations lhs,
            IDataFolderLocationsGetter rhs,
            DataFolderLocations.TranslationMask? copyMask = null)
        {
            ((DataFolderLocationsSetterTranslationCommon)((IDataFolderLocationsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IDataFolderLocations lhs,
            IDataFolderLocationsGetter rhs,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DataFolderLocationsSetterTranslationCommon)((IDataFolderLocationsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DataFolderLocations.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDataFolderLocations lhs,
            IDataFolderLocationsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DataFolderLocationsSetterTranslationCommon)((IDataFolderLocationsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DataFolderLocations DeepCopy(
            this IDataFolderLocationsGetter item,
            DataFolderLocations.TranslationMask? copyMask = null)
        {
            return ((DataFolderLocationsSetterTranslationCommon)((IDataFolderLocationsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DataFolderLocations DeepCopy(
            this IDataFolderLocationsGetter item,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? copyMask = null)
        {
            return ((DataFolderLocationsSetterTranslationCommon)((IDataFolderLocationsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DataFolderLocations DeepCopy(
            this IDataFolderLocationsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DataFolderLocationsSetterTranslationCommon)((IDataFolderLocationsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDataFolderLocations item,
            XElement node,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDataFolderLocations item,
            XElement node,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DataFolderLocations.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DataFolderLocationsSetterCommon)((IDataFolderLocationsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            string path,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            string path,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            string path,
            ErrorMaskBuilder? errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            Stream stream,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            Stream stream,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDataFolderLocations item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum DataFolderLocations_FieldIndex
    {
        Oblivion = 0,
        Skyrim = 1,
    }
    #endregion

    #region Registration
    public partial class DataFolderLocations_Registration : ILoquiRegistration
    {
        public static readonly DataFolderLocations_Registration Instance = new DataFolderLocations_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "352acadd-2222-4274-a2a2-5678a465527e";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(DataFolderLocations.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DataFolderLocations.ErrorMask);

        public static readonly Type ClassType = typeof(DataFolderLocations);

        public static readonly Type GetterType = typeof(IDataFolderLocationsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDataFolderLocations);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.DataFolderLocations";

        public const string Name = "DataFolderLocations";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBLIVION":
                    return (ushort)DataFolderLocations_FieldIndex.Oblivion;
                case "SKYRIM":
                    return (ushort)DataFolderLocations_FieldIndex.Skyrim;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    return "Oblivion";
                case DataFolderLocations_FieldIndex.Skyrim:
                    return "Skyrim";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                case DataFolderLocations_FieldIndex.Skyrim:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DataFolderLocations_FieldIndex enu = (DataFolderLocations_FieldIndex)index;
            switch (enu)
            {
                case DataFolderLocations_FieldIndex.Oblivion:
                    return typeof(String);
                case DataFolderLocations_FieldIndex.Skyrim:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DataFolderLocationsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DataFolderLocationsSetterCommon
    {
        public static readonly DataFolderLocationsSetterCommon Instance = new DataFolderLocationsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDataFolderLocations item)
        {
            ClearPartial();
            item.Oblivion = string.Empty;
            item.Skyrim = string.Empty;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IDataFolderLocations item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DataFolderLocationsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class DataFolderLocationsCommon
    {
        public static readonly DataFolderLocationsCommon Instance = new DataFolderLocationsCommon();

        public DataFolderLocations.Mask<bool> GetEqualsMask(
            IDataFolderLocationsGetter item,
            IDataFolderLocationsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DataFolderLocations.Mask<bool>(false);
            ((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDataFolderLocationsGetter item,
            IDataFolderLocationsGetter rhs,
            DataFolderLocations.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Oblivion = string.Equals(item.Oblivion, rhs.Oblivion);
            ret.Skyrim = string.Equals(item.Skyrim, rhs.Skyrim);
        }
        
        public string ToString(
            IDataFolderLocationsGetter item,
            string? name = null,
            DataFolderLocations.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDataFolderLocationsGetter item,
            FileGeneration fg,
            string? name = null,
            DataFolderLocations.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DataFolderLocations =>");
            }
            else
            {
                fg.AppendLine($"{name} (DataFolderLocations) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDataFolderLocationsGetter item,
            FileGeneration fg,
            DataFolderLocations.Mask<bool>? printMask = null)
        {
            if (printMask?.Oblivion ?? true)
            {
                fg.AppendItem(item.Oblivion, "Oblivion");
            }
            if (printMask?.Skyrim ?? true)
            {
                fg.AppendItem(item.Skyrim, "Skyrim");
            }
        }
        
        public bool HasBeenSet(
            IDataFolderLocationsGetter item,
            DataFolderLocations.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IDataFolderLocationsGetter item,
            DataFolderLocations.Mask<bool> mask)
        {
            mask.Oblivion = true;
            mask.Skyrim = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDataFolderLocationsGetter? lhs,
            IDataFolderLocationsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!string.Equals(lhs.Oblivion, rhs.Oblivion)) return false;
            if (!string.Equals(lhs.Skyrim, rhs.Skyrim)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDataFolderLocationsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Oblivion);
            hash.Add(item.Skyrim);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DataFolderLocations.GetNew();
        }
        
    }
    public partial class DataFolderLocationsSetterTranslationCommon
    {
        public static readonly DataFolderLocationsSetterTranslationCommon Instance = new DataFolderLocationsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDataFolderLocations item,
            IDataFolderLocationsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Oblivion) ?? true))
            {
                item.Oblivion = rhs.Oblivion;
            }
            if ((copyMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Skyrim) ?? true))
            {
                item.Skyrim = rhs.Skyrim;
            }
        }
        
        #endregion
        
        public DataFolderLocations DeepCopy(
            IDataFolderLocationsGetter item,
            DataFolderLocations.TranslationMask? copyMask = null)
        {
            DataFolderLocations ret = (DataFolderLocations)((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DataFolderLocations DeepCopy(
            IDataFolderLocationsGetter item,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? copyMask = null)
        {
            DataFolderLocations ret = (DataFolderLocations)((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DataFolderLocations DeepCopy(
            IDataFolderLocationsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DataFolderLocations ret = (DataFolderLocations)((DataFolderLocationsCommon)((IDataFolderLocationsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class DataFolderLocations
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DataFolderLocations_Registration.Instance;
        public static DataFolderLocations_Registration Registration => DataFolderLocations_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DataFolderLocationsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DataFolderLocationsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DataFolderLocationsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDataFolderLocationsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDataFolderLocationsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDataFolderLocationsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class DataFolderLocationsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static DataFolderLocationsXmlWriteTranslation Instance = new DataFolderLocationsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDataFolderLocationsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Oblivion) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Oblivion),
                    item: item.Oblivion,
                    fieldIndex: (int)DataFolderLocations_FieldIndex.Oblivion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Skyrim) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Skyrim),
                    item: item.Skyrim,
                    fieldIndex: (int)DataFolderLocations_FieldIndex.Skyrim,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDataFolderLocationsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.DataFolderLocations");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.DataFolderLocations");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDataFolderLocationsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IDataFolderLocationsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IDataFolderLocationsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class DataFolderLocationsXmlCreateTranslation
    {
        public readonly static DataFolderLocationsXmlCreateTranslation Instance = new DataFolderLocationsXmlCreateTranslation();

        public static void FillPublicXml(
            IDataFolderLocations item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DataFolderLocationsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDataFolderLocations item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Oblivion":
                    if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Oblivion) ?? true))
                    {
                        errorMask?.PushIndex((int)DataFolderLocations_FieldIndex.Oblivion);
                        try
                        {
                            item.Oblivion = StringXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Skyrim":
                    if ((translationMask?.GetShouldTranslate((int)DataFolderLocations_FieldIndex.Skyrim) ?? true))
                    {
                        errorMask?.PushIndex((int)DataFolderLocations_FieldIndex.Skyrim);
                        try
                        {
                            item.Skyrim = StringXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class DataFolderLocationsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            XElement node,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DataFolderLocations.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            string path,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            Stream stream,
            out DataFolderLocations.ErrorMask errorMask,
            DataFolderLocations.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            XElement node,
            string? name = null,
            DataFolderLocations.TranslationMask? translationMask = null)
        {
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDataFolderLocationsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((DataFolderLocationsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#endregion

