/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class PassthroughGroup : 
        IPassthroughGroup,
        ILoquiObject<PassthroughGroup>,
        ILoquiObjectSetter,
        IEquatable<PassthroughGroup>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PassthroughGroup_Registration.Instance;
        public static PassthroughGroup_Registration Registration => PassthroughGroup_Registration.Instance;

        #region Ctor
        public PassthroughGroup()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Do
        public Boolean Do { get; set; }
        #endregion
        #region Passthroughs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Passthrough> _Passthroughs = new SourceSetList<Passthrough>();
        public ISourceSetList<Passthrough> Passthroughs => _Passthroughs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Passthrough> PassthroughsEnumerable
        {
            get => _Passthroughs.Items;
            set => _Passthroughs.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Passthrough> IPassthroughGroup.Passthroughs => _Passthroughs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Passthrough> IPassthroughGroupGetter.Passthroughs => _Passthroughs;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<PassthroughGroup>.GetEqualsMask(PassthroughGroup rhs, EqualsMaskHelper.Include include) => PassthroughGroupCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IPassthroughGroupGetter>.GetEqualsMask(IPassthroughGroupGetter rhs, EqualsMaskHelper.Include include) => PassthroughGroupCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return PassthroughGroupCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PassthroughGroup_Mask<bool> printMask = null)
        {
            return PassthroughGroupCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PassthroughGroupCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public PassthroughGroup_Mask<bool> GetHasBeenSetMask()
        {
            return PassthroughGroupCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PassthroughGroup rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PassthroughGroup rhs)
        {
            if (rhs == null) return false;
            if (this.Do != rhs.Do) return false;
            if (!this.Passthroughs.SequenceEqual(rhs.Passthroughs)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Do).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Passthroughs).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static PassthroughGroup Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PassthroughGroup_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PassthroughGroup Create_Xml(
            XElement node,
            out PassthroughGroup_ErrorMask errorMask,
            bool doMasks = true,
            PassthroughGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PassthroughGroup_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PassthroughGroup Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new PassthroughGroup() : null;
                    break;
                default:
                    break;
            }
            var ret = new PassthroughGroup();
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughGroupCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PassthroughGroup Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            PassthroughGroup_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughGroup Create_Xml(
            string path,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughGroup Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PassthroughGroup Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PassthroughGroup_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughGroup Create_Xml(
            Stream stream,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughGroup Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<PassthroughGroup>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            string path,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            Stream stream,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out PassthroughGroup_ErrorMask errorMask,
            bool doMasks = true,
            PassthroughGroup_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            PassthroughGroupXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            PassthroughGroup_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            PassthroughGroupXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        public PassthroughGroup Copy(
            PassthroughGroup_CopyMask copyMask = null,
            IPassthroughGroupGetter def = null)
        {
            return PassthroughGroup.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PassthroughGroup Copy(
            IPassthroughGroup item,
            PassthroughGroup_CopyMask copyMask = null,
            IPassthroughGroupGetter def = null)
        {
            PassthroughGroup ret;
            if (item.GetType().Equals(typeof(PassthroughGroup)))
            {
                ret = new PassthroughGroup();
            }
            else
            {
                ret = (PassthroughGroup)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PassthroughGroup Copy_ToLoqui(
            IPassthroughGroupGetter item,
            PassthroughGroup_CopyMask copyMask = null,
            IPassthroughGroupGetter def = null)
        {
            PassthroughGroup ret;
            if (item.GetType().Equals(typeof(PassthroughGroup)))
            {
                ret = new PassthroughGroup() as PassthroughGroup;
            }
            else
            {
                ret = (PassthroughGroup)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(IPassthroughGroupGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (IPassthroughGroupGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            IPassthroughGroupGetter rhs,
            PassthroughGroup_CopyMask copyMask,
            IPassthroughGroupGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            IPassthroughGroupGetter rhs,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_CopyMask copyMask = null,
            IPassthroughGroupGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PassthroughGroupCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = PassthroughGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPassthroughGroupGetter rhs,
            ErrorMaskBuilder errorMask,
            PassthroughGroup_CopyMask copyMask = null,
            IPassthroughGroupGetter def = null,
            bool doMasks = true)
        {
            PassthroughGroupCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    this.Do = (Boolean)obj;
                    break;
                case PassthroughGroup_FieldIndex.Passthroughs:
                    this._Passthroughs.SetTo((IEnumerable<Passthrough>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            PassthroughGroupCommon.Clear(this);
        }


        public static PassthroughGroup Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PassthroughGroup();
            foreach (var pair in fields)
            {
                CopyInInternal_PassthroughGroup(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_PassthroughGroup(PassthroughGroup obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PassthroughGroup_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    obj.Do = (Boolean)pair.Value;
                    break;
                case PassthroughGroup_FieldIndex.Passthroughs:
                    obj._Passthroughs.SetTo((IEnumerable<Passthrough>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IPassthroughGroup : IPassthroughGroupGetter, ILoquiClass<IPassthroughGroup, IPassthroughGroupGetter>, ILoquiClass<PassthroughGroup, IPassthroughGroupGetter>
    {
        new Boolean Do { get; set; }

        new ISourceSetList<Passthrough> Passthroughs { get; }
    }

    public partial interface IPassthroughGroupGetter : ILoquiObject
    {
        #region Do
        Boolean Do { get; }

        #endregion
        #region Passthroughs
        IObservableSetList<Passthrough> Passthroughs { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum PassthroughGroup_FieldIndex
    {
        Do = 0,
        Passthroughs = 1,
    }
    #endregion

    #region Registration
    public class PassthroughGroup_Registration : ILoquiRegistration
    {
        public static readonly PassthroughGroup_Registration Instance = new PassthroughGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "7c60c735-e67c-498a-9d99-80aa1c1277a9";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(PassthroughGroup_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PassthroughGroup_ErrorMask);

        public static readonly Type ClassType = typeof(PassthroughGroup);

        public static readonly Type GetterType = typeof(IPassthroughGroupGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPassthroughGroup);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(PassthroughGroupCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.PassthroughGroup";

        public const string Name = "PassthroughGroup";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DO":
                    return (ushort)PassthroughGroup_FieldIndex.Do;
                case "PASSTHROUGHS":
                    return (ushort)PassthroughGroup_FieldIndex.Passthroughs;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return true;
                case PassthroughGroup_FieldIndex.Do:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return true;
                case PassthroughGroup_FieldIndex.Do:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    return "Do";
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return "Passthroughs";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    return typeof(Boolean);
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return typeof(SourceSetList<Passthrough>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PassthroughGroupCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPassthroughGroup item,
            IPassthroughGroupGetter rhs,
            IPassthroughGroupGetter def,
            ErrorMaskBuilder errorMask,
            PassthroughGroup_CopyMask copyMask)
        {
            if (copyMask?.Do ?? true)
            {
                errorMask?.PushIndex((int)PassthroughGroup_FieldIndex.Do);
                item.Do = rhs.Do;
                errorMask?.PopIndex();
            }
            if (copyMask?.Passthroughs.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)PassthroughGroup_FieldIndex.Passthroughs);
                try
                {
                    item.Passthroughs.SetToWithDefault(
                        rhs: rhs.Passthroughs,
                        def: def?.Passthroughs,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Passthroughs.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Passthrough.Copy(
                                        r,
                                        copyMask?.Passthroughs?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Passthroughs.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(IPassthroughGroup item)
        {
            item.Do = default(Boolean);
            item.Passthroughs.Unset();
        }

        public static PassthroughGroup_Mask<bool> GetEqualsMask(
            this IPassthroughGroupGetter item,
            IPassthroughGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PassthroughGroup_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IPassthroughGroupGetter item,
            IPassthroughGroupGetter rhs,
            PassthroughGroup_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Do = item.Do == rhs.Do;
            ret.Passthroughs = item.Passthroughs.CollectionEqualsHelper(
                rhs.Passthroughs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }

        public static string ToString(
            this IPassthroughGroupGetter item,
            string name = null,
            PassthroughGroup_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPassthroughGroupGetter item,
            FileGeneration fg,
            string name = null,
            PassthroughGroup_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PassthroughGroup)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PassthroughGroup)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Do ?? true)
                {
                    fg.AppendLine($"Do => {item.Do}");
                }
                if (printMask?.Passthroughs?.Overall ?? true)
                {
                    fg.AppendLine("Passthroughs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Passthroughs)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPassthroughGroupGetter item,
            PassthroughGroup_Mask<bool?> checkMask)
        {
            return true;
        }

        public static PassthroughGroup_Mask<bool> GetHasBeenSetMask(IPassthroughGroupGetter item)
        {
            var ret = new PassthroughGroup_Mask<bool>();
            ret.Do = true;
            ret.Passthroughs = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Passthrough_Mask<bool>>>>(item.Passthroughs.HasBeenSet, item.Passthroughs.WithIndex().Select((i) => new MaskItemIndexed<bool, Passthrough_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        public static void FillPublic_Xml(
            this PassthroughGroup item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughGroupCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this PassthroughGroup item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Do":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughGroup_FieldIndex.Do) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughGroup_FieldIndex.Do);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean DoParse,
                                errorMask: errorMask))
                            {
                                item.Do = DoParse;
                            }
                            else
                            {
                                item.Do = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Passthroughs":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughGroup_FieldIndex.Passthroughs) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughGroup_FieldIndex.Passthroughs);
                            if (ListXmlTranslation<Passthrough>.Instance.Parse(
                                node: node,
                                enumer: out var PassthroughsItem,
                                transl: LoquiXmlTranslation<Passthrough>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.Passthroughs.SetTo(PassthroughsItem);
                            }
                            else
                            {
                                item.Passthroughs.Unset();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class PassthroughGroupXmlTranslation
    {
        public readonly static PassthroughGroupXmlTranslation Instance = new PassthroughGroupXmlTranslation();

        public static void WriteToNode_Xml(
            IPassthroughGroupGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PassthroughGroup_FieldIndex.Do) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Do),
                    item: item.Do,
                    fieldIndex: (int)PassthroughGroup_FieldIndex.Do,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughGroup_FieldIndex.Passthroughs) ?? true))
            {
                ListXmlTranslation<Passthrough>.Instance.Write(
                    node: node,
                    name: nameof(item.Passthroughs),
                    item: item.Passthroughs,
                    fieldIndex: (int)PassthroughGroup_FieldIndex.Passthroughs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)PassthroughGroup_FieldIndex.Passthroughs),
                    transl: (XElement subNode, Passthrough subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Passthrough>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        #region Xml Write
        public void Write_Xml(
            XElement node,
            IPassthroughGroupGetter item,
            bool doMasks,
            out PassthroughGroup_ErrorMask errorMask,
            PassthroughGroup_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Xml(
            XElement node,
            IPassthroughGroupGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.PassthroughGroup");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.PassthroughGroup");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

    }
    #endregion

    #region Mask
    public class PassthroughGroup_Mask<T> : IMask<T>, IEquatable<PassthroughGroup_Mask<T>>
    {
        #region Ctors
        public PassthroughGroup_Mask()
        {
        }

        public PassthroughGroup_Mask(T initialValue)
        {
            this.Do = initialValue;
            this.Passthroughs = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Passthrough_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Do;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Passthrough_Mask<T>>>> Passthroughs;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PassthroughGroup_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PassthroughGroup_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Do, rhs.Do)) return false;
            if (!object.Equals(this.Passthroughs, rhs.Passthroughs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Do?.GetHashCode());
            ret = ret.CombineHashCode(this.Passthroughs?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Do)) return false;
            if (this.Passthroughs != null)
            {
                if (!eval(this.Passthroughs.Overall)) return false;
                if (this.Passthroughs.Specific != null)
                {
                    foreach (var item in this.Passthroughs.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public PassthroughGroup_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PassthroughGroup_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PassthroughGroup_Mask<R> obj, Func<T, R> eval)
        {
            obj.Do = eval(this.Do);
            if (Passthroughs != null)
            {
                obj.Passthroughs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Passthrough_Mask<R>>>>();
                obj.Passthroughs.Overall = eval(this.Passthroughs.Overall);
                if (Passthroughs.Specific != null)
                {
                    List<MaskItemIndexed<R, Passthrough_Mask<R>>> l = new List<MaskItemIndexed<R, Passthrough_Mask<R>>>();
                    obj.Passthroughs.Specific = l;
                    foreach (var item in Passthroughs.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Passthrough_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Passthrough_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Passthroughs.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PassthroughGroup_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PassthroughGroup_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PassthroughGroup_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Do ?? true)
                {
                    fg.AppendLine($"Do => {Do}");
                }
                if (printMask?.Passthroughs?.Overall ?? true)
                {
                    fg.AppendLine("Passthroughs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Passthroughs.Overall != null)
                        {
                            fg.AppendLine(Passthroughs.Overall.ToString());
                        }
                        if (Passthroughs.Specific != null)
                        {
                            foreach (var subItem in Passthroughs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PassthroughGroup_ErrorMask : IErrorMask, IErrorMask<PassthroughGroup_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Do;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>> Passthroughs;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    return Do;
                case PassthroughGroup_FieldIndex.Passthroughs:
                    return Passthroughs;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    this.Do = ex;
                    break;
                case PassthroughGroup_FieldIndex.Passthroughs:
                    this.Passthroughs = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            PassthroughGroup_FieldIndex enu = (PassthroughGroup_FieldIndex)index;
            switch (enu)
            {
                case PassthroughGroup_FieldIndex.Do:
                    this.Do = (Exception)obj;
                    break;
                case PassthroughGroup_FieldIndex.Passthroughs:
                    this.Passthroughs = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Do != null) return true;
            if (Passthroughs != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("PassthroughGroup_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Do => {Do}");
            fg.AppendLine("Passthroughs =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Passthroughs.Overall != null)
                {
                    fg.AppendLine(Passthroughs.Overall.ToString());
                }
                if (Passthroughs.Specific != null)
                {
                    foreach (var subItem in Passthroughs.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public PassthroughGroup_ErrorMask Combine(PassthroughGroup_ErrorMask rhs)
        {
            var ret = new PassthroughGroup_ErrorMask();
            ret.Do = this.Do.Combine(rhs.Do);
            ret.Passthroughs = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>>(this.Passthroughs.Overall.Combine(rhs.Passthroughs.Overall), new List<MaskItem<Exception, Passthrough_ErrorMask>>(this.Passthroughs.Specific.And(rhs.Passthroughs.Specific)));
            return ret;
        }
        public static PassthroughGroup_ErrorMask Combine(PassthroughGroup_ErrorMask lhs, PassthroughGroup_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PassthroughGroup_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PassthroughGroup_ErrorMask();
        }
        #endregion

    }
    public class PassthroughGroup_CopyMask
    {
        public PassthroughGroup_CopyMask()
        {
        }

        public PassthroughGroup_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Do = defaultOn;
            this.Passthroughs = new MaskItem<CopyOption, Passthrough_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Do;
        public MaskItem<CopyOption, Passthrough_CopyMask> Passthroughs;
        #endregion

    }

    public class PassthroughGroup_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Do;
        public MaskItem<bool, Passthrough_TranslationMask> Passthroughs;
        #endregion

        #region Ctors
        public PassthroughGroup_TranslationMask()
        {
        }

        public PassthroughGroup_TranslationMask(bool defaultOn)
        {
            this.Do = defaultOn;
            this.Passthroughs = new MaskItem<bool, Passthrough_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Do, null));
            ret.Add((Passthroughs?.Overall ?? true, Passthroughs?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
