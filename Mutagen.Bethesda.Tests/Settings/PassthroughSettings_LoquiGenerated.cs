/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class PassthroughSettings :
        LoquiNotifyingObject,
        IPassthroughSettings,
        ILoquiObjectSetter<PassthroughSettings>,
        IEquatable<PassthroughSettings>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PassthroughSettings_Registration.Instance;
        public static PassthroughSettings_Registration Registration => PassthroughSettings_Registration.Instance;
        protected object CommonInstance => PassthroughSettingsCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public PassthroughSettings()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ReuseCaches
        private Boolean _ReuseCaches;
        public Boolean ReuseCaches
        {
            get => this._ReuseCaches;
            set => this.RaiseAndSetIfChanged(ref this._ReuseCaches, value, nameof(ReuseCaches));
        }
        #endregion
        #region DeleteCachesAfter
        private Boolean _DeleteCachesAfter;
        public readonly static Boolean _DeleteCachesAfter_Default = true;
        public Boolean DeleteCachesAfter
        {
            get => this._DeleteCachesAfter;
            set => this.RaiseAndSetIfChanged(ref this._DeleteCachesAfter, value, nameof(DeleteCachesAfter));
        }
        #endregion
        #region TestNormal
        private Boolean _TestNormal;
        public Boolean TestNormal
        {
            get => this._TestNormal;
            set => this.RaiseAndSetIfChanged(ref this._TestNormal, value, nameof(TestNormal));
        }
        #endregion
        #region TestBinaryWrapper
        private Boolean _TestBinaryWrapper;
        public Boolean TestBinaryWrapper
        {
            get => this._TestBinaryWrapper;
            set => this.RaiseAndSetIfChanged(ref this._TestBinaryWrapper, value, nameof(TestBinaryWrapper));
        }
        #endregion
        #region TestImport
        private Boolean _TestImport;
        public Boolean TestImport
        {
            get => this._TestImport;
            set => this.RaiseAndSetIfChanged(ref this._TestImport, value, nameof(TestImport));
        }
        #endregion
        #region TestFolder
        private Boolean _TestFolder;
        public Boolean TestFolder
        {
            get => this._TestFolder;
            set => this.RaiseAndSetIfChanged(ref this._TestFolder, value, nameof(TestFolder));
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPassthroughSettingsGetter)rhs, include);
        #region To String
        public override string ToString()
        {
            return PassthroughSettingsMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PassthroughSettingsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPassthroughSettingsGetter rhs)) return false;
            return ((PassthroughSettingsCommon)this.CommonInstance).Equals(this, rhs);
        }

        public bool Equals(PassthroughSettings obj)
        {
            return ((PassthroughSettingsCommon)this.CommonInstance).Equals(this, obj);
        }

        public override int GetHashCode() => ((PassthroughSettingsCommon)this.CommonInstance).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => PassthroughSettingsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static PassthroughSettings CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PassthroughSettings CreateFromXml(
            XElement node,
            out PassthroughSettings_ErrorMask errorMask,
            bool doMasks = true,
            PassthroughSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PassthroughSettings CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new PassthroughSettings() : null;
                    break;
                default:
                    break;
            }
            var ret = new PassthroughSettings();
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PassthroughSettings CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            string path,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PassthroughSettings CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            Stream stream,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<PassthroughSettings>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((PassthroughSettings_FieldIndex)index)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public PassthroughSettings Copy(
            PassthroughSettings_CopyMask copyMask = null,
            PassthroughSettings def = null)
        {
            return PassthroughSettings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PassthroughSettings Copy(
            PassthroughSettings item,
            PassthroughSettings_CopyMask copyMask = null,
            PassthroughSettings def = null)
        {
            PassthroughSettings ret;
            if (item.GetType().Equals(typeof(PassthroughSettings)))
            {
                ret = new PassthroughSettings();
            }
            else
            {
                ret = (PassthroughSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PassthroughSettings Copy_ToLoqui(
            PassthroughSettings item,
            PassthroughSettings_CopyMask copyMask = null,
            PassthroughSettings def = null)
        {
            PassthroughSettings ret;
            if (item.GetType().Equals(typeof(PassthroughSettings)))
            {
                ret = new PassthroughSettings() as PassthroughSettings;
            }
            else
            {
                ret = (PassthroughSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(PassthroughSettings rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            PassthroughSettings rhs,
            PassthroughSettings_CopyMask copyMask,
            PassthroughSettings def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            PassthroughSettings rhs,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_CopyMask copyMask = null,
            PassthroughSettings def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PassthroughSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            PassthroughSettings rhs,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_CopyMask copyMask = null,
            PassthroughSettings def = null)
        {
            PassthroughSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    this.ReuseCaches = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    this.DeleteCachesAfter = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    this.TestNormal = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    this.TestBinaryWrapper = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestImport:
                    this.TestImport = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    this.TestFolder = (Boolean)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            PassthroughSettingsCommon.Instance.Clear(this);
        }

        public static PassthroughSettings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PassthroughSettings();
            foreach (var pair in fields)
            {
                CopyInInternal_PassthroughSettings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_PassthroughSettings(PassthroughSettings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PassthroughSettings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    obj.ReuseCaches = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    obj.DeleteCachesAfter = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    obj.TestNormal = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    obj.TestBinaryWrapper = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestImport:
                    obj.TestImport = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    obj.TestFolder = (Boolean)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IPassthroughSettings :
        IPassthroughSettingsGetter,
        ILoquiObjectSetter<IPassthroughSettings>
    {
        new Boolean ReuseCaches { get; set; }

        new Boolean DeleteCachesAfter { get; set; }

        new Boolean TestNormal { get; set; }

        new Boolean TestBinaryWrapper { get; set; }

        new Boolean TestImport { get; set; }

        new Boolean TestFolder { get; set; }

        void CopyFieldsFrom(
            PassthroughSettings rhs,
            ErrorMaskBuilder errorMask = null,
            PassthroughSettings_CopyMask copyMask = null,
            PassthroughSettings def = null);
    }

    public partial interface IPassthroughSettingsGetter :
        ILoquiObject,
        ILoquiObject<IPassthroughSettingsGetter>,
        IXmlItem
    {
        #region ReuseCaches
        Boolean ReuseCaches { get; }

        #endregion
        #region DeleteCachesAfter
        Boolean DeleteCachesAfter { get; }

        #endregion
        #region TestNormal
        Boolean TestNormal { get; }

        #endregion
        #region TestBinaryWrapper
        Boolean TestBinaryWrapper { get; }

        #endregion
        #region TestImport
        Boolean TestImport { get; }

        #endregion
        #region TestFolder
        Boolean TestFolder { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class PassthroughSettingsMixIn
    {
        public static void Clear(this IPassthroughSettings item)
        {
            ((PassthroughSettingsCommon)item.CommonInstance).Clear(item: item);
        }

        public static PassthroughSettings_Mask<bool> GetEqualsMask(
            this IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PassthroughSettingsCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPassthroughSettingsGetter item,
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            return ((PassthroughSettingsCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPassthroughSettingsGetter item,
            FileGeneration fg,
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            ((PassthroughSettingsCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPassthroughSettingsGetter item,
            PassthroughSettings_Mask<bool?> checkMask)
        {
            return ((PassthroughSettingsCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PassthroughSettings_Mask<bool> GetHasBeenSetMask(this IPassthroughSettingsGetter item)
        {
            var ret = new PassthroughSettings_Mask<bool>();
            ((PassthroughSettingsCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs)
        {
            return ((PassthroughSettingsCommon)item.CommonInstance).Equals(
                lhs: item,
                rhs: rhs);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum PassthroughSettings_FieldIndex
    {
        ReuseCaches = 0,
        DeleteCachesAfter = 1,
        TestNormal = 2,
        TestBinaryWrapper = 3,
        TestImport = 4,
        TestFolder = 5,
    }
    #endregion

    #region Registration
    public class PassthroughSettings_Registration : ILoquiRegistration
    {
        public static readonly PassthroughSettings_Registration Instance = new PassthroughSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6e04291-8a1a-4f43-baa4-0f5fc5074d8b";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(PassthroughSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PassthroughSettings_ErrorMask);

        public static readonly Type ClassType = typeof(PassthroughSettings);

        public static readonly Type GetterType = typeof(IPassthroughSettingsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPassthroughSettings);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(PassthroughSettingsCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.PassthroughSettings";

        public const string Name = "PassthroughSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REUSECACHES":
                    return (ushort)PassthroughSettings_FieldIndex.ReuseCaches;
                case "DELETECACHESAFTER":
                    return (ushort)PassthroughSettings_FieldIndex.DeleteCachesAfter;
                case "TESTNORMAL":
                    return (ushort)PassthroughSettings_FieldIndex.TestNormal;
                case "TESTBINARYWRAPPER":
                    return (ushort)PassthroughSettings_FieldIndex.TestBinaryWrapper;
                case "TESTIMPORT":
                    return (ushort)PassthroughSettings_FieldIndex.TestImport;
                case "TESTFOLDER":
                    return (ushort)PassthroughSettings_FieldIndex.TestFolder;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return "ReuseCaches";
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return "DeleteCachesAfter";
                case PassthroughSettings_FieldIndex.TestNormal:
                    return "TestNormal";
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    return "TestBinaryWrapper";
                case PassthroughSettings_FieldIndex.TestImport:
                    return "TestImport";
                case PassthroughSettings_FieldIndex.TestFolder:
                    return "TestFolder";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestNormal:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestImport:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestFolder:
                    return typeof(Boolean);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PassthroughSettingsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PassthroughSettingsCommon
    {
        public static readonly PassthroughSettingsCommon Instance = new PassthroughSettingsCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            PassthroughSettings item,
            PassthroughSettings rhs,
            PassthroughSettings def,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_CopyMask copyMask)
        {
            if (copyMask?.ReuseCaches ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.ReuseCaches);
                try
                {
                    item.ReuseCaches = rhs.ReuseCaches;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.DeleteCachesAfter ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DeleteCachesAfter);
                try
                {
                    item.DeleteCachesAfter = rhs.DeleteCachesAfter;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TestNormal ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestNormal);
                try
                {
                    item.TestNormal = rhs.TestNormal;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TestBinaryWrapper ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestBinaryWrapper);
                try
                {
                    item.TestBinaryWrapper = rhs.TestBinaryWrapper;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TestImport ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestImport);
                try
                {
                    item.TestImport = rhs.TestImport;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TestFolder ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestFolder);
                try
                {
                    item.TestFolder = rhs.TestFolder;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IPassthroughSettings item)
        {
            ClearPartial();
            item.ReuseCaches = default(Boolean);
            item.DeleteCachesAfter = PassthroughSettings._DeleteCachesAfter_Default;
            item.TestNormal = default(Boolean);
            item.TestBinaryWrapper = default(Boolean);
            item.TestImport = default(Boolean);
            item.TestFolder = default(Boolean);
        }

        public PassthroughSettings_Mask<bool> GetEqualsMask(
            IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PassthroughSettings_Mask<bool>();
            ((PassthroughSettingsCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            PassthroughSettings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ReuseCaches = item.ReuseCaches == rhs.ReuseCaches;
            ret.DeleteCachesAfter = item.DeleteCachesAfter == rhs.DeleteCachesAfter;
            ret.TestNormal = item.TestNormal == rhs.TestNormal;
            ret.TestBinaryWrapper = item.TestBinaryWrapper == rhs.TestBinaryWrapper;
            ret.TestImport = item.TestImport == rhs.TestImport;
            ret.TestFolder = item.TestFolder == rhs.TestFolder;
        }

        public string ToString(
            IPassthroughSettingsGetter item,
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IPassthroughSettingsGetter item,
            FileGeneration fg,
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PassthroughSettings =>");
            }
            else
            {
                fg.AppendLine($"{name} (PassthroughSettings) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IPassthroughSettingsGetter item,
            FileGeneration fg,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            if (printMask?.ReuseCaches ?? true)
            {
                fg.AppendLine($"ReuseCaches => {item.ReuseCaches}");
            }
            if (printMask?.DeleteCachesAfter ?? true)
            {
                fg.AppendLine($"DeleteCachesAfter => {item.DeleteCachesAfter}");
            }
            if (printMask?.TestNormal ?? true)
            {
                fg.AppendLine($"TestNormal => {item.TestNormal}");
            }
            if (printMask?.TestBinaryWrapper ?? true)
            {
                fg.AppendLine($"TestBinaryWrapper => {item.TestBinaryWrapper}");
            }
            if (printMask?.TestImport ?? true)
            {
                fg.AppendLine($"TestImport => {item.TestImport}");
            }
            if (printMask?.TestFolder ?? true)
            {
                fg.AppendLine($"TestFolder => {item.TestFolder}");
            }
        }

        public bool HasBeenSet(
            IPassthroughSettingsGetter item,
            PassthroughSettings_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IPassthroughSettingsGetter item,
            PassthroughSettings_Mask<bool> mask)
        {
            mask.ReuseCaches = true;
            mask.DeleteCachesAfter = true;
            mask.TestNormal = true;
            mask.TestBinaryWrapper = true;
            mask.TestImport = true;
            mask.TestFolder = true;
        }

        #region Equals and Hash
        public virtual bool Equals(
            IPassthroughSettingsGetter lhs,
            IPassthroughSettingsGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.ReuseCaches != rhs.ReuseCaches) return false;
            if (lhs.DeleteCachesAfter != rhs.DeleteCachesAfter) return false;
            if (lhs.TestNormal != rhs.TestNormal) return false;
            if (lhs.TestBinaryWrapper != rhs.TestBinaryWrapper) return false;
            if (lhs.TestImport != rhs.TestImport) return false;
            if (lhs.TestFolder != rhs.TestFolder) return false;
            return true;
        }

        public virtual int GetHashCode(IPassthroughSettingsGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ReuseCaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DeleteCachesAfter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestBinaryWrapper).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestImport).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestFolder).CombineHashCode(ret);
            return ret;
        }

        #endregion


    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class PassthroughSettingsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PassthroughSettingsXmlWriteTranslation Instance = new PassthroughSettingsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPassthroughSettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReuseCaches) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseCaches),
                    item: item.ReuseCaches,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.ReuseCaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DeleteCachesAfter) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeleteCachesAfter),
                    item: item.DeleteCachesAfter,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.DeleteCachesAfter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestNormal) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestNormal),
                    item: item.TestNormal,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestNormal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestBinaryWrapper) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestBinaryWrapper),
                    item: item.TestBinaryWrapper,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestBinaryWrapper,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestImport) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestImport),
                    item: item.TestImport,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestImport,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestFolder) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestFolder),
                    item: item.TestFolder,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestFolder,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPassthroughSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.PassthroughSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.PassthroughSettings");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IPassthroughSettingsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPassthroughSettingsGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IPassthroughSettingsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PassthroughSettingsXmlCreateTranslation
    {
        public readonly static PassthroughSettingsXmlCreateTranslation Instance = new PassthroughSettingsXmlCreateTranslation();

        public static void FillPublicXml(
            IPassthroughSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPassthroughSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ReuseCaches":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReuseCaches) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.ReuseCaches);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean ReuseCachesParse,
                                errorMask: errorMask))
                            {
                                item.ReuseCaches = ReuseCachesParse;
                            }
                            else
                            {
                                item.ReuseCaches = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "DeleteCachesAfter":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DeleteCachesAfter) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DeleteCachesAfter);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean DeleteCachesAfterParse,
                                errorMask: errorMask))
                            {
                                item.DeleteCachesAfter = DeleteCachesAfterParse;
                            }
                            else
                            {
                                item.DeleteCachesAfter = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestNormal":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestNormal) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestNormal);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestNormalParse,
                                errorMask: errorMask))
                            {
                                item.TestNormal = TestNormalParse;
                            }
                            else
                            {
                                item.TestNormal = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestBinaryWrapper":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestBinaryWrapper) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestBinaryWrapper);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestBinaryWrapperParse,
                                errorMask: errorMask))
                            {
                                item.TestBinaryWrapper = TestBinaryWrapperParse;
                            }
                            else
                            {
                                item.TestBinaryWrapper = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestImport":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestImport) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestImport);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestImportParse,
                                errorMask: errorMask))
                            {
                                item.TestImport = TestImportParse;
                            }
                            else
                            {
                                item.TestImport = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestFolder":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestFolder) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestFolder);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestFolderParse,
                                errorMask: errorMask))
                            {
                                item.TestFolder = TestFolderParse;
                            }
                            else
                            {
                                item.TestFolder = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class PassthroughSettingsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            XElement node,
            out PassthroughSettings_ErrorMask errorMask,
            bool doMasks = true,
            PassthroughSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            string path,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            Stream stream,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            XElement node,
            string name = null,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class PassthroughSettings_Mask<T> : IMask<T>, IEquatable<PassthroughSettings_Mask<T>>
    {
        #region Ctors
        public PassthroughSettings_Mask()
        {
        }

        public PassthroughSettings_Mask(T initialValue)
        {
            this.ReuseCaches = initialValue;
            this.DeleteCachesAfter = initialValue;
            this.TestNormal = initialValue;
            this.TestBinaryWrapper = initialValue;
            this.TestImport = initialValue;
            this.TestFolder = initialValue;
        }
        #endregion

        #region Members
        public T ReuseCaches;
        public T DeleteCachesAfter;
        public T TestNormal;
        public T TestBinaryWrapper;
        public T TestImport;
        public T TestFolder;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PassthroughSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PassthroughSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ReuseCaches, rhs.ReuseCaches)) return false;
            if (!object.Equals(this.DeleteCachesAfter, rhs.DeleteCachesAfter)) return false;
            if (!object.Equals(this.TestNormal, rhs.TestNormal)) return false;
            if (!object.Equals(this.TestBinaryWrapper, rhs.TestBinaryWrapper)) return false;
            if (!object.Equals(this.TestImport, rhs.TestImport)) return false;
            if (!object.Equals(this.TestFolder, rhs.TestFolder)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ReuseCaches?.GetHashCode());
            ret = ret.CombineHashCode(this.DeleteCachesAfter?.GetHashCode());
            ret = ret.CombineHashCode(this.TestNormal?.GetHashCode());
            ret = ret.CombineHashCode(this.TestBinaryWrapper?.GetHashCode());
            ret = ret.CombineHashCode(this.TestImport?.GetHashCode());
            ret = ret.CombineHashCode(this.TestFolder?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ReuseCaches)) return false;
            if (!eval(this.DeleteCachesAfter)) return false;
            if (!eval(this.TestNormal)) return false;
            if (!eval(this.TestBinaryWrapper)) return false;
            if (!eval(this.TestImport)) return false;
            if (!eval(this.TestFolder)) return false;
            return true;
        }
        #endregion

        #region Translate
        public PassthroughSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PassthroughSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PassthroughSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.ReuseCaches = eval(this.ReuseCaches);
            obj.DeleteCachesAfter = eval(this.DeleteCachesAfter);
            obj.TestNormal = eval(this.TestNormal);
            obj.TestBinaryWrapper = eval(this.TestBinaryWrapper);
            obj.TestImport = eval(this.TestImport);
            obj.TestFolder = eval(this.TestFolder);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PassthroughSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PassthroughSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PassthroughSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ReuseCaches ?? true)
                {
                    fg.AppendLine($"ReuseCaches => {ReuseCaches}");
                }
                if (printMask?.DeleteCachesAfter ?? true)
                {
                    fg.AppendLine($"DeleteCachesAfter => {DeleteCachesAfter}");
                }
                if (printMask?.TestNormal ?? true)
                {
                    fg.AppendLine($"TestNormal => {TestNormal}");
                }
                if (printMask?.TestBinaryWrapper ?? true)
                {
                    fg.AppendLine($"TestBinaryWrapper => {TestBinaryWrapper}");
                }
                if (printMask?.TestImport ?? true)
                {
                    fg.AppendLine($"TestImport => {TestImport}");
                }
                if (printMask?.TestFolder ?? true)
                {
                    fg.AppendLine($"TestFolder => {TestFolder}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PassthroughSettings_ErrorMask : IErrorMask, IErrorMask<PassthroughSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ReuseCaches;
        public Exception DeleteCachesAfter;
        public Exception TestNormal;
        public Exception TestBinaryWrapper;
        public Exception TestImport;
        public Exception TestFolder;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return ReuseCaches;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return DeleteCachesAfter;
                case PassthroughSettings_FieldIndex.TestNormal:
                    return TestNormal;
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    return TestBinaryWrapper;
                case PassthroughSettings_FieldIndex.TestImport:
                    return TestImport;
                case PassthroughSettings_FieldIndex.TestFolder:
                    return TestFolder;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    this.ReuseCaches = ex;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    this.DeleteCachesAfter = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    this.TestNormal = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    this.TestBinaryWrapper = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestImport:
                    this.TestImport = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    this.TestFolder = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    this.ReuseCaches = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    this.DeleteCachesAfter = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    this.TestNormal = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestBinaryWrapper:
                    this.TestBinaryWrapper = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestImport:
                    this.TestImport = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    this.TestFolder = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ReuseCaches != null) return true;
            if (DeleteCachesAfter != null) return true;
            if (TestNormal != null) return true;
            if (TestBinaryWrapper != null) return true;
            if (TestImport != null) return true;
            if (TestFolder != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("PassthroughSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ReuseCaches => {ReuseCaches}");
            fg.AppendLine($"DeleteCachesAfter => {DeleteCachesAfter}");
            fg.AppendLine($"TestNormal => {TestNormal}");
            fg.AppendLine($"TestBinaryWrapper => {TestBinaryWrapper}");
            fg.AppendLine($"TestImport => {TestImport}");
            fg.AppendLine($"TestFolder => {TestFolder}");
        }
        #endregion

        #region Combine
        public PassthroughSettings_ErrorMask Combine(PassthroughSettings_ErrorMask rhs)
        {
            var ret = new PassthroughSettings_ErrorMask();
            ret.ReuseCaches = this.ReuseCaches.Combine(rhs.ReuseCaches);
            ret.DeleteCachesAfter = this.DeleteCachesAfter.Combine(rhs.DeleteCachesAfter);
            ret.TestNormal = this.TestNormal.Combine(rhs.TestNormal);
            ret.TestBinaryWrapper = this.TestBinaryWrapper.Combine(rhs.TestBinaryWrapper);
            ret.TestImport = this.TestImport.Combine(rhs.TestImport);
            ret.TestFolder = this.TestFolder.Combine(rhs.TestFolder);
            return ret;
        }
        public static PassthroughSettings_ErrorMask Combine(PassthroughSettings_ErrorMask lhs, PassthroughSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PassthroughSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PassthroughSettings_ErrorMask();
        }
        #endregion

    }
    public class PassthroughSettings_CopyMask
    {
        public PassthroughSettings_CopyMask()
        {
        }

        public PassthroughSettings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ReuseCaches = defaultOn;
            this.DeleteCachesAfter = defaultOn;
            this.TestNormal = defaultOn;
            this.TestBinaryWrapper = defaultOn;
            this.TestImport = defaultOn;
            this.TestFolder = defaultOn;
        }

        #region Members
        public bool ReuseCaches;
        public bool DeleteCachesAfter;
        public bool TestNormal;
        public bool TestBinaryWrapper;
        public bool TestImport;
        public bool TestFolder;
        #endregion

    }

    public class PassthroughSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ReuseCaches;
        public bool DeleteCachesAfter;
        public bool TestNormal;
        public bool TestBinaryWrapper;
        public bool TestImport;
        public bool TestFolder;
        #endregion

        #region Ctors
        public PassthroughSettings_TranslationMask()
        {
        }

        public PassthroughSettings_TranslationMask(bool defaultOn)
        {
            this.ReuseCaches = defaultOn;
            this.DeleteCachesAfter = defaultOn;
            this.TestNormal = defaultOn;
            this.TestBinaryWrapper = defaultOn;
            this.TestImport = defaultOn;
            this.TestFolder = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ReuseCaches, null));
            ret.Add((DeleteCachesAfter, null));
            ret.Add((TestNormal, null));
            ret.Add((TestBinaryWrapper, null));
            ret.Add((TestImport, null));
            ret.Add((TestFolder, null));
        }
    }
    #endregion

    #endregion

}
