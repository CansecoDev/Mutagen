/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class PassthroughSettings : 
        IPassthroughSettings,
        ILoquiObject<PassthroughSettings>,
        ILoquiObjectSetter,
        IEquatable<PassthroughSettings>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PassthroughSettings_Registration.Instance;
        public static PassthroughSettings_Registration Registration => PassthroughSettings_Registration.Instance;

        #region Ctor
        public PassthroughSettings()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ReuseCaches
        public Boolean ReuseCaches { get; set; }
        #endregion
        #region DeleteCachesAfter
        public readonly static Boolean _DeleteCachesAfter_Default = true;
        public Boolean DeleteCachesAfter { get; set; }
        #endregion
        #region TestNormal
        public Boolean TestNormal { get; set; }
        #endregion
        #region TestObservable
        public Boolean TestObservable { get; set; }
        #endregion
        #region TestFolder
        public Boolean TestFolder { get; set; }
        #endregion
        #region DataFolder
        public String DataFolder { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => PassthroughSettingsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => PassthroughSettingsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PassthroughSettingsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PassthroughSettingsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<PassthroughSettings>.GetEqualsMask(PassthroughSettings rhs, EqualsMaskHelper.Include include) => PassthroughSettingsCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IPassthroughSettingsGetter>.GetEqualsMask(IPassthroughSettingsGetter rhs, EqualsMaskHelper.Include include) => PassthroughSettingsCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return PassthroughSettingsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            return PassthroughSettingsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PassthroughSettingsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public PassthroughSettings_Mask<bool> GetHasBeenSetMask()
        {
            return PassthroughSettingsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is PassthroughSettings rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PassthroughSettings rhs)
        {
            if (rhs == null) return false;
            if (this.ReuseCaches != rhs.ReuseCaches) return false;
            if (this.DeleteCachesAfter != rhs.DeleteCachesAfter) return false;
            if (this.TestNormal != rhs.TestNormal) return false;
            if (this.TestObservable != rhs.TestObservable) return false;
            if (this.TestFolder != rhs.TestFolder) return false;
            if (!object.Equals(this.DataFolder, rhs.DataFolder)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ReuseCaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DeleteCachesAfter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestObservable).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestFolder).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DataFolder).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static PassthroughSettings Create_Xml(
            XElement node,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PassthroughSettings Create_Xml(
            XElement node,
            out PassthroughSettings_ErrorMask errorMask,
            bool doMasks = true,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PassthroughSettings Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new PassthroughSettings();
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughSettingsCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static PassthroughSettings Create_Xml(
            string path,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughSettings Create_Xml(
            string path,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughSettings Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PassthroughSettings Create_Xml(
            Stream stream,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughSettings Create_Xml(
            Stream stream,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughSettings Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<PassthroughSettings>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out PassthroughSettings_ErrorMask errorMask,
            bool doMasks = true,
            PassthroughSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            PassthroughSettings_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            PassthroughSettingsCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        public PassthroughSettings Copy(
            PassthroughSettings_CopyMask copyMask = null,
            IPassthroughSettingsGetter def = null)
        {
            return PassthroughSettings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static PassthroughSettings Copy(
            IPassthroughSettings item,
            PassthroughSettings_CopyMask copyMask = null,
            IPassthroughSettingsGetter def = null)
        {
            PassthroughSettings ret;
            if (item.GetType().Equals(typeof(PassthroughSettings)))
            {
                ret = new PassthroughSettings();
            }
            else
            {
                ret = (PassthroughSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static PassthroughSettings Copy_ToLoqui(
            IPassthroughSettingsGetter item,
            PassthroughSettings_CopyMask copyMask = null,
            IPassthroughSettingsGetter def = null)
        {
            PassthroughSettings ret;
            if (item.GetType().Equals(typeof(PassthroughSettings)))
            {
                ret = new PassthroughSettings() as PassthroughSettings;
            }
            else
            {
                ret = (PassthroughSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPassthroughSettingsGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IPassthroughSettingsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPassthroughSettingsGetter rhs,
            PassthroughSettings_CopyMask copyMask,
            IPassthroughSettingsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPassthroughSettingsGetter rhs,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_CopyMask copyMask = null,
            IPassthroughSettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PassthroughSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPassthroughSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_CopyMask copyMask = null,
            IPassthroughSettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PassthroughSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    this.ReuseCaches = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    this.DeleteCachesAfter = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    this.TestNormal = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestObservable:
                    this.TestObservable = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    this.TestFolder = (Boolean)obj;
                    break;
                case PassthroughSettings_FieldIndex.DataFolder:
                    this.DataFolder = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PassthroughSettingsCommon.Clear(this, cmds);
        }


        public static PassthroughSettings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new PassthroughSettings();
            foreach (var pair in fields)
            {
                CopyInInternal_PassthroughSettings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_PassthroughSettings(PassthroughSettings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out PassthroughSettings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    obj.ReuseCaches = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    obj.DeleteCachesAfter = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    obj.TestNormal = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestObservable:
                    obj.TestObservable = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    obj.TestFolder = (Boolean)pair.Value;
                    break;
                case PassthroughSettings_FieldIndex.DataFolder:
                    obj.DataFolder = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, PassthroughSettings obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPassthroughSettings : IPassthroughSettingsGetter, ILoquiClass<IPassthroughSettings, IPassthroughSettingsGetter>, ILoquiClass<PassthroughSettings, IPassthroughSettingsGetter>
    {
        new Boolean ReuseCaches { get; set; }

        new Boolean DeleteCachesAfter { get; set; }

        new Boolean TestNormal { get; set; }

        new Boolean TestObservable { get; set; }

        new Boolean TestFolder { get; set; }

        new String DataFolder { get; set; }

    }

    public partial interface IPassthroughSettingsGetter : ILoquiObject
    {
        #region ReuseCaches
        Boolean ReuseCaches { get; }

        #endregion
        #region DeleteCachesAfter
        Boolean DeleteCachesAfter { get; }

        #endregion
        #region TestNormal
        Boolean TestNormal { get; }

        #endregion
        #region TestObservable
        Boolean TestObservable { get; }

        #endregion
        #region TestFolder
        Boolean TestFolder { get; }

        #endregion
        #region DataFolder
        String DataFolder { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum PassthroughSettings_FieldIndex
    {
        ReuseCaches = 0,
        DeleteCachesAfter = 1,
        TestNormal = 2,
        TestObservable = 3,
        TestFolder = 4,
        DataFolder = 5,
    }
    #endregion

    #region Registration
    public class PassthroughSettings_Registration : ILoquiRegistration
    {
        public static readonly PassthroughSettings_Registration Instance = new PassthroughSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6e04291-8a1a-4f43-baa4-0f5fc5074d8b";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(PassthroughSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(PassthroughSettings_ErrorMask);

        public static readonly Type ClassType = typeof(PassthroughSettings);

        public static readonly Type GetterType = typeof(IPassthroughSettingsGetter);

        public static readonly Type SetterType = typeof(IPassthroughSettings);

        public static readonly Type CommonType = typeof(PassthroughSettingsCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.PassthroughSettings";

        public const string Name = "PassthroughSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REUSECACHES":
                    return (ushort)PassthroughSettings_FieldIndex.ReuseCaches;
                case "DELETECACHESAFTER":
                    return (ushort)PassthroughSettings_FieldIndex.DeleteCachesAfter;
                case "TESTNORMAL":
                    return (ushort)PassthroughSettings_FieldIndex.TestNormal;
                case "TESTOBSERVABLE":
                    return (ushort)PassthroughSettings_FieldIndex.TestObservable;
                case "TESTFOLDER":
                    return (ushort)PassthroughSettings_FieldIndex.TestFolder;
                case "DATAFOLDER":
                    return (ushort)PassthroughSettings_FieldIndex.DataFolder;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return "ReuseCaches";
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return "DeleteCachesAfter";
                case PassthroughSettings_FieldIndex.TestNormal:
                    return "TestNormal";
                case PassthroughSettings_FieldIndex.TestObservable:
                    return "TestObservable";
                case PassthroughSettings_FieldIndex.TestFolder:
                    return "TestFolder";
                case PassthroughSettings_FieldIndex.DataFolder:
                    return "DataFolder";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestNormal:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestObservable:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestFolder:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.DataFolder:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PassthroughSettingsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPassthroughSettings item,
            IPassthroughSettingsGetter rhs,
            IPassthroughSettingsGetter def,
            ErrorMaskBuilder errorMask,
            PassthroughSettings_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.ReuseCaches ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.ReuseCaches);
                item.ReuseCaches = rhs.ReuseCaches;
                errorMask?.PopIndex();
            }
            if (copyMask?.DeleteCachesAfter ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DeleteCachesAfter);
                item.DeleteCachesAfter = rhs.DeleteCachesAfter;
                errorMask?.PopIndex();
            }
            if (copyMask?.TestNormal ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestNormal);
                item.TestNormal = rhs.TestNormal;
                errorMask?.PopIndex();
            }
            if (copyMask?.TestObservable ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestObservable);
                item.TestObservable = rhs.TestObservable;
                errorMask?.PopIndex();
            }
            if (copyMask?.TestFolder ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestFolder);
                item.TestFolder = rhs.TestFolder;
                errorMask?.PopIndex();
            }
            if (copyMask?.DataFolder ?? true)
            {
                errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DataFolder);
                item.DataFolder = rhs.DataFolder;
                errorMask?.PopIndex();
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPassthroughSettings obj,
            NotifyingFireParameters cmds = null)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPassthroughSettings obj,
            NotifyingUnsetParameters cmds = null)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    obj.ReuseCaches = default(Boolean);
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    obj.DeleteCachesAfter = PassthroughSettings._DeleteCachesAfter_Default;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    obj.TestNormal = default(Boolean);
                    break;
                case PassthroughSettings_FieldIndex.TestObservable:
                    obj.TestObservable = default(Boolean);
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    obj.TestFolder = default(Boolean);
                    break;
                case PassthroughSettings_FieldIndex.DataFolder:
                    obj.DataFolder = default(String);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPassthroughSettings obj)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestObservable:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.DataFolder:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IPassthroughSettingsGetter obj)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return obj.ReuseCaches;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return obj.DeleteCachesAfter;
                case PassthroughSettings_FieldIndex.TestNormal:
                    return obj.TestNormal;
                case PassthroughSettings_FieldIndex.TestObservable:
                    return obj.TestObservable;
                case PassthroughSettings_FieldIndex.TestFolder:
                    return obj.TestFolder;
                case PassthroughSettings_FieldIndex.DataFolder:
                    return obj.DataFolder;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IPassthroughSettings item,
            NotifyingUnsetParameters cmds = null)
        {
            item.ReuseCaches = default(Boolean);
            item.DeleteCachesAfter = PassthroughSettings._DeleteCachesAfter_Default;
            item.TestNormal = default(Boolean);
            item.TestObservable = default(Boolean);
            item.TestFolder = default(Boolean);
            item.DataFolder = default(String);
        }

        public static PassthroughSettings_Mask<bool> GetEqualsMask(
            this IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PassthroughSettings_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            PassthroughSettings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ReuseCaches = item.ReuseCaches == rhs.ReuseCaches;
            ret.DeleteCachesAfter = item.DeleteCachesAfter == rhs.DeleteCachesAfter;
            ret.TestNormal = item.TestNormal == rhs.TestNormal;
            ret.TestObservable = item.TestObservable == rhs.TestObservable;
            ret.TestFolder = item.TestFolder == rhs.TestFolder;
            ret.DataFolder = object.Equals(item.DataFolder, rhs.DataFolder);
        }

        public static string ToString(
            this IPassthroughSettingsGetter item,
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPassthroughSettingsGetter item,
            FileGeneration fg,
            string name = null,
            PassthroughSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(PassthroughSettings)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(PassthroughSettings)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ReuseCaches ?? true)
                {
                    fg.AppendLine($"ReuseCaches => {item.ReuseCaches}");
                }
                if (printMask?.DeleteCachesAfter ?? true)
                {
                    fg.AppendLine($"DeleteCachesAfter => {item.DeleteCachesAfter}");
                }
                if (printMask?.TestNormal ?? true)
                {
                    fg.AppendLine($"TestNormal => {item.TestNormal}");
                }
                if (printMask?.TestObservable ?? true)
                {
                    fg.AppendLine($"TestObservable => {item.TestObservable}");
                }
                if (printMask?.TestFolder ?? true)
                {
                    fg.AppendLine($"TestFolder => {item.TestFolder}");
                }
                if (printMask?.DataFolder ?? true)
                {
                    fg.AppendLine($"DataFolder => {item.DataFolder}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPassthroughSettingsGetter item,
            PassthroughSettings_Mask<bool?> checkMask)
        {
            return true;
        }

        public static PassthroughSettings_Mask<bool> GetHasBeenSetMask(IPassthroughSettingsGetter item)
        {
            var ret = new PassthroughSettings_Mask<bool>();
            ret.ReuseCaches = true;
            ret.DeleteCachesAfter = true;
            ret.TestNormal = true;
            ret.TestObservable = true;
            ret.TestFolder = true;
            ret.DataFolder = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IPassthroughSettingsGetter item,
            bool doMasks,
            out PassthroughSettings_ErrorMask errorMask,
            PassthroughSettings_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IPassthroughSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.PassthroughSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.PassthroughSettings");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this IPassthroughSettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReuseCaches) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseCaches),
                    item: item.ReuseCaches,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.ReuseCaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DeleteCachesAfter) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeleteCachesAfter),
                    item: item.DeleteCachesAfter,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.DeleteCachesAfter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestNormal) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestNormal),
                    item: item.TestNormal,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestNormal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestObservable) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestObservable),
                    item: item.TestObservable,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestObservable,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestFolder) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestFolder),
                    item: item.TestFolder,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestFolder,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DataFolder) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DataFolder),
                    item: item.DataFolder,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.DataFolder,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this PassthroughSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughSettingsCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this PassthroughSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ReuseCaches":
                    try
                    {
                        errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.ReuseCaches);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean ReuseCachesParse,
                            errorMask: errorMask))
                        {
                            item.ReuseCaches = ReuseCachesParse;
                        }
                        else
                        {
                            item.ReuseCaches = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeleteCachesAfter":
                    try
                    {
                        errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DeleteCachesAfter);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean DeleteCachesAfterParse,
                            errorMask: errorMask))
                        {
                            item.DeleteCachesAfter = DeleteCachesAfterParse;
                        }
                        else
                        {
                            item.DeleteCachesAfter = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TestNormal":
                    try
                    {
                        errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestNormal);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean TestNormalParse,
                            errorMask: errorMask))
                        {
                            item.TestNormal = TestNormalParse;
                        }
                        else
                        {
                            item.TestNormal = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TestObservable":
                    try
                    {
                        errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestObservable);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean TestObservableParse,
                            errorMask: errorMask))
                        {
                            item.TestObservable = TestObservableParse;
                        }
                        else
                        {
                            item.TestObservable = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TestFolder":
                    try
                    {
                        errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestFolder);
                        if (BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Boolean TestFolderParse,
                            errorMask: errorMask))
                        {
                            item.TestFolder = TestFolderParse;
                        }
                        else
                        {
                            item.TestFolder = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DataFolder":
                    try
                    {
                        errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DataFolder);
                        if (StringXmlTranslation.Instance.Parse(
                            node: node,
                            item: out String DataFolderParse,
                            errorMask: errorMask))
                        {
                            item.DataFolder = DataFolderParse;
                        }
                        else
                        {
                            item.DataFolder = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class PassthroughSettings_Mask<T> : IMask<T>, IEquatable<PassthroughSettings_Mask<T>>
    {
        #region Ctors
        public PassthroughSettings_Mask()
        {
        }

        public PassthroughSettings_Mask(T initialValue)
        {
            this.ReuseCaches = initialValue;
            this.DeleteCachesAfter = initialValue;
            this.TestNormal = initialValue;
            this.TestObservable = initialValue;
            this.TestFolder = initialValue;
            this.DataFolder = initialValue;
        }
        #endregion

        #region Members
        public T ReuseCaches;
        public T DeleteCachesAfter;
        public T TestNormal;
        public T TestObservable;
        public T TestFolder;
        public T DataFolder;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is PassthroughSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(PassthroughSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ReuseCaches, rhs.ReuseCaches)) return false;
            if (!object.Equals(this.DeleteCachesAfter, rhs.DeleteCachesAfter)) return false;
            if (!object.Equals(this.TestNormal, rhs.TestNormal)) return false;
            if (!object.Equals(this.TestObservable, rhs.TestObservable)) return false;
            if (!object.Equals(this.TestFolder, rhs.TestFolder)) return false;
            if (!object.Equals(this.DataFolder, rhs.DataFolder)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ReuseCaches?.GetHashCode());
            ret = ret.CombineHashCode(this.DeleteCachesAfter?.GetHashCode());
            ret = ret.CombineHashCode(this.TestNormal?.GetHashCode());
            ret = ret.CombineHashCode(this.TestObservable?.GetHashCode());
            ret = ret.CombineHashCode(this.TestFolder?.GetHashCode());
            ret = ret.CombineHashCode(this.DataFolder?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ReuseCaches)) return false;
            if (!eval(this.DeleteCachesAfter)) return false;
            if (!eval(this.TestNormal)) return false;
            if (!eval(this.TestObservable)) return false;
            if (!eval(this.TestFolder)) return false;
            if (!eval(this.DataFolder)) return false;
            return true;
        }
        #endregion

        #region Translate
        public PassthroughSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new PassthroughSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(PassthroughSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.ReuseCaches = eval(this.ReuseCaches);
            obj.DeleteCachesAfter = eval(this.DeleteCachesAfter);
            obj.TestNormal = eval(this.TestNormal);
            obj.TestObservable = eval(this.TestObservable);
            obj.TestFolder = eval(this.TestFolder);
            obj.DataFolder = eval(this.DataFolder);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(PassthroughSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, PassthroughSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(PassthroughSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ReuseCaches ?? true)
                {
                    fg.AppendLine($"ReuseCaches => {ReuseCaches}");
                }
                if (printMask?.DeleteCachesAfter ?? true)
                {
                    fg.AppendLine($"DeleteCachesAfter => {DeleteCachesAfter}");
                }
                if (printMask?.TestNormal ?? true)
                {
                    fg.AppendLine($"TestNormal => {TestNormal}");
                }
                if (printMask?.TestObservable ?? true)
                {
                    fg.AppendLine($"TestObservable => {TestObservable}");
                }
                if (printMask?.TestFolder ?? true)
                {
                    fg.AppendLine($"TestFolder => {TestFolder}");
                }
                if (printMask?.DataFolder ?? true)
                {
                    fg.AppendLine($"DataFolder => {DataFolder}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class PassthroughSettings_ErrorMask : IErrorMask, IErrorMask<PassthroughSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ReuseCaches;
        public Exception DeleteCachesAfter;
        public Exception TestNormal;
        public Exception TestObservable;
        public Exception TestFolder;
        public Exception DataFolder;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return ReuseCaches;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return DeleteCachesAfter;
                case PassthroughSettings_FieldIndex.TestNormal:
                    return TestNormal;
                case PassthroughSettings_FieldIndex.TestObservable:
                    return TestObservable;
                case PassthroughSettings_FieldIndex.TestFolder:
                    return TestFolder;
                case PassthroughSettings_FieldIndex.DataFolder:
                    return DataFolder;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    this.ReuseCaches = ex;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    this.DeleteCachesAfter = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    this.TestNormal = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestObservable:
                    this.TestObservable = ex;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    this.TestFolder = ex;
                    break;
                case PassthroughSettings_FieldIndex.DataFolder:
                    this.DataFolder = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    this.ReuseCaches = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    this.DeleteCachesAfter = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestNormal:
                    this.TestNormal = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestObservable:
                    this.TestObservable = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.TestFolder:
                    this.TestFolder = (Exception)obj;
                    break;
                case PassthroughSettings_FieldIndex.DataFolder:
                    this.DataFolder = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ReuseCaches != null) return true;
            if (DeleteCachesAfter != null) return true;
            if (TestNormal != null) return true;
            if (TestObservable != null) return true;
            if (TestFolder != null) return true;
            if (DataFolder != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("PassthroughSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ReuseCaches => {ReuseCaches}");
            fg.AppendLine($"DeleteCachesAfter => {DeleteCachesAfter}");
            fg.AppendLine($"TestNormal => {TestNormal}");
            fg.AppendLine($"TestObservable => {TestObservable}");
            fg.AppendLine($"TestFolder => {TestFolder}");
            fg.AppendLine($"DataFolder => {DataFolder}");
        }
        #endregion

        #region Combine
        public PassthroughSettings_ErrorMask Combine(PassthroughSettings_ErrorMask rhs)
        {
            var ret = new PassthroughSettings_ErrorMask();
            ret.ReuseCaches = this.ReuseCaches.Combine(rhs.ReuseCaches);
            ret.DeleteCachesAfter = this.DeleteCachesAfter.Combine(rhs.DeleteCachesAfter);
            ret.TestNormal = this.TestNormal.Combine(rhs.TestNormal);
            ret.TestObservable = this.TestObservable.Combine(rhs.TestObservable);
            ret.TestFolder = this.TestFolder.Combine(rhs.TestFolder);
            ret.DataFolder = this.DataFolder.Combine(rhs.DataFolder);
            return ret;
        }
        public static PassthroughSettings_ErrorMask Combine(PassthroughSettings_ErrorMask lhs, PassthroughSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static PassthroughSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new PassthroughSettings_ErrorMask();
        }
        #endregion

    }
    public class PassthroughSettings_CopyMask
    {
        public PassthroughSettings_CopyMask()
        {
        }

        public PassthroughSettings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ReuseCaches = defaultOn;
            this.DeleteCachesAfter = defaultOn;
            this.TestNormal = defaultOn;
            this.TestObservable = defaultOn;
            this.TestFolder = defaultOn;
            this.DataFolder = defaultOn;
        }

        #region Members
        public bool ReuseCaches;
        public bool DeleteCachesAfter;
        public bool TestNormal;
        public bool TestObservable;
        public bool TestFolder;
        public bool DataFolder;
        #endregion

    }

    public class PassthroughSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ReuseCaches;
        public bool DeleteCachesAfter;
        public bool TestNormal;
        public bool TestObservable;
        public bool TestFolder;
        public bool DataFolder;
        #endregion

        #region Ctors
        public PassthroughSettings_TranslationMask()
        {
        }

        public PassthroughSettings_TranslationMask(bool defaultOn)
        {
            this.ReuseCaches = defaultOn;
            this.DeleteCachesAfter = defaultOn;
            this.TestNormal = defaultOn;
            this.TestObservable = defaultOn;
            this.TestFolder = defaultOn;
            this.DataFolder = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ReuseCaches, null));
            ret.Add((DeleteCachesAfter, null));
            ret.Add((TestNormal, null));
            ret.Add((TestObservable, null));
            ret.Add((TestFolder, null));
            ret.Add((DataFolder, null));
        }
    }
    #endregion

    #endregion

}
