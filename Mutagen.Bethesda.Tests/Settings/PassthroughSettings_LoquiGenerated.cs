/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class PassthroughSettings :
        IPassthroughSettings,
        ILoquiObjectSetter<PassthroughSettings>,
        IEquatable<PassthroughSettings>,
        IEqualsMask
    {
        #region Ctor
        public PassthroughSettings()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ReuseCaches
        public Boolean ReuseCaches { get; set; } = default;
        #endregion
        #region ReorderRecords
        public Boolean ReorderRecords { get; set; } = default;
        #endregion
        #region DeleteCachesAfter
        public readonly static Boolean _DeleteCachesAfter_Default = true;
        public Boolean DeleteCachesAfter { get; set; } = default;
        #endregion
        #region TestNormal
        public Boolean TestNormal { get; set; } = default;
        #endregion
        #region TestBinaryOverlay
        public Boolean TestBinaryOverlay { get; set; } = default;
        #endregion
        #region TestImport
        public Boolean TestImport { get; set; } = default;
        #endregion
        #region TestFolder
        public Boolean TestFolder { get; set; } = default;
        #endregion
        #region TestCopyIn
        public Boolean TestCopyIn { get; set; } = default;
        #endregion

        #region To String
        public override string ToString()
        {
            return PassthroughSettingsMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PassthroughSettingsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is IPassthroughSettingsGetter rhs)) return false;
            return ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PassthroughSettings obj)
        {
            return ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<T> :
            IMask<T>,
            IEquatable<Mask<T>>
            where T : notnull
        {
            #region Ctors
            public Mask(T initialValue)
            {
                this.ReuseCaches = initialValue;
                this.ReorderRecords = initialValue;
                this.DeleteCachesAfter = initialValue;
                this.TestNormal = initialValue;
                this.TestBinaryOverlay = initialValue;
                this.TestImport = initialValue;
                this.TestFolder = initialValue;
                this.TestCopyIn = initialValue;
            }

            public Mask(
                T ReuseCaches,
                T ReorderRecords,
                T DeleteCachesAfter,
                T TestNormal,
                T TestBinaryOverlay,
                T TestImport,
                T TestFolder,
                T TestCopyIn)
            {
                this.ReuseCaches = ReuseCaches;
                this.ReorderRecords = ReorderRecords;
                this.DeleteCachesAfter = DeleteCachesAfter;
                this.TestNormal = TestNormal;
                this.TestBinaryOverlay = TestBinaryOverlay;
                this.TestImport = TestImport;
                this.TestFolder = TestFolder;
                this.TestCopyIn = TestCopyIn;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public T ReuseCaches;
            public T ReorderRecords;
            public T DeleteCachesAfter;
            public T TestNormal;
            public T TestBinaryOverlay;
            public T TestImport;
            public T TestFolder;
            public T TestCopyIn;
            #endregion

            #region Equals
            public override bool Equals(object obj)
            {
                if (!(obj is Mask<T> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<T> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ReuseCaches, rhs.ReuseCaches)) return false;
                if (!object.Equals(this.ReorderRecords, rhs.ReorderRecords)) return false;
                if (!object.Equals(this.DeleteCachesAfter, rhs.DeleteCachesAfter)) return false;
                if (!object.Equals(this.TestNormal, rhs.TestNormal)) return false;
                if (!object.Equals(this.TestBinaryOverlay, rhs.TestBinaryOverlay)) return false;
                if (!object.Equals(this.TestImport, rhs.TestImport)) return false;
                if (!object.Equals(this.TestFolder, rhs.TestFolder)) return false;
                if (!object.Equals(this.TestCopyIn, rhs.TestCopyIn)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.ReuseCaches?.GetHashCode());
                ret = ret.CombineHashCode(this.ReorderRecords?.GetHashCode());
                ret = ret.CombineHashCode(this.DeleteCachesAfter?.GetHashCode());
                ret = ret.CombineHashCode(this.TestNormal?.GetHashCode());
                ret = ret.CombineHashCode(this.TestBinaryOverlay?.GetHashCode());
                ret = ret.CombineHashCode(this.TestImport?.GetHashCode());
                ret = ret.CombineHashCode(this.TestFolder?.GetHashCode());
                ret = ret.CombineHashCode(this.TestCopyIn?.GetHashCode());
                return ret;
            }

            #endregion

            #region All Equal
            public bool AllEqual(Func<T, bool> eval)
            {
                if (!eval(this.ReuseCaches)) return false;
                if (!eval(this.ReorderRecords)) return false;
                if (!eval(this.DeleteCachesAfter)) return false;
                if (!eval(this.TestNormal)) return false;
                if (!eval(this.TestBinaryOverlay)) return false;
                if (!eval(this.TestImport)) return false;
                if (!eval(this.TestFolder)) return false;
                if (!eval(this.TestCopyIn)) return false;
                return true;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<T, R> eval)
            {
                var ret = new PassthroughSettings.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<T, R> eval)
            {
                obj.ReuseCaches = eval(this.ReuseCaches);
                obj.ReorderRecords = eval(this.ReorderRecords);
                obj.DeleteCachesAfter = eval(this.DeleteCachesAfter);
                obj.TestNormal = eval(this.TestNormal);
                obj.TestBinaryOverlay = eval(this.TestBinaryOverlay);
                obj.TestImport = eval(this.TestImport);
                obj.TestFolder = eval(this.TestFolder);
                obj.TestCopyIn = eval(this.TestCopyIn);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PassthroughSettings.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PassthroughSettings.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PassthroughSettings.Mask<T>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ReuseCaches ?? true)
                    {
                        fg.AppendLine($"ReuseCaches => {ReuseCaches}");
                    }
                    if (printMask?.ReorderRecords ?? true)
                    {
                        fg.AppendLine($"ReorderRecords => {ReorderRecords}");
                    }
                    if (printMask?.DeleteCachesAfter ?? true)
                    {
                        fg.AppendLine($"DeleteCachesAfter => {DeleteCachesAfter}");
                    }
                    if (printMask?.TestNormal ?? true)
                    {
                        fg.AppendLine($"TestNormal => {TestNormal}");
                    }
                    if (printMask?.TestBinaryOverlay ?? true)
                    {
                        fg.AppendLine($"TestBinaryOverlay => {TestBinaryOverlay}");
                    }
                    if (printMask?.TestImport ?? true)
                    {
                        fg.AppendLine($"TestImport => {TestImport}");
                    }
                    if (printMask?.TestFolder ?? true)
                    {
                        fg.AppendLine($"TestFolder => {TestFolder}");
                    }
                    if (printMask?.TestCopyIn ?? true)
                    {
                        fg.AppendLine($"TestCopyIn => {TestCopyIn}");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ReuseCaches;
            public Exception? ReorderRecords;
            public Exception? DeleteCachesAfter;
            public Exception? TestNormal;
            public Exception? TestBinaryOverlay;
            public Exception? TestImport;
            public Exception? TestFolder;
            public Exception? TestCopyIn;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
                switch (enu)
                {
                    case PassthroughSettings_FieldIndex.ReuseCaches:
                        return ReuseCaches;
                    case PassthroughSettings_FieldIndex.ReorderRecords:
                        return ReorderRecords;
                    case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                        return DeleteCachesAfter;
                    case PassthroughSettings_FieldIndex.TestNormal:
                        return TestNormal;
                    case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                        return TestBinaryOverlay;
                    case PassthroughSettings_FieldIndex.TestImport:
                        return TestImport;
                    case PassthroughSettings_FieldIndex.TestFolder:
                        return TestFolder;
                    case PassthroughSettings_FieldIndex.TestCopyIn:
                        return TestCopyIn;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
                switch (enu)
                {
                    case PassthroughSettings_FieldIndex.ReuseCaches:
                        this.ReuseCaches = ex;
                        break;
                    case PassthroughSettings_FieldIndex.ReorderRecords:
                        this.ReorderRecords = ex;
                        break;
                    case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                        this.DeleteCachesAfter = ex;
                        break;
                    case PassthroughSettings_FieldIndex.TestNormal:
                        this.TestNormal = ex;
                        break;
                    case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                        this.TestBinaryOverlay = ex;
                        break;
                    case PassthroughSettings_FieldIndex.TestImport:
                        this.TestImport = ex;
                        break;
                    case PassthroughSettings_FieldIndex.TestFolder:
                        this.TestFolder = ex;
                        break;
                    case PassthroughSettings_FieldIndex.TestCopyIn:
                        this.TestCopyIn = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
                switch (enu)
                {
                    case PassthroughSettings_FieldIndex.ReuseCaches:
                        this.ReuseCaches = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.ReorderRecords:
                        this.ReorderRecords = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                        this.DeleteCachesAfter = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.TestNormal:
                        this.TestNormal = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                        this.TestBinaryOverlay = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.TestImport:
                        this.TestImport = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.TestFolder:
                        this.TestFolder = (Exception)obj;
                        break;
                    case PassthroughSettings_FieldIndex.TestCopyIn:
                        this.TestCopyIn = (Exception)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ReuseCaches != null) return true;
                if (ReorderRecords != null) return true;
                if (DeleteCachesAfter != null) return true;
                if (TestNormal != null) return true;
                if (TestBinaryOverlay != null) return true;
                if (TestImport != null) return true;
                if (TestFolder != null) return true;
                if (TestCopyIn != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg)
            {
                fg.AppendLine("ErrorMask =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendLine($"ReuseCaches => {ReuseCaches}");
                fg.AppendLine($"ReorderRecords => {ReorderRecords}");
                fg.AppendLine($"DeleteCachesAfter => {DeleteCachesAfter}");
                fg.AppendLine($"TestNormal => {TestNormal}");
                fg.AppendLine($"TestBinaryOverlay => {TestBinaryOverlay}");
                fg.AppendLine($"TestImport => {TestImport}");
                fg.AppendLine($"TestFolder => {TestFolder}");
                fg.AppendLine($"TestCopyIn => {TestCopyIn}");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ReuseCaches = this.ReuseCaches.Combine(rhs.ReuseCaches);
                ret.ReorderRecords = this.ReorderRecords.Combine(rhs.ReorderRecords);
                ret.DeleteCachesAfter = this.DeleteCachesAfter.Combine(rhs.DeleteCachesAfter);
                ret.TestNormal = this.TestNormal.Combine(rhs.TestNormal);
                ret.TestBinaryOverlay = this.TestBinaryOverlay.Combine(rhs.TestBinaryOverlay);
                ret.TestImport = this.TestImport.Combine(rhs.TestImport);
                ret.TestFolder = this.TestFolder.Combine(rhs.TestFolder);
                ret.TestCopyIn = this.TestCopyIn.Combine(rhs.TestCopyIn);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool ReuseCaches;
            public bool ReorderRecords;
            public bool DeleteCachesAfter;
            public bool TestNormal;
            public bool TestBinaryOverlay;
            public bool TestImport;
            public bool TestFolder;
            public bool TestCopyIn;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.ReuseCaches = defaultOn;
                this.ReorderRecords = defaultOn;
                this.DeleteCachesAfter = defaultOn;
                this.TestNormal = defaultOn;
                this.TestBinaryOverlay = defaultOn;
                this.TestImport = defaultOn;
                this.TestFolder = defaultOn;
                this.TestCopyIn = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ReuseCaches, null));
                ret.Add((ReorderRecords, null));
                ret.Add((DeleteCachesAfter, null));
                ret.Add((TestNormal, null));
                ret.Add((TestBinaryOverlay, null));
                ret.Add((TestImport, null));
                ret.Add((TestFolder, null));
                ret.Add((TestCopyIn, null));
            }
        }
        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => PassthroughSettingsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PassthroughSettingsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static PassthroughSettings CreateFromXml(
            XElement node,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PassthroughSettings CreateFromXml(
            XElement node,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static PassthroughSettings CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PassthroughSettings();
            ((PassthroughSettingsSetterCommon)((IPassthroughSettingsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PassthroughSettings CreateFromXml(
            string path,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            string path,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PassthroughSettings CreateFromXml(
            Stream stream,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            Stream stream,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PassthroughSettings CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPassthroughSettingsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PassthroughSettingsSetterCommon)((IPassthroughSettingsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PassthroughSettings GetNew()
        {
            return new PassthroughSettings();
        }

    }
    #endregion

    #region Interface
    public partial interface IPassthroughSettings :
        IPassthroughSettingsGetter,
        ILoquiObjectSetter<IPassthroughSettings>
    {
        new Boolean ReuseCaches { get; set; }
        new Boolean ReorderRecords { get; set; }
        new Boolean DeleteCachesAfter { get; set; }
        new Boolean TestNormal { get; set; }
        new Boolean TestBinaryOverlay { get; set; }
        new Boolean TestImport { get; set; }
        new Boolean TestFolder { get; set; }
        new Boolean TestCopyIn { get; set; }
    }

    public partial interface IPassthroughSettingsGetter :
        ILoquiObject,
        ILoquiObject<IPassthroughSettingsGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Boolean ReuseCaches { get; }
        Boolean ReorderRecords { get; }
        Boolean DeleteCachesAfter { get; }
        Boolean TestNormal { get; }
        Boolean TestBinaryOverlay { get; }
        Boolean TestImport { get; }
        Boolean TestFolder { get; }
        Boolean TestCopyIn { get; }

    }

    #endregion

    #region Common MixIn
    public static class PassthroughSettingsMixIn
    {
        public static void Clear(this IPassthroughSettings item)
        {
            ((PassthroughSettingsSetterCommon)((IPassthroughSettingsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PassthroughSettings.Mask<bool> GetEqualsMask(
            this IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPassthroughSettingsGetter item,
            string? name = null,
            PassthroughSettings.Mask<bool>? printMask = null)
        {
            return ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPassthroughSettingsGetter item,
            FileGeneration fg,
            string? name = null,
            PassthroughSettings.Mask<bool>? printMask = null)
        {
            ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPassthroughSettingsGetter item,
            PassthroughSettings.Mask<bool?> checkMask)
        {
            return ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PassthroughSettings.Mask<bool> GetHasBeenSetMask(this IPassthroughSettingsGetter item)
        {
            var ret = new PassthroughSettings.Mask<bool>(false);
            ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs)
        {
            return ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPassthroughSettings lhs,
            IPassthroughSettingsGetter rhs,
            PassthroughSettings.TranslationMask? copyMask = null)
        {
            ((PassthroughSettingsSetterTranslationCommon)((IPassthroughSettingsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IPassthroughSettings lhs,
            IPassthroughSettingsGetter rhs,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PassthroughSettingsSetterTranslationCommon)((IPassthroughSettingsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PassthroughSettings.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPassthroughSettings lhs,
            IPassthroughSettingsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PassthroughSettingsSetterTranslationCommon)((IPassthroughSettingsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PassthroughSettings DeepCopy(
            this IPassthroughSettingsGetter item,
            PassthroughSettings.TranslationMask? copyMask = null)
        {
            return ((PassthroughSettingsSetterTranslationCommon)((IPassthroughSettingsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PassthroughSettings DeepCopy(
            this IPassthroughSettingsGetter item,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? copyMask = null)
        {
            return ((PassthroughSettingsSetterTranslationCommon)((IPassthroughSettingsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PassthroughSettings DeepCopy(
            this IPassthroughSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PassthroughSettingsSetterTranslationCommon)((IPassthroughSettingsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPassthroughSettings item,
            XElement node,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPassthroughSettings item,
            XElement node,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PassthroughSettingsSetterCommon)((IPassthroughSettingsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            string path,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            string path,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            string path,
            ErrorMaskBuilder? errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            Stream stream,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            Stream stream,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPassthroughSettings item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum PassthroughSettings_FieldIndex
    {
        ReuseCaches = 0,
        ReorderRecords = 1,
        DeleteCachesAfter = 2,
        TestNormal = 3,
        TestBinaryOverlay = 4,
        TestImport = 5,
        TestFolder = 6,
        TestCopyIn = 7,
    }
    #endregion

    #region Registration
    public partial class PassthroughSettings_Registration : ILoquiRegistration
    {
        public static readonly PassthroughSettings_Registration Instance = new PassthroughSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "b6e04291-8a1a-4f43-baa4-0f5fc5074d8b";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(PassthroughSettings.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PassthroughSettings.ErrorMask);

        public static readonly Type ClassType = typeof(PassthroughSettings);

        public static readonly Type GetterType = typeof(IPassthroughSettingsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPassthroughSettings);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.PassthroughSettings";

        public const string Name = "PassthroughSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REUSECACHES":
                    return (ushort)PassthroughSettings_FieldIndex.ReuseCaches;
                case "REORDERRECORDS":
                    return (ushort)PassthroughSettings_FieldIndex.ReorderRecords;
                case "DELETECACHESAFTER":
                    return (ushort)PassthroughSettings_FieldIndex.DeleteCachesAfter;
                case "TESTNORMAL":
                    return (ushort)PassthroughSettings_FieldIndex.TestNormal;
                case "TESTBINARYOVERLAY":
                    return (ushort)PassthroughSettings_FieldIndex.TestBinaryOverlay;
                case "TESTIMPORT":
                    return (ushort)PassthroughSettings_FieldIndex.TestImport;
                case "TESTFOLDER":
                    return (ushort)PassthroughSettings_FieldIndex.TestFolder;
                case "TESTCOPYIN":
                    return (ushort)PassthroughSettings_FieldIndex.TestCopyIn;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.ReorderRecords:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.ReorderRecords:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.ReorderRecords:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return "ReuseCaches";
                case PassthroughSettings_FieldIndex.ReorderRecords:
                    return "ReorderRecords";
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return "DeleteCachesAfter";
                case PassthroughSettings_FieldIndex.TestNormal:
                    return "TestNormal";
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                    return "TestBinaryOverlay";
                case PassthroughSettings_FieldIndex.TestImport:
                    return "TestImport";
                case PassthroughSettings_FieldIndex.TestFolder:
                    return "TestFolder";
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return "TestCopyIn";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.ReorderRecords:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                case PassthroughSettings_FieldIndex.ReorderRecords:
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                case PassthroughSettings_FieldIndex.TestNormal:
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                case PassthroughSettings_FieldIndex.TestImport:
                case PassthroughSettings_FieldIndex.TestFolder:
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            PassthroughSettings_FieldIndex enu = (PassthroughSettings_FieldIndex)index;
            switch (enu)
            {
                case PassthroughSettings_FieldIndex.ReuseCaches:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.ReorderRecords:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.DeleteCachesAfter:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestNormal:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestBinaryOverlay:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestImport:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestFolder:
                    return typeof(Boolean);
                case PassthroughSettings_FieldIndex.TestCopyIn:
                    return typeof(Boolean);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PassthroughSettingsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PassthroughSettingsSetterCommon
    {
        public static readonly PassthroughSettingsSetterCommon Instance = new PassthroughSettingsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPassthroughSettings item)
        {
            ClearPartial();
            item.ReuseCaches = default;
            item.ReorderRecords = default;
            item.DeleteCachesAfter = PassthroughSettings._DeleteCachesAfter_Default;
            item.TestNormal = default;
            item.TestBinaryOverlay = default;
            item.TestImport = default;
            item.TestFolder = default;
            item.TestCopyIn = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IPassthroughSettings item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class PassthroughSettingsCommon
    {
        public static readonly PassthroughSettingsCommon Instance = new PassthroughSettingsCommon();

        public PassthroughSettings.Mask<bool> GetEqualsMask(
            IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PassthroughSettings.Mask<bool>(false);
            ((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPassthroughSettingsGetter item,
            IPassthroughSettingsGetter rhs,
            PassthroughSettings.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ReuseCaches = item.ReuseCaches == rhs.ReuseCaches;
            ret.ReorderRecords = item.ReorderRecords == rhs.ReorderRecords;
            ret.DeleteCachesAfter = item.DeleteCachesAfter == rhs.DeleteCachesAfter;
            ret.TestNormal = item.TestNormal == rhs.TestNormal;
            ret.TestBinaryOverlay = item.TestBinaryOverlay == rhs.TestBinaryOverlay;
            ret.TestImport = item.TestImport == rhs.TestImport;
            ret.TestFolder = item.TestFolder == rhs.TestFolder;
            ret.TestCopyIn = item.TestCopyIn == rhs.TestCopyIn;
        }
        
        public string ToString(
            IPassthroughSettingsGetter item,
            string? name = null,
            PassthroughSettings.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPassthroughSettingsGetter item,
            FileGeneration fg,
            string? name = null,
            PassthroughSettings.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PassthroughSettings =>");
            }
            else
            {
                fg.AppendLine($"{name} (PassthroughSettings) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPassthroughSettingsGetter item,
            FileGeneration fg,
            PassthroughSettings.Mask<bool>? printMask = null)
        {
            if (printMask?.ReuseCaches ?? true)
            {
                fg.AppendLine($"ReuseCaches => {item.ReuseCaches}");
            }
            if (printMask?.ReorderRecords ?? true)
            {
                fg.AppendLine($"ReorderRecords => {item.ReorderRecords}");
            }
            if (printMask?.DeleteCachesAfter ?? true)
            {
                fg.AppendLine($"DeleteCachesAfter => {item.DeleteCachesAfter}");
            }
            if (printMask?.TestNormal ?? true)
            {
                fg.AppendLine($"TestNormal => {item.TestNormal}");
            }
            if (printMask?.TestBinaryOverlay ?? true)
            {
                fg.AppendLine($"TestBinaryOverlay => {item.TestBinaryOverlay}");
            }
            if (printMask?.TestImport ?? true)
            {
                fg.AppendLine($"TestImport => {item.TestImport}");
            }
            if (printMask?.TestFolder ?? true)
            {
                fg.AppendLine($"TestFolder => {item.TestFolder}");
            }
            if (printMask?.TestCopyIn ?? true)
            {
                fg.AppendLine($"TestCopyIn => {item.TestCopyIn}");
            }
        }
        
        public bool HasBeenSet(
            IPassthroughSettingsGetter item,
            PassthroughSettings.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IPassthroughSettingsGetter item,
            PassthroughSettings.Mask<bool> mask)
        {
            mask.ReuseCaches = true;
            mask.ReorderRecords = true;
            mask.DeleteCachesAfter = true;
            mask.TestNormal = true;
            mask.TestBinaryOverlay = true;
            mask.TestImport = true;
            mask.TestFolder = true;
            mask.TestCopyIn = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPassthroughSettingsGetter? lhs,
            IPassthroughSettingsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.ReuseCaches != rhs.ReuseCaches) return false;
            if (lhs.ReorderRecords != rhs.ReorderRecords) return false;
            if (lhs.DeleteCachesAfter != rhs.DeleteCachesAfter) return false;
            if (lhs.TestNormal != rhs.TestNormal) return false;
            if (lhs.TestBinaryOverlay != rhs.TestBinaryOverlay) return false;
            if (lhs.TestImport != rhs.TestImport) return false;
            if (lhs.TestFolder != rhs.TestFolder) return false;
            if (lhs.TestCopyIn != rhs.TestCopyIn) return false;
            return true;
        }
        
        public virtual int GetHashCode(IPassthroughSettingsGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.ReuseCaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ReorderRecords).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DeleteCachesAfter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestBinaryOverlay).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestImport).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestFolder).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestCopyIn).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PassthroughSettings.GetNew();
        }
        
    }
    public partial class PassthroughSettingsSetterTranslationCommon
    {
        public static readonly PassthroughSettingsSetterTranslationCommon Instance = new PassthroughSettingsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPassthroughSettings item,
            IPassthroughSettingsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReuseCaches) ?? true))
            {
                item.ReuseCaches = rhs.ReuseCaches;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReorderRecords) ?? true))
            {
                item.ReorderRecords = rhs.ReorderRecords;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DeleteCachesAfter) ?? true))
            {
                item.DeleteCachesAfter = rhs.DeleteCachesAfter;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestNormal) ?? true))
            {
                item.TestNormal = rhs.TestNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestBinaryOverlay) ?? true))
            {
                item.TestBinaryOverlay = rhs.TestBinaryOverlay;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestImport) ?? true))
            {
                item.TestImport = rhs.TestImport;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestFolder) ?? true))
            {
                item.TestFolder = rhs.TestFolder;
            }
            if ((copyMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestCopyIn) ?? true))
            {
                item.TestCopyIn = rhs.TestCopyIn;
            }
        }
        
        #endregion
        
        public PassthroughSettings DeepCopy(
            IPassthroughSettingsGetter item,
            PassthroughSettings.TranslationMask? copyMask = null)
        {
            PassthroughSettings ret = (PassthroughSettings)((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PassthroughSettings DeepCopy(
            IPassthroughSettingsGetter item,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? copyMask = null)
        {
            PassthroughSettings ret = (PassthroughSettings)((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PassthroughSettings DeepCopy(
            IPassthroughSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PassthroughSettings ret = (PassthroughSettings)((PassthroughSettingsCommon)((IPassthroughSettingsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class PassthroughSettings
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PassthroughSettings_Registration.Instance;
        public static PassthroughSettings_Registration Registration => PassthroughSettings_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PassthroughSettingsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PassthroughSettingsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PassthroughSettingsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPassthroughSettingsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPassthroughSettingsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPassthroughSettingsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class PassthroughSettingsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static PassthroughSettingsXmlWriteTranslation Instance = new PassthroughSettingsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPassthroughSettingsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReuseCaches) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReuseCaches),
                    item: item.ReuseCaches,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.ReuseCaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReorderRecords) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ReorderRecords),
                    item: item.ReorderRecords,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.ReorderRecords,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DeleteCachesAfter) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeleteCachesAfter),
                    item: item.DeleteCachesAfter,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.DeleteCachesAfter,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestNormal) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestNormal),
                    item: item.TestNormal,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestNormal,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestBinaryOverlay) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestBinaryOverlay),
                    item: item.TestBinaryOverlay,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestBinaryOverlay,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestImport) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestImport),
                    item: item.TestImport,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestImport,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestFolder) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestFolder),
                    item: item.TestFolder,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestFolder,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestCopyIn) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestCopyIn),
                    item: item.TestCopyIn,
                    fieldIndex: (int)PassthroughSettings_FieldIndex.TestCopyIn,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPassthroughSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.PassthroughSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.PassthroughSettings");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPassthroughSettingsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IPassthroughSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IPassthroughSettingsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class PassthroughSettingsXmlCreateTranslation
    {
        public readonly static PassthroughSettingsXmlCreateTranslation Instance = new PassthroughSettingsXmlCreateTranslation();

        public static void FillPublicXml(
            IPassthroughSettings item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PassthroughSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPassthroughSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ReuseCaches":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReuseCaches) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.ReuseCaches);
                            item.ReuseCaches = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ReorderRecords":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.ReorderRecords) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.ReorderRecords);
                            item.ReorderRecords = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "DeleteCachesAfter":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.DeleteCachesAfter) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.DeleteCachesAfter);
                            item.DeleteCachesAfter = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestNormal":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestNormal) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestNormal);
                            item.TestNormal = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestBinaryOverlay":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestBinaryOverlay) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestBinaryOverlay);
                            item.TestBinaryOverlay = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestImport":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestImport) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestImport);
                            item.TestImport = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestFolder":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestFolder) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestFolder);
                            item.TestFolder = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestCopyIn":
                    if ((translationMask?.GetShouldTranslate((int)PassthroughSettings_FieldIndex.TestCopyIn) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)PassthroughSettings_FieldIndex.TestCopyIn);
                            item.TestCopyIn = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class PassthroughSettingsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            XElement node,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PassthroughSettings.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            string path,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            Stream stream,
            out PassthroughSettings.ErrorMask errorMask,
            PassthroughSettings.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            XElement node,
            string? name = null,
            PassthroughSettings.TranslationMask? translationMask = null)
        {
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPassthroughSettingsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((PassthroughSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#endregion

