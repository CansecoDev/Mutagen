/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class Passthrough : 
        IPassthrough,
        ILoquiObject<Passthrough>,
        ILoquiObjectSetter,
        IEquatable<Passthrough>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Passthrough_Registration.Instance;
        public static Passthrough_Registration Registration => Passthrough_Registration.Instance;

        #region Ctor
        public Passthrough()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Do
        public Boolean Do { get; set; }
        #endregion
        #region Path
        public String Path { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => PassthroughCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => PassthroughCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => PassthroughCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            PassthroughCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Passthrough>.GetEqualsMask(Passthrough rhs) => PassthroughCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IPassthroughGetter>.GetEqualsMask(IPassthroughGetter rhs) => PassthroughCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return PassthroughCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Passthrough_Mask<bool> printMask = null)
        {
            return PassthroughCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            PassthroughCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Passthrough_Mask<bool> GetHasBeenSetMask()
        {
            return PassthroughCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Passthrough rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Passthrough rhs)
        {
            if (rhs == null) return false;
            if (this.Do != rhs.Do) return false;
            if (!object.Equals(this.Path, rhs.Path)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Do).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Path).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Passthrough Create_Xml(
            XElement root,
            Passthrough_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Passthrough Create_Xml(
            XElement root,
            out Passthrough_ErrorMask errorMask,
            bool doMasks = true,
            Passthrough_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Passthrough_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Passthrough Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Passthrough();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Passthrough Create_Xml(
            string path,
            Passthrough_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Passthrough Create_Xml(
            string path,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Passthrough Create_Xml(
            Stream stream,
            Passthrough_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Passthrough Create_Xml(
            Stream stream,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Passthrough_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Passthrough>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Passthrough_ErrorMask errorMask,
            bool doMasks = true,
            Passthrough_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Passthrough_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            Passthrough_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            PassthroughCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Passthrough item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Do":
                    try
                    {
                        errorMask?.PushIndex((int)Passthrough_FieldIndex.Do);
                        if (BooleanXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Boolean DoParse,
                            errorMask: errorMask))
                        {
                            item.Do = DoParse;
                        }
                        else
                        {
                            item.Do = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Path":
                    try
                    {
                        errorMask?.PushIndex((int)Passthrough_FieldIndex.Path);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String PathParse,
                            errorMask: errorMask))
                        {
                            item.Path = PathParse;
                        }
                        else
                        {
                            item.Path = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public Passthrough Copy(
            Passthrough_CopyMask copyMask = null,
            IPassthroughGetter def = null)
        {
            return Passthrough.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Passthrough Copy(
            IPassthrough item,
            Passthrough_CopyMask copyMask = null,
            IPassthroughGetter def = null)
        {
            Passthrough ret;
            if (item.GetType().Equals(typeof(Passthrough)))
            {
                ret = new Passthrough();
            }
            else
            {
                ret = (Passthrough)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Passthrough Copy_ToLoqui(
            IPassthroughGetter item,
            Passthrough_CopyMask copyMask = null,
            IPassthroughGetter def = null)
        {
            Passthrough ret;
            if (item.GetType().Equals(typeof(Passthrough)))
            {
                ret = new Passthrough() as Passthrough;
            }
            else
            {
                ret = (Passthrough)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IPassthroughGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPassthroughGetter rhs,
            Passthrough_CopyMask copyMask,
            IPassthroughGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IPassthroughGetter rhs,
            out Passthrough_ErrorMask errorMask,
            Passthrough_CopyMask copyMask = null,
            IPassthroughGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PassthroughCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Passthrough_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IPassthroughGetter rhs,
            ErrorMaskBuilder errorMask,
            Passthrough_CopyMask copyMask = null,
            IPassthroughGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            PassthroughCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    this.Do = (Boolean)obj;
                    break;
                case Passthrough_FieldIndex.Path:
                    this.Path = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            PassthroughCommon.Clear(this, cmds);
        }


        public static Passthrough Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Passthrough();
            foreach (var pair in fields)
            {
                CopyInInternal_Passthrough(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Passthrough(Passthrough obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Passthrough_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    obj.Do = (Boolean)pair.Value;
                    break;
                case Passthrough_FieldIndex.Path:
                    obj.Path = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Passthrough obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IPassthrough : IPassthroughGetter, ILoquiClass<IPassthrough, IPassthroughGetter>, ILoquiClass<Passthrough, IPassthroughGetter>
    {
        new Boolean Do { get; set; }

        new String Path { get; set; }

    }

    public partial interface IPassthroughGetter : ILoquiObject
    {
        #region Do
        Boolean Do { get; }

        #endregion
        #region Path
        String Path { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum Passthrough_FieldIndex
    {
        Do = 0,
        Path = 1,
    }
    #endregion

    #region Registration
    public class Passthrough_Registration : ILoquiRegistration
    {
        public static readonly Passthrough_Registration Instance = new Passthrough_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "4eabe8e5-a068-4934-a847-401d92253ade";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(Passthrough_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Passthrough_ErrorMask);

        public static readonly Type ClassType = typeof(Passthrough);

        public static readonly Type GetterType = typeof(IPassthroughGetter);

        public static readonly Type SetterType = typeof(IPassthrough);

        public static readonly Type CommonType = typeof(PassthroughCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.Passthrough";

        public const string Name = "Passthrough";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DO":
                    return (ushort)Passthrough_FieldIndex.Do;
                case "PATH":
                    return (ushort)Passthrough_FieldIndex.Path;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    return "Do";
                case Passthrough_FieldIndex.Path:
                    return "Path";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    return typeof(Boolean);
                case Passthrough_FieldIndex.Path:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class PassthroughCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IPassthrough item,
            IPassthroughGetter rhs,
            IPassthroughGetter def,
            ErrorMaskBuilder errorMask,
            Passthrough_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Do ?? true)
            {
                errorMask?.PushIndex((int)Passthrough_FieldIndex.Do);
                item.Do = rhs.Do;
                errorMask?.PopIndex();
            }
            if (copyMask?.Path ?? true)
            {
                errorMask?.PushIndex((int)Passthrough_FieldIndex.Path);
                item.Path = rhs.Path;
                errorMask?.PopIndex();
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IPassthrough obj,
            NotifyingFireParameters cmds = null)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IPassthrough obj,
            NotifyingUnsetParameters cmds = null)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    obj.Do = default(Boolean);
                    break;
                case Passthrough_FieldIndex.Path:
                    obj.Path = default(String);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IPassthrough obj)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                case Passthrough_FieldIndex.Path:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IPassthroughGetter obj)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    return obj.Do;
                case Passthrough_FieldIndex.Path:
                    return obj.Path;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IPassthrough item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Do = default(Boolean);
            item.Path = default(String);
        }

        public static Passthrough_Mask<bool> GetEqualsMask(
            this IPassthroughGetter item,
            IPassthroughGetter rhs)
        {
            var ret = new Passthrough_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IPassthroughGetter item,
            IPassthroughGetter rhs,
            Passthrough_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Do = item.Do == rhs.Do;
            ret.Path = object.Equals(item.Path, rhs.Path);
        }

        public static string ToString(
            this IPassthroughGetter item,
            string name = null,
            Passthrough_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IPassthroughGetter item,
            FileGeneration fg,
            string name = null,
            Passthrough_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Passthrough)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Passthrough)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Do ?? true)
                {
                    fg.AppendLine($"Do => {item.Do}");
                }
                if (printMask?.Path ?? true)
                {
                    fg.AppendLine($"Path => {item.Path}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IPassthroughGetter item,
            Passthrough_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Passthrough_Mask<bool> GetHasBeenSetMask(IPassthroughGetter item)
        {
            var ret = new Passthrough_Mask<bool>();
            ret.Do = true;
            ret.Path = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IPassthroughGetter item,
            bool doMasks,
            out Passthrough_ErrorMask errorMask,
            Passthrough_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Passthrough_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IPassthroughGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.Passthrough");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.Passthrough");
            }
            if ((translationMask?.GetShouldTranslate((int)Passthrough_FieldIndex.Do) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Do),
                    item: item.Do,
                    fieldIndex: (int)Passthrough_FieldIndex.Do,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Passthrough_FieldIndex.Path) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Path),
                    item: item.Path,
                    fieldIndex: (int)Passthrough_FieldIndex.Path,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Passthrough_Mask<T> : IMask<T>, IEquatable<Passthrough_Mask<T>>
    {
        #region Ctors
        public Passthrough_Mask()
        {
        }

        public Passthrough_Mask(T initialValue)
        {
            this.Do = initialValue;
            this.Path = initialValue;
        }
        #endregion

        #region Members
        public T Do;
        public T Path;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Passthrough_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Passthrough_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Do, rhs.Do)) return false;
            if (!object.Equals(this.Path, rhs.Path)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Do?.GetHashCode());
            ret = ret.CombineHashCode(this.Path?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Do)) return false;
            if (!eval(this.Path)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Passthrough_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Passthrough_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Passthrough_Mask<R> obj, Func<T, R> eval)
        {
            obj.Do = eval(this.Do);
            obj.Path = eval(this.Path);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Passthrough_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Passthrough_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Passthrough_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Do ?? true)
                {
                    fg.AppendLine($"Do => {Do}");
                }
                if (printMask?.Path ?? true)
                {
                    fg.AppendLine($"Path => {Path}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Passthrough_ErrorMask : IErrorMask, IErrorMask<Passthrough_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Do;
        public Exception Path;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    return Do;
                case Passthrough_FieldIndex.Path:
                    return Path;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    this.Do = ex;
                    break;
                case Passthrough_FieldIndex.Path:
                    this.Path = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Passthrough_FieldIndex enu = (Passthrough_FieldIndex)index;
            switch (enu)
            {
                case Passthrough_FieldIndex.Do:
                    this.Do = (Exception)obj;
                    break;
                case Passthrough_FieldIndex.Path:
                    this.Path = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Do != null) return true;
            if (Path != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Passthrough_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Do => {Do}");
            fg.AppendLine($"Path => {Path}");
        }
        #endregion

        #region Combine
        public Passthrough_ErrorMask Combine(Passthrough_ErrorMask rhs)
        {
            var ret = new Passthrough_ErrorMask();
            ret.Do = this.Do.Combine(rhs.Do);
            ret.Path = this.Path.Combine(rhs.Path);
            return ret;
        }
        public static Passthrough_ErrorMask Combine(Passthrough_ErrorMask lhs, Passthrough_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Passthrough_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Passthrough_ErrorMask();
        }
        #endregion

    }
    public class Passthrough_CopyMask
    {
        #region Members
        public bool Do;
        public bool Path;
        #endregion

    }
    public class Passthrough_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Do;
        public bool Path;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Do, null));
            ret.Add((Path, null));
        }
    }
    #endregion

    #endregion

}
