/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using ReactiveUI;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class RecordInterest :
        LoquiNotifyingObject,
        IRecordInterest,
        ILoquiObjectSetter<RecordInterest>,
        IEquatable<RecordInterest>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RecordInterest_Registration.Instance;
        public static RecordInterest_Registration Registration => RecordInterest_Registration.Instance;
        protected object CommonInstance => RecordInterestCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public RecordInterest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region InterestingTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceList<String> _InterestingTypes = new SourceList<String>();
        public ISourceList<String> InterestingTypes => _InterestingTypes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<String> IRecordInterest.InterestingTypes => _InterestingTypes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IRecordInterestGetter.InterestingTypes => _InterestingTypes;
        #endregion

        #endregion
        #region UninterestingTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceList<String> _UninterestingTypes = new SourceList<String>();
        public ISourceList<String> UninterestingTypes => _UninterestingTypes;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<String> IRecordInterest.UninterestingTypes => _UninterestingTypes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IRecordInterestGetter.UninterestingTypes => _UninterestingTypes;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRecordInterestGetter)rhs, include);
        #region To String
        public override string ToString()
        {
            return RecordInterestMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            RecordInterestMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is RecordInterest rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RecordInterest rhs)
        {
            if (rhs == null) return false;
            if (!this.InterestingTypes.SequenceEqual(rhs.InterestingTypes)) return false;
            if (!this.UninterestingTypes.SequenceEqual(rhs.UninterestingTypes)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(InterestingTypes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UninterestingTypes).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        protected object XmlWriteTranslator => RecordInterestXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static RecordInterest CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            RecordInterest_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RecordInterest CreateFromXml(
            XElement node,
            out RecordInterest_ErrorMask errorMask,
            bool doMasks = true,
            RecordInterest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = RecordInterest_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RecordInterest CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new RecordInterest() : null;
                    break;
                default:
                    break;
            }
            var ret = new RecordInterest();
            try
            {
                foreach (var elem in node.Elements())
                {
                    RecordInterestXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static RecordInterest CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            RecordInterest_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RecordInterest CreateFromXml(
            string path,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RecordInterest CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            RecordInterest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RecordInterest CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            RecordInterest_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static RecordInterest CreateFromXml(
            Stream stream,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RecordInterest CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            RecordInterest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RecordInterest_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<RecordInterest>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        public RecordInterest Copy(
            RecordInterest_CopyMask copyMask = null,
            RecordInterest def = null)
        {
            return RecordInterest.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static RecordInterest Copy(
            RecordInterest item,
            RecordInterest_CopyMask copyMask = null,
            RecordInterest def = null)
        {
            RecordInterest ret;
            if (item.GetType().Equals(typeof(RecordInterest)))
            {
                ret = new RecordInterest();
            }
            else
            {
                ret = (RecordInterest)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static RecordInterest Copy_ToLoqui(
            RecordInterest item,
            RecordInterest_CopyMask copyMask = null,
            RecordInterest def = null)
        {
            RecordInterest ret;
            if (item.GetType().Equals(typeof(RecordInterest)))
            {
                ret = new RecordInterest() as RecordInterest;
            }
            else
            {
                ret = (RecordInterest)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(RecordInterest rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            RecordInterest rhs,
            RecordInterest_CopyMask copyMask,
            RecordInterest def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            RecordInterest rhs,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_CopyMask copyMask = null,
            RecordInterest def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            RecordInterestCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = RecordInterest_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            RecordInterest rhs,
            ErrorMaskBuilder errorMask,
            RecordInterest_CopyMask copyMask = null,
            RecordInterest def = null)
        {
            RecordInterestCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    this._InterestingTypes.SetTo((IEnumerable<String>)obj);
                    break;
                case RecordInterest_FieldIndex.UninterestingTypes:
                    this._UninterestingTypes.SetTo((IEnumerable<String>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            RecordInterestCommon.Instance.Clear(this);
        }

        public static RecordInterest Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new RecordInterest();
            foreach (var pair in fields)
            {
                CopyInInternal_RecordInterest(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_RecordInterest(RecordInterest obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out RecordInterest_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    obj._InterestingTypes.SetTo((IEnumerable<String>)pair.Value);
                    break;
                case RecordInterest_FieldIndex.UninterestingTypes:
                    obj._UninterestingTypes.SetTo((IEnumerable<String>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IRecordInterest :
        IRecordInterestGetter,
        ILoquiObjectSetter<IRecordInterest>
    {
        new IList<String> InterestingTypes { get; }
        new IList<String> UninterestingTypes { get; }
        void CopyFieldsFrom(
            RecordInterest rhs,
            ErrorMaskBuilder errorMask = null,
            RecordInterest_CopyMask copyMask = null,
            RecordInterest def = null);
    }

    public partial interface IRecordInterestGetter :
        ILoquiObject,
        ILoquiObject<IRecordInterestGetter>,
        IXmlItem
    {
        #region InterestingTypes
        IReadOnlyList<String> InterestingTypes { get; }
        #endregion
        #region UninterestingTypes
        IReadOnlyList<String> UninterestingTypes { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class RecordInterestMixIn
    {
        public static void Clear(this IRecordInterest item)
        {
            ((RecordInterestCommon)item.CommonInstance).Clear(item: item);
        }

        public static RecordInterest_Mask<bool> GetEqualsMask(
            this IRecordInterestGetter item,
            IRecordInterestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RecordInterestCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRecordInterestGetter item,
            string name = null,
            RecordInterest_Mask<bool> printMask = null)
        {
            return ((RecordInterestCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRecordInterestGetter item,
            FileGeneration fg,
            string name = null,
            RecordInterest_Mask<bool> printMask = null)
        {
            ((RecordInterestCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRecordInterestGetter item,
            RecordInterest_Mask<bool?> checkMask)
        {
            return ((RecordInterestCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RecordInterest_Mask<bool> GetHasBeenSetMask(this IRecordInterestGetter item)
        {
            var ret = new RecordInterest_Mask<bool>();
            ((RecordInterestCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum RecordInterest_FieldIndex
    {
        InterestingTypes = 0,
        UninterestingTypes = 1,
    }
    #endregion

    #region Registration
    public class RecordInterest_Registration : ILoquiRegistration
    {
        public static readonly RecordInterest_Registration Instance = new RecordInterest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 6,
            version: 0);

        public const string GUID = "322c3a4b-66d2-4d4d-855f-5219460ded5c";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(RecordInterest_Mask<>);

        public static readonly Type ErrorMaskType = typeof(RecordInterest_ErrorMask);

        public static readonly Type ClassType = typeof(RecordInterest);

        public static readonly Type GetterType = typeof(IRecordInterestGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRecordInterest);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(RecordInterestCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.RecordInterest";

        public const string Name = "RecordInterest";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "INTERESTINGTYPES":
                    return (ushort)RecordInterest_FieldIndex.InterestingTypes;
                case "UNINTERESTINGTYPES":
                    return (ushort)RecordInterest_FieldIndex.UninterestingTypes;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    return "InterestingTypes";
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return "UninterestingTypes";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    return typeof(SourceSetList<String>);
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return typeof(SourceSetList<String>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RecordInterestXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RecordInterestCommon
    {
        public static readonly RecordInterestCommon Instance = new RecordInterestCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            RecordInterest item,
            RecordInterest rhs,
            RecordInterest def,
            ErrorMaskBuilder errorMask,
            RecordInterest_CopyMask copyMask)
        {
            if (copyMask?.InterestingTypes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RecordInterest_FieldIndex.InterestingTypes);
                try
                {
                    item.InterestingTypes.SetToWithDefault(
                        rhs.InterestingTypes,
                        def?.InterestingTypes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.UninterestingTypes != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)RecordInterest_FieldIndex.UninterestingTypes);
                try
                {
                    item.UninterestingTypes.SetToWithDefault(
                        rhs.UninterestingTypes,
                        def?.UninterestingTypes);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(IRecordInterest item)
        {
            ClearPartial();
            item.InterestingTypes.Clear();
            item.UninterestingTypes.Clear();
        }

        public RecordInterest_Mask<bool> GetEqualsMask(
            IRecordInterestGetter item,
            IRecordInterestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RecordInterest_Mask<bool>();
            ((RecordInterestCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            IRecordInterestGetter item,
            IRecordInterestGetter rhs,
            RecordInterest_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.InterestingTypes = item.InterestingTypes.CollectionEqualsHelper(
                rhs.InterestingTypes,
                (l, r) => string.Equals(l, r),
                include);
            ret.UninterestingTypes = item.UninterestingTypes.CollectionEqualsHelper(
                rhs.UninterestingTypes,
                (l, r) => string.Equals(l, r),
                include);
        }

        public string ToString(
            IRecordInterestGetter item,
            string name = null,
            RecordInterest_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            IRecordInterestGetter item,
            FileGeneration fg,
            string name = null,
            RecordInterest_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RecordInterest =>");
            }
            else
            {
                fg.AppendLine($"{name} (RecordInterest) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            IRecordInterestGetter item,
            FileGeneration fg,
            RecordInterest_Mask<bool> printMask = null)
        {
            if (printMask?.InterestingTypes?.Overall ?? true)
            {
                fg.AppendLine("InterestingTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.InterestingTypes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.UninterestingTypes?.Overall ?? true)
            {
                fg.AppendLine("UninterestingTypes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.UninterestingTypes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"Item => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }

        public bool HasBeenSet(
            IRecordInterestGetter item,
            RecordInterest_Mask<bool?> checkMask)
        {
            return true;
        }

        public void FillHasBeenSetMask(
            IRecordInterestGetter item,
            RecordInterest_Mask<bool> mask)
        {
            mask.InterestingTypes = new MaskItem<bool, IEnumerable<(int, bool)>>(true, null);
            mask.UninterestingTypes = new MaskItem<bool, IEnumerable<(int, bool)>>(true, null);
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class RecordInterestXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RecordInterestXmlWriteTranslation Instance = new RecordInterestXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRecordInterestGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RecordInterest_FieldIndex.InterestingTypes) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.InterestingTypes),
                    item: item.InterestingTypes,
                    fieldIndex: (int)RecordInterest_FieldIndex.InterestingTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RecordInterest_FieldIndex.InterestingTypes),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)RecordInterest_FieldIndex.UninterestingTypes) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.UninterestingTypes),
                    item: item.UninterestingTypes,
                    fieldIndex: (int)RecordInterest_FieldIndex.UninterestingTypes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RecordInterest_FieldIndex.UninterestingTypes),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRecordInterestGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.RecordInterest");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.RecordInterest");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (IRecordInterestGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRecordInterestGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (IRecordInterestGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RecordInterestXmlCreateTranslation
    {
        public readonly static RecordInterestXmlCreateTranslation Instance = new RecordInterestXmlCreateTranslation();

        public static void FillPublicXml(
            IRecordInterest item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RecordInterestXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRecordInterest item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "InterestingTypes":
                    if ((translationMask?.GetShouldTranslate((int)RecordInterest_FieldIndex.InterestingTypes) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)RecordInterest_FieldIndex.InterestingTypes);
                            if (ListXmlTranslation<String>.Instance.Parse(
                                node: node,
                                enumer: out var InterestingTypesItem,
                                transl: StringXmlTranslation.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.InterestingTypes.SetTo(InterestingTypesItem);
                            }
                            else
                            {
                                item.InterestingTypes.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "UninterestingTypes":
                    if ((translationMask?.GetShouldTranslate((int)RecordInterest_FieldIndex.UninterestingTypes) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)RecordInterest_FieldIndex.UninterestingTypes);
                            if (ListXmlTranslation<String>.Instance.Parse(
                                node: node,
                                enumer: out var UninterestingTypesItem,
                                transl: StringXmlTranslation.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.UninterestingTypes.SetTo(UninterestingTypesItem);
                            }
                            else
                            {
                                item.UninterestingTypes.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class RecordInterestXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRecordInterestGetter item,
            XElement node,
            out RecordInterest_ErrorMask errorMask,
            bool doMasks = true,
            RecordInterest_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((RecordInterestXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RecordInterest_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            string path,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            Stream stream,
            out RecordInterest_ErrorMask errorMask,
            RecordInterest_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((RecordInterestXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            XElement node,
            string name = null,
            RecordInterest_TranslationMask translationMask = null)
        {
            ((RecordInterestXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RecordInterestXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRecordInterestGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((RecordInterestXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class RecordInterest_Mask<T> : IMask<T>, IEquatable<RecordInterest_Mask<T>>
    {
        #region Ctors
        public RecordInterest_Mask()
        {
        }

        public RecordInterest_Mask(T initialValue)
        {
            this.InterestingTypes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
            this.UninterestingTypes = new MaskItem<T, IEnumerable<(int Index, T Value)>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<(int Index, T Value)>> InterestingTypes;
        public MaskItem<T, IEnumerable<(int Index, T Value)>> UninterestingTypes;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is RecordInterest_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(RecordInterest_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.InterestingTypes, rhs.InterestingTypes)) return false;
            if (!object.Equals(this.UninterestingTypes, rhs.UninterestingTypes)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.InterestingTypes?.GetHashCode());
            ret = ret.CombineHashCode(this.UninterestingTypes?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (this.InterestingTypes != null)
            {
                if (!eval(this.InterestingTypes.Overall)) return false;
                if (this.InterestingTypes.Specific != null)
                {
                    foreach (var item in this.InterestingTypes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (this.UninterestingTypes != null)
            {
                if (!eval(this.UninterestingTypes.Overall)) return false;
                if (this.UninterestingTypes.Specific != null)
                {
                    foreach (var item in this.UninterestingTypes.Specific)
                    {
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public RecordInterest_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new RecordInterest_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(RecordInterest_Mask<R> obj, Func<T, R> eval)
        {
            if (InterestingTypes != null)
            {
                obj.InterestingTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.InterestingTypes.Overall = eval(this.InterestingTypes.Overall);
                if (InterestingTypes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.InterestingTypes.Specific = l;
                    foreach (var item in InterestingTypes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
            if (UninterestingTypes != null)
            {
                obj.UninterestingTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>>();
                obj.UninterestingTypes.Overall = eval(this.UninterestingTypes.Overall);
                if (UninterestingTypes.Specific != null)
                {
                    List<(int Index, R Item)> l = new List<(int Index, R Item)>();
                    obj.UninterestingTypes.Specific = l;
                    foreach (var item in UninterestingTypes.Specific.WithIndex())
                    {
                        (int Index, R Item) mask = default;
                        mask.Index = item.Index;
                        mask.Item = eval(item.Item.Value);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.InterestingTypes.Specific = null;
            this.UninterestingTypes.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(RecordInterest_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, RecordInterest_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(RecordInterest_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.InterestingTypes?.Overall ?? true)
                {
                    fg.AppendLine("InterestingTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (InterestingTypes.Overall != null)
                        {
                            fg.AppendLine(InterestingTypes.Overall.ToString());
                        }
                        if (InterestingTypes.Specific != null)
                        {
                            foreach (var subItem in InterestingTypes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UninterestingTypes?.Overall ?? true)
                {
                    fg.AppendLine("UninterestingTypes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (UninterestingTypes.Overall != null)
                        {
                            fg.AppendLine(UninterestingTypes.Overall.ToString());
                        }
                        if (UninterestingTypes.Specific != null)
                        {
                            foreach (var subItem in UninterestingTypes.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class RecordInterest_ErrorMask : IErrorMask, IErrorMask<RecordInterest_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> InterestingTypes;
        public MaskItem<Exception, IEnumerable<(int Index, Exception Value)>> UninterestingTypes;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    return InterestingTypes;
                case RecordInterest_FieldIndex.UninterestingTypes:
                    return UninterestingTypes;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    this.InterestingTypes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                case RecordInterest_FieldIndex.UninterestingTypes:
                    this.UninterestingTypes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            RecordInterest_FieldIndex enu = (RecordInterest_FieldIndex)index;
            switch (enu)
            {
                case RecordInterest_FieldIndex.InterestingTypes:
                    this.InterestingTypes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                case RecordInterest_FieldIndex.UninterestingTypes:
                    this.UninterestingTypes = (MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (InterestingTypes != null) return true;
            if (UninterestingTypes != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("RecordInterest_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine("InterestingTypes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (InterestingTypes.Overall != null)
                {
                    fg.AppendLine(InterestingTypes.Overall.ToString());
                }
                if (InterestingTypes.Specific != null)
                {
                    foreach (var subItem in InterestingTypes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("UninterestingTypes =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (UninterestingTypes.Overall != null)
                {
                    fg.AppendLine(UninterestingTypes.Overall.ToString());
                }
                if (UninterestingTypes.Specific != null)
                {
                    foreach (var subItem in UninterestingTypes.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public RecordInterest_ErrorMask Combine(RecordInterest_ErrorMask rhs)
        {
            var ret = new RecordInterest_ErrorMask();
            ret.InterestingTypes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.InterestingTypes.Overall.Combine(rhs.InterestingTypes.Overall), new List<(int Index, Exception Value)>(this.InterestingTypes.Specific.And(rhs.InterestingTypes.Specific)));
            ret.UninterestingTypes = new MaskItem<Exception, IEnumerable<(int Index, Exception Value)>>(this.UninterestingTypes.Overall.Combine(rhs.UninterestingTypes.Overall), new List<(int Index, Exception Value)>(this.UninterestingTypes.Specific.And(rhs.UninterestingTypes.Specific)));
            return ret;
        }
        public static RecordInterest_ErrorMask Combine(RecordInterest_ErrorMask lhs, RecordInterest_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static RecordInterest_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new RecordInterest_ErrorMask();
        }
        #endregion

    }
    public class RecordInterest_CopyMask
    {
        public RecordInterest_CopyMask()
        {
        }

        public RecordInterest_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.InterestingTypes = deepCopyOption;
            this.UninterestingTypes = deepCopyOption;
        }

        #region Members
        public CopyOption InterestingTypes;
        public CopyOption UninterestingTypes;
        #endregion

    }

    public class RecordInterest_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool InterestingTypes;
        public bool UninterestingTypes;
        #endregion

        #region Ctors
        public RecordInterest_TranslationMask()
        {
        }

        public RecordInterest_TranslationMask(bool defaultOn)
        {
            this.InterestingTypes = defaultOn;
            this.UninterestingTypes = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((InterestingTypes, null));
            ret.Add((UninterestingTypes, null));
        }
    }
    #endregion

    #endregion

}
