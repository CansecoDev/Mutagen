/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class TargetGroup :
        ITargetGroup,
        ILoquiObjectSetter<TargetGroup>,
        IEquatable<TargetGroup>,
        IEqualsMask
    {
        #region Ctor
        public TargetGroup()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Do
        public Boolean Do { get; set; } = default;
        #endregion
        #region Targets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Target> _Targets = new ExtendedList<Target>();
        public ExtendedList<Target> Targets
        {
            get => this._Targets;
            protected set => this._Targets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITargetGetter> ITargetGroupGetter.Targets => _Targets;
        #endregion

        #endregion

        #region To String
        public override string ToString()
        {
            return TargetGroupMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TargetGroupMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITargetGroupGetter rhs)) return false;
            return ((TargetGroupCommon)((ITargetGroupGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TargetGroup? obj)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TargetGroupCommon)((ITargetGroupGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Do = initialValue;
                this.Targets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Target.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Target.Mask<TItem>?>>());
            }

            public Mask(
                TItem Do,
                TItem Targets)
            {
                this.Do = Do;
                this.Targets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Target.Mask<TItem>?>>?>(Targets, Enumerable.Empty<MaskItemIndexed<TItem, Target.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Do;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Target.Mask<TItem>?>>?>? Targets;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Do, rhs.Do)) return false;
                if (!object.Equals(this.Targets, rhs.Targets)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Do);
                hash.Add(this.Targets);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Do)) return false;
                if (this.Targets != null)
                {
                    if (!eval(this.Targets.Overall)) return false;
                    if (this.Targets.Specific != null)
                    {
                        foreach (var item in this.Targets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Do)) return true;
                if (this.Targets != null)
                {
                    if (eval(this.Targets.Overall)) return true;
                    if (this.Targets.Specific != null)
                    {
                        foreach (var item in this.Targets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TargetGroup.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Do = eval(this.Do);
                if (Targets != null)
                {
                    obj.Targets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Target.Mask<R>?>>?>(eval(this.Targets.Overall), Enumerable.Empty<MaskItemIndexed<R, Target.Mask<R>?>>());
                    if (Targets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Target.Mask<R>?>>();
                        obj.Targets.Specific = l;
                        foreach (var item in Targets.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Target.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Target.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TargetGroup.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TargetGroup.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TargetGroup.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Do ?? true)
                    {
                        fg.AppendItem(Do, "Do");
                    }
                    if ((printMask?.Targets?.Overall ?? true)
                        && Targets.TryGet(out var TargetsItem))
                    {
                        fg.AppendLine("Targets =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TargetsItem.Overall);
                            if (TargetsItem.Specific != null)
                            {
                                foreach (var subItem in TargetsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Do;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Target.ErrorMask?>>?>? Targets;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
                switch (enu)
                {
                    case TargetGroup_FieldIndex.Do:
                        return Do;
                    case TargetGroup_FieldIndex.Targets:
                        return Targets;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
                switch (enu)
                {
                    case TargetGroup_FieldIndex.Do:
                        this.Do = ex;
                        break;
                    case TargetGroup_FieldIndex.Targets:
                        this.Targets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Target.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
                switch (enu)
                {
                    case TargetGroup_FieldIndex.Do:
                        this.Do = (Exception?)obj;
                        break;
                    case TargetGroup_FieldIndex.Targets:
                        this.Targets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Target.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Do != null) return true;
                if (Targets != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Do, "Do");
                if (Targets.TryGet(out var TargetsItem))
                {
                    fg.AppendLine("Targets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TargetsItem.Overall);
                        if (TargetsItem.Specific != null)
                        {
                            foreach (var subItem in TargetsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Do = this.Do.Combine(rhs.Do);
                ret.Targets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Target.ErrorMask?>>?>(ExceptionExt.Combine(this.Targets?.Overall, rhs.Targets?.Overall), ExceptionExt.Combine(this.Targets?.Specific, rhs.Targets?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Do;
            public MaskItem<bool, Target.TranslationMask?> Targets;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Do = defaultOn;
                this.Targets = new MaskItem<bool, Target.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Do, null));
                ret.Add((Targets?.Overall ?? true, Targets?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TargetGroupXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TargetGroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TargetGroup CreateFromXml(
            XElement node,
            TargetGroup.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TargetGroup CreateFromXml(
            XElement node,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TargetGroup.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TargetGroup CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TargetGroup();
            ((TargetGroupSetterCommon)((ITargetGroupGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TargetGroup CreateFromXml(
            string path,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            string path,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TargetGroup CreateFromXml(
            Stream stream,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            Stream stream,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITargetGroupGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TargetGroupSetterCommon)((ITargetGroupGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TargetGroup GetNew()
        {
            return new TargetGroup();
        }

    }
    #endregion

    #region Interface
    public partial interface ITargetGroup :
        ITargetGroupGetter,
        ILoquiObjectSetter<ITargetGroup>
    {
        new Boolean Do { get; set; }
        new ExtendedList<Target> Targets { get; }
    }

    public partial interface ITargetGroupGetter :
        ILoquiObject,
        ILoquiObject<ITargetGroupGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => TargetGroup_Registration.Instance;
        Boolean Do { get; }
        IReadOnlyList<ITargetGetter> Targets { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TargetGroupMixIn
    {
        public static void Clear(this ITargetGroup item)
        {
            ((TargetGroupSetterCommon)((ITargetGroupGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TargetGroup.Mask<bool> GetEqualsMask(
            this ITargetGroupGetter item,
            ITargetGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITargetGroupGetter item,
            string? name = null,
            TargetGroup.Mask<bool>? printMask = null)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITargetGroupGetter item,
            FileGeneration fg,
            string? name = null,
            TargetGroup.Mask<bool>? printMask = null)
        {
            ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITargetGroupGetter item,
            TargetGroup.Mask<bool?> checkMask)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TargetGroup.Mask<bool> GetHasBeenSetMask(this ITargetGroupGetter item)
        {
            var ret = new TargetGroup.Mask<bool>(false);
            ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITargetGroupGetter item,
            ITargetGroupGetter rhs)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITargetGroup lhs,
            ITargetGroupGetter rhs)
        {
            ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITargetGroup lhs,
            ITargetGroupGetter rhs,
            TargetGroup.TranslationMask? copyMask = null)
        {
            ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITargetGroup lhs,
            ITargetGroupGetter rhs,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TargetGroup.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITargetGroup lhs,
            ITargetGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TargetGroup DeepCopy(
            this ITargetGroupGetter item,
            TargetGroup.TranslationMask? copyMask = null)
        {
            return ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TargetGroup DeepCopy(
            this ITargetGroupGetter item,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? copyMask = null)
        {
            return ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TargetGroup DeepCopy(
            this ITargetGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TargetGroupSetterTranslationCommon)((ITargetGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITargetGroup item,
            XElement node,
            TargetGroup.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITargetGroup item,
            XElement node,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TargetGroup.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TargetGroupSetterCommon)((ITargetGroupGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            string path,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            string path,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            string path,
            ErrorMaskBuilder? errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            Stream stream,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            Stream stream,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITargetGroup item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TargetGroup.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum TargetGroup_FieldIndex
    {
        Do = 0,
        Targets = 1,
    }
    #endregion

    #region Registration
    public partial class TargetGroup_Registration : ILoquiRegistration
    {
        public static readonly TargetGroup_Registration Instance = new TargetGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "7c60c735-e67c-498a-9d99-80aa1c1277a9";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TargetGroup.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TargetGroup.ErrorMask);

        public static readonly Type ClassType = typeof(TargetGroup);

        public static readonly Type GetterType = typeof(ITargetGroupGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITargetGroup);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.TargetGroup";

        public const string Name = "TargetGroup";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DO":
                    return (ushort)TargetGroup_FieldIndex.Do;
                case "TARGETS":
                    return (ushort)TargetGroup_FieldIndex.Targets;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Targets:
                    return true;
                case TargetGroup_FieldIndex.Do:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Targets:
                    return true;
                case TargetGroup_FieldIndex.Do:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    return "Do";
                case TargetGroup_FieldIndex.Targets:
                    return "Targets";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    return typeof(Boolean);
                case TargetGroup_FieldIndex.Targets:
                    return typeof(ExtendedList<Target>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TargetGroupXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TargetGroupSetterCommon
    {
        public static readonly TargetGroupSetterCommon Instance = new TargetGroupSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITargetGroup item)
        {
            ClearPartial();
            item.Do = default;
            item.Targets.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ITargetGroup item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetGroupXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class TargetGroupCommon
    {
        public static readonly TargetGroupCommon Instance = new TargetGroupCommon();

        public TargetGroup.Mask<bool> GetEqualsMask(
            ITargetGroupGetter item,
            ITargetGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TargetGroup.Mask<bool>(false);
            ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITargetGroupGetter item,
            ITargetGroupGetter rhs,
            TargetGroup.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Do = item.Do == rhs.Do;
            ret.Targets = item.Targets.CollectionEqualsHelper(
                rhs.Targets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ITargetGroupGetter item,
            string? name = null,
            TargetGroup.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITargetGroupGetter item,
            FileGeneration fg,
            string? name = null,
            TargetGroup.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TargetGroup =>");
            }
            else
            {
                fg.AppendLine($"{name} (TargetGroup) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITargetGroupGetter item,
            FileGeneration fg,
            TargetGroup.Mask<bool>? printMask = null)
        {
            if (printMask?.Do ?? true)
            {
                fg.AppendItem(item.Do, "Do");
            }
            if (printMask?.Targets?.Overall ?? true)
            {
                fg.AppendLine("Targets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Targets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ITargetGroupGetter item,
            TargetGroup.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITargetGroupGetter item,
            TargetGroup.Mask<bool> mask)
        {
            mask.Do = true;
            var TargetsItem = item.Targets;
            mask.Targets = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Target.Mask<bool>?>>?>(true, TargetsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Target.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITargetGroupGetter? lhs,
            ITargetGroupGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Do != rhs.Do) return false;
            if (!lhs.Targets.SequenceEqual(rhs.Targets)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITargetGroupGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Do);
            hash.Add(item.Targets);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TargetGroup.GetNew();
        }
        
    }
    public partial class TargetGroupSetterTranslationCommon
    {
        public static readonly TargetGroupSetterTranslationCommon Instance = new TargetGroupSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITargetGroup item,
            ITargetGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Do) ?? true))
            {
                item.Do = rhs.Do;
            }
            if ((copyMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Targets) ?? true))
            {
                errorMask?.PushIndex((int)TargetGroup_FieldIndex.Targets);
                try
                {
                    item.Targets.SetTo(
                        rhs.Targets
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public TargetGroup DeepCopy(
            ITargetGroupGetter item,
            TargetGroup.TranslationMask? copyMask = null)
        {
            TargetGroup ret = (TargetGroup)((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TargetGroup DeepCopy(
            ITargetGroupGetter item,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? copyMask = null)
        {
            TargetGroup ret = (TargetGroup)((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TargetGroup DeepCopy(
            ITargetGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TargetGroup ret = (TargetGroup)((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class TargetGroup
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TargetGroup_Registration.Instance;
        public static TargetGroup_Registration Registration => TargetGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TargetGroupCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TargetGroupSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TargetGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITargetGroupGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITargetGroupGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITargetGroupGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class TargetGroupXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TargetGroupXmlWriteTranslation Instance = new TargetGroupXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITargetGroupGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Do) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Do),
                    item: item.Do,
                    fieldIndex: (int)TargetGroup_FieldIndex.Do,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Targets) ?? true))
            {
                ListXmlTranslation<ITargetGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Targets),
                    item: item.Targets,
                    fieldIndex: (int)TargetGroup_FieldIndex.Targets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TargetGroup_FieldIndex.Targets),
                    transl: (XElement subNode, ITargetGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((TargetXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ITargetGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.TargetGroup");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.TargetGroup");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITargetGroupGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITargetGroupGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITargetGroupGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TargetGroupXmlCreateTranslation
    {
        public readonly static TargetGroupXmlCreateTranslation Instance = new TargetGroupXmlCreateTranslation();

        public static void FillPublicXml(
            ITargetGroup item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetGroupXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITargetGroup item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Do":
                    if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Do) ?? true))
                    {
                        errorMask?.PushIndex((int)TargetGroup_FieldIndex.Do);
                        try
                        {
                            item.Do = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Targets":
                    if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Targets) ?? true))
                    {
                        errorMask?.PushIndex((int)TargetGroup_FieldIndex.Targets);
                        try
                        {
                            if (ListXmlTranslation<Target>.Instance.Parse(
                                node: node,
                                enumer: out var TargetsItem,
                                transl: LoquiXmlTranslation<Target>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.Targets.SetTo(TargetsItem);
                            }
                            else
                            {
                                item.Targets.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class TargetGroupXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITargetGroupGetter item,
            XElement node,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TargetGroup.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            string path,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            Stream stream,
            out TargetGroup.ErrorMask errorMask,
            TargetGroup.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            XElement node,
            string? name = null,
            TargetGroup.TranslationMask? translationMask = null)
        {
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#endregion

