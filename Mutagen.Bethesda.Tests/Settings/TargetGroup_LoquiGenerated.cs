/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
#endregion

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class TargetGroup :
        ITargetGroup,
        ILoquiObjectSetter<TargetGroup>,
        IEquatable<TargetGroup>,
        IEqualsMask
    {
        #region Ctor
        public TargetGroup()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Do
        public Boolean Do { get; set; }
        #endregion
        #region Targets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ExtendedList<Target> _Targets = new ExtendedList<Target>();
        public IExtendedList<Target> Targets => _Targets;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtendedList<Target> ITargetGroup.Targets => _Targets;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITargetGetter> ITargetGroupGetter.Targets => _Targets;
        #endregion

        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITargetGroupGetter)rhs, include);
        #region To String
        public override string ToString()
        {
            return TargetGroupMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TargetGroupMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ITargetGroupGetter rhs)) return false;
            return ((TargetGroupCommon)((ITargetGroupGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(TargetGroup obj)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((TargetGroupCommon)((ITargetGroupGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => TargetGroupXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((TargetGroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TargetGroup CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            TargetGroup_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TargetGroup CreateFromXml(
            XElement node,
            out TargetGroup_ErrorMask errorMask,
            bool doMasks = true,
            TargetGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TargetGroup_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TargetGroup CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new TargetGroup() : null;
                    break;
                default:
                    break;
            }
            var ret = new TargetGroup();
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetGroupXmlCreateTranslation.FillPublicElementXml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TargetGroup CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            TargetGroup_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            string path,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            TargetGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TargetGroup CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            TargetGroup_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            Stream stream,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TargetGroup CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TargetGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyInXml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyInXmlInternal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyInXml(
            XElement node,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInXmlInternal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TargetGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyInXmlInternal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            var obj = TargetGroup.CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            this.CopyFieldsFrom(obj);
        }

        public void CopyInXml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            string path,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyInXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node);
        }

        public void CopyInXml(
            Stream stream,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyInXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((TargetGroup_FieldIndex)index)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        void IClearable.Clear()
        {
            ((TargetGroupSetterCommon)((ITargetGroupGetter)this).CommonSetterInstance()).Clear(this);
        }

    }
    #endregion

    #region Interface
    public partial interface ITargetGroup :
        ITargetGroupGetter,
        ILoquiObjectSetter<ITargetGroup>
    {
        new Boolean Do { get; set; }

        new IExtendedList<Target> Targets { get; }
    }

    public partial interface ITargetGroupGetter :
        ILoquiObject,
        ILoquiObject<ITargetGroupGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterCopyInstance();
        #region Do
        Boolean Do { get; }

        #endregion
        #region Targets
        IReadOnlyList<ITargetGetter> Targets { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class TargetGroupMixIn
    {
        public static void Clear(this ITargetGroup item)
        {
            ((TargetGroupSetterCommon)((ITargetGroupGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static TargetGroup_Mask<bool> GetEqualsMask(
            this ITargetGroupGetter item,
            ITargetGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITargetGroupGetter item,
            string name = null,
            TargetGroup_Mask<bool> printMask = null)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITargetGroupGetter item,
            FileGeneration fg,
            string name = null,
            TargetGroup_Mask<bool> printMask = null)
        {
            ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITargetGroupGetter item,
            TargetGroup_Mask<bool?> checkMask)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TargetGroup_Mask<bool> GetHasBeenSetMask(this ITargetGroupGetter item)
        {
            var ret = new TargetGroup_Mask<bool>();
            ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITargetGroupGetter item,
            ITargetGroupGetter rhs)
        {
            return ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void CopyFieldsFrom(
            this TargetGroup lhs,
            TargetGroup rhs)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void CopyFieldsFrom(
            this TargetGroup lhs,
            TargetGroup rhs,
            TargetGroup_CopyMask copyMask,
            TargetGroup def = null)
        {
            CopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void CopyFieldsFrom(
            this TargetGroup lhs,
            TargetGroup rhs,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_CopyMask copyMask = null,
            TargetGroup def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TargetGroupSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = TargetGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyFieldsFrom(
            this TargetGroup lhs,
            TargetGroup rhs,
            ErrorMaskBuilder errorMask,
            TargetGroup_CopyMask copyMask = null,
            TargetGroup def = null)
        {
            TargetGroupSetterCopyCommon.CopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TargetGroup Copy(
            this TargetGroup item,
            TargetGroup_CopyMask copyMask = null,
            TargetGroup def = null)
        {
            return ((TargetGroupSetterCommon)((ITargetGroupGetter)item).CommonSetterInstance()).Copy(
                item: item,
                copyMask: copyMask,
                def: def);
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum TargetGroup_FieldIndex
    {
        Do = 0,
        Targets = 1,
    }
    #endregion

    #region Registration
    public class TargetGroup_Registration : ILoquiRegistration
    {
        public static readonly TargetGroup_Registration Instance = new TargetGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "7c60c735-e67c-498a-9d99-80aa1c1277a9";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TargetGroup_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TargetGroup_ErrorMask);

        public static readonly Type ClassType = typeof(TargetGroup);

        public static readonly Type GetterType = typeof(ITargetGroupGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITargetGroup);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.TargetGroup";

        public const string Name = "TargetGroup";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DO":
                    return (ushort)TargetGroup_FieldIndex.Do;
                case "TARGETS":
                    return (ushort)TargetGroup_FieldIndex.Targets;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Targets:
                    return true;
                case TargetGroup_FieldIndex.Do:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Targets:
                    return true;
                case TargetGroup_FieldIndex.Do:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    return "Do";
                case TargetGroup_FieldIndex.Targets:
                    return "Targets";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                case TargetGroup_FieldIndex.Targets:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    return typeof(Boolean);
                case TargetGroup_FieldIndex.Targets:
                    return typeof(IExtendedList<Target>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TargetGroupXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TargetGroupSetterCommon
    {
        public static readonly TargetGroupSetterCommon Instance = new TargetGroupSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ITargetGroup item)
        {
            ClearPartial();
            item.Do = default(Boolean);
            item.Targets.Clear();
        }
        
        public TargetGroup GetNew()
        {
            return new TargetGroup();
        }
        
        public TargetGroup Copy(
            TargetGroup item,
            TargetGroup_CopyMask copyMask = null,
            TargetGroup def = null)
        {
            TargetGroup ret = GetNew();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }
        
    }
    public partial class TargetGroupCommon
    {
        public static readonly TargetGroupCommon Instance = new TargetGroupCommon();

        public TargetGroup_Mask<bool> GetEqualsMask(
            ITargetGroupGetter item,
            ITargetGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TargetGroup_Mask<bool>();
            ((TargetGroupCommon)((ITargetGroupGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITargetGroupGetter item,
            ITargetGroupGetter rhs,
            TargetGroup_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Do = item.Do == rhs.Do;
            ret.Targets = item.Targets.CollectionEqualsHelper(
                rhs.Targets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ITargetGroupGetter item,
            string name = null,
            TargetGroup_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITargetGroupGetter item,
            FileGeneration fg,
            string name = null,
            TargetGroup_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TargetGroup =>");
            }
            else
            {
                fg.AppendLine($"{name} (TargetGroup) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITargetGroupGetter item,
            FileGeneration fg,
            TargetGroup_Mask<bool> printMask = null)
        {
            if (printMask?.Do ?? true)
            {
                fg.AppendLine($"Do => {item.Do}");
            }
            if (printMask?.Targets?.Overall ?? true)
            {
                fg.AppendLine("Targets =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Targets)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ITargetGroupGetter item,
            TargetGroup_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITargetGroupGetter item,
            TargetGroup_Mask<bool> mask)
        {
            mask.Do = true;
            mask.Targets = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Target_Mask<bool>>>>(true, item.Targets.WithIndex().Select((i) => new MaskItemIndexed<bool, Target_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITargetGroupGetter lhs,
            ITargetGroupGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Do != rhs.Do) return false;
            if (!lhs.Targets.SequenceEqual(rhs.Targets)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITargetGroupGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Do).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Targets).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
    }
    public partial class TargetGroupSetterCopyCommon
    {
        public static readonly TargetGroupSetterCopyCommon Instance = new TargetGroupSetterCopyCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            TargetGroup item,
            TargetGroup rhs,
            TargetGroup def,
            ErrorMaskBuilder errorMask,
            TargetGroup_CopyMask copyMask)
        {
            if (copyMask?.Do ?? true)
            {
                errorMask?.PushIndex((int)TargetGroup_FieldIndex.Do);
                item.Do = rhs.Do;
                errorMask?.PopIndex();
            }
            if (copyMask?.Targets.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TargetGroup_FieldIndex.Targets);
                try
                {
                    item.Targets.SetToWithDefault<Target, Target>(
                        rhs: rhs.Targets,
                        def: def?.Targets,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Targets.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return (Target)r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(
                                        copyMask?.Targets?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Targets.Overall}. Cannot execute copy.");
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class TargetGroup
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TargetGroup_Registration.Instance;
        public static TargetGroup_Registration Registration => TargetGroup_Registration.Instance;
        protected object CommonInstance()
        {
            return TargetGroupCommon.Instance;
        }
        protected object CommonSetterInstance()
        {
            return TargetGroupSetterCommon.Instance;
        }
        protected object CommonSetterCopyInstance()
        {
            return TargetGroupSetterCopyCommon.Instance;
        }
        object ITargetGroupGetter.CommonInstance()
        {
            return this.CommonInstance();
        }
        object ITargetGroupGetter.CommonSetterInstance()
        {
            return this.CommonSetterInstance();
        }
        object ITargetGroupGetter.CommonSetterCopyInstance()
        {
            return this.CommonSetterCopyInstance();
        }

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class TargetGroupXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TargetGroupXmlWriteTranslation Instance = new TargetGroupXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITargetGroupGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Do) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Do),
                    item: item.Do,
                    fieldIndex: (int)TargetGroup_FieldIndex.Do,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Targets) ?? true))
            {
                ListXmlTranslation<ITargetGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Targets),
                    item: item.Targets,
                    fieldIndex: (int)TargetGroup_FieldIndex.Targets,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TargetGroup_FieldIndex.Targets),
                    transl: (XElement subNode, ITargetGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((TargetXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ITargetGroupGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.TargetGroup");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.TargetGroup");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITargetGroupGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITargetGroupGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ITargetGroupGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TargetGroupXmlCreateTranslation
    {
        public readonly static TargetGroupXmlCreateTranslation Instance = new TargetGroupXmlCreateTranslation();

        public static void FillPublicXml(
            ITargetGroup item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetGroupXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITargetGroup item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Do":
                    if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Do) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TargetGroup_FieldIndex.Do);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean DoParse,
                                errorMask: errorMask))
                            {
                                item.Do = DoParse;
                            }
                            else
                            {
                                item.Do = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Targets":
                    if ((translationMask?.GetShouldTranslate((int)TargetGroup_FieldIndex.Targets) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TargetGroup_FieldIndex.Targets);
                            if (ListXmlTranslation<Target>.Instance.Parse(
                                node: node,
                                enumer: out var TargetsItem,
                                transl: LoquiXmlTranslation<Target>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.Targets.SetTo(TargetsItem);
                            }
                            else
                            {
                                item.Targets.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class TargetGroupXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITargetGroupGetter item,
            XElement node,
            out TargetGroup_ErrorMask errorMask,
            bool doMasks = true,
            TargetGroup_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TargetGroup_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            string path,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            Stream stream,
            out TargetGroup_ErrorMask errorMask,
            TargetGroup_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            XElement node,
            string name = null,
            TargetGroup_TranslationMask translationMask = null)
        {
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGroupGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TargetGroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Tests.Internals
{
    public class TargetGroup_Mask<T> : IMask<T>, IEquatable<TargetGroup_Mask<T>>
    {
        #region Ctors
        public TargetGroup_Mask()
        {
        }

        public TargetGroup_Mask(T initialValue)
        {
            this.Do = initialValue;
            this.Targets = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Target_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Do;
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Target_Mask<T>>>> Targets;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TargetGroup_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TargetGroup_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Do, rhs.Do)) return false;
            if (!object.Equals(this.Targets, rhs.Targets)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Do?.GetHashCode());
            ret = ret.CombineHashCode(this.Targets?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Do)) return false;
            if (this.Targets != null)
            {
                if (!eval(this.Targets.Overall)) return false;
                if (this.Targets.Specific != null)
                {
                    foreach (var item in this.Targets.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TargetGroup_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TargetGroup_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TargetGroup_Mask<R> obj, Func<T, R> eval)
        {
            obj.Do = eval(this.Do);
            if (Targets != null)
            {
                obj.Targets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Target_Mask<R>>>>();
                obj.Targets.Overall = eval(this.Targets.Overall);
                if (Targets.Specific != null)
                {
                    List<MaskItemIndexed<R, Target_Mask<R>>> l = new List<MaskItemIndexed<R, Target_Mask<R>>>();
                    obj.Targets.Specific = l;
                    foreach (var item in Targets.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Target_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Target_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Targets.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TargetGroup_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TargetGroup_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TargetGroup_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Do ?? true)
                {
                    fg.AppendLine($"Do => {Do}");
                }
                if (printMask?.Targets?.Overall ?? true)
                {
                    fg.AppendLine("Targets =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Targets.Overall != null)
                        {
                            fg.AppendLine(Targets.Overall.ToString());
                        }
                        if (Targets.Specific != null)
                        {
                            foreach (var subItem in Targets.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TargetGroup_ErrorMask : IErrorMask, IErrorMask<TargetGroup_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Do;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Target_ErrorMask>>> Targets;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    return Do;
                case TargetGroup_FieldIndex.Targets:
                    return Targets;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    this.Do = ex;
                    break;
                case TargetGroup_FieldIndex.Targets:
                    this.Targets = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Target_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TargetGroup_FieldIndex enu = (TargetGroup_FieldIndex)index;
            switch (enu)
            {
                case TargetGroup_FieldIndex.Do:
                    this.Do = (Exception)obj;
                    break;
                case TargetGroup_FieldIndex.Targets:
                    this.Targets = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Target_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Do != null) return true;
            if (Targets != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TargetGroup_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Do => {Do}");
            fg.AppendLine("Targets =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Targets.Overall != null)
                {
                    fg.AppendLine(Targets.Overall.ToString());
                }
                if (Targets.Specific != null)
                {
                    foreach (var subItem in Targets.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TargetGroup_ErrorMask Combine(TargetGroup_ErrorMask rhs)
        {
            var ret = new TargetGroup_ErrorMask();
            ret.Do = this.Do.Combine(rhs.Do);
            ret.Targets = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Target_ErrorMask>>>(this.Targets.Overall.Combine(rhs.Targets.Overall), new List<MaskItem<Exception, Target_ErrorMask>>(this.Targets.Specific.And(rhs.Targets.Specific)));
            return ret;
        }
        public static TargetGroup_ErrorMask Combine(TargetGroup_ErrorMask lhs, TargetGroup_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TargetGroup_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TargetGroup_ErrorMask();
        }
        #endregion

    }
    public class TargetGroup_CopyMask
    {
        public TargetGroup_CopyMask()
        {
        }

        public TargetGroup_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Do = defaultOn;
            this.Targets = new MaskItem<CopyOption, Target_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool Do;
        public MaskItem<CopyOption, Target_CopyMask> Targets;
        #endregion

    }

    public class TargetGroup_DeepCopyMask
    {
        public TargetGroup_DeepCopyMask()
        {
        }

        public TargetGroup_DeepCopyMask(bool defaultOn)
        {
            this.Do = defaultOn;
            this.Targets = new MaskItem<bool, Target_DeepCopyMask>(defaultOn, default);
        }

        #region Members
        public bool Do;
        public MaskItem<bool, Target_DeepCopyMask> Targets;
        #endregion

    }

    public class TargetGroup_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Do;
        public MaskItem<bool, Target_TranslationMask> Targets;
        #endregion

        #region Ctors
        public TargetGroup_TranslationMask()
        {
        }

        public TargetGroup_TranslationMask(bool defaultOn)
        {
            this.Do = defaultOn;
            this.Targets = new MaskItem<bool, Target_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Do, null));
            ret.Add((Targets?.Overall ?? true, Targets?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#endregion

