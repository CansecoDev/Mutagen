/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class Target :
        ITarget,
        ILoquiObjectSetter<Target>,
        IEquatable<Target>,
        IEqualsMask
    {
        #region Ctor
        public Target()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Do
        public Boolean Do { get; set; } = default;
        #endregion
        #region Path
        public String Path { get; set; } = string.Empty;
        #endregion
        #region NumMasters
        public Byte NumMasters { get; set; } = default;
        #endregion
        #region GameMode
        public Mutagen.Bethesda.GameMode GameMode { get; set; } = default;
        #endregion
        #region ExpectedBaseGroupCount
        public Byte? ExpectedBaseGroupCount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ITargetGetter.ExpectedBaseGroupCount => this.ExpectedBaseGroupCount;
        #endregion
        #region Interest
        public RecordInterest Interest { get; set; } = new RecordInterest();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRecordInterestGetter ITargetGetter.Interest => Interest;
        #endregion

        #region To String
        public override string ToString()
        {
            return TargetMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITargetGetter rhs)) return false;
            return ((TargetCommon)((ITargetGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Target? obj)
        {
            return ((TargetCommon)((ITargetGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TargetCommon)((ITargetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Do = initialValue;
                this.Path = initialValue;
                this.NumMasters = initialValue;
                this.GameMode = initialValue;
                this.ExpectedBaseGroupCount = initialValue;
                this.Interest = new MaskItem<TItem, RecordInterest.Mask<TItem>?>(initialValue, new RecordInterest.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Do,
                TItem Path,
                TItem NumMasters,
                TItem GameMode,
                TItem ExpectedBaseGroupCount,
                TItem Interest)
            {
                this.Do = Do;
                this.Path = Path;
                this.NumMasters = NumMasters;
                this.GameMode = GameMode;
                this.ExpectedBaseGroupCount = ExpectedBaseGroupCount;
                this.Interest = new MaskItem<TItem, RecordInterest.Mask<TItem>?>(Interest, new RecordInterest.Mask<TItem>(Interest));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Do;
            public TItem Path;
            public TItem NumMasters;
            public TItem GameMode;
            public TItem ExpectedBaseGroupCount;
            public MaskItem<TItem, RecordInterest.Mask<TItem>?>? Interest { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Do, rhs.Do)) return false;
                if (!object.Equals(this.Path, rhs.Path)) return false;
                if (!object.Equals(this.NumMasters, rhs.NumMasters)) return false;
                if (!object.Equals(this.GameMode, rhs.GameMode)) return false;
                if (!object.Equals(this.ExpectedBaseGroupCount, rhs.ExpectedBaseGroupCount)) return false;
                if (!object.Equals(this.Interest, rhs.Interest)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Do);
                hash.Add(this.Path);
                hash.Add(this.NumMasters);
                hash.Add(this.GameMode);
                hash.Add(this.ExpectedBaseGroupCount);
                hash.Add(this.Interest);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Do)) return false;
                if (!eval(this.Path)) return false;
                if (!eval(this.NumMasters)) return false;
                if (!eval(this.GameMode)) return false;
                if (!eval(this.ExpectedBaseGroupCount)) return false;
                if (Interest != null)
                {
                    if (!eval(this.Interest.Overall)) return false;
                    if (this.Interest.Specific != null && !this.Interest.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Do)) return true;
                if (eval(this.Path)) return true;
                if (eval(this.NumMasters)) return true;
                if (eval(this.GameMode)) return true;
                if (eval(this.ExpectedBaseGroupCount)) return true;
                if (Interest != null)
                {
                    if (eval(this.Interest.Overall)) return true;
                    if (this.Interest.Specific != null && this.Interest.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Target.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Do = eval(this.Do);
                obj.Path = eval(this.Path);
                obj.NumMasters = eval(this.NumMasters);
                obj.GameMode = eval(this.GameMode);
                obj.ExpectedBaseGroupCount = eval(this.ExpectedBaseGroupCount);
                obj.Interest = this.Interest == null ? null : new MaskItem<R, RecordInterest.Mask<R>?>(eval(this.Interest.Overall), this.Interest.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Target.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Target.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Target.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Do ?? true)
                    {
                        fg.AppendItem(Do, "Do");
                    }
                    if (printMask?.Path ?? true)
                    {
                        fg.AppendItem(Path, "Path");
                    }
                    if (printMask?.NumMasters ?? true)
                    {
                        fg.AppendItem(NumMasters, "NumMasters");
                    }
                    if (printMask?.GameMode ?? true)
                    {
                        fg.AppendItem(GameMode, "GameMode");
                    }
                    if (printMask?.ExpectedBaseGroupCount ?? true)
                    {
                        fg.AppendItem(ExpectedBaseGroupCount, "ExpectedBaseGroupCount");
                    }
                    if (printMask?.Interest?.Overall ?? true)
                    {
                        Interest?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Do;
            public Exception? Path;
            public Exception? NumMasters;
            public Exception? GameMode;
            public Exception? ExpectedBaseGroupCount;
            public MaskItem<Exception?, RecordInterest.ErrorMask?>? Interest;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Target_FieldIndex enu = (Target_FieldIndex)index;
                switch (enu)
                {
                    case Target_FieldIndex.Do:
                        return Do;
                    case Target_FieldIndex.Path:
                        return Path;
                    case Target_FieldIndex.NumMasters:
                        return NumMasters;
                    case Target_FieldIndex.GameMode:
                        return GameMode;
                    case Target_FieldIndex.ExpectedBaseGroupCount:
                        return ExpectedBaseGroupCount;
                    case Target_FieldIndex.Interest:
                        return Interest;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Target_FieldIndex enu = (Target_FieldIndex)index;
                switch (enu)
                {
                    case Target_FieldIndex.Do:
                        this.Do = ex;
                        break;
                    case Target_FieldIndex.Path:
                        this.Path = ex;
                        break;
                    case Target_FieldIndex.NumMasters:
                        this.NumMasters = ex;
                        break;
                    case Target_FieldIndex.GameMode:
                        this.GameMode = ex;
                        break;
                    case Target_FieldIndex.ExpectedBaseGroupCount:
                        this.ExpectedBaseGroupCount = ex;
                        break;
                    case Target_FieldIndex.Interest:
                        this.Interest = new MaskItem<Exception?, RecordInterest.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Target_FieldIndex enu = (Target_FieldIndex)index;
                switch (enu)
                {
                    case Target_FieldIndex.Do:
                        this.Do = (Exception?)obj;
                        break;
                    case Target_FieldIndex.Path:
                        this.Path = (Exception?)obj;
                        break;
                    case Target_FieldIndex.NumMasters:
                        this.NumMasters = (Exception?)obj;
                        break;
                    case Target_FieldIndex.GameMode:
                        this.GameMode = (Exception?)obj;
                        break;
                    case Target_FieldIndex.ExpectedBaseGroupCount:
                        this.ExpectedBaseGroupCount = (Exception?)obj;
                        break;
                    case Target_FieldIndex.Interest:
                        this.Interest = (MaskItem<Exception?, RecordInterest.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Do != null) return true;
                if (Path != null) return true;
                if (NumMasters != null) return true;
                if (GameMode != null) return true;
                if (ExpectedBaseGroupCount != null) return true;
                if (Interest != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Do, "Do");
                fg.AppendItem(Path, "Path");
                fg.AppendItem(NumMasters, "NumMasters");
                fg.AppendItem(GameMode, "GameMode");
                fg.AppendItem(ExpectedBaseGroupCount, "ExpectedBaseGroupCount");
                Interest?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Do = this.Do.Combine(rhs.Do);
                ret.Path = this.Path.Combine(rhs.Path);
                ret.NumMasters = this.NumMasters.Combine(rhs.NumMasters);
                ret.GameMode = this.GameMode.Combine(rhs.GameMode);
                ret.ExpectedBaseGroupCount = this.ExpectedBaseGroupCount.Combine(rhs.ExpectedBaseGroupCount);
                ret.Interest = this.Interest.Combine(rhs.Interest, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Do;
            public bool Path;
            public bool NumMasters;
            public bool GameMode;
            public bool ExpectedBaseGroupCount;
            public MaskItem<bool, RecordInterest.TranslationMask?> Interest;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Do = defaultOn;
                this.Path = defaultOn;
                this.NumMasters = defaultOn;
                this.GameMode = defaultOn;
                this.ExpectedBaseGroupCount = defaultOn;
                this.Interest = new MaskItem<bool, RecordInterest.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Do, null));
                ret.Add((Path, null));
                ret.Add((NumMasters, null));
                ret.Add((GameMode, null));
                ret.Add((ExpectedBaseGroupCount, null));
                ret.Add((Interest?.Overall ?? true, Interest?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TargetXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TargetXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Target CreateFromXml(
            XElement node,
            Target.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Target CreateFromXml(
            XElement node,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Target.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Target CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Target();
            ((TargetSetterCommon)((ITargetGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Target CreateFromXml(
            string path,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Target CreateFromXml(
            string path,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Target CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Target CreateFromXml(
            Stream stream,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Target CreateFromXml(
            Stream stream,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Target CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITargetGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TargetSetterCommon)((ITargetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Target GetNew()
        {
            return new Target();
        }

    }
    #endregion

    #region Interface
    public partial interface ITarget :
        ITargetGetter,
        ILoquiObjectSetter<ITarget>
    {
        new Boolean Do { get; set; }
        new String Path { get; set; }
        new Byte NumMasters { get; set; }
        new Mutagen.Bethesda.GameMode GameMode { get; set; }
        new Byte? ExpectedBaseGroupCount { get; set; }
        new RecordInterest Interest { get; set; }
    }

    public partial interface ITargetGetter :
        ILoquiObject,
        ILoquiObject<ITargetGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => Target_Registration.Instance;
        Boolean Do { get; }
        String Path { get; }
        Byte NumMasters { get; }
        Mutagen.Bethesda.GameMode GameMode { get; }
        Byte? ExpectedBaseGroupCount { get; }
        IRecordInterestGetter Interest { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TargetMixIn
    {
        public static void Clear(this ITarget item)
        {
            ((TargetSetterCommon)((ITargetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Target.Mask<bool> GetEqualsMask(
            this ITargetGetter item,
            ITargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TargetCommon)((ITargetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITargetGetter item,
            string? name = null,
            Target.Mask<bool>? printMask = null)
        {
            return ((TargetCommon)((ITargetGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITargetGetter item,
            FileGeneration fg,
            string? name = null,
            Target.Mask<bool>? printMask = null)
        {
            ((TargetCommon)((ITargetGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITargetGetter item,
            Target.Mask<bool?> checkMask)
        {
            return ((TargetCommon)((ITargetGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Target.Mask<bool> GetHasBeenSetMask(this ITargetGetter item)
        {
            var ret = new Target.Mask<bool>(false);
            ((TargetCommon)((ITargetGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITargetGetter item,
            ITargetGetter rhs)
        {
            return ((TargetCommon)((ITargetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITarget lhs,
            ITargetGetter rhs)
        {
            ((TargetSetterTranslationCommon)((ITargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITarget lhs,
            ITargetGetter rhs,
            Target.TranslationMask? copyMask = null)
        {
            ((TargetSetterTranslationCommon)((ITargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITarget lhs,
            ITargetGetter rhs,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TargetSetterTranslationCommon)((ITargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Target.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITarget lhs,
            ITargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TargetSetterTranslationCommon)((ITargetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Target DeepCopy(
            this ITargetGetter item,
            Target.TranslationMask? copyMask = null)
        {
            return ((TargetSetterTranslationCommon)((ITargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Target DeepCopy(
            this ITargetGetter item,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? copyMask = null)
        {
            return ((TargetSetterTranslationCommon)((ITargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Target DeepCopy(
            this ITargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TargetSetterTranslationCommon)((ITargetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITarget item,
            XElement node,
            Target.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITarget item,
            XElement node,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Target.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TargetSetterCommon)((ITargetGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITarget item,
            string path,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITarget item,
            string path,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITarget item,
            string path,
            ErrorMaskBuilder? errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITarget item,
            Stream stream,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITarget item,
            Stream stream,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITarget item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Target.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum Target_FieldIndex
    {
        Do = 0,
        Path = 1,
        NumMasters = 2,
        GameMode = 3,
        ExpectedBaseGroupCount = 4,
        Interest = 5,
    }
    #endregion

    #region Registration
    public partial class Target_Registration : ILoquiRegistration
    {
        public static readonly Target_Registration Instance = new Target_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "4eabe8e5-a068-4934-a847-401d92253ade";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Target.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Target.ErrorMask);

        public static readonly Type ClassType = typeof(Target);

        public static readonly Type GetterType = typeof(ITargetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITarget);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.Target";

        public const string Name = "Target";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DO":
                    return (ushort)Target_FieldIndex.Do;
                case "PATH":
                    return (ushort)Target_FieldIndex.Path;
                case "NUMMASTERS":
                    return (ushort)Target_FieldIndex.NumMasters;
                case "GAMEMODE":
                    return (ushort)Target_FieldIndex.GameMode;
                case "EXPECTEDBASEGROUPCOUNT":
                    return (ushort)Target_FieldIndex.ExpectedBaseGroupCount;
                case "INTEREST":
                    return (ushort)Target_FieldIndex.Interest;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                case Target_FieldIndex.Interest:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Interest:
                    return true;
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                case Target_FieldIndex.Interest:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    return "Do";
                case Target_FieldIndex.Path:
                    return "Path";
                case Target_FieldIndex.NumMasters:
                    return "NumMasters";
                case Target_FieldIndex.GameMode:
                    return "GameMode";
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return "ExpectedBaseGroupCount";
                case Target_FieldIndex.Interest:
                    return "Interest";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                case Target_FieldIndex.Interest:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                case Target_FieldIndex.Interest:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    return typeof(Boolean);
                case Target_FieldIndex.Path:
                    return typeof(String);
                case Target_FieldIndex.NumMasters:
                    return typeof(Byte);
                case Target_FieldIndex.GameMode:
                    return typeof(Mutagen.Bethesda.GameMode);
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return typeof(Byte);
                case Target_FieldIndex.Interest:
                    return typeof(RecordInterest);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TargetXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TargetSetterCommon
    {
        public static readonly TargetSetterCommon Instance = new TargetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITarget item)
        {
            ClearPartial();
            item.Do = default;
            item.Path = string.Empty;
            item.NumMasters = default;
            item.GameMode = default;
            item.ExpectedBaseGroupCount = default;
            item.Interest.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ITarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class TargetCommon
    {
        public static readonly TargetCommon Instance = new TargetCommon();

        public Target.Mask<bool> GetEqualsMask(
            ITargetGetter item,
            ITargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Target.Mask<bool>(false);
            ((TargetCommon)((ITargetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITargetGetter item,
            ITargetGetter rhs,
            Target.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Do = item.Do == rhs.Do;
            ret.Path = string.Equals(item.Path, rhs.Path);
            ret.NumMasters = item.NumMasters == rhs.NumMasters;
            ret.GameMode = item.GameMode == rhs.GameMode;
            ret.ExpectedBaseGroupCount = item.ExpectedBaseGroupCount == rhs.ExpectedBaseGroupCount;
            ret.Interest = MaskItemExt.Factory(item.Interest.GetEqualsMask(rhs.Interest, include), include);
        }
        
        public string ToString(
            ITargetGetter item,
            string? name = null,
            Target.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITargetGetter item,
            FileGeneration fg,
            string? name = null,
            Target.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Target =>");
            }
            else
            {
                fg.AppendLine($"{name} (Target) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITargetGetter item,
            FileGeneration fg,
            Target.Mask<bool>? printMask = null)
        {
            if (printMask?.Do ?? true)
            {
                fg.AppendItem(item.Do, "Do");
            }
            if (printMask?.Path ?? true)
            {
                fg.AppendItem(item.Path, "Path");
            }
            if (printMask?.NumMasters ?? true)
            {
                fg.AppendItem(item.NumMasters, "NumMasters");
            }
            if (printMask?.GameMode ?? true)
            {
                fg.AppendItem(item.GameMode, "GameMode");
            }
            if ((printMask?.ExpectedBaseGroupCount ?? true)
                && item.ExpectedBaseGroupCount.TryGet(out var ExpectedBaseGroupCountItem))
            {
                fg.AppendItem(ExpectedBaseGroupCountItem, "ExpectedBaseGroupCount");
            }
            if (printMask?.Interest?.Overall ?? true)
            {
                item.Interest?.ToString(fg, "Interest");
            }
        }
        
        public bool HasBeenSet(
            ITargetGetter item,
            Target.Mask<bool?> checkMask)
        {
            if (checkMask.ExpectedBaseGroupCount.HasValue && checkMask.ExpectedBaseGroupCount.Value != (item.ExpectedBaseGroupCount != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITargetGetter item,
            Target.Mask<bool> mask)
        {
            mask.Do = true;
            mask.Path = true;
            mask.NumMasters = true;
            mask.GameMode = true;
            mask.ExpectedBaseGroupCount = (item.ExpectedBaseGroupCount != null);
            mask.Interest = new MaskItem<bool, RecordInterest.Mask<bool>?>(true, item.Interest?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITargetGetter? lhs,
            ITargetGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Do != rhs.Do) return false;
            if (!string.Equals(lhs.Path, rhs.Path)) return false;
            if (lhs.NumMasters != rhs.NumMasters) return false;
            if (lhs.GameMode != rhs.GameMode) return false;
            if (lhs.ExpectedBaseGroupCount != rhs.ExpectedBaseGroupCount) return false;
            if (!object.Equals(lhs.Interest, rhs.Interest)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITargetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Do);
            hash.Add(item.Path);
            hash.Add(item.NumMasters);
            hash.Add(item.GameMode);
            if (item.ExpectedBaseGroupCount.TryGet(out var ExpectedBaseGroupCountitem))
            {
                hash.Add(ExpectedBaseGroupCountitem);
            }
            hash.Add(item.Interest);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Target.GetNew();
        }
        
    }
    public partial class TargetSetterTranslationCommon
    {
        public static readonly TargetSetterTranslationCommon Instance = new TargetSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITarget item,
            ITargetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.Do) ?? true))
            {
                item.Do = rhs.Do;
            }
            if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.Path) ?? true))
            {
                item.Path = rhs.Path;
            }
            if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.NumMasters) ?? true))
            {
                item.NumMasters = rhs.NumMasters;
            }
            if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.GameMode) ?? true))
            {
                item.GameMode = rhs.GameMode;
            }
            if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.ExpectedBaseGroupCount) ?? true))
            {
                item.ExpectedBaseGroupCount = rhs.ExpectedBaseGroupCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.Interest) ?? true))
            {
                errorMask?.PushIndex((int)Target_FieldIndex.Interest);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Target_FieldIndex.Interest) ?? true))
                    {
                        item.Interest = rhs.Interest.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Target_FieldIndex.Interest),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Target DeepCopy(
            ITargetGetter item,
            Target.TranslationMask? copyMask = null)
        {
            Target ret = (Target)((TargetCommon)((ITargetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Target DeepCopy(
            ITargetGetter item,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? copyMask = null)
        {
            Target ret = (Target)((TargetCommon)((ITargetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Target DeepCopy(
            ITargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Target ret = (Target)((TargetCommon)((ITargetGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class Target
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Target_Registration.Instance;
        public static Target_Registration Registration => Target_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TargetCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TargetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TargetSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITargetGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITargetGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITargetGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class TargetXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TargetXmlWriteTranslation Instance = new TargetXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITargetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Do) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Do),
                    item: item.Do,
                    fieldIndex: (int)Target_FieldIndex.Do,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Path) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Path),
                    item: item.Path,
                    fieldIndex: (int)Target_FieldIndex.Path,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.NumMasters) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumMasters),
                    item: item.NumMasters,
                    fieldIndex: (int)Target_FieldIndex.NumMasters,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.GameMode) ?? true))
            {
                EnumXmlTranslation<Mutagen.Bethesda.GameMode>.Instance.Write(
                    node: node,
                    name: nameof(item.GameMode),
                    item: item.GameMode,
                    fieldIndex: (int)Target_FieldIndex.GameMode,
                    errorMask: errorMask);
            }
            if ((item.ExpectedBaseGroupCount != null)
                && (translationMask?.GetShouldTranslate((int)Target_FieldIndex.ExpectedBaseGroupCount) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExpectedBaseGroupCount),
                    item: item.ExpectedBaseGroupCount.Value,
                    fieldIndex: (int)Target_FieldIndex.ExpectedBaseGroupCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Interest) ?? true))
            {
                var InterestItem = item.Interest;
                ((RecordInterestXmlWriteTranslation)((IXmlItem)InterestItem).XmlWriteTranslator).Write(
                    item: InterestItem,
                    node: node,
                    name: nameof(item.Interest),
                    fieldIndex: (int)Target_FieldIndex.Interest,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Target_FieldIndex.Interest));
            }
        }

        public void Write(
            XElement node,
            ITargetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.Target");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.Target");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITargetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITargetGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITargetGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TargetXmlCreateTranslation
    {
        public readonly static TargetXmlCreateTranslation Instance = new TargetXmlCreateTranslation();

        public static void FillPublicXml(
            ITarget item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITarget item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Do":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Do) ?? true))
                    {
                        errorMask?.PushIndex((int)Target_FieldIndex.Do);
                        try
                        {
                            item.Do = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Path":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Path) ?? true))
                    {
                        errorMask?.PushIndex((int)Target_FieldIndex.Path);
                        try
                        {
                            item.Path = StringXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "NumMasters":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.NumMasters) ?? true))
                    {
                        errorMask?.PushIndex((int)Target_FieldIndex.NumMasters);
                        try
                        {
                            item.NumMasters = ByteXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "GameMode":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.GameMode) ?? true))
                    {
                        errorMask?.PushIndex((int)Target_FieldIndex.GameMode);
                        try
                        {
                            item.GameMode = EnumXmlTranslation<Mutagen.Bethesda.GameMode>.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ExpectedBaseGroupCount":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.ExpectedBaseGroupCount) ?? true))
                    {
                        errorMask?.PushIndex((int)Target_FieldIndex.ExpectedBaseGroupCount);
                        try
                        {
                            item.ExpectedBaseGroupCount = ByteXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Interest":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Interest) ?? true))
                    {
                        errorMask?.PushIndex((int)Target_FieldIndex.Interest);
                        try
                        {
                            item.Interest = LoquiXmlTranslation<RecordInterest>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)Target_FieldIndex.Interest));
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class TargetXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITargetGetter item,
            XElement node,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Target.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            string path,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            Stream stream,
            out Target.ErrorMask errorMask,
            Target.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            XElement node,
            string? name = null,
            Target.TranslationMask? translationMask = null)
        {
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITargetGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITargetGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#endregion

