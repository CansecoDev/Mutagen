/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using ReactiveUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class Target :
        LoquiNotifyingObject,
        ITarget,
        ILoquiObjectSetter<Target>,
        IEquatable<Target>,
        IEqualsMask
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Target_Registration.Instance;
        public static Target_Registration Registration => Target_Registration.Instance;
        protected object CommonInstance => TargetCommon.Instance;
        object ILoquiObject.CommonInstance => this.CommonInstance;

        #region Ctor
        public Target()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Do
        private Boolean _Do;
        public Boolean Do
        {
            get => this._Do;
            set => this.RaiseAndSetIfChanged(ref this._Do, value, nameof(Do));
        }
        #endregion
        #region Path
        private String _Path;
        public String Path
        {
            get => this._Path;
            set => this.RaiseAndSetIfReferenceChanged(ref this._Path, value, nameof(Path));
        }
        #endregion
        #region NumMasters
        private Byte _NumMasters;
        public Byte NumMasters
        {
            get => this._NumMasters;
            set => this.RaiseAndSetIfChanged(ref this._NumMasters, value, nameof(NumMasters));
        }
        #endregion
        #region GameMode
        private Mutagen.Bethesda.GameMode _GameMode;
        public Mutagen.Bethesda.GameMode GameMode
        {
            get => this._GameMode;
            set => this.RaiseAndSetIfChanged(ref this._GameMode, value, nameof(GameMode));
        }
        #endregion
        #region ExpectedBaseGroupCount
        public bool ExpectedBaseGroupCount_IsSet
        {
            get => _hasBeenSetTracker[(int)Target_FieldIndex.ExpectedBaseGroupCount];
            set => this.RaiseAndSetIfChanged(_hasBeenSetTracker, value, (int)Target_FieldIndex.ExpectedBaseGroupCount, nameof(ExpectedBaseGroupCount_IsSet));
        }
        bool ITargetGetter.ExpectedBaseGroupCount_IsSet => ExpectedBaseGroupCount_IsSet;
        private Byte _ExpectedBaseGroupCount;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte ExpectedBaseGroupCount
        {
            get => this._ExpectedBaseGroupCount;
            set => ExpectedBaseGroupCount_Set(value);
        }
        Byte ITargetGetter.ExpectedBaseGroupCount => this.ExpectedBaseGroupCount;
        public void ExpectedBaseGroupCount_Set(
            Byte value,
            bool markSet = true)
        {
            this.RaiseAndSetIfChanged(ref _ExpectedBaseGroupCount, value, _hasBeenSetTracker, markSet, (int)Target_FieldIndex.ExpectedBaseGroupCount, nameof(ExpectedBaseGroupCount), nameof(ExpectedBaseGroupCount_IsSet));
        }
        public void ExpectedBaseGroupCount_Unset()
        {
            this.ExpectedBaseGroupCount_Set(default(Byte), false);
        }
        #endregion

        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITargetGetter)rhs, include);
        #region To String
        public override string ToString()
        {
            return TargetMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TargetMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Target rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Target rhs)
        {
            if (rhs == null) return false;
            if (this.Do != rhs.Do) return false;
            if (!string.Equals(this.Path, rhs.Path)) return false;
            if (this.NumMasters != rhs.NumMasters) return false;
            if (this.GameMode != rhs.GameMode) return false;
            if (ExpectedBaseGroupCount_IsSet != rhs.ExpectedBaseGroupCount_IsSet) return false;
            if (ExpectedBaseGroupCount_IsSet)
            {
                if (this.ExpectedBaseGroupCount != rhs.ExpectedBaseGroupCount) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Do).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Path).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(NumMasters).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GameMode).CombineHashCode(ret);
            if (ExpectedBaseGroupCount_IsSet)
            {
                ret = HashHelper.GetHashCode(ExpectedBaseGroupCount).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        protected IXmlWriteTranslator XmlWriteTranslator => TargetXmlWriteTranslation.Instance;
        IXmlWriteTranslator IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        #region Xml Create
        [DebuggerStepThrough]
        public static Target Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            Target_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Target Create_Xml(
            XElement node,
            out Target_ErrorMask errorMask,
            bool doMasks = true,
            Target_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Target_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Target Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Target() : null;
                    break;
                default:
                    break;
            }
            var ret = new Target();
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetXmlCreateTranslation.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Target Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            Target_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Target Create_Xml(
            string path,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Target Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            Target_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Target Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            Target_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static Target Create_Xml(
            Stream stream,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Target Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Target_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Target_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<Target>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            string path,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Target_FieldIndex)index)
            {
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return _hasBeenSetTracker[index];
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Target Copy(
            Target_CopyMask copyMask = null,
            Target def = null)
        {
            return Target.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Target Copy(
            Target item,
            Target_CopyMask copyMask = null,
            Target def = null)
        {
            Target ret;
            if (item.GetType().Equals(typeof(Target)))
            {
                ret = new Target();
            }
            else
            {
                ret = (Target)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Target Copy_ToLoqui(
            Target item,
            Target_CopyMask copyMask = null,
            Target def = null)
        {
            Target ret;
            if (item.GetType().Equals(typeof(Target)))
            {
                ret = new Target() as Target;
            }
            else
            {
                ret = (Target)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(Target rhs)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            Target rhs,
            Target_CopyMask copyMask,
            Target def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            Target rhs,
            out Target_ErrorMask errorMask,
            Target_CopyMask copyMask = null,
            Target def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Target_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            Target rhs,
            ErrorMaskBuilder errorMask,
            Target_CopyMask copyMask = null,
            Target def = null)
        {
            TargetCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    this.Do = (Boolean)obj;
                    break;
                case Target_FieldIndex.Path:
                    this.Path = (String)obj;
                    break;
                case Target_FieldIndex.NumMasters:
                    this.NumMasters = (Byte)obj;
                    break;
                case Target_FieldIndex.GameMode:
                    this.GameMode = (Mutagen.Bethesda.GameMode)obj;
                    break;
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    this.ExpectedBaseGroupCount = (Byte)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void Clear()
        {
            TargetCommon.Instance.Clear(this);
        }

        public static Target Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Target();
            foreach (var pair in fields)
            {
                CopyInInternal_Target(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Target(Target obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Target_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    obj.Do = (Boolean)pair.Value;
                    break;
                case Target_FieldIndex.Path:
                    obj.Path = (String)pair.Value;
                    break;
                case Target_FieldIndex.NumMasters:
                    obj.NumMasters = (Byte)pair.Value;
                    break;
                case Target_FieldIndex.GameMode:
                    obj.GameMode = (Mutagen.Bethesda.GameMode)pair.Value;
                    break;
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    obj.ExpectedBaseGroupCount = (Byte)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ITarget :
        ITargetGetter,
        ILoquiObjectSetter<ITarget>
    {
        new Boolean Do { get; set; }

        new String Path { get; set; }

        new Byte NumMasters { get; set; }

        new Mutagen.Bethesda.GameMode GameMode { get; set; }

        new Byte ExpectedBaseGroupCount { get; set; }
        new bool ExpectedBaseGroupCount_IsSet { get; set; }
        void ExpectedBaseGroupCount_Set(Byte value, bool hasBeenSet = true);
        void ExpectedBaseGroupCount_Unset();

        void CopyFieldsFrom(
            Target rhs,
            ErrorMaskBuilder errorMask = null,
            Target_CopyMask copyMask = null,
            Target def = null);
    }

    public partial interface ITargetGetter :
        ILoquiObject,
        ILoquiObject<ITargetGetter>,
        IXmlItem
    {
        #region Do
        Boolean Do { get; }

        #endregion
        #region Path
        String Path { get; }

        #endregion
        #region NumMasters
        Byte NumMasters { get; }

        #endregion
        #region GameMode
        Mutagen.Bethesda.GameMode GameMode { get; }

        #endregion
        #region ExpectedBaseGroupCount
        Byte ExpectedBaseGroupCount { get; }
        bool ExpectedBaseGroupCount_IsSet { get; }

        #endregion

    }

    #endregion

    #region Common MixIn
    public static class TargetMixIn
    {
        public static void Clear(this ITarget item)
        {
            ((TargetCommon)item.CommonInstance).Clear(item: item);
        }

        public static Target_Mask<bool> GetEqualsMask(
            this ITargetGetter item,
            ITargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TargetCommon)item.CommonInstance).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITargetGetter item,
            string name = null,
            Target_Mask<bool> printMask = null)
        {
            return ((TargetCommon)item.CommonInstance).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITargetGetter item,
            FileGeneration fg,
            string name = null,
            Target_Mask<bool> printMask = null)
        {
            ((TargetCommon)item.CommonInstance).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITargetGetter item,
            Target_Mask<bool?> checkMask)
        {
            return ((TargetCommon)item.CommonInstance).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Target_Mask<bool> GetHasBeenSetMask(this ITargetGetter item)
        {
            var ret = new Target_Mask<bool>();
            ((TargetCommon)item.CommonInstance).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum Target_FieldIndex
    {
        Do = 0,
        Path = 1,
        NumMasters = 2,
        GameMode = 3,
        ExpectedBaseGroupCount = 4,
    }
    #endregion

    #region Registration
    public class Target_Registration : ILoquiRegistration
    {
        public static readonly Target_Registration Instance = new Target_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "4eabe8e5-a068-4934-a847-401d92253ade";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Target_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Target_ErrorMask);

        public static readonly Type ClassType = typeof(Target);

        public static readonly Type GetterType = typeof(ITargetGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITarget);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(TargetCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.Target";

        public const string Name = "Target";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DO":
                    return (ushort)Target_FieldIndex.Do;
                case "PATH":
                    return (ushort)Target_FieldIndex.Path;
                case "NUMMASTERS":
                    return (ushort)Target_FieldIndex.NumMasters;
                case "GAMEMODE":
                    return (ushort)Target_FieldIndex.GameMode;
                case "EXPECTEDBASEGROUPCOUNT":
                    return (ushort)Target_FieldIndex.ExpectedBaseGroupCount;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    return "Do";
                case Target_FieldIndex.Path:
                    return "Path";
                case Target_FieldIndex.NumMasters:
                    return "NumMasters";
                case Target_FieldIndex.GameMode:
                    return "GameMode";
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return "ExpectedBaseGroupCount";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                case Target_FieldIndex.Path:
                case Target_FieldIndex.NumMasters:
                case Target_FieldIndex.GameMode:
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    return typeof(Boolean);
                case Target_FieldIndex.Path:
                    return typeof(String);
                case Target_FieldIndex.NumMasters:
                    return typeof(Byte);
                case Target_FieldIndex.GameMode:
                    return typeof(Mutagen.Bethesda.GameMode);
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlTranslation = typeof(TargetXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TargetCommon
    {
        public static readonly TargetCommon Instance = new TargetCommon();

        #region Copy Fields From
        public static void CopyFieldsFrom(
            Target item,
            Target rhs,
            Target def,
            ErrorMaskBuilder errorMask,
            Target_CopyMask copyMask)
        {
            if (copyMask?.Do ?? true)
            {
                errorMask?.PushIndex((int)Target_FieldIndex.Do);
                try
                {
                    item.Do = rhs.Do;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Path ?? true)
            {
                errorMask?.PushIndex((int)Target_FieldIndex.Path);
                try
                {
                    item.Path = rhs.Path;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.NumMasters ?? true)
            {
                errorMask?.PushIndex((int)Target_FieldIndex.NumMasters);
                try
                {
                    item.NumMasters = rhs.NumMasters;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.GameMode ?? true)
            {
                errorMask?.PushIndex((int)Target_FieldIndex.GameMode);
                try
                {
                    item.GameMode = rhs.GameMode;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.ExpectedBaseGroupCount ?? true)
            {
                errorMask?.PushIndex((int)Target_FieldIndex.ExpectedBaseGroupCount);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.ExpectedBaseGroupCount,
                        rhsHasBeenSet: rhs.ExpectedBaseGroupCount_IsSet,
                        defItem: def?.ExpectedBaseGroupCount ?? default(Byte),
                        defHasBeenSet: def?.ExpectedBaseGroupCount_IsSet ?? false,
                        outRhsItem: out var rhsExpectedBaseGroupCountItem,
                        outDefItem: out var defExpectedBaseGroupCountItem))
                    {
                        item.ExpectedBaseGroupCount = rhsExpectedBaseGroupCountItem;
                    }
                    else
                    {
                        item.ExpectedBaseGroupCount_Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        partial void ClearPartial();

        public virtual void Clear(ITarget item)
        {
            ClearPartial();
            item.Do = default(Boolean);
            item.Path = default(String);
            item.NumMasters = default(Byte);
            item.GameMode = default(Mutagen.Bethesda.GameMode);
            item.ExpectedBaseGroupCount_Unset();
        }

        public Target_Mask<bool> GetEqualsMask(
            ITargetGetter item,
            ITargetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Target_Mask<bool>();
            ((TargetCommon)item.CommonInstance).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public void FillEqualsMask(
            ITargetGetter item,
            ITargetGetter rhs,
            Target_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Do = item.Do == rhs.Do;
            ret.Path = string.Equals(item.Path, rhs.Path);
            ret.NumMasters = item.NumMasters == rhs.NumMasters;
            ret.GameMode = item.GameMode == rhs.GameMode;
            ret.ExpectedBaseGroupCount = item.ExpectedBaseGroupCount_IsSet == rhs.ExpectedBaseGroupCount_IsSet && item.ExpectedBaseGroupCount == rhs.ExpectedBaseGroupCount;
        }

        public string ToString(
            ITargetGetter item,
            string name = null,
            Target_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }

        public void ToString(
            ITargetGetter item,
            FileGeneration fg,
            string name = null,
            Target_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Target =>");
            }
            else
            {
                fg.AppendLine($"{name} (Target) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }

        protected static void ToStringFields(
            ITargetGetter item,
            FileGeneration fg,
            Target_Mask<bool> printMask = null)
        {
            if (printMask?.Do ?? true)
            {
                fg.AppendLine($"Do => {item.Do}");
            }
            if (printMask?.Path ?? true)
            {
                fg.AppendLine($"Path => {item.Path}");
            }
            if (printMask?.NumMasters ?? true)
            {
                fg.AppendLine($"NumMasters => {item.NumMasters}");
            }
            if (printMask?.GameMode ?? true)
            {
                fg.AppendLine($"GameMode => {item.GameMode}");
            }
            if (printMask?.ExpectedBaseGroupCount ?? true)
            {
                fg.AppendLine($"ExpectedBaseGroupCount => {item.ExpectedBaseGroupCount}");
            }
        }

        public bool HasBeenSet(
            ITargetGetter item,
            Target_Mask<bool?> checkMask)
        {
            if (checkMask.ExpectedBaseGroupCount.HasValue && checkMask.ExpectedBaseGroupCount.Value != item.ExpectedBaseGroupCount_IsSet) return false;
            return true;
        }

        public void FillHasBeenSetMask(
            ITargetGetter item,
            Target_Mask<bool> mask)
        {
            mask.Do = true;
            mask.Path = true;
            mask.NumMasters = true;
            mask.GameMode = true;
            mask.ExpectedBaseGroupCount = item.ExpectedBaseGroupCount_IsSet;
        }

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class TargetXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TargetXmlWriteTranslation Instance = new TargetXmlWriteTranslation();

        public static void WriteToNode_Xml(
            ITargetGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Do) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Do),
                    item: item.Do,
                    fieldIndex: (int)Target_FieldIndex.Do,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Path) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Path),
                    item: item.Path,
                    fieldIndex: (int)Target_FieldIndex.Path,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.NumMasters) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NumMasters),
                    item: item.NumMasters,
                    fieldIndex: (int)Target_FieldIndex.NumMasters,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.GameMode) ?? true))
            {
                EnumXmlTranslation<Mutagen.Bethesda.GameMode>.Instance.Write(
                    node: node,
                    name: nameof(item.GameMode),
                    item: item.GameMode,
                    fieldIndex: (int)Target_FieldIndex.GameMode,
                    errorMask: errorMask);
            }
            if (item.ExpectedBaseGroupCount_IsSet
                && (translationMask?.GetShouldTranslate((int)Target_FieldIndex.ExpectedBaseGroupCount) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ExpectedBaseGroupCount),
                    item: item.ExpectedBaseGroupCount,
                    fieldIndex: (int)Target_FieldIndex.ExpectedBaseGroupCount,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ITargetGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.Target");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.Target");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITargetGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITargetGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ITargetGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TargetXmlCreateTranslation
    {
        public readonly static TargetXmlCreateTranslation Instance = new TargetXmlCreateTranslation();

        public static void FillPublic_Xml(
            ITarget item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TargetXmlCreateTranslation.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            ITarget item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Do":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Do) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Target_FieldIndex.Do);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean DoParse,
                                errorMask: errorMask))
                            {
                                item.Do = DoParse;
                            }
                            else
                            {
                                item.Do = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Path":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.Path) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Target_FieldIndex.Path);
                            if (StringXmlTranslation.Instance.Parse(
                                node: node,
                                item: out String PathParse,
                                errorMask: errorMask))
                            {
                                item.Path = PathParse;
                            }
                            else
                            {
                                item.Path = default(String);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "NumMasters":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.NumMasters) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Target_FieldIndex.NumMasters);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte NumMastersParse,
                                errorMask: errorMask))
                            {
                                item.NumMasters = NumMastersParse;
                            }
                            else
                            {
                                item.NumMasters = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "GameMode":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.GameMode) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Target_FieldIndex.GameMode);
                            if (EnumXmlTranslation<Mutagen.Bethesda.GameMode>.Instance.Parse(
                                node: node,
                                item: out Mutagen.Bethesda.GameMode GameModeParse,
                                errorMask: errorMask))
                            {
                                item.GameMode = GameModeParse;
                            }
                            else
                            {
                                item.GameMode = default(Mutagen.Bethesda.GameMode);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "ExpectedBaseGroupCount":
                    if ((translationMask?.GetShouldTranslate((int)Target_FieldIndex.ExpectedBaseGroupCount) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)Target_FieldIndex.ExpectedBaseGroupCount);
                            if (ByteXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Byte ExpectedBaseGroupCountParse,
                                errorMask: errorMask))
                            {
                                item.ExpectedBaseGroupCount = ExpectedBaseGroupCountParse;
                            }
                            else
                            {
                                item.ExpectedBaseGroupCount = default(Byte);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

    #region Xml Write Mixins
    public static class TargetXmlTranslationMixIn
    {
        public static void Write_Xml(
            this ITargetGetter item,
            XElement node,
            out Target_ErrorMask errorMask,
            bool doMasks = true,
            Target_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Target_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            string path,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            Stream stream,
            out Target_ErrorMask errorMask,
            Target_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            XElement node,
            string name = null,
            Target_TranslationMask translationMask = null)
        {
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void Write_Xml(
            this ITargetGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void Write_Xml(
            this ITargetGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TargetXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion

    #endregion

    #region Mask
    public class Target_Mask<T> : IMask<T>, IEquatable<Target_Mask<T>>
    {
        #region Ctors
        public Target_Mask()
        {
        }

        public Target_Mask(T initialValue)
        {
            this.Do = initialValue;
            this.Path = initialValue;
            this.NumMasters = initialValue;
            this.GameMode = initialValue;
            this.ExpectedBaseGroupCount = initialValue;
        }
        #endregion

        #region Members
        public T Do;
        public T Path;
        public T NumMasters;
        public T GameMode;
        public T ExpectedBaseGroupCount;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Target_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Target_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Do, rhs.Do)) return false;
            if (!object.Equals(this.Path, rhs.Path)) return false;
            if (!object.Equals(this.NumMasters, rhs.NumMasters)) return false;
            if (!object.Equals(this.GameMode, rhs.GameMode)) return false;
            if (!object.Equals(this.ExpectedBaseGroupCount, rhs.ExpectedBaseGroupCount)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Do?.GetHashCode());
            ret = ret.CombineHashCode(this.Path?.GetHashCode());
            ret = ret.CombineHashCode(this.NumMasters?.GetHashCode());
            ret = ret.CombineHashCode(this.GameMode?.GetHashCode());
            ret = ret.CombineHashCode(this.ExpectedBaseGroupCount?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Do)) return false;
            if (!eval(this.Path)) return false;
            if (!eval(this.NumMasters)) return false;
            if (!eval(this.GameMode)) return false;
            if (!eval(this.ExpectedBaseGroupCount)) return false;
            return true;
        }
        #endregion

        #region Translate
        public Target_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Target_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Target_Mask<R> obj, Func<T, R> eval)
        {
            obj.Do = eval(this.Do);
            obj.Path = eval(this.Path);
            obj.NumMasters = eval(this.NumMasters);
            obj.GameMode = eval(this.GameMode);
            obj.ExpectedBaseGroupCount = eval(this.ExpectedBaseGroupCount);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Target_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Target_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Target_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Do ?? true)
                {
                    fg.AppendLine($"Do => {Do}");
                }
                if (printMask?.Path ?? true)
                {
                    fg.AppendLine($"Path => {Path}");
                }
                if (printMask?.NumMasters ?? true)
                {
                    fg.AppendLine($"NumMasters => {NumMasters}");
                }
                if (printMask?.GameMode ?? true)
                {
                    fg.AppendLine($"GameMode => {GameMode}");
                }
                if (printMask?.ExpectedBaseGroupCount ?? true)
                {
                    fg.AppendLine($"ExpectedBaseGroupCount => {ExpectedBaseGroupCount}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Target_ErrorMask : IErrorMask, IErrorMask<Target_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Do;
        public Exception Path;
        public Exception NumMasters;
        public Exception GameMode;
        public Exception ExpectedBaseGroupCount;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    return Do;
                case Target_FieldIndex.Path:
                    return Path;
                case Target_FieldIndex.NumMasters:
                    return NumMasters;
                case Target_FieldIndex.GameMode:
                    return GameMode;
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    return ExpectedBaseGroupCount;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    this.Do = ex;
                    break;
                case Target_FieldIndex.Path:
                    this.Path = ex;
                    break;
                case Target_FieldIndex.NumMasters:
                    this.NumMasters = ex;
                    break;
                case Target_FieldIndex.GameMode:
                    this.GameMode = ex;
                    break;
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    this.ExpectedBaseGroupCount = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Target_FieldIndex enu = (Target_FieldIndex)index;
            switch (enu)
            {
                case Target_FieldIndex.Do:
                    this.Do = (Exception)obj;
                    break;
                case Target_FieldIndex.Path:
                    this.Path = (Exception)obj;
                    break;
                case Target_FieldIndex.NumMasters:
                    this.NumMasters = (Exception)obj;
                    break;
                case Target_FieldIndex.GameMode:
                    this.GameMode = (Exception)obj;
                    break;
                case Target_FieldIndex.ExpectedBaseGroupCount:
                    this.ExpectedBaseGroupCount = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Do != null) return true;
            if (Path != null) return true;
            if (NumMasters != null) return true;
            if (GameMode != null) return true;
            if (ExpectedBaseGroupCount != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Target_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Do => {Do}");
            fg.AppendLine($"Path => {Path}");
            fg.AppendLine($"NumMasters => {NumMasters}");
            fg.AppendLine($"GameMode => {GameMode}");
            fg.AppendLine($"ExpectedBaseGroupCount => {ExpectedBaseGroupCount}");
        }
        #endregion

        #region Combine
        public Target_ErrorMask Combine(Target_ErrorMask rhs)
        {
            var ret = new Target_ErrorMask();
            ret.Do = this.Do.Combine(rhs.Do);
            ret.Path = this.Path.Combine(rhs.Path);
            ret.NumMasters = this.NumMasters.Combine(rhs.NumMasters);
            ret.GameMode = this.GameMode.Combine(rhs.GameMode);
            ret.ExpectedBaseGroupCount = this.ExpectedBaseGroupCount.Combine(rhs.ExpectedBaseGroupCount);
            return ret;
        }
        public static Target_ErrorMask Combine(Target_ErrorMask lhs, Target_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Target_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Target_ErrorMask();
        }
        #endregion

    }
    public class Target_CopyMask
    {
        public Target_CopyMask()
        {
        }

        public Target_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.Do = defaultOn;
            this.Path = defaultOn;
            this.NumMasters = defaultOn;
            this.GameMode = defaultOn;
            this.ExpectedBaseGroupCount = defaultOn;
        }

        #region Members
        public bool Do;
        public bool Path;
        public bool NumMasters;
        public bool GameMode;
        public bool ExpectedBaseGroupCount;
        #endregion

    }

    public class Target_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Do;
        public bool Path;
        public bool NumMasters;
        public bool GameMode;
        public bool ExpectedBaseGroupCount;
        #endregion

        #region Ctors
        public Target_TranslationMask()
        {
        }

        public Target_TranslationMask(bool defaultOn)
        {
            this.Do = defaultOn;
            this.Path = defaultOn;
            this.NumMasters = defaultOn;
            this.GameMode = defaultOn;
            this.ExpectedBaseGroupCount = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Do, null));
            ret.Add((Path, null));
            ret.Add((NumMasters, null));
            ret.Add((GameMode, null));
            ret.Add((ExpectedBaseGroupCount, null));
        }
    }
    #endregion

    #endregion

}
