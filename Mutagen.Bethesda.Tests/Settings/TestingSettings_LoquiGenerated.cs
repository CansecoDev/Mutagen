/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class TestingSettings : 
        ITestingSettings,
        ILoquiObject<TestingSettings>,
        ILoquiObjectSetter,
        IEquatable<TestingSettings>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestingSettings_Registration.Instance;
        public static TestingSettings_Registration Registration => TestingSettings_Registration.Instance;

        #region Ctor
        public TestingSettings()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TestGroupMasks
        public Boolean TestGroupMasks { get; set; }
        #endregion
        #region TestModList
        public Boolean TestModList { get; set; }
        #endregion
        #region TestFlattenedMod
        public Boolean TestFlattenedMod { get; set; }
        #endregion
        #region TestBenchmarks
        public Boolean TestBenchmarks { get; set; }
        #endregion
        #region PassthroughSettings
        public PassthroughSettings PassthroughSettings { get; set; }
        #endregion
        #region OblivionESM
        public Passthrough OblivionESM { get; set; }
        #endregion
        #region OtherPassthroughs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<Passthrough> _OtherPassthroughs = new SourceSetList<Passthrough>();
        public ISourceSetList<Passthrough> OtherPassthroughs => _OtherPassthroughs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Passthrough> OtherPassthroughsEnumerable
        {
            get => _OtherPassthroughs.Items;
            set => _OtherPassthroughs.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<Passthrough> ITestingSettings.OtherPassthroughs => _OtherPassthroughs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<Passthrough> ITestingSettingsGetter.OtherPassthroughs => _OtherPassthroughs;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<TestingSettings>.GetEqualsMask(TestingSettings rhs, EqualsMaskHelper.Include include) => TestingSettingsCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ITestingSettingsGetter>.GetEqualsMask(ITestingSettingsGetter rhs, EqualsMaskHelper.Include include) => TestingSettingsCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return TestingSettingsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            return TestingSettingsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestingSettingsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public TestingSettings_Mask<bool> GetHasBeenSetMask()
        {
            return TestingSettingsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestingSettings rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestingSettings rhs)
        {
            if (rhs == null) return false;
            if (this.TestGroupMasks != rhs.TestGroupMasks) return false;
            if (this.TestModList != rhs.TestModList) return false;
            if (this.TestFlattenedMod != rhs.TestFlattenedMod) return false;
            if (this.TestBenchmarks != rhs.TestBenchmarks) return false;
            if (!object.Equals(this.PassthroughSettings, rhs.PassthroughSettings)) return false;
            if (!object.Equals(this.OblivionESM, rhs.OblivionESM)) return false;
            if (!this.OtherPassthroughs.SequenceEqual(rhs.OtherPassthroughs)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(TestGroupMasks).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestModList).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestFlattenedMod).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestBenchmarks).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PassthroughSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(OblivionESM).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(OtherPassthroughs).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static TestingSettings Create_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TestingSettings Create_Xml(
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestingSettings Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new TestingSettings() : null;
                    break;
                default:
                    break;
            }
            var ret = new TestingSettings();
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestingSettingsCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TestingSettings Create_Xml(
            string path,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestingSettings Create_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            MissingCreate missing = MissingCreate.New)
        {
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: null);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            LoquiXmlTranslation<TestingSettings>.Instance.CopyIn(
                missing: missing,
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void CopyIn_Xml(
            string path,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node);
        }

        public void CopyIn_Xml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask,
            MissingCreate missing = MissingCreate.New,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            TestingSettingsXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            TestingSettings_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TestingSettingsXmlTranslation.Instance.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        public TestingSettings Copy(
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null)
        {
            return TestingSettings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestingSettings Copy(
            ITestingSettings item,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null)
        {
            TestingSettings ret;
            if (item.GetType().Equals(typeof(TestingSettings)))
            {
                ret = new TestingSettings();
            }
            else
            {
                ret = (TestingSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static TestingSettings Copy_ToLoqui(
            ITestingSettingsGetter item,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null)
        {
            TestingSettings ret;
            if (item.GetType().Equals(typeof(TestingSettings)))
            {
                ret = new TestingSettings() as TestingSettings;
            }
            else
            {
                ret = (TestingSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(ITestingSettingsGetter rhs)
        {
            this.CopyFieldsFrom(
                rhs: (ITestingSettingsGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            TestingSettings_CopyMask copyMask,
            ITestingSettingsGetter def = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TestingSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null,
            bool doMasks = true)
        {
            TestingSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    this.TestGroupMasks = (Boolean)obj;
                    break;
                case TestingSettings_FieldIndex.TestModList:
                    this.TestModList = (Boolean)obj;
                    break;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    this.TestFlattenedMod = (Boolean)obj;
                    break;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    this.TestBenchmarks = (Boolean)obj;
                    break;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    this.PassthroughSettings = (PassthroughSettings)obj;
                    break;
                case TestingSettings_FieldIndex.OblivionESM:
                    this.OblivionESM = (Passthrough)obj;
                    break;
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    this._OtherPassthroughs.SetTo((IEnumerable<Passthrough>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            TestingSettingsCommon.Clear(this);
        }


        public static TestingSettings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestingSettings();
            foreach (var pair in fields)
            {
                CopyInInternal_TestingSettings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestingSettings(TestingSettings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestingSettings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    obj.TestGroupMasks = (Boolean)pair.Value;
                    break;
                case TestingSettings_FieldIndex.TestModList:
                    obj.TestModList = (Boolean)pair.Value;
                    break;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    obj.TestFlattenedMod = (Boolean)pair.Value;
                    break;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    obj.TestBenchmarks = (Boolean)pair.Value;
                    break;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    obj.PassthroughSettings = (PassthroughSettings)pair.Value;
                    break;
                case TestingSettings_FieldIndex.OblivionESM:
                    obj.OblivionESM = (Passthrough)pair.Value;
                    break;
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    obj._OtherPassthroughs.SetTo((IEnumerable<Passthrough>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface ITestingSettings : ITestingSettingsGetter, ILoquiClass<ITestingSettings, ITestingSettingsGetter>, ILoquiClass<TestingSettings, ITestingSettingsGetter>
    {
        new Boolean TestGroupMasks { get; set; }

        new Boolean TestModList { get; set; }

        new Boolean TestFlattenedMod { get; set; }

        new Boolean TestBenchmarks { get; set; }

        new PassthroughSettings PassthroughSettings { get; set; }

        new Passthrough OblivionESM { get; set; }

        new ISourceSetList<Passthrough> OtherPassthroughs { get; }
    }

    public partial interface ITestingSettingsGetter : ILoquiObject
    {
        #region TestGroupMasks
        Boolean TestGroupMasks { get; }

        #endregion
        #region TestModList
        Boolean TestModList { get; }

        #endregion
        #region TestFlattenedMod
        Boolean TestFlattenedMod { get; }

        #endregion
        #region TestBenchmarks
        Boolean TestBenchmarks { get; }

        #endregion
        #region PassthroughSettings
        PassthroughSettings PassthroughSettings { get; }
        #endregion
        #region OblivionESM
        Passthrough OblivionESM { get; }
        #endregion
        #region OtherPassthroughs
        IObservableSetList<Passthrough> OtherPassthroughs { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum TestingSettings_FieldIndex
    {
        TestGroupMasks = 0,
        TestModList = 1,
        TestFlattenedMod = 2,
        TestBenchmarks = 3,
        PassthroughSettings = 4,
        OblivionESM = 5,
        OtherPassthroughs = 6,
    }
    #endregion

    #region Registration
    public class TestingSettings_Registration : ILoquiRegistration
    {
        public static readonly TestingSettings_Registration Instance = new TestingSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "8238bf49-028c-4e0b-b914-3ade480308ec";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(TestingSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestingSettings_ErrorMask);

        public static readonly Type ClassType = typeof(TestingSettings);

        public static readonly Type GetterType = typeof(ITestingSettingsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITestingSettings);

        public static readonly Type InternalSetterType = null;

        public static readonly Type CommonType = typeof(TestingSettingsCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.TestingSettings";

        public const string Name = "TestingSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TESTGROUPMASKS":
                    return (ushort)TestingSettings_FieldIndex.TestGroupMasks;
                case "TESTMODLIST":
                    return (ushort)TestingSettings_FieldIndex.TestModList;
                case "TESTFLATTENEDMOD":
                    return (ushort)TestingSettings_FieldIndex.TestFlattenedMod;
                case "TESTBENCHMARKS":
                    return (ushort)TestingSettings_FieldIndex.TestBenchmarks;
                case "PASSTHROUGHSETTINGS":
                    return (ushort)TestingSettings_FieldIndex.PassthroughSettings;
                case "OBLIVIONESM":
                    return (ushort)TestingSettings_FieldIndex.OblivionESM;
                case "OTHERPASSTHROUGHS":
                    return (ushort)TestingSettings_FieldIndex.OtherPassthroughs;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return true;
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.OblivionESM:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return true;
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return "TestGroupMasks";
                case TestingSettings_FieldIndex.TestModList:
                    return "TestModList";
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return "TestFlattenedMod";
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return "TestBenchmarks";
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return "PassthroughSettings";
                case TestingSettings_FieldIndex.OblivionESM:
                    return "OblivionESM";
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return "OtherPassthroughs";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestModList:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return typeof(PassthroughSettings);
                case TestingSettings_FieldIndex.OblivionESM:
                    return typeof(Passthrough);
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return typeof(SourceSetList<Passthrough>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TestingSettingsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ITestingSettings item,
            ITestingSettingsGetter rhs,
            ITestingSettingsGetter def,
            ErrorMaskBuilder errorMask,
            TestingSettings_CopyMask copyMask)
        {
            if (copyMask?.TestGroupMasks ?? true)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestGroupMasks);
                item.TestGroupMasks = rhs.TestGroupMasks;
                errorMask?.PopIndex();
            }
            if (copyMask?.TestModList ?? true)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestModList);
                item.TestModList = rhs.TestModList;
                errorMask?.PopIndex();
            }
            if (copyMask?.TestFlattenedMod ?? true)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestFlattenedMod);
                item.TestFlattenedMod = rhs.TestFlattenedMod;
                errorMask?.PopIndex();
            }
            if (copyMask?.TestBenchmarks ?? true)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestBenchmarks);
                item.TestBenchmarks = rhs.TestBenchmarks;
                errorMask?.PopIndex();
            }
            if (copyMask?.PassthroughSettings.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.PassthroughSettings);
                try
                {
                    switch (copyMask?.PassthroughSettings?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.PassthroughSettings = rhs.PassthroughSettings;
                            break;
                        case CopyOption.CopyIn:
                            PassthroughSettingsCommon.CopyFieldsFrom(
                                item: item.PassthroughSettings,
                                rhs: rhs.PassthroughSettings,
                                def: def?.PassthroughSettings,
                                errorMask: errorMask,
                                copyMask: copyMask?.PassthroughSettings.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.PassthroughSettings == null)
                            {
                                item.PassthroughSettings = null;
                            }
                            else
                            {
                                item.PassthroughSettings = PassthroughSettings.Copy(
                                    rhs.PassthroughSettings,
                                    copyMask?.PassthroughSettings?.Specific,
                                    def?.PassthroughSettings);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.PassthroughSettings?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OblivionESM.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.OblivionESM);
                try
                {
                    switch (copyMask?.OblivionESM?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.OblivionESM = rhs.OblivionESM;
                            break;
                        case CopyOption.CopyIn:
                            PassthroughCommon.CopyFieldsFrom(
                                item: item.OblivionESM,
                                rhs: rhs.OblivionESM,
                                def: def?.OblivionESM,
                                errorMask: errorMask,
                                copyMask: copyMask?.OblivionESM.Specific);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.OblivionESM == null)
                            {
                                item.OblivionESM = null;
                            }
                            else
                            {
                                item.OblivionESM = Passthrough.Copy(
                                    rhs.OblivionESM,
                                    copyMask?.OblivionESM?.Specific,
                                    def?.OblivionESM);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.OblivionESM?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.OtherPassthroughs.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.OtherPassthroughs);
                try
                {
                    item.OtherPassthroughs.SetToWithDefault(
                        rhs: rhs.OtherPassthroughs,
                        def: def?.OtherPassthroughs,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.OtherPassthroughs.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Passthrough.Copy(
                                        r,
                                        copyMask?.OtherPassthroughs?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.OtherPassthroughs.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear(ITestingSettings item)
        {
            item.TestGroupMasks = default(Boolean);
            item.TestModList = default(Boolean);
            item.TestFlattenedMod = default(Boolean);
            item.TestBenchmarks = default(Boolean);
            item.PassthroughSettings = default(PassthroughSettings);
            item.OblivionESM = default(Passthrough);
            item.OtherPassthroughs.Unset();
        }

        public static TestingSettings_Mask<bool> GetEqualsMask(
            this ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TestingSettings_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            TestingSettings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TestGroupMasks = item.TestGroupMasks == rhs.TestGroupMasks;
            ret.TestModList = item.TestModList == rhs.TestModList;
            ret.TestFlattenedMod = item.TestFlattenedMod == rhs.TestFlattenedMod;
            ret.TestBenchmarks = item.TestBenchmarks == rhs.TestBenchmarks;
            ret.PassthroughSettings = MaskItemExt.Factory(PassthroughSettingsCommon.GetEqualsMask(item.PassthroughSettings, rhs.PassthroughSettings, include), include);
            ret.OblivionESM = MaskItemExt.Factory(PassthroughCommon.GetEqualsMask(item.OblivionESM, rhs.OblivionESM, include), include);
            ret.OtherPassthroughs = item.OtherPassthroughs.CollectionEqualsHelper(
                rhs.OtherPassthroughs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }

        public static string ToString(
            this ITestingSettingsGetter item,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestingSettingsGetter item,
            FileGeneration fg,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestingSettings)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestingSettings)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGroupMasks ?? true)
                {
                    fg.AppendLine($"TestGroupMasks => {item.TestGroupMasks}");
                }
                if (printMask?.TestModList ?? true)
                {
                    fg.AppendLine($"TestModList => {item.TestModList}");
                }
                if (printMask?.TestFlattenedMod ?? true)
                {
                    fg.AppendLine($"TestFlattenedMod => {item.TestFlattenedMod}");
                }
                if (printMask?.TestBenchmarks ?? true)
                {
                    fg.AppendLine($"TestBenchmarks => {item.TestBenchmarks}");
                }
                if (printMask?.PassthroughSettings?.Overall ?? true)
                {
                    item.PassthroughSettings?.ToString(fg, "PassthroughSettings");
                }
                if (printMask?.OblivionESM?.Overall ?? true)
                {
                    item.OblivionESM?.ToString(fg, "OblivionESM");
                }
                if (printMask?.OtherPassthroughs?.Overall ?? true)
                {
                    fg.AppendLine("OtherPassthroughs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.OtherPassthroughs)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITestingSettingsGetter item,
            TestingSettings_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TestingSettings_Mask<bool> GetHasBeenSetMask(ITestingSettingsGetter item)
        {
            var ret = new TestingSettings_Mask<bool>();
            ret.TestGroupMasks = true;
            ret.TestModList = true;
            ret.TestFlattenedMod = true;
            ret.TestBenchmarks = true;
            ret.PassthroughSettings = new MaskItem<bool, PassthroughSettings_Mask<bool>>(true, PassthroughSettingsCommon.GetHasBeenSetMask(item.PassthroughSettings));
            ret.OblivionESM = new MaskItem<bool, Passthrough_Mask<bool>>(true, PassthroughCommon.GetHasBeenSetMask(item.OblivionESM));
            ret.OtherPassthroughs = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Passthrough_Mask<bool>>>>(item.OtherPassthroughs.HasBeenSet, item.OtherPassthroughs.WithIndex().Select((i) => new MaskItemIndexed<bool, Passthrough_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        public static void FillPublic_Xml(
            this TestingSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestingSettingsCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this TestingSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "TestGroupMasks":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestGroupMasks);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestGroupMasksParse,
                                errorMask: errorMask))
                            {
                                item.TestGroupMasks = TestGroupMasksParse;
                            }
                            else
                            {
                                item.TestGroupMasks = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestModList":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestModList) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestModList);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestModListParse,
                                errorMask: errorMask))
                            {
                                item.TestModList = TestModListParse;
                            }
                            else
                            {
                                item.TestModList = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestFlattenedMod":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestFlattenedMod);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestFlattenedModParse,
                                errorMask: errorMask))
                            {
                                item.TestFlattenedMod = TestFlattenedModParse;
                            }
                            else
                            {
                                item.TestFlattenedMod = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestBenchmarks":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestBenchmarks);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestBenchmarksParse,
                                errorMask: errorMask))
                            {
                                item.TestBenchmarks = TestBenchmarksParse;
                            }
                            else
                            {
                                item.TestBenchmarks = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "PassthroughSettings":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.PassthroughSettings);
                            if (LoquiXmlTranslation<PassthroughSettings>.Instance.Parse(
                                node: node,
                                item: out PassthroughSettings PassthroughSettingsParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings)))
                            {
                                item.PassthroughSettings = PassthroughSettingsParse;
                            }
                            else
                            {
                                item.PassthroughSettings = default(PassthroughSettings);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "OblivionESM":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.OblivionESM) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.OblivionESM);
                            if (LoquiXmlTranslation<Passthrough>.Instance.Parse(
                                node: node,
                                item: out Passthrough OblivionESMParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.OblivionESM)))
                            {
                                item.OblivionESM = OblivionESMParse;
                            }
                            else
                            {
                                item.OblivionESM = default(Passthrough);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "OtherPassthroughs":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.OtherPassthroughs) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.OtherPassthroughs);
                            if (ListXmlTranslation<Passthrough>.Instance.Parse(
                                node: node,
                                enumer: out var OtherPassthroughsItem,
                                transl: LoquiXmlTranslation<Passthrough>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.OtherPassthroughs.SetTo(OtherPassthroughsItem);
                            }
                            else
                            {
                                item.OtherPassthroughs.Unset();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Xml Translation
    public partial class TestingSettingsXmlTranslation
    {
        public readonly static TestingSettingsXmlTranslation Instance = new TestingSettingsXmlTranslation();

        public static void WriteToNode_Xml(
            ITestingSettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestGroupMasks),
                    item: item.TestGroupMasks,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestGroupMasks,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestModList) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestModList),
                    item: item.TestModList,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestModList,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestFlattenedMod),
                    item: item.TestFlattenedMod,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestFlattenedMod,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestBenchmarks),
                    item: item.TestBenchmarks,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestBenchmarks,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
            {
                LoquiXmlTranslation<PassthroughSettings>.Instance.Write(
                    node: node,
                    item: item.PassthroughSettings,
                    name: nameof(item.PassthroughSettings),
                    fieldIndex: (int)TestingSettings_FieldIndex.PassthroughSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.OblivionESM) ?? true))
            {
                LoquiXmlTranslation<Passthrough>.Instance.Write(
                    node: node,
                    item: item.OblivionESM,
                    name: nameof(item.OblivionESM),
                    fieldIndex: (int)TestingSettings_FieldIndex.OblivionESM,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.OblivionESM));
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.OtherPassthroughs) ?? true))
            {
                ListXmlTranslation<Passthrough>.Instance.Write(
                    node: node,
                    name: nameof(item.OtherPassthroughs),
                    item: item.OtherPassthroughs,
                    fieldIndex: (int)TestingSettings_FieldIndex.OtherPassthroughs,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.OtherPassthroughs),
                    transl: (XElement subNode, Passthrough subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Passthrough>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        #region Xml Write
        public void Write_Xml(
            XElement node,
            ITestingSettingsGetter item,
            bool doMasks,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void Write_Xml(
            XElement node,
            ITestingSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.TestingSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.TestingSettings");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

    }
    #endregion

    #region Mask
    public class TestingSettings_Mask<T> : IMask<T>, IEquatable<TestingSettings_Mask<T>>
    {
        #region Ctors
        public TestingSettings_Mask()
        {
        }

        public TestingSettings_Mask(T initialValue)
        {
            this.TestGroupMasks = initialValue;
            this.TestModList = initialValue;
            this.TestFlattenedMod = initialValue;
            this.TestBenchmarks = initialValue;
            this.PassthroughSettings = new MaskItem<T, PassthroughSettings_Mask<T>>(initialValue, new PassthroughSettings_Mask<T>(initialValue));
            this.OblivionESM = new MaskItem<T, Passthrough_Mask<T>>(initialValue, new Passthrough_Mask<T>(initialValue));
            this.OtherPassthroughs = new MaskItem<T, IEnumerable<MaskItemIndexed<T, Passthrough_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T TestGroupMasks;
        public T TestModList;
        public T TestFlattenedMod;
        public T TestBenchmarks;
        public MaskItem<T, PassthroughSettings_Mask<T>> PassthroughSettings { get; set; }
        public MaskItem<T, Passthrough_Mask<T>> OblivionESM { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, Passthrough_Mask<T>>>> OtherPassthroughs;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestingSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestingSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TestGroupMasks, rhs.TestGroupMasks)) return false;
            if (!object.Equals(this.TestModList, rhs.TestModList)) return false;
            if (!object.Equals(this.TestFlattenedMod, rhs.TestFlattenedMod)) return false;
            if (!object.Equals(this.TestBenchmarks, rhs.TestBenchmarks)) return false;
            if (!object.Equals(this.PassthroughSettings, rhs.PassthroughSettings)) return false;
            if (!object.Equals(this.OblivionESM, rhs.OblivionESM)) return false;
            if (!object.Equals(this.OtherPassthroughs, rhs.OtherPassthroughs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TestGroupMasks?.GetHashCode());
            ret = ret.CombineHashCode(this.TestModList?.GetHashCode());
            ret = ret.CombineHashCode(this.TestFlattenedMod?.GetHashCode());
            ret = ret.CombineHashCode(this.TestBenchmarks?.GetHashCode());
            ret = ret.CombineHashCode(this.PassthroughSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.OblivionESM?.GetHashCode());
            ret = ret.CombineHashCode(this.OtherPassthroughs?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.TestGroupMasks)) return false;
            if (!eval(this.TestModList)) return false;
            if (!eval(this.TestFlattenedMod)) return false;
            if (!eval(this.TestBenchmarks)) return false;
            if (PassthroughSettings != null)
            {
                if (!eval(this.PassthroughSettings.Overall)) return false;
                if (this.PassthroughSettings.Specific != null && !this.PassthroughSettings.Specific.AllEqual(eval)) return false;
            }
            if (OblivionESM != null)
            {
                if (!eval(this.OblivionESM.Overall)) return false;
                if (this.OblivionESM.Specific != null && !this.OblivionESM.Specific.AllEqual(eval)) return false;
            }
            if (this.OtherPassthroughs != null)
            {
                if (!eval(this.OtherPassthroughs.Overall)) return false;
                if (this.OtherPassthroughs.Specific != null)
                {
                    foreach (var item in this.OtherPassthroughs.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TestingSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestingSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestingSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.TestGroupMasks = eval(this.TestGroupMasks);
            obj.TestModList = eval(this.TestModList);
            obj.TestFlattenedMod = eval(this.TestFlattenedMod);
            obj.TestBenchmarks = eval(this.TestBenchmarks);
            if (this.PassthroughSettings != null)
            {
                obj.PassthroughSettings = new MaskItem<R, PassthroughSettings_Mask<R>>();
                obj.PassthroughSettings.Overall = eval(this.PassthroughSettings.Overall);
                if (this.PassthroughSettings.Specific != null)
                {
                    obj.PassthroughSettings.Specific = this.PassthroughSettings.Specific.Translate(eval);
                }
            }
            if (this.OblivionESM != null)
            {
                obj.OblivionESM = new MaskItem<R, Passthrough_Mask<R>>();
                obj.OblivionESM.Overall = eval(this.OblivionESM.Overall);
                if (this.OblivionESM.Specific != null)
                {
                    obj.OblivionESM.Specific = this.OblivionESM.Specific.Translate(eval);
                }
            }
            if (OtherPassthroughs != null)
            {
                obj.OtherPassthroughs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Passthrough_Mask<R>>>>();
                obj.OtherPassthroughs.Overall = eval(this.OtherPassthroughs.Overall);
                if (OtherPassthroughs.Specific != null)
                {
                    List<MaskItemIndexed<R, Passthrough_Mask<R>>> l = new List<MaskItemIndexed<R, Passthrough_Mask<R>>>();
                    obj.OtherPassthroughs.Specific = l;
                    foreach (var item in OtherPassthroughs.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, Passthrough_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, Passthrough_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.OtherPassthroughs.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestingSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestingSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestingSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGroupMasks ?? true)
                {
                    fg.AppendLine($"TestGroupMasks => {TestGroupMasks}");
                }
                if (printMask?.TestModList ?? true)
                {
                    fg.AppendLine($"TestModList => {TestModList}");
                }
                if (printMask?.TestFlattenedMod ?? true)
                {
                    fg.AppendLine($"TestFlattenedMod => {TestFlattenedMod}");
                }
                if (printMask?.TestBenchmarks ?? true)
                {
                    fg.AppendLine($"TestBenchmarks => {TestBenchmarks}");
                }
                if (printMask?.PassthroughSettings?.Overall ?? true)
                {
                    PassthroughSettings?.ToString(fg);
                }
                if (printMask?.OblivionESM?.Overall ?? true)
                {
                    OblivionESM?.ToString(fg);
                }
                if (printMask?.OtherPassthroughs?.Overall ?? true)
                {
                    fg.AppendLine("OtherPassthroughs =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (OtherPassthroughs.Overall != null)
                        {
                            fg.AppendLine(OtherPassthroughs.Overall.ToString());
                        }
                        if (OtherPassthroughs.Specific != null)
                        {
                            foreach (var subItem in OtherPassthroughs.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestingSettings_ErrorMask : IErrorMask, IErrorMask<TestingSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception TestGroupMasks;
        public Exception TestModList;
        public Exception TestFlattenedMod;
        public Exception TestBenchmarks;
        public MaskItem<Exception, PassthroughSettings_ErrorMask> PassthroughSettings;
        public MaskItem<Exception, Passthrough_ErrorMask> OblivionESM;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>> OtherPassthroughs;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return TestGroupMasks;
                case TestingSettings_FieldIndex.TestModList:
                    return TestModList;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return TestFlattenedMod;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return TestBenchmarks;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return PassthroughSettings;
                case TestingSettings_FieldIndex.OblivionESM:
                    return OblivionESM;
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    return OtherPassthroughs;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    this.TestGroupMasks = ex;
                    break;
                case TestingSettings_FieldIndex.TestModList:
                    this.TestModList = ex;
                    break;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    this.TestFlattenedMod = ex;
                    break;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    this.TestBenchmarks = ex;
                    break;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    this.PassthroughSettings = new MaskItem<Exception, PassthroughSettings_ErrorMask>(ex, null);
                    break;
                case TestingSettings_FieldIndex.OblivionESM:
                    this.OblivionESM = new MaskItem<Exception, Passthrough_ErrorMask>(ex, null);
                    break;
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    this.OtherPassthroughs = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    this.TestGroupMasks = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestModList:
                    this.TestModList = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    this.TestFlattenedMod = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    this.TestBenchmarks = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    this.PassthroughSettings = (MaskItem<Exception, PassthroughSettings_ErrorMask>)obj;
                    break;
                case TestingSettings_FieldIndex.OblivionESM:
                    this.OblivionESM = (MaskItem<Exception, Passthrough_ErrorMask>)obj;
                    break;
                case TestingSettings_FieldIndex.OtherPassthroughs:
                    this.OtherPassthroughs = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (TestGroupMasks != null) return true;
            if (TestModList != null) return true;
            if (TestFlattenedMod != null) return true;
            if (TestBenchmarks != null) return true;
            if (PassthroughSettings != null) return true;
            if (OblivionESM != null) return true;
            if (OtherPassthroughs != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestingSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"TestGroupMasks => {TestGroupMasks}");
            fg.AppendLine($"TestModList => {TestModList}");
            fg.AppendLine($"TestFlattenedMod => {TestFlattenedMod}");
            fg.AppendLine($"TestBenchmarks => {TestBenchmarks}");
            PassthroughSettings?.ToString(fg);
            OblivionESM?.ToString(fg);
            fg.AppendLine("OtherPassthroughs =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (OtherPassthroughs.Overall != null)
                {
                    fg.AppendLine(OtherPassthroughs.Overall.ToString());
                }
                if (OtherPassthroughs.Specific != null)
                {
                    foreach (var subItem in OtherPassthroughs.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TestingSettings_ErrorMask Combine(TestingSettings_ErrorMask rhs)
        {
            var ret = new TestingSettings_ErrorMask();
            ret.TestGroupMasks = this.TestGroupMasks.Combine(rhs.TestGroupMasks);
            ret.TestModList = this.TestModList.Combine(rhs.TestModList);
            ret.TestFlattenedMod = this.TestFlattenedMod.Combine(rhs.TestFlattenedMod);
            ret.TestBenchmarks = this.TestBenchmarks.Combine(rhs.TestBenchmarks);
            ret.PassthroughSettings = new MaskItem<Exception, PassthroughSettings_ErrorMask>(this.PassthroughSettings.Overall.Combine(rhs.PassthroughSettings.Overall), ((IErrorMask<PassthroughSettings_ErrorMask>)this.PassthroughSettings.Specific).Combine(rhs.PassthroughSettings.Specific));
            ret.OblivionESM = new MaskItem<Exception, Passthrough_ErrorMask>(this.OblivionESM.Overall.Combine(rhs.OblivionESM.Overall), ((IErrorMask<Passthrough_ErrorMask>)this.OblivionESM.Specific).Combine(rhs.OblivionESM.Specific));
            ret.OtherPassthroughs = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Passthrough_ErrorMask>>>(this.OtherPassthroughs.Overall.Combine(rhs.OtherPassthroughs.Overall), new List<MaskItem<Exception, Passthrough_ErrorMask>>(this.OtherPassthroughs.Specific.And(rhs.OtherPassthroughs.Specific)));
            return ret;
        }
        public static TestingSettings_ErrorMask Combine(TestingSettings_ErrorMask lhs, TestingSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestingSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestingSettings_ErrorMask();
        }
        #endregion

    }
    public class TestingSettings_CopyMask
    {
        public TestingSettings_CopyMask()
        {
        }

        public TestingSettings_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.TestGroupMasks = defaultOn;
            this.TestModList = defaultOn;
            this.TestFlattenedMod = defaultOn;
            this.TestBenchmarks = defaultOn;
            this.PassthroughSettings = new MaskItem<CopyOption, PassthroughSettings_CopyMask>(deepCopyOption, default);
            this.OblivionESM = new MaskItem<CopyOption, Passthrough_CopyMask>(deepCopyOption, default);
            this.OtherPassthroughs = new MaskItem<CopyOption, Passthrough_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool TestGroupMasks;
        public bool TestModList;
        public bool TestFlattenedMod;
        public bool TestBenchmarks;
        public MaskItem<CopyOption, PassthroughSettings_CopyMask> PassthroughSettings;
        public MaskItem<CopyOption, Passthrough_CopyMask> OblivionESM;
        public MaskItem<CopyOption, Passthrough_CopyMask> OtherPassthroughs;
        #endregion

    }

    public class TestingSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool TestGroupMasks;
        public bool TestModList;
        public bool TestFlattenedMod;
        public bool TestBenchmarks;
        public MaskItem<bool, PassthroughSettings_TranslationMask> PassthroughSettings;
        public MaskItem<bool, Passthrough_TranslationMask> OblivionESM;
        public MaskItem<bool, Passthrough_TranslationMask> OtherPassthroughs;
        #endregion

        #region Ctors
        public TestingSettings_TranslationMask()
        {
        }

        public TestingSettings_TranslationMask(bool defaultOn)
        {
            this.TestGroupMasks = defaultOn;
            this.TestModList = defaultOn;
            this.TestFlattenedMod = defaultOn;
            this.TestBenchmarks = defaultOn;
            this.PassthroughSettings = new MaskItem<bool, PassthroughSettings_TranslationMask>(defaultOn, null);
            this.OblivionESM = new MaskItem<bool, Passthrough_TranslationMask>(defaultOn, null);
            this.OtherPassthroughs = new MaskItem<bool, Passthrough_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((TestGroupMasks, null));
            ret.Add((TestModList, null));
            ret.Add((TestFlattenedMod, null));
            ret.Add((TestBenchmarks, null));
            ret.Add((PassthroughSettings?.Overall ?? true, PassthroughSettings?.Specific?.GetCrystal()));
            ret.Add((OblivionESM?.Overall ?? true, OblivionESM?.Specific?.GetCrystal()));
            ret.Add((OtherPassthroughs?.Overall ?? true, OtherPassthroughs?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
