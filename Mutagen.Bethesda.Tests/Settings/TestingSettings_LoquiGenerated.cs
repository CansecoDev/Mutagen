/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class TestingSettings :
        ITestingSettings,
        ILoquiObjectSetter<TestingSettings>,
        IEquatable<TestingSettings>,
        IEqualsMask
    {
        #region Ctor
        public TestingSettings()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TestGroupMasks
        public Boolean TestGroupMasks { get; set; } = default;
        #endregion
        #region TestFlattenedMod
        public Boolean TestFlattenedMod { get; set; } = default;
        #endregion
        #region TestBenchmarks
        public Boolean TestBenchmarks { get; set; } = default;
        #endregion
        #region TestLocators
        public Boolean TestLocators { get; set; } = default;
        #endregion
        #region TestRecordEnumerables
        public Boolean TestRecordEnumerables { get; set; } = default;
        #endregion
        #region DataFolderLocations
        public DataFolderLocations DataFolderLocations { get; set; } = new DataFolderLocations();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDataFolderLocationsGetter ITestingSettingsGetter.DataFolderLocations => DataFolderLocations;
        #endregion
        #region PassthroughSettings
        public PassthroughSettings PassthroughSettings { get; set; } = new PassthroughSettings();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPassthroughSettingsGetter ITestingSettingsGetter.PassthroughSettings => PassthroughSettings;
        #endregion
        #region TargetGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TargetGroup> _TargetGroups = new ExtendedList<TargetGroup>();
        public ExtendedList<TargetGroup> TargetGroups
        {
            get => this._TargetGroups;
            protected set => this._TargetGroups = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITargetGroupGetter> ITestingSettingsGetter.TargetGroups => _TargetGroups;
        #endregion

        #endregion

        #region To String
        public override string ToString()
        {
            return TestingSettingsMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TestingSettingsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITestingSettingsGetter rhs)) return false;
            return ((TestingSettingsCommon)((ITestingSettingsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(TestingSettings obj)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TestingSettingsCommon)((ITestingSettingsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.TestGroupMasks = initialValue;
                this.TestFlattenedMod = initialValue;
                this.TestBenchmarks = initialValue;
                this.TestLocators = initialValue;
                this.TestRecordEnumerables = initialValue;
                this.DataFolderLocations = new MaskItem<TItem, DataFolderLocations.Mask<TItem>?>(initialValue, new DataFolderLocations.Mask<TItem>(initialValue));
                this.PassthroughSettings = new MaskItem<TItem, PassthroughSettings.Mask<TItem>?>(initialValue, new PassthroughSettings.Mask<TItem>(initialValue));
                this.TargetGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TargetGroup.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TargetGroup.Mask<TItem>?>>());
            }

            public Mask(
                TItem TestGroupMasks,
                TItem TestFlattenedMod,
                TItem TestBenchmarks,
                TItem TestLocators,
                TItem TestRecordEnumerables,
                TItem DataFolderLocations,
                TItem PassthroughSettings,
                TItem TargetGroups)
            {
                this.TestGroupMasks = TestGroupMasks;
                this.TestFlattenedMod = TestFlattenedMod;
                this.TestBenchmarks = TestBenchmarks;
                this.TestLocators = TestLocators;
                this.TestRecordEnumerables = TestRecordEnumerables;
                this.DataFolderLocations = new MaskItem<TItem, DataFolderLocations.Mask<TItem>?>(DataFolderLocations, new DataFolderLocations.Mask<TItem>(DataFolderLocations));
                this.PassthroughSettings = new MaskItem<TItem, PassthroughSettings.Mask<TItem>?>(PassthroughSettings, new PassthroughSettings.Mask<TItem>(PassthroughSettings));
                this.TargetGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TargetGroup.Mask<TItem>?>>?>(TargetGroups, Enumerable.Empty<MaskItemIndexed<TItem, TargetGroup.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TestGroupMasks;
            public TItem TestFlattenedMod;
            public TItem TestBenchmarks;
            public TItem TestLocators;
            public TItem TestRecordEnumerables;
            public MaskItem<TItem, DataFolderLocations.Mask<TItem>?>? DataFolderLocations { get; set; }
            public MaskItem<TItem, PassthroughSettings.Mask<TItem>?>? PassthroughSettings { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TargetGroup.Mask<TItem>?>>?>? TargetGroups;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.TestGroupMasks, rhs.TestGroupMasks)) return false;
                if (!object.Equals(this.TestFlattenedMod, rhs.TestFlattenedMod)) return false;
                if (!object.Equals(this.TestBenchmarks, rhs.TestBenchmarks)) return false;
                if (!object.Equals(this.TestLocators, rhs.TestLocators)) return false;
                if (!object.Equals(this.TestRecordEnumerables, rhs.TestRecordEnumerables)) return false;
                if (!object.Equals(this.DataFolderLocations, rhs.DataFolderLocations)) return false;
                if (!object.Equals(this.PassthroughSettings, rhs.PassthroughSettings)) return false;
                if (!object.Equals(this.TargetGroups, rhs.TargetGroups)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.TestGroupMasks?.GetHashCode());
                ret = ret.CombineHashCode(this.TestFlattenedMod?.GetHashCode());
                ret = ret.CombineHashCode(this.TestBenchmarks?.GetHashCode());
                ret = ret.CombineHashCode(this.TestLocators?.GetHashCode());
                ret = ret.CombineHashCode(this.TestRecordEnumerables?.GetHashCode());
                ret = ret.CombineHashCode(this.DataFolderLocations?.GetHashCode());
                ret = ret.CombineHashCode(this.PassthroughSettings?.GetHashCode());
                ret = ret.CombineHashCode(this.TargetGroups?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.TestGroupMasks)) return false;
                if (!eval(this.TestFlattenedMod)) return false;
                if (!eval(this.TestBenchmarks)) return false;
                if (!eval(this.TestLocators)) return false;
                if (!eval(this.TestRecordEnumerables)) return false;
                if (DataFolderLocations != null)
                {
                    if (!eval(this.DataFolderLocations.Overall)) return false;
                    if (this.DataFolderLocations.Specific != null && !this.DataFolderLocations.Specific.All(eval)) return false;
                }
                if (PassthroughSettings != null)
                {
                    if (!eval(this.PassthroughSettings.Overall)) return false;
                    if (this.PassthroughSettings.Specific != null && !this.PassthroughSettings.Specific.All(eval)) return false;
                }
                if (this.TargetGroups != null)
                {
                    if (!eval(this.TargetGroups.Overall)) return false;
                    if (this.TargetGroups.Specific != null)
                    {
                        foreach (var item in this.TargetGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.TestGroupMasks)) return true;
                if (eval(this.TestFlattenedMod)) return true;
                if (eval(this.TestBenchmarks)) return true;
                if (eval(this.TestLocators)) return true;
                if (eval(this.TestRecordEnumerables)) return true;
                if (DataFolderLocations != null)
                {
                    if (eval(this.DataFolderLocations.Overall)) return true;
                    if (this.DataFolderLocations.Specific != null && this.DataFolderLocations.Specific.Any(eval)) return true;
                }
                if (PassthroughSettings != null)
                {
                    if (eval(this.PassthroughSettings.Overall)) return true;
                    if (this.PassthroughSettings.Specific != null && this.PassthroughSettings.Specific.Any(eval)) return true;
                }
                if (this.TargetGroups != null)
                {
                    if (eval(this.TargetGroups.Overall)) return true;
                    if (this.TargetGroups.Specific != null)
                    {
                        foreach (var item in this.TargetGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TestingSettings.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.TestGroupMasks = eval(this.TestGroupMasks);
                obj.TestFlattenedMod = eval(this.TestFlattenedMod);
                obj.TestBenchmarks = eval(this.TestBenchmarks);
                obj.TestLocators = eval(this.TestLocators);
                obj.TestRecordEnumerables = eval(this.TestRecordEnumerables);
                obj.DataFolderLocations = this.DataFolderLocations == null ? null : new MaskItem<R, DataFolderLocations.Mask<R>?>(eval(this.DataFolderLocations.Overall), this.DataFolderLocations.Specific?.Translate(eval));
                obj.PassthroughSettings = this.PassthroughSettings == null ? null : new MaskItem<R, PassthroughSettings.Mask<R>?>(eval(this.PassthroughSettings.Overall), this.PassthroughSettings.Specific?.Translate(eval));
                if (TargetGroups != null)
                {
                    obj.TargetGroups = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TargetGroup.Mask<R>?>>?>(eval(this.TargetGroups.Overall), Enumerable.Empty<MaskItemIndexed<R, TargetGroup.Mask<R>?>>());
                    if (TargetGroups.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TargetGroup.Mask<R>?>>();
                        obj.TargetGroups.Specific = l;
                        foreach (var item in TargetGroups.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, TargetGroup.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, TargetGroup.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(TestingSettings.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, TestingSettings.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(TestingSettings.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.TestGroupMasks ?? true)
                    {
                        fg.AppendItem(TestGroupMasks, "TestGroupMasks");
                    }
                    if (printMask?.TestFlattenedMod ?? true)
                    {
                        fg.AppendItem(TestFlattenedMod, "TestFlattenedMod");
                    }
                    if (printMask?.TestBenchmarks ?? true)
                    {
                        fg.AppendItem(TestBenchmarks, "TestBenchmarks");
                    }
                    if (printMask?.TestLocators ?? true)
                    {
                        fg.AppendItem(TestLocators, "TestLocators");
                    }
                    if (printMask?.TestRecordEnumerables ?? true)
                    {
                        fg.AppendItem(TestRecordEnumerables, "TestRecordEnumerables");
                    }
                    if (printMask?.DataFolderLocations?.Overall ?? true)
                    {
                        DataFolderLocations?.ToString(fg);
                    }
                    if (printMask?.PassthroughSettings?.Overall ?? true)
                    {
                        PassthroughSettings?.ToString(fg);
                    }
                    if ((printMask?.TargetGroups?.Overall ?? true)
                        && TargetGroups.TryGet(out var TargetGroupsItem))
                    {
                        fg.AppendLine("TargetGroups =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TargetGroupsItem.Overall);
                            if (TargetGroupsItem.Specific != null)
                            {
                                foreach (var subItem in TargetGroupsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? TestGroupMasks;
            public Exception? TestFlattenedMod;
            public Exception? TestBenchmarks;
            public Exception? TestLocators;
            public Exception? TestRecordEnumerables;
            public MaskItem<Exception?, DataFolderLocations.ErrorMask?>? DataFolderLocations;
            public MaskItem<Exception?, PassthroughSettings.ErrorMask?>? PassthroughSettings;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TargetGroup.ErrorMask?>>?>? TargetGroups;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
                switch (enu)
                {
                    case TestingSettings_FieldIndex.TestGroupMasks:
                        return TestGroupMasks;
                    case TestingSettings_FieldIndex.TestFlattenedMod:
                        return TestFlattenedMod;
                    case TestingSettings_FieldIndex.TestBenchmarks:
                        return TestBenchmarks;
                    case TestingSettings_FieldIndex.TestLocators:
                        return TestLocators;
                    case TestingSettings_FieldIndex.TestRecordEnumerables:
                        return TestRecordEnumerables;
                    case TestingSettings_FieldIndex.DataFolderLocations:
                        return DataFolderLocations;
                    case TestingSettings_FieldIndex.PassthroughSettings:
                        return PassthroughSettings;
                    case TestingSettings_FieldIndex.TargetGroups:
                        return TargetGroups;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
                switch (enu)
                {
                    case TestingSettings_FieldIndex.TestGroupMasks:
                        this.TestGroupMasks = ex;
                        break;
                    case TestingSettings_FieldIndex.TestFlattenedMod:
                        this.TestFlattenedMod = ex;
                        break;
                    case TestingSettings_FieldIndex.TestBenchmarks:
                        this.TestBenchmarks = ex;
                        break;
                    case TestingSettings_FieldIndex.TestLocators:
                        this.TestLocators = ex;
                        break;
                    case TestingSettings_FieldIndex.TestRecordEnumerables:
                        this.TestRecordEnumerables = ex;
                        break;
                    case TestingSettings_FieldIndex.DataFolderLocations:
                        this.DataFolderLocations = new MaskItem<Exception?, DataFolderLocations.ErrorMask?>(ex, null);
                        break;
                    case TestingSettings_FieldIndex.PassthroughSettings:
                        this.PassthroughSettings = new MaskItem<Exception?, PassthroughSettings.ErrorMask?>(ex, null);
                        break;
                    case TestingSettings_FieldIndex.TargetGroups:
                        this.TargetGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TargetGroup.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
                switch (enu)
                {
                    case TestingSettings_FieldIndex.TestGroupMasks:
                        this.TestGroupMasks = (Exception?)obj;
                        break;
                    case TestingSettings_FieldIndex.TestFlattenedMod:
                        this.TestFlattenedMod = (Exception?)obj;
                        break;
                    case TestingSettings_FieldIndex.TestBenchmarks:
                        this.TestBenchmarks = (Exception?)obj;
                        break;
                    case TestingSettings_FieldIndex.TestLocators:
                        this.TestLocators = (Exception?)obj;
                        break;
                    case TestingSettings_FieldIndex.TestRecordEnumerables:
                        this.TestRecordEnumerables = (Exception?)obj;
                        break;
                    case TestingSettings_FieldIndex.DataFolderLocations:
                        this.DataFolderLocations = (MaskItem<Exception?, DataFolderLocations.ErrorMask?>?)obj;
                        break;
                    case TestingSettings_FieldIndex.PassthroughSettings:
                        this.PassthroughSettings = (MaskItem<Exception?, PassthroughSettings.ErrorMask?>?)obj;
                        break;
                    case TestingSettings_FieldIndex.TargetGroups:
                        this.TargetGroups = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TargetGroup.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (TestGroupMasks != null) return true;
                if (TestFlattenedMod != null) return true;
                if (TestBenchmarks != null) return true;
                if (TestLocators != null) return true;
                if (TestRecordEnumerables != null) return true;
                if (DataFolderLocations != null) return true;
                if (PassthroughSettings != null) return true;
                if (TargetGroups != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(TestGroupMasks, "TestGroupMasks");
                fg.AppendItem(TestFlattenedMod, "TestFlattenedMod");
                fg.AppendItem(TestBenchmarks, "TestBenchmarks");
                fg.AppendItem(TestLocators, "TestLocators");
                fg.AppendItem(TestRecordEnumerables, "TestRecordEnumerables");
                DataFolderLocations?.ToString(fg);
                PassthroughSettings?.ToString(fg);
                if (TargetGroups.TryGet(out var TargetGroupsItem))
                {
                    fg.AppendLine("TargetGroups =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TargetGroupsItem.Overall);
                        if (TargetGroupsItem.Specific != null)
                        {
                            foreach (var subItem in TargetGroupsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TestGroupMasks = this.TestGroupMasks.Combine(rhs.TestGroupMasks);
                ret.TestFlattenedMod = this.TestFlattenedMod.Combine(rhs.TestFlattenedMod);
                ret.TestBenchmarks = this.TestBenchmarks.Combine(rhs.TestBenchmarks);
                ret.TestLocators = this.TestLocators.Combine(rhs.TestLocators);
                ret.TestRecordEnumerables = this.TestRecordEnumerables.Combine(rhs.TestRecordEnumerables);
                ret.DataFolderLocations = this.DataFolderLocations.Combine(rhs.DataFolderLocations, (l, r) => l.Combine(r));
                ret.PassthroughSettings = this.PassthroughSettings.Combine(rhs.PassthroughSettings, (l, r) => l.Combine(r));
                ret.TargetGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TargetGroup.ErrorMask?>>?>(ExceptionExt.Combine(this.TargetGroups?.Overall, rhs.TargetGroups?.Overall), ExceptionExt.Combine(this.TargetGroups?.Specific, rhs.TargetGroups?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool TestGroupMasks;
            public bool TestFlattenedMod;
            public bool TestBenchmarks;
            public bool TestLocators;
            public bool TestRecordEnumerables;
            public MaskItem<bool, DataFolderLocations.TranslationMask?> DataFolderLocations;
            public MaskItem<bool, PassthroughSettings.TranslationMask?> PassthroughSettings;
            public MaskItem<bool, TargetGroup.TranslationMask?> TargetGroups;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.TestGroupMasks = defaultOn;
                this.TestFlattenedMod = defaultOn;
                this.TestBenchmarks = defaultOn;
                this.TestLocators = defaultOn;
                this.TestRecordEnumerables = defaultOn;
                this.DataFolderLocations = new MaskItem<bool, DataFolderLocations.TranslationMask?>(defaultOn, null);
                this.PassthroughSettings = new MaskItem<bool, PassthroughSettings.TranslationMask?>(defaultOn, null);
                this.TargetGroups = new MaskItem<bool, TargetGroup.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((TestGroupMasks, null));
                ret.Add((TestFlattenedMod, null));
                ret.Add((TestBenchmarks, null));
                ret.Add((TestLocators, null));
                ret.Add((TestRecordEnumerables, null));
                ret.Add((DataFolderLocations?.Overall ?? true, DataFolderLocations?.Specific?.GetCrystal()));
                ret.Add((PassthroughSettings?.Overall ?? true, PassthroughSettings?.Specific?.GetCrystal()));
                ret.Add((TargetGroups?.Overall ?? true, TargetGroups?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => TestingSettingsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TestingSettingsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TestingSettings CreateFromXml(
            XElement node,
            TestingSettings.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TestingSettings CreateFromXml(
            XElement node,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestingSettings CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new TestingSettings();
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TestingSettings CreateFromXml(
            string path,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            string path,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestingSettings CreateFromXml(
            Stream stream,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            Stream stream,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITestingSettingsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TestingSettings GetNew()
        {
            return new TestingSettings();
        }

    }
    #endregion

    #region Interface
    public partial interface ITestingSettings :
        ITestingSettingsGetter,
        ILoquiObjectSetter<ITestingSettings>
    {
        new Boolean TestGroupMasks { get; set; }
        new Boolean TestFlattenedMod { get; set; }
        new Boolean TestBenchmarks { get; set; }
        new Boolean TestLocators { get; set; }
        new Boolean TestRecordEnumerables { get; set; }
        new DataFolderLocations DataFolderLocations { get; set; }
        new PassthroughSettings PassthroughSettings { get; set; }
        new ExtendedList<TargetGroup> TargetGroups { get; }
    }

    public partial interface ITestingSettingsGetter :
        ILoquiObject,
        ILoquiObject<ITestingSettingsGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Boolean TestGroupMasks { get; }
        Boolean TestFlattenedMod { get; }
        Boolean TestBenchmarks { get; }
        Boolean TestLocators { get; }
        Boolean TestRecordEnumerables { get; }
        IDataFolderLocationsGetter DataFolderLocations { get; }
        IPassthroughSettingsGetter PassthroughSettings { get; }
        IReadOnlyList<ITargetGroupGetter> TargetGroups { get; }

    }

    #endregion

    #region Common MixIn
    public static class TestingSettingsMixIn
    {
        public static void Clear(this ITestingSettings item)
        {
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TestingSettings.Mask<bool> GetEqualsMask(
            this ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITestingSettingsGetter item,
            string? name = null,
            TestingSettings.Mask<bool>? printMask = null)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITestingSettingsGetter item,
            FileGeneration fg,
            string? name = null,
            TestingSettings.Mask<bool>? printMask = null)
        {
            ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITestingSettingsGetter item,
            TestingSettings.Mask<bool?> checkMask)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TestingSettings.Mask<bool> GetHasBeenSetMask(this ITestingSettingsGetter item)
        {
            var ret = new TestingSettings.Mask<bool>(false);
            ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITestingSettingsGetter item,
            ITestingSettingsGetter rhs)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs,
            TestingSettings.TranslationMask? copyMask = null)
        {
            ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TestingSettings.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TestingSettings DeepCopy(
            this ITestingSettingsGetter item,
            TestingSettings.TranslationMask? copyMask = null)
        {
            return ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TestingSettings DeepCopy(
            this ITestingSettingsGetter item,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? copyMask = null)
        {
            return ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TestingSettings DeepCopy(
            this ITestingSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITestingSettings item,
            XElement node,
            TestingSettings.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITestingSettings item,
            XElement node,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            string path,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            string path,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            string path,
            ErrorMaskBuilder? errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            Stream stream,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            Stream stream,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TestingSettings.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum TestingSettings_FieldIndex
    {
        TestGroupMasks = 0,
        TestFlattenedMod = 1,
        TestBenchmarks = 2,
        TestLocators = 3,
        TestRecordEnumerables = 4,
        DataFolderLocations = 5,
        PassthroughSettings = 6,
        TargetGroups = 7,
    }
    #endregion

    #region Registration
    public partial class TestingSettings_Registration : ILoquiRegistration
    {
        public static readonly TestingSettings_Registration Instance = new TestingSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "8238bf49-028c-4e0b-b914-3ade480308ec";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(TestingSettings.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestingSettings.ErrorMask);

        public static readonly Type ClassType = typeof(TestingSettings);

        public static readonly Type GetterType = typeof(ITestingSettingsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITestingSettings);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.TestingSettings";

        public const string Name = "TestingSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TESTGROUPMASKS":
                    return (ushort)TestingSettings_FieldIndex.TestGroupMasks;
                case "TESTFLATTENEDMOD":
                    return (ushort)TestingSettings_FieldIndex.TestFlattenedMod;
                case "TESTBENCHMARKS":
                    return (ushort)TestingSettings_FieldIndex.TestBenchmarks;
                case "TESTLOCATORS":
                    return (ushort)TestingSettings_FieldIndex.TestLocators;
                case "TESTRECORDENUMERABLES":
                    return (ushort)TestingSettings_FieldIndex.TestRecordEnumerables;
                case "DATAFOLDERLOCATIONS":
                    return (ushort)TestingSettings_FieldIndex.DataFolderLocations;
                case "PASSTHROUGHSETTINGS":
                    return (ushort)TestingSettings_FieldIndex.PassthroughSettings;
                case "TARGETGROUPS":
                    return (ushort)TestingSettings_FieldIndex.TargetGroups;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TargetGroups:
                    return true;
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return true;
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return "TestGroupMasks";
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return "TestFlattenedMod";
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return "TestBenchmarks";
                case TestingSettings_FieldIndex.TestLocators:
                    return "TestLocators";
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                    return "TestRecordEnumerables";
                case TestingSettings_FieldIndex.DataFolderLocations:
                    return "DataFolderLocations";
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return "PassthroughSettings";
                case TestingSettings_FieldIndex.TargetGroups:
                    return "TargetGroups";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestLocators:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestRecordEnumerables:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.DataFolderLocations:
                    return typeof(DataFolderLocations);
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return typeof(PassthroughSettings);
                case TestingSettings_FieldIndex.TargetGroups:
                    return typeof(ExtendedList<TargetGroup>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TestingSettingsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TestingSettingsSetterCommon
    {
        public static readonly TestingSettingsSetterCommon Instance = new TestingSettingsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITestingSettings item)
        {
            ClearPartial();
            item.TestGroupMasks = default;
            item.TestFlattenedMod = default;
            item.TestBenchmarks = default;
            item.TestLocators = default;
            item.TestRecordEnumerables = default;
            item.DataFolderLocations.Clear();
            item.PassthroughSettings.Clear();
            item.TargetGroups.Clear();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ITestingSettings item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestingSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class TestingSettingsCommon
    {
        public static readonly TestingSettingsCommon Instance = new TestingSettingsCommon();

        public TestingSettings.Mask<bool> GetEqualsMask(
            ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TestingSettings.Mask<bool>(false);
            ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            TestingSettings.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TestGroupMasks = item.TestGroupMasks == rhs.TestGroupMasks;
            ret.TestFlattenedMod = item.TestFlattenedMod == rhs.TestFlattenedMod;
            ret.TestBenchmarks = item.TestBenchmarks == rhs.TestBenchmarks;
            ret.TestLocators = item.TestLocators == rhs.TestLocators;
            ret.TestRecordEnumerables = item.TestRecordEnumerables == rhs.TestRecordEnumerables;
            ret.DataFolderLocations = MaskItemExt.Factory(item.DataFolderLocations.GetEqualsMask(rhs.DataFolderLocations, include), include);
            ret.PassthroughSettings = MaskItemExt.Factory(item.PassthroughSettings.GetEqualsMask(rhs.PassthroughSettings, include), include);
            ret.TargetGroups = item.TargetGroups.CollectionEqualsHelper(
                rhs.TargetGroups,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ITestingSettingsGetter item,
            string? name = null,
            TestingSettings.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITestingSettingsGetter item,
            FileGeneration fg,
            string? name = null,
            TestingSettings.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TestingSettings =>");
            }
            else
            {
                fg.AppendLine($"{name} (TestingSettings) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITestingSettingsGetter item,
            FileGeneration fg,
            TestingSettings.Mask<bool>? printMask = null)
        {
            if (printMask?.TestGroupMasks ?? true)
            {
                fg.AppendItem(item.TestGroupMasks, "TestGroupMasks");
            }
            if (printMask?.TestFlattenedMod ?? true)
            {
                fg.AppendItem(item.TestFlattenedMod, "TestFlattenedMod");
            }
            if (printMask?.TestBenchmarks ?? true)
            {
                fg.AppendItem(item.TestBenchmarks, "TestBenchmarks");
            }
            if (printMask?.TestLocators ?? true)
            {
                fg.AppendItem(item.TestLocators, "TestLocators");
            }
            if (printMask?.TestRecordEnumerables ?? true)
            {
                fg.AppendItem(item.TestRecordEnumerables, "TestRecordEnumerables");
            }
            if (printMask?.DataFolderLocations?.Overall ?? true)
            {
                item.DataFolderLocations?.ToString(fg, "DataFolderLocations");
            }
            if (printMask?.PassthroughSettings?.Overall ?? true)
            {
                item.PassthroughSettings?.ToString(fg, "PassthroughSettings");
            }
            if (printMask?.TargetGroups?.Overall ?? true)
            {
                fg.AppendLine("TargetGroups =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.TargetGroups)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ITestingSettingsGetter item,
            TestingSettings.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITestingSettingsGetter item,
            TestingSettings.Mask<bool> mask)
        {
            mask.TestGroupMasks = true;
            mask.TestFlattenedMod = true;
            mask.TestBenchmarks = true;
            mask.TestLocators = true;
            mask.TestRecordEnumerables = true;
            mask.DataFolderLocations = new MaskItem<bool, DataFolderLocations.Mask<bool>?>(true, item.DataFolderLocations?.GetHasBeenSetMask());
            mask.PassthroughSettings = new MaskItem<bool, PassthroughSettings.Mask<bool>?>(true, item.PassthroughSettings?.GetHasBeenSetMask());
            var TargetGroupsItem = item.TargetGroups;
            mask.TargetGroups = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, TargetGroup.Mask<bool>?>>?>(true, TargetGroupsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, TargetGroup.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITestingSettingsGetter? lhs,
            ITestingSettingsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.TestGroupMasks != rhs.TestGroupMasks) return false;
            if (lhs.TestFlattenedMod != rhs.TestFlattenedMod) return false;
            if (lhs.TestBenchmarks != rhs.TestBenchmarks) return false;
            if (lhs.TestLocators != rhs.TestLocators) return false;
            if (lhs.TestRecordEnumerables != rhs.TestRecordEnumerables) return false;
            if (!object.Equals(lhs.DataFolderLocations, rhs.DataFolderLocations)) return false;
            if (!object.Equals(lhs.PassthroughSettings, rhs.PassthroughSettings)) return false;
            if (!lhs.TargetGroups.SequenceEqual(rhs.TargetGroups)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITestingSettingsGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.TestGroupMasks).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestFlattenedMod).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestBenchmarks).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestLocators).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestRecordEnumerables).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DataFolderLocations).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PassthroughSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TargetGroups).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TestingSettings.GetNew();
        }
        
    }
    public partial class TestingSettingsSetterTranslationCommon
    {
        public static readonly TestingSettingsSetterTranslationCommon Instance = new TestingSettingsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITestingSettings item,
            ITestingSettingsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
            {
                item.TestGroupMasks = rhs.TestGroupMasks;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
            {
                item.TestFlattenedMod = rhs.TestFlattenedMod;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
            {
                item.TestBenchmarks = rhs.TestBenchmarks;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestLocators) ?? true))
            {
                item.TestLocators = rhs.TestLocators;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestRecordEnumerables) ?? true))
            {
                item.TestRecordEnumerables = rhs.TestRecordEnumerables;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.DataFolderLocations);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
                    {
                        item.DataFolderLocations = rhs.DataFolderLocations.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TestingSettings_FieldIndex.DataFolderLocations),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.PassthroughSettings);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
                    {
                        item.PassthroughSettings = rhs.PassthroughSettings.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TargetGroups) ?? true))
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.TargetGroups);
                try
                {
                    item.TargetGroups.SetTo(
                        rhs.TargetGroups
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public TestingSettings DeepCopy(
            ITestingSettingsGetter item,
            TestingSettings.TranslationMask? copyMask = null)
        {
            TestingSettings ret = (TestingSettings)((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TestingSettings DeepCopy(
            ITestingSettingsGetter item,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? copyMask = null)
        {
            TestingSettings ret = (TestingSettings)((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TestingSettings DeepCopy(
            ITestingSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TestingSettings ret = (TestingSettings)((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class TestingSettings
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestingSettings_Registration.Instance;
        public static TestingSettings_Registration Registration => TestingSettings_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TestingSettingsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TestingSettingsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TestingSettingsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITestingSettingsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITestingSettingsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITestingSettingsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class TestingSettingsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TestingSettingsXmlWriteTranslation Instance = new TestingSettingsXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITestingSettingsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestGroupMasks),
                    item: item.TestGroupMasks,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestGroupMasks,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestFlattenedMod),
                    item: item.TestFlattenedMod,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestFlattenedMod,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestBenchmarks),
                    item: item.TestBenchmarks,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestBenchmarks,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestLocators) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestLocators),
                    item: item.TestLocators,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestLocators,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestRecordEnumerables) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestRecordEnumerables),
                    item: item.TestRecordEnumerables,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestRecordEnumerables,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
            {
                var DataFolderLocationsItem = item.DataFolderLocations;
                ((DataFolderLocationsXmlWriteTranslation)((IXmlItem)DataFolderLocationsItem).XmlWriteTranslator).Write(
                    item: DataFolderLocationsItem,
                    node: node,
                    name: nameof(item.DataFolderLocations),
                    fieldIndex: (int)TestingSettings_FieldIndex.DataFolderLocations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.DataFolderLocations));
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
            {
                var PassthroughSettingsItem = item.PassthroughSettings;
                ((PassthroughSettingsXmlWriteTranslation)((IXmlItem)PassthroughSettingsItem).XmlWriteTranslator).Write(
                    item: PassthroughSettingsItem,
                    node: node,
                    name: nameof(item.PassthroughSettings),
                    fieldIndex: (int)TestingSettings_FieldIndex.PassthroughSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TargetGroups) ?? true))
            {
                ListXmlTranslation<ITargetGroupGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.TargetGroups),
                    item: item.TargetGroups,
                    fieldIndex: (int)TestingSettings_FieldIndex.TargetGroups,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.TargetGroups),
                    transl: (XElement subNode, ITargetGroupGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((TargetGroupXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ITestingSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.TestingSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.TestingSettings");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITestingSettingsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITestingSettingsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ITestingSettingsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TestingSettingsXmlCreateTranslation
    {
        public readonly static TestingSettingsXmlCreateTranslation Instance = new TestingSettingsXmlCreateTranslation();

        public static void FillPublicXml(
            ITestingSettings item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestingSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITestingSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "TestGroupMasks":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestGroupMasks);
                        try
                        {
                            item.TestGroupMasks = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestFlattenedMod":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestFlattenedMod);
                        try
                        {
                            item.TestFlattenedMod = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestBenchmarks":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestBenchmarks);
                        try
                        {
                            item.TestBenchmarks = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestLocators":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestLocators) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestLocators);
                        try
                        {
                            item.TestLocators = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestRecordEnumerables":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestRecordEnumerables) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestRecordEnumerables);
                        try
                        {
                            item.TestRecordEnumerables = BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask);
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "DataFolderLocations":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.DataFolderLocations);
                        try
                        {
                            item.DataFolderLocations = LoquiXmlTranslation<DataFolderLocations>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.DataFolderLocations));
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "PassthroughSettings":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.PassthroughSettings);
                        try
                        {
                            item.PassthroughSettings = LoquiXmlTranslation<PassthroughSettings>.Instance.Parse(
                                node: node,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings));
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TargetGroups":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TargetGroups) ?? true))
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.TargetGroups);
                        try
                        {
                            if (ListXmlTranslation<TargetGroup>.Instance.Parse(
                                node: node,
                                enumer: out var TargetGroupsItem,
                                transl: LoquiXmlTranslation<TargetGroup>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.TargetGroups.SetTo(TargetGroupsItem);
                            }
                            else
                            {
                                item.TargetGroups.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class TestingSettingsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITestingSettingsGetter item,
            XElement node,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            string path,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            Stream stream,
            out TestingSettings.ErrorMask errorMask,
            TestingSettings.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            XElement node,
            string? name = null,
            TestingSettings.TranslationMask? translationMask = null)
        {
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#endregion

