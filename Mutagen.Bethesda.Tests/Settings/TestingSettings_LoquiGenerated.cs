/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class TestingSettings : 
        ITestingSettings,
        ILoquiObject<TestingSettings>,
        ILoquiObjectSetter,
        IEquatable<TestingSettings>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestingSettings_Registration.Instance;
        public static TestingSettings_Registration Registration => TestingSettings_Registration.Instance;

        #region Ctor
        public TestingSettings()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region OblivionESM
        private String _OblivionESM;
        public String OblivionESM { get => _OblivionESM; set => _OblivionESM = value; }
        #endregion
        #region KnightsESP
        private String _KnightsESP;
        public String KnightsESP { get => _KnightsESP; set => _KnightsESP = value; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestingSettingsCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestingSettingsCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TestingSettingsCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestingSettingsCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<TestingSettings>.GetEqualsMask(TestingSettings rhs) => TestingSettingsCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ITestingSettingsGetter>.GetEqualsMask(ITestingSettingsGetter rhs) => TestingSettingsCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return TestingSettingsCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            return TestingSettingsCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestingSettingsCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public TestingSettings_Mask<bool> GetHasBeenSetMask()
        {
            return TestingSettingsCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestingSettings rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestingSettings rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.OblivionESM, rhs.OblivionESM)) return false;
            if (!object.Equals(this.KnightsESP, rhs.KnightsESP)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(OblivionESM).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(KnightsESP).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static TestingSettings Create_Xml(
            XElement root,
            TestingSettings_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TestingSettings Create_Xml(
            XElement root,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestingSettings Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new TestingSettings();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TestingSettings Create_Xml(
            string path,
            TestingSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            Stream stream,
            TestingSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static TestingSettings Create_Xml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<TestingSettings>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            TestingSettings_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TestingSettingsCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            TestingSettings item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "OblivionESM":
                    try
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.OblivionESM);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String OblivionESMParse,
                            errorMask: errorMask))
                        {
                            item.OblivionESM = OblivionESMParse;
                        }
                        else
                        {
                            item.OblivionESM = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "KnightsESP":
                    try
                    {
                        errorMask?.PushIndex((int)TestingSettings_FieldIndex.KnightsESP);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String KnightsESPParse,
                            errorMask: errorMask))
                        {
                            item.KnightsESP = KnightsESPParse;
                        }
                        else
                        {
                            item.KnightsESP = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public TestingSettings Copy(
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null)
        {
            return TestingSettings.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestingSettings Copy(
            ITestingSettings item,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null)
        {
            TestingSettings ret;
            if (item.GetType().Equals(typeof(TestingSettings)))
            {
                ret = new TestingSettings();
            }
            else
            {
                ret = (TestingSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static TestingSettings Copy_ToLoqui(
            ITestingSettingsGetter item,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null)
        {
            TestingSettings ret;
            if (item.GetType().Equals(typeof(TestingSettings)))
            {
                ret = new TestingSettings() as TestingSettings;
            }
            else
            {
                ret = (TestingSettings)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            TestingSettings_CopyMask copyMask,
            ITestingSettingsGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TestingSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ITestingSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            TestingSettings_CopyMask copyMask = null,
            ITestingSettingsGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            TestingSettingsCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    this._OblivionESM = (String)obj;
                    break;
                case TestingSettings_FieldIndex.KnightsESP:
                    this._KnightsESP = (String)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestingSettingsCommon.Clear(this, cmds);
        }


        public static TestingSettings Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestingSettings();
            foreach (var pair in fields)
            {
                CopyInInternal_TestingSettings(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestingSettings(TestingSettings obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestingSettings_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    obj._OblivionESM = (String)pair.Value;
                    break;
                case TestingSettings_FieldIndex.KnightsESP:
                    obj._KnightsESP = (String)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestingSettings obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITestingSettings : ITestingSettingsGetter, ILoquiClass<ITestingSettings, ITestingSettingsGetter>, ILoquiClass<TestingSettings, ITestingSettingsGetter>
    {
        new String OblivionESM { get; set; }

        new String KnightsESP { get; set; }

    }

    public partial interface ITestingSettingsGetter : ILoquiObject
    {
        #region OblivionESM
        String OblivionESM { get; }

        #endregion
        #region KnightsESP
        String KnightsESP { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum TestingSettings_FieldIndex
    {
        OblivionESM = 0,
        KnightsESP = 1,
    }
    #endregion

    #region Registration
    public class TestingSettings_Registration : ILoquiRegistration
    {
        public static readonly TestingSettings_Registration Instance = new TestingSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "8238bf49-028c-4e0b-b914-3ade480308ec";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TestingSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestingSettings_ErrorMask);

        public static readonly Type ClassType = typeof(TestingSettings);

        public static readonly Type GetterType = typeof(ITestingSettingsGetter);

        public static readonly Type SetterType = typeof(ITestingSettings);

        public static readonly Type CommonType = typeof(TestingSettingsCommon);

        public const string FullName = "Mutagen.Bethesda.Tests.TestingSettings";

        public const string Name = "TestingSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "OBLIVIONESM":
                    return (ushort)TestingSettings_FieldIndex.OblivionESM;
                case "KNIGHTSESP":
                    return (ushort)TestingSettings_FieldIndex.KnightsESP;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    return "OblivionESM";
                case TestingSettings_FieldIndex.KnightsESP:
                    return "KnightsESP";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    return typeof(String);
                case TestingSettings_FieldIndex.KnightsESP:
                    return typeof(String);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TestingSettingsCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ITestingSettings item,
            ITestingSettingsGetter rhs,
            ITestingSettingsGetter def,
            ErrorMaskBuilder errorMask,
            TestingSettings_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.OblivionESM ?? true)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.OblivionESM);
                item.OblivionESM = rhs.OblivionESM;
                errorMask?.PopIndex();
            }
            if (copyMask?.KnightsESP ?? true)
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.KnightsESP);
                item.KnightsESP = rhs.KnightsESP;
                errorMask?.PopIndex();
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestingSettings obj,
            NotifyingFireParameters cmds = null)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestingSettings obj,
            NotifyingUnsetParameters cmds = null)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    obj.OblivionESM = default(String);
                    break;
                case TestingSettings_FieldIndex.KnightsESP:
                    obj.KnightsESP = default(String);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestingSettings obj)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                case TestingSettings_FieldIndex.KnightsESP:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestingSettingsGetter obj)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    return obj.OblivionESM;
                case TestingSettings_FieldIndex.KnightsESP:
                    return obj.KnightsESP;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestingSettings item,
            NotifyingUnsetParameters cmds = null)
        {
            item.OblivionESM = default(String);
            item.KnightsESP = default(String);
        }

        public static TestingSettings_Mask<bool> GetEqualsMask(
            this ITestingSettingsGetter item,
            ITestingSettingsGetter rhs)
        {
            var ret = new TestingSettings_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            TestingSettings_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.OblivionESM = object.Equals(item.OblivionESM, rhs.OblivionESM);
            ret.KnightsESP = object.Equals(item.KnightsESP, rhs.KnightsESP);
        }

        public static string ToString(
            this ITestingSettingsGetter item,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestingSettingsGetter item,
            FileGeneration fg,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestingSettings)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestingSettings)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.OblivionESM ?? true)
                {
                    fg.AppendLine($"OblivionESM => {item.OblivionESM}");
                }
                if (printMask?.KnightsESP ?? true)
                {
                    fg.AppendLine($"KnightsESP => {item.KnightsESP}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITestingSettingsGetter item,
            TestingSettings_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TestingSettings_Mask<bool> GetHasBeenSetMask(ITestingSettingsGetter item)
        {
            var ret = new TestingSettings_Mask<bool>();
            ret.OblivionESM = true;
            ret.KnightsESP = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            ITestingSettingsGetter item,
            bool doMasks,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            ITestingSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.TestingSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.TestingSettings");
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.OblivionESM) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.OblivionESM),
                    item: item.OblivionESM,
                    fieldIndex: (int)TestingSettings_FieldIndex.OblivionESM,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.KnightsESP) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.KnightsESP),
                    item: item.KnightsESP,
                    fieldIndex: (int)TestingSettings_FieldIndex.KnightsESP,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestingSettings_Mask<T> : IMask<T>, IEquatable<TestingSettings_Mask<T>>
    {
        #region Ctors
        public TestingSettings_Mask()
        {
        }

        public TestingSettings_Mask(T initialValue)
        {
            this.OblivionESM = initialValue;
            this.KnightsESP = initialValue;
        }
        #endregion

        #region Members
        public T OblivionESM;
        public T KnightsESP;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestingSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestingSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.OblivionESM, rhs.OblivionESM)) return false;
            if (!object.Equals(this.KnightsESP, rhs.KnightsESP)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.OblivionESM?.GetHashCode());
            ret = ret.CombineHashCode(this.KnightsESP?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.OblivionESM)) return false;
            if (!eval(this.KnightsESP)) return false;
            return true;
        }
        #endregion

        #region Translate
        public TestingSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestingSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestingSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.OblivionESM = eval(this.OblivionESM);
            obj.KnightsESP = eval(this.KnightsESP);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestingSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestingSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestingSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.OblivionESM ?? true)
                {
                    fg.AppendLine($"OblivionESM => {OblivionESM}");
                }
                if (printMask?.KnightsESP ?? true)
                {
                    fg.AppendLine($"KnightsESP => {KnightsESP}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestingSettings_ErrorMask : IErrorMask, IErrorMask<TestingSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception OblivionESM;
        public Exception KnightsESP;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    return OblivionESM;
                case TestingSettings_FieldIndex.KnightsESP:
                    return KnightsESP;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    this.OblivionESM = ex;
                    break;
                case TestingSettings_FieldIndex.KnightsESP:
                    this.KnightsESP = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.OblivionESM:
                    this.OblivionESM = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.KnightsESP:
                    this.KnightsESP = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (OblivionESM != null) return true;
            if (KnightsESP != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestingSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"OblivionESM => {OblivionESM}");
            fg.AppendLine($"KnightsESP => {KnightsESP}");
        }
        #endregion

        #region Combine
        public TestingSettings_ErrorMask Combine(TestingSettings_ErrorMask rhs)
        {
            var ret = new TestingSettings_ErrorMask();
            ret.OblivionESM = this.OblivionESM.Combine(rhs.OblivionESM);
            ret.KnightsESP = this.KnightsESP.Combine(rhs.KnightsESP);
            return ret;
        }
        public static TestingSettings_ErrorMask Combine(TestingSettings_ErrorMask lhs, TestingSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestingSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestingSettings_ErrorMask();
        }
        #endregion

    }
    public class TestingSettings_CopyMask
    {
        #region Members
        public bool OblivionESM;
        public bool KnightsESP;
        #endregion

    }
    public class TestingSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool OblivionESM;
        public bool KnightsESP;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((OblivionESM, null));
            ret.Add((KnightsESP, null));
        }
    }
    #endregion



    #endregion

}
