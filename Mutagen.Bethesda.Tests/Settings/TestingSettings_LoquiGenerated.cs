/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Tests.Internals;
using Mutagen.Bethesda.Tests;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
#endregion

namespace Mutagen.Bethesda.Tests
{
    #region Class
    public partial class TestingSettings :
        ITestingSettings,
        ILoquiObjectSetter<TestingSettings>,
        IEquatable<TestingSettings>,
        IEqualsMask
    {
        #region Ctor
        public TestingSettings()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TestGroupMasks
        public Boolean TestGroupMasks { get; set; }
        #endregion
        #region TestModList
        public Boolean TestModList { get; set; }
        #endregion
        #region TestFlattenedMod
        public Boolean TestFlattenedMod { get; set; }
        #endregion
        #region TestBenchmarks
        public Boolean TestBenchmarks { get; set; }
        #endregion
        #region TestLocators
        public Boolean TestLocators { get; set; }
        #endregion
        #region DataFolderLocations
        public DataFolderLocations DataFolderLocations { get; set; }
        IDataFolderLocationsGetter ITestingSettingsGetter.DataFolderLocations => DataFolderLocations;
        #endregion
        #region PassthroughSettings
        public PassthroughSettings PassthroughSettings { get; set; }
        IPassthroughSettingsGetter ITestingSettingsGetter.PassthroughSettings => PassthroughSettings;
        #endregion
        #region TargetGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ExtendedList<TargetGroup> _TargetGroups = new ExtendedList<TargetGroup>();
        public IExtendedList<TargetGroup> TargetGroups => _TargetGroups;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExtendedList<TargetGroup> ITestingSettings.TargetGroups => _TargetGroups;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITargetGroupGetter> ITestingSettingsGetter.TargetGroups => _TargetGroups;
        #endregion

        #endregion

        #region To String
        public override string ToString()
        {
            return TestingSettingsMixIn.ToString(item: this);
        }


        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestingSettingsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ITestingSettingsGetter rhs)) return false;
            return ((TestingSettingsCommon)((ITestingSettingsGetter)this).CommonInstance()).Equals(this, rhs);
        }

        public bool Equals(TestingSettings obj)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)this).CommonInstance()).Equals(this, obj);
        }

        public override int GetHashCode() => ((TestingSettingsCommon)((ITestingSettingsGetter)this).CommonInstance()).GetHashCode(this);

        #endregion

        #region Xml Translation
        protected object XmlWriteTranslator => TestingSettingsXmlWriteTranslation.Instance;
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ((TestingSettingsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static TestingSettings CreateFromXml(
            XElement node,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TestingSettings CreateFromXml(
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestingSettings CreateFromXml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new TestingSettings() : null;
                    break;
                default:
                    break;
            }
            var ret = new TestingSettings();
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)ret).CommonSetterInstance()).CopyInFromXml(
                item: ret,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static TestingSettings CreateFromXml(
            string path,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            string path,
            ErrorMaskBuilder errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestingSettings CreateFromXml(
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestingSettings CreateFromXml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((TestingSettings_FieldIndex)index)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        void ILoquiObjectGetter.ToString(FileGeneration fg, string name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITestingSettingsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)this).CommonSetterInstance()).Clear(this);
        }

        internal static TestingSettings GetNew()
        {
            return new TestingSettings();
        }

    }
    #endregion

    #region Interface
    public partial interface ITestingSettings :
        ITestingSettingsGetter,
        ILoquiObjectSetter<ITestingSettings>
    {
        new Boolean TestGroupMasks { get; set; }

        new Boolean TestModList { get; set; }

        new Boolean TestFlattenedMod { get; set; }

        new Boolean TestBenchmarks { get; set; }

        new Boolean TestLocators { get; set; }

        new DataFolderLocations DataFolderLocations { get; set; }

        new PassthroughSettings PassthroughSettings { get; set; }

        new IExtendedList<TargetGroup> TargetGroups { get; }
    }

    public partial interface ITestingSettingsGetter :
        ILoquiObject,
        ILoquiObject<ITestingSettingsGetter>,
        IXmlItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        #region TestGroupMasks
        Boolean TestGroupMasks { get; }

        #endregion
        #region TestModList
        Boolean TestModList { get; }

        #endregion
        #region TestFlattenedMod
        Boolean TestFlattenedMod { get; }

        #endregion
        #region TestBenchmarks
        Boolean TestBenchmarks { get; }

        #endregion
        #region TestLocators
        Boolean TestLocators { get; }

        #endregion
        #region DataFolderLocations
        IDataFolderLocationsGetter DataFolderLocations { get; }
        #endregion
        #region PassthroughSettings
        IPassthroughSettingsGetter PassthroughSettings { get; }
        #endregion
        #region TargetGroups
        IReadOnlyList<ITargetGroupGetter> TargetGroups { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static class TestingSettingsMixIn
    {
        public static void Clear(this ITestingSettings item)
        {
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)item).CommonSetterInstance()).Clear(item: item);
        }

        public static TestingSettings_Mask<bool> GetEqualsMask(
            this ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITestingSettingsGetter item,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITestingSettingsGetter item,
            FileGeneration fg,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITestingSettingsGetter item,
            TestingSettings_Mask<bool?> checkMask)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static TestingSettings_Mask<bool> GetHasBeenSetMask(this ITestingSettingsGetter item)
        {
            var ret = new TestingSettings_Mask<bool>();
            ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITestingSettingsGetter item,
            ITestingSettingsGetter rhs)
        {
            return ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyFieldsFrom(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public static void DeepCopyFieldsFrom(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs,
            TestingSettings_TranslationMask copyMask)
        {
            DeepCopyFieldsFrom(
                lhs: lhs,
                rhs: rhs,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public static void DeepCopyFieldsFrom(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask copyMask = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyFieldsFrom(
            this ITestingSettings lhs,
            ITestingSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)lhs).CommonSetterTranslationInstance()).DeepCopyFieldsFrom(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static TestingSettings DeepCopy(
            this ITestingSettingsGetter item,
            TestingSettings_TranslationMask copyMask = null)
        {
            return ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TestingSettings DeepCopy(
            this ITestingSettingsGetter item,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask copyMask = null)
        {
            return ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TestingSettings DeepCopy(
            this ITestingSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            return ((TestingSettingsSetterTranslationCommon)((ITestingSettingsGetter)item).CommonSetterTranslationInstance()).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITestingSettings item,
            XElement node,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITestingSettings item,
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            ((TestingSettingsSetterCommon)((ITestingSettingsGetter)item).CommonSetterInstance()).CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            string path,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            string path,
            ErrorMaskBuilder errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            Stream stream,
            MissingCreate missing = MissingCreate.New,
            TestingSettings_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITestingSettings item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestingSettings_TranslationMask translationMask = null,
            MissingCreate missing = MissingCreate.New)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Tests.Internals
{
    #region Field Index
    public enum TestingSettings_FieldIndex
    {
        TestGroupMasks = 0,
        TestModList = 1,
        TestFlattenedMod = 2,
        TestBenchmarks = 3,
        TestLocators = 4,
        DataFolderLocations = 5,
        PassthroughSettings = 6,
        TargetGroups = 7,
    }
    #endregion

    #region Registration
    public class TestingSettings_Registration : ILoquiRegistration
    {
        public static readonly TestingSettings_Registration Instance = new TestingSettings_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Tests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Tests.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "8238bf49-028c-4e0b-b914-3ade480308ec";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(TestingSettings_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestingSettings_ErrorMask);

        public static readonly Type ClassType = typeof(TestingSettings);

        public static readonly Type GetterType = typeof(ITestingSettingsGetter);

        public static readonly Type InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITestingSettings);

        public static readonly Type InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Tests.TestingSettings";

        public const string Name = "TestingSettings";

        public const string Namespace = "Mutagen.Bethesda.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TESTGROUPMASKS":
                    return (ushort)TestingSettings_FieldIndex.TestGroupMasks;
                case "TESTMODLIST":
                    return (ushort)TestingSettings_FieldIndex.TestModList;
                case "TESTFLATTENEDMOD":
                    return (ushort)TestingSettings_FieldIndex.TestFlattenedMod;
                case "TESTBENCHMARKS":
                    return (ushort)TestingSettings_FieldIndex.TestBenchmarks;
                case "TESTLOCATORS":
                    return (ushort)TestingSettings_FieldIndex.TestLocators;
                case "DATAFOLDERLOCATIONS":
                    return (ushort)TestingSettings_FieldIndex.DataFolderLocations;
                case "PASSTHROUGHSETTINGS":
                    return (ushort)TestingSettings_FieldIndex.PassthroughSettings;
                case "TARGETGROUPS":
                    return (ushort)TestingSettings_FieldIndex.TargetGroups;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TargetGroups:
                    return true;
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return true;
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return "TestGroupMasks";
                case TestingSettings_FieldIndex.TestModList:
                    return "TestModList";
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return "TestFlattenedMod";
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return "TestBenchmarks";
                case TestingSettings_FieldIndex.TestLocators:
                    return "TestLocators";
                case TestingSettings_FieldIndex.DataFolderLocations:
                    return "DataFolderLocations";
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return "PassthroughSettings";
                case TestingSettings_FieldIndex.TargetGroups:
                    return "TargetGroups";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                case TestingSettings_FieldIndex.TestModList:
                case TestingSettings_FieldIndex.TestFlattenedMod:
                case TestingSettings_FieldIndex.TestBenchmarks:
                case TestingSettings_FieldIndex.TestLocators:
                case TestingSettings_FieldIndex.DataFolderLocations:
                case TestingSettings_FieldIndex.PassthroughSettings:
                case TestingSettings_FieldIndex.TargetGroups:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestModList:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.TestLocators:
                    return typeof(Boolean);
                case TestingSettings_FieldIndex.DataFolderLocations:
                    return typeof(DataFolderLocations);
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return typeof(PassthroughSettings);
                case TestingSettings_FieldIndex.TargetGroups:
                    return typeof(IExtendedList<TargetGroup>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TestingSettingsXmlWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TestingSettingsSetterCommon
    {
        public static readonly TestingSettingsSetterCommon Instance = new TestingSettingsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITestingSettings item)
        {
            ClearPartial();
            item.TestGroupMasks = default(Boolean);
            item.TestModList = default(Boolean);
            item.TestFlattenedMod = default(Boolean);
            item.TestBenchmarks = default(Boolean);
            item.TestLocators = default(Boolean);
            item.DataFolderLocations = default(DataFolderLocations);
            item.PassthroughSettings = default(PassthroughSettings);
            item.TargetGroups.Clear();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ITestingSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestingSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
    }
    public partial class TestingSettingsCommon
    {
        public static readonly TestingSettingsCommon Instance = new TestingSettingsCommon();

        public TestingSettings_Mask<bool> GetEqualsMask(
            ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TestingSettings_Mask<bool>();
            ((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITestingSettingsGetter item,
            ITestingSettingsGetter rhs,
            TestingSettings_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.TestGroupMasks = item.TestGroupMasks == rhs.TestGroupMasks;
            ret.TestModList = item.TestModList == rhs.TestModList;
            ret.TestFlattenedMod = item.TestFlattenedMod == rhs.TestFlattenedMod;
            ret.TestBenchmarks = item.TestBenchmarks == rhs.TestBenchmarks;
            ret.TestLocators = item.TestLocators == rhs.TestLocators;
            ret.DataFolderLocations = MaskItemExt.Factory(item.DataFolderLocations.GetEqualsMask(rhs.DataFolderLocations, include), include);
            ret.PassthroughSettings = MaskItemExt.Factory(item.PassthroughSettings.GetEqualsMask(rhs.PassthroughSettings, include), include);
            ret.TargetGroups = item.TargetGroups.CollectionEqualsHelper(
                rhs.TargetGroups,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            ITestingSettingsGetter item,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITestingSettingsGetter item,
            FileGeneration fg,
            string name = null,
            TestingSettings_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"TestingSettings =>");
            }
            else
            {
                fg.AppendLine($"{name} (TestingSettings) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITestingSettingsGetter item,
            FileGeneration fg,
            TestingSettings_Mask<bool> printMask = null)
        {
            if (printMask?.TestGroupMasks ?? true)
            {
                fg.AppendLine($"TestGroupMasks => {item.TestGroupMasks}");
            }
            if (printMask?.TestModList ?? true)
            {
                fg.AppendLine($"TestModList => {item.TestModList}");
            }
            if (printMask?.TestFlattenedMod ?? true)
            {
                fg.AppendLine($"TestFlattenedMod => {item.TestFlattenedMod}");
            }
            if (printMask?.TestBenchmarks ?? true)
            {
                fg.AppendLine($"TestBenchmarks => {item.TestBenchmarks}");
            }
            if (printMask?.TestLocators ?? true)
            {
                fg.AppendLine($"TestLocators => {item.TestLocators}");
            }
            if (printMask?.DataFolderLocations?.Overall ?? true)
            {
                item.DataFolderLocations?.ToString(fg, "DataFolderLocations");
            }
            if (printMask?.PassthroughSettings?.Overall ?? true)
            {
                item.PassthroughSettings?.ToString(fg, "PassthroughSettings");
            }
            if (printMask?.TargetGroups?.Overall ?? true)
            {
                fg.AppendLine("TargetGroups =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.TargetGroups)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ITestingSettingsGetter item,
            TestingSettings_Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ITestingSettingsGetter item,
            TestingSettings_Mask<bool> mask)
        {
            mask.TestGroupMasks = true;
            mask.TestModList = true;
            mask.TestFlattenedMod = true;
            mask.TestBenchmarks = true;
            mask.TestLocators = true;
            mask.DataFolderLocations = new MaskItem<bool, DataFolderLocations_Mask<bool>>(true, item.DataFolderLocations.GetHasBeenSetMask());
            mask.PassthroughSettings = new MaskItem<bool, PassthroughSettings_Mask<bool>>(true, item.PassthroughSettings.GetHasBeenSetMask());
            mask.TargetGroups = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, TargetGroup_Mask<bool>>>>(true, item.TargetGroups.WithIndex().Select((i) => new MaskItemIndexed<bool, TargetGroup_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITestingSettingsGetter lhs,
            ITestingSettingsGetter rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.TestGroupMasks != rhs.TestGroupMasks) return false;
            if (lhs.TestModList != rhs.TestModList) return false;
            if (lhs.TestFlattenedMod != rhs.TestFlattenedMod) return false;
            if (lhs.TestBenchmarks != rhs.TestBenchmarks) return false;
            if (lhs.TestLocators != rhs.TestLocators) return false;
            if (!object.Equals(lhs.DataFolderLocations, rhs.DataFolderLocations)) return false;
            if (!object.Equals(lhs.PassthroughSettings, rhs.PassthroughSettings)) return false;
            if (!lhs.TargetGroups.SequenceEqual(rhs.TargetGroups)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ITestingSettingsGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.TestGroupMasks).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestModList).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestFlattenedMod).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestBenchmarks).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TestLocators).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DataFolderLocations).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PassthroughSettings).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.TargetGroups).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TestingSettings.GetNew();
        }
        
    }
    public partial class TestingSettingsSetterTranslationCommon
    {
        public static readonly TestingSettingsSetterTranslationCommon Instance = new TestingSettingsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyFieldsFrom(
            ITestingSettings item,
            ITestingSettingsGetter rhs,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
            {
                item.TestGroupMasks = rhs.TestGroupMasks;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestModList) ?? true))
            {
                item.TestModList = rhs.TestModList;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
            {
                item.TestFlattenedMod = rhs.TestFlattenedMod;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
            {
                item.TestBenchmarks = rhs.TestBenchmarks;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestLocators) ?? true))
            {
                item.TestLocators = rhs.TestLocators;
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.DataFolderLocations);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
                    {
                        if (rhs.DataFolderLocations == null)
                        {
                            item.DataFolderLocations = null;
                        }
                        else
                        {
                            item.DataFolderLocations = rhs.DataFolderLocations.DeepCopy(
                                copyMask: copyMask?.GetSubCrystal((int)TestingSettings_FieldIndex.DataFolderLocations),
                                errorMask: errorMask);
                        }
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.PassthroughSettings);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
                    {
                        if (rhs.PassthroughSettings == null)
                        {
                            item.PassthroughSettings = null;
                        }
                        else
                        {
                            item.PassthroughSettings = rhs.PassthroughSettings.DeepCopy(
                                copyMask: copyMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings),
                                errorMask: errorMask);
                        }
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TargetGroups) ?? true))
            {
                errorMask?.PushIndex((int)TestingSettings_FieldIndex.TargetGroups);
                try
                {
                    item.TargetGroups.SetTo(
                        items: rhs.TargetGroups,
                        converter: (r) =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public TestingSettings DeepCopy(
            ITestingSettingsGetter item,
            TestingSettings_TranslationMask copyMask = null)
        {
            TestingSettings ret = (TestingSettings)((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public TestingSettings DeepCopy(
            ITestingSettingsGetter item,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask copyMask = null)
        {
            TestingSettings ret = (TestingSettings)((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public TestingSettings DeepCopy(
            ITestingSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal copyMask = null)
        {
            TestingSettings ret = (TestingSettings)((TestingSettingsCommon)((ITestingSettingsGetter)item).CommonInstance()).GetNew();
            ret.DeepCopyFieldsFrom(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Tests
{
    public partial class TestingSettings
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestingSettings_Registration.Instance;
        public static TestingSettings_Registration Registration => TestingSettings_Registration.Instance;
        protected object CommonInstance() => TestingSettingsCommon.Instance;
        protected object CommonSetterInstance()
        {
            return TestingSettingsSetterCommon.Instance;
        }
        protected object CommonSetterTranslationInstance() => TestingSettingsSetterTranslationCommon.Instance;
        object ITestingSettingsGetter.CommonInstance() => this.CommonInstance();
        object ITestingSettingsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        object ITestingSettingsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Tests.Internals
{
    public partial class TestingSettingsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static TestingSettingsXmlWriteTranslation Instance = new TestingSettingsXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITestingSettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestGroupMasks),
                    item: item.TestGroupMasks,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestGroupMasks,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestModList) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestModList),
                    item: item.TestModList,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestModList,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestFlattenedMod),
                    item: item.TestFlattenedMod,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestFlattenedMod,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestBenchmarks),
                    item: item.TestBenchmarks,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestBenchmarks,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestLocators) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TestLocators),
                    item: item.TestLocators,
                    fieldIndex: (int)TestingSettings_FieldIndex.TestLocators,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
            {
                var loquiItem = item.DataFolderLocations;
                ((DataFolderLocationsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.DataFolderLocations),
                    fieldIndex: (int)TestingSettings_FieldIndex.DataFolderLocations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.DataFolderLocations));
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
            {
                var loquiItem = item.PassthroughSettings;
                ((PassthroughSettingsXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                    item: loquiItem,
                    node: node,
                    name: nameof(item.PassthroughSettings),
                    fieldIndex: (int)TestingSettings_FieldIndex.PassthroughSettings,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings));
            }
            if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TargetGroups) ?? true))
            {
                ListXmlTranslation<ITargetGroupGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.TargetGroups),
                    item: item.TargetGroups,
                    fieldIndex: (int)TestingSettings_FieldIndex.TargetGroups,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.TargetGroups),
                    transl: (XElement subNode, ITargetGroupGetter subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        var loquiItem = subItem;
                        ((TargetGroupXmlWriteTranslation)((IXmlItem)loquiItem).XmlWriteTranslator).Write(
                            item: loquiItem,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ITestingSettingsGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Tests.TestingSettings");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Tests.TestingSettings");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            Write(
                item: (ITestingSettingsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ITestingSettingsGetter item,
            ErrorMaskBuilder errorMask,
            int fieldIndex,
            TranslationCrystal translationMask,
            string name = null)
        {
            try
            {
                errorMask?.PushIndex(fieldIndex);
                Write(
                    item: (ITestingSettingsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class TestingSettingsXmlCreateTranslation
    {
        public readonly static TestingSettingsXmlCreateTranslation Instance = new TestingSettingsXmlCreateTranslation();

        public static void FillPublicXml(
            ITestingSettings item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestingSettingsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITestingSettings item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "TestGroupMasks":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestGroupMasks) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestGroupMasks);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestGroupMasksParse,
                                errorMask: errorMask))
                            {
                                item.TestGroupMasks = TestGroupMasksParse;
                            }
                            else
                            {
                                item.TestGroupMasks = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestModList":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestModList) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestModList);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestModListParse,
                                errorMask: errorMask))
                            {
                                item.TestModList = TestModListParse;
                            }
                            else
                            {
                                item.TestModList = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestFlattenedMod":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestFlattenedMod) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestFlattenedMod);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestFlattenedModParse,
                                errorMask: errorMask))
                            {
                                item.TestFlattenedMod = TestFlattenedModParse;
                            }
                            else
                            {
                                item.TestFlattenedMod = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestBenchmarks":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestBenchmarks) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestBenchmarks);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestBenchmarksParse,
                                errorMask: errorMask))
                            {
                                item.TestBenchmarks = TestBenchmarksParse;
                            }
                            else
                            {
                                item.TestBenchmarks = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestLocators":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TestLocators) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TestLocators);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean TestLocatorsParse,
                                errorMask: errorMask))
                            {
                                item.TestLocators = TestLocatorsParse;
                            }
                            else
                            {
                                item.TestLocators = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "DataFolderLocations":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.DataFolderLocations) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.DataFolderLocations);
                            if (LoquiXmlTranslation<DataFolderLocations>.Instance.Parse(
                                node: node,
                                item: out DataFolderLocations DataFolderLocationsParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.DataFolderLocations)))
                            {
                                item.DataFolderLocations = DataFolderLocationsParse;
                            }
                            else
                            {
                                item.DataFolderLocations = default(DataFolderLocations);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "PassthroughSettings":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.PassthroughSettings) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.PassthroughSettings);
                            if (LoquiXmlTranslation<PassthroughSettings>.Instance.Parse(
                                node: node,
                                item: out PassthroughSettings PassthroughSettingsParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestingSettings_FieldIndex.PassthroughSettings)))
                            {
                                item.PassthroughSettings = PassthroughSettingsParse;
                            }
                            else
                            {
                                item.PassthroughSettings = default(PassthroughSettings);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TargetGroups":
                    if ((translationMask?.GetShouldTranslate((int)TestingSettings_FieldIndex.TargetGroups) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestingSettings_FieldIndex.TargetGroups);
                            if (ListXmlTranslation<TargetGroup>.Instance.Parse(
                                node: node,
                                enumer: out var TargetGroupsItem,
                                transl: LoquiXmlTranslation<TargetGroup>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.TargetGroups.SetTo(TargetGroupsItem);
                            }
                            else
                            {
                                item.TargetGroups.Clear();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Tests
{
    #region Xml Write Mixins
    public static class TestingSettingsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITestingSettingsGetter item,
            XElement node,
            out TestingSettings_ErrorMask errorMask,
            bool doMasks = true,
            TestingSettings_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestingSettings_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            string path,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            Stream stream,
            out TestingSettings_ErrorMask errorMask,
            TestingSettings_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask = null,
            string name = null)
        {
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            XElement node,
            string name = null,
            TestingSettings_TranslationMask translationMask = null)
        {
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITestingSettingsGetter item,
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            ((TestingSettingsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Mask
namespace Mutagen.Bethesda.Tests.Internals
{
    public class TestingSettings_Mask<T> : IMask<T>, IEquatable<TestingSettings_Mask<T>>
    {
        #region Ctors
        public TestingSettings_Mask()
        {
        }

        public TestingSettings_Mask(T initialValue)
        {
            this.TestGroupMasks = initialValue;
            this.TestModList = initialValue;
            this.TestFlattenedMod = initialValue;
            this.TestBenchmarks = initialValue;
            this.TestLocators = initialValue;
            this.DataFolderLocations = new MaskItem<T, DataFolderLocations_Mask<T>>(initialValue, new DataFolderLocations_Mask<T>(initialValue));
            this.PassthroughSettings = new MaskItem<T, PassthroughSettings_Mask<T>>(initialValue, new PassthroughSettings_Mask<T>(initialValue));
            this.TargetGroups = new MaskItem<T, IEnumerable<MaskItemIndexed<T, TargetGroup_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T TestGroupMasks;
        public T TestModList;
        public T TestFlattenedMod;
        public T TestBenchmarks;
        public T TestLocators;
        public MaskItem<T, DataFolderLocations_Mask<T>> DataFolderLocations { get; set; }
        public MaskItem<T, PassthroughSettings_Mask<T>> PassthroughSettings { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, TargetGroup_Mask<T>>>> TargetGroups;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestingSettings_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestingSettings_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TestGroupMasks, rhs.TestGroupMasks)) return false;
            if (!object.Equals(this.TestModList, rhs.TestModList)) return false;
            if (!object.Equals(this.TestFlattenedMod, rhs.TestFlattenedMod)) return false;
            if (!object.Equals(this.TestBenchmarks, rhs.TestBenchmarks)) return false;
            if (!object.Equals(this.TestLocators, rhs.TestLocators)) return false;
            if (!object.Equals(this.DataFolderLocations, rhs.DataFolderLocations)) return false;
            if (!object.Equals(this.PassthroughSettings, rhs.PassthroughSettings)) return false;
            if (!object.Equals(this.TargetGroups, rhs.TargetGroups)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TestGroupMasks?.GetHashCode());
            ret = ret.CombineHashCode(this.TestModList?.GetHashCode());
            ret = ret.CombineHashCode(this.TestFlattenedMod?.GetHashCode());
            ret = ret.CombineHashCode(this.TestBenchmarks?.GetHashCode());
            ret = ret.CombineHashCode(this.TestLocators?.GetHashCode());
            ret = ret.CombineHashCode(this.DataFolderLocations?.GetHashCode());
            ret = ret.CombineHashCode(this.PassthroughSettings?.GetHashCode());
            ret = ret.CombineHashCode(this.TargetGroups?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.TestGroupMasks)) return false;
            if (!eval(this.TestModList)) return false;
            if (!eval(this.TestFlattenedMod)) return false;
            if (!eval(this.TestBenchmarks)) return false;
            if (!eval(this.TestLocators)) return false;
            if (DataFolderLocations != null)
            {
                if (!eval(this.DataFolderLocations.Overall)) return false;
                if (this.DataFolderLocations.Specific != null && !this.DataFolderLocations.Specific.AllEqual(eval)) return false;
            }
            if (PassthroughSettings != null)
            {
                if (!eval(this.PassthroughSettings.Overall)) return false;
                if (this.PassthroughSettings.Specific != null && !this.PassthroughSettings.Specific.AllEqual(eval)) return false;
            }
            if (this.TargetGroups != null)
            {
                if (!eval(this.TargetGroups.Overall)) return false;
                if (this.TargetGroups.Specific != null)
                {
                    foreach (var item in this.TargetGroups.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TestingSettings_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestingSettings_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestingSettings_Mask<R> obj, Func<T, R> eval)
        {
            obj.TestGroupMasks = eval(this.TestGroupMasks);
            obj.TestModList = eval(this.TestModList);
            obj.TestFlattenedMod = eval(this.TestFlattenedMod);
            obj.TestBenchmarks = eval(this.TestBenchmarks);
            obj.TestLocators = eval(this.TestLocators);
            if (this.DataFolderLocations != null)
            {
                obj.DataFolderLocations = new MaskItem<R, DataFolderLocations_Mask<R>>();
                obj.DataFolderLocations.Overall = eval(this.DataFolderLocations.Overall);
                if (this.DataFolderLocations.Specific != null)
                {
                    obj.DataFolderLocations.Specific = this.DataFolderLocations.Specific.Translate(eval);
                }
            }
            if (this.PassthroughSettings != null)
            {
                obj.PassthroughSettings = new MaskItem<R, PassthroughSettings_Mask<R>>();
                obj.PassthroughSettings.Overall = eval(this.PassthroughSettings.Overall);
                if (this.PassthroughSettings.Specific != null)
                {
                    obj.PassthroughSettings.Specific = this.PassthroughSettings.Specific.Translate(eval);
                }
            }
            if (TargetGroups != null)
            {
                obj.TargetGroups = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TargetGroup_Mask<R>>>>();
                obj.TargetGroups.Overall = eval(this.TargetGroups.Overall);
                if (TargetGroups.Specific != null)
                {
                    List<MaskItemIndexed<R, TargetGroup_Mask<R>>> l = new List<MaskItemIndexed<R, TargetGroup_Mask<R>>>();
                    obj.TargetGroups.Specific = l;
                    foreach (var item in TargetGroups.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, TargetGroup_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, TargetGroup_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.TargetGroups.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestingSettings_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestingSettings_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestingSettings_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGroupMasks ?? true)
                {
                    fg.AppendLine($"TestGroupMasks => {TestGroupMasks}");
                }
                if (printMask?.TestModList ?? true)
                {
                    fg.AppendLine($"TestModList => {TestModList}");
                }
                if (printMask?.TestFlattenedMod ?? true)
                {
                    fg.AppendLine($"TestFlattenedMod => {TestFlattenedMod}");
                }
                if (printMask?.TestBenchmarks ?? true)
                {
                    fg.AppendLine($"TestBenchmarks => {TestBenchmarks}");
                }
                if (printMask?.TestLocators ?? true)
                {
                    fg.AppendLine($"TestLocators => {TestLocators}");
                }
                if (printMask?.DataFolderLocations?.Overall ?? true)
                {
                    DataFolderLocations?.ToString(fg);
                }
                if (printMask?.PassthroughSettings?.Overall ?? true)
                {
                    PassthroughSettings?.ToString(fg);
                }
                if (printMask?.TargetGroups?.Overall ?? true)
                {
                    fg.AppendLine("TargetGroups =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (TargetGroups.Overall != null)
                        {
                            fg.AppendLine(TargetGroups.Overall.ToString());
                        }
                        if (TargetGroups.Specific != null)
                        {
                            foreach (var subItem in TargetGroups.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestingSettings_ErrorMask : IErrorMask, IErrorMask<TestingSettings_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception TestGroupMasks;
        public Exception TestModList;
        public Exception TestFlattenedMod;
        public Exception TestBenchmarks;
        public Exception TestLocators;
        public MaskItem<Exception, DataFolderLocations_ErrorMask> DataFolderLocations;
        public MaskItem<Exception, PassthroughSettings_ErrorMask> PassthroughSettings;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, TargetGroup_ErrorMask>>> TargetGroups;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    return TestGroupMasks;
                case TestingSettings_FieldIndex.TestModList:
                    return TestModList;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    return TestFlattenedMod;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    return TestBenchmarks;
                case TestingSettings_FieldIndex.TestLocators:
                    return TestLocators;
                case TestingSettings_FieldIndex.DataFolderLocations:
                    return DataFolderLocations;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    return PassthroughSettings;
                case TestingSettings_FieldIndex.TargetGroups:
                    return TargetGroups;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    this.TestGroupMasks = ex;
                    break;
                case TestingSettings_FieldIndex.TestModList:
                    this.TestModList = ex;
                    break;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    this.TestFlattenedMod = ex;
                    break;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    this.TestBenchmarks = ex;
                    break;
                case TestingSettings_FieldIndex.TestLocators:
                    this.TestLocators = ex;
                    break;
                case TestingSettings_FieldIndex.DataFolderLocations:
                    this.DataFolderLocations = new MaskItem<Exception, DataFolderLocations_ErrorMask>(ex, null);
                    break;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    this.PassthroughSettings = new MaskItem<Exception, PassthroughSettings_ErrorMask>(ex, null);
                    break;
                case TestingSettings_FieldIndex.TargetGroups:
                    this.TargetGroups = new MaskItem<Exception, IEnumerable<MaskItem<Exception, TargetGroup_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TestingSettings_FieldIndex enu = (TestingSettings_FieldIndex)index;
            switch (enu)
            {
                case TestingSettings_FieldIndex.TestGroupMasks:
                    this.TestGroupMasks = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestModList:
                    this.TestModList = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestFlattenedMod:
                    this.TestFlattenedMod = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestBenchmarks:
                    this.TestBenchmarks = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.TestLocators:
                    this.TestLocators = (Exception)obj;
                    break;
                case TestingSettings_FieldIndex.DataFolderLocations:
                    this.DataFolderLocations = (MaskItem<Exception, DataFolderLocations_ErrorMask>)obj;
                    break;
                case TestingSettings_FieldIndex.PassthroughSettings:
                    this.PassthroughSettings = (MaskItem<Exception, PassthroughSettings_ErrorMask>)obj;
                    break;
                case TestingSettings_FieldIndex.TargetGroups:
                    this.TargetGroups = (MaskItem<Exception, IEnumerable<MaskItem<Exception, TargetGroup_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (TestGroupMasks != null) return true;
            if (TestModList != null) return true;
            if (TestFlattenedMod != null) return true;
            if (TestBenchmarks != null) return true;
            if (TestLocators != null) return true;
            if (DataFolderLocations != null) return true;
            if (PassthroughSettings != null) return true;
            if (TargetGroups != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestingSettings_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"TestGroupMasks => {TestGroupMasks}");
            fg.AppendLine($"TestModList => {TestModList}");
            fg.AppendLine($"TestFlattenedMod => {TestFlattenedMod}");
            fg.AppendLine($"TestBenchmarks => {TestBenchmarks}");
            fg.AppendLine($"TestLocators => {TestLocators}");
            DataFolderLocations?.ToString(fg);
            PassthroughSettings?.ToString(fg);
            fg.AppendLine("TargetGroups =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (TargetGroups.Overall != null)
                {
                    fg.AppendLine(TargetGroups.Overall.ToString());
                }
                if (TargetGroups.Specific != null)
                {
                    foreach (var subItem in TargetGroups.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TestingSettings_ErrorMask Combine(TestingSettings_ErrorMask rhs)
        {
            var ret = new TestingSettings_ErrorMask();
            ret.TestGroupMasks = this.TestGroupMasks.Combine(rhs.TestGroupMasks);
            ret.TestModList = this.TestModList.Combine(rhs.TestModList);
            ret.TestFlattenedMod = this.TestFlattenedMod.Combine(rhs.TestFlattenedMod);
            ret.TestBenchmarks = this.TestBenchmarks.Combine(rhs.TestBenchmarks);
            ret.TestLocators = this.TestLocators.Combine(rhs.TestLocators);
            ret.DataFolderLocations = new MaskItem<Exception, DataFolderLocations_ErrorMask>(this.DataFolderLocations.Overall.Combine(rhs.DataFolderLocations.Overall), ((IErrorMask<DataFolderLocations_ErrorMask>)this.DataFolderLocations.Specific).Combine(rhs.DataFolderLocations.Specific));
            ret.PassthroughSettings = new MaskItem<Exception, PassthroughSettings_ErrorMask>(this.PassthroughSettings.Overall.Combine(rhs.PassthroughSettings.Overall), ((IErrorMask<PassthroughSettings_ErrorMask>)this.PassthroughSettings.Specific).Combine(rhs.PassthroughSettings.Specific));
            ret.TargetGroups = new MaskItem<Exception, IEnumerable<MaskItem<Exception, TargetGroup_ErrorMask>>>(this.TargetGroups.Overall.Combine(rhs.TargetGroups.Overall), new List<MaskItem<Exception, TargetGroup_ErrorMask>>(this.TargetGroups.Specific.And(rhs.TargetGroups.Specific)));
            return ret;
        }
        public static TestingSettings_ErrorMask Combine(TestingSettings_ErrorMask lhs, TestingSettings_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestingSettings_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestingSettings_ErrorMask();
        }
        #endregion

    }
    public class TestingSettings_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool TestGroupMasks;
        public bool TestModList;
        public bool TestFlattenedMod;
        public bool TestBenchmarks;
        public bool TestLocators;
        public MaskItem<bool, DataFolderLocations_TranslationMask> DataFolderLocations;
        public MaskItem<bool, PassthroughSettings_TranslationMask> PassthroughSettings;
        public MaskItem<bool, TargetGroup_TranslationMask> TargetGroups;
        #endregion

        #region Ctors
        public TestingSettings_TranslationMask()
        {
        }

        public TestingSettings_TranslationMask(bool defaultOn)
        {
            this.TestGroupMasks = defaultOn;
            this.TestModList = defaultOn;
            this.TestFlattenedMod = defaultOn;
            this.TestBenchmarks = defaultOn;
            this.TestLocators = defaultOn;
            this.DataFolderLocations = new MaskItem<bool, DataFolderLocations_TranslationMask>(defaultOn, null);
            this.PassthroughSettings = new MaskItem<bool, PassthroughSettings_TranslationMask>(defaultOn, null);
            this.TargetGroups = new MaskItem<bool, TargetGroup_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((TestGroupMasks, null));
            ret.Add((TestModList, null));
            ret.Add((TestFlattenedMod, null));
            ret.Add((TestBenchmarks, null));
            ret.Add((TestLocators, null));
            ret.Add((DataFolderLocations?.Overall ?? true, DataFolderLocations?.Specific?.GetCrystal()));
            ret.Add((PassthroughSettings?.Overall ?? true, PassthroughSettings?.Specific?.GetCrystal()));
            ret.Add((TargetGroups?.Overall ?? true, TargetGroups?.Specific?.GetCrystal()));
        }
    }
}
#endregion

#endregion

