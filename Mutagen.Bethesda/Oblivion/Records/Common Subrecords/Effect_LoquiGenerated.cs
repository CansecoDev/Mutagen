/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Effect :
        IEffect,
        ILoquiObjectSetter<Effect>,
        IEquatable<Effect>,
        IEqualsMask
    {
        #region Ctor
        public Effect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MagicEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEDIDLink<MagicEffect> _MagicEffect = new EDIDLink<MagicEffect>();
        public IEDIDLink<MagicEffect> MagicEffect => this._MagicEffect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEDIDLinkGetter<IMagicEffectGetter> IEffectGetter.MagicEffect => this.MagicEffect;
        #endregion
        #region Magnitude
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Magnitude;
        public UInt32 Magnitude
        {
            get => this._Magnitude;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this._Magnitude = value;
            }
        }
        #endregion
        #region Area
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Area;
        public UInt32 Area
        {
            get => this._Area;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this._Area = value;
            }
        }
        #endregion
        #region Duration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Duration;
        public UInt32 Duration
        {
            get => this._Duration;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this._Duration = value;
            }
        }
        #endregion
        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Effect.EffectType _Type;
        public Effect.EffectType Type
        {
            get => this._Type;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this._Type = value;
            }
        }
        #endregion
        #region ActorValue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValueExtended _ActorValue;
        public ActorValueExtended ActorValue
        {
            get => this._ActorValue;
            set
            {
                this.EFITDataTypeState |= EFITDataType.Has;
                this._ActorValue = value;
            }
        }
        #endregion
        #region ScriptEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptEffect? _ScriptEffect;
        public ScriptEffect? ScriptEffect
        {
            get => _ScriptEffect;
            set => _ScriptEffect = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptEffectGetter? IEffectGetter.ScriptEffect => this.ScriptEffect;
        #endregion
        #region EFITDataTypeState
        public Effect.EFITDataType EFITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IEffectGetter rhs)) return false;
            return ((EffectCommon)((IEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Effect obj)
        {
            return ((EffectCommon)((IEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EffectCommon)((IEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => EffectXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Effect CreateFromXml(
            XElement node,
            Effect.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Effect CreateFromXml(
            XElement node,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Effect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Effect CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Effect();
            ((EffectSetterCommon)((IEffectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Effect CreateFromXml(
            string path,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Effect CreateFromXml(
            string path,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Effect CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Effect CreateFromXml(
            Stream stream,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Effect CreateFromXml(
            Stream stream,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Effect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MagicEffect = initialValue;
                this.Magnitude = initialValue;
                this.Area = initialValue;
                this.Duration = initialValue;
                this.Type = initialValue;
                this.ActorValue = initialValue;
                this.ScriptEffect = new MaskItem<TItem, ScriptEffect.Mask<TItem>?>(initialValue, new ScriptEffect.Mask<TItem>(initialValue));
                this.EFITDataTypeState = initialValue;
            }

            public Mask(
                TItem MagicEffect,
                TItem Magnitude,
                TItem Area,
                TItem Duration,
                TItem Type,
                TItem ActorValue,
                TItem ScriptEffect,
                TItem EFITDataTypeState)
            {
                this.MagicEffect = MagicEffect;
                this.Magnitude = Magnitude;
                this.Area = Area;
                this.Duration = Duration;
                this.Type = Type;
                this.ActorValue = ActorValue;
                this.ScriptEffect = new MaskItem<TItem, ScriptEffect.Mask<TItem>?>(ScriptEffect, new ScriptEffect.Mask<TItem>(ScriptEffect));
                this.EFITDataTypeState = EFITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MagicEffect;
            public TItem Magnitude;
            public TItem Area;
            public TItem Duration;
            public TItem Type;
            public TItem ActorValue;
            public MaskItem<TItem, ScriptEffect.Mask<TItem>?>? ScriptEffect { get; set; }
            public TItem EFITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MagicEffect, rhs.MagicEffect)) return false;
                if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
                if (!object.Equals(this.Area, rhs.Area)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
                if (!object.Equals(this.ScriptEffect, rhs.ScriptEffect)) return false;
                if (!object.Equals(this.EFITDataTypeState, rhs.EFITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.MagicEffect?.GetHashCode());
                ret = ret.CombineHashCode(this.Magnitude?.GetHashCode());
                ret = ret.CombineHashCode(this.Area?.GetHashCode());
                ret = ret.CombineHashCode(this.Duration?.GetHashCode());
                ret = ret.CombineHashCode(this.Type?.GetHashCode());
                ret = ret.CombineHashCode(this.ActorValue?.GetHashCode());
                ret = ret.CombineHashCode(this.ScriptEffect?.GetHashCode());
                ret = ret.CombineHashCode(this.EFITDataTypeState?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MagicEffect)) return false;
                if (!eval(this.Magnitude)) return false;
                if (!eval(this.Area)) return false;
                if (!eval(this.Duration)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ActorValue)) return false;
                if (ScriptEffect != null)
                {
                    if (!eval(this.ScriptEffect.Overall)) return false;
                    if (this.ScriptEffect.Specific != null && !this.ScriptEffect.Specific.All(eval)) return false;
                }
                if (!eval(this.EFITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MagicEffect)) return true;
                if (eval(this.Magnitude)) return true;
                if (eval(this.Area)) return true;
                if (eval(this.Duration)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ActorValue)) return true;
                if (ScriptEffect != null)
                {
                    if (eval(this.ScriptEffect.Overall)) return true;
                    if (this.ScriptEffect.Specific != null && this.ScriptEffect.Specific.Any(eval)) return true;
                }
                if (eval(this.EFITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Effect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MagicEffect = eval(this.MagicEffect);
                obj.Magnitude = eval(this.Magnitude);
                obj.Area = eval(this.Area);
                obj.Duration = eval(this.Duration);
                obj.Type = eval(this.Type);
                obj.ActorValue = eval(this.ActorValue);
                obj.ScriptEffect = this.ScriptEffect == null ? null : new MaskItem<R, ScriptEffect.Mask<R>?>(eval(this.ScriptEffect.Overall), this.ScriptEffect.Specific?.Translate(eval));
                obj.EFITDataTypeState = eval(this.EFITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Effect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Effect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Effect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.MagicEffect ?? true)
                    {
                        fg.AppendItem(MagicEffect, "MagicEffect");
                    }
                    if (printMask?.Magnitude ?? true)
                    {
                        fg.AppendItem(Magnitude, "Magnitude");
                    }
                    if (printMask?.Area ?? true)
                    {
                        fg.AppendItem(Area, "Area");
                    }
                    if (printMask?.Duration ?? true)
                    {
                        fg.AppendItem(Duration, "Duration");
                    }
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.ActorValue ?? true)
                    {
                        fg.AppendItem(ActorValue, "ActorValue");
                    }
                    if (printMask?.ScriptEffect?.Overall ?? true)
                    {
                        ScriptEffect?.ToString(fg);
                    }
                    if (printMask?.EFITDataTypeState ?? true)
                    {
                        fg.AppendItem(EFITDataTypeState, "EFITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MagicEffect;
            public Exception? Magnitude;
            public Exception? Area;
            public Exception? Duration;
            public Exception? Type;
            public Exception? ActorValue;
            public MaskItem<Exception?, ScriptEffect.ErrorMask?>? ScriptEffect;
            public Exception? EFITDataTypeState;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Effect_FieldIndex enu = (Effect_FieldIndex)index;
                switch (enu)
                {
                    case Effect_FieldIndex.MagicEffect:
                        return MagicEffect;
                    case Effect_FieldIndex.Magnitude:
                        return Magnitude;
                    case Effect_FieldIndex.Area:
                        return Area;
                    case Effect_FieldIndex.Duration:
                        return Duration;
                    case Effect_FieldIndex.Type:
                        return Type;
                    case Effect_FieldIndex.ActorValue:
                        return ActorValue;
                    case Effect_FieldIndex.ScriptEffect:
                        return ScriptEffect;
                    case Effect_FieldIndex.EFITDataTypeState:
                        return EFITDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Effect_FieldIndex enu = (Effect_FieldIndex)index;
                switch (enu)
                {
                    case Effect_FieldIndex.MagicEffect:
                        this.MagicEffect = ex;
                        break;
                    case Effect_FieldIndex.Magnitude:
                        this.Magnitude = ex;
                        break;
                    case Effect_FieldIndex.Area:
                        this.Area = ex;
                        break;
                    case Effect_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    case Effect_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Effect_FieldIndex.ActorValue:
                        this.ActorValue = ex;
                        break;
                    case Effect_FieldIndex.ScriptEffect:
                        this.ScriptEffect = new MaskItem<Exception?, ScriptEffect.ErrorMask?>(ex, null);
                        break;
                    case Effect_FieldIndex.EFITDataTypeState:
                        this.EFITDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Effect_FieldIndex enu = (Effect_FieldIndex)index;
                switch (enu)
                {
                    case Effect_FieldIndex.MagicEffect:
                        this.MagicEffect = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Magnitude:
                        this.Magnitude = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Area:
                        this.Area = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.ActorValue:
                        this.ActorValue = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.ScriptEffect:
                        this.ScriptEffect = (MaskItem<Exception?, ScriptEffect.ErrorMask?>?)obj;
                        break;
                    case Effect_FieldIndex.EFITDataTypeState:
                        this.EFITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MagicEffect != null) return true;
                if (Magnitude != null) return true;
                if (Area != null) return true;
                if (Duration != null) return true;
                if (Type != null) return true;
                if (ActorValue != null) return true;
                if (ScriptEffect != null) return true;
                if (EFITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(MagicEffect, "MagicEffect");
                fg.AppendItem(Magnitude, "Magnitude");
                fg.AppendItem(Area, "Area");
                fg.AppendItem(Duration, "Duration");
                fg.AppendItem(Type, "Type");
                fg.AppendItem(ActorValue, "ActorValue");
                ScriptEffect?.ToString(fg);
                fg.AppendItem(EFITDataTypeState, "EFITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MagicEffect = this.MagicEffect.Combine(rhs.MagicEffect);
                ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
                ret.Area = this.Area.Combine(rhs.Area);
                ret.Duration = this.Duration.Combine(rhs.Duration);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
                ret.ScriptEffect = this.ScriptEffect.Combine(rhs.ScriptEffect, (l, r) => l.Combine(r));
                ret.EFITDataTypeState = this.EFITDataTypeState.Combine(rhs.EFITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool MagicEffect;
            public bool Magnitude;
            public bool Area;
            public bool Duration;
            public bool Type;
            public bool ActorValue;
            public MaskItem<bool, ScriptEffect.TranslationMask?> ScriptEffect;
            public bool EFITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.MagicEffect = defaultOn;
                this.Magnitude = defaultOn;
                this.Area = defaultOn;
                this.Duration = defaultOn;
                this.Type = defaultOn;
                this.ActorValue = defaultOn;
                this.ScriptEffect = new MaskItem<bool, ScriptEffect.TranslationMask?>(defaultOn, null);
                this.EFITDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MagicEffect, null));
                ret.Add((Magnitude, null));
                ret.Add((Area, null));
                ret.Add((Duration, null));
                ret.Add((Type, null));
                ret.Add((ActorValue, null));
                ret.Add((ScriptEffect?.Overall ?? true, ScriptEffect?.Specific?.GetCrystal()));
                ret.Add((EFITDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Effect_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum EFITDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => EffectCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((EffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static Effect CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static Effect CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new Effect();
            ((EffectSetterCommon)((IEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEffectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((EffectSetterCommon)((IEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Effect GetNew()
        {
            return new Effect();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffect :
        IEffectGetter,
        ILoquiObjectSetter<IEffect>
    {
        new IEDIDLink<MagicEffect> MagicEffect { get; }
        new UInt32 Magnitude { get; set; }
        new UInt32 Area { get; set; }
        new UInt32 Duration { get; set; }
        new Effect.EffectType Type { get; set; }
        new ActorValueExtended ActorValue { get; set; }
        new ScriptEffect? ScriptEffect { get; set; }
        new Effect.EFITDataType EFITDataTypeState { get; set; }
    }

    public partial interface IEffectGetter :
        ILoquiObject,
        ILoquiObject<IEffectGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IEDIDLinkGetter<IMagicEffectGetter> MagicEffect { get; }
        UInt32 Magnitude { get; }
        UInt32 Area { get; }
        UInt32 Duration { get; }
        Effect.EffectType Type { get; }
        ActorValueExtended ActorValue { get; }
        IScriptEffectGetter? ScriptEffect { get; }
        Effect.EFITDataType EFITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class EffectMixIn
    {
        public static void Clear(this IEffect item)
        {
            ((EffectSetterCommon)((IEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Effect.Mask<bool> GetEqualsMask(
            this IEffectGetter item,
            IEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEffectGetter item,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEffectGetter item,
            FileGeneration fg,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            ((EffectCommon)((IEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IEffectGetter item,
            Effect.Mask<bool?> checkMask)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Effect.Mask<bool> GetHasBeenSetMask(this IEffectGetter item)
        {
            var ret = new Effect.Mask<bool>(false);
            ((EffectCommon)((IEffectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IEffectGetter item,
            IEffectGetter rhs)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs,
            Effect.TranslationMask? copyMask = null)
        {
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Effect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Effect DeepCopy(
            this IEffectGetter item,
            Effect.TranslationMask? copyMask = null)
        {
            return ((EffectSetterTranslationCommon)((IEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Effect DeepCopy(
            this IEffectGetter item,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? copyMask = null)
        {
            return ((EffectSetterTranslationCommon)((IEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Effect DeepCopy(
            this IEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectSetterTranslationCommon)((IEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEffect item,
            XElement node,
            Effect.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEffect item,
            XElement node,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Effect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((EffectSetterCommon)((IEffectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffect item,
            string path,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffect item,
            string path,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffect item,
            string path,
            ErrorMaskBuilder? errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IEffect item,
            Stream stream,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffect item,
            Stream stream,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffect item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Effect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IEffect item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IEffect item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((EffectSetterCommon)((IEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Effect_FieldIndex
    {
        MagicEffect = 0,
        Magnitude = 1,
        Area = 2,
        Duration = 3,
        Type = 4,
        ActorValue = 5,
        ScriptEffect = 6,
        EFITDataTypeState = 7,
    }
    #endregion

    #region Registration
    public partial class Effect_Registration : ILoquiRegistration
    {
        public static readonly Effect_Registration Instance = new Effect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 53,
            version: 0);

        public const string GUID = "85ccb56e-7055-4f2a-894d-f998f0ac9ab8";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(Effect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Effect.ErrorMask);

        public static readonly Type ClassType = typeof(Effect);

        public static readonly Type GetterType = typeof(IEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.Effect";

        public const string Name = "Effect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAGICEFFECT":
                    return (ushort)Effect_FieldIndex.MagicEffect;
                case "MAGNITUDE":
                    return (ushort)Effect_FieldIndex.Magnitude;
                case "AREA":
                    return (ushort)Effect_FieldIndex.Area;
                case "DURATION":
                    return (ushort)Effect_FieldIndex.Duration;
                case "TYPE":
                    return (ushort)Effect_FieldIndex.Type;
                case "ACTORVALUE":
                    return (ushort)Effect_FieldIndex.ActorValue;
                case "SCRIPTEFFECT":
                    return (ushort)Effect_FieldIndex.ScriptEffect;
                case "EFITDATATYPESTATE":
                    return (ushort)Effect_FieldIndex.EFITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                case Effect_FieldIndex.EFITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.ScriptEffect:
                    return true;
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.EFITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                case Effect_FieldIndex.EFITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return "MagicEffect";
                case Effect_FieldIndex.Magnitude:
                    return "Magnitude";
                case Effect_FieldIndex.Area:
                    return "Area";
                case Effect_FieldIndex.Duration:
                    return "Duration";
                case Effect_FieldIndex.Type:
                    return "Type";
                case Effect_FieldIndex.ActorValue:
                    return "ActorValue";
                case Effect_FieldIndex.ScriptEffect:
                    return "ScriptEffect";
                case Effect_FieldIndex.EFITDataTypeState:
                    return "EFITDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                case Effect_FieldIndex.EFITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                case Effect_FieldIndex.Magnitude:
                case Effect_FieldIndex.Area:
                case Effect_FieldIndex.Duration:
                case Effect_FieldIndex.Type:
                case Effect_FieldIndex.ActorValue:
                case Effect_FieldIndex.ScriptEffect:
                case Effect_FieldIndex.EFITDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Effect_FieldIndex enu = (Effect_FieldIndex)index;
            switch (enu)
            {
                case Effect_FieldIndex.MagicEffect:
                    return typeof(IEDIDLink<MagicEffect>);
                case Effect_FieldIndex.Magnitude:
                    return typeof(UInt32);
                case Effect_FieldIndex.Area:
                    return typeof(UInt32);
                case Effect_FieldIndex.Duration:
                    return typeof(UInt32);
                case Effect_FieldIndex.Type:
                    return typeof(Effect.EffectType);
                case Effect_FieldIndex.ActorValue:
                    return typeof(ActorValueExtended);
                case Effect_FieldIndex.ScriptEffect:
                    return typeof(ScriptEffect);
                case Effect_FieldIndex.EFITDataTypeState:
                    return typeof(Effect.EFITDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(EffectXmlWriteTranslation);
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType EFIT_HEADER = new RecordType("EFIT");
        public static readonly RecordType SCIT_HEADER = new RecordType("SCIT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = EFID_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(EffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class EffectSetterCommon
    {
        public static readonly EffectSetterCommon Instance = new EffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffect item)
        {
            ClearPartial();
            item.MagicEffect.EDID = RecordType.Null;
            item.Magnitude = default;
            item.Area = default;
            item.Duration = default;
            item.Type = default;
            item.ActorValue = default;
            item.ScriptEffect = null;
            item.EFITDataTypeState = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IEffect item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IEffect item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x44494645: // EFID
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Effect_FieldIndex.MagicEffect) return TryGet<int?>.Failure;
                    EffectBinaryCreateTranslation.FillBinaryEffectInitialCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x54494645: // EFIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.EFITDataTypeState = Effect.EFITDataType.Has;
                    }
                    item.MagicEffect.EDID = Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: RecordType.Null);
                    item.Magnitude = dataFrame.ReadUInt32();
                    item.Area = dataFrame.ReadUInt32();
                    item.Duration = dataFrame.ReadUInt32();
                    item.Type = EnumBinaryTranslation<Effect.EffectType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ActorValue = EnumBinaryTranslation<ActorValueExtended>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return TryGet<int?>.Succeed((int)Effect_FieldIndex.ActorValue);
                }
                case 0x54494353: // SCIT
                {
                    item.ScriptEffect = Mutagen.Bethesda.Oblivion.ScriptEffect.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Effect_FieldIndex.ScriptEffect);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IEffect item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class EffectCommon
    {
        public static readonly EffectCommon Instance = new EffectCommon();

        public Effect.Mask<bool> GetEqualsMask(
            IEffectGetter item,
            IEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Effect.Mask<bool>(false);
            ((EffectCommon)((IEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectGetter item,
            IEffectGetter rhs,
            Effect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MagicEffect = object.Equals(item.MagicEffect, rhs.MagicEffect);
            ret.Magnitude = item.Magnitude == rhs.Magnitude;
            ret.Area = item.Area == rhs.Area;
            ret.Duration = item.Duration == rhs.Duration;
            ret.Type = item.Type == rhs.Type;
            ret.ActorValue = item.ActorValue == rhs.ActorValue;
            ret.ScriptEffect = EqualsMaskHelper.EqualsHelper(
                item.ScriptEffect,
                rhs.ScriptEffect,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EFITDataTypeState = item.EFITDataTypeState == rhs.EFITDataTypeState;
        }
        
        public string ToString(
            IEffectGetter item,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IEffectGetter item,
            FileGeneration fg,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Effect =>");
            }
            else
            {
                fg.AppendLine($"{name} (Effect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IEffectGetter item,
            FileGeneration fg,
            Effect.Mask<bool>? printMask = null)
        {
            if (printMask?.MagicEffect ?? true)
            {
                fg.AppendItem(item.MagicEffect, "MagicEffect");
            }
            if (printMask?.Magnitude ?? true)
            {
                fg.AppendItem(item.Magnitude, "Magnitude");
            }
            if (printMask?.Area ?? true)
            {
                fg.AppendItem(item.Area, "Area");
            }
            if (printMask?.Duration ?? true)
            {
                fg.AppendItem(item.Duration, "Duration");
            }
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.ActorValue ?? true)
            {
                fg.AppendItem(item.ActorValue, "ActorValue");
            }
            if ((printMask?.ScriptEffect?.Overall ?? true)
                && item.ScriptEffect.TryGet(out var ScriptEffectItem))
            {
                ScriptEffectItem?.ToString(fg, "ScriptEffect");
            }
            if (printMask?.EFITDataTypeState ?? true)
            {
                fg.AppendItem(item.EFITDataTypeState, "EFITDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IEffectGetter item,
            Effect.Mask<bool?> checkMask)
        {
            if (checkMask.ScriptEffect?.Overall.HasValue ?? false && checkMask.ScriptEffect.Overall.Value != (item.ScriptEffect != null)) return false;
            if (checkMask.ScriptEffect?.Specific != null && (item.ScriptEffect == null || !item.ScriptEffect.HasBeenSet(checkMask.ScriptEffect.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IEffectGetter item,
            Effect.Mask<bool> mask)
        {
            mask.MagicEffect = true;
            mask.Magnitude = true;
            mask.Area = true;
            mask.Duration = true;
            mask.Type = true;
            mask.ActorValue = true;
            var itemScriptEffect = item.ScriptEffect;
            mask.ScriptEffect = new MaskItem<bool, ScriptEffect.Mask<bool>?>(itemScriptEffect != null, itemScriptEffect?.GetHasBeenSetMask());
            mask.EFITDataTypeState = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectGetter? lhs,
            IEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.MagicEffect.Equals(rhs.MagicEffect)) return false;
            if (lhs.Magnitude != rhs.Magnitude) return false;
            if (lhs.Area != rhs.Area) return false;
            if (lhs.Duration != rhs.Duration) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.ActorValue != rhs.ActorValue) return false;
            if (!object.Equals(lhs.ScriptEffect, rhs.ScriptEffect)) return false;
            if (lhs.EFITDataTypeState != rhs.EFITDataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IEffectGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.MagicEffect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Magnitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Area).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Duration).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ActorValue).CombineHashCode(ret);
            if (item.ScriptEffect.TryGet(out var ScriptEffectitem))
            {
                ret = HashHelper.GetHashCode(ScriptEffectitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.EFITDataTypeState).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Effect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IEffectGetter obj)
        {
            yield return obj.MagicEffect;
            if (obj.ScriptEffect != null)
            {
                foreach (var item in obj.ScriptEffect.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class EffectSetterTranslationCommon
    {
        public static readonly EffectSetterTranslationCommon Instance = new EffectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IEffect item,
            IEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.MagicEffect) ?? true))
            {
                item.MagicEffect.EDID = rhs.MagicEffect.EDID;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Magnitude) ?? true))
            {
                item.Magnitude = rhs.Magnitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Area) ?? true))
            {
                item.Area = rhs.Area;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Duration) ?? true))
            {
                item.Duration = rhs.Duration;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.ActorValue) ?? true))
            {
                item.ActorValue = rhs.ActorValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.ScriptEffect) ?? true))
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.ScriptEffect);
                try
                {
                    if(rhs.ScriptEffect.TryGet(out var rhsScriptEffect))
                    {
                        item.ScriptEffect = rhsScriptEffect.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Effect_FieldIndex.ScriptEffect));
                    }
                    else
                    {
                        item.ScriptEffect = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.EFITDataTypeState) ?? true))
            {
                item.EFITDataTypeState = rhs.EFITDataTypeState;
            }
        }
        
        #endregion
        
        public Effect DeepCopy(
            IEffectGetter item,
            Effect.TranslationMask? copyMask = null)
        {
            Effect ret = (Effect)((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Effect DeepCopy(
            IEffectGetter item,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? copyMask = null)
        {
            Effect ret = (Effect)((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Effect DeepCopy(
            IEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Effect ret = (Effect)((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Effect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Effect_Registration.Instance;
        public static Effect_Registration Registration => Effect_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return EffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IEffectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IEffectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static EffectXmlWriteTranslation Instance = new EffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IEffectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (item.EFITDataTypeState.HasFlag(Effect.EFITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.MagicEffect) ?? true))
                {
                    RecordTypeXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MagicEffect),
                        item: item.MagicEffect.EDID,
                        fieldIndex: (int)Effect_FieldIndex.MagicEffect,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Magnitude) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Magnitude),
                        item: item.Magnitude,
                        fieldIndex: (int)Effect_FieldIndex.Magnitude,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Area) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Area),
                        item: item.Area,
                        fieldIndex: (int)Effect_FieldIndex.Area,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Duration) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Duration),
                        item: item.Duration,
                        fieldIndex: (int)Effect_FieldIndex.Duration,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Effect.EffectType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)Effect_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.ActorValue) ?? true))
                {
                    EnumXmlTranslation<ActorValueExtended>.Instance.Write(
                        node: node,
                        name: nameof(item.ActorValue),
                        item: item.ActorValue,
                        fieldIndex: (int)Effect_FieldIndex.ActorValue,
                        errorMask: errorMask);
                }
            }
            if ((item.ScriptEffect != null)
                && (translationMask?.GetShouldTranslate((int)Effect_FieldIndex.ScriptEffect) ?? true))
            {
                if (item.ScriptEffect.TryGet(out var ScriptEffectItem))
                {
                    ((ScriptEffectXmlWriteTranslation)((IXmlItem)ScriptEffectItem).XmlWriteTranslator).Write(
                        item: ScriptEffectItem,
                        node: node,
                        name: nameof(item.ScriptEffect),
                        fieldIndex: (int)Effect_FieldIndex.ScriptEffect,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Effect_FieldIndex.ScriptEffect));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Effect_FieldIndex.EFITDataTypeState) ?? true))
            {
                EnumXmlTranslation<Effect.EFITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.EFITDataTypeState),
                    item: item.EFITDataTypeState,
                    fieldIndex: (int)Effect_FieldIndex.EFITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Effect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Effect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IEffectGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IEffectGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class EffectXmlCreateTranslation
    {
        public readonly static EffectXmlCreateTranslation Instance = new EffectXmlCreateTranslation();

        public static void FillPublicXml(
            IEffect item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IEffect item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "MagicEffect":
                    errorMask?.PushIndex((int)Effect_FieldIndex.MagicEffect);
                    try
                    {
                        item.MagicEffect.EDID = RecordTypeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.EFITDataTypeState |= Effect.EFITDataType.Has;
                    break;
                case "Magnitude":
                    errorMask?.PushIndex((int)Effect_FieldIndex.Magnitude);
                    try
                    {
                        item.Magnitude = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Area":
                    errorMask?.PushIndex((int)Effect_FieldIndex.Area);
                    try
                    {
                        item.Area = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Duration":
                    errorMask?.PushIndex((int)Effect_FieldIndex.Duration);
                    try
                    {
                        item.Duration = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Type":
                    errorMask?.PushIndex((int)Effect_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<Effect.EffectType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActorValue":
                    errorMask?.PushIndex((int)Effect_FieldIndex.ActorValue);
                    try
                    {
                        item.ActorValue = EnumXmlTranslation<ActorValueExtended>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ScriptEffect":
                    errorMask?.PushIndex((int)Effect_FieldIndex.ScriptEffect);
                    try
                    {
                        item.ScriptEffect = LoquiXmlTranslation<ScriptEffect>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Effect_FieldIndex.ScriptEffect));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EFITDataTypeState":
                    errorMask?.PushIndex((int)Effect_FieldIndex.EFITDataTypeState);
                    try
                    {
                        item.EFITDataTypeState = EnumXmlTranslation<Effect.EFITDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class EffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IEffectGetter item,
            XElement node,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Effect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            string path,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            Stream stream,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((EffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            XElement node,
            string? name = null,
            Effect.TranslationMask? translationMask = null)
        {
            ((EffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IEffectGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((EffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((EffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static EffectBinaryWriteTranslation Instance = new EffectBinaryWriteTranslation();

        static partial void WriteBinaryEffectInitialCustom(
            MutagenWriter writer,
            IEffectGetter item,
            MasterReferenceReader masterReferences);

        public static void WriteBinaryEffectInitial(
            MutagenWriter writer,
            IEffectGetter item,
            MasterReferenceReader masterReferences)
        {
            WriteBinaryEffectInitialCustom(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
        }

        public static void WriteEmbedded(
            IEffectGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
        }

        public static void WriteRecordTypes(
            IEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            EffectBinaryWriteTranslation.WriteBinaryEffectInitial(
                writer: writer,
                item: item,
                masterReferences: masterReferences);
            if (item.EFITDataTypeState.HasFlag(Effect.EFITDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Effect_Registration.EFIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.MagicEffect);
                    writer.Write(item.Magnitude);
                    writer.Write(item.Area);
                    writer.Write(item.Duration);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Effect.EffectType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValueExtended>.Instance.Write(
                        writer,
                        item.ActorValue,
                        length: 4);
                }
            }
            if (item.ScriptEffect.TryGet(out var ScriptEffectItem))
            {
                ((ScriptEffectBinaryWriteTranslation)((IBinaryItem)ScriptEffectItem).BinaryWriteTranslator).Write(
                    item: ScriptEffectItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            IEffectGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            WriteEmbedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IEffectGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class EffectBinaryCreateTranslation
    {
        public readonly static EffectBinaryCreateTranslation Instance = new EffectBinaryCreateTranslation();

        static partial void FillBinaryEffectInitialCustom(
            MutagenFrame frame,
            IEffect item,
            MasterReferenceReader masterReferences);

        public static void FillBinaryEffectInitialCustomPublic(
            MutagenFrame frame,
            IEffect item,
            MasterReferenceReader masterReferences)
        {
            FillBinaryEffectInitialCustom(
                frame: frame,
                item: item,
                masterReferences: masterReferences);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class EffectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IEffectGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            ((EffectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectBinaryOverlay :
        BinaryOverlay,
        IEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Effect_Registration.Instance;
        public static Effect_Registration Registration => Effect_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IEffectGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IEffectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEffectGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => EffectCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => EffectXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((EffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region EffectInitial
        partial void EffectInitialCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        private int? _EFITLocation;
        public Effect.EFITDataType EFITDataTypeState { get; private set; }
        #region MagicEffect
        private int _MagicEffectLocation => _EFITLocation!.Value + 0x0;
        private bool _MagicEffect_IsSet => _EFITLocation.HasValue;
        public IEDIDLinkGetter<IMagicEffectGetter> MagicEffect => _MagicEffect_IsSet ? new EDIDLink<IMagicEffectGetter>(new RecordType(BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MagicEffectLocation, 4)))) : EDIDLink<IMagicEffectGetter>.Empty;
        #endregion
        #region Magnitude
        private int _MagnitudeLocation => _EFITLocation!.Value + 0x4;
        private bool _Magnitude_IsSet => _EFITLocation.HasValue;
        public UInt32 Magnitude => _Magnitude_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_MagnitudeLocation, 4)) : default;
        #endregion
        #region Area
        private int _AreaLocation => _EFITLocation!.Value + 0x8;
        private bool _Area_IsSet => _EFITLocation.HasValue;
        public UInt32 Area => _Area_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_AreaLocation, 4)) : default;
        #endregion
        #region Duration
        private int _DurationLocation => _EFITLocation!.Value + 0xC;
        private bool _Duration_IsSet => _EFITLocation.HasValue;
        public UInt32 Duration => _Duration_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_DurationLocation, 4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _EFITLocation!.Value + 0x10;
        private bool _Type_IsSet => _EFITLocation.HasValue;
        public Effect.EffectType Type => _Type_IsSet ? (Effect.EffectType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 4)) : default;
        #endregion
        #region ActorValue
        private int _ActorValueLocation => _EFITLocation!.Value + 0x14;
        private bool _ActorValue_IsSet => _EFITLocation.HasValue;
        public ActorValueExtended ActorValue => _ActorValue_IsSet ? (ActorValueExtended)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ActorValueLocation, 4)) : default;
        #endregion
        #region ScriptEffect
        public IScriptEffectGetter? ScriptEffect { get; private set; }
        public bool ScriptEffect_IsSet => ScriptEffect != null;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected EffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static EffectBinaryOverlay EffectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EffectBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x44494645: // EFID
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)Effect_FieldIndex.MagicEffect) return TryGet<int?>.Failure;
                    EffectInitialCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(lastParsed);
                }
                case 0x54494645: // EFIT
                {
                    _EFITLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.EFITDataTypeState = Effect.EFITDataType.Has;
                    return TryGet<int?>.Succeed((int)Effect_FieldIndex.ActorValue);
                }
                case 0x54494353: // SCIT
                {
                    this.ScriptEffect = ScriptEffectBinaryOverlay.ScriptEffectFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Effect_FieldIndex.ScriptEffect);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

