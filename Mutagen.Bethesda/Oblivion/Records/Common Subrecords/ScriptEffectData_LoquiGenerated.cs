/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptEffectData :
        IScriptEffectData,
        ILoquiObjectSetter<ScriptEffectData>,
        IEquatable<ScriptEffectData>,
        IEqualsMask
    {
        #region Ctor
        public ScriptEffectData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public ScriptEffectData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Script
        public FormLink<Script> Script { get; set; } = new FormLink<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLink<IScriptGetter> IScriptEffectDataGetter.Script => this.Script;
        #endregion
        #region MagicSchool
        public MagicSchool MagicSchool { get; set; } = default;
        #endregion
        #region VisualEffect
        public EDIDLink<MagicEffect> VisualEffect { get; set; } = new EDIDLink<MagicEffect>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEDIDLink<IMagicEffectGetter> IScriptEffectDataGetter.VisualEffect => this.VisualEffect;
        #endregion
        #region Flags
        public ScriptEffect.Flag Flags { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptEffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IScriptEffectDataGetter rhs)) return false;
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ScriptEffectData obj)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ScriptEffectDataCommon)((IScriptEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ScriptEffectDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ScriptEffectDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ScriptEffectData CreateFromXml(
            XElement node,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ScriptEffectData CreateFromXml(
            XElement node,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptEffectData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ScriptEffectData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ScriptEffectData();
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ScriptEffectData CreateFromXml(
            string path,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ScriptEffectData CreateFromXml(
            string path,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptEffectData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ScriptEffectData CreateFromXml(
            Stream stream,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ScriptEffectData CreateFromXml(
            Stream stream,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ScriptEffectData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Script = initialValue;
                this.MagicSchool = initialValue;
                this.VisualEffect = initialValue;
                this.Flags = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Script,
                TItem MagicSchool,
                TItem VisualEffect,
                TItem Flags)
            {
                this.Versioning = Versioning;
                this.Script = Script;
                this.MagicSchool = MagicSchool;
                this.VisualEffect = VisualEffect;
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Script;
            public TItem MagicSchool;
            public TItem VisualEffect;
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
                if (!object.Equals(this.VisualEffect, rhs.VisualEffect)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Script);
                hash.Add(this.MagicSchool);
                hash.Add(this.VisualEffect);
                hash.Add(this.Flags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.MagicSchool)) return false;
                if (!eval(this.VisualEffect)) return false;
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.MagicSchool)) return true;
                if (eval(this.VisualEffect)) return true;
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptEffectData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Script = eval(this.Script);
                obj.MagicSchool = eval(this.MagicSchool);
                obj.VisualEffect = eval(this.VisualEffect);
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ScriptEffectData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ScriptEffectData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ScriptEffectData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.MagicSchool ?? true)
                    {
                        fg.AppendItem(MagicSchool, "MagicSchool");
                    }
                    if (printMask?.VisualEffect ?? true)
                    {
                        fg.AppendItem(VisualEffect, "VisualEffect");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Script;
            public Exception? MagicSchool;
            public Exception? VisualEffect;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ScriptEffectData_FieldIndex.Versioning:
                        return Versioning;
                    case ScriptEffectData_FieldIndex.Script:
                        return Script;
                    case ScriptEffectData_FieldIndex.MagicSchool:
                        return MagicSchool;
                    case ScriptEffectData_FieldIndex.VisualEffect:
                        return VisualEffect;
                    case ScriptEffectData_FieldIndex.Flags:
                        return Flags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ScriptEffectData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case ScriptEffectData_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case ScriptEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = ex;
                        break;
                    case ScriptEffectData_FieldIndex.VisualEffect:
                        this.VisualEffect = ex;
                        break;
                    case ScriptEffectData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
                switch (enu)
                {
                    case ScriptEffectData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.VisualEffect:
                        this.VisualEffect = (Exception?)obj;
                        break;
                    case ScriptEffectData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Script != null) return true;
                if (MagicSchool != null) return true;
                if (VisualEffect != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Script, "Script");
                fg.AppendItem(MagicSchool, "MagicSchool");
                fg.AppendItem(VisualEffect, "VisualEffect");
                fg.AppendItem(Flags, "Flags");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
                ret.VisualEffect = this.VisualEffect.Combine(rhs.VisualEffect);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool Script;
            public bool MagicSchool;
            public bool VisualEffect;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.Script = defaultOn;
                this.MagicSchool = defaultOn;
                this.VisualEffect = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Script, null));
                ret.Add((MagicSchool, null));
                ret.Add((VisualEffect, null));
                ret.Add((Flags, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ScriptEffectData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1,
            Break1 = 2
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ScriptEffectDataCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ScriptEffectDataCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptEffectDataCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptEffectDataCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ScriptEffectData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ScriptEffectData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptEffectData();
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptEffectDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScriptEffectData GetNew()
        {
            return new ScriptEffectData();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptEffectData :
        IScriptEffectDataGetter,
        ILoquiObjectSetter<IScriptEffectData>
    {
        new ScriptEffectData.VersioningBreaks Versioning { get; set; }
        new FormLink<Script> Script { get; set; }
        new MagicSchool MagicSchool { get; set; }
        new EDIDLink<MagicEffect> VisualEffect { get; set; }
        new ScriptEffect.Flag Flags { get; set; }
    }

    public partial interface IScriptEffectDataGetter :
        ILoquiObject,
        ILoquiObject<IScriptEffectDataGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ScriptEffectData_Registration.Instance;
        ScriptEffectData.VersioningBreaks Versioning { get; }
        IFormLink<IScriptGetter> Script { get; }
        MagicSchool MagicSchool { get; }
        IEDIDLink<IMagicEffectGetter> VisualEffect { get; }
        ScriptEffect.Flag Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptEffectDataMixIn
    {
        public static void Clear(this IScriptEffectData item)
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptEffectData.Mask<bool> GetEqualsMask(
            this IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IScriptEffectDataGetter item,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IScriptEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IScriptEffectDataGetter item,
            ScriptEffectData.Mask<bool?> checkMask)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ScriptEffectData.Mask<bool> GetHasBeenSetMask(this IScriptEffectDataGetter item)
        {
            var ret = new ScriptEffectData.Mask<bool>(false);
            ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs)
        {
            return ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs)
        {
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ScriptEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptEffectData lhs,
            IScriptEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ScriptEffectData DeepCopy(
            this IScriptEffectDataGetter item,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            return ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptEffectData DeepCopy(
            this IScriptEffectDataGetter item,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            return ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptEffectData DeepCopy(
            this IScriptEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptEffectDataSetterTranslationCommon)((IScriptEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptEffectData item,
            XElement node,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IScriptEffectData item,
            XElement node,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            string path,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            string path,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            string path,
            ErrorMaskBuilder? errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            Stream stream,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            Stream stream,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IScriptEffectData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IScriptEffectData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IScriptEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptEffectDataSetterCommon)((IScriptEffectDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ScriptEffectData_FieldIndex
    {
        Versioning = 0,
        Script = 1,
        MagicSchool = 2,
        VisualEffect = 3,
        Flags = 4,
    }
    #endregion

    #region Registration
    public partial class ScriptEffectData_Registration : ILoquiRegistration
    {
        public static readonly ScriptEffectData_Registration Instance = new ScriptEffectData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 220,
            version: 0);

        public const string GUID = "dd76cd47-15a0-437f-8c99-011168a7e431";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptEffectData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptEffectData.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptEffectData);

        public static readonly Type GetterType = typeof(IScriptEffectDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptEffectData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptEffectData";

        public const string Name = "ScriptEffectData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)ScriptEffectData_FieldIndex.Versioning;
                case "SCRIPT":
                    return (ushort)ScriptEffectData_FieldIndex.Script;
                case "MAGICSCHOOL":
                    return (ushort)ScriptEffectData_FieldIndex.MagicSchool;
                case "VISUALEFFECT":
                    return (ushort)ScriptEffectData_FieldIndex.VisualEffect;
                case "FLAGS":
                    return (ushort)ScriptEffectData_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                case ScriptEffectData_FieldIndex.Script:
                case ScriptEffectData_FieldIndex.MagicSchool:
                case ScriptEffectData_FieldIndex.VisualEffect:
                case ScriptEffectData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                case ScriptEffectData_FieldIndex.Script:
                case ScriptEffectData_FieldIndex.MagicSchool:
                case ScriptEffectData_FieldIndex.VisualEffect:
                case ScriptEffectData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                case ScriptEffectData_FieldIndex.Script:
                case ScriptEffectData_FieldIndex.MagicSchool:
                case ScriptEffectData_FieldIndex.VisualEffect:
                case ScriptEffectData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                    return "Versioning";
                case ScriptEffectData_FieldIndex.Script:
                    return "Script";
                case ScriptEffectData_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case ScriptEffectData_FieldIndex.VisualEffect:
                    return "VisualEffect";
                case ScriptEffectData_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                case ScriptEffectData_FieldIndex.Script:
                case ScriptEffectData_FieldIndex.MagicSchool:
                case ScriptEffectData_FieldIndex.VisualEffect:
                case ScriptEffectData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                case ScriptEffectData_FieldIndex.Script:
                case ScriptEffectData_FieldIndex.MagicSchool:
                case ScriptEffectData_FieldIndex.VisualEffect:
                case ScriptEffectData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ScriptEffectData_FieldIndex enu = (ScriptEffectData_FieldIndex)index;
            switch (enu)
            {
                case ScriptEffectData_FieldIndex.Versioning:
                    return typeof(ScriptEffectData.VersioningBreaks);
                case ScriptEffectData_FieldIndex.Script:
                    return typeof(FormLink<Script>);
                case ScriptEffectData_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case ScriptEffectData_FieldIndex.VisualEffect:
                    return typeof(EDIDLink<MagicEffect>);
                case ScriptEffectData_FieldIndex.Flags:
                    return typeof(ScriptEffect.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ScriptEffectDataXmlWriteTranslation);
        public static readonly RecordType SCIT_HEADER = new RecordType("SCIT");
        public static readonly RecordType TriggeringRecordType = SCIT_HEADER;
        public const int NumStructFields = 4;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(ScriptEffectDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ScriptEffectDataSetterCommon
    {
        public static readonly ScriptEffectDataSetterCommon Instance = new ScriptEffectDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptEffectData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Script = FormLink<Script>.Null;
            item.MagicSchool = default;
            item.VisualEffect = EDIDLink<MagicEffect>.Null;
            item.Flags = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IScriptEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptEffectDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ScriptEffectData_Registration.SCIT_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ScriptEffectDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ScriptEffectDataCommon
    {
        public static readonly ScriptEffectDataCommon Instance = new ScriptEffectDataCommon();

        public ScriptEffectData.Mask<bool> GetEqualsMask(
            IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptEffectData.Mask<bool>(false);
            ((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptEffectDataGetter item,
            IScriptEffectDataGetter rhs,
            ScriptEffectData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.VisualEffect = object.Equals(item.VisualEffect, rhs.VisualEffect);
            ret.Flags = item.Flags == rhs.Flags;
        }
        
        public string ToString(
            IScriptEffectDataGetter item,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IScriptEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ScriptEffectData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ScriptEffectData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IScriptEffectDataGetter item,
            FileGeneration fg,
            ScriptEffectData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Script ?? true)
            {
                fg.AppendItem(item.Script, "Script");
            }
            if (printMask?.MagicSchool ?? true)
            {
                fg.AppendItem(item.MagicSchool, "MagicSchool");
            }
            if (printMask?.VisualEffect ?? true)
            {
                fg.AppendItem(item.VisualEffect, "VisualEffect");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
        }
        
        public bool HasBeenSet(
            IScriptEffectDataGetter item,
            ScriptEffectData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IScriptEffectDataGetter item,
            ScriptEffectData.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.Script = true;
            mask.MagicSchool = true;
            mask.VisualEffect = true;
            mask.Flags = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptEffectDataGetter? lhs,
            IScriptEffectDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (lhs.MagicSchool != rhs.MagicSchool) return false;
            if (!lhs.VisualEffect.Equals(rhs.VisualEffect)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            return true;
        }
        
        public virtual int GetHashCode(IScriptEffectDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Script);
            hash.Add(item.MagicSchool);
            hash.Add(item.VisualEffect);
            hash.Add(item.Flags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScriptEffectData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IScriptEffectDataGetter obj)
        {
            yield return obj.Script.FormKey;
            yield break;
        }
        
        public void RemapLinks(IScriptEffectDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ScriptEffectDataSetterTranslationCommon
    {
        public static readonly ScriptEffectDataSetterTranslationCommon Instance = new ScriptEffectDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IScriptEffectData item,
            IScriptEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Script) ?? true))
            {
                item.Script = rhs.Script.FormKey;
            }
            if (rhs.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.MagicSchool) ?? true))
            {
                item.MagicSchool = rhs.MagicSchool;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.VisualEffect) ?? true))
            {
                item.VisualEffect = rhs.VisualEffect.EDID;
            }
            if (rhs.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break1)) return;
            if ((copyMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        #endregion
        
        public ScriptEffectData DeepCopy(
            IScriptEffectDataGetter item,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            ScriptEffectData ret = (ScriptEffectData)((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptEffectData DeepCopy(
            IScriptEffectDataGetter item,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? copyMask = null)
        {
            ScriptEffectData ret = (ScriptEffectData)((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ScriptEffectData DeepCopy(
            IScriptEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptEffectData ret = (ScriptEffectData)((ScriptEffectDataCommon)((IScriptEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptEffectData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffectData_Registration.Instance;
        public static ScriptEffectData_Registration Registration => ScriptEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScriptEffectDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptEffectDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ScriptEffectDataXmlWriteTranslation Instance = new ScriptEffectDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IScriptEffectDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<ScriptEffectData.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)ScriptEffectData_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey,
                    fieldIndex: (int)ScriptEffectData_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.MagicSchool) ?? true))
            {
                EnumXmlTranslation<MagicSchool>.Instance.Write(
                    node: node,
                    name: nameof(item.MagicSchool),
                    item: item.MagicSchool,
                    fieldIndex: (int)ScriptEffectData_FieldIndex.MagicSchool,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.VisualEffect) ?? true))
            {
                RecordTypeXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VisualEffect),
                    item: item.VisualEffect.EDID,
                    fieldIndex: (int)ScriptEffectData_FieldIndex.VisualEffect,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ScriptEffectData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<ScriptEffect.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)ScriptEffectData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IScriptEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ScriptEffectData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ScriptEffectData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IScriptEffectDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IScriptEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IScriptEffectDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ScriptEffectDataXmlCreateTranslation
    {
        public readonly static ScriptEffectDataXmlCreateTranslation Instance = new ScriptEffectDataXmlCreateTranslation();

        public static void FillPublicXml(
            IScriptEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ScriptEffectDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IScriptEffectData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)ScriptEffectData_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<ScriptEffectData.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)ScriptEffectData_FieldIndex.Script);
                    try
                    {
                        item.Script = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSchool":
                    errorMask?.PushIndex((int)ScriptEffectData_FieldIndex.MagicSchool);
                    try
                    {
                        item.MagicSchool = EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VisualEffect":
                    errorMask?.PushIndex((int)ScriptEffectData_FieldIndex.VisualEffect);
                    try
                    {
                        item.VisualEffect = RecordTypeXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)ScriptEffectData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<ScriptEffect.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ScriptEffectDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            XElement node,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ScriptEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            string path,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            Stream stream,
            out ScriptEffectData.ErrorMask errorMask,
            ScriptEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ScriptEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            XElement node,
            string? name = null,
            ScriptEffectData.TranslationMask? translationMask = null)
        {
            ((ScriptEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ScriptEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IScriptEffectDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ScriptEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptEffectDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ScriptEffectDataBinaryWriteTranslation Instance = new ScriptEffectDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IScriptEffectDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Script);
            if (!item.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break0))
            {
                Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                    writer,
                    item.MagicSchool,
                    length: 4);
                Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.VisualEffect);
                if (!item.Versioning.HasFlag(ScriptEffectData.VersioningBreaks.Break1))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ScriptEffect.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IScriptEffectDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ScriptEffectData_Registration.SCIT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IScriptEffectDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ScriptEffectDataBinaryCreateTranslation
    {
        public readonly static ScriptEffectDataBinaryCreateTranslation Instance = new ScriptEffectDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IScriptEffectData item,
            MutagenFrame frame)
        {
            item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            if (frame.Complete)
            {
                item.Versioning |= ScriptEffectData.VersioningBreaks.Break0;
                return;
            }
            item.MagicSchool = EnumBinaryTranslation<MagicSchool>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.VisualEffect = Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: RecordType.Null);
            if (frame.Complete)
            {
                item.Versioning |= ScriptEffectData.VersioningBreaks.Break1;
                return;
            }
            item.Flags = EnumBinaryTranslation<ScriptEffect.Flag>.Instance.Parse(frame: frame.SpawnWithLength(4));
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptEffectDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptEffectDataGetter item,
            MutagenWriter writer)
        {
            ((ScriptEffectDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ScriptEffectDataBinaryOverlay :
        BinaryOverlay,
        IScriptEffectDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptEffectData_Registration.Instance;
        public static ScriptEffectData_Registration Registration => ScriptEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScriptEffectDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScriptEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IScriptEffectDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => ScriptEffectDataCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => ScriptEffectDataCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptEffectDataCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptEffectDataCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ScriptEffectDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ScriptEffectDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ScriptEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ScriptEffectData.VersioningBreaks Versioning { get; private set; }
        public IFormLink<IScriptGetter> Script => new FormLink<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x0, 0x4))));
        public MagicSchool MagicSchool => (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public IEDIDLink<IMagicEffectGetter> VisualEffect => new EDIDLink<IMagicEffectGetter>(new RecordType(BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4))));
        public ScriptEffect.Flag Flags => (ScriptEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0xC, 0x4));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptEffectDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ScriptEffectDataBinaryOverlay ScriptEffectDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ScriptEffectDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x4)
            {
                ret.Versioning |= ScriptEffectData.VersioningBreaks.Break0;
            }
            if (ret._data.Length <= 0xC)
            {
                ret.Versioning |= ScriptEffectData.VersioningBreaks.Break1;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ScriptEffectDataBinaryOverlay ScriptEffectDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ScriptEffectDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ScriptEffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

