/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Group<T> :
        IGroup<T>,
        ILoquiObjectSetter<Group<T>>,
        IEquatable<Group<T>>,
        IEqualsMask
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        #region Ctor
        protected Group()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        static Group()
        {
            T_RecordType = (RecordType)LoquiRegistration.GetRegister(typeof(T))!.GetType().GetField(Mutagen.Bethesda.Constants.TRIGGERING_RECORDTYPE_MEMBER).GetValue(null);
        }

        #region GroupType
        public GroupTypeEnum GroupType { get; set; } = default;
        #endregion
        #region LastModified
        public Int32 LastModified { get; set; } = default;
        #endregion
        #region RecordCache
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ICache<T, FormKey> _RecordCache = new Cache<T, FormKey>((item) => item.FormKey);
        public ICache<T, FormKey> RecordCache => _RecordCache;
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICache<T, FormKey> IGroup<T>.RecordCache => _RecordCache;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyCache<T, FormKey> IGroupGetter<T>.RecordCache => _RecordCache;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            GroupMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IGroupGetter<T> rhs)) return false;
            return ((GroupCommon<T>)((IGroupGetter<T>)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Group<T> obj)
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((GroupCommon<T>)((IGroupGetter<T>)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => GroupXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static Group<T> CreateFromXml<T_TranslMask>(
            XElement node,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Group<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            XElement node,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Group.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static Group<T> CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Group<T>();
            ((GroupSetterCommon<T>)((IGroupGetter<T>)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Group<T> CreateFromXml<T_TranslMask>(
            string path,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Group<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Group<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            string path,
            ErrorMaskBuilder? errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Group<T> CreateFromXml<T_TranslMask>(
            Stream stream,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Group<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Group<T> CreateFromXml<T_ErrMask, T_TranslMask>(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mutagen
        public static readonly RecordType T_RecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => GroupCommon<T>.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<T, TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<T, TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static async Task<Group<T>> CreateFromBinary(MutagenFrame frame)
        {
            return await CreateFromBinary(
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public static async Task<Group<T>> CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Group<T>();
            await ((GroupSetterCommon<T>)((IGroupGetter<T>)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGroupGetter<T>)rhs, include);

        void IClearable.Clear()
        {
            ((GroupSetterCommon<T>)((IGroupGetter<T>)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Group<T> GetNew()
        {
            return new Group<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface IGroup<T> :
        IGroupGetter<T>,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IGroup<T>>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        new GroupTypeEnum GroupType { get; set; }
        new Int32 LastModified { get; set; }
        new ICache<T, FormKey> RecordCache { get; }
    }

    public partial interface IGroupGetter<out T> :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IGroupGetter<T>>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
        where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        GroupTypeEnum GroupType { get; }
        Int32 LastModified { get; }
        IReadOnlyCache<T, FormKey> RecordCache { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GroupMixIn
    {
        public static void Clear<T>(this IGroup<T> item)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((GroupSetterCommon<T>)((IGroupGetter<T>)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Group.Mask<bool> GetEqualsMask<T>(
            this IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString<T>(
            this IGroupGetter<T> item,
            string? name = null,
            Group.Mask<bool>? printMask = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString<T>(
            this IGroupGetter<T> item,
            FileGeneration fg,
            string? name = null,
            Group.Mask<bool>? printMask = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet<T>(
            this IGroupGetter<T> item,
            Group.Mask<bool?> checkMask)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Group.Mask<bool> GetHasBeenSetMask<T>(this IGroupGetter<T> item)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var ret = new Group.Mask<bool>(false);
            ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals<T>(
            this IGroupGetter<T> item,
            IGroupGetter<T> rhs)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn<T, TGetter, T_TranslMask>(
            this IGroup<T> lhs,
            IGroupGetter<TGetter> rhs,
            Group.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            ((GroupSetterTranslationCommon)((IGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
            this IGroup<T> lhs,
            IGroupGetter<TGetter> rhs,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GroupSetterTranslationCommon)((IGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Group.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T, TGetter>(
            this IGroup<T> lhs,
            IGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((GroupSetterTranslationCommon)((IGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Group<T> DeepCopy<T, TGetter, T_TranslMask>(
            this IGroupGetter<TGetter> item,
            Group.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            return ((GroupSetterTranslationCommon)((IGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_TranslMask>(
                item: item,
                copyMask: copyMask);
        }

        public static Group<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            this IGroupGetter<TGetter> item,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            return ((GroupSetterTranslationCommon)((IGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Group<T> DeepCopy<T, TGetter, T_TranslMask>(
            this IGroupGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            return ((GroupSetterTranslationCommon)((IGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_TranslMask>(
            this IGroup<T> item,
            XElement node,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGroup<T> item,
            XElement node,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Group.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml<T>(
            this IGroup<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            ((GroupSetterCommon<T>)((IGroupGetter<T>)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this IGroup<T> item,
            string path,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGroup<T> item,
            string path,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGroup<T> item,
            string path,
            ErrorMaskBuilder? errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml<T, T_TranslMask>(
            this IGroup<T> item,
            Stream stream,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGroup<T> item,
            Stream stream,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml<T, T_ErrMask, T_TranslMask>(
            this IGroup<T> item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords<T>(this IGroupGetter<T> obj)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<T, TMajor>(this IGroupGetter<T> obj)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((GroupCommon<T>)((IGroupGetter<T>)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords<T>(this IGroup<T> obj)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            return ((GroupSetterCommon<T>)((IGroupGetter<T>)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<T, TMajor>(this IGroup<T> obj)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
            where TMajor : class, IMajorRecordCommon
        {
            return ((GroupSetterCommon<T>)((IGroupGetter<T>)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static async Task CopyInFromBinary<T>(
            this IGroup<T> item,
            MutagenFrame frame)
            where T : OblivionMajorRecord, IXmlItem, IBinaryItem
        {
            await CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public static async Task CopyInFromBinary<T>(
            this IGroup<T> item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            await ((GroupSetterCommon<T>)((IGroupGetter<T>)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Group_FieldIndex
    {
        GroupType = 0,
        LastModified = 1,
        RecordCache = 2,
    }
    #endregion

    #region Registration
    public partial class Group_Registration : ILoquiRegistration
    {
        public static readonly Group_Registration Instance = new Group_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 170,
            version: 0);

        public const string GUID = "284f4b98-0fd4-45a4-aeb7-16a9c4cbc7f0";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Group.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Group.ErrorMask<>);

        public static readonly Type ClassType = typeof(Group<>);

        public static readonly Type GetterType = typeof(IGroupGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGroup<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.Group";

        public const string Name = "Group";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(Group_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "GROUPTYPE":
                    return (ushort)Group_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)Group_FieldIndex.LastModified;
                case "RECORDCACHE":
                    return (ushort)Group_FieldIndex.RecordCache;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.RecordCache:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.RecordCache:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.RecordCache:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                    return "GroupType";
                case Group_FieldIndex.LastModified:
                    return "LastModified";
                case Group_FieldIndex.RecordCache:
                    return "RecordCache";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.RecordCache:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.RecordCache:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly Type XmlWriteTranslation = typeof(GroupXmlWriteTranslation);
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRUP_HEADER;
        public const int NumStructFields = 2;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(GroupBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class Group_Registration<T> : Group_Registration
        where T : OblivionMajorRecord, IXmlItem, IBinaryItem
    {
        public static readonly Group_Registration<T> GenericInstance = new Group_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case Group_FieldIndex.LastModified:
                    return typeof(Int32);
                case Group_FieldIndex.RecordCache:
                    return typeof(ICache<T, FormKey>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Common
    public partial class GroupSetterCommon<T>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public static readonly GroupSetterCommon<T> Instance = new GroupSetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(IGroup<T> item)
        {
            ClearPartial();
            item.GroupType = default;
            item.LastModified = default;
            item.RecordCache.Clear();
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IGroup<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GroupXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IGroup<T> obj)
        {
            foreach (var item in GroupCommon<T>.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IGroup<T> obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in GroupCommon<T>.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IGroup<T> item,
            MutagenFrame frame)
        {
            GroupBinaryCreateTranslation<T>.FillBinaryContainedRecordTypeParseCustomPublic(
                frame: frame,
                item: item);
            item.GroupType = EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.LastModified = frame.ReadInt32();
        }
        
        protected static async Task<TryGet<int?>> FillBinaryRecordTypes(
            IGroup<T> item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    if (nextRecordType.Equals(Group<T>.T_RecordType))
                    {
                        await Mutagen.Bethesda.Binary.ListAsyncBinaryTranslation<T>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Group<T>.T_RecordType,
                            item: item.RecordCache,
                            transl: (MutagenFrame r) =>
                            {
                                return LoquiBinaryAsyncTranslation<T>.Instance.Parse(frame: r);
                            }).ConfigureAwait(false);
                        return TryGet<int?>.Failure;
                    }
                    frame.Position += contentLength + frame.MetaData.MajorConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public async Task CopyInFromBinary(
            IGroup<T> item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            await UtilityAsyncTranslation.GroupParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes).ConfigureAwait(false);
        }
        
        #endregion
        
    }
    public partial class GroupCommon<T>
        where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
    {
        public static readonly GroupCommon<T> Instance = new GroupCommon<T>();

        public Group.Mask<bool> GetEqualsMask(
            IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Group.Mask<bool>(false);
            ((GroupCommon<T>)((IGroupGetter<T>)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            Group.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified == rhs.LastModified;
            ret.RecordCache = EqualsMaskHelper.CacheEqualsHelper(
                lhs: item.RecordCache,
                rhs: rhs.RecordCache,
                maskGetter: (k, l, r) => l.GetEqualsMask(r, include),
                include: include);
        }
        
        public string ToString(
            IGroupGetter<T> item,
            string? name = null,
            Group.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IGroupGetter<T> item,
            FileGeneration fg,
            string? name = null,
            Group.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Group<{typeof(T).Name}> =>");
            }
            else
            {
                fg.AppendLine($"{name} (Group<{typeof(T).Name}>) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IGroupGetter<T> item,
            FileGeneration fg,
            Group.Mask<bool>? printMask = null)
        {
            if (printMask?.GroupType ?? true)
            {
                fg.AppendItem(item.GroupType, "GroupType");
            }
            if (printMask?.LastModified ?? true)
            {
                fg.AppendItem(item.LastModified, "LastModified");
            }
            if (printMask?.RecordCache?.Overall ?? true)
            {
                fg.AppendLine("RecordCache =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.RecordCache)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem.Value?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IGroupGetter<T> item,
            Group.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IGroupGetter<T> item,
            Group.Mask<bool> mask)
        {
            mask.GroupType = true;
            mask.LastModified = true;
            mask.RecordCache = new MaskItem<bool, IEnumerable<MaskItemIndexed<FormKey, bool, OblivionMajorRecord.Mask<bool>?>>?>(true, item.RecordCache.Items.Select((i) => new MaskItemIndexed<FormKey, bool, OblivionMajorRecord.Mask<bool>?>(i.FormKey, true, i.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGroupGetter<T>? lhs,
            IGroupGetter<T>? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.GroupType != rhs.GroupType) return false;
            if (lhs.LastModified != rhs.LastModified) return false;
            if (!lhs.RecordCache.SequenceEqual(rhs.RecordCache)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IGroupGetter<T> item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.GroupType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LastModified).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RecordCache).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
        {
            return Group<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IGroupGetter<T> obj)
        {
            foreach (var item in obj.RecordCache.Items.WhereCastable<T, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IGroupGetter<T> obj)
        {
            foreach (var subItem in obj.RecordCache.Items)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IGroupGetter<T> obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "IOblivionMajorRecordGetter":
                case "OblivionMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                default:
                    if(typeof(TMajor).IsAssignableFrom(typeof(T)))
                    {
                        foreach (var item in obj.RecordCache.Items)
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
            }
        }
        
        #endregion
        
    }
    public partial class GroupSetterTranslationCommon
    {
        public static readonly GroupSetterTranslationCommon Instance = new GroupSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn<T, TGetter>(
            IGroup<T> item,
            IGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if ((copyMask?.GetShouldTranslate((int)Group_FieldIndex.GroupType) ?? true))
            {
                item.GroupType = rhs.GroupType;
            }
            if ((copyMask?.GetShouldTranslate((int)Group_FieldIndex.LastModified) ?? true))
            {
                item.LastModified = rhs.LastModified;
            }
            if ((copyMask?.GetShouldTranslate((int)Group_FieldIndex.RecordCache) ?? true))
            {
                errorMask?.PushIndex((int)Group_FieldIndex.RecordCache);
                try
                {
                    item.RecordCache.SetTo(
                        rhs.RecordCache.Items
                            .Select((r) =>
                            {
                                return (r.DeepCopy() as T)!;
                            }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public Group<T> DeepCopy<T, TGetter, T_TranslMask>(
            IGroupGetter<TGetter> item,
            Group.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            Group<T> ret = (Group<T>)((GroupCommon<TGetter>)((IGroupGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter, T_TranslMask>(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Group<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            IGroupGetter<TGetter> item,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            Group<T> ret = (Group<T>)((GroupCommon<TGetter>)((IGroupGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Group<T> DeepCopy<T, TGetter>(
            IGroupGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem, TGetter, ILoquiObjectSetter<T>
            where TGetter : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            Group<T> ret = (Group<T>)((GroupCommon<TGetter>)((IGroupGetter<TGetter>)item).CommonInstance()!).GetNew<T>();
            ret.DeepCopyIn<T, TGetter>(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Group<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Group_Registration.Instance;
        public static Group_Registration Registration => Group_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GroupCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GroupSetterCommon<T>.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGroupGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGroupGetter<T>.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGroupGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class GroupXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static GroupXmlWriteTranslation Instance = new GroupXmlWriteTranslation();

        public static void WriteToNodeXml<T>(
            IGroupGetter<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            if ((translationMask?.GetShouldTranslate((int)Group_FieldIndex.GroupType) ?? true))
            {
                EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupType),
                    item: item.GroupType,
                    fieldIndex: (int)Group_FieldIndex.GroupType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Group_FieldIndex.LastModified) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastModified),
                    item: item.LastModified,
                    fieldIndex: (int)Group_FieldIndex.LastModified,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Group_FieldIndex.RecordCache) ?? true))
            {
                errorMask?.PushIndex((int)Group_FieldIndex.RecordCache);
                try
                {
                    KeyedDictXmlTranslation<FormKey, T>.Instance.Write(
                        node: node,
                        name: nameof(item.RecordCache),
                        items: item.RecordCache.Items,
                        translationMask: translationMask,
                        errorMask: errorMask,
                        valTransl: (XElement subNode, T subItem, ErrorMaskBuilder? dictSubMask, TranslationCrystal? dictTranslMask) =>
                        {
                            if (subItem.TryGet(out var Item))
                            {
                                ((OblivionMajorRecordXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                    item: Item,
                                    node: subNode,
                                    name: null,
                                    errorMask: dictSubMask,
                                    translationMask: dictTranslMask);
                            }
                        });
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        public void Write<T>(
            XElement node,
            IGroupGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Group");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Group");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            throw new NotImplementedException();
        }

        public void Write<T>(
            XElement node,
            IGroupGetter<T> item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IGroupGetter<T>)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class GroupXmlCreateTranslation<T>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public readonly static GroupXmlCreateTranslation<T> Instance = new GroupXmlCreateTranslation<T>();

        public static void FillPublicXml(
            IGroup<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GroupXmlCreateTranslation<T>.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IGroup<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "GroupType":
                    errorMask?.PushIndex((int)Group_FieldIndex.GroupType);
                    try
                    {
                        item.GroupType = EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    errorMask?.PushIndex((int)Group_FieldIndex.LastModified);
                    try
                    {
                        item.LastModified = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RecordCache":
                    KeyedDictXmlTranslation<FormKey, T>.Instance.ParseInto(
                        node: node,
                        item: item.RecordCache,
                        fieldIndex: (int)Group_FieldIndex.RecordCache,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        valTransl: LoquiXmlTranslation<T>.Instance.Parse);
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class GroupXmlTranslationMixIn
    {
        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGroupGetter<T> item,
            XElement node,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((GroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Group.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGroupGetter<T> item,
            string path,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T>(
            this IGroupGetter<T> item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGroupGetter<T> item,
            Stream stream,
            out Group.ErrorMask<T_ErrMask> errorMask,
            Group.TranslationMask<T_TranslMask>? translationMask = null,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IGroupGetter<T> item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            var node = new XElement("topnode");
            WriteToXml<T>(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml<T>(
            this IGroupGetter<T> item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            ((GroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml<T, T_ErrMask, T_TranslMask>(
            this IGroupGetter<T> item,
            XElement node,
            string? name = null,
            Group.TranslationMask<T_TranslMask>? translationMask = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            ((GroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IGroupGetter<T> item,
            string path,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            ((GroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml<T, T_TranslMask>(
            this IGroupGetter<T> item,
            Stream stream,
            string? name = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            var node = new XElement("topnode");
            ((GroupXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class GroupBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static GroupBinaryWriteTranslation Instance = new GroupBinaryWriteTranslation();

        static partial void WriteBinaryContainedRecordTypeParseCustom<T>(
            MutagenWriter writer,
            IGroupGetter<T> item)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem;

        public static void WriteBinaryContainedRecordTypeParse<T>(
            MutagenWriter writer,
            IGroupGetter<T> item)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            WriteBinaryContainedRecordTypeParseCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded<T>(
            IGroupGetter<T> item,
            MutagenWriter writer)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            GroupBinaryWriteTranslation.WriteBinaryContainedRecordTypeParse(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4);
            writer.Write(item.LastModified);
        }

        public static void WriteRecordTypes<T>(
            IGroupGetter<T> item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<T>.Instance.Write(
                writer: writer,
                items: item.RecordCache.Items,
                transl: (MutagenWriter r, T dictSubItem) =>
                {
                    if (dictSubItem.TryGet(out var Item))
                    {
                        ((OblivionMajorRecordBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: r);
                    }
                });
        }

        public void Write<T>(
            MutagenWriter writer,
            IGroupGetter<T> item,
            RecordTypeConverter? recordTypeConverter = null)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Group_Registration.GRUP_HEADER,
                type: ObjectType.Group))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            throw new NotImplementedException();
        }

    }

    public partial class GroupBinaryCreateTranslation<T>
        where T : class, IOblivionMajorRecordInternal, IXmlItem, IBinaryItem
    {
        public readonly static GroupBinaryCreateTranslation<T> Instance = new GroupBinaryCreateTranslation<T>();

        static partial void FillBinaryContainedRecordTypeParseCustom(
            MutagenFrame frame,
            IGroup<T> item);

        public static void FillBinaryContainedRecordTypeParseCustomPublic(
            MutagenFrame frame,
            IGroup<T> item)
        {
            FillBinaryContainedRecordTypeParseCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class GroupBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this IGroupGetter<T> item,
            MutagenWriter writer)
            where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
        {
            ((GroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class GroupBinaryOverlay<T> :
        BinaryOverlay,
        IGroupGetter<T>
        where T : class, IOblivionMajorRecordGetter, IXmlItem, IBinaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Group_Registration.Instance;
        public static Group_Registration Registration => Group_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GroupCommon<T>.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGroupGetter<T>.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGroupGetter<T>.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGroupGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IGroupGetter<T>)rhs, include);

        public IEnumerable<ILinkGetter> Links => GroupCommon<T>.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<T, TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => GroupXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((GroupXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((GroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region ContainedRecordTypeParse
        partial void ContainedRecordTypeParseCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        public GroupTypeEnum GroupType => (GroupTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(4, 4));
        public Int32 LastModified => BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(8, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected GroupBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static GroupBinaryOverlay<T> GroupFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new GroupBinaryOverlay<T>(
                bytes: HeaderTranslation.ExtractGroupMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Group(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.GroupConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.GroupConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillMajorRecords(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Oblivion
{
    public static class Group
    {
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.GroupType = initialValue;
                this.LastModified = initialValue;
                this.RecordCache = new MaskItem<TItem, IEnumerable<MaskItemIndexed<FormKey, TItem, OblivionMajorRecord.Mask<TItem>?>>?>(initialValue, null);
            }
        
            public Mask(
                TItem GroupType,
                TItem LastModified,
                TItem RecordCache)
            {
                this.GroupType = GroupType;
                this.LastModified = LastModified;
                this.RecordCache = new MaskItem<TItem, IEnumerable<MaskItemIndexed<FormKey, TItem, OblivionMajorRecord.Mask<TItem>?>>?>(RecordCache, null);
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem GroupType;
            public TItem LastModified;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<FormKey, TItem, OblivionMajorRecord.Mask<TItem>?>>?>? RecordCache;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
                if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
                if (!object.Equals(this.RecordCache, rhs.RecordCache)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.GroupType?.GetHashCode());
                ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
                ret = ret.CombineHashCode(this.RecordCache?.GetHashCode());
                return ret;
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.GroupType)) return false;
                if (!eval(this.LastModified)) return false;
                if (this.RecordCache != null)
                {
                    if (!eval(this.RecordCache.Overall)) return false;
                    if (this.RecordCache.Specific != null)
                    {
                        foreach (var item in this.RecordCache.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!item.Specific?.All(eval) ?? false) return false;
                        }
                    }
                }
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.GroupType)) return true;
                if (eval(this.LastModified)) return true;
                if (this.RecordCache != null)
                {
                    if (eval(this.RecordCache.Overall)) return true;
                    if (this.RecordCache.Specific != null)
                    {
                        foreach (var item in this.RecordCache.Specific)
                        {
                            if (eval(item.Overall)) return true;
                            if (item.Specific?.Any(eval) ?? false) return true;
                        }
                    }
                }
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Group.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.GroupType = eval(this.GroupType);
                obj.LastModified = eval(this.LastModified);
                if (RecordCache != null)
                {
                    obj.RecordCache = new MaskItem<R, IEnumerable<MaskItemIndexed<FormKey, R, OblivionMajorRecord.Mask<R>?>>?>(eval(this.RecordCache.Overall), default);
                    if (RecordCache.Specific != null)
                    {
                        List<MaskItemIndexed<FormKey, R, OblivionMajorRecord.Mask<R>?>> l = new List<MaskItemIndexed<FormKey, R, OblivionMajorRecord.Mask<R>?>>();
                        obj.RecordCache.Specific = l;
                        foreach (var item in RecordCache.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }
        
            public string ToString(Group.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, Group.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Group.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.GroupType ?? true)
                    {
                        fg.AppendItem(GroupType, "GroupType");
                    }
                    if (printMask?.LastModified ?? true)
                    {
                        fg.AppendItem(LastModified, "LastModified");
                    }
                    if (printMask?.RecordCache?.Overall ?? true)
                    {
                        fg.AppendLine("RecordCache =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (RecordCache != null)
                            {
                                if (RecordCache.Overall != null)
                                {
                                    fg.AppendLine(RecordCache.Overall.ToString());
                                }
                                if (RecordCache.Specific != null)
                                {
                                    foreach (var subItem in RecordCache.Specific)
                                    {
                                        fg.AppendLine("[");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendItem(subItem);
                                        }
                                        fg.AppendLine("]");
                                    }
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion
        
        }
        
        public class ErrorMask<T_ErrMask> :
            IErrorMask,
            IErrorMask<ErrorMask<T_ErrMask>>
            where T_ErrMask : OblivionMajorRecord.ErrorMask, IErrorMask<T_ErrMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? GroupType;
            public Exception? LastModified;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>? RecordCache;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Group_FieldIndex enu = (Group_FieldIndex)index;
                switch (enu)
                {
                    case Group_FieldIndex.GroupType:
                        return GroupType;
                    case Group_FieldIndex.LastModified:
                        return LastModified;
                    case Group_FieldIndex.RecordCache:
                        return RecordCache;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                Group_FieldIndex enu = (Group_FieldIndex)index;
                switch (enu)
                {
                    case Group_FieldIndex.GroupType:
                        this.GroupType = ex;
                        break;
                    case Group_FieldIndex.LastModified:
                        this.LastModified = ex;
                        break;
                    case Group_FieldIndex.RecordCache:
                        this.RecordCache = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                Group_FieldIndex enu = (Group_FieldIndex)index;
                switch (enu)
                {
                    case Group_FieldIndex.GroupType:
                        this.GroupType = (Exception?)obj;
                        break;
                    case Group_FieldIndex.LastModified:
                        this.LastModified = (Exception?)obj;
                        break;
                    case Group_FieldIndex.RecordCache:
                        this.RecordCache = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (GroupType != null) return true;
                if (LastModified != null) return true;
                if (RecordCache != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }
        
            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(GroupType, "GroupType");
                fg.AppendItem(LastModified, "LastModified");
                fg.AppendLine("RecordCache =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (RecordCache != null)
                    {
                        if (RecordCache.Overall != null)
                        {
                            fg.AppendLine(RecordCache.Overall.ToString());
                        }
                        if (RecordCache.Specific != null)
                        {
                            foreach (var subItem in RecordCache.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                }
                fg.AppendLine("]");
            }
            #endregion
        
            #region Combine
            public ErrorMask<T_ErrMask> Combine(ErrorMask<T_ErrMask>? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask<T_ErrMask>();
                ret.GroupType = this.GroupType.Combine(rhs.GroupType);
                ret.LastModified = this.LastModified.Combine(rhs.LastModified);
                ret.RecordCache = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>(ExceptionExt.Combine(this.RecordCache?.Overall, rhs.RecordCache?.Overall), new List<MaskItem<Exception?, T_ErrMask?>>(ExceptionExt.Combine(this.RecordCache?.Specific, rhs.RecordCache?.Specific)));
                return ret;
            }
            public static ErrorMask<T_ErrMask>? Combine(ErrorMask<T_ErrMask>? lhs, ErrorMask<T_ErrMask>? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask<T_ErrMask>();
            }
            #endregion
        
        }
        public class TranslationMask<T_TranslMask> : ITranslationMask
            where T_TranslMask : OblivionMajorRecord.TranslationMask, ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool GroupType;
            public bool LastModified;
            public MaskItem<bool, T_TranslMask?> RecordCache;
            #endregion
        
            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.GroupType = defaultOn;
                this.LastModified = defaultOn;
                this.RecordCache = new MaskItem<bool, T_TranslMask?>(defaultOn, null);
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((GroupType, null));
                ret.Add((LastModified, null));
                ret.Add((RecordCache?.Overall ?? true, RecordCache?.Specific?.GetCrystal()));
            }
        }
    }
}
