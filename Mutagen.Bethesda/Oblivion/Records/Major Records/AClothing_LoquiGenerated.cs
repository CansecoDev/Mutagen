/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class AClothing :
        AItem,
        IAClothingInternal,
        ILoquiObjectSetter<AClothing>,
        INamed,
        IEquatable<AClothing>,
        IEqualsMask
    {
        #region Ctor
        protected AClothing()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAClothingGetter.Name => this.Name;
        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Script> _Script = new FormLinkNullable<Script>();
        public IFormLinkNullable<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> IAClothingGetter.Script => this.Script;
        #endregion
        #region Enchantment
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Enchantment> _Enchantment = new FormLinkNullable<Enchantment>();
        public IFormLinkNullable<Enchantment> Enchantment => this._Enchantment;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEnchantmentGetter> IAClothingGetter.Enchantment => this.Enchantment;
        #endregion
        #region EnchantmentPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16? _EnchantmentPoints;
        public UInt16? EnchantmentPoints
        {
            get => this._EnchantmentPoints;
            set => this._EnchantmentPoints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IAClothingGetter.EnchantmentPoints => this.EnchantmentPoints;
        #endregion
        #region BipedFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BipedFlag _BipedFlags;
        public BipedFlag BipedFlags
        {
            get => this._BipedFlags;
            set
            {
                this.BMDTDataTypeState |= BMDTDataType.Has;
                this._BipedFlags = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EquipmentFlag _Flags;
        public EquipmentFlag Flags
        {
            get => this._Flags;
            set
            {
                this.BMDTDataTypeState |= BMDTDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region MaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleBipedModel;
        public Model? MaleBipedModel
        {
            get => _MaleBipedModel;
            set => _MaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.MaleBipedModel => this.MaleBipedModel;
        #endregion
        #region MaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleWorldModel;
        public Model? MaleWorldModel
        {
            get => _MaleWorldModel;
            set => _MaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.MaleWorldModel => this.MaleWorldModel;
        #endregion
        #region MaleIcon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _MaleIcon;
        public String? MaleIcon
        {
            get => this._MaleIcon;
            set => this._MaleIcon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAClothingGetter.MaleIcon => this.MaleIcon;
        #endregion
        #region FemaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleBipedModel;
        public Model? FemaleBipedModel
        {
            get => _FemaleBipedModel;
            set => _FemaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.FemaleBipedModel => this.FemaleBipedModel;
        #endregion
        #region FemaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleWorldModel;
        public Model? FemaleWorldModel
        {
            get => _FemaleWorldModel;
            set => _FemaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IAClothingGetter.FemaleWorldModel => this.FemaleWorldModel;
        #endregion
        #region FemaleIcon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _FemaleIcon;
        public String? FemaleIcon
        {
            get => this._FemaleIcon;
            set => this._FemaleIcon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAClothingGetter.FemaleIcon => this.FemaleIcon;
        #endregion
        #region BMDTDataTypeState
        public AClothing.BMDTDataType BMDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AClothingMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAClothingGetter rhs)) return false;
            return ((AClothingCommon)((IAClothingGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AClothing obj)
        {
            return ((AClothingCommon)((IAClothingGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AClothingCommon)((IAClothingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AClothingXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AClothingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new AClothing CreateFromXml(
            XElement node,
            AClothing.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AClothing CreateFromXml(
            XElement node,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AClothing.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AClothing CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate<AClothing>(node, out var ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown AClothing subclass: {node.Name.LocalName}");
            }
            ((AClothingSetterCommon)((IAClothingGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AClothing CreateFromXml(
            string path,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AClothing CreateFromXml(
            string path,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AClothing CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AClothing CreateFromXml(
            Stream stream,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AClothing CreateFromXml(
            Stream stream,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AClothing CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AItem.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Script = initialValue;
                this.Enchantment = initialValue;
                this.EnchantmentPoints = initialValue;
                this.BipedFlags = initialValue;
                this.Flags = initialValue;
                this.MaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaleIcon = initialValue;
                this.FemaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.FemaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.FemaleIcon = initialValue;
                this.BMDTDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Script,
                TItem Enchantment,
                TItem EnchantmentPoints,
                TItem BipedFlags,
                TItem Flags,
                TItem MaleBipedModel,
                TItem MaleWorldModel,
                TItem MaleIcon,
                TItem FemaleBipedModel,
                TItem FemaleWorldModel,
                TItem FemaleIcon,
                TItem BMDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Script = Script;
                this.Enchantment = Enchantment;
                this.EnchantmentPoints = EnchantmentPoints;
                this.BipedFlags = BipedFlags;
                this.Flags = Flags;
                this.MaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(MaleBipedModel, new Model.Mask<TItem>(MaleBipedModel));
                this.MaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(MaleWorldModel, new Model.Mask<TItem>(MaleWorldModel));
                this.MaleIcon = MaleIcon;
                this.FemaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(FemaleBipedModel, new Model.Mask<TItem>(FemaleBipedModel));
                this.FemaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(FemaleWorldModel, new Model.Mask<TItem>(FemaleWorldModel));
                this.FemaleIcon = FemaleIcon;
                this.BMDTDataTypeState = BMDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Script;
            public TItem Enchantment;
            public TItem EnchantmentPoints;
            public TItem BipedFlags;
            public TItem Flags;
            public MaskItem<TItem, Model.Mask<TItem>?>? MaleBipedModel { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? MaleWorldModel { get; set; }
            public TItem MaleIcon;
            public MaskItem<TItem, Model.Mask<TItem>?>? FemaleBipedModel { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? FemaleWorldModel { get; set; }
            public TItem FemaleIcon;
            public TItem BMDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
                if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
                if (!object.Equals(this.BipedFlags, rhs.BipedFlags)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
                if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
                if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
                if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
                if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
                if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
                if (!object.Equals(this.BMDTDataTypeState, rhs.BMDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Script);
                hash.Add(this.Enchantment);
                hash.Add(this.EnchantmentPoints);
                hash.Add(this.BipedFlags);
                hash.Add(this.Flags);
                hash.Add(this.MaleBipedModel);
                hash.Add(this.MaleWorldModel);
                hash.Add(this.MaleIcon);
                hash.Add(this.FemaleBipedModel);
                hash.Add(this.FemaleWorldModel);
                hash.Add(this.FemaleIcon);
                hash.Add(this.BMDTDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.Enchantment)) return false;
                if (!eval(this.EnchantmentPoints)) return false;
                if (!eval(this.BipedFlags)) return false;
                if (!eval(this.Flags)) return false;
                if (MaleBipedModel != null)
                {
                    if (!eval(this.MaleBipedModel.Overall)) return false;
                    if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.All(eval)) return false;
                }
                if (MaleWorldModel != null)
                {
                    if (!eval(this.MaleWorldModel.Overall)) return false;
                    if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.All(eval)) return false;
                }
                if (!eval(this.MaleIcon)) return false;
                if (FemaleBipedModel != null)
                {
                    if (!eval(this.FemaleBipedModel.Overall)) return false;
                    if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.All(eval)) return false;
                }
                if (FemaleWorldModel != null)
                {
                    if (!eval(this.FemaleWorldModel.Overall)) return false;
                    if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.All(eval)) return false;
                }
                if (!eval(this.FemaleIcon)) return false;
                if (!eval(this.BMDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.Enchantment)) return true;
                if (eval(this.EnchantmentPoints)) return true;
                if (eval(this.BipedFlags)) return true;
                if (eval(this.Flags)) return true;
                if (MaleBipedModel != null)
                {
                    if (eval(this.MaleBipedModel.Overall)) return true;
                    if (this.MaleBipedModel.Specific != null && this.MaleBipedModel.Specific.Any(eval)) return true;
                }
                if (MaleWorldModel != null)
                {
                    if (eval(this.MaleWorldModel.Overall)) return true;
                    if (this.MaleWorldModel.Specific != null && this.MaleWorldModel.Specific.Any(eval)) return true;
                }
                if (eval(this.MaleIcon)) return true;
                if (FemaleBipedModel != null)
                {
                    if (eval(this.FemaleBipedModel.Overall)) return true;
                    if (this.FemaleBipedModel.Specific != null && this.FemaleBipedModel.Specific.Any(eval)) return true;
                }
                if (FemaleWorldModel != null)
                {
                    if (eval(this.FemaleWorldModel.Overall)) return true;
                    if (this.FemaleWorldModel.Specific != null && this.FemaleWorldModel.Specific.Any(eval)) return true;
                }
                if (eval(this.FemaleIcon)) return true;
                if (eval(this.BMDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AClothing.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Script = eval(this.Script);
                obj.Enchantment = eval(this.Enchantment);
                obj.EnchantmentPoints = eval(this.EnchantmentPoints);
                obj.BipedFlags = eval(this.BipedFlags);
                obj.Flags = eval(this.Flags);
                obj.MaleBipedModel = this.MaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleBipedModel.Overall), this.MaleBipedModel.Specific?.Translate(eval));
                obj.MaleWorldModel = this.MaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleWorldModel.Overall), this.MaleWorldModel.Specific?.Translate(eval));
                obj.MaleIcon = eval(this.MaleIcon);
                obj.FemaleBipedModel = this.FemaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleBipedModel.Overall), this.FemaleBipedModel.Specific?.Translate(eval));
                obj.FemaleWorldModel = this.FemaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleWorldModel.Overall), this.FemaleWorldModel.Specific?.Translate(eval));
                obj.FemaleIcon = eval(this.FemaleIcon);
                obj.BMDTDataTypeState = eval(this.BMDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AClothing.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AClothing.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AClothing.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Enchantment ?? true)
                    {
                        fg.AppendItem(Enchantment, "Enchantment");
                    }
                    if (printMask?.EnchantmentPoints ?? true)
                    {
                        fg.AppendItem(EnchantmentPoints, "EnchantmentPoints");
                    }
                    if (printMask?.BipedFlags ?? true)
                    {
                        fg.AppendItem(BipedFlags, "BipedFlags");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MaleBipedModel?.Overall ?? true)
                    {
                        MaleBipedModel?.ToString(fg);
                    }
                    if (printMask?.MaleWorldModel?.Overall ?? true)
                    {
                        MaleWorldModel?.ToString(fg);
                    }
                    if (printMask?.MaleIcon ?? true)
                    {
                        fg.AppendItem(MaleIcon, "MaleIcon");
                    }
                    if (printMask?.FemaleBipedModel?.Overall ?? true)
                    {
                        FemaleBipedModel?.ToString(fg);
                    }
                    if (printMask?.FemaleWorldModel?.Overall ?? true)
                    {
                        FemaleWorldModel?.ToString(fg);
                    }
                    if (printMask?.FemaleIcon ?? true)
                    {
                        fg.AppendItem(FemaleIcon, "FemaleIcon");
                    }
                    if (printMask?.BMDTDataTypeState ?? true)
                    {
                        fg.AppendItem(BMDTDataTypeState, "BMDTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            AItem.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Script;
            public Exception? Enchantment;
            public Exception? EnchantmentPoints;
            public Exception? BipedFlags;
            public Exception? Flags;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleWorldModel;
            public Exception? MaleIcon;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleWorldModel;
            public Exception? FemaleIcon;
            public Exception? BMDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
                switch (enu)
                {
                    case AClothing_FieldIndex.Name:
                        return Name;
                    case AClothing_FieldIndex.Script:
                        return Script;
                    case AClothing_FieldIndex.Enchantment:
                        return Enchantment;
                    case AClothing_FieldIndex.EnchantmentPoints:
                        return EnchantmentPoints;
                    case AClothing_FieldIndex.BipedFlags:
                        return BipedFlags;
                    case AClothing_FieldIndex.Flags:
                        return Flags;
                    case AClothing_FieldIndex.MaleBipedModel:
                        return MaleBipedModel;
                    case AClothing_FieldIndex.MaleWorldModel:
                        return MaleWorldModel;
                    case AClothing_FieldIndex.MaleIcon:
                        return MaleIcon;
                    case AClothing_FieldIndex.FemaleBipedModel:
                        return FemaleBipedModel;
                    case AClothing_FieldIndex.FemaleWorldModel:
                        return FemaleWorldModel;
                    case AClothing_FieldIndex.FemaleIcon:
                        return FemaleIcon;
                    case AClothing_FieldIndex.BMDTDataTypeState:
                        return BMDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
                switch (enu)
                {
                    case AClothing_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case AClothing_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case AClothing_FieldIndex.Enchantment:
                        this.Enchantment = ex;
                        break;
                    case AClothing_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = ex;
                        break;
                    case AClothing_FieldIndex.BipedFlags:
                        this.BipedFlags = ex;
                        break;
                    case AClothing_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case AClothing_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.MaleIcon:
                        this.MaleIcon = ex;
                        break;
                    case AClothing_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case AClothing_FieldIndex.FemaleIcon:
                        this.FemaleIcon = ex;
                        break;
                    case AClothing_FieldIndex.BMDTDataTypeState:
                        this.BMDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
                switch (enu)
                {
                    case AClothing_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.Enchantment:
                        this.Enchantment = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.BipedFlags:
                        this.BipedFlags = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.MaleIcon:
                        this.MaleIcon = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case AClothing_FieldIndex.FemaleIcon:
                        this.FemaleIcon = (Exception?)obj;
                        break;
                    case AClothing_FieldIndex.BMDTDataTypeState:
                        this.BMDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Script != null) return true;
                if (Enchantment != null) return true;
                if (EnchantmentPoints != null) return true;
                if (BipedFlags != null) return true;
                if (Flags != null) return true;
                if (MaleBipedModel != null) return true;
                if (MaleWorldModel != null) return true;
                if (MaleIcon != null) return true;
                if (FemaleBipedModel != null) return true;
                if (FemaleWorldModel != null) return true;
                if (FemaleIcon != null) return true;
                if (BMDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Script, "Script");
                fg.AppendItem(Enchantment, "Enchantment");
                fg.AppendItem(EnchantmentPoints, "EnchantmentPoints");
                fg.AppendItem(BipedFlags, "BipedFlags");
                fg.AppendItem(Flags, "Flags");
                MaleBipedModel?.ToString(fg);
                MaleWorldModel?.ToString(fg);
                fg.AppendItem(MaleIcon, "MaleIcon");
                FemaleBipedModel?.ToString(fg);
                FemaleWorldModel?.ToString(fg);
                fg.AppendItem(FemaleIcon, "FemaleIcon");
                fg.AppendItem(BMDTDataTypeState, "BMDTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
                ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
                ret.BipedFlags = this.BipedFlags.Combine(rhs.BipedFlags);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaleBipedModel = this.MaleBipedModel.Combine(rhs.MaleBipedModel, (l, r) => l.Combine(r));
                ret.MaleWorldModel = this.MaleWorldModel.Combine(rhs.MaleWorldModel, (l, r) => l.Combine(r));
                ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
                ret.FemaleBipedModel = this.FemaleBipedModel.Combine(rhs.FemaleBipedModel, (l, r) => l.Combine(r));
                ret.FemaleWorldModel = this.FemaleWorldModel.Combine(rhs.FemaleWorldModel, (l, r) => l.Combine(r));
                ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
                ret.BMDTDataTypeState = this.BMDTDataTypeState.Combine(rhs.BMDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AItem.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Script;
            public bool Enchantment;
            public bool EnchantmentPoints;
            public bool BipedFlags;
            public bool Flags;
            public MaskItem<bool, Model.TranslationMask?> MaleBipedModel;
            public MaskItem<bool, Model.TranslationMask?> MaleWorldModel;
            public bool MaleIcon;
            public MaskItem<bool, Model.TranslationMask?> FemaleBipedModel;
            public MaskItem<bool, Model.TranslationMask?> FemaleWorldModel;
            public bool FemaleIcon;
            public bool BMDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Script = defaultOn;
                this.Enchantment = defaultOn;
                this.EnchantmentPoints = defaultOn;
                this.BipedFlags = defaultOn;
                this.Flags = defaultOn;
                this.MaleBipedModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.MaleWorldModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.MaleIcon = defaultOn;
                this.FemaleBipedModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.FemaleWorldModel = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.FemaleIcon = defaultOn;
                this.BMDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Script, null));
                ret.Add((Enchantment, null));
                ret.Add((EnchantmentPoints, null));
                ret.Add((BipedFlags, null));
                ret.Add((Flags, null));
                ret.Add((MaleBipedModel?.Overall ?? true, MaleBipedModel?.Specific?.GetCrystal()));
                ret.Add((MaleWorldModel?.Overall ?? true, MaleWorldModel?.Specific?.GetCrystal()));
                ret.Add((MaleIcon, null));
                ret.Add((FemaleBipedModel?.Overall ?? true, FemaleBipedModel?.Specific?.GetCrystal()));
                ret.Add((FemaleWorldModel?.Overall ?? true, FemaleWorldModel?.Specific?.GetCrystal()));
                ret.Add((FemaleIcon, null));
                ret.Add((BMDTDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        [Flags]
        public enum BMDTDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => AClothingCommon.Instance.GetLinks(this);
        public AClothing(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AClothing(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AClothing(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AClothingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AClothingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAClothingGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AClothingSetterCommon)((IAClothingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AClothing GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IAClothing :
        IAClothingGetter,
        IAItem,
        ILoquiObjectSetter<IAClothingInternal>
    {
        new String? Name { get; set; }
        new IFormLinkNullable<Script> Script { get; }
        new IFormLinkNullable<Enchantment> Enchantment { get; }
        new UInt16? EnchantmentPoints { get; set; }
        new BipedFlag BipedFlags { get; set; }
        new EquipmentFlag Flags { get; set; }
        new Model? MaleBipedModel { get; set; }
        new Model? MaleWorldModel { get; set; }
        new String? MaleIcon { get; set; }
        new Model? FemaleBipedModel { get; set; }
        new Model? FemaleWorldModel { get; set; }
        new String? FemaleIcon { get; set; }
        new AClothing.BMDTDataType BMDTDataTypeState { get; set; }
    }

    public partial interface IAClothingInternal :
        IAItemInternal,
        IAClothing,
        IAClothingGetter
    {
    }

    public partial interface IAClothingGetter :
        IAItemGetter,
        ILoquiObject<IAClothingGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IFormLinkNullableGetter<IEnchantmentGetter> Enchantment { get; }
        UInt16? EnchantmentPoints { get; }
        BipedFlag BipedFlags { get; }
        EquipmentFlag Flags { get; }
        IModelGetter? MaleBipedModel { get; }
        IModelGetter? MaleWorldModel { get; }
        String? MaleIcon { get; }
        IModelGetter? FemaleBipedModel { get; }
        IModelGetter? FemaleWorldModel { get; }
        String? FemaleIcon { get; }
        AClothing.BMDTDataType BMDTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AClothingMixIn
    {
        public static void Clear(this IAClothingInternal item)
        {
            ((AClothingSetterCommon)((IAClothingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AClothing.Mask<bool> GetEqualsMask(
            this IAClothingGetter item,
            IAClothingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAClothingGetter item,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAClothingGetter item,
            FileGeneration fg,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAClothingGetter item,
            AClothing.Mask<bool?> checkMask)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AClothing.Mask<bool> GetHasBeenSetMask(this IAClothingGetter item)
        {
            var ret = new AClothing.Mask<bool>(false);
            ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAClothingGetter item,
            IAClothingGetter rhs)
        {
            return ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAClothingInternal lhs,
            IAClothingGetter rhs,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AClothingSetterTranslationCommon)((IAClothingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AClothing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAClothingInternal lhs,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AClothingSetterTranslationCommon)((IAClothingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AClothing DeepCopy(
            this IAClothingGetter item,
            AClothing.TranslationMask? copyMask = null)
        {
            return ((AClothingSetterTranslationCommon)((IAClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AClothing DeepCopy(
            this IAClothingGetter item,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? copyMask = null)
        {
            return ((AClothingSetterTranslationCommon)((IAClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AClothing DeepCopy(
            this IAClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AClothingSetterTranslationCommon)((IAClothingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAClothingInternal item,
            XElement node,
            AClothing.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAClothingInternal item,
            XElement node,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AClothing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AClothingSetterCommon)((IAClothingGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            string path,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            string path,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            Stream stream,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            Stream stream,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAClothingInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AClothing.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAClothingInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AClothingSetterCommon)((IAClothingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AClothing_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        BipedFlags = 9,
        Flags = 10,
        MaleBipedModel = 11,
        MaleWorldModel = 12,
        MaleIcon = 13,
        FemaleBipedModel = 14,
        FemaleWorldModel = 15,
        FemaleIcon = 16,
        BMDTDataTypeState = 17,
    }
    #endregion

    #region Registration
    public partial class AClothing_Registration : ILoquiRegistration
    {
        public static readonly AClothing_Registration Instance = new AClothing_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 69,
            version: 0);

        public const string GUID = "45098216-a539-4788-84f5-ece76ab7abf2";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(AClothing.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AClothing.ErrorMask);

        public static readonly Type ClassType = typeof(AClothing);

        public static readonly Type GetterType = typeof(IAClothingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAClothing);

        public static readonly Type? InternalSetterType = typeof(IAClothingInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AClothing";

        public const string Name = "AClothing";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)AClothing_FieldIndex.Name;
                case "SCRIPT":
                    return (ushort)AClothing_FieldIndex.Script;
                case "ENCHANTMENT":
                    return (ushort)AClothing_FieldIndex.Enchantment;
                case "ENCHANTMENTPOINTS":
                    return (ushort)AClothing_FieldIndex.EnchantmentPoints;
                case "BIPEDFLAGS":
                    return (ushort)AClothing_FieldIndex.BipedFlags;
                case "FLAGS":
                    return (ushort)AClothing_FieldIndex.Flags;
                case "MALEBIPEDMODEL":
                    return (ushort)AClothing_FieldIndex.MaleBipedModel;
                case "MALEWORLDMODEL":
                    return (ushort)AClothing_FieldIndex.MaleWorldModel;
                case "MALEICON":
                    return (ushort)AClothing_FieldIndex.MaleIcon;
                case "FEMALEBIPEDMODEL":
                    return (ushort)AClothing_FieldIndex.FemaleBipedModel;
                case "FEMALEWORLDMODEL":
                    return (ushort)AClothing_FieldIndex.FemaleWorldModel;
                case "FEMALEICON":
                    return (ushort)AClothing_FieldIndex.FemaleIcon;
                case "BMDTDATATYPESTATE":
                    return (ushort)AClothing_FieldIndex.BMDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.BipedFlags:
                case AClothing_FieldIndex.Flags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return AItem_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                    return true;
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.BipedFlags:
                case AClothing_FieldIndex.Flags:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleIcon:
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return AItem_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.BipedFlags:
                case AClothing_FieldIndex.Flags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return AItem_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                    return "Name";
                case AClothing_FieldIndex.Script:
                    return "Script";
                case AClothing_FieldIndex.Enchantment:
                    return "Enchantment";
                case AClothing_FieldIndex.EnchantmentPoints:
                    return "EnchantmentPoints";
                case AClothing_FieldIndex.BipedFlags:
                    return "BipedFlags";
                case AClothing_FieldIndex.Flags:
                    return "Flags";
                case AClothing_FieldIndex.MaleBipedModel:
                    return "MaleBipedModel";
                case AClothing_FieldIndex.MaleWorldModel:
                    return "MaleWorldModel";
                case AClothing_FieldIndex.MaleIcon:
                    return "MaleIcon";
                case AClothing_FieldIndex.FemaleBipedModel:
                    return "FemaleBipedModel";
                case AClothing_FieldIndex.FemaleWorldModel:
                    return "FemaleWorldModel";
                case AClothing_FieldIndex.FemaleIcon:
                    return "FemaleIcon";
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return "BMDTDataTypeState";
                default:
                    return AItem_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.BipedFlags:
                case AClothing_FieldIndex.Flags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return AItem_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                case AClothing_FieldIndex.Script:
                case AClothing_FieldIndex.Enchantment:
                case AClothing_FieldIndex.EnchantmentPoints:
                case AClothing_FieldIndex.BipedFlags:
                case AClothing_FieldIndex.Flags:
                case AClothing_FieldIndex.MaleBipedModel:
                case AClothing_FieldIndex.MaleWorldModel:
                case AClothing_FieldIndex.MaleIcon:
                case AClothing_FieldIndex.FemaleBipedModel:
                case AClothing_FieldIndex.FemaleWorldModel:
                case AClothing_FieldIndex.FemaleIcon:
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return false;
                default:
                    return AItem_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AClothing_FieldIndex enu = (AClothing_FieldIndex)index;
            switch (enu)
            {
                case AClothing_FieldIndex.Name:
                    return typeof(String);
                case AClothing_FieldIndex.Script:
                    return typeof(IFormLinkNullable<Script>);
                case AClothing_FieldIndex.Enchantment:
                    return typeof(IFormLinkNullable<Enchantment>);
                case AClothing_FieldIndex.EnchantmentPoints:
                    return typeof(UInt16);
                case AClothing_FieldIndex.BipedFlags:
                    return typeof(BipedFlag);
                case AClothing_FieldIndex.Flags:
                    return typeof(EquipmentFlag);
                case AClothing_FieldIndex.MaleBipedModel:
                    return typeof(Model);
                case AClothing_FieldIndex.MaleWorldModel:
                    return typeof(Model);
                case AClothing_FieldIndex.MaleIcon:
                    return typeof(String);
                case AClothing_FieldIndex.FemaleBipedModel:
                    return typeof(Model);
                case AClothing_FieldIndex.FemaleWorldModel:
                    return typeof(Model);
                case AClothing_FieldIndex.FemaleIcon:
                    return typeof(String);
                case AClothing_FieldIndex.BMDTDataTypeState:
                    return typeof(AClothing.BMDTDataType);
                default:
                    return AItem_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AClothingXmlWriteTranslation);
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType MOD2_HEADER = new RecordType("MOD2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MOD3_HEADER = new RecordType("MOD3");
        public static readonly RecordType MOD4_HEADER = new RecordType("MOD4");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER
                    })
            );
        });
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD2")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODB"),
                new RecordType("MO2B")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO2T")));
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD3")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODB"),
                new RecordType("MO3B")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO3T")));
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODL"),
                new RecordType("MOD4")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODB"),
                new RecordType("MO4B")),
            new KeyValuePair<RecordType, RecordType>(
                new RecordType("MODT"),
                new RecordType("MO4T")));
        public const int NumStructFields = 0;
        public const int NumTypedFields = 10;
        public static readonly Type BinaryWriteTranslation = typeof(AClothingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AClothingSetterCommon : AItemSetterCommon
    {
        public new static readonly AClothingSetterCommon Instance = new AClothingSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAClothingInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Script.FormKey = null;
            item.Enchantment.FormKey = null;
            item.EnchantmentPoints = default;
            item.BipedFlags = default;
            item.Flags = default;
            item.MaleBipedModel = null;
            item.MaleWorldModel = null;
            item.MaleIcon = default;
            item.FemaleBipedModel = null;
            item.FemaleWorldModel = null;
            item.FemaleIcon = default;
            item.BMDTDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IAItemInternal item)
        {
            Clear(item: (IAClothingInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IAClothingInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAClothingInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IAClothingInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasBMDTDataType":
                    item.BMDTDataTypeState |= AClothing.BMDTDataType.Has;
                    break;
                default:
                    AItemSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IAClothingInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AClothingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IAItemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AClothing)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AClothing)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (AClothing)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => throw new ArgumentException();
        protected static void FillBinaryStructs(
            IAClothingInternal item,
            MutagenFrame frame)
        {
            AItemSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IAClothingInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Name);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Enchantment.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.EnchantmentPoints);
                }
                case 0x54444D42: // BMDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BMDTDataTypeState = AClothing.BMDTDataType.Has;
                    }
                    item.BipedFlags = EnumBinaryTranslation<BipedFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Flags = EnumBinaryTranslation<EquipmentFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Flags);
                }
                case 0x4C444F4D: // MODL
                {
                    item.MaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.MaleBipedModel);
                }
                case 0x32444F4D: // MOD2
                {
                    item.MaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: AClothing_Registration.MaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.MaleWorldModel);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaleIcon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.MaleIcon);
                }
                case 0x33444F4D: // MOD3
                {
                    item.FemaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: AClothing_Registration.FemaleBipedModelConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.FemaleBipedModel);
                }
                case 0x34444F4D: // MOD4
                {
                    item.FemaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: AClothing_Registration.FemaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.FemaleWorldModel);
                }
                case 0x324F4349: // ICO2
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FemaleIcon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.FemaleIcon);
                }
                default:
                    return AItemSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IAClothingInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        public override void CopyInFromBinary(
            IAItemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AClothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AClothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (AClothing)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class AClothingCommon : AItemCommon
    {
        public new static readonly AClothingCommon Instance = new AClothingCommon();

        public AClothing.Mask<bool> GetEqualsMask(
            IAClothingGetter item,
            IAClothingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AClothing.Mask<bool>(false);
            ((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAClothingGetter item,
            IAClothingGetter rhs,
            AClothing.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Enchantment = object.Equals(item.Enchantment, rhs.Enchantment);
            ret.EnchantmentPoints = item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.BipedFlags = item.BipedFlags == rhs.BipedFlags;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.MaleBipedModel,
                rhs.MaleBipedModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.MaleWorldModel,
                rhs.MaleWorldModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleIcon = string.Equals(item.MaleIcon, rhs.MaleIcon);
            ret.FemaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleBipedModel,
                rhs.FemaleBipedModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FemaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleWorldModel,
                rhs.FemaleWorldModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FemaleIcon = string.Equals(item.FemaleIcon, rhs.FemaleIcon);
            ret.BMDTDataTypeState = item.BMDTDataTypeState == rhs.BMDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAClothingGetter item,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAClothingGetter item,
            FileGeneration fg,
            string? name = null,
            AClothing.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AClothing =>");
            }
            else
            {
                fg.AppendLine($"{name} (AClothing) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAClothingGetter item,
            FileGeneration fg,
            AClothing.Mask<bool>? printMask = null)
        {
            AItemCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if ((printMask?.Enchantment ?? true)
                && item.Enchantment.TryGet(out var EnchantmentItem))
            {
                fg.AppendItem(EnchantmentItem, "Enchantment");
            }
            if ((printMask?.EnchantmentPoints ?? true)
                && item.EnchantmentPoints.TryGet(out var EnchantmentPointsItem))
            {
                fg.AppendItem(EnchantmentPointsItem, "EnchantmentPoints");
            }
            if (printMask?.BipedFlags ?? true)
            {
                fg.AppendItem(item.BipedFlags, "BipedFlags");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.MaleBipedModel?.Overall ?? true)
                && item.MaleBipedModel.TryGet(out var MaleBipedModelItem))
            {
                MaleBipedModelItem?.ToString(fg, "MaleBipedModel");
            }
            if ((printMask?.MaleWorldModel?.Overall ?? true)
                && item.MaleWorldModel.TryGet(out var MaleWorldModelItem))
            {
                MaleWorldModelItem?.ToString(fg, "MaleWorldModel");
            }
            if ((printMask?.MaleIcon ?? true)
                && item.MaleIcon.TryGet(out var MaleIconItem))
            {
                fg.AppendItem(MaleIconItem, "MaleIcon");
            }
            if ((printMask?.FemaleBipedModel?.Overall ?? true)
                && item.FemaleBipedModel.TryGet(out var FemaleBipedModelItem))
            {
                FemaleBipedModelItem?.ToString(fg, "FemaleBipedModel");
            }
            if ((printMask?.FemaleWorldModel?.Overall ?? true)
                && item.FemaleWorldModel.TryGet(out var FemaleWorldModelItem))
            {
                FemaleWorldModelItem?.ToString(fg, "FemaleWorldModel");
            }
            if ((printMask?.FemaleIcon ?? true)
                && item.FemaleIcon.TryGet(out var FemaleIconItem))
            {
                fg.AppendItem(FemaleIconItem, "FemaleIcon");
            }
            if (printMask?.BMDTDataTypeState ?? true)
            {
                fg.AppendItem(item.BMDTDataTypeState, "BMDTDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IAClothingGetter item,
            AClothing.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.Enchantment.HasValue && checkMask.Enchantment.Value != (item.Enchantment.FormKey != null)) return false;
            if (checkMask.EnchantmentPoints.HasValue && checkMask.EnchantmentPoints.Value != (item.EnchantmentPoints != null)) return false;
            if (checkMask.MaleBipedModel?.Overall.HasValue ?? false && checkMask.MaleBipedModel.Overall.Value != (item.MaleBipedModel != null)) return false;
            if (checkMask.MaleBipedModel?.Specific != null && (item.MaleBipedModel == null || !item.MaleBipedModel.HasBeenSet(checkMask.MaleBipedModel.Specific))) return false;
            if (checkMask.MaleWorldModel?.Overall.HasValue ?? false && checkMask.MaleWorldModel.Overall.Value != (item.MaleWorldModel != null)) return false;
            if (checkMask.MaleWorldModel?.Specific != null && (item.MaleWorldModel == null || !item.MaleWorldModel.HasBeenSet(checkMask.MaleWorldModel.Specific))) return false;
            if (checkMask.MaleIcon.HasValue && checkMask.MaleIcon.Value != (item.MaleIcon != null)) return false;
            if (checkMask.FemaleBipedModel?.Overall.HasValue ?? false && checkMask.FemaleBipedModel.Overall.Value != (item.FemaleBipedModel != null)) return false;
            if (checkMask.FemaleBipedModel?.Specific != null && (item.FemaleBipedModel == null || !item.FemaleBipedModel.HasBeenSet(checkMask.FemaleBipedModel.Specific))) return false;
            if (checkMask.FemaleWorldModel?.Overall.HasValue ?? false && checkMask.FemaleWorldModel.Overall.Value != (item.FemaleWorldModel != null)) return false;
            if (checkMask.FemaleWorldModel?.Specific != null && (item.FemaleWorldModel == null || !item.FemaleWorldModel.HasBeenSet(checkMask.FemaleWorldModel.Specific))) return false;
            if (checkMask.FemaleIcon.HasValue && checkMask.FemaleIcon.Value != (item.FemaleIcon != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAClothingGetter item,
            AClothing.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Script = (item.Script.FormKey != null);
            mask.Enchantment = (item.Enchantment.FormKey != null);
            mask.EnchantmentPoints = (item.EnchantmentPoints != null);
            mask.BipedFlags = true;
            mask.Flags = true;
            var itemMaleBipedModel = item.MaleBipedModel;
            mask.MaleBipedModel = new MaskItem<bool, Model.Mask<bool>?>(itemMaleBipedModel != null, itemMaleBipedModel?.GetHasBeenSetMask());
            var itemMaleWorldModel = item.MaleWorldModel;
            mask.MaleWorldModel = new MaskItem<bool, Model.Mask<bool>?>(itemMaleWorldModel != null, itemMaleWorldModel?.GetHasBeenSetMask());
            mask.MaleIcon = (item.MaleIcon != null);
            var itemFemaleBipedModel = item.FemaleBipedModel;
            mask.FemaleBipedModel = new MaskItem<bool, Model.Mask<bool>?>(itemFemaleBipedModel != null, itemFemaleBipedModel?.GetHasBeenSetMask());
            var itemFemaleWorldModel = item.FemaleWorldModel;
            mask.FemaleWorldModel = new MaskItem<bool, Model.Mask<bool>?>(itemFemaleWorldModel != null, itemFemaleWorldModel?.GetHasBeenSetMask());
            mask.FemaleIcon = (item.FemaleIcon != null);
            mask.BMDTDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AClothing_FieldIndex ConvertFieldIndex(AItem_FieldIndex index)
        {
            switch (index)
            {
                case AItem_FieldIndex.MajorRecordFlagsRaw:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.FormKey:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.Version:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.EditorID:
                    return (AClothing_FieldIndex)((int)index);
                case AItem_FieldIndex.OblivionMajorRecordFlags:
                    return (AClothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AClothing_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (AClothing_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (AClothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AClothing_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AClothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AClothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AClothing_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AClothing_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAClothingGetter? lhs,
            IAClothingGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Enchantment.Equals(rhs.Enchantment)) return false;
            if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            if (lhs.BipedFlags != rhs.BipedFlags) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!object.Equals(lhs.MaleBipedModel, rhs.MaleBipedModel)) return false;
            if (!object.Equals(lhs.MaleWorldModel, rhs.MaleWorldModel)) return false;
            if (!string.Equals(lhs.MaleIcon, rhs.MaleIcon)) return false;
            if (!object.Equals(lhs.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
            if (!object.Equals(lhs.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
            if (!string.Equals(lhs.FemaleIcon, rhs.FemaleIcon)) return false;
            if (lhs.BMDTDataTypeState != rhs.BMDTDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IAItemGetter? lhs,
            IAItemGetter? rhs)
        {
            return Equals(
                lhs: (IAClothingGetter?)lhs,
                rhs: rhs as IAClothingGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAClothingGetter?)lhs,
                rhs: rhs as IAClothingGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAClothingGetter?)lhs,
                rhs: rhs as IAClothingGetter);
        }
        
        public virtual int GetHashCode(IAClothingGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                hash.Add(Scriptitem);
            }
            if (item.Enchantment.TryGet(out var Enchantmentitem))
            {
                hash.Add(Enchantmentitem);
            }
            if (item.EnchantmentPoints.TryGet(out var EnchantmentPointsitem))
            {
                hash.Add(EnchantmentPointsitem);
            }
            hash.Add(item.BipedFlags);
            hash.Add(item.Flags);
            if (item.MaleBipedModel.TryGet(out var MaleBipedModelitem))
            {
                hash.Add(MaleBipedModelitem);
            }
            if (item.MaleWorldModel.TryGet(out var MaleWorldModelitem))
            {
                hash.Add(MaleWorldModelitem);
            }
            if (item.MaleIcon.TryGet(out var MaleIconitem))
            {
                hash.Add(MaleIconitem);
            }
            if (item.FemaleBipedModel.TryGet(out var FemaleBipedModelitem))
            {
                hash.Add(FemaleBipedModelitem);
            }
            if (item.FemaleWorldModel.TryGet(out var FemaleWorldModelitem))
            {
                hash.Add(FemaleWorldModelitem);
            }
            if (item.FemaleIcon.TryGet(out var FemaleIconitem))
            {
                hash.Add(FemaleIconitem);
            }
            hash.Add(item.BMDTDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAItemGetter item)
        {
            return GetHashCode(item: (IAClothingGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IAClothingGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAClothingGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AClothing.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IAClothingGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            yield return obj.Enchantment;
            yield break;
        }
        
        partial void PostDuplicate(AClothing obj, AClothing rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            throw new NotImplementedException();
        }
        
        #endregion
        
    }
    public partial class AClothingSetterTranslationCommon : AItemSetterTranslationCommon
    {
        public new static readonly AClothingSetterTranslationCommon Instance = new AClothingSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IAClothingInternal item,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public virtual void DeepCopyIn(
            IAClothing item,
            IAClothingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Script) ?? true))
            {
                item.Script.FormKey = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Enchantment) ?? true))
            {
                item.Enchantment.FormKey = rhs.Enchantment.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.EnchantmentPoints) ?? true))
            {
                item.EnchantmentPoints = rhs.EnchantmentPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.BipedFlags) ?? true))
            {
                item.BipedFlags = rhs.BipedFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.MaleBipedModel);
                try
                {
                    if(rhs.MaleBipedModel.TryGet(out var rhsMaleBipedModel))
                    {
                        item.MaleBipedModel = rhsMaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleBipedModel));
                    }
                    else
                    {
                        item.MaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.MaleWorldModel);
                try
                {
                    if(rhs.MaleWorldModel.TryGet(out var rhsMaleWorldModel))
                    {
                        item.MaleWorldModel = rhsMaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleWorldModel));
                    }
                    else
                    {
                        item.MaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleIcon) ?? true))
            {
                item.MaleIcon = rhs.MaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleBipedModel);
                try
                {
                    if(rhs.FemaleBipedModel.TryGet(out var rhsFemaleBipedModel))
                    {
                        item.FemaleBipedModel = rhsFemaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleBipedModel));
                    }
                    else
                    {
                        item.FemaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleWorldModel);
                try
                {
                    if(rhs.FemaleWorldModel.TryGet(out var rhsFemaleWorldModel))
                    {
                        item.FemaleWorldModel = rhsFemaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleWorldModel));
                    }
                    else
                    {
                        item.FemaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleIcon) ?? true))
            {
                item.FemaleIcon = rhs.FemaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)AClothing_FieldIndex.BMDTDataTypeState) ?? true))
            {
                item.BMDTDataTypeState = rhs.BMDTDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IAItemInternal item,
            IAItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAClothingInternal)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IAItem item,
            IAItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAClothing)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAClothingInternal)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAClothing)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAClothingInternal)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAClothing)item,
                rhs: (IAClothingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public AClothing DeepCopy(
            IAClothingGetter item,
            AClothing.TranslationMask? copyMask = null)
        {
            AClothing ret = (AClothing)((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AClothing DeepCopy(
            IAClothingGetter item,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? copyMask = null)
        {
            AClothing ret = (AClothing)((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AClothing DeepCopy(
            IAClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AClothing ret = (AClothing)((AClothingCommon)((IAClothingGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AClothing
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AClothing_Registration.Instance;
        public new static AClothing_Registration Registration => AClothing_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AClothingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AClothingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AClothingSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AClothingXmlWriteTranslation :
        AItemXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AClothingXmlWriteTranslation Instance = new AClothingXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAClothingGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            AItemXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)AClothing_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey.Value,
                    fieldIndex: (int)AClothing_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((item.Enchantment.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.Enchantment) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Enchantment),
                    item: item.Enchantment.FormKey.Value,
                    fieldIndex: (int)AClothing_FieldIndex.Enchantment,
                    errorMask: errorMask);
            }
            if ((item.EnchantmentPoints != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.EnchantmentPoints) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnchantmentPoints),
                    item: item.EnchantmentPoints.Value,
                    fieldIndex: (int)AClothing_FieldIndex.EnchantmentPoints,
                    errorMask: errorMask);
            }
            if (item.BMDTDataTypeState.HasFlag(AClothing.BMDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.BipedFlags) ?? true))
                {
                    EnumXmlTranslation<BipedFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BipedFlags),
                        item: item.BipedFlags,
                        fieldIndex: (int)AClothing_FieldIndex.BipedFlags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<EquipmentFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)AClothing_FieldIndex.Flags,
                        errorMask: errorMask);
                }
            }
            if ((item.MaleBipedModel != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleBipedModel) ?? true))
            {
                if (item.MaleBipedModel.TryGet(out var MaleBipedModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)MaleBipedModelItem).XmlWriteTranslator).Write(
                        item: MaleBipedModelItem,
                        node: node,
                        name: nameof(item.MaleBipedModel),
                        fieldIndex: (int)AClothing_FieldIndex.MaleBipedModel,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleBipedModel));
                }
            }
            if ((item.MaleWorldModel != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleWorldModel) ?? true))
            {
                if (item.MaleWorldModel.TryGet(out var MaleWorldModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)MaleWorldModelItem).XmlWriteTranslator).Write(
                        item: MaleWorldModelItem,
                        node: node,
                        name: nameof(item.MaleWorldModel),
                        fieldIndex: (int)AClothing_FieldIndex.MaleWorldModel,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleWorldModel));
                }
            }
            if ((item.MaleIcon != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.MaleIcon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaleIcon),
                    item: item.MaleIcon,
                    fieldIndex: (int)AClothing_FieldIndex.MaleIcon,
                    errorMask: errorMask);
            }
            if ((item.FemaleBipedModel != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleBipedModel) ?? true))
            {
                if (item.FemaleBipedModel.TryGet(out var FemaleBipedModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)FemaleBipedModelItem).XmlWriteTranslator).Write(
                        item: FemaleBipedModelItem,
                        node: node,
                        name: nameof(item.FemaleBipedModel),
                        fieldIndex: (int)AClothing_FieldIndex.FemaleBipedModel,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleBipedModel));
                }
            }
            if ((item.FemaleWorldModel != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleWorldModel) ?? true))
            {
                if (item.FemaleWorldModel.TryGet(out var FemaleWorldModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)FemaleWorldModelItem).XmlWriteTranslator).Write(
                        item: FemaleWorldModelItem,
                        node: node,
                        name: nameof(item.FemaleWorldModel),
                        fieldIndex: (int)AClothing_FieldIndex.FemaleWorldModel,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleWorldModel));
                }
            }
            if ((item.FemaleIcon != null)
                && (translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.FemaleIcon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FemaleIcon),
                    item: item.FemaleIcon,
                    fieldIndex: (int)AClothing_FieldIndex.FemaleIcon,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AClothing_FieldIndex.BMDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<AClothing.BMDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BMDTDataTypeState),
                    item: item.BMDTDataTypeState,
                    fieldIndex: (int)AClothing_FieldIndex.BMDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IAClothingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AClothing");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AClothing");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAClothingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IAItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAClothingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAClothingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAClothingGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AClothingXmlCreateTranslation : AItemXmlCreateTranslation
    {
        public new readonly static AClothingXmlCreateTranslation Instance = new AClothingXmlCreateTranslation();

        public static void FillPublicXml(
            IAClothingInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AClothingXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAClothingInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.Script);
                    try
                    {
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Enchantment":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.Enchantment);
                    try
                    {
                        item.Enchantment.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnchantmentPoints":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.EnchantmentPoints);
                    try
                    {
                        item.EnchantmentPoints = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BipedFlags":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.BipedFlags);
                    try
                    {
                        item.BipedFlags = EnumXmlTranslation<BipedFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BMDTDataTypeState |= AClothing.BMDTDataType.Has;
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<EquipmentFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleBipedModel":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.MaleBipedModel);
                    try
                    {
                        item.MaleBipedModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleBipedModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleWorldModel":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.MaleWorldModel);
                    try
                    {
                        item.MaleWorldModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.MaleWorldModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaleIcon":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.MaleIcon);
                    try
                    {
                        item.MaleIcon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleBipedModel":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleBipedModel);
                    try
                    {
                        item.FemaleBipedModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleBipedModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleWorldModel":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleWorldModel);
                    try
                    {
                        item.FemaleWorldModel = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AClothing_FieldIndex.FemaleWorldModel));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FemaleIcon":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.FemaleIcon);
                    try
                    {
                        item.FemaleIcon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BMDTDataTypeState":
                    errorMask?.PushIndex((int)AClothing_FieldIndex.BMDTDataTypeState);
                    try
                    {
                        item.BMDTDataTypeState = EnumXmlTranslation<AClothing.BMDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    AItemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AClothingXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAClothingGetter item,
            XElement node,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AClothingXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AClothing.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAClothingGetter item,
            string path,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAClothingGetter item,
            Stream stream,
            out AClothing.ErrorMask errorMask,
            AClothing.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AClothingBinaryWriteTranslation :
        AItemBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AClothingBinaryWriteTranslation Instance = new AClothingBinaryWriteTranslation();

        public static void WriteEmbedded(
            IAClothingGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IAClothingGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(AClothing_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(AClothing_Registration.SCRI_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Enchantment,
                header: recordTypeConverter.ConvertToCustom(AClothing_Registration.ENAM_HEADER));
            Mutagen.Bethesda.Binary.UInt16BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentPoints,
                header: recordTypeConverter.ConvertToCustom(AClothing_Registration.ANAM_HEADER));
            if (item.BMDTDataTypeState.HasFlag(AClothing.BMDTDataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(AClothing_Registration.BMDT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<BipedFlag>.Instance.Write(
                        writer,
                        item.BipedFlags,
                        length: 2);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EquipmentFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 2);
                }
            }
            if (item.MaleBipedModel.TryGet(out var MaleBipedModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)MaleBipedModelItem).BinaryWriteTranslator).Write(
                    item: MaleBipedModelItem,
                    writer: writer);
            }
            if (item.MaleWorldModel.TryGet(out var MaleWorldModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)MaleWorldModelItem).BinaryWriteTranslator).Write(
                    item: MaleWorldModelItem,
                    writer: writer,
                    recordTypeConverter: AClothing_Registration.MaleWorldModelConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleIcon,
                header: recordTypeConverter.ConvertToCustom(AClothing_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.FemaleBipedModel.TryGet(out var FemaleBipedModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)FemaleBipedModelItem).BinaryWriteTranslator).Write(
                    item: FemaleBipedModelItem,
                    writer: writer,
                    recordTypeConverter: AClothing_Registration.FemaleBipedModelConverter);
            }
            if (item.FemaleWorldModel.TryGet(out var FemaleWorldModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)FemaleWorldModelItem).BinaryWriteTranslator).Write(
                    item: FemaleWorldModelItem,
                    writer: writer,
                    recordTypeConverter: AClothing_Registration.FemaleWorldModelConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FemaleIcon,
                header: recordTypeConverter.ConvertToCustom(AClothing_Registration.ICO2_HEADER),
                binaryType: StringBinaryType.NullTerminate);
        }

        public virtual void Write(
            MutagenWriter writer,
            IAClothingGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IAItemGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAClothingGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AClothingBinaryCreateTranslation : AItemBinaryCreateTranslation
    {
        public new readonly static AClothingBinaryCreateTranslation Instance = new AClothingBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AClothingBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AClothingBinaryOverlay :
        AItemBinaryOverlay,
        IAClothingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AClothing_Registration.Instance;
        public new static AClothing_Registration Registration => AClothing_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AClothingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AClothingSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAClothingGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => AClothingCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AClothingXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AClothingXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AClothingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AClothingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormLinkNullable<IScriptGetter>.Empty;
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public bool Enchantment_IsSet => _EnchantmentLocation.HasValue;
        public IFormLinkNullableGetter<IEnchantmentGetter> Enchantment => _EnchantmentLocation.HasValue ? new FormLinkNullable<IEnchantmentGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _EnchantmentLocation.Value, _package.Meta)))) : FormLinkNullable<IEnchantmentGetter>.Empty;
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public UInt16? EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _EnchantmentPointsLocation.Value, _package.Meta)) : default(UInt16?);
        #endregion
        private int? _BMDTLocation;
        public AClothing.BMDTDataType BMDTDataTypeState { get; private set; }
        #region BipedFlags
        private int _BipedFlagsLocation => _BMDTLocation!.Value + 0x0;
        private bool _BipedFlags_IsSet => _BMDTLocation.HasValue;
        public BipedFlag BipedFlags => _BipedFlags_IsSet ? (BipedFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BipedFlagsLocation, 2)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _BMDTLocation!.Value + 0x2;
        private bool _Flags_IsSet => _BMDTLocation.HasValue;
        public EquipmentFlag Flags => _Flags_IsSet ? (EquipmentFlag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FlagsLocation, 2)) : default;
        #endregion
        #region MaleBipedModel
        public IModelGetter? MaleBipedModel { get; private set; }
        public bool MaleBipedModel_IsSet => MaleBipedModel != null;
        #endregion
        #region MaleWorldModel
        public IModelGetter? MaleWorldModel { get; private set; }
        public bool MaleWorldModel_IsSet => MaleWorldModel != null;
        #endregion
        #region MaleIcon
        private int? _MaleIconLocation;
        public String? MaleIcon => _MaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MaleIconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region FemaleBipedModel
        public IModelGetter? FemaleBipedModel { get; private set; }
        public bool FemaleBipedModel_IsSet => FemaleBipedModel != null;
        #endregion
        #region FemaleWorldModel
        public IModelGetter? FemaleWorldModel { get; private set; }
        public bool FemaleWorldModel_IsSet => FemaleWorldModel != null;
        #endregion
        #region FemaleIcon
        private int? _FemaleIconLocation;
        public String? FemaleIcon => _FemaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FemaleIconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AClothingBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Name);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Script);
                }
                case 0x4D414E45: // ENAM
                {
                    _EnchantmentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Enchantment);
                }
                case 0x4D414E41: // ANAM
                {
                    _EnchantmentPointsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.EnchantmentPoints);
                }
                case 0x54444D42: // BMDT
                {
                    _BMDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BMDTDataTypeState = AClothing.BMDTDataType.Has;
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.Flags);
                }
                case 0x4C444F4D: // MODL
                {
                    this.MaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.MaleBipedModel);
                }
                case 0x32444F4D: // MOD2
                {
                    this.MaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: AClothing_Registration.MaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.MaleWorldModel);
                }
                case 0x4E4F4349: // ICON
                {
                    _MaleIconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.MaleIcon);
                }
                case 0x33444F4D: // MOD3
                {
                    this.FemaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: AClothing_Registration.FemaleBipedModelConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.FemaleBipedModel);
                }
                case 0x34444F4D: // MOD4
                {
                    this.FemaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: AClothing_Registration.FemaleWorldModelConverter);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.FemaleWorldModel);
                }
                case 0x324F4349: // ICO2
                {
                    _FemaleIconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AClothing_FieldIndex.FemaleIcon);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

