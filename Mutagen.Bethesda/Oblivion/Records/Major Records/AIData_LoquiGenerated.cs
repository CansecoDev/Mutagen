/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIData :
        IAIData,
        ILoquiObjectSetter<AIData>,
        IEquatable<AIData>,
        IEqualsMask
    {
        #region Ctor
        public AIData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Aggression
        public Byte Aggression { get; set; } = default;
        #endregion
        #region Confidence
        public Byte Confidence { get; set; } = default;
        #endregion
        #region EnergyLevel
        public Byte EnergyLevel { get; set; } = default;
        #endregion
        #region Responsibility
        public Byte Responsibility { get; set; } = default;
        #endregion
        #region BuySellServices
        public Npc.BuySellServiceFlag BuySellServices { get; set; } = default;
        #endregion
        #region Teaches
        public Skill Teaches { get; set; } = default;
        #endregion
        #region MaximumTrainingLevel
        public Byte MaximumTrainingLevel { get; set; } = default;
        #endregion
        #region Unused
        public Int16 Unused { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAIDataGetter rhs)) return false;
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AIData obj)
        {
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AIDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AIDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static AIData CreateFromXml(
            XElement node,
            AIData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIData CreateFromXml(
            XElement node,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AIData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new AIData();
            ((AIDataSetterCommon)((IAIDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AIData CreateFromXml(
            string path,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AIData CreateFromXml(
            string path,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AIData CreateFromXml(
            Stream stream,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AIData CreateFromXml(
            Stream stream,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Aggression = initialValue;
                this.Confidence = initialValue;
                this.EnergyLevel = initialValue;
                this.Responsibility = initialValue;
                this.BuySellServices = initialValue;
                this.Teaches = initialValue;
                this.MaximumTrainingLevel = initialValue;
                this.Unused = initialValue;
            }

            public Mask(
                TItem Aggression,
                TItem Confidence,
                TItem EnergyLevel,
                TItem Responsibility,
                TItem BuySellServices,
                TItem Teaches,
                TItem MaximumTrainingLevel,
                TItem Unused)
            {
                this.Aggression = Aggression;
                this.Confidence = Confidence;
                this.EnergyLevel = EnergyLevel;
                this.Responsibility = Responsibility;
                this.BuySellServices = BuySellServices;
                this.Teaches = Teaches;
                this.MaximumTrainingLevel = MaximumTrainingLevel;
                this.Unused = Unused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Aggression;
            public TItem Confidence;
            public TItem EnergyLevel;
            public TItem Responsibility;
            public TItem BuySellServices;
            public TItem Teaches;
            public TItem MaximumTrainingLevel;
            public TItem Unused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
                if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
                if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
                if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
                if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Aggression);
                hash.Add(this.Confidence);
                hash.Add(this.EnergyLevel);
                hash.Add(this.Responsibility);
                hash.Add(this.BuySellServices);
                hash.Add(this.Teaches);
                hash.Add(this.MaximumTrainingLevel);
                hash.Add(this.Unused);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Aggression)) return false;
                if (!eval(this.Confidence)) return false;
                if (!eval(this.EnergyLevel)) return false;
                if (!eval(this.Responsibility)) return false;
                if (!eval(this.BuySellServices)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaximumTrainingLevel)) return false;
                if (!eval(this.Unused)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Aggression)) return true;
                if (eval(this.Confidence)) return true;
                if (eval(this.EnergyLevel)) return true;
                if (eval(this.Responsibility)) return true;
                if (eval(this.BuySellServices)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaximumTrainingLevel)) return true;
                if (eval(this.Unused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Aggression = eval(this.Aggression);
                obj.Confidence = eval(this.Confidence);
                obj.EnergyLevel = eval(this.EnergyLevel);
                obj.Responsibility = eval(this.Responsibility);
                obj.BuySellServices = eval(this.BuySellServices);
                obj.Teaches = eval(this.Teaches);
                obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
                obj.Unused = eval(this.Unused);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AIData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AIData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AIData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Aggression ?? true)
                    {
                        fg.AppendItem(Aggression, "Aggression");
                    }
                    if (printMask?.Confidence ?? true)
                    {
                        fg.AppendItem(Confidence, "Confidence");
                    }
                    if (printMask?.EnergyLevel ?? true)
                    {
                        fg.AppendItem(EnergyLevel, "EnergyLevel");
                    }
                    if (printMask?.Responsibility ?? true)
                    {
                        fg.AppendItem(Responsibility, "Responsibility");
                    }
                    if (printMask?.BuySellServices ?? true)
                    {
                        fg.AppendItem(BuySellServices, "BuySellServices");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaximumTrainingLevel ?? true)
                    {
                        fg.AppendItem(MaximumTrainingLevel, "MaximumTrainingLevel");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Aggression;
            public Exception? Confidence;
            public Exception? EnergyLevel;
            public Exception? Responsibility;
            public Exception? BuySellServices;
            public Exception? Teaches;
            public Exception? MaximumTrainingLevel;
            public Exception? Unused;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        return Aggression;
                    case AIData_FieldIndex.Confidence:
                        return Confidence;
                    case AIData_FieldIndex.EnergyLevel:
                        return EnergyLevel;
                    case AIData_FieldIndex.Responsibility:
                        return Responsibility;
                    case AIData_FieldIndex.BuySellServices:
                        return BuySellServices;
                    case AIData_FieldIndex.Teaches:
                        return Teaches;
                    case AIData_FieldIndex.MaximumTrainingLevel:
                        return MaximumTrainingLevel;
                    case AIData_FieldIndex.Unused:
                        return Unused;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        this.Aggression = ex;
                        break;
                    case AIData_FieldIndex.Confidence:
                        this.Confidence = ex;
                        break;
                    case AIData_FieldIndex.EnergyLevel:
                        this.EnergyLevel = ex;
                        break;
                    case AIData_FieldIndex.Responsibility:
                        this.Responsibility = ex;
                        break;
                    case AIData_FieldIndex.BuySellServices:
                        this.BuySellServices = ex;
                        break;
                    case AIData_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case AIData_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = ex;
                        break;
                    case AIData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        this.Aggression = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Confidence:
                        this.Confidence = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.EnergyLevel:
                        this.EnergyLevel = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Responsibility:
                        this.Responsibility = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.BuySellServices:
                        this.BuySellServices = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Aggression != null) return true;
                if (Confidence != null) return true;
                if (EnergyLevel != null) return true;
                if (Responsibility != null) return true;
                if (BuySellServices != null) return true;
                if (Teaches != null) return true;
                if (MaximumTrainingLevel != null) return true;
                if (Unused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Aggression, "Aggression");
                fg.AppendItem(Confidence, "Confidence");
                fg.AppendItem(EnergyLevel, "EnergyLevel");
                fg.AppendItem(Responsibility, "Responsibility");
                fg.AppendItem(BuySellServices, "BuySellServices");
                fg.AppendItem(Teaches, "Teaches");
                fg.AppendItem(MaximumTrainingLevel, "MaximumTrainingLevel");
                fg.AppendItem(Unused, "Unused");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Aggression = this.Aggression.Combine(rhs.Aggression);
                ret.Confidence = this.Confidence.Combine(rhs.Confidence);
                ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
                ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
                ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Aggression;
            public bool Confidence;
            public bool EnergyLevel;
            public bool Responsibility;
            public bool BuySellServices;
            public bool Teaches;
            public bool MaximumTrainingLevel;
            public bool Unused;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Aggression = defaultOn;
                this.Confidence = defaultOn;
                this.EnergyLevel = defaultOn;
                this.Responsibility = defaultOn;
                this.BuySellServices = defaultOn;
                this.Teaches = defaultOn;
                this.MaximumTrainingLevel = defaultOn;
                this.Unused = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Aggression, null));
                ret.Add((Confidence, null));
                ret.Add((EnergyLevel, null));
                ret.Add((Responsibility, null));
                ret.Add((BuySellServices, null));
                ret.Add((Teaches, null));
                ret.Add((MaximumTrainingLevel, null));
                ret.Add((Unused, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = AIData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static AIData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static AIData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AIData();
            ((AIDataSetterCommon)((IAIDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AIDataSetterCommon)((IAIDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AIData GetNew()
        {
            return new AIData();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIData :
        IAIDataGetter,
        ILoquiObjectSetter<IAIData>
    {
        new Byte Aggression { get; set; }
        new Byte Confidence { get; set; }
        new Byte EnergyLevel { get; set; }
        new Byte Responsibility { get; set; }
        new Npc.BuySellServiceFlag BuySellServices { get; set; }
        new Skill Teaches { get; set; }
        new Byte MaximumTrainingLevel { get; set; }
        new Int16 Unused { get; set; }
    }

    public partial interface IAIDataGetter :
        ILoquiObject,
        ILoquiObject<IAIDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => AIData_Registration.Instance;
        Byte Aggression { get; }
        Byte Confidence { get; }
        Byte EnergyLevel { get; }
        Byte Responsibility { get; }
        Npc.BuySellServiceFlag BuySellServices { get; }
        Skill Teaches { get; }
        Byte MaximumTrainingLevel { get; }
        Int16 Unused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AIDataMixIn
    {
        public static void Clear(this IAIData item)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIData.Mask<bool> GetEqualsMask(
            this IAIDataGetter item,
            IAIDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIDataGetter item,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIDataGetter item,
            FileGeneration fg,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAIDataGetter item,
            AIData.Mask<bool?> checkMask)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AIData.Mask<bool> GetHasBeenSetMask(this IAIDataGetter item)
        {
            var ret = new AIData.Mask<bool>(false);
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAIDataGetter item,
            IAIDataGetter rhs)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            AIData.TranslationMask? copyMask = null)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            AIData.TranslationMask? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAIData item,
            XElement node,
            AIData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAIData item,
            XElement node,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAIData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIData item,
            string path,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIData item,
            string path,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIData item,
            string path,
            ErrorMaskBuilder? errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAIData item,
            Stream stream,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIData item,
            Stream stream,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AIData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAIData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAIData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIData_FieldIndex
    {
        Aggression = 0,
        Confidence = 1,
        EnergyLevel = 2,
        Responsibility = 3,
        BuySellServices = 4,
        Teaches = 5,
        MaximumTrainingLevel = 6,
        Unused = 7,
    }
    #endregion

    #region Registration
    public partial class AIData_Registration : ILoquiRegistration
    {
        public static readonly AIData_Registration Instance = new AIData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 199,
            version: 0);

        public const string GUID = "4c031ad6-6a9d-4855-81b4-81ff0b43a9af";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(AIData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIData.ErrorMask);

        public static readonly Type ClassType = typeof(AIData);

        public static readonly Type GetterType = typeof(IAIDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIData";

        public const string Name = "AIData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "AGGRESSION":
                    return (ushort)AIData_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)AIData_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)AIData_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)AIData_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)AIData_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)AIData_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)AIData_FieldIndex.MaximumTrainingLevel;
                case "UNUSED":
                    return (ushort)AIData_FieldIndex.Unused;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                case AIData_FieldIndex.Confidence:
                case AIData_FieldIndex.EnergyLevel:
                case AIData_FieldIndex.Responsibility:
                case AIData_FieldIndex.BuySellServices:
                case AIData_FieldIndex.Teaches:
                case AIData_FieldIndex.MaximumTrainingLevel:
                case AIData_FieldIndex.Unused:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                case AIData_FieldIndex.Confidence:
                case AIData_FieldIndex.EnergyLevel:
                case AIData_FieldIndex.Responsibility:
                case AIData_FieldIndex.BuySellServices:
                case AIData_FieldIndex.Teaches:
                case AIData_FieldIndex.MaximumTrainingLevel:
                case AIData_FieldIndex.Unused:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                case AIData_FieldIndex.Confidence:
                case AIData_FieldIndex.EnergyLevel:
                case AIData_FieldIndex.Responsibility:
                case AIData_FieldIndex.BuySellServices:
                case AIData_FieldIndex.Teaches:
                case AIData_FieldIndex.MaximumTrainingLevel:
                case AIData_FieldIndex.Unused:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                    return "Aggression";
                case AIData_FieldIndex.Confidence:
                    return "Confidence";
                case AIData_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case AIData_FieldIndex.Responsibility:
                    return "Responsibility";
                case AIData_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case AIData_FieldIndex.Teaches:
                    return "Teaches";
                case AIData_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case AIData_FieldIndex.Unused:
                    return "Unused";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                case AIData_FieldIndex.Confidence:
                case AIData_FieldIndex.EnergyLevel:
                case AIData_FieldIndex.Responsibility:
                case AIData_FieldIndex.BuySellServices:
                case AIData_FieldIndex.Teaches:
                case AIData_FieldIndex.MaximumTrainingLevel:
                case AIData_FieldIndex.Unused:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                case AIData_FieldIndex.Confidence:
                case AIData_FieldIndex.EnergyLevel:
                case AIData_FieldIndex.Responsibility:
                case AIData_FieldIndex.BuySellServices:
                case AIData_FieldIndex.Teaches:
                case AIData_FieldIndex.MaximumTrainingLevel:
                case AIData_FieldIndex.Unused:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIData_FieldIndex enu = (AIData_FieldIndex)index;
            switch (enu)
            {
                case AIData_FieldIndex.Aggression:
                    return typeof(Byte);
                case AIData_FieldIndex.Confidence:
                    return typeof(Byte);
                case AIData_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case AIData_FieldIndex.Responsibility:
                    return typeof(Byte);
                case AIData_FieldIndex.BuySellServices:
                    return typeof(Npc.BuySellServiceFlag);
                case AIData_FieldIndex.Teaches:
                    return typeof(Skill);
                case AIData_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case AIData_FieldIndex.Unused:
                    return typeof(Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AIDataXmlWriteTranslation);
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType TriggeringRecordType = AIDT_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(AIDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AIDataSetterCommon
    {
        public static readonly AIDataSetterCommon Instance = new AIDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIData item)
        {
            ClearPartial();
            item.Aggression = default;
            item.Confidence = default;
            item.EnergyLevel = default;
            item.Responsibility = default;
            item.BuySellServices = default;
            item.Teaches = default;
            item.MaximumTrainingLevel = default;
            item.Unused = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IAIData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAIData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(AIData_Registration.AIDT_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: AIDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class AIDataCommon
    {
        public static readonly AIDataCommon Instance = new AIDataCommon();

        public AIData.Mask<bool> GetEqualsMask(
            IAIDataGetter item,
            IAIDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIData.Mask<bool>(false);
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIDataGetter item,
            IAIDataGetter rhs,
            AIData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.Unused = item.Unused == rhs.Unused;
        }
        
        public string ToString(
            IAIDataGetter item,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIDataGetter item,
            FileGeneration fg,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIData =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIDataGetter item,
            FileGeneration fg,
            AIData.Mask<bool>? printMask = null)
        {
            if (printMask?.Aggression ?? true)
            {
                fg.AppendItem(item.Aggression, "Aggression");
            }
            if (printMask?.Confidence ?? true)
            {
                fg.AppendItem(item.Confidence, "Confidence");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                fg.AppendItem(item.EnergyLevel, "EnergyLevel");
            }
            if (printMask?.Responsibility ?? true)
            {
                fg.AppendItem(item.Responsibility, "Responsibility");
            }
            if (printMask?.BuySellServices ?? true)
            {
                fg.AppendItem(item.BuySellServices, "BuySellServices");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendItem(item.Teaches, "Teaches");
            }
            if (printMask?.MaximumTrainingLevel ?? true)
            {
                fg.AppendItem(item.MaximumTrainingLevel, "MaximumTrainingLevel");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendItem(item.Unused, "Unused");
            }
        }
        
        public bool HasBeenSet(
            IAIDataGetter item,
            AIData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IAIDataGetter item,
            AIData.Mask<bool> mask)
        {
            mask.Aggression = true;
            mask.Confidence = true;
            mask.EnergyLevel = true;
            mask.Responsibility = true;
            mask.BuySellServices = true;
            mask.Teaches = true;
            mask.MaximumTrainingLevel = true;
            mask.Unused = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIDataGetter? lhs,
            IAIDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Aggression != rhs.Aggression) return false;
            if (lhs.Confidence != rhs.Confidence) return false;
            if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            if (lhs.Responsibility != rhs.Responsibility) return false;
            if (lhs.BuySellServices != rhs.BuySellServices) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (lhs.Unused != rhs.Unused) return false;
            return true;
        }
        
        public virtual int GetHashCode(IAIDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Aggression);
            hash.Add(item.Confidence);
            hash.Add(item.EnergyLevel);
            hash.Add(item.Responsibility);
            hash.Add(item.BuySellServices);
            hash.Add(item.Teaches);
            hash.Add(item.MaximumTrainingLevel);
            hash.Add(item.Unused);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AIData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IAIDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IAIDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class AIDataSetterTranslationCommon
    {
        public static readonly AIDataSetterTranslationCommon Instance = new AIDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IAIData item,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Aggression) ?? true))
            {
                item.Aggression = rhs.Aggression;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Confidence) ?? true))
            {
                item.Confidence = rhs.Confidence;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.EnergyLevel) ?? true))
            {
                item.EnergyLevel = rhs.EnergyLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Responsibility) ?? true))
            {
                item.Responsibility = rhs.Responsibility;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.BuySellServices) ?? true))
            {
                item.BuySellServices = rhs.BuySellServices;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
        }
        
        #endregion
        
        public AIData DeepCopy(
            IAIDataGetter item,
            AIData.TranslationMask? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AIData DeepCopy(
            IAIDataGetter item,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AIData DeepCopy(
            IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIData_Registration.Instance;
        public static AIData_Registration Registration => AIData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AIDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static AIDataXmlWriteTranslation Instance = new AIDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAIDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.Aggression) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Aggression),
                    item: item.Aggression,
                    fieldIndex: (int)AIData_FieldIndex.Aggression,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.Confidence) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Confidence),
                    item: item.Confidence,
                    fieldIndex: (int)AIData_FieldIndex.Confidence,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.EnergyLevel) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EnergyLevel),
                    item: item.EnergyLevel,
                    fieldIndex: (int)AIData_FieldIndex.EnergyLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.Responsibility) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Responsibility),
                    item: item.Responsibility,
                    fieldIndex: (int)AIData_FieldIndex.Responsibility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.BuySellServices) ?? true))
            {
                EnumXmlTranslation<Npc.BuySellServiceFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.BuySellServices),
                    item: item.BuySellServices,
                    fieldIndex: (int)AIData_FieldIndex.BuySellServices,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.Teaches) ?? true))
            {
                EnumXmlTranslation<Skill>.Instance.Write(
                    node: node,
                    name: nameof(item.Teaches),
                    item: item.Teaches,
                    fieldIndex: (int)AIData_FieldIndex.Teaches,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaximumTrainingLevel),
                    item: item.MaximumTrainingLevel,
                    fieldIndex: (int)AIData_FieldIndex.MaximumTrainingLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AIData_FieldIndex.Unused) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unused),
                    item: item.Unused,
                    fieldIndex: (int)AIData_FieldIndex.Unused,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAIDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IAIDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class AIDataXmlCreateTranslation
    {
        public readonly static AIDataXmlCreateTranslation Instance = new AIDataXmlCreateTranslation();

        public static void FillPublicXml(
            IAIData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAIData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Aggression":
                    errorMask?.PushIndex((int)AIData_FieldIndex.Aggression);
                    try
                    {
                        item.Aggression = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Confidence":
                    errorMask?.PushIndex((int)AIData_FieldIndex.Confidence);
                    try
                    {
                        item.Confidence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnergyLevel":
                    errorMask?.PushIndex((int)AIData_FieldIndex.EnergyLevel);
                    try
                    {
                        item.EnergyLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responsibility":
                    errorMask?.PushIndex((int)AIData_FieldIndex.Responsibility);
                    try
                    {
                        item.Responsibility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuySellServices":
                    errorMask?.PushIndex((int)AIData_FieldIndex.BuySellServices);
                    try
                    {
                        item.BuySellServices = EnumXmlTranslation<Npc.BuySellServiceFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    errorMask?.PushIndex((int)AIData_FieldIndex.Teaches);
                    try
                    {
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumTrainingLevel":
                    errorMask?.PushIndex((int)AIData_FieldIndex.MaximumTrainingLevel);
                    try
                    {
                        item.MaximumTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unused":
                    errorMask?.PushIndex((int)AIData_FieldIndex.Unused);
                    try
                    {
                        item.Unused = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AIDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAIDataGetter item,
            XElement node,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AIDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            string path,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            Stream stream,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((AIDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            XElement node,
            string? name = null,
            AIData.TranslationMask? translationMask = null)
        {
            ((AIDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((AIDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((AIDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static AIDataBinaryWriteTranslation Instance = new AIDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IAIDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Aggression);
            writer.Write(item.Confidence);
            writer.Write(item.EnergyLevel);
            writer.Write(item.Responsibility);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Npc.BuySellServiceFlag>.Instance.Write(
                writer,
                item.BuySellServices,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                writer,
                item.Teaches,
                length: 1);
            writer.Write(item.MaximumTrainingLevel);
            writer.Write(item.Unused);
        }

        public void Write(
            MutagenWriter writer,
            IAIDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.Header(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(AIData_Registration.AIDT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAIDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AIDataBinaryCreateTranslation
    {
        public readonly static AIDataBinaryCreateTranslation Instance = new AIDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAIData item,
            MutagenFrame frame)
        {
            item.Aggression = frame.ReadUInt8();
            item.Confidence = frame.ReadUInt8();
            item.EnergyLevel = frame.ReadUInt8();
            item.Responsibility = frame.ReadUInt8();
            item.BuySellServices = EnumBinaryTranslation<Npc.BuySellServiceFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.MaximumTrainingLevel = frame.ReadUInt8();
            item.Unused = frame.ReadInt16();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIDataGetter item,
            MutagenWriter writer)
        {
            ((AIDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIDataBinaryOverlay :
        BinaryOverlay,
        IAIDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIData_Registration.Instance;
        public static AIData_Registration Registration => AIData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAIDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => AIDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AIDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte Aggression => _data.Span[0x0];
        public Byte Confidence => _data.Span[0x1];
        public Byte EnergyLevel => _data.Span[0x2];
        public Byte Responsibility => _data.Span[0x3];
        public Npc.BuySellServiceFlag BuySellServices => (Npc.BuySellServiceFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public Skill Teaches => (Skill)_data.Span.Slice(0x8, 0x1)[0];
        public Byte MaximumTrainingLevel => _data.Span[0x9];
        public Int16 Unused => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0xA, 0x2));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AIDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static AIDataBinaryOverlay AIDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AIDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static AIDataBinaryOverlay AIDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return AIDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

