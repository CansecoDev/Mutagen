/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIPackage :
        OblivionMajorRecord,
        IAIPackageInternal,
        ILoquiObjectSetter<AIPackage>,
        IEquatable<AIPackage>,
        IEqualsMask
    {
        #region Ctor
        protected AIPackage()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackage.Flag _Flags;
        public AIPackage.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.PKDTDataTypeState |= PKDTDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region GeneralType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackage.GeneralTypeEnum _GeneralType;
        public AIPackage.GeneralTypeEnum GeneralType
        {
            get => this._GeneralType;
            set
            {
                this.PKDTDataTypeState |= PKDTDataType.Has;
                this._GeneralType = value;
            }
        }
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageLocation? _Location;
        public AIPackageLocation? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageLocationGetter? IAIPackageGetter.Location => this.Location;
        #endregion
        #region Schedule
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageSchedule? _Schedule;
        public AIPackageSchedule? Schedule
        {
            get => _Schedule;
            set => _Schedule = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageScheduleGetter? IAIPackageGetter.Schedule => this.Schedule;
        #endregion
        #region Target
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIPackageTarget? _Target;
        public AIPackageTarget? Target
        {
            get => _Target;
            set => _Target = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIPackageTargetGetter? IAIPackageGetter.Target => this.Target;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IAIPackageGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region PKDTDataTypeState
        public AIPackage.PKDTDataType PKDTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AIPackageMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAIPackageGetter rhs)) return false;
            return ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AIPackage obj)
        {
            return ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AIPackageCommon)((IAIPackageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AIPackageXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AIPackageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new AIPackage CreateFromXml(
            XElement node,
            AIPackage.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AIPackage CreateFromXml(
            XElement node,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AIPackage CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new AIPackage();
            ((AIPackageSetterCommon)((IAIPackageGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AIPackage CreateFromXml(
            string path,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            string path,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AIPackage CreateFromXml(
            Stream stream,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            Stream stream,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AIPackage CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Flags = initialValue;
                this.GeneralType = initialValue;
                this.Location = new MaskItem<TItem, AIPackageLocation.Mask<TItem>?>(initialValue, new AIPackageLocation.Mask<TItem>(initialValue));
                this.Schedule = new MaskItem<TItem, AIPackageSchedule.Mask<TItem>?>(initialValue, new AIPackageSchedule.Mask<TItem>(initialValue));
                this.Target = new MaskItem<TItem, AIPackageTarget.Mask<TItem>?>(initialValue, new AIPackageTarget.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.PKDTDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Flags,
                TItem GeneralType,
                TItem Location,
                TItem Schedule,
                TItem Target,
                TItem Conditions,
                TItem PKDTDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Flags = Flags;
                this.GeneralType = GeneralType;
                this.Location = new MaskItem<TItem, AIPackageLocation.Mask<TItem>?>(Location, new AIPackageLocation.Mask<TItem>(Location));
                this.Schedule = new MaskItem<TItem, AIPackageSchedule.Mask<TItem>?>(Schedule, new AIPackageSchedule.Mask<TItem>(Schedule));
                this.Target = new MaskItem<TItem, AIPackageTarget.Mask<TItem>?>(Target, new AIPackageTarget.Mask<TItem>(Target));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.PKDTDataTypeState = PKDTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem GeneralType;
            public MaskItem<TItem, AIPackageLocation.Mask<TItem>?>? Location { get; set; }
            public MaskItem<TItem, AIPackageSchedule.Mask<TItem>?>? Schedule { get; set; }
            public MaskItem<TItem, AIPackageTarget.Mask<TItem>?>? Target { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem PKDTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.GeneralType, rhs.GeneralType)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.Schedule, rhs.Schedule)) return false;
                if (!object.Equals(this.Target, rhs.Target)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.PKDTDataTypeState, rhs.PKDTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.GeneralType?.GetHashCode());
                ret = ret.CombineHashCode(this.Location?.GetHashCode());
                ret = ret.CombineHashCode(this.Schedule?.GetHashCode());
                ret = ret.CombineHashCode(this.Target?.GetHashCode());
                ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
                ret = ret.CombineHashCode(this.PKDTDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.GeneralType)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                if (Schedule != null)
                {
                    if (!eval(this.Schedule.Overall)) return false;
                    if (this.Schedule.Specific != null && !this.Schedule.Specific.All(eval)) return false;
                }
                if (Target != null)
                {
                    if (!eval(this.Target.Overall)) return false;
                    if (this.Target.Specific != null && !this.Target.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.PKDTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.GeneralType)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                if (Schedule != null)
                {
                    if (eval(this.Schedule.Overall)) return true;
                    if (this.Schedule.Specific != null && this.Schedule.Specific.Any(eval)) return true;
                }
                if (Target != null)
                {
                    if (eval(this.Target.Overall)) return true;
                    if (this.Target.Specific != null && this.Target.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.PKDTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIPackage.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Flags = eval(this.Flags);
                obj.GeneralType = eval(this.GeneralType);
                obj.Location = this.Location == null ? null : new MaskItem<R, AIPackageLocation.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
                obj.Schedule = this.Schedule == null ? null : new MaskItem<R, AIPackageSchedule.Mask<R>?>(eval(this.Schedule.Overall), this.Schedule.Specific?.Translate(eval));
                obj.Target = this.Target == null ? null : new MaskItem<R, AIPackageTarget.Mask<R>?>(eval(this.Target.Overall), this.Target.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PKDTDataTypeState = eval(this.PKDTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AIPackage.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AIPackage.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AIPackage.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.GeneralType ?? true)
                    {
                        fg.AppendItem(GeneralType, "GeneralType");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.ToString(fg);
                    }
                    if (printMask?.Schedule?.Overall ?? true)
                    {
                        Schedule?.ToString(fg);
                    }
                    if (printMask?.Target?.Overall ?? true)
                    {
                        Target?.ToString(fg);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.PKDTDataTypeState ?? true)
                    {
                        fg.AppendItem(PKDTDataTypeState, "PKDTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Flags;
            public Exception? GeneralType;
            public MaskItem<Exception?, AIPackageLocation.ErrorMask?>? Location;
            public MaskItem<Exception?, AIPackageSchedule.ErrorMask?>? Schedule;
            public MaskItem<Exception?, AIPackageTarget.ErrorMask?>? Target;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? PKDTDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
                switch (enu)
                {
                    case AIPackage_FieldIndex.Flags:
                        return Flags;
                    case AIPackage_FieldIndex.GeneralType:
                        return GeneralType;
                    case AIPackage_FieldIndex.Location:
                        return Location;
                    case AIPackage_FieldIndex.Schedule:
                        return Schedule;
                    case AIPackage_FieldIndex.Target:
                        return Target;
                    case AIPackage_FieldIndex.Conditions:
                        return Conditions;
                    case AIPackage_FieldIndex.PKDTDataTypeState:
                        return PKDTDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
                switch (enu)
                {
                    case AIPackage_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case AIPackage_FieldIndex.GeneralType:
                        this.GeneralType = ex;
                        break;
                    case AIPackage_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, AIPackageLocation.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Schedule:
                        this.Schedule = new MaskItem<Exception?, AIPackageSchedule.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Target:
                        this.Target = new MaskItem<Exception?, AIPackageTarget.ErrorMask?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case AIPackage_FieldIndex.PKDTDataTypeState:
                        this.PKDTDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
                switch (enu)
                {
                    case AIPackage_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case AIPackage_FieldIndex.GeneralType:
                        this.GeneralType = (Exception?)obj;
                        break;
                    case AIPackage_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, AIPackageLocation.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Schedule:
                        this.Schedule = (MaskItem<Exception?, AIPackageSchedule.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Target:
                        this.Target = (MaskItem<Exception?, AIPackageTarget.ErrorMask?>?)obj;
                        break;
                    case AIPackage_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case AIPackage_FieldIndex.PKDTDataTypeState:
                        this.PKDTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (GeneralType != null) return true;
                if (Location != null) return true;
                if (Schedule != null) return true;
                if (Target != null) return true;
                if (Conditions != null) return true;
                if (PKDTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(GeneralType, "GeneralType");
                Location?.ToString(fg);
                Schedule?.ToString(fg);
                Target?.ToString(fg);
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(PKDTDataTypeState, "PKDTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.GeneralType = this.GeneralType.Combine(rhs.GeneralType);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                ret.Schedule = this.Schedule.Combine(rhs.Schedule, (l, r) => l.Combine(r));
                ret.Target = this.Target.Combine(rhs.Target, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.PKDTDataTypeState = this.PKDTDataTypeState.Combine(rhs.PKDTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Flags;
            public bool GeneralType;
            public MaskItem<bool, AIPackageLocation.TranslationMask?> Location;
            public MaskItem<bool, AIPackageSchedule.TranslationMask?> Schedule;
            public MaskItem<bool, AIPackageTarget.TranslationMask?> Target;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool PKDTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Flags = defaultOn;
                this.GeneralType = defaultOn;
                this.Location = new MaskItem<bool, AIPackageLocation.TranslationMask?>(defaultOn, null);
                this.Schedule = new MaskItem<bool, AIPackageSchedule.TranslationMask?>(defaultOn, null);
                this.Target = new MaskItem<bool, AIPackageTarget.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.PKDTDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Flags, null));
                ret.Add((GeneralType, null));
                ret.Add((Location?.Overall ?? true, Location?.Specific?.GetCrystal()));
                ret.Add((Schedule?.Overall ?? true, Schedule?.Specific?.GetCrystal()));
                ret.Add((Target?.Overall ?? true, Target?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((PKDTDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AIPackage_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum PKDTDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => AIPackageCommon.Instance.GetLinks(this);
        public AIPackage(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public AIPackage(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public AIPackage(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AIPackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIPackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new AIPackage CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static AIPackage CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AIPackage();
            ((AIPackageSetterCommon)((IAIPackageGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AIPackage GetNew()
        {
            return new AIPackage();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIPackage :
        IAIPackageGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IAIPackageInternal>
    {
        new AIPackage.Flag Flags { get; set; }
        new AIPackage.GeneralTypeEnum GeneralType { get; set; }
        new AIPackageLocation? Location { get; set; }
        new AIPackageSchedule? Schedule { get; set; }
        new AIPackageTarget? Target { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        new AIPackage.PKDTDataType PKDTDataTypeState { get; set; }
    }

    public partial interface IAIPackageInternal :
        IOblivionMajorRecordInternal,
        IAIPackage,
        IAIPackageGetter
    {
    }

    public partial interface IAIPackageGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IAIPackageGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        AIPackage.Flag Flags { get; }
        AIPackage.GeneralTypeEnum GeneralType { get; }
        IAIPackageLocationGetter? Location { get; }
        IAIPackageScheduleGetter? Schedule { get; }
        IAIPackageTargetGetter? Target { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        AIPackage.PKDTDataType PKDTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class AIPackageMixIn
    {
        public static void Clear(this IAIPackageInternal item)
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIPackage.Mask<bool> GetEqualsMask(
            this IAIPackageGetter item,
            IAIPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAIPackageGetter item,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAIPackageGetter item,
            FileGeneration fg,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAIPackageGetter item,
            AIPackage.Mask<bool?> checkMask)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AIPackage.Mask<bool> GetHasBeenSetMask(this IAIPackageGetter item)
        {
            var ret = new AIPackage.Mask<bool>(false);
            ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAIPackageGetter item,
            IAIPackageGetter rhs)
        {
            return ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAIPackageInternal lhs,
            IAIPackageGetter rhs,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AIPackage.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIPackageInternal lhs,
            IAIPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIPackageSetterTranslationCommon)((IAIPackageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AIPackage DeepCopy(
            this IAIPackageGetter item,
            AIPackage.TranslationMask? copyMask = null)
        {
            return ((AIPackageSetterTranslationCommon)((IAIPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIPackage DeepCopy(
            this IAIPackageGetter item,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? copyMask = null)
        {
            return ((AIPackageSetterTranslationCommon)((IAIPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIPackage DeepCopy(
            this IAIPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIPackageSetterTranslationCommon)((IAIPackageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAIPackageInternal item,
            XElement node,
            AIPackage.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAIPackageInternal item,
            XElement node,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            string path,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            string path,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            Stream stream,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            Stream stream,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAIPackageInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AIPackage.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAIPackageInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAIPackageInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIPackageSetterCommon)((IAIPackageGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AIPackage_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Flags = 5,
        GeneralType = 6,
        Location = 7,
        Schedule = 8,
        Target = 9,
        Conditions = 10,
        PKDTDataTypeState = 11,
    }
    #endregion

    #region Registration
    public partial class AIPackage_Registration : ILoquiRegistration
    {
        public static readonly AIPackage_Registration Instance = new AIPackage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 87,
            version: 0);

        public const string GUID = "e9210f75-0cfe-4e96-8c3a-415255e0d359";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(AIPackage.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIPackage.ErrorMask);

        public static readonly Type ClassType = typeof(AIPackage);

        public static readonly Type GetterType = typeof(IAIPackageGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIPackage);

        public static readonly Type? InternalSetterType = typeof(IAIPackageInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIPackage";

        public const string Name = "AIPackage";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)AIPackage_FieldIndex.Flags;
                case "GENERALTYPE":
                    return (ushort)AIPackage_FieldIndex.GeneralType;
                case "LOCATION":
                    return (ushort)AIPackage_FieldIndex.Location;
                case "SCHEDULE":
                    return (ushort)AIPackage_FieldIndex.Schedule;
                case "TARGET":
                    return (ushort)AIPackage_FieldIndex.Target;
                case "CONDITIONS":
                    return (ushort)AIPackage_FieldIndex.Conditions;
                case "PKDTDATATYPESTATE":
                    return (ushort)AIPackage_FieldIndex.PKDTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Conditions:
                    return true;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                    return true;
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return "Flags";
                case AIPackage_FieldIndex.GeneralType:
                    return "GeneralType";
                case AIPackage_FieldIndex.Location:
                    return "Location";
                case AIPackage_FieldIndex.Schedule:
                    return "Schedule";
                case AIPackage_FieldIndex.Target:
                    return "Target";
                case AIPackage_FieldIndex.Conditions:
                    return "Conditions";
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return "PKDTDataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                case AIPackage_FieldIndex.GeneralType:
                case AIPackage_FieldIndex.Location:
                case AIPackage_FieldIndex.Schedule:
                case AIPackage_FieldIndex.Target:
                case AIPackage_FieldIndex.Conditions:
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AIPackage_FieldIndex enu = (AIPackage_FieldIndex)index;
            switch (enu)
            {
                case AIPackage_FieldIndex.Flags:
                    return typeof(AIPackage.Flag);
                case AIPackage_FieldIndex.GeneralType:
                    return typeof(AIPackage.GeneralTypeEnum);
                case AIPackage_FieldIndex.Location:
                    return typeof(AIPackageLocation);
                case AIPackage_FieldIndex.Schedule:
                    return typeof(AIPackageSchedule);
                case AIPackage_FieldIndex.Target:
                    return typeof(AIPackageTarget);
                case AIPackage_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case AIPackage_FieldIndex.PKDTDataTypeState:
                    return typeof(AIPackage.PKDTDataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AIPackageXmlWriteTranslation);
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType PKDT_HEADER = new RecordType("PKDT");
        public static readonly RecordType PLDT_HEADER = new RecordType("PLDT");
        public static readonly RecordType PSDT_HEADER = new RecordType("PSDT");
        public static readonly RecordType PTDT_HEADER = new RecordType("PTDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = PACK_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(AIPackageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AIPackageSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly AIPackageSetterCommon Instance = new AIPackageSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIPackageInternal item)
        {
            ClearPartial();
            item.Flags = default;
            item.GeneralType = default;
            item.Location = null;
            item.Schedule = null;
            item.Target = null;
            item.Conditions = null;
            item.PKDTDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IAIPackageInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAIPackageInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IAIPackageInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasPKDTDataType":
                    item.PKDTDataTypeState |= AIPackage.PKDTDataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IAIPackageInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AIPackageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => AIPackage_Registration.PACK_HEADER;
        protected static void FillBinaryStructs(
            IAIPackageInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IAIPackageInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54444B50: // PKDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.PKDTDataTypeState = AIPackage.PKDTDataType.Has;
                    }
                    AIPackageBinaryCreateTranslation.FillBinaryFlagsCustomPublic(
                        frame: dataFrame,
                        item: item);
                    AIPackageBinaryCreateTranslation.FillBinaryGeneralTypeCustomPublic(
                        frame: dataFrame,
                        item: item);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.GeneralType);
                }
                case 0x54444C50: // PLDT
                {
                    item.Location = Mutagen.Bethesda.Oblivion.AIPackageLocation.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Location);
                }
                case 0x54445350: // PSDT
                {
                    item.Schedule = Mutagen.Bethesda.Oblivion.AIPackageSchedule.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Schedule);
                }
                case 0x54445450: // PTDT
                {
                    item.Target = Mutagen.Bethesda.Oblivion.AIPackageTarget.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Target);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            transl: (MutagenFrame r, out Condition listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!);
                            })
                        .ToExtendedList<Condition>();
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Conditions);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            IAIPackageInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IAIPackageInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class AIPackageCommon : OblivionMajorRecordCommon
    {
        public new static readonly AIPackageCommon Instance = new AIPackageCommon();

        public AIPackage.Mask<bool> GetEqualsMask(
            IAIPackageGetter item,
            IAIPackageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIPackage.Mask<bool>(false);
            ((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIPackageGetter item,
            IAIPackageGetter rhs,
            AIPackage.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.GeneralType = item.GeneralType == rhs.GeneralType;
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Schedule = EqualsMaskHelper.EqualsHelper(
                item.Schedule,
                rhs.Schedule,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Target = EqualsMaskHelper.EqualsHelper(
                item.Target,
                rhs.Target,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PKDTDataTypeState = item.PKDTDataTypeState == rhs.PKDTDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAIPackageGetter item,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAIPackageGetter item,
            FileGeneration fg,
            string? name = null,
            AIPackage.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AIPackage =>");
            }
            else
            {
                fg.AppendLine($"{name} (AIPackage) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAIPackageGetter item,
            FileGeneration fg,
            AIPackage.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.GeneralType ?? true)
            {
                fg.AppendItem(item.GeneralType, "GeneralType");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location.TryGet(out var LocationItem))
            {
                LocationItem?.ToString(fg, "Location");
            }
            if ((printMask?.Schedule?.Overall ?? true)
                && item.Schedule.TryGet(out var ScheduleItem))
            {
                ScheduleItem?.ToString(fg, "Schedule");
            }
            if ((printMask?.Target?.Overall ?? true)
                && item.Target.TryGet(out var TargetItem))
            {
                TargetItem?.ToString(fg, "Target");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions.TryGet(out var ConditionsItem))
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.PKDTDataTypeState ?? true)
            {
                fg.AppendItem(item.PKDTDataTypeState, "PKDTDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IAIPackageGetter item,
            AIPackage.Mask<bool?> checkMask)
        {
            if (checkMask.Location?.Overall.HasValue ?? false && checkMask.Location.Overall.Value != (item.Location != null)) return false;
            if (checkMask.Location?.Specific != null && (item.Location == null || !item.Location.HasBeenSet(checkMask.Location.Specific))) return false;
            if (checkMask.Schedule?.Overall.HasValue ?? false && checkMask.Schedule.Overall.Value != (item.Schedule != null)) return false;
            if (checkMask.Schedule?.Specific != null && (item.Schedule == null || !item.Schedule.HasBeenSet(checkMask.Schedule.Specific))) return false;
            if (checkMask.Target?.Overall.HasValue ?? false && checkMask.Target.Overall.Value != (item.Target != null)) return false;
            if (checkMask.Target?.Specific != null && (item.Target == null || !item.Target.HasBeenSet(checkMask.Target.Specific))) return false;
            if (checkMask.Conditions?.Overall.HasValue ?? false && checkMask.Conditions!.Overall.Value != (item.Conditions != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAIPackageGetter item,
            AIPackage.Mask<bool> mask)
        {
            mask.Flags = true;
            mask.GeneralType = true;
            var itemLocation = item.Location;
            mask.Location = new MaskItem<bool, AIPackageLocation.Mask<bool>?>(itemLocation != null, itemLocation?.GetHasBeenSetMask());
            var itemSchedule = item.Schedule;
            mask.Schedule = new MaskItem<bool, AIPackageSchedule.Mask<bool>?>(itemSchedule != null, itemSchedule?.GetHasBeenSetMask());
            var itemTarget = item.Target;
            mask.Target = new MaskItem<bool, AIPackageTarget.Mask<bool>?>(itemTarget != null, itemTarget?.GetHasBeenSetMask());
            if (item.Conditions.TryGet(out var ConditionsItem))
            {
                mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.PKDTDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AIPackage_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new AIPackage_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (AIPackage_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AIPackage_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIPackageGetter? lhs,
            IAIPackageGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.GeneralType != rhs.GeneralType) return false;
            if (!object.Equals(lhs.Location, rhs.Location)) return false;
            if (!object.Equals(lhs.Schedule, rhs.Schedule)) return false;
            if (!object.Equals(lhs.Target, rhs.Target)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (lhs.PKDTDataTypeState != rhs.PKDTDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAIPackageGetter?)lhs,
                rhs: rhs as IAIPackageGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IAIPackageGetter?)lhs,
                rhs: rhs as IAIPackageGetter);
        }
        
        public virtual int GetHashCode(IAIPackageGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GeneralType).CombineHashCode(ret);
            if (item.Location.TryGet(out var Locationitem))
            {
                ret = HashHelper.GetHashCode(Locationitem).CombineHashCode(ret);
            }
            if (item.Schedule.TryGet(out var Scheduleitem))
            {
                ret = HashHelper.GetHashCode(Scheduleitem).CombineHashCode(ret);
            }
            if (item.Target.TryGet(out var Targetitem))
            {
                ret = HashHelper.GetHashCode(Targetitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.PKDTDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IAIPackageGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAIPackageGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AIPackage.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IAIPackageGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Location != null)
            {
                foreach (var item in obj.Location.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(AIPackage obj, AIPackage rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new AIPackage(getNextFormKey());
            ret.DeepCopyIn((AIPackage)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (AIPackage)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class AIPackageSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly AIPackageSetterTranslationCommon Instance = new AIPackageSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IAIPackageInternal item,
            IAIPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IAIPackage item,
            IAIPackageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.GeneralType) ?? true))
            {
                item.GeneralType = rhs.GeneralType;
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                try
                {
                    if(rhs.Location.TryGet(out var rhsLocation))
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Schedule) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                try
                {
                    if(rhs.Schedule.TryGet(out var rhsSchedule))
                    {
                        item.Schedule = rhsSchedule.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule));
                    }
                    else
                    {
                        item.Schedule = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Target) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                try
                {
                    if(rhs.Target.TryGet(out var rhsTarget))
                    {
                        item.Target = rhsTarget.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target));
                    }
                    else
                    {
                        item.Target = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)AIPackage_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AIPackage_FieldIndex.PKDTDataTypeState) ?? true))
            {
                item.PKDTDataTypeState = rhs.PKDTDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAIPackageInternal)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAIPackage)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAIPackageInternal)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAIPackage)item,
                rhs: (IAIPackageGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public AIPackage DeepCopy(
            IAIPackageGetter item,
            AIPackage.TranslationMask? copyMask = null)
        {
            AIPackage ret = (AIPackage)((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AIPackage DeepCopy(
            IAIPackageGetter item,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? copyMask = null)
        {
            AIPackage ret = (AIPackage)((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AIPackage DeepCopy(
            IAIPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIPackage ret = (AIPackage)((AIPackageCommon)((IAIPackageGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIPackage
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration Registration => AIPackage_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AIPackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AIPackageSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AIPackageSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AIPackageXmlWriteTranslation Instance = new AIPackageXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAIPackageGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.PKDTDataTypeState.HasFlag(AIPackage.PKDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<AIPackage.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)AIPackage_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.GeneralType) ?? true))
                {
                    EnumXmlTranslation<AIPackage.GeneralTypeEnum>.Instance.Write(
                        node: node,
                        name: nameof(item.GeneralType),
                        item: item.GeneralType,
                        fieldIndex: (int)AIPackage_FieldIndex.GeneralType,
                        errorMask: errorMask);
                }
            }
            if ((item.Location != null)
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Location) ?? true))
            {
                if (item.Location.TryGet(out var LocationItem))
                {
                    ((AIPackageLocationXmlWriteTranslation)((IXmlItem)LocationItem).XmlWriteTranslator).Write(
                        item: LocationItem,
                        node: node,
                        name: nameof(item.Location),
                        fieldIndex: (int)AIPackage_FieldIndex.Location,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location));
                }
            }
            if ((item.Schedule != null)
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Schedule) ?? true))
            {
                if (item.Schedule.TryGet(out var ScheduleItem))
                {
                    ((AIPackageScheduleXmlWriteTranslation)((IXmlItem)ScheduleItem).XmlWriteTranslator).Write(
                        item: ScheduleItem,
                        node: node,
                        name: nameof(item.Schedule),
                        fieldIndex: (int)AIPackage_FieldIndex.Schedule,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule));
                }
            }
            if ((item.Target != null)
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Target) ?? true))
            {
                if (item.Target.TryGet(out var TargetItem))
                {
                    ((AIPackageTargetXmlWriteTranslation)((IXmlItem)TargetItem).XmlWriteTranslator).Write(
                        item: TargetItem,
                        node: node,
                        name: nameof(item.Target),
                        fieldIndex: (int)AIPackage_FieldIndex.Target,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target));
                }
            }
            if ((item.Conditions != null)
                && (translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)AIPackage_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)AIPackage_FieldIndex.PKDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<AIPackage.PKDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.PKDTDataTypeState),
                    item: item.PKDTDataTypeState,
                    fieldIndex: (int)AIPackage_FieldIndex.PKDTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAIPackageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AIPackage");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AIPackage");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AIPackageXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static AIPackageXmlCreateTranslation Instance = new AIPackageXmlCreateTranslation();

        public static void FillPublicXml(
            IAIPackageInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AIPackageXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAIPackageInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Flags":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<AIPackage.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.PKDTDataTypeState |= AIPackage.PKDTDataType.Has;
                    break;
                case "GeneralType":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.GeneralType);
                    try
                    {
                        item.GeneralType = EnumXmlTranslation<AIPackage.GeneralTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Location":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.Location);
                    try
                    {
                        item.Location = LoquiXmlTranslation<AIPackageLocation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Location));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Schedule":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.Schedule);
                    try
                    {
                        item.Schedule = LoquiXmlTranslation<AIPackageSchedule>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Schedule));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Target":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.Target);
                    try
                    {
                        item.Target = LoquiXmlTranslation<AIPackageTarget>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)AIPackage_FieldIndex.Target));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions = ConditionsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Conditions = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PKDTDataTypeState":
                    errorMask?.PushIndex((int)AIPackage_FieldIndex.PKDTDataTypeState);
                    try
                    {
                        item.PKDTDataTypeState = EnumXmlTranslation<AIPackage.PKDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AIPackageXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAIPackageGetter item,
            XElement node,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AIPackageXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AIPackage.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAIPackageGetter item,
            string path,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAIPackageGetter item,
            Stream stream,
            out AIPackage.ErrorMask errorMask,
            AIPackage.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AIPackageBinaryWriteTranslation Instance = new AIPackageBinaryWriteTranslation();

        static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            IAIPackageGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            IAIPackageGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryGeneralTypeCustom(
            MutagenWriter writer,
            IAIPackageGetter item);

        public static void WriteBinaryGeneralType(
            MutagenWriter writer,
            IAIPackageGetter item)
        {
            WriteBinaryGeneralTypeCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IAIPackageGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IAIPackageGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.PKDTDataTypeState.HasFlag(AIPackage.PKDTDataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(AIPackage_Registration.PKDT_HEADER)))
                {
                    AIPackageBinaryWriteTranslation.WriteBinaryFlags(
                        writer: writer,
                        item: item);
                    AIPackageBinaryWriteTranslation.WriteBinaryGeneralType(
                        writer: writer,
                        item: item);
                }
            }
            if (item.Location.TryGet(out var LocationItem))
            {
                ((AIPackageLocationBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                    item: LocationItem,
                    writer: writer);
            }
            if (item.Schedule.TryGet(out var ScheduleItem))
            {
                ((AIPackageScheduleBinaryWriteTranslation)((IBinaryItem)ScheduleItem).BinaryWriteTranslator).Write(
                    item: ScheduleItem,
                    writer: writer);
            }
            if (item.Target.TryGet(out var TargetItem))
            {
                ((AIPackageTargetBinaryWriteTranslation)((IBinaryItem)TargetItem).BinaryWriteTranslator).Write(
                    item: TargetItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            IAIPackageGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: AIPackage_Registration.PACK_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IAIPackageGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AIPackageBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static AIPackageBinaryCreateTranslation Instance = new AIPackageBinaryCreateTranslation();

        static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            IAIPackageInternal item);

        public static void FillBinaryFlagsCustomPublic(
            MutagenFrame frame,
            IAIPackageInternal item)
        {
            FillBinaryFlagsCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryGeneralTypeCustom(
            MutagenFrame frame,
            IAIPackageInternal item);

        public static void FillBinaryGeneralTypeCustomPublic(
            MutagenFrame frame,
            IAIPackageInternal item)
        {
            FillBinaryGeneralTypeCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIPackageBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AIPackageBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IAIPackageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIPackage_Registration.Instance;
        public new static AIPackage_Registration Registration => AIPackage_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AIPackageCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AIPackageSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAIPackageGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => AIPackageCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AIPackageXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AIPackageXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AIPackageBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((AIPackageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        private int? _PKDTLocation;
        public AIPackage.PKDTDataType PKDTDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _PKDTLocation!.Value + 0x0;
        private bool _Flags_IsSet => GetFlagsIsSetCustom();
        public AIPackage.Flag Flags => GetFlagsCustom();
        #endregion
        #region GeneralType
        private int _GeneralTypeLocation => _PKDTLocation!.Value + 0x4;
        private bool _GeneralType_IsSet => GetGeneralTypeIsSetCustom();
        public AIPackage.GeneralTypeEnum GeneralType => GetGeneralTypeCustom();
        #endregion
        #region Location
        private RangeInt32? _LocationLocation;
        private bool _Location_IsSet => _LocationLocation.HasValue;
        public IAIPackageLocationGetter? Location => _Location_IsSet ? AIPackageLocationBinaryOverlay.AIPackageLocationFactory(new BinaryMemoryReadStream(_data.Slice(_LocationLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Location_IsSet => _LocationLocation.HasValue;
        #endregion
        #region Schedule
        private RangeInt32? _ScheduleLocation;
        private bool _Schedule_IsSet => _ScheduleLocation.HasValue;
        public IAIPackageScheduleGetter? Schedule => _Schedule_IsSet ? AIPackageScheduleBinaryOverlay.AIPackageScheduleFactory(new BinaryMemoryReadStream(_data.Slice(_ScheduleLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Schedule_IsSet => _ScheduleLocation.HasValue;
        #endregion
        #region Target
        private RangeInt32? _TargetLocation;
        private bool _Target_IsSet => _TargetLocation.HasValue;
        public IAIPackageTargetGetter? Target => _Target_IsSet ? AIPackageTargetBinaryOverlay.AIPackageTargetFactory(new BinaryMemoryReadStream(_data.Slice(_TargetLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Target_IsSet => _TargetLocation.HasValue;
        #endregion
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AIPackageBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AIPackageBinaryOverlay AIPackageFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new AIPackageBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54444B50: // PKDT
                {
                    _PKDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.PKDTDataTypeState = AIPackage.PKDTDataType.Has;
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.GeneralType);
                }
                case 0x54444C50: // PLDT
                {
                    _LocationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Location);
                }
                case 0x54445350: // PSDT
                {
                    _ScheduleLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Schedule);
                }
                case 0x54445450: // PTDT
                {
                    _TargetLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Target);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryOverlaySetList<ConditionBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)AIPackage_FieldIndex.Conditions);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

