/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AlphaLayer :
        BaseLayer,
        IAlphaLayerInternal,
        ILoquiObjectSetter<AlphaLayer>,
        IEquatable<AlphaLayer>,
        IEqualsMask
    {
        #region Ctor
        public AlphaLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AlphaLayerData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _AlphaLayerData;
        public Byte[]? AlphaLayerData
        {
            get => this._AlphaLayerData;
            set => this._AlphaLayerData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAlphaLayerGetter.AlphaLayerData => this.AlphaLayerData;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            AlphaLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IAlphaLayerGetter rhs)) return false;
            return ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(AlphaLayer obj)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((AlphaLayerCommon)((IAlphaLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AlphaLayerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AlphaLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new AlphaLayer CreateFromXml(
            XElement node,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AlphaLayer CreateFromXml(
            XElement node,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlphaLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static AlphaLayer CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new AlphaLayer();
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static AlphaLayer CreateFromXml(
            string path,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AlphaLayer CreateFromXml(
            string path,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlphaLayer CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static AlphaLayer CreateFromXml(
            Stream stream,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static AlphaLayer CreateFromXml(
            Stream stream,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlphaLayer CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            BaseLayer.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.AlphaLayerData = initialValue;
            }

            public Mask(
                TItem Texture,
                TItem Quadrant,
                TItem LayerNumber,
                TItem BTXTDataTypeState,
                TItem AlphaLayerData)
            : base(
                Texture: Texture,
                Quadrant: Quadrant,
                LayerNumber: LayerNumber,
                BTXTDataTypeState: BTXTDataTypeState)
            {
                this.AlphaLayerData = AlphaLayerData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AlphaLayerData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.AlphaLayerData, rhs.AlphaLayerData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.AlphaLayerData?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.AlphaLayerData)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.AlphaLayerData)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AlphaLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.AlphaLayerData = eval(this.AlphaLayerData);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(AlphaLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, AlphaLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(AlphaLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.AlphaLayerData ?? true)
                    {
                        fg.AppendItem(AlphaLayerData, "AlphaLayerData");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            BaseLayer.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? AlphaLayerData;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
                switch (enu)
                {
                    case AlphaLayer_FieldIndex.AlphaLayerData:
                        return AlphaLayerData;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
                switch (enu)
                {
                    case AlphaLayer_FieldIndex.AlphaLayerData:
                        this.AlphaLayerData = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
                switch (enu)
                {
                    case AlphaLayer_FieldIndex.AlphaLayerData:
                        this.AlphaLayerData = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (AlphaLayerData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(AlphaLayerData, "AlphaLayerData");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AlphaLayerData = this.AlphaLayerData.Combine(rhs.AlphaLayerData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            BaseLayer.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool AlphaLayerData;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.AlphaLayerData = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((AlphaLayerData, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = AlphaLayer_Registration.TRIGGERING_RECORD_TYPE;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AlphaLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((AlphaLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new AlphaLayer CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static AlphaLayer CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new AlphaLayer();
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAlphaLayerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AlphaLayer GetNew()
        {
            return new AlphaLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface IAlphaLayer :
        IAlphaLayerGetter,
        IBaseLayer,
        ILoquiObjectSetter<IAlphaLayerInternal>
    {
        new Byte[]? AlphaLayerData { get; set; }
    }

    public partial interface IAlphaLayerInternal :
        IBaseLayerInternal,
        IAlphaLayer,
        IAlphaLayerGetter
    {
    }

    public partial interface IAlphaLayerGetter :
        IBaseLayerGetter,
        ILoquiObject<IAlphaLayerGetter>,
        IXmlItem,
        IBinaryItem
    {
        ReadOnlyMemorySlice<Byte>? AlphaLayerData { get; }

    }

    #endregion

    #region Common MixIn
    public static class AlphaLayerMixIn
    {
        public static void Clear(this IAlphaLayerInternal item)
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AlphaLayer.Mask<bool> GetEqualsMask(
            this IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IAlphaLayerGetter item,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IAlphaLayerGetter item,
            FileGeneration fg,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IAlphaLayerGetter item,
            AlphaLayer.Mask<bool?> checkMask)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static AlphaLayer.Mask<bool> GetHasBeenSetMask(this IAlphaLayerGetter item)
        {
            var ret = new AlphaLayer.Mask<bool>(false);
            ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IAlphaLayerGetter item,
            IAlphaLayerGetter rhs)
        {
            return ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IAlphaLayerInternal lhs,
            IAlphaLayerGetter rhs,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = AlphaLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAlphaLayerInternal lhs,
            IAlphaLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static AlphaLayer DeepCopy(
            this IAlphaLayerGetter item,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            return ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AlphaLayer DeepCopy(
            this IAlphaLayerGetter item,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            return ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AlphaLayer DeepCopy(
            this IAlphaLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AlphaLayerSetterTranslationCommon)((IAlphaLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            XElement node,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            XElement node,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlphaLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            string path,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            string path,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            Stream stream,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            Stream stream,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IAlphaLayerInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            AlphaLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IAlphaLayerInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IAlphaLayerInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((AlphaLayerSetterCommon)((IAlphaLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum AlphaLayer_FieldIndex
    {
        Texture = 0,
        Quadrant = 1,
        LayerNumber = 2,
        BTXTDataTypeState = 3,
        AlphaLayerData = 4,
    }
    #endregion

    #region Registration
    public partial class AlphaLayer_Registration : ILoquiRegistration
    {
        public static readonly AlphaLayer_Registration Instance = new AlphaLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 144,
            version: 0);

        public const string GUID = "757f00fc-f49c-4ce3-90c8-a86cf9e93ff7";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(AlphaLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlphaLayer.ErrorMask);

        public static readonly Type ClassType = typeof(AlphaLayer);

        public static readonly Type GetterType = typeof(IAlphaLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAlphaLayer);

        public static readonly Type? InternalSetterType = typeof(IAlphaLayerInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.AlphaLayer";

        public const string Name = "AlphaLayer";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ALPHALAYERDATA":
                    return (ushort)AlphaLayer_FieldIndex.AlphaLayerData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return "AlphaLayerData";
                default:
                    return BaseLayer_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return false;
                default:
                    return BaseLayer_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            AlphaLayer_FieldIndex enu = (AlphaLayer_FieldIndex)index;
            switch (enu)
            {
                case AlphaLayer_FieldIndex.AlphaLayerData:
                    return typeof(Byte[]);
                default:
                    return BaseLayer_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(AlphaLayerXmlWriteTranslation);
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static readonly RecordType VTXT_HEADER = new RecordType("VTXT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = ATXT_HEADER;
        public static RecordTypeConverter BaseConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                BaseLayer_Registration.BTXT_HEADER,
                new RecordType("ATXT")));
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(AlphaLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class AlphaLayerSetterCommon : BaseLayerSetterCommon
    {
        public new static readonly AlphaLayerSetterCommon Instance = new AlphaLayerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAlphaLayerInternal item)
        {
            ClearPartial();
            item.AlphaLayerData = default;
            base.Clear(item);
        }
        
        public override void Clear(IBaseLayerInternal item)
        {
            Clear(item: (IAlphaLayerInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IAlphaLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    BaseLayerSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IAlphaLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    AlphaLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static TryGet<int?> FillBinaryRecordTypes(
            IAlphaLayerInternal item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54585456: // VTXT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.AlphaLayerData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)AlphaLayer_FieldIndex.AlphaLayerData);
                }
                default:
                    return BaseLayerSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter.Combine(AlphaLayer_Registration.BaseConverter),
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            IAlphaLayerInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class AlphaLayerCommon : BaseLayerCommon
    {
        public new static readonly AlphaLayerCommon Instance = new AlphaLayerCommon();

        public AlphaLayer.Mask<bool> GetEqualsMask(
            IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AlphaLayer.Mask<bool>(false);
            ((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAlphaLayerGetter item,
            IAlphaLayerGetter rhs,
            AlphaLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.AlphaLayerData = MemorySliceExt.Equal(item.AlphaLayerData, rhs.AlphaLayerData);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IAlphaLayerGetter item,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IAlphaLayerGetter item,
            FileGeneration fg,
            string? name = null,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"AlphaLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (AlphaLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IAlphaLayerGetter item,
            FileGeneration fg,
            AlphaLayer.Mask<bool>? printMask = null)
        {
            BaseLayerCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.AlphaLayerData ?? true)
                && item.AlphaLayerData.TryGet(out var AlphaLayerDataItem))
            {
                fg.AppendLine($"AlphaLayerData => {SpanExt.ToHexString(AlphaLayerDataItem)}");
            }
        }
        
        public bool HasBeenSet(
            IAlphaLayerGetter item,
            AlphaLayer.Mask<bool?> checkMask)
        {
            if (checkMask.AlphaLayerData.HasValue && checkMask.AlphaLayerData.Value != (item.AlphaLayerData != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IAlphaLayerGetter item,
            AlphaLayer.Mask<bool> mask)
        {
            mask.AlphaLayerData = (item.AlphaLayerData != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static AlphaLayer_FieldIndex ConvertFieldIndex(BaseLayer_FieldIndex index)
        {
            switch (index)
            {
                case BaseLayer_FieldIndex.Texture:
                    return (AlphaLayer_FieldIndex)((int)index);
                case BaseLayer_FieldIndex.Quadrant:
                    return (AlphaLayer_FieldIndex)((int)index);
                case BaseLayer_FieldIndex.LayerNumber:
                    return (AlphaLayer_FieldIndex)((int)index);
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return (AlphaLayer_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAlphaLayerGetter? lhs,
            IAlphaLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!MemorySliceExt.Equal(lhs.AlphaLayerData, rhs.AlphaLayerData)) return false;
            return true;
        }
        
        public override bool Equals(
            IBaseLayerGetter? lhs,
            IBaseLayerGetter? rhs)
        {
            return Equals(
                lhs: (IAlphaLayerGetter?)lhs,
                rhs: rhs as IAlphaLayerGetter);
        }
        
        public virtual int GetHashCode(IAlphaLayerGetter item)
        {
            int ret = 0;
            if (item.AlphaLayerData.TryGet(out var AlphaLayerDataItem))
            {
                ret = HashHelper.GetHashCode(AlphaLayerDataItem).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IBaseLayerGetter item)
        {
            return GetHashCode(item: (IAlphaLayerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AlphaLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IAlphaLayerGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class AlphaLayerSetterTranslationCommon : BaseLayerSetterTranslationCommon
    {
        public new static readonly AlphaLayerSetterTranslationCommon Instance = new AlphaLayerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IAlphaLayerInternal item,
            IAlphaLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IAlphaLayer item,
            IAlphaLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)AlphaLayer_FieldIndex.AlphaLayerData) ?? true))
            {
                if(rhs.AlphaLayerData.TryGet(out var AlphaLayerDatarhs))
                {
                    item.AlphaLayerData = AlphaLayerDatarhs.ToArray();
                }
                else
                {
                    item.AlphaLayerData = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            IBaseLayerInternal item,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAlphaLayerInternal)item,
                rhs: (IAlphaLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IBaseLayer item,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IAlphaLayer)item,
                rhs: (IAlphaLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public AlphaLayer DeepCopy(
            IAlphaLayerGetter item,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            AlphaLayer ret = (AlphaLayer)((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public AlphaLayer DeepCopy(
            IAlphaLayerGetter item,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? copyMask = null)
        {
            AlphaLayer ret = (AlphaLayer)((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public AlphaLayer DeepCopy(
            IAlphaLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AlphaLayer ret = (AlphaLayer)((AlphaLayerCommon)((IAlphaLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AlphaLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlphaLayer_Registration.Instance;
        public new static AlphaLayer_Registration Registration => AlphaLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AlphaLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AlphaLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AlphaLayerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AlphaLayerXmlWriteTranslation :
        BaseLayerXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static AlphaLayerXmlWriteTranslation Instance = new AlphaLayerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IAlphaLayerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            BaseLayerXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.AlphaLayerData != null)
                && (translationMask?.GetShouldTranslate((int)AlphaLayer_FieldIndex.AlphaLayerData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AlphaLayerData),
                    item: item.AlphaLayerData.Value,
                    fieldIndex: (int)AlphaLayer_FieldIndex.AlphaLayerData,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IAlphaLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.AlphaLayer");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.AlphaLayer");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAlphaLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IAlphaLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class AlphaLayerXmlCreateTranslation : BaseLayerXmlCreateTranslation
    {
        public new readonly static AlphaLayerXmlCreateTranslation Instance = new AlphaLayerXmlCreateTranslation();

        public static void FillPublicXml(
            IAlphaLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    AlphaLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IAlphaLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "AlphaLayerData":
                    errorMask?.PushIndex((int)AlphaLayer_FieldIndex.AlphaLayerData);
                    try
                    {
                        item.AlphaLayerData = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    BaseLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class AlphaLayerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IAlphaLayerGetter item,
            XElement node,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((AlphaLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlphaLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IAlphaLayerGetter item,
            string path,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IAlphaLayerGetter item,
            Stream stream,
            out AlphaLayer.ErrorMask errorMask,
            AlphaLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AlphaLayerBinaryWriteTranslation :
        BaseLayerBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static AlphaLayerBinaryWriteTranslation Instance = new AlphaLayerBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IAlphaLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            BaseLayerBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter.Combine(AlphaLayer_Registration.BaseConverter),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AlphaLayerData,
                header: recordTypeConverter.ConvertToCustom(AlphaLayer_Registration.VTXT_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IAlphaLayerGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            BaseLayerBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IAlphaLayerGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IBaseLayerGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (IAlphaLayerGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class AlphaLayerBinaryCreateTranslation : BaseLayerBinaryCreateTranslation
    {
        public new readonly static AlphaLayerBinaryCreateTranslation Instance = new AlphaLayerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AlphaLayerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class AlphaLayerBinaryOverlay :
        BaseLayerBinaryOverlay,
        IAlphaLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlphaLayer_Registration.Instance;
        public new static AlphaLayer_Registration Registration => AlphaLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AlphaLayerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AlphaLayerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IAlphaLayerGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => AlphaLayerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((AlphaLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AlphaLayerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((AlphaLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region AlphaLayerData
        private int? _AlphaLayerDataLocation;
        public ReadOnlyMemorySlice<Byte>? AlphaLayerData => _AlphaLayerDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _AlphaLayerDataLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected AlphaLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static AlphaLayerBinaryOverlay AlphaLayerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new AlphaLayerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54585456: // VTXT
                {
                    _AlphaLayerDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)AlphaLayer_FieldIndex.AlphaLayerData);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter.Combine(AlphaLayer_Registration.BaseConverter));
            }
        }
    }

}
#endregion

#endregion

