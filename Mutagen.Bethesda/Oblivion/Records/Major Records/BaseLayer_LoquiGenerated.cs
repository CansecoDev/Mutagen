/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class BaseLayer :
        IBaseLayerInternal,
        ILoquiObjectSetter<BaseLayer>,
        IEquatable<BaseLayer>,
        IEqualsMask
    {
        #region Ctor
        public BaseLayer()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<LandTexture> _Texture = new FormLink<LandTexture>();
        public IFormLink<LandTexture> Texture => this._Texture;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILandTextureGetter> IBaseLayerGetter.Texture => this.Texture;
        #endregion
        #region Quadrant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AlphaLayer.QuadrantEnum _Quadrant;
        public AlphaLayer.QuadrantEnum Quadrant
        {
            get => this._Quadrant;
            set
            {
                this.BTXTDataTypeState |= BTXTDataType.Has;
                this._Quadrant = value;
            }
        }
        #endregion
        #region LayerNumber
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _LayerNumber;
        public UInt16 LayerNumber
        {
            get => this._LayerNumber;
            protected set
            {
                this.BTXTDataTypeState |= BTXTDataType.Has;
                this._LayerNumber = value;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16 IBaseLayerInternal.LayerNumber
        {
            get => this.LayerNumber;
            set => this.LayerNumber = value;
        }
        #endregion
        #region BTXTDataTypeState
        public BaseLayer.BTXTDataType BTXTDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            BaseLayerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IBaseLayerGetter rhs)) return false;
            return ((BaseLayerCommon)((IBaseLayerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(BaseLayer obj)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((BaseLayerCommon)((IBaseLayerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object XmlWriteTranslator => BaseLayerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BaseLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static BaseLayer CreateFromXml(
            XElement node,
            BaseLayer.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static BaseLayer CreateFromXml(
            XElement node,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BaseLayer.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static BaseLayer CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new BaseLayer();
            ((BaseLayerSetterCommon)((IBaseLayerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static BaseLayer CreateFromXml(
            string path,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            string path,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static BaseLayer CreateFromXml(
            Stream stream,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            Stream stream,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static BaseLayer CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Texture = initialValue;
                this.Quadrant = initialValue;
                this.LayerNumber = initialValue;
                this.BTXTDataTypeState = initialValue;
            }

            public Mask(
                TItem Texture,
                TItem Quadrant,
                TItem LayerNumber,
                TItem BTXTDataTypeState)
            {
                this.Texture = Texture;
                this.Quadrant = Quadrant;
                this.LayerNumber = LayerNumber;
                this.BTXTDataTypeState = BTXTDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Texture;
            public TItem Quadrant;
            public TItem LayerNumber;
            public TItem BTXTDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
                if (!object.Equals(this.Quadrant, rhs.Quadrant)) return false;
                if (!object.Equals(this.LayerNumber, rhs.LayerNumber)) return false;
                if (!object.Equals(this.BTXTDataTypeState, rhs.BTXTDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Texture);
                hash.Add(this.Quadrant);
                hash.Add(this.LayerNumber);
                hash.Add(this.BTXTDataTypeState);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Texture)) return false;
                if (!eval(this.Quadrant)) return false;
                if (!eval(this.LayerNumber)) return false;
                if (!eval(this.BTXTDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Texture)) return true;
                if (eval(this.Quadrant)) return true;
                if (eval(this.LayerNumber)) return true;
                if (eval(this.BTXTDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BaseLayer.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Texture = eval(this.Texture);
                obj.Quadrant = eval(this.Quadrant);
                obj.LayerNumber = eval(this.LayerNumber);
                obj.BTXTDataTypeState = eval(this.BTXTDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(BaseLayer.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, BaseLayer.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(BaseLayer.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Texture ?? true)
                    {
                        fg.AppendItem(Texture, "Texture");
                    }
                    if (printMask?.Quadrant ?? true)
                    {
                        fg.AppendItem(Quadrant, "Quadrant");
                    }
                    if (printMask?.LayerNumber ?? true)
                    {
                        fg.AppendItem(LayerNumber, "LayerNumber");
                    }
                    if (printMask?.BTXTDataTypeState ?? true)
                    {
                        fg.AppendItem(BTXTDataTypeState, "BTXTDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Texture;
            public Exception? Quadrant;
            public Exception? LayerNumber;
            public Exception? BTXTDataTypeState;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
                switch (enu)
                {
                    case BaseLayer_FieldIndex.Texture:
                        return Texture;
                    case BaseLayer_FieldIndex.Quadrant:
                        return Quadrant;
                    case BaseLayer_FieldIndex.LayerNumber:
                        return LayerNumber;
                    case BaseLayer_FieldIndex.BTXTDataTypeState:
                        return BTXTDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
                switch (enu)
                {
                    case BaseLayer_FieldIndex.Texture:
                        this.Texture = ex;
                        break;
                    case BaseLayer_FieldIndex.Quadrant:
                        this.Quadrant = ex;
                        break;
                    case BaseLayer_FieldIndex.LayerNumber:
                        this.LayerNumber = ex;
                        break;
                    case BaseLayer_FieldIndex.BTXTDataTypeState:
                        this.BTXTDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
                switch (enu)
                {
                    case BaseLayer_FieldIndex.Texture:
                        this.Texture = (Exception?)obj;
                        break;
                    case BaseLayer_FieldIndex.Quadrant:
                        this.Quadrant = (Exception?)obj;
                        break;
                    case BaseLayer_FieldIndex.LayerNumber:
                        this.LayerNumber = (Exception?)obj;
                        break;
                    case BaseLayer_FieldIndex.BTXTDataTypeState:
                        this.BTXTDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (Texture != null) return true;
                if (Quadrant != null) return true;
                if (LayerNumber != null) return true;
                if (BTXTDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Texture, "Texture");
                fg.AppendItem(Quadrant, "Quadrant");
                fg.AppendItem(LayerNumber, "LayerNumber");
                fg.AppendItem(BTXTDataTypeState, "BTXTDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Texture = this.Texture.Combine(rhs.Texture);
                ret.Quadrant = this.Quadrant.Combine(rhs.Quadrant);
                ret.LayerNumber = this.LayerNumber.Combine(rhs.LayerNumber);
                ret.BTXTDataTypeState = this.BTXTDataTypeState.Combine(rhs.BTXTDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Texture;
            public bool Quadrant;
            public bool LayerNumber;
            public bool BTXTDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Texture = defaultOn;
                this.Quadrant = defaultOn;
                this.LayerNumber = defaultOn;
                this.BTXTDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Texture, null));
                ret.Add((Quadrant, null));
                ret.Add((LayerNumber, null));
                ret.Add((BTXTDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        [Flags]
        public enum BTXTDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => BaseLayerCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => BaseLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static BaseLayer CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static BaseLayer CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BaseLayer();
            ((BaseLayerSetterCommon)((IBaseLayerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBaseLayerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BaseLayer GetNew()
        {
            return new BaseLayer();
        }

    }
    #endregion

    #region Interface
    public partial interface IBaseLayer :
        IBaseLayerGetter,
        ILoquiObjectSetter<IBaseLayerInternal>
    {
        new IFormLink<LandTexture> Texture { get; }
        new AlphaLayer.QuadrantEnum Quadrant { get; set; }
        new BaseLayer.BTXTDataType BTXTDataTypeState { get; set; }
    }

    public partial interface IBaseLayerInternal :
        IBaseLayer,
        IBaseLayerGetter
    {
        new UInt16 LayerNumber { get; set; }
    }

    public partial interface IBaseLayerGetter :
        ILoquiObject,
        ILoquiObject<IBaseLayerGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormLinkGetter<ILandTextureGetter> Texture { get; }
        AlphaLayer.QuadrantEnum Quadrant { get; }
        UInt16 LayerNumber { get; }
        BaseLayer.BTXTDataType BTXTDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BaseLayerMixIn
    {
        public static void Clear(this IBaseLayerInternal item)
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BaseLayer.Mask<bool> GetEqualsMask(
            this IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IBaseLayerGetter item,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IBaseLayerGetter item,
            FileGeneration fg,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IBaseLayerGetter item,
            BaseLayer.Mask<bool?> checkMask)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static BaseLayer.Mask<bool> GetHasBeenSetMask(this IBaseLayerGetter item)
        {
            var ret = new BaseLayer.Mask<bool>(false);
            ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IBaseLayerGetter item,
            IBaseLayerGetter rhs)
        {
            return ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IBaseLayerInternal lhs,
            IBaseLayerGetter rhs,
            BaseLayer.TranslationMask? copyMask = null)
        {
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IBaseLayerInternal lhs,
            IBaseLayerGetter rhs,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = BaseLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBaseLayerInternal lhs,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static BaseLayer DeepCopy(
            this IBaseLayerGetter item,
            BaseLayer.TranslationMask? copyMask = null)
        {
            return ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BaseLayer DeepCopy(
            this IBaseLayerGetter item,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? copyMask = null)
        {
            return ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BaseLayer DeepCopy(
            this IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BaseLayerSetterTranslationCommon)((IBaseLayerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            XElement node,
            BaseLayer.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            XElement node,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BaseLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            string path,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            string path,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            Stream stream,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            Stream stream,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IBaseLayerInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            BaseLayer.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IBaseLayerInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IBaseLayerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerSetterCommon)((IBaseLayerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum BaseLayer_FieldIndex
    {
        Texture = 0,
        Quadrant = 1,
        LayerNumber = 2,
        BTXTDataTypeState = 3,
    }
    #endregion

    #region Registration
    public partial class BaseLayer_Registration : ILoquiRegistration
    {
        public static readonly BaseLayer_Registration Instance = new BaseLayer_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 145,
            version: 0);

        public const string GUID = "4b14f70e-5702-4ed0-b691-09996696e4d9";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(BaseLayer.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BaseLayer.ErrorMask);

        public static readonly Type ClassType = typeof(BaseLayer);

        public static readonly Type GetterType = typeof(IBaseLayerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBaseLayer);

        public static readonly Type? InternalSetterType = typeof(IBaseLayerInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.BaseLayer";

        public const string Name = "BaseLayer";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURE":
                    return (ushort)BaseLayer_FieldIndex.Texture;
                case "QUADRANT":
                    return (ushort)BaseLayer_FieldIndex.Quadrant;
                case "LAYERNUMBER":
                    return (ushort)BaseLayer_FieldIndex.LayerNumber;
                case "BTXTDATATYPESTATE":
                    return (ushort)BaseLayer_FieldIndex.BTXTDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return "Texture";
                case BaseLayer_FieldIndex.Quadrant:
                    return "Quadrant";
                case BaseLayer_FieldIndex.LayerNumber:
                    return "LayerNumber";
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return "BTXTDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.LayerNumber:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.LayerNumber:
                    return true;
                case BaseLayer_FieldIndex.Texture:
                case BaseLayer_FieldIndex.Quadrant:
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            BaseLayer_FieldIndex enu = (BaseLayer_FieldIndex)index;
            switch (enu)
            {
                case BaseLayer_FieldIndex.Texture:
                    return typeof(IFormLink<LandTexture>);
                case BaseLayer_FieldIndex.Quadrant:
                    return typeof(AlphaLayer.QuadrantEnum);
                case BaseLayer_FieldIndex.LayerNumber:
                    return typeof(UInt16);
                case BaseLayer_FieldIndex.BTXTDataTypeState:
                    return typeof(BaseLayer.BTXTDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(BaseLayerXmlWriteTranslation);
        public static readonly RecordType BTXT_HEADER = new RecordType("BTXT");
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        BTXT_HEADER,
                        ATXT_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(BaseLayerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class BaseLayerSetterCommon
    {
        public static readonly BaseLayerSetterCommon Instance = new BaseLayerSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IBaseLayerInternal item)
        {
            ClearPartial();
            item.Texture.FormKey = FormKey.Null;
            item.Quadrant = default;
            item.BTXTDataTypeState = default;
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IBaseLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasBTXTDataType":
                    item.BTXTDataTypeState |= BaseLayer.BTXTDataType.Has;
                    break;
                case "LayerNumber":
                    errorMask?.PushIndex((int)BaseLayer_FieldIndex.LayerNumber);
                    try
                    {
                        item.LayerNumber = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }
        
        public void CopyInFromXml(
            IBaseLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    BaseLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IBaseLayerInternal item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IBaseLayerInternal item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54585442: // BTXT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BaseLayer_FieldIndex.LayerNumber) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.BTXTDataTypeState = BaseLayer.BTXTDataType.Has;
                    }
                    item.Texture.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.Quadrant = EnumBinaryTranslation<AlphaLayer.QuadrantEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.LayerNumber = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)BaseLayer_FieldIndex.LayerNumber);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IBaseLayerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class BaseLayerCommon
    {
        public static readonly BaseLayerCommon Instance = new BaseLayerCommon();

        public BaseLayer.Mask<bool> GetEqualsMask(
            IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BaseLayer.Mask<bool>(false);
            ((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBaseLayerGetter item,
            IBaseLayerGetter rhs,
            BaseLayer.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Texture = object.Equals(item.Texture, rhs.Texture);
            ret.Quadrant = item.Quadrant == rhs.Quadrant;
            ret.LayerNumber = item.LayerNumber == rhs.LayerNumber;
            ret.BTXTDataTypeState = item.BTXTDataTypeState == rhs.BTXTDataTypeState;
        }
        
        public string ToString(
            IBaseLayerGetter item,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IBaseLayerGetter item,
            FileGeneration fg,
            string? name = null,
            BaseLayer.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"BaseLayer =>");
            }
            else
            {
                fg.AppendLine($"{name} (BaseLayer) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IBaseLayerGetter item,
            FileGeneration fg,
            BaseLayer.Mask<bool>? printMask = null)
        {
            if (printMask?.Texture ?? true)
            {
                fg.AppendItem(item.Texture, "Texture");
            }
            if (printMask?.Quadrant ?? true)
            {
                fg.AppendItem(item.Quadrant, "Quadrant");
            }
            if (printMask?.LayerNumber ?? true)
            {
                fg.AppendItem(item.LayerNumber, "LayerNumber");
            }
            if (printMask?.BTXTDataTypeState ?? true)
            {
                fg.AppendItem(item.BTXTDataTypeState, "BTXTDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IBaseLayerGetter item,
            BaseLayer.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IBaseLayerGetter item,
            BaseLayer.Mask<bool> mask)
        {
            mask.Texture = true;
            mask.Quadrant = true;
            mask.LayerNumber = true;
            mask.BTXTDataTypeState = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBaseLayerGetter? lhs,
            IBaseLayerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Texture.Equals(rhs.Texture)) return false;
            if (lhs.Quadrant != rhs.Quadrant) return false;
            if (lhs.LayerNumber != rhs.LayerNumber) return false;
            if (lhs.BTXTDataTypeState != rhs.BTXTDataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IBaseLayerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Texture);
            hash.Add(item.Quadrant);
            hash.Add(item.LayerNumber);
            hash.Add(item.BTXTDataTypeState);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return BaseLayer.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IBaseLayerGetter obj)
        {
            yield return obj.Texture;
            yield break;
        }
        
        #endregion
        
    }
    public partial class BaseLayerSetterTranslationCommon
    {
        public static readonly BaseLayerSetterTranslationCommon Instance = new BaseLayerSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IBaseLayerInternal item,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.LayerNumber) ?? true))
            {
                item.LayerNumber = rhs.LayerNumber;
            }
            DeepCopyIn(
                (IBaseLayer)item,
                (IBaseLayerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public virtual void DeepCopyIn(
            IBaseLayer item,
            IBaseLayerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Texture) ?? true))
            {
                item.Texture.FormKey = rhs.Texture.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Quadrant) ?? true))
            {
                item.Quadrant = rhs.Quadrant;
            }
            if ((copyMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.BTXTDataTypeState) ?? true))
            {
                item.BTXTDataTypeState = rhs.BTXTDataTypeState;
            }
        }
        
        #endregion
        
        public BaseLayer DeepCopy(
            IBaseLayerGetter item,
            BaseLayer.TranslationMask? copyMask = null)
        {
            BaseLayer ret = (BaseLayer)((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public BaseLayer DeepCopy(
            IBaseLayerGetter item,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? copyMask = null)
        {
            BaseLayer ret = (BaseLayer)((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public BaseLayer DeepCopy(
            IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BaseLayer ret = (BaseLayer)((BaseLayerCommon)((IBaseLayerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class BaseLayer
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => BaseLayerCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return BaseLayerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => BaseLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BaseLayerXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static BaseLayerXmlWriteTranslation Instance = new BaseLayerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IBaseLayerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (item.BTXTDataTypeState.HasFlag(BaseLayer.BTXTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Texture) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Texture),
                        item: item.Texture.FormKey,
                        fieldIndex: (int)BaseLayer_FieldIndex.Texture,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.Quadrant) ?? true))
                {
                    EnumXmlTranslation<AlphaLayer.QuadrantEnum>.Instance.Write(
                        node: node,
                        name: nameof(item.Quadrant),
                        item: item.Quadrant,
                        fieldIndex: (int)BaseLayer_FieldIndex.Quadrant,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.LayerNumber) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LayerNumber),
                        item: item.LayerNumber,
                        fieldIndex: (int)BaseLayer_FieldIndex.LayerNumber,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)BaseLayer_FieldIndex.BTXTDataTypeState) ?? true))
            {
                EnumXmlTranslation<BaseLayer.BTXTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.BTXTDataTypeState),
                    item: item.BTXTDataTypeState,
                    fieldIndex: (int)BaseLayer_FieldIndex.BTXTDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.BaseLayer");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.BaseLayer");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IBaseLayerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IBaseLayerGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IBaseLayerGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class BaseLayerXmlCreateTranslation
    {
        public readonly static BaseLayerXmlCreateTranslation Instance = new BaseLayerXmlCreateTranslation();

        public static void FillPublicXml(
            IBaseLayerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    BaseLayerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IBaseLayerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Texture":
                    errorMask?.PushIndex((int)BaseLayer_FieldIndex.Texture);
                    try
                    {
                        item.Texture.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.BTXTDataTypeState |= BaseLayer.BTXTDataType.Has;
                    break;
                case "Quadrant":
                    errorMask?.PushIndex((int)BaseLayer_FieldIndex.Quadrant);
                    try
                    {
                        item.Quadrant = EnumXmlTranslation<AlphaLayer.QuadrantEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BTXTDataTypeState":
                    errorMask?.PushIndex((int)BaseLayer_FieldIndex.BTXTDataTypeState);
                    try
                    {
                        item.BTXTDataTypeState = EnumXmlTranslation<BaseLayer.BTXTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class BaseLayerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IBaseLayerGetter item,
            XElement node,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = BaseLayer.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            string path,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            Stream stream,
            out BaseLayer.ErrorMask errorMask,
            BaseLayer.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            XElement node,
            string? name = null,
            BaseLayer.TranslationMask? translationMask = null)
        {
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IBaseLayerGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((BaseLayerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BaseLayerBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static BaseLayerBinaryWriteTranslation Instance = new BaseLayerBinaryWriteTranslation();

        public static void WriteEmbedded(
            IBaseLayerGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IBaseLayerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            if (item.BTXTDataTypeState.HasFlag(BaseLayer.BTXTDataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(BaseLayer_Registration.BTXT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Texture);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<AlphaLayer.QuadrantEnum>.Instance.Write(
                        writer,
                        item.Quadrant,
                        length: 2);
                    writer.Write(item.LayerNumber);
                }
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IBaseLayerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IBaseLayerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class BaseLayerBinaryCreateTranslation
    {
        public readonly static BaseLayerBinaryCreateTranslation Instance = new BaseLayerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class BaseLayerBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBaseLayerGetter item,
            MutagenWriter writer)
        {
            ((BaseLayerBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class BaseLayerBinaryOverlay :
        BinaryOverlay,
        IBaseLayerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BaseLayer_Registration.Instance;
        public static BaseLayer_Registration Registration => BaseLayer_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => BaseLayerCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => BaseLayerSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBaseLayerGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBaseLayerGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IBaseLayerGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => BaseLayerCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object XmlWriteTranslator => BaseLayerXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((BaseLayerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => BaseLayerBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((BaseLayerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        private int? _BTXTLocation;
        public BaseLayer.BTXTDataType BTXTDataTypeState { get; private set; }
        #region Texture
        private int _TextureLocation => _BTXTLocation!.Value + 0x0;
        private bool _Texture_IsSet => _BTXTLocation.HasValue;
        public IFormLinkGetter<ILandTextureGetter> Texture => _Texture_IsSet ? new FormLink<ILandTextureGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_TextureLocation, 4)))) : FormLink<ILandTextureGetter>.Empty;
        #endregion
        #region Quadrant
        private int _QuadrantLocation => _BTXTLocation!.Value + 0x4;
        private bool _Quadrant_IsSet => _BTXTLocation.HasValue;
        public AlphaLayer.QuadrantEnum Quadrant => _Quadrant_IsSet ? (AlphaLayer.QuadrantEnum)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_QuadrantLocation, 2)) : default;
        #endregion
        #region LayerNumber
        private int _LayerNumberLocation => _BTXTLocation!.Value + 0x6;
        private bool _LayerNumber_IsSet => _BTXTLocation.HasValue;
        public UInt16 LayerNumber => _LayerNumber_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_LayerNumberLocation, 2)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected BaseLayerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static BaseLayerBinaryOverlay BaseLayerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new BaseLayerBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public virtual TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54585442: // BTXT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)BaseLayer_FieldIndex.LayerNumber) return TryGet<int?>.Failure;
                    _BTXTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.BTXTDataTypeState = BaseLayer.BTXTDataType.Has;
                    return TryGet<int?>.Succeed((int)BaseLayer_FieldIndex.LayerNumber);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

