/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ClassData :
        IClassData,
        ILoquiObjectSetter<ClassData>,
        IEquatable<ClassData>,
        IEqualsMask
    {
        #region Ctor
        public ClassData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public ClassData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region PrimaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _PrimaryAttributes = new ActorValue[2];
        public ActorValue[] PrimaryAttributes
        {
            get => this._PrimaryAttributes;
            protected set => this._PrimaryAttributes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassDataGetter.PrimaryAttributes => _PrimaryAttributes;
        #endregion

        #endregion
        #region Specialization
        public Class.SpecializationFlag Specialization { get; set; } = default;
        #endregion
        #region SecondaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _SecondaryAttributes = new ActorValue[7];
        public ActorValue[] SecondaryAttributes
        {
            get => this._SecondaryAttributes;
            protected set => this._SecondaryAttributes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassDataGetter.SecondaryAttributes => _SecondaryAttributes;
        #endregion

        #endregion
        #region Flags
        public ClassFlag Flags { get; set; } = default;
        #endregion
        #region ClassServices
        public ClassService ClassServices { get; set; } = default;
        #endregion
        #region Training
        public ClassTraining Training { get; set; } = new ClassTraining();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClassTrainingGetter IClassDataGetter.Training => Training;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClassDataGetter rhs)) return false;
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ClassData obj)
        {
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ClassData CreateFromXml(
            XElement node,
            ClassData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ClassData CreateFromXml(
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ClassData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ClassData CreateFromXml(
            string path,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ClassData CreateFromXml(
            Stream stream,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ClassData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.PrimaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Specialization = initialValue;
                this.SecondaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = initialValue;
                this.ClassServices = initialValue;
                this.Training = new MaskItem<TItem, ClassTraining.Mask<TItem>?>(initialValue, new ClassTraining.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Versioning,
                TItem PrimaryAttributes,
                TItem Specialization,
                TItem SecondaryAttributes,
                TItem Flags,
                TItem ClassServices,
                TItem Training)
            {
                this.Versioning = Versioning;
                this.PrimaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PrimaryAttributes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Specialization = Specialization;
                this.SecondaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SecondaryAttributes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = Flags;
                this.ClassServices = ClassServices;
                this.Training = new MaskItem<TItem, ClassTraining.Mask<TItem>?>(Training, new ClassTraining.Mask<TItem>(Training));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PrimaryAttributes;
            public TItem Specialization;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SecondaryAttributes;
            public TItem Flags;
            public TItem ClassServices;
            public MaskItem<TItem, ClassTraining.Mask<TItem>?>? Training { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.PrimaryAttributes, rhs.PrimaryAttributes)) return false;
                if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
                if (!object.Equals(this.SecondaryAttributes, rhs.SecondaryAttributes)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ClassServices, rhs.ClassServices)) return false;
                if (!object.Equals(this.Training, rhs.Training)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.PrimaryAttributes);
                hash.Add(this.Specialization);
                hash.Add(this.SecondaryAttributes);
                hash.Add(this.Flags);
                hash.Add(this.ClassServices);
                hash.Add(this.Training);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (this.PrimaryAttributes != null)
                {
                    if (!eval(this.PrimaryAttributes.Overall)) return false;
                    if (this.PrimaryAttributes.Specific != null)
                    {
                        foreach (var item in this.PrimaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Specialization)) return false;
                if (this.SecondaryAttributes != null)
                {
                    if (!eval(this.SecondaryAttributes.Overall)) return false;
                    if (this.SecondaryAttributes.Specific != null)
                    {
                        foreach (var item in this.SecondaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ClassServices)) return false;
                if (Training != null)
                {
                    if (!eval(this.Training.Overall)) return false;
                    if (this.Training.Specific != null && !this.Training.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (this.PrimaryAttributes != null)
                {
                    if (eval(this.PrimaryAttributes.Overall)) return true;
                    if (this.PrimaryAttributes.Specific != null)
                    {
                        foreach (var item in this.PrimaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Specialization)) return true;
                if (this.SecondaryAttributes != null)
                {
                    if (eval(this.SecondaryAttributes.Overall)) return true;
                    if (this.SecondaryAttributes.Specific != null)
                    {
                        foreach (var item in this.SecondaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ClassServices)) return true;
                if (Training != null)
                {
                    if (eval(this.Training.Overall)) return true;
                    if (this.Training.Specific != null && this.Training.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ClassData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                if (PrimaryAttributes != null)
                {
                    obj.PrimaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PrimaryAttributes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PrimaryAttributes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PrimaryAttributes.Specific = l;
                        foreach (var item in PrimaryAttributes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Specialization = eval(this.Specialization);
                if (SecondaryAttributes != null)
                {
                    obj.SecondaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SecondaryAttributes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SecondaryAttributes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SecondaryAttributes.Specific = l;
                        foreach (var item in SecondaryAttributes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.ClassServices = eval(this.ClassServices);
                obj.Training = this.Training == null ? null : new MaskItem<R, ClassTraining.Mask<R>?>(eval(this.Training.Overall), this.Training.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ClassData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ClassData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ClassData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if ((printMask?.PrimaryAttributes?.Overall ?? true)
                        && PrimaryAttributes.TryGet(out var PrimaryAttributesItem))
                    {
                        fg.AppendLine("PrimaryAttributes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PrimaryAttributesItem.Overall);
                            if (PrimaryAttributesItem.Specific != null)
                            {
                                foreach (var subItem in PrimaryAttributesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Specialization ?? true)
                    {
                        fg.AppendItem(Specialization, "Specialization");
                    }
                    if ((printMask?.SecondaryAttributes?.Overall ?? true)
                        && SecondaryAttributes.TryGet(out var SecondaryAttributesItem))
                    {
                        fg.AppendLine("SecondaryAttributes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SecondaryAttributesItem.Overall);
                            if (SecondaryAttributesItem.Specific != null)
                            {
                                foreach (var subItem in SecondaryAttributesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ClassServices ?? true)
                    {
                        fg.AppendItem(ClassServices, "ClassServices");
                    }
                    if (printMask?.Training?.Overall ?? true)
                    {
                        Training?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PrimaryAttributes;
            public Exception? Specialization;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SecondaryAttributes;
            public Exception? Flags;
            public Exception? ClassServices;
            public MaskItem<Exception?, ClassTraining.ErrorMask?>? Training;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Versioning:
                        return Versioning;
                    case ClassData_FieldIndex.PrimaryAttributes:
                        return PrimaryAttributes;
                    case ClassData_FieldIndex.Specialization:
                        return Specialization;
                    case ClassData_FieldIndex.SecondaryAttributes:
                        return SecondaryAttributes;
                    case ClassData_FieldIndex.Flags:
                        return Flags;
                    case ClassData_FieldIndex.ClassServices:
                        return ClassServices;
                    case ClassData_FieldIndex.Training:
                        return Training;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case ClassData_FieldIndex.PrimaryAttributes:
                        this.PrimaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ClassData_FieldIndex.Specialization:
                        this.Specialization = ex;
                        break;
                    case ClassData_FieldIndex.SecondaryAttributes:
                        this.SecondaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ClassData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ClassData_FieldIndex.ClassServices:
                        this.ClassServices = ex;
                        break;
                    case ClassData_FieldIndex.Training:
                        this.Training = new MaskItem<Exception?, ClassTraining.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.PrimaryAttributes:
                        this.PrimaryAttributes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ClassData_FieldIndex.Specialization:
                        this.Specialization = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.SecondaryAttributes:
                        this.SecondaryAttributes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ClassData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.ClassServices:
                        this.ClassServices = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.Training:
                        this.Training = (MaskItem<Exception?, ClassTraining.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (PrimaryAttributes != null) return true;
                if (Specialization != null) return true;
                if (SecondaryAttributes != null) return true;
                if (Flags != null) return true;
                if (ClassServices != null) return true;
                if (Training != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                if (PrimaryAttributes.TryGet(out var PrimaryAttributesItem))
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PrimaryAttributesItem.Overall);
                        if (PrimaryAttributesItem.Specific != null)
                        {
                            foreach (var subItem in PrimaryAttributesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Specialization, "Specialization");
                if (SecondaryAttributes.TryGet(out var SecondaryAttributesItem))
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SecondaryAttributesItem.Overall);
                        if (SecondaryAttributesItem.Specific != null)
                        {
                            foreach (var subItem in SecondaryAttributesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ClassServices, "ClassServices");
                Training?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.PrimaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.PrimaryAttributes?.Overall, rhs.PrimaryAttributes?.Overall), ExceptionExt.Combine(this.PrimaryAttributes?.Specific, rhs.PrimaryAttributes?.Specific));
                ret.Specialization = this.Specialization.Combine(rhs.Specialization);
                ret.SecondaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.SecondaryAttributes?.Overall, rhs.SecondaryAttributes?.Overall), ExceptionExt.Combine(this.SecondaryAttributes?.Specific, rhs.SecondaryAttributes?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ClassServices = this.ClassServices.Combine(rhs.ClassServices);
                ret.Training = this.Training.Combine(rhs.Training, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool PrimaryAttributes;
            public bool Specialization;
            public bool SecondaryAttributes;
            public bool Flags;
            public bool ClassServices;
            public MaskItem<bool, ClassTraining.TranslationMask?> Training;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.PrimaryAttributes = defaultOn;
                this.Specialization = defaultOn;
                this.SecondaryAttributes = defaultOn;
                this.Flags = defaultOn;
                this.ClassServices = defaultOn;
                this.Training = new MaskItem<bool, ClassTraining.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((PrimaryAttributes, null));
                ret.Add((Specialization, null));
                ret.Add((SecondaryAttributes, null));
                ret.Add((Flags, null));
                ret.Add((ClassServices, null));
                ret.Add((Training?.Overall ?? true, Training?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ClassData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ClassData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ClassData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassDataSetterCommon)((IClassDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ClassData GetNew()
        {
            return new ClassData();
        }

    }
    #endregion

    #region Interface
    public partial interface IClassData :
        IClassDataGetter,
        ILoquiObjectSetter<IClassData>
    {
        new ClassData.VersioningBreaks Versioning { get; set; }
        new ActorValue[] PrimaryAttributes { get; }
        new Class.SpecializationFlag Specialization { get; set; }
        new ActorValue[] SecondaryAttributes { get; }
        new ClassFlag Flags { get; set; }
        new ClassService ClassServices { get; set; }
        new ClassTraining Training { get; set; }
    }

    public partial interface IClassDataGetter :
        ILoquiObject,
        ILoquiObject<IClassDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ClassData_Registration.Instance;
        ClassData.VersioningBreaks Versioning { get; }
        ReadOnlyMemorySlice<ActorValue> PrimaryAttributes { get; }
        Class.SpecializationFlag Specialization { get; }
        ReadOnlyMemorySlice<ActorValue> SecondaryAttributes { get; }
        ClassFlag Flags { get; }
        ClassService ClassServices { get; }
        IClassTrainingGetter Training { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassDataMixIn
    {
        public static void Clear(this IClassData item)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ClassData.Mask<bool> GetEqualsMask(
            this IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassDataGetter item,
            ClassData.Mask<bool?> checkMask)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ClassData.Mask<bool> GetHasBeenSetMask(this IClassDataGetter item)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassDataGetter item,
            IClassDataGetter rhs)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ClassData.TranslationMask? copyMask = null)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            ClassData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            string path,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ClassData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ClassData_FieldIndex
    {
        Versioning = 0,
        PrimaryAttributes = 1,
        Specialization = 2,
        SecondaryAttributes = 3,
        Flags = 4,
        ClassServices = 5,
        Training = 6,
    }
    #endregion

    #region Registration
    public partial class ClassData_Registration : ILoquiRegistration
    {
        public static readonly ClassData_Registration Instance = new ClassData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 178,
            version: 0);

        public const string GUID = "3c5fc61b-fde2-42c8-adf4-66340f5e4d61";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(ClassData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClassData.ErrorMask);

        public static readonly Type ClassType = typeof(ClassData);

        public static readonly Type GetterType = typeof(IClassDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClassData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClassData";

        public const string Name = "ClassData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)ClassData_FieldIndex.Versioning;
                case "PRIMARYATTRIBUTES":
                    return (ushort)ClassData_FieldIndex.PrimaryAttributes;
                case "SPECIALIZATION":
                    return (ushort)ClassData_FieldIndex.Specialization;
                case "SECONDARYATTRIBUTES":
                    return (ushort)ClassData_FieldIndex.SecondaryAttributes;
                case "FLAGS":
                    return (ushort)ClassData_FieldIndex.Flags;
                case "CLASSSERVICES":
                    return (ushort)ClassData_FieldIndex.ClassServices;
                case "TRAINING":
                    return (ushort)ClassData_FieldIndex.Training;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.PrimaryAttributes:
                case ClassData_FieldIndex.SecondaryAttributes:
                    return true;
                case ClassData_FieldIndex.Versioning:
                case ClassData_FieldIndex.Specialization:
                case ClassData_FieldIndex.Flags:
                case ClassData_FieldIndex.ClassServices:
                case ClassData_FieldIndex.Training:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Training:
                    return true;
                case ClassData_FieldIndex.Versioning:
                case ClassData_FieldIndex.PrimaryAttributes:
                case ClassData_FieldIndex.Specialization:
                case ClassData_FieldIndex.SecondaryAttributes:
                case ClassData_FieldIndex.Flags:
                case ClassData_FieldIndex.ClassServices:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Versioning:
                case ClassData_FieldIndex.PrimaryAttributes:
                case ClassData_FieldIndex.Specialization:
                case ClassData_FieldIndex.SecondaryAttributes:
                case ClassData_FieldIndex.Flags:
                case ClassData_FieldIndex.ClassServices:
                case ClassData_FieldIndex.Training:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Versioning:
                    return "Versioning";
                case ClassData_FieldIndex.PrimaryAttributes:
                    return "PrimaryAttributes";
                case ClassData_FieldIndex.Specialization:
                    return "Specialization";
                case ClassData_FieldIndex.SecondaryAttributes:
                    return "SecondaryAttributes";
                case ClassData_FieldIndex.Flags:
                    return "Flags";
                case ClassData_FieldIndex.ClassServices:
                    return "ClassServices";
                case ClassData_FieldIndex.Training:
                    return "Training";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Versioning:
                case ClassData_FieldIndex.PrimaryAttributes:
                case ClassData_FieldIndex.Specialization:
                case ClassData_FieldIndex.SecondaryAttributes:
                case ClassData_FieldIndex.Flags:
                case ClassData_FieldIndex.ClassServices:
                case ClassData_FieldIndex.Training:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Versioning:
                case ClassData_FieldIndex.PrimaryAttributes:
                case ClassData_FieldIndex.Specialization:
                case ClassData_FieldIndex.SecondaryAttributes:
                case ClassData_FieldIndex.Flags:
                case ClassData_FieldIndex.ClassServices:
                case ClassData_FieldIndex.Training:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
            switch (enu)
            {
                case ClassData_FieldIndex.Versioning:
                    return typeof(ClassData.VersioningBreaks);
                case ClassData_FieldIndex.PrimaryAttributes:
                    return typeof(ActorValue[]);
                case ClassData_FieldIndex.Specialization:
                    return typeof(Class.SpecializationFlag);
                case ClassData_FieldIndex.SecondaryAttributes:
                    return typeof(ActorValue[]);
                case ClassData_FieldIndex.Flags:
                    return typeof(ClassFlag);
                case ClassData_FieldIndex.ClassServices:
                    return typeof(ClassService);
                case ClassData_FieldIndex.Training:
                    return typeof(ClassTraining);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public static readonly Type BinaryWriteTranslation = typeof(ClassDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassDataSetterCommon
    {
        public static readonly ClassDataSetterCommon Instance = new ClassDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.PrimaryAttributes.Reset();
            item.Specialization = default;
            item.SecondaryAttributes.Reset();
            item.Flags = default;
            item.ClassServices = default;
            item.Training.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClassData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ClassData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: ClassDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class ClassDataCommon
    {
        public static readonly ClassDataCommon Instance = new ClassDataCommon();

        public ClassData.Mask<bool> GetEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            ClassData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.PrimaryAttributes = item.PrimaryAttributes.SpanEqualsHelper(
                rhs.PrimaryAttributes,
                (l, r) => l == r,
                include);
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.SecondaryAttributes = item.SecondaryAttributes.SpanEqualsHelper(
                rhs.SecondaryAttributes,
                (l, r) => l == r,
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ClassServices = item.ClassServices == rhs.ClassServices;
            ret.Training = MaskItemExt.Factory(item.Training.GetEqualsMask(rhs.Training, include), include);
        }
        
        public string ToString(
            IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassDataGetter item,
            FileGeneration fg,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ClassData =>");
            }
            else
            {
                fg.AppendLine($"{name} (ClassData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassDataGetter item,
            FileGeneration fg,
            ClassData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.PrimaryAttributes?.Overall ?? true)
            {
                fg.AppendLine("PrimaryAttributes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PrimaryAttributes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Specialization ?? true)
            {
                fg.AppendItem(item.Specialization, "Specialization");
            }
            if (printMask?.SecondaryAttributes?.Overall ?? true)
            {
                fg.AppendLine("SecondaryAttributes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SecondaryAttributes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.ClassServices ?? true)
            {
                fg.AppendItem(item.ClassServices, "ClassServices");
            }
            if (printMask?.Training?.Overall ?? true)
            {
                item.Training?.ToString(fg, "Training");
            }
        }
        
        public bool HasBeenSet(
            IClassDataGetter item,
            ClassData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IClassDataGetter item,
            ClassData.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.PrimaryAttributes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Specialization = true;
            mask.SecondaryAttributes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Flags = true;
            mask.ClassServices = true;
            mask.Training = new MaskItem<bool, ClassTraining.Mask<bool>?>(true, item.Training?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassDataGetter? lhs,
            IClassDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (!lhs.PrimaryAttributes.SequenceEqual(rhs.PrimaryAttributes)) return false;
            if (lhs.Specialization != rhs.Specialization) return false;
            if (!lhs.SecondaryAttributes.SequenceEqual(rhs.SecondaryAttributes)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.ClassServices != rhs.ClassServices) return false;
            if (!object.Equals(lhs.Training, rhs.Training)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IClassDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.PrimaryAttributes);
            hash.Add(item.Specialization);
            hash.Add(item.SecondaryAttributes);
            hash.Add(item.Flags);
            hash.Add(item.ClassServices);
            hash.Add(item.Training);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ClassData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IClassDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IClassDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ClassDataSetterTranslationCommon
    {
        public static readonly ClassDataSetterTranslationCommon Instance = new ClassDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClassData item,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.PrimaryAttributes) ?? true))
            {
                item.PrimaryAttributes.SetTo(rhs.PrimaryAttributes);
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Specialization) ?? true))
            {
                item.Specialization = rhs.Specialization;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.SecondaryAttributes) ?? true))
            {
                item.SecondaryAttributes.SetTo(rhs.SecondaryAttributes);
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.ClassServices) ?? true))
            {
                item.ClassServices = rhs.ClassServices;
            }
            if (rhs.Versioning.HasFlag(ClassData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Training) ?? true))
            {
                errorMask?.PushIndex((int)ClassData_FieldIndex.Training);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Training) ?? true))
                    {
                        item.Training = rhs.Training.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ClassData_FieldIndex.Training),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClassData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ClassData_Registration Registration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ClassDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ClassDataXmlWriteTranslation Instance = new ClassDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<ClassData.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)ClassData_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.PrimaryAttributes) ?? true))
            {
                ListXmlTranslation<ActorValue>.Instance.Write(
                    node: node,
                    name: nameof(item.PrimaryAttributes),
                    item: item.PrimaryAttributes,
                    fieldIndex: (int)ClassData_FieldIndex.PrimaryAttributes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClassData_FieldIndex.PrimaryAttributes),
                    transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        EnumXmlTranslation<ActorValue>.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Specialization) ?? true))
            {
                EnumXmlTranslation<Class.SpecializationFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Specialization),
                    item: item.Specialization,
                    fieldIndex: (int)ClassData_FieldIndex.Specialization,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.SecondaryAttributes) ?? true))
            {
                ListXmlTranslation<ActorValue>.Instance.Write(
                    node: node,
                    name: nameof(item.SecondaryAttributes),
                    item: item.SecondaryAttributes,
                    fieldIndex: (int)ClassData_FieldIndex.SecondaryAttributes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClassData_FieldIndex.SecondaryAttributes),
                    transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        EnumXmlTranslation<ActorValue>.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<ClassFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)ClassData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.ClassServices) ?? true))
            {
                EnumXmlTranslation<ClassService>.Instance.Write(
                    node: node,
                    name: nameof(item.ClassServices),
                    item: item.ClassServices,
                    fieldIndex: (int)ClassData_FieldIndex.ClassServices,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ClassData_FieldIndex.Training) ?? true))
            {
                var TrainingItem = item.Training;
                ((ClassTrainingXmlWriteTranslation)((IXmlItem)TrainingItem).XmlWriteTranslator).Write(
                    item: TrainingItem,
                    node: node,
                    name: nameof(item.Training),
                    fieldIndex: (int)ClassData_FieldIndex.Training,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ClassData_FieldIndex.Training));
            }
        }

        public void Write(
            XElement node,
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ClassData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ClassData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IClassDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ClassDataXmlCreateTranslation
    {
        public readonly static ClassDataXmlCreateTranslation Instance = new ClassDataXmlCreateTranslation();

        public static void FillPublicXml(
            IClassData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<ClassData.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrimaryAttributes":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.PrimaryAttributes);
                    try
                    {
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var PrimaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PrimaryAttributes.SetTo(PrimaryAttributesItem);
                        }
                        else
                        {
                            item.PrimaryAttributes.Reset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Specialization":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Specialization);
                    try
                    {
                        item.Specialization = EnumXmlTranslation<Class.SpecializationFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondaryAttributes":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.SecondaryAttributes);
                    try
                    {
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var SecondaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SecondaryAttributes.SetTo(SecondaryAttributesItem);
                        }
                        else
                        {
                            item.SecondaryAttributes.Reset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<ClassFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ClassServices":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.ClassServices);
                    try
                    {
                        item.ClassServices = EnumXmlTranslation<ClassService>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Training":
                    errorMask?.PushIndex((int)ClassData_FieldIndex.Training);
                    try
                    {
                        item.Training = LoquiXmlTranslation<ClassTraining>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ClassData_FieldIndex.Training));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ClassDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            XElement node,
            string? name = null,
            ClassData.TranslationMask? translationMask = null)
        {
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ClassDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ClassDataBinaryWriteTranslation Instance = new ClassDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClassDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                writer: writer,
                items: item.PrimaryAttributes,
                transl: (MutagenWriter subWriter, ActorValue subItem) =>
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                        subWriter,
                        subItem,
                        length: 4);
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Write(
                writer,
                item.Specialization,
                length: 4);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                writer: writer,
                items: item.SecondaryAttributes,
                transl: (MutagenWriter subWriter, ActorValue subItem) =>
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                        subWriter,
                        subItem,
                        length: 4);
                });
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassService>.Instance.Write(
                writer,
                item.ClassServices,
                length: 4);
            if (!item.Versioning.HasFlag(ClassData.VersioningBreaks.Break0))
            {
                var TrainingItem = item.Training;
                ((ClassTrainingBinaryWriteTranslation)((IBinaryItem)TrainingItem).BinaryWriteTranslator).Write(
                    item: TrainingItem,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ClassData_Registration.DATA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClassDataBinaryCreateTranslation
    {
        public readonly static ClassDataBinaryCreateTranslation Instance = new ClassDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IClassData item,
            MutagenFrame frame)
        {
            item.PrimaryAttributes.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Parse(
                    frame: frame,
                    amount: 2,
                    transl: (MutagenFrame r, out ActorValue listSubItem) =>
                    {
                        return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                            frame: r.SpawnWithLength(4),
                            item: out listSubItem);
                    }));
            item.Specialization = EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.SecondaryAttributes.SetTo(
                Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Parse(
                    frame: frame,
                    amount: 7,
                    transl: (MutagenFrame r, out ActorValue listSubItem) =>
                    {
                        return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                            frame: r.SpawnWithLength(4),
                            item: out listSubItem);
                    }));
            item.Flags = EnumBinaryTranslation<ClassFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.ClassServices = EnumBinaryTranslation<ClassService>.Instance.Parse(frame: frame.SpawnWithLength(4));
            if (frame.Complete)
            {
                item.Versioning |= ClassData.VersioningBreaks.Break0;
                return;
            }
            item.Training = Mutagen.Bethesda.Oblivion.ClassTraining.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClassDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClassDataGetter item,
            MutagenWriter writer)
        {
            ((ClassDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassDataBinaryOverlay :
        BinaryOverlay,
        IClassDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ClassData_Registration Registration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IClassDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ClassDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ClassData.VersioningBreaks Versioning { get; private set; }
        public ReadOnlyMemorySlice<ActorValue> PrimaryAttributes => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_data.Slice(0x0), amount: 2, enumLength: 4);
        public Class.SpecializationFlag Specialization => (Class.SpecializationFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        public ReadOnlyMemorySlice<ActorValue> SecondaryAttributes => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_data.Slice(0xC), amount: 7, enumLength: 4);
        public ClassFlag Flags => (ClassFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x28, 0x4));
        public ClassService ClassServices => (ClassService)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x2C, 0x4));
        public IClassTrainingGetter Training => ClassTrainingBinaryOverlay.ClassTrainingFactory(new BinaryMemoryReadStream(_data.Slice(0x30)), _package, default(RecordTypeConverter));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClassDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static ClassDataBinaryOverlay ClassDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ClassDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x30)
            {
                ret.Versioning |= ClassData.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ClassDataBinaryOverlay ClassDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ClassDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

