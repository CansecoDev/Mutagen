/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Class :
        OblivionMajorRecord,
        IClassInternal,
        ILoquiObjectSetter<Class>,
        INamed,
        IEquatable<Class>,
        IEqualsMask
    {
        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Name => this.Name;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Description => this.Description;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Icon => this.Icon;
        #endregion
        #region PrimaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _PrimaryAttributes = new ActorValue[2];
        public ActorValue[] PrimaryAttributes
        {
            get => this._PrimaryAttributes;
            protected set => this._PrimaryAttributes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassGetter.PrimaryAttributes => _PrimaryAttributes;
        #endregion

        #endregion
        #region Specialization
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Class.SpecializationFlag _Specialization;
        public Class.SpecializationFlag Specialization
        {
            get => this._Specialization;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Specialization = value;
            }
        }
        #endregion
        #region SecondaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _SecondaryAttributes = new ActorValue[7];
        public ActorValue[] SecondaryAttributes
        {
            get => this._SecondaryAttributes;
            protected set => this._SecondaryAttributes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassGetter.SecondaryAttributes => _SecondaryAttributes;
        #endregion

        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClassFlag _Flags;
        public ClassFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region ClassServices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClassService _ClassServices;
        public ClassService ClassServices
        {
            get => this._ClassServices;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ClassServices = value;
            }
        }
        #endregion
        #region Training
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClassTraining _Training = new ClassTraining();
        public ClassTraining Training
        {
            get => _Training;
            set => _Training = value ?? new ClassTraining();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClassTrainingGetter IClassGetter.Training => _Training;
        #endregion
        #region DATADataTypeState
        public Class.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ClassMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IClassGetter rhs)) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Class obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Class CreateFromXml(
            XElement node,
            Class.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Class CreateFromXml(
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Class CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Class CreateFromXml(
            string path,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Class CreateFromXml(
            Stream stream,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Class CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.PrimaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Specialization = initialValue;
                this.SecondaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = initialValue;
                this.ClassServices = initialValue;
                this.Training = new MaskItem<TItem, ClassTraining.Mask<TItem>?>(initialValue, new ClassTraining.Mask<TItem>(initialValue));
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Icon,
                TItem PrimaryAttributes,
                TItem Specialization,
                TItem SecondaryAttributes,
                TItem Flags,
                TItem ClassServices,
                TItem Training,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Icon = Icon;
                this.PrimaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PrimaryAttributes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Specialization = Specialization;
                this.SecondaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SecondaryAttributes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = Flags;
                this.ClassServices = ClassServices;
                this.Training = new MaskItem<TItem, ClassTraining.Mask<TItem>?>(Training, new ClassTraining.Mask<TItem>(Training));
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem Icon;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PrimaryAttributes;
            public TItem Specialization;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SecondaryAttributes;
            public TItem Flags;
            public TItem ClassServices;
            public MaskItem<TItem, ClassTraining.Mask<TItem>?>? Training { get; set; }
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.PrimaryAttributes, rhs.PrimaryAttributes)) return false;
                if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
                if (!object.Equals(this.SecondaryAttributes, rhs.SecondaryAttributes)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ClassServices, rhs.ClassServices)) return false;
                if (!object.Equals(this.Training, rhs.Training)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.PrimaryAttributes?.GetHashCode());
                ret = ret.CombineHashCode(this.Specialization?.GetHashCode());
                ret = ret.CombineHashCode(this.SecondaryAttributes?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.ClassServices?.GetHashCode());
                ret = ret.CombineHashCode(this.Training?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (this.PrimaryAttributes != null)
                {
                    if (!eval(this.PrimaryAttributes.Overall)) return false;
                    if (this.PrimaryAttributes.Specific != null)
                    {
                        foreach (var item in this.PrimaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Specialization)) return false;
                if (this.SecondaryAttributes != null)
                {
                    if (!eval(this.SecondaryAttributes.Overall)) return false;
                    if (this.SecondaryAttributes.Specific != null)
                    {
                        foreach (var item in this.SecondaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ClassServices)) return false;
                if (Training != null)
                {
                    if (!eval(this.Training.Overall)) return false;
                    if (this.Training.Specific != null && !this.Training.Specific.All(eval)) return false;
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Icon)) return true;
                if (this.PrimaryAttributes != null)
                {
                    if (eval(this.PrimaryAttributes.Overall)) return true;
                    if (this.PrimaryAttributes.Specific != null)
                    {
                        foreach (var item in this.PrimaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Specialization)) return true;
                if (this.SecondaryAttributes != null)
                {
                    if (eval(this.SecondaryAttributes.Overall)) return true;
                    if (this.SecondaryAttributes.Specific != null)
                    {
                        foreach (var item in this.SecondaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ClassServices)) return true;
                if (Training != null)
                {
                    if (eval(this.Training.Overall)) return true;
                    if (this.Training.Specific != null && this.Training.Specific.Any(eval)) return true;
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Class.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                if (PrimaryAttributes != null)
                {
                    obj.PrimaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PrimaryAttributes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PrimaryAttributes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PrimaryAttributes.Specific = l;
                        foreach (var item in PrimaryAttributes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Specialization = eval(this.Specialization);
                if (SecondaryAttributes != null)
                {
                    obj.SecondaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SecondaryAttributes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SecondaryAttributes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SecondaryAttributes.Specific = l;
                        foreach (var item in SecondaryAttributes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.ClassServices = eval(this.ClassServices);
                obj.Training = this.Training == null ? null : new MaskItem<R, ClassTraining.Mask<R>?>(eval(this.Training.Overall), this.Training.Specific?.Translate(eval));
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Class.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Class.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Class.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if ((printMask?.PrimaryAttributes?.Overall ?? true)
                        && PrimaryAttributes.TryGet(out var PrimaryAttributesItem))
                    {
                        fg.AppendLine("PrimaryAttributes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PrimaryAttributesItem.Overall);
                            if (PrimaryAttributesItem.Specific != null)
                            {
                                foreach (var subItem in PrimaryAttributesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Specialization ?? true)
                    {
                        fg.AppendItem(Specialization, "Specialization");
                    }
                    if ((printMask?.SecondaryAttributes?.Overall ?? true)
                        && SecondaryAttributes.TryGet(out var SecondaryAttributesItem))
                    {
                        fg.AppendLine("SecondaryAttributes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SecondaryAttributesItem.Overall);
                            if (SecondaryAttributesItem.Specific != null)
                            {
                                foreach (var subItem in SecondaryAttributesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ClassServices ?? true)
                    {
                        fg.AppendItem(ClassServices, "ClassServices");
                    }
                    if (printMask?.Training?.Overall ?? true)
                    {
                        Training?.ToString(fg);
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Icon;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PrimaryAttributes;
            public Exception? Specialization;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SecondaryAttributes;
            public Exception? Flags;
            public Exception? ClassServices;
            public MaskItem<Exception?, ClassTraining.ErrorMask?>? Training;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        return Name;
                    case Class_FieldIndex.Description:
                        return Description;
                    case Class_FieldIndex.Icon:
                        return Icon;
                    case Class_FieldIndex.PrimaryAttributes:
                        return PrimaryAttributes;
                    case Class_FieldIndex.Specialization:
                        return Specialization;
                    case Class_FieldIndex.SecondaryAttributes:
                        return SecondaryAttributes;
                    case Class_FieldIndex.Flags:
                        return Flags;
                    case Class_FieldIndex.ClassServices:
                        return ClassServices;
                    case Class_FieldIndex.Training:
                        return Training;
                    case Class_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Class_FieldIndex.PrimaryAttributes:
                        this.PrimaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Class_FieldIndex.Specialization:
                        this.Specialization = ex;
                        break;
                    case Class_FieldIndex.SecondaryAttributes:
                        this.SecondaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Class_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Class_FieldIndex.ClassServices:
                        this.ClassServices = ex;
                        break;
                    case Class_FieldIndex.Training:
                        this.Training = new MaskItem<Exception?, ClassTraining.ErrorMask?>(ex, null);
                        break;
                    case Class_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Class_FieldIndex.PrimaryAttributes:
                        this.PrimaryAttributes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Class_FieldIndex.Specialization:
                        this.Specialization = (Exception?)obj;
                        break;
                    case Class_FieldIndex.SecondaryAttributes:
                        this.SecondaryAttributes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Class_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Class_FieldIndex.ClassServices:
                        this.ClassServices = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Training:
                        this.Training = (MaskItem<Exception?, ClassTraining.ErrorMask?>?)obj;
                        break;
                    case Class_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (PrimaryAttributes != null) return true;
                if (Specialization != null) return true;
                if (SecondaryAttributes != null) return true;
                if (Flags != null) return true;
                if (ClassServices != null) return true;
                if (Training != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                fg.AppendItem(Icon, "Icon");
                if (PrimaryAttributes.TryGet(out var PrimaryAttributesItem))
                {
                    fg.AppendLine("PrimaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PrimaryAttributesItem.Overall);
                        if (PrimaryAttributesItem.Specific != null)
                        {
                            foreach (var subItem in PrimaryAttributesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Specialization, "Specialization");
                if (SecondaryAttributes.TryGet(out var SecondaryAttributesItem))
                {
                    fg.AppendLine("SecondaryAttributes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SecondaryAttributesItem.Overall);
                        if (SecondaryAttributesItem.Specific != null)
                        {
                            foreach (var subItem in SecondaryAttributesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ClassServices, "ClassServices");
                Training?.ToString(fg);
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.PrimaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.PrimaryAttributes?.Overall, rhs.PrimaryAttributes?.Overall), ExceptionExt.Combine(this.PrimaryAttributes?.Specific, rhs.PrimaryAttributes?.Specific));
                ret.Specialization = this.Specialization.Combine(rhs.Specialization);
                ret.SecondaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.SecondaryAttributes?.Overall, rhs.SecondaryAttributes?.Overall), ExceptionExt.Combine(this.SecondaryAttributes?.Specific, rhs.SecondaryAttributes?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ClassServices = this.ClassServices.Combine(rhs.ClassServices);
                ret.Training = this.Training.Combine(rhs.Training, (l, r) => l.Combine(r));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Icon;
            public bool PrimaryAttributes;
            public bool Specialization;
            public bool SecondaryAttributes;
            public bool Flags;
            public bool ClassServices;
            public MaskItem<bool, ClassTraining.TranslationMask?> Training;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.PrimaryAttributes = defaultOn;
                this.Specialization = defaultOn;
                this.SecondaryAttributes = defaultOn;
                this.Flags = defaultOn;
                this.ClassServices = defaultOn;
                this.Training = new MaskItem<bool, ClassTraining.TranslationMask?>(defaultOn, null);
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((PrimaryAttributes, null));
                ret.Add((Specialization, null));
                ret.Add((SecondaryAttributes, null));
                ret.Add((Flags, null));
                ret.Add((ClassServices, null));
                ret.Add((Training?.Overall ?? true, Training?.Specific?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Class_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public Class(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Class(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Class(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Class CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Class CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ClassSetterCommon)((IClassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Class GetNew()
        {
            return new Class();
        }

    }
    #endregion

    #region Interface
    public partial interface IClass :
        IClassGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IClassInternal>
    {
        new String? Name { get; set; }
        new String? Description { get; set; }
        new String? Icon { get; set; }
        new ActorValue[] PrimaryAttributes { get; }
        new Class.SpecializationFlag Specialization { get; set; }
        new ActorValue[] SecondaryAttributes { get; }
        new ClassFlag Flags { get; set; }
        new ClassService ClassServices { get; set; }
        new ClassTraining Training { get; set; }
        new Class.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IClassInternal :
        IOblivionMajorRecordInternal,
        IClass,
        IClassGetter
    {
    }

    public partial interface IClassGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IClassGetter>,
        IXmlItem,
        IBinaryItem
    {
        String? Name { get; }
        String? Description { get; }
        String? Icon { get; }
        ReadOnlyMemorySlice<ActorValue> PrimaryAttributes { get; }
        Class.SpecializationFlag Specialization { get; }
        ReadOnlyMemorySlice<ActorValue> SecondaryAttributes { get; }
        ClassFlag Flags { get; }
        ClassService ClassServices { get; }
        IClassTrainingGetter Training { get; }
        Class.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class ClassMixIn
    {
        public static void Clear(this IClassInternal item)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Class.Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IClassGetter item,
            FileGeneration fg,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IClassGetter item,
            Class.Mask<bool?> checkMask)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Class.Mask<bool> GetHasBeenSetMask(this IClassGetter item)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IClassGetter item,
            IClassGetter rhs)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            Class.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IClassInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Class.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Class_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        PrimaryAttributes = 8,
        Specialization = 9,
        SecondaryAttributes = 10,
        Flags = 11,
        ClassServices = 12,
        Training = 13,
        DATADataTypeState = 14,
    }
    #endregion

    #region Registration
    public partial class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 16,
            version: 0);

        public const string GUID = "3f2e301a-e8f4-42db-875c-3e760e4eff31";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Class.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class.ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type? InternalSetterType = typeof(IClassInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Class_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)Class_FieldIndex.Description;
                case "ICON":
                    return (ushort)Class_FieldIndex.Icon;
                case "PRIMARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.PrimaryAttributes;
                case "SPECIALIZATION":
                    return (ushort)Class_FieldIndex.Specialization;
                case "SECONDARYATTRIBUTES":
                    return (ushort)Class_FieldIndex.SecondaryAttributes;
                case "FLAGS":
                    return (ushort)Class_FieldIndex.Flags;
                case "CLASSSERVICES":
                    return (ushort)Class_FieldIndex.ClassServices;
                case "TRAINING":
                    return (ushort)Class_FieldIndex.Training;
                case "DATADATATYPESTATE":
                    return (ushort)Class_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.SecondaryAttributes:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Training:
                    return true;
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return "Name";
                case Class_FieldIndex.Description:
                    return "Description";
                case Class_FieldIndex.Icon:
                    return "Icon";
                case Class_FieldIndex.PrimaryAttributes:
                    return "PrimaryAttributes";
                case Class_FieldIndex.Specialization:
                    return "Specialization";
                case Class_FieldIndex.SecondaryAttributes:
                    return "SecondaryAttributes";
                case Class_FieldIndex.Flags:
                    return "Flags";
                case Class_FieldIndex.ClassServices:
                    return "ClassServices";
                case Class_FieldIndex.Training:
                    return "Training";
                case Class_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                case Class_FieldIndex.Description:
                case Class_FieldIndex.Icon:
                case Class_FieldIndex.PrimaryAttributes:
                case Class_FieldIndex.Specialization:
                case Class_FieldIndex.SecondaryAttributes:
                case Class_FieldIndex.Flags:
                case Class_FieldIndex.ClassServices:
                case Class_FieldIndex.Training:
                case Class_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Class_FieldIndex enu = (Class_FieldIndex)index;
            switch (enu)
            {
                case Class_FieldIndex.Name:
                    return typeof(String);
                case Class_FieldIndex.Description:
                    return typeof(String);
                case Class_FieldIndex.Icon:
                    return typeof(String);
                case Class_FieldIndex.PrimaryAttributes:
                    return typeof(ActorValue[]);
                case Class_FieldIndex.Specialization:
                    return typeof(Class.SpecializationFlag);
                case Class_FieldIndex.SecondaryAttributes:
                    return typeof(ActorValue[]);
                case Class_FieldIndex.Flags:
                    return typeof(ClassFlag);
                case Class_FieldIndex.ClassServices:
                    return typeof(ClassService);
                case Class_FieldIndex.Training:
                    return typeof(ClassTraining);
                case Class_FieldIndex.DATADataTypeState:
                    return typeof(Class.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ClassXmlWriteTranslation);
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CLAS_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(ClassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ClassSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly ClassSetterCommon Instance = new ClassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Icon = default;
            item.PrimaryAttributes.Reset();
            item.Specialization = default;
            item.SecondaryAttributes.Reset();
            item.Flags = default;
            item.ClassServices = default;
            item.Training = new ClassTraining();
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.DATADataTypeState |= Class.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Class_Registration.CLAS_HEADER;
        protected static void FillBinaryStructs(
            IClassInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IClassInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Class.DATADataType.Has;
                    }
                    item.PrimaryAttributes.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Parse(
                            frame: frame,
                            amount: 2,
                            transl: (MutagenFrame r, out ActorValue listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                    frame: r.SpawnWithLength(4),
                                    item: out listSubItem);
                            }));
                    item.Specialization = EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.SecondaryAttributes.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Parse(
                            frame: frame,
                            amount: 7,
                            transl: (MutagenFrame r, out ActorValue listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Parse(
                                    frame: r.SpawnWithLength(4),
                                    item: out listSubItem);
                            }));
                    item.Flags = EnumBinaryTranslation<ClassFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ClassServices = EnumBinaryTranslation<ClassService>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Class.DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)Class_FieldIndex.ClassServices);
                    }
                    item.Training = Mutagen.Bethesda.Oblivion.ClassTraining.CreateFromBinary(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Training);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            IClassInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IClassInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ClassCommon : OblivionMajorRecordCommon
    {
        public new static readonly ClassCommon Instance = new ClassCommon();

        public Class.Mask<bool> GetEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.PrimaryAttributes = item.PrimaryAttributes.SpanEqualsHelper(
                rhs.PrimaryAttributes,
                (l, r) => l == r,
                include);
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.SecondaryAttributes = item.SecondaryAttributes.SpanEqualsHelper(
                rhs.SecondaryAttributes,
                (l, r) => l == r,
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ClassServices = item.ClassServices == rhs.ClassServices;
            ret.Training = MaskItemExt.Factory(item.Training.GetEqualsMask(rhs.Training, include), include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IClassGetter item,
            FileGeneration fg,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Class =>");
            }
            else
            {
                fg.AppendLine($"{name} (Class) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IClassGetter item,
            FileGeneration fg,
            Class.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if (printMask?.PrimaryAttributes?.Overall ?? true)
            {
                fg.AppendLine("PrimaryAttributes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.PrimaryAttributes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Specialization ?? true)
            {
                fg.AppendItem(item.Specialization, "Specialization");
            }
            if (printMask?.SecondaryAttributes?.Overall ?? true)
            {
                fg.AppendLine("SecondaryAttributes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.SecondaryAttributes)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.ClassServices ?? true)
            {
                fg.AppendItem(item.ClassServices, "ClassServices");
            }
            if (printMask?.Training?.Overall ?? true)
            {
                item.Training?.ToString(fg, "Training");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IClassGetter item,
            Class.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IClassGetter item,
            Class.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = (item.Description != null);
            mask.Icon = (item.Icon != null);
            mask.PrimaryAttributes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Specialization = true;
            mask.SecondaryAttributes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Flags = true;
            mask.ClassServices = true;
            mask.Training = new MaskItem<bool, ClassTraining.Mask<bool>?>(true, item.Training?.GetHasBeenSetMask());
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Class_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassGetter? lhs,
            IClassGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!lhs.PrimaryAttributes.SequenceEqual(rhs.PrimaryAttributes)) return false;
            if (lhs.Specialization != rhs.Specialization) return false;
            if (!lhs.SecondaryAttributes.SequenceEqual(rhs.SecondaryAttributes)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.ClassServices != rhs.ClassServices) return false;
            if (!object.Equals(lhs.Training, rhs.Training)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter);
        }
        
        public virtual int GetHashCode(IClassGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.PrimaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Specialization).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SecondaryAttributes).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ClassServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Training).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Class.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IClassGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Class obj, Class rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Class(getNextFormKey());
            ret.DeepCopyIn((Class)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Class)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ClassSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly ClassSetterTranslationCommon Instance = new ClassSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IClassInternal item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.PrimaryAttributes) ?? true))
            {
                item.PrimaryAttributes.SetTo(rhs.PrimaryAttributes);
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Specialization) ?? true))
            {
                item.Specialization = rhs.Specialization;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.SecondaryAttributes) ?? true))
            {
                item.SecondaryAttributes.SetTo(rhs.SecondaryAttributes);
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.ClassServices) ?? true))
            {
                item.ClassServices = rhs.ClassServices;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Training) ?? true))
            {
                errorMask?.PushIndex((int)Class_FieldIndex.Training);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Training) ?? true))
                    {
                        item.Training = rhs.Training.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Class_FieldIndex.Training),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Class DeepCopy(
            IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Class
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ClassXmlWriteTranslation Instance = new ClassXmlWriteTranslation();

        public static void WriteToNodeXml(
            IClassGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Class_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)Class_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Class_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.PrimaryAttributes) ?? true))
                {
                    ListXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.PrimaryAttributes),
                        item: item.PrimaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.PrimaryAttributes,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.PrimaryAttributes),
                        transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                        {
                            EnumXmlTranslation<ActorValue>.Instance.Write(
                                node: subNode,
                                name: null,
                                item: subItem,
                                errorMask: listSubMask);
                        });
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Specialization) ?? true))
                {
                    EnumXmlTranslation<Class.SpecializationFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Specialization),
                        item: item.Specialization,
                        fieldIndex: (int)Class_FieldIndex.Specialization,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.SecondaryAttributes) ?? true))
                {
                    ListXmlTranslation<ActorValue>.Instance.Write(
                        node: node,
                        name: nameof(item.SecondaryAttributes),
                        item: item.SecondaryAttributes,
                        fieldIndex: (int)Class_FieldIndex.SecondaryAttributes,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.SecondaryAttributes),
                        transl: (XElement subNode, ActorValue subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                        {
                            EnumXmlTranslation<ActorValue>.Instance.Write(
                                node: subNode,
                                name: null,
                                item: subItem,
                                errorMask: listSubMask);
                        });
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<ClassFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Class_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.ClassServices) ?? true))
                {
                    EnumXmlTranslation<ClassService>.Instance.Write(
                        node: node,
                        name: nameof(item.ClassServices),
                        item: item.ClassServices,
                        fieldIndex: (int)Class_FieldIndex.ClassServices,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.Training) ?? true))
                    {
                        var TrainingItem = item.Training;
                        ((ClassTrainingXmlWriteTranslation)((IXmlItem)TrainingItem).XmlWriteTranslator).Write(
                            item: TrainingItem,
                            node: node,
                            name: nameof(item.Training),
                            fieldIndex: (int)Class_FieldIndex.Training,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.Training));
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Class_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Class.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Class_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Class");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Class");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IClassGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ClassXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static ClassXmlCreateTranslation Instance = new ClassXmlCreateTranslation();

        public static void FillPublicXml(
            IClassInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ClassXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IClassInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Class_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)Class_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)Class_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrimaryAttributes":
                    errorMask?.PushIndex((int)Class_FieldIndex.PrimaryAttributes);
                    try
                    {
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var PrimaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PrimaryAttributes.SetTo(PrimaryAttributesItem);
                        }
                        else
                        {
                            item.PrimaryAttributes.Reset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Class.DATADataType.Has;
                    break;
                case "Specialization":
                    errorMask?.PushIndex((int)Class_FieldIndex.Specialization);
                    try
                    {
                        item.Specialization = EnumXmlTranslation<Class.SpecializationFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SecondaryAttributes":
                    errorMask?.PushIndex((int)Class_FieldIndex.SecondaryAttributes);
                    try
                    {
                        if (ListXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            enumer: out var SecondaryAttributesItem,
                            transl: EnumXmlTranslation<ActorValue>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SecondaryAttributes.SetTo(SecondaryAttributesItem);
                        }
                        else
                        {
                            item.SecondaryAttributes.Reset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Class_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<ClassFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ClassServices":
                    errorMask?.PushIndex((int)Class_FieldIndex.ClassServices);
                    try
                    {
                        item.ClassServices = EnumXmlTranslation<ClassService>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Training":
                    errorMask?.PushIndex((int)Class_FieldIndex.Training);
                    try
                    {
                        item.Training = LoquiXmlTranslation<ClassTraining>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Class_FieldIndex.Training));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~Class.DATADataType.Break0;
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Class_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Class.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ClassXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IClassGetter item,
            XElement node,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IClassGetter item,
            string path,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IClassGetter item,
            Stream stream,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ClassBinaryWriteTranslation Instance = new ClassBinaryWriteTranslation();

        public static void WriteEmbedded(
            IClassGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IClassGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Class_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.DATADataTypeState.HasFlag(Class.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Class_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.PrimaryAttributes,
                        transl: (MutagenWriter subWriter, ActorValue subItem) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4);
                        });
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Class.SpecializationFlag>.Instance.Write(
                        writer,
                        item.Specialization,
                        length: 4);
                    Mutagen.Bethesda.Binary.ListBinaryTranslation<ActorValue>.Instance.Write(
                        writer: writer,
                        items: item.SecondaryAttributes,
                        transl: (MutagenWriter subWriter, ActorValue subItem) =>
                        {
                            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                                subWriter,
                                subItem,
                                length: 4);
                        });
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<ClassService>.Instance.Write(
                        writer,
                        item.ClassServices,
                        length: 4);
                    if (!item.DATADataTypeState.HasFlag(Class.DATADataType.Break0))
                    {
                        var TrainingItem = item.Training;
                        ((ClassTrainingBinaryWriteTranslation)((IBinaryItem)TrainingItem).BinaryWriteTranslator).Write(
                            item: TrainingItem,
                            writer: writer);
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Class_Registration.CLAS_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ClassBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static ClassBinaryCreateTranslation Instance = new ClassBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ClassBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IClassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static Class_Registration Registration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IClassGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ClassXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ClassXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        private int? _DATALocation;
        public Class.DATADataType DATADataTypeState { get; private set; }
        public ReadOnlyMemorySlice<ActorValue> PrimaryAttributes => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_DATALocation.HasValue ? _data.Slice(_DATALocation.Value + 0) : default, amount: 2, enumLength: 4);
        #region Specialization
        private int _SpecializationLocation => _DATALocation!.Value + 0x8;
        private bool _Specialization_IsSet => _DATALocation.HasValue;
        public Class.SpecializationFlag Specialization => _Specialization_IsSet ? (Class.SpecializationFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_SpecializationLocation, 4)) : default;
        #endregion
        public ReadOnlyMemorySlice<ActorValue> SecondaryAttributes => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_DATALocation.HasValue ? _data.Slice(_DATALocation.Value + 12) : default, amount: 7, enumLength: 4);
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x28;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public ClassFlag Flags => _Flags_IsSet ? (ClassFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region ClassServices
        private int _ClassServicesLocation => _DATALocation!.Value + 0x2C;
        private bool _ClassServices_IsSet => _DATALocation.HasValue;
        public ClassService ClassServices => _ClassServices_IsSet ? (ClassService)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ClassServicesLocation, 4)) : default;
        #endregion
        #region Training
        private int _TrainingLocation => _DATALocation!.Value + 0x30;
        private bool _Training_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Class.DATADataType.Break0);
        private IClassTrainingGetter? _Training => _Training_IsSet ? ClassTrainingBinaryOverlay.ClassTrainingFactory(new BinaryMemoryReadStream(_data.Slice(_TrainingLocation)), _package) : default;
        public IClassTrainingGetter Training => _Training ?? new ClassTraining();
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ClassBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ClassBinaryOverlay ClassFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ClassBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Icon);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Class.DATADataType.Has;
                    var subLen = _package.Meta.SubRecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x30)
                    {
                        this.DATADataTypeState |= Class.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)Class_FieldIndex.Training);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

