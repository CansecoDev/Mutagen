/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Container :
        OblivionMajorRecord,
        IContainerInternal,
        ILoquiObjectSetter<Container>,
        INamed,
        IEquatable<Container>,
        IEqualsMask
    {
        #region Ctor
        protected Container()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IContainerGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IContainerGetter.Model => this.Model;
        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Script> _Script = new FormLinkNullable<Script>();
        public IFormLinkNullable<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> IContainerGetter.Script => this.Script;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerItem> _Items = new ExtendedList<ContainerItem>();
        public ExtendedList<ContainerItem> Items
        {
            get => this._Items;
            protected set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerItemGetter> IContainerGetter.Items => _Items;
        #endregion

        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Container.ContainerFlag _Flags;
        public Container.ContainerFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Weight = value;
            }
        }
        #endregion
        #region OpenSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Sound> _OpenSound = new FormLinkNullable<Sound>();
        public IFormLinkNullable<Sound> OpenSound => this._OpenSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IContainerGetter.OpenSound => this.OpenSound;
        #endregion
        #region CloseSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Sound> _CloseSound = new FormLinkNullable<Sound>();
        public IFormLinkNullable<Sound> CloseSound => this._CloseSound;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IContainerGetter.CloseSound => this.CloseSound;
        #endregion
        #region DATADataTypeState
        public Container.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ContainerMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IContainerGetter rhs)) return false;
            return ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Container obj)
        {
            return ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ContainerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ContainerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Container CreateFromXml(
            XElement node,
            Container.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Container CreateFromXml(
            XElement node,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Container.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Container CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Container();
            ((ContainerSetterCommon)((IContainerGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Container CreateFromXml(
            string path,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            string path,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Container CreateFromXml(
            Stream stream,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            Stream stream,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Container CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Script = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerItem.Mask<TItem>?>>());
                this.Flags = initialValue;
                this.Weight = initialValue;
                this.OpenSound = initialValue;
                this.CloseSound = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Script,
                TItem Items,
                TItem Flags,
                TItem Weight,
                TItem OpenSound,
                TItem CloseSound,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Script = Script;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerItem.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerItem.Mask<TItem>?>>());
                this.Flags = Flags;
                this.Weight = Weight;
                this.OpenSound = OpenSound;
                this.CloseSound = CloseSound;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Script;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerItem.Mask<TItem>?>>?>? Items;
            public TItem Flags;
            public TItem Weight;
            public TItem OpenSound;
            public TItem CloseSound;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
                if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Script);
                hash.Add(this.Items);
                hash.Add(this.Flags);
                hash.Add(this.Weight);
                hash.Add(this.OpenSound);
                hash.Add(this.CloseSound);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Script)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.OpenSound)) return false;
                if (!eval(this.CloseSound)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Script)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.OpenSound)) return true;
                if (eval(this.CloseSound)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Container.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Script = eval(this.Script);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerItem.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerItem.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerItem.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ContainerItem.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ContainerItem.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.Weight = eval(this.Weight);
                obj.OpenSound = eval(this.OpenSound);
                obj.CloseSound = eval(this.CloseSound);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Container.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Container.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Container.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.OpenSound ?? true)
                    {
                        fg.AppendItem(OpenSound, "OpenSound");
                    }
                    if (printMask?.CloseSound ?? true)
                    {
                        fg.AppendItem(CloseSound, "CloseSound");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Script;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerItem.ErrorMask?>>?>? Items;
            public Exception? Flags;
            public Exception? Weight;
            public Exception? OpenSound;
            public Exception? CloseSound;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Container_FieldIndex enu = (Container_FieldIndex)index;
                switch (enu)
                {
                    case Container_FieldIndex.Name:
                        return Name;
                    case Container_FieldIndex.Model:
                        return Model;
                    case Container_FieldIndex.Script:
                        return Script;
                    case Container_FieldIndex.Items:
                        return Items;
                    case Container_FieldIndex.Flags:
                        return Flags;
                    case Container_FieldIndex.Weight:
                        return Weight;
                    case Container_FieldIndex.OpenSound:
                        return OpenSound;
                    case Container_FieldIndex.CloseSound:
                        return CloseSound;
                    case Container_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Container_FieldIndex enu = (Container_FieldIndex)index;
                switch (enu)
                {
                    case Container_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Container_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Container_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerItem.ErrorMask?>>?>(ex, null);
                        break;
                    case Container_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Container_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Container_FieldIndex.OpenSound:
                        this.OpenSound = ex;
                        break;
                    case Container_FieldIndex.CloseSound:
                        this.CloseSound = ex;
                        break;
                    case Container_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Container_FieldIndex enu = (Container_FieldIndex)index;
                switch (enu)
                {
                    case Container_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerItem.ErrorMask?>>?>)obj;
                        break;
                    case Container_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Container_FieldIndex.OpenSound:
                        this.OpenSound = (Exception?)obj;
                        break;
                    case Container_FieldIndex.CloseSound:
                        this.CloseSound = (Exception?)obj;
                        break;
                    case Container_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Script != null) return true;
                if (Items != null) return true;
                if (Flags != null) return true;
                if (Weight != null) return true;
                if (OpenSound != null) return true;
                if (CloseSound != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Script, "Script");
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(OpenSound, "OpenSound");
                fg.AppendItem(CloseSound, "CloseSound");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerItem.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
                ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Script;
            public MaskItem<bool, ContainerItem.TranslationMask?> Items;
            public bool Flags;
            public bool Weight;
            public bool OpenSound;
            public bool CloseSound;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Script = defaultOn;
                this.Items = new MaskItem<bool, ContainerItem.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.Weight = defaultOn;
                this.OpenSound = defaultOn;
                this.CloseSound = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Script, null));
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Weight, null));
                ret.Add((OpenSound, null));
                ret.Add((CloseSound, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Container_Registration.TriggeringRecordType;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => ContainerCommon.Instance.GetLinks(this);
        public Container(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Container(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Container(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ContainerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Container CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Container CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Container();
            ((ContainerSetterCommon)((IContainerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IContainerGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ContainerSetterCommon)((IContainerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Container GetNew()
        {
            return new Container();
        }

    }
    #endregion

    #region Interface
    public partial interface IContainer :
        IContainerGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IContainerInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new IFormLinkNullable<Script> Script { get; }
        new ExtendedList<ContainerItem> Items { get; }
        new Container.ContainerFlag Flags { get; set; }
        new Single Weight { get; set; }
        new IFormLinkNullable<Sound> OpenSound { get; }
        new IFormLinkNullable<Sound> CloseSound { get; }
        new Container.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IContainerInternal :
        IOblivionMajorRecordInternal,
        IContainer,
        IContainerGetter
    {
    }

    public partial interface IContainerGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IContainerGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IModelGetter? Model { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IReadOnlyList<IContainerItemGetter> Items { get; }
        Container.ContainerFlag Flags { get; }
        Single Weight { get; }
        IFormLinkNullableGetter<ISoundGetter> OpenSound { get; }
        IFormLinkNullableGetter<ISoundGetter> CloseSound { get; }
        Container.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ContainerMixIn
    {
        public static void Clear(this IContainerInternal item)
        {
            ((ContainerSetterCommon)((IContainerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Container.Mask<bool> GetEqualsMask(
            this IContainerGetter item,
            IContainerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IContainerGetter item,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IContainerGetter item,
            FileGeneration fg,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IContainerGetter item,
            Container.Mask<bool?> checkMask)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Container.Mask<bool> GetHasBeenSetMask(this IContainerGetter item)
        {
            var ret = new Container.Mask<bool>(false);
            ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IContainerGetter item,
            IContainerGetter rhs)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IContainerInternal lhs,
            IContainerGetter rhs,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ContainerSetterTranslationCommon)((IContainerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Container.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IContainerInternal lhs,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ContainerSetterTranslationCommon)((IContainerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Container DeepCopy(
            this IContainerGetter item,
            Container.TranslationMask? copyMask = null)
        {
            return ((ContainerSetterTranslationCommon)((IContainerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Container DeepCopy(
            this IContainerGetter item,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? copyMask = null)
        {
            return ((ContainerSetterTranslationCommon)((IContainerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Container DeepCopy(
            this IContainerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ContainerSetterTranslationCommon)((IContainerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IContainerInternal item,
            XElement node,
            Container.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IContainerInternal item,
            XElement node,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Container.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ContainerSetterCommon)((IContainerGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            string path,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            string path,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            Stream stream,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            Stream stream,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IContainerInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Container.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IContainerInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IContainerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerSetterCommon)((IContainerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Container_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        Items = 8,
        Flags = 9,
        Weight = 10,
        OpenSound = 11,
        CloseSound = 12,
        DATADataTypeState = 13,
    }
    #endregion

    #region Registration
    public partial class Container_Registration : ILoquiRegistration
    {
        public static readonly Container_Registration Instance = new Container_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 71,
            version: 0);

        public const string GUID = "066f0f2c-d0c7-4290-84f3-72ed6e07b160";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(Container.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Container.ErrorMask);

        public static readonly Type ClassType = typeof(Container);

        public static readonly Type GetterType = typeof(IContainerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IContainer);

        public static readonly Type? InternalSetterType = typeof(IContainerInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Container";

        public const string Name = "Container";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Container_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Container_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Container_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)Container_FieldIndex.Items;
                case "FLAGS":
                    return (ushort)Container_FieldIndex.Flags;
                case "WEIGHT":
                    return (ushort)Container_FieldIndex.Weight;
                case "OPENSOUND":
                    return (ushort)Container_FieldIndex.OpenSound;
                case "CLOSESOUND":
                    return (ushort)Container_FieldIndex.CloseSound;
                case "DATADATATYPESTATE":
                    return (ushort)Container_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Items:
                    return true;
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Items:
                    return true;
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    return "Name";
                case Container_FieldIndex.Model:
                    return "Model";
                case Container_FieldIndex.Script:
                    return "Script";
                case Container_FieldIndex.Items:
                    return "Items";
                case Container_FieldIndex.Flags:
                    return "Flags";
                case Container_FieldIndex.Weight:
                    return "Weight";
                case Container_FieldIndex.OpenSound:
                    return "OpenSound";
                case Container_FieldIndex.CloseSound:
                    return "CloseSound";
                case Container_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                case Container_FieldIndex.Model:
                case Container_FieldIndex.Script:
                case Container_FieldIndex.Items:
                case Container_FieldIndex.Flags:
                case Container_FieldIndex.Weight:
                case Container_FieldIndex.OpenSound:
                case Container_FieldIndex.CloseSound:
                case Container_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Container_FieldIndex enu = (Container_FieldIndex)index;
            switch (enu)
            {
                case Container_FieldIndex.Name:
                    return typeof(String);
                case Container_FieldIndex.Model:
                    return typeof(Model);
                case Container_FieldIndex.Script:
                    return typeof(IFormLinkNullable<Script>);
                case Container_FieldIndex.Items:
                    return typeof(ExtendedList<ContainerItem>);
                case Container_FieldIndex.Flags:
                    return typeof(Container.ContainerFlag);
                case Container_FieldIndex.Weight:
                    return typeof(Single);
                case Container_FieldIndex.OpenSound:
                    return typeof(IFormLinkNullable<Sound>);
                case Container_FieldIndex.CloseSound:
                    return typeof(IFormLinkNullable<Sound>);
                case Container_FieldIndex.DATADataTypeState:
                    return typeof(Container.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ContainerXmlWriteTranslation);
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType QNAM_HEADER = new RecordType("QNAM");
        public static readonly RecordType TriggeringRecordType = CONT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(ContainerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ContainerSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly ContainerSetterCommon Instance = new ContainerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IContainerInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Script.FormKey = null;
            item.Items.Clear();
            item.Flags = default;
            item.Weight = default;
            item.OpenSound.FormKey = null;
            item.CloseSound.FormKey = null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IContainerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IContainerInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IContainerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= Container.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IContainerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    ContainerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Container)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Container)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Container_Registration.CONT_HEADER;
        protected static void FillBinaryStructs(
            IContainerInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IContainerInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ContainerItem>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Container_Registration.CNTO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out ContainerItem listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<ContainerItem>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Items);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Container.DATADataType.Has;
                    }
                    item.Flags = EnumBinaryTranslation<Container.ContainerFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Weight);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.OpenSound.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.OpenSound);
                }
                case 0x4D414E51: // QNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CloseSound.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.CloseSound);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IContainerInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IContainerInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Container)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Container)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class ContainerCommon : OblivionMajorRecordCommon
    {
        public new static readonly ContainerCommon Instance = new ContainerCommon();

        public Container.Mask<bool> GetEqualsMask(
            IContainerGetter item,
            IContainerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Container.Mask<bool>(false);
            ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IContainerGetter item,
            IContainerGetter rhs,
            Container.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.OpenSound = object.Equals(item.OpenSound, rhs.OpenSound);
            ret.CloseSound = object.Equals(item.CloseSound, rhs.CloseSound);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IContainerGetter item,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IContainerGetter item,
            FileGeneration fg,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Container =>");
            }
            else
            {
                fg.AppendLine($"{name} (Container) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IContainerGetter item,
            FileGeneration fg,
            Container.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if ((printMask?.OpenSound ?? true)
                && item.OpenSound.TryGet(out var OpenSoundItem))
            {
                fg.AppendItem(OpenSoundItem, "OpenSound");
            }
            if ((printMask?.CloseSound ?? true)
                && item.CloseSound.TryGet(out var CloseSoundItem))
            {
                fg.AppendItem(CloseSoundItem, "CloseSound");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IContainerGetter item,
            Container.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.OpenSound.HasValue && checkMask.OpenSound.Value != (item.OpenSound.FormKey != null)) return false;
            if (checkMask.CloseSound.HasValue && checkMask.CloseSound.Value != (item.CloseSound.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IContainerGetter item,
            Container.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Script = (item.Script.FormKey != null);
            var ItemsItem = item.Items;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ContainerItem.Mask<bool>?>>?>(true, ItemsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, ContainerItem.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Flags = true;
            mask.Weight = true;
            mask.OpenSound = (item.OpenSound.FormKey != null);
            mask.CloseSound = (item.CloseSound.FormKey != null);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Container_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Container_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IContainerGetter? lhs,
            IContainerGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (!lhs.OpenSound.Equals(rhs.OpenSound)) return false;
            if (!lhs.CloseSound.Equals(rhs.CloseSound)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IContainerGetter?)lhs,
                rhs: rhs as IContainerGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IContainerGetter?)lhs,
                rhs: rhs as IContainerGetter);
        }
        
        public virtual int GetHashCode(IContainerGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                hash.Add(Scriptitem);
            }
            hash.Add(item.Items);
            hash.Add(item.Flags);
            hash.Add(item.Weight);
            if (item.OpenSound.TryGet(out var OpenSounditem))
            {
                hash.Add(OpenSounditem);
            }
            if (item.CloseSound.TryGet(out var CloseSounditem))
            {
                hash.Add(CloseSounditem);
            }
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IContainerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IContainerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Container.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IContainerGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            foreach (var item in obj.Items.SelectMany(f => f.Links))
            {
                yield return item;
            }
            yield return obj.OpenSound;
            yield return obj.CloseSound;
            yield break;
        }
        
        partial void PostDuplicate(Container obj, Container rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Container(getNextFormKey());
            ret.DeepCopyIn((Container)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Container)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class ContainerSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly ContainerSetterTranslationCommon Instance = new ContainerSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IContainerInternal item,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IContainer item,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Script) ?? true))
            {
                item.Script.FormKey = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.OpenSound) ?? true))
            {
                item.OpenSound.FormKey = rhs.OpenSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.CloseSound) ?? true))
            {
                item.CloseSound.FormKey = rhs.CloseSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IContainerInternal)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IContainer)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IContainerInternal)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IContainer)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Container DeepCopy(
            IContainerGetter item,
            Container.TranslationMask? copyMask = null)
        {
            Container ret = (Container)((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Container DeepCopy(
            IContainerGetter item,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? copyMask = null)
        {
            Container ret = (Container)((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Container DeepCopy(
            IContainerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Container ret = (Container)((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Container
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static Container_Registration Registration => Container_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ContainerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ContainerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ContainerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ContainerXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static ContainerXmlWriteTranslation Instance = new ContainerXmlWriteTranslation();

        public static void WriteToNodeXml(
            IContainerGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Container_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Container_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Container_FieldIndex.Model));
                }
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey.Value,
                    fieldIndex: (int)Container_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IContainerItemGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Container_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Container_FieldIndex.Items),
                    transl: (XElement subNode, IContainerItemGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ContainerItemXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if (item.DATADataTypeState.HasFlag(Container.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Container.ContainerFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Container_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)Container_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if ((item.OpenSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.OpenSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenSound),
                    item: item.OpenSound.FormKey.Value,
                    fieldIndex: (int)Container_FieldIndex.OpenSound,
                    errorMask: errorMask);
            }
            if ((item.CloseSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Container_FieldIndex.CloseSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloseSound),
                    item: item.CloseSound.FormKey.Value,
                    fieldIndex: (int)Container_FieldIndex.CloseSound,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Container_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Container.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Container_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IContainerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Container");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Container");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IContainerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IContainerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IContainerGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class ContainerXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static ContainerXmlCreateTranslation Instance = new ContainerXmlCreateTranslation();

        public static void FillPublicXml(
            IContainerInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ContainerXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IContainerInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Container_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Container_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Container_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)Container_FieldIndex.Script);
                    try
                    {
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    errorMask?.PushIndex((int)Container_FieldIndex.Items);
                    try
                    {
                        if (ListXmlTranslation<ContainerItem>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ContainerItem>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Container_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Container.ContainerFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Container.DATADataType.Has;
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)Container_FieldIndex.Weight);
                    try
                    {
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenSound":
                    errorMask?.PushIndex((int)Container_FieldIndex.OpenSound);
                    try
                    {
                        item.OpenSound.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloseSound":
                    errorMask?.PushIndex((int)Container_FieldIndex.CloseSound);
                    try
                    {
                        item.CloseSound.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Container_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Container.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ContainerXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IContainerGetter item,
            XElement node,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ContainerXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Container.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IContainerGetter item,
            string path,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IContainerGetter item,
            Stream stream,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ContainerBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static ContainerBinaryWriteTranslation Instance = new ContainerBinaryWriteTranslation();

        public static void WriteEmbedded(
            IContainerGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IContainerGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.SCRI_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IContainerItemGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IContainerItemGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ContainerItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
            if (item.DATADataTypeState.HasFlag(Container.DATADataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(Container_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Container.ContainerFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                }
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OpenSound,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.SNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CloseSound,
                header: recordTypeConverter.ConvertToCustom(Container_Registration.QNAM_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IContainerGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Container_Registration.CONT_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IContainerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IContainerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IContainerGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ContainerBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static ContainerBinaryCreateTranslation Instance = new ContainerBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ContainerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ContainerBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IContainerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static Container_Registration Registration => Container_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ContainerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ContainerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IContainerGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => ContainerCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => ContainerXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ContainerXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ContainerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ContainerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormLinkNullable<IScriptGetter>.Empty;
        #endregion
        public IReadOnlyList<IContainerItemGetter> Items { get; private set; } = ListExt.Empty<ContainerItemBinaryOverlay>();
        private int? _DATALocation;
        public Container.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Container.ContainerFlag Flags => _Flags_IsSet ? (Container.ContainerFlag)_data.Span.Slice(_FlagsLocation, 1)[0] : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x1;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Slice(_WeightLocation, 4)) : default;
        #endregion
        #region OpenSound
        private int? _OpenSoundLocation;
        public bool OpenSound_IsSet => _OpenSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundGetter> OpenSound => _OpenSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OpenSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundGetter>.Empty;
        #endregion
        #region CloseSound
        private int? _CloseSoundLocation;
        public bool CloseSound_IsSet => _CloseSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundGetter> CloseSound => _CloseSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CloseSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ContainerBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ContainerBinaryOverlay ContainerFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new ContainerBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryOverlaySetList<ContainerItemBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ContainerItemBinaryOverlay.ContainerItemFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Items);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Container.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.Weight);
                }
                case 0x4D414E53: // SNAM
                {
                    _OpenSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.OpenSound);
                }
                case 0x4D414E51: // QNAM
                {
                    _CloseSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Container_FieldIndex.CloseSound);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

