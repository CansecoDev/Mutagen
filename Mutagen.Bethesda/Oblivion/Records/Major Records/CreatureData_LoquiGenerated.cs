/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CreatureData :
        ICreatureData,
        ILoquiObjectSetter<CreatureData>,
        IEquatable<CreatureData>,
        IEqualsMask
    {
        #region Ctor
        public CreatureData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CreatureType
        public Creature.CreatureTypeEnum CreatureType { get; set; } = default;
        #endregion
        #region CombatSkill
        public Byte CombatSkill { get; set; } = default;
        #endregion
        #region MagicSkill
        public Byte MagicSkill { get; set; } = default;
        #endregion
        #region StealthSkill
        public Byte StealthSkill { get; set; } = default;
        #endregion
        #region SoulLevel
        public SoulLevel SoulLevel { get; set; } = default;
        #endregion
        #region Health
        public UInt32 Health { get; set; } = default;
        #endregion
        #region AttackDamage
        public UInt16 AttackDamage { get; set; } = default;
        #endregion
        #region Strength
        public Byte Strength { get; set; } = default;
        #endregion
        #region Intelligence
        public Byte Intelligence { get; set; } = default;
        #endregion
        #region Willpower
        public Byte Willpower { get; set; } = default;
        #endregion
        #region Agility
        public Byte Agility { get; set; } = default;
        #endregion
        #region Speed
        public Byte Speed { get; set; } = default;
        #endregion
        #region Endurance
        public Byte Endurance { get; set; } = default;
        #endregion
        #region Personality
        public Byte Personality { get; set; } = default;
        #endregion
        #region Luck
        public Byte Luck { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreatureDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICreatureDataGetter rhs)) return false;
            return ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(CreatureData obj)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CreatureDataCommon)((ICreatureDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CreatureDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CreatureDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static CreatureData CreateFromXml(
            XElement node,
            CreatureData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static CreatureData CreateFromXml(
            XElement node,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CreatureData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static CreatureData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new CreatureData();
            ((CreatureDataSetterCommon)((ICreatureDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static CreatureData CreateFromXml(
            string path,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CreatureData CreateFromXml(
            string path,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CreatureData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static CreatureData CreateFromXml(
            Stream stream,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static CreatureData CreateFromXml(
            Stream stream,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static CreatureData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.CreatureType = initialValue;
                this.CombatSkill = initialValue;
                this.MagicSkill = initialValue;
                this.StealthSkill = initialValue;
                this.SoulLevel = initialValue;
                this.Health = initialValue;
                this.AttackDamage = initialValue;
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
            }

            public Mask(
                TItem CreatureType,
                TItem CombatSkill,
                TItem MagicSkill,
                TItem StealthSkill,
                TItem SoulLevel,
                TItem Health,
                TItem AttackDamage,
                TItem Strength,
                TItem Intelligence,
                TItem Willpower,
                TItem Agility,
                TItem Speed,
                TItem Endurance,
                TItem Personality,
                TItem Luck)
            {
                this.CreatureType = CreatureType;
                this.CombatSkill = CombatSkill;
                this.MagicSkill = MagicSkill;
                this.StealthSkill = StealthSkill;
                this.SoulLevel = SoulLevel;
                this.Health = Health;
                this.AttackDamage = AttackDamage;
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem CreatureType;
            public TItem CombatSkill;
            public TItem MagicSkill;
            public TItem StealthSkill;
            public TItem SoulLevel;
            public TItem Health;
            public TItem AttackDamage;
            public TItem Strength;
            public TItem Intelligence;
            public TItem Willpower;
            public TItem Agility;
            public TItem Speed;
            public TItem Endurance;
            public TItem Personality;
            public TItem Luck;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.CreatureType, rhs.CreatureType)) return false;
                if (!object.Equals(this.CombatSkill, rhs.CombatSkill)) return false;
                if (!object.Equals(this.MagicSkill, rhs.MagicSkill)) return false;
                if (!object.Equals(this.StealthSkill, rhs.StealthSkill)) return false;
                if (!object.Equals(this.SoulLevel, rhs.SoulLevel)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.AttackDamage, rhs.AttackDamage)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CreatureType);
                hash.Add(this.CombatSkill);
                hash.Add(this.MagicSkill);
                hash.Add(this.StealthSkill);
                hash.Add(this.SoulLevel);
                hash.Add(this.Health);
                hash.Add(this.AttackDamage);
                hash.Add(this.Strength);
                hash.Add(this.Intelligence);
                hash.Add(this.Willpower);
                hash.Add(this.Agility);
                hash.Add(this.Speed);
                hash.Add(this.Endurance);
                hash.Add(this.Personality);
                hash.Add(this.Luck);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.CreatureType)) return false;
                if (!eval(this.CombatSkill)) return false;
                if (!eval(this.MagicSkill)) return false;
                if (!eval(this.StealthSkill)) return false;
                if (!eval(this.SoulLevel)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.AttackDamage)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.CreatureType)) return true;
                if (eval(this.CombatSkill)) return true;
                if (eval(this.MagicSkill)) return true;
                if (eval(this.StealthSkill)) return true;
                if (eval(this.SoulLevel)) return true;
                if (eval(this.Health)) return true;
                if (eval(this.AttackDamage)) return true;
                if (eval(this.Strength)) return true;
                if (eval(this.Intelligence)) return true;
                if (eval(this.Willpower)) return true;
                if (eval(this.Agility)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Endurance)) return true;
                if (eval(this.Personality)) return true;
                if (eval(this.Luck)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CreatureData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.CreatureType = eval(this.CreatureType);
                obj.CombatSkill = eval(this.CombatSkill);
                obj.MagicSkill = eval(this.MagicSkill);
                obj.StealthSkill = eval(this.StealthSkill);
                obj.SoulLevel = eval(this.SoulLevel);
                obj.Health = eval(this.Health);
                obj.AttackDamage = eval(this.AttackDamage);
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(CreatureData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, CreatureData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(CreatureData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.CreatureType ?? true)
                    {
                        fg.AppendItem(CreatureType, "CreatureType");
                    }
                    if (printMask?.CombatSkill ?? true)
                    {
                        fg.AppendItem(CombatSkill, "CombatSkill");
                    }
                    if (printMask?.MagicSkill ?? true)
                    {
                        fg.AppendItem(MagicSkill, "MagicSkill");
                    }
                    if (printMask?.StealthSkill ?? true)
                    {
                        fg.AppendItem(StealthSkill, "StealthSkill");
                    }
                    if (printMask?.SoulLevel ?? true)
                    {
                        fg.AppendItem(SoulLevel, "SoulLevel");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendItem(Health, "Health");
                    }
                    if (printMask?.AttackDamage ?? true)
                    {
                        fg.AppendItem(AttackDamage, "AttackDamage");
                    }
                    if (printMask?.Strength ?? true)
                    {
                        fg.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        fg.AppendItem(Intelligence, "Intelligence");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        fg.AppendItem(Willpower, "Willpower");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        fg.AppendItem(Agility, "Agility");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        fg.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        fg.AppendItem(Endurance, "Endurance");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        fg.AppendItem(Personality, "Personality");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        fg.AppendItem(Luck, "Luck");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? CreatureType;
            public Exception? CombatSkill;
            public Exception? MagicSkill;
            public Exception? StealthSkill;
            public Exception? SoulLevel;
            public Exception? Health;
            public Exception? AttackDamage;
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
                switch (enu)
                {
                    case CreatureData_FieldIndex.CreatureType:
                        return CreatureType;
                    case CreatureData_FieldIndex.CombatSkill:
                        return CombatSkill;
                    case CreatureData_FieldIndex.MagicSkill:
                        return MagicSkill;
                    case CreatureData_FieldIndex.StealthSkill:
                        return StealthSkill;
                    case CreatureData_FieldIndex.SoulLevel:
                        return SoulLevel;
                    case CreatureData_FieldIndex.Health:
                        return Health;
                    case CreatureData_FieldIndex.AttackDamage:
                        return AttackDamage;
                    case CreatureData_FieldIndex.Strength:
                        return Strength;
                    case CreatureData_FieldIndex.Intelligence:
                        return Intelligence;
                    case CreatureData_FieldIndex.Willpower:
                        return Willpower;
                    case CreatureData_FieldIndex.Agility:
                        return Agility;
                    case CreatureData_FieldIndex.Speed:
                        return Speed;
                    case CreatureData_FieldIndex.Endurance:
                        return Endurance;
                    case CreatureData_FieldIndex.Personality:
                        return Personality;
                    case CreatureData_FieldIndex.Luck:
                        return Luck;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
                switch (enu)
                {
                    case CreatureData_FieldIndex.CreatureType:
                        this.CreatureType = ex;
                        break;
                    case CreatureData_FieldIndex.CombatSkill:
                        this.CombatSkill = ex;
                        break;
                    case CreatureData_FieldIndex.MagicSkill:
                        this.MagicSkill = ex;
                        break;
                    case CreatureData_FieldIndex.StealthSkill:
                        this.StealthSkill = ex;
                        break;
                    case CreatureData_FieldIndex.SoulLevel:
                        this.SoulLevel = ex;
                        break;
                    case CreatureData_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case CreatureData_FieldIndex.AttackDamage:
                        this.AttackDamage = ex;
                        break;
                    case CreatureData_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case CreatureData_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case CreatureData_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case CreatureData_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case CreatureData_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case CreatureData_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case CreatureData_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case CreatureData_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
                switch (enu)
                {
                    case CreatureData_FieldIndex.CreatureType:
                        this.CreatureType = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.CombatSkill:
                        this.CombatSkill = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.MagicSkill:
                        this.MagicSkill = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.StealthSkill:
                        this.StealthSkill = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.SoulLevel:
                        this.SoulLevel = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.AttackDamage:
                        this.AttackDamage = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Intelligence:
                        this.Intelligence = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Willpower:
                        this.Willpower = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Agility:
                        this.Agility = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Endurance:
                        this.Endurance = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Personality:
                        this.Personality = (Exception?)obj;
                        break;
                    case CreatureData_FieldIndex.Luck:
                        this.Luck = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (CreatureType != null) return true;
                if (CombatSkill != null) return true;
                if (MagicSkill != null) return true;
                if (StealthSkill != null) return true;
                if (SoulLevel != null) return true;
                if (Health != null) return true;
                if (AttackDamage != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(CreatureType, "CreatureType");
                fg.AppendItem(CombatSkill, "CombatSkill");
                fg.AppendItem(MagicSkill, "MagicSkill");
                fg.AppendItem(StealthSkill, "StealthSkill");
                fg.AppendItem(SoulLevel, "SoulLevel");
                fg.AppendItem(Health, "Health");
                fg.AppendItem(AttackDamage, "AttackDamage");
                fg.AppendItem(Strength, "Strength");
                fg.AppendItem(Intelligence, "Intelligence");
                fg.AppendItem(Willpower, "Willpower");
                fg.AppendItem(Agility, "Agility");
                fg.AppendItem(Speed, "Speed");
                fg.AppendItem(Endurance, "Endurance");
                fg.AppendItem(Personality, "Personality");
                fg.AppendItem(Luck, "Luck");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CreatureType = this.CreatureType.Combine(rhs.CreatureType);
                ret.CombatSkill = this.CombatSkill.Combine(rhs.CombatSkill);
                ret.MagicSkill = this.MagicSkill.Combine(rhs.MagicSkill);
                ret.StealthSkill = this.StealthSkill.Combine(rhs.StealthSkill);
                ret.SoulLevel = this.SoulLevel.Combine(rhs.SoulLevel);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.AttackDamage = this.AttackDamage.Combine(rhs.AttackDamage);
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool CreatureType;
            public bool CombatSkill;
            public bool MagicSkill;
            public bool StealthSkill;
            public bool SoulLevel;
            public bool Health;
            public bool AttackDamage;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.CreatureType = defaultOn;
                this.CombatSkill = defaultOn;
                this.MagicSkill = defaultOn;
                this.StealthSkill = defaultOn;
                this.SoulLevel = defaultOn;
                this.Health = defaultOn;
                this.AttackDamage = defaultOn;
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((CreatureType, null));
                ret.Add((CombatSkill, null));
                ret.Add((MagicSkill, null));
                ret.Add((StealthSkill, null));
                ret.Add((SoulLevel, null));
                ret.Add((Health, null));
                ret.Add((AttackDamage, null));
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = CreatureData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static CreatureData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static CreatureData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CreatureData();
            ((CreatureDataSetterCommon)((ICreatureDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICreatureDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CreatureData GetNew()
        {
            return new CreatureData();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreatureData :
        ICreatureDataGetter,
        ILoquiObjectSetter<ICreatureData>
    {
        new Creature.CreatureTypeEnum CreatureType { get; set; }
        new Byte CombatSkill { get; set; }
        new Byte MagicSkill { get; set; }
        new Byte StealthSkill { get; set; }
        new SoulLevel SoulLevel { get; set; }
        new UInt32 Health { get; set; }
        new UInt16 AttackDamage { get; set; }
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
    }

    public partial interface ICreatureDataGetter :
        ILoquiObject,
        ILoquiObject<ICreatureDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Creature.CreatureTypeEnum CreatureType { get; }
        Byte CombatSkill { get; }
        Byte MagicSkill { get; }
        Byte StealthSkill { get; }
        SoulLevel SoulLevel { get; }
        UInt32 Health { get; }
        UInt16 AttackDamage { get; }
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreatureDataMixIn
    {
        public static void Clear(this ICreatureData item)
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CreatureData.Mask<bool> GetEqualsMask(
            this ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICreatureDataGetter item,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICreatureDataGetter item,
            FileGeneration fg,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICreatureDataGetter item,
            CreatureData.Mask<bool?> checkMask)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static CreatureData.Mask<bool> GetHasBeenSetMask(this ICreatureDataGetter item)
        {
            var ret = new CreatureData.Mask<bool>(false);
            ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICreatureDataGetter item,
            ICreatureDataGetter rhs)
        {
            return ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs,
            CreatureData.TranslationMask? copyMask = null)
        {
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = CreatureData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureData lhs,
            ICreatureDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static CreatureData DeepCopy(
            this ICreatureDataGetter item,
            CreatureData.TranslationMask? copyMask = null)
        {
            return ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CreatureData DeepCopy(
            this ICreatureDataGetter item,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? copyMask = null)
        {
            return ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CreatureData DeepCopy(
            this ICreatureDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureDataSetterTranslationCommon)((ICreatureDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICreatureData item,
            XElement node,
            CreatureData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICreatureData item,
            XElement node,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CreatureData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            string path,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            string path,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            string path,
            ErrorMaskBuilder? errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            Stream stream,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            Stream stream,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            CreatureData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICreatureData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICreatureData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureDataSetterCommon)((ICreatureDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum CreatureData_FieldIndex
    {
        CreatureType = 0,
        CombatSkill = 1,
        MagicSkill = 2,
        StealthSkill = 3,
        SoulLevel = 4,
        Health = 5,
        AttackDamage = 6,
        Strength = 7,
        Intelligence = 8,
        Willpower = 9,
        Agility = 10,
        Speed = 11,
        Endurance = 12,
        Personality = 13,
        Luck = 14,
    }
    #endregion

    #region Registration
    public partial class CreatureData_Registration : ILoquiRegistration
    {
        public static readonly CreatureData_Registration Instance = new CreatureData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 185,
            version: 0);

        public const string GUID = "20d1cf07-b67d-4565-835c-0dc6b3249a60";

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(CreatureData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreatureData.ErrorMask);

        public static readonly Type ClassType = typeof(CreatureData);

        public static readonly Type GetterType = typeof(ICreatureDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreatureData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.CreatureData";

        public const string Name = "CreatureData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CREATURETYPE":
                    return (ushort)CreatureData_FieldIndex.CreatureType;
                case "COMBATSKILL":
                    return (ushort)CreatureData_FieldIndex.CombatSkill;
                case "MAGICSKILL":
                    return (ushort)CreatureData_FieldIndex.MagicSkill;
                case "STEALTHSKILL":
                    return (ushort)CreatureData_FieldIndex.StealthSkill;
                case "SOULLEVEL":
                    return (ushort)CreatureData_FieldIndex.SoulLevel;
                case "HEALTH":
                    return (ushort)CreatureData_FieldIndex.Health;
                case "ATTACKDAMAGE":
                    return (ushort)CreatureData_FieldIndex.AttackDamage;
                case "STRENGTH":
                    return (ushort)CreatureData_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)CreatureData_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)CreatureData_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)CreatureData_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)CreatureData_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)CreatureData_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)CreatureData_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)CreatureData_FieldIndex.Luck;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                case CreatureData_FieldIndex.CombatSkill:
                case CreatureData_FieldIndex.MagicSkill:
                case CreatureData_FieldIndex.StealthSkill:
                case CreatureData_FieldIndex.SoulLevel:
                case CreatureData_FieldIndex.Health:
                case CreatureData_FieldIndex.AttackDamage:
                case CreatureData_FieldIndex.Strength:
                case CreatureData_FieldIndex.Intelligence:
                case CreatureData_FieldIndex.Willpower:
                case CreatureData_FieldIndex.Agility:
                case CreatureData_FieldIndex.Speed:
                case CreatureData_FieldIndex.Endurance:
                case CreatureData_FieldIndex.Personality:
                case CreatureData_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                case CreatureData_FieldIndex.CombatSkill:
                case CreatureData_FieldIndex.MagicSkill:
                case CreatureData_FieldIndex.StealthSkill:
                case CreatureData_FieldIndex.SoulLevel:
                case CreatureData_FieldIndex.Health:
                case CreatureData_FieldIndex.AttackDamage:
                case CreatureData_FieldIndex.Strength:
                case CreatureData_FieldIndex.Intelligence:
                case CreatureData_FieldIndex.Willpower:
                case CreatureData_FieldIndex.Agility:
                case CreatureData_FieldIndex.Speed:
                case CreatureData_FieldIndex.Endurance:
                case CreatureData_FieldIndex.Personality:
                case CreatureData_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                case CreatureData_FieldIndex.CombatSkill:
                case CreatureData_FieldIndex.MagicSkill:
                case CreatureData_FieldIndex.StealthSkill:
                case CreatureData_FieldIndex.SoulLevel:
                case CreatureData_FieldIndex.Health:
                case CreatureData_FieldIndex.AttackDamage:
                case CreatureData_FieldIndex.Strength:
                case CreatureData_FieldIndex.Intelligence:
                case CreatureData_FieldIndex.Willpower:
                case CreatureData_FieldIndex.Agility:
                case CreatureData_FieldIndex.Speed:
                case CreatureData_FieldIndex.Endurance:
                case CreatureData_FieldIndex.Personality:
                case CreatureData_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                    return "CreatureType";
                case CreatureData_FieldIndex.CombatSkill:
                    return "CombatSkill";
                case CreatureData_FieldIndex.MagicSkill:
                    return "MagicSkill";
                case CreatureData_FieldIndex.StealthSkill:
                    return "StealthSkill";
                case CreatureData_FieldIndex.SoulLevel:
                    return "SoulLevel";
                case CreatureData_FieldIndex.Health:
                    return "Health";
                case CreatureData_FieldIndex.AttackDamage:
                    return "AttackDamage";
                case CreatureData_FieldIndex.Strength:
                    return "Strength";
                case CreatureData_FieldIndex.Intelligence:
                    return "Intelligence";
                case CreatureData_FieldIndex.Willpower:
                    return "Willpower";
                case CreatureData_FieldIndex.Agility:
                    return "Agility";
                case CreatureData_FieldIndex.Speed:
                    return "Speed";
                case CreatureData_FieldIndex.Endurance:
                    return "Endurance";
                case CreatureData_FieldIndex.Personality:
                    return "Personality";
                case CreatureData_FieldIndex.Luck:
                    return "Luck";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                case CreatureData_FieldIndex.CombatSkill:
                case CreatureData_FieldIndex.MagicSkill:
                case CreatureData_FieldIndex.StealthSkill:
                case CreatureData_FieldIndex.SoulLevel:
                case CreatureData_FieldIndex.Health:
                case CreatureData_FieldIndex.AttackDamage:
                case CreatureData_FieldIndex.Strength:
                case CreatureData_FieldIndex.Intelligence:
                case CreatureData_FieldIndex.Willpower:
                case CreatureData_FieldIndex.Agility:
                case CreatureData_FieldIndex.Speed:
                case CreatureData_FieldIndex.Endurance:
                case CreatureData_FieldIndex.Personality:
                case CreatureData_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                case CreatureData_FieldIndex.CombatSkill:
                case CreatureData_FieldIndex.MagicSkill:
                case CreatureData_FieldIndex.StealthSkill:
                case CreatureData_FieldIndex.SoulLevel:
                case CreatureData_FieldIndex.Health:
                case CreatureData_FieldIndex.AttackDamage:
                case CreatureData_FieldIndex.Strength:
                case CreatureData_FieldIndex.Intelligence:
                case CreatureData_FieldIndex.Willpower:
                case CreatureData_FieldIndex.Agility:
                case CreatureData_FieldIndex.Speed:
                case CreatureData_FieldIndex.Endurance:
                case CreatureData_FieldIndex.Personality:
                case CreatureData_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            CreatureData_FieldIndex enu = (CreatureData_FieldIndex)index;
            switch (enu)
            {
                case CreatureData_FieldIndex.CreatureType:
                    return typeof(Creature.CreatureTypeEnum);
                case CreatureData_FieldIndex.CombatSkill:
                    return typeof(Byte);
                case CreatureData_FieldIndex.MagicSkill:
                    return typeof(Byte);
                case CreatureData_FieldIndex.StealthSkill:
                    return typeof(Byte);
                case CreatureData_FieldIndex.SoulLevel:
                    return typeof(SoulLevel);
                case CreatureData_FieldIndex.Health:
                    return typeof(UInt32);
                case CreatureData_FieldIndex.AttackDamage:
                    return typeof(UInt16);
                case CreatureData_FieldIndex.Strength:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Intelligence:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Willpower:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Agility:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Speed:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Endurance:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Personality:
                    return typeof(Byte);
                case CreatureData_FieldIndex.Luck:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CreatureDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 15;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(CreatureDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CreatureDataSetterCommon
    {
        public static readonly CreatureDataSetterCommon Instance = new CreatureDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureData item)
        {
            ClearPartial();
            item.CreatureType = default;
            item.CombatSkill = default;
            item.MagicSkill = default;
            item.StealthSkill = default;
            item.SoulLevel = default;
            item.Health = default;
            item.AttackDamage = default;
            item.Strength = default;
            item.Intelligence = default;
            item.Willpower = default;
            item.Agility = default;
            item.Speed = default;
            item.Endurance = default;
            item.Personality = default;
            item.Luck = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ICreatureData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ICreatureData item,
            MutagenFrame frame)
        {
            item.CreatureType = EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.CombatSkill = frame.ReadUInt8();
            item.MagicSkill = frame.ReadUInt8();
            item.StealthSkill = frame.ReadUInt8();
            item.SoulLevel = EnumBinaryTranslation<SoulLevel>.Instance.Parse(frame: frame.SpawnWithLength(2));
            item.Health = frame.ReadUInt32();
            item.AttackDamage = frame.ReadUInt16();
            item.Strength = frame.ReadUInt8();
            item.Intelligence = frame.ReadUInt8();
            item.Willpower = frame.ReadUInt8();
            item.Agility = frame.ReadUInt8();
            item.Speed = frame.ReadUInt8();
            item.Endurance = frame.ReadUInt8();
            item.Personality = frame.ReadUInt8();
            item.Luck = frame.ReadUInt8();
        }
        
        public virtual void CopyInFromBinary(
            ICreatureData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(CreatureData_Registration.DATA_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class CreatureDataCommon
    {
        public static readonly CreatureDataCommon Instance = new CreatureDataCommon();

        public CreatureData.Mask<bool> GetEqualsMask(
            ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CreatureData.Mask<bool>(false);
            ((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureDataGetter item,
            ICreatureDataGetter rhs,
            CreatureData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.CreatureType = item.CreatureType == rhs.CreatureType;
            ret.CombatSkill = item.CombatSkill == rhs.CombatSkill;
            ret.MagicSkill = item.MagicSkill == rhs.MagicSkill;
            ret.StealthSkill = item.StealthSkill == rhs.StealthSkill;
            ret.SoulLevel = item.SoulLevel == rhs.SoulLevel;
            ret.Health = item.Health == rhs.Health;
            ret.AttackDamage = item.AttackDamage == rhs.AttackDamage;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }
        
        public string ToString(
            ICreatureDataGetter item,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICreatureDataGetter item,
            FileGeneration fg,
            string? name = null,
            CreatureData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"CreatureData =>");
            }
            else
            {
                fg.AppendLine($"{name} (CreatureData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICreatureDataGetter item,
            FileGeneration fg,
            CreatureData.Mask<bool>? printMask = null)
        {
            if (printMask?.CreatureType ?? true)
            {
                fg.AppendItem(item.CreatureType, "CreatureType");
            }
            if (printMask?.CombatSkill ?? true)
            {
                fg.AppendItem(item.CombatSkill, "CombatSkill");
            }
            if (printMask?.MagicSkill ?? true)
            {
                fg.AppendItem(item.MagicSkill, "MagicSkill");
            }
            if (printMask?.StealthSkill ?? true)
            {
                fg.AppendItem(item.StealthSkill, "StealthSkill");
            }
            if (printMask?.SoulLevel ?? true)
            {
                fg.AppendItem(item.SoulLevel, "SoulLevel");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendItem(item.Health, "Health");
            }
            if (printMask?.AttackDamage ?? true)
            {
                fg.AppendItem(item.AttackDamage, "AttackDamage");
            }
            if (printMask?.Strength ?? true)
            {
                fg.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendItem(item.Intelligence, "Intelligence");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendItem(item.Willpower, "Willpower");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendItem(item.Agility, "Agility");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendItem(item.Endurance, "Endurance");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendItem(item.Personality, "Personality");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendItem(item.Luck, "Luck");
            }
        }
        
        public bool HasBeenSet(
            ICreatureDataGetter item,
            CreatureData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ICreatureDataGetter item,
            CreatureData.Mask<bool> mask)
        {
            mask.CreatureType = true;
            mask.CombatSkill = true;
            mask.MagicSkill = true;
            mask.StealthSkill = true;
            mask.SoulLevel = true;
            mask.Health = true;
            mask.AttackDamage = true;
            mask.Strength = true;
            mask.Intelligence = true;
            mask.Willpower = true;
            mask.Agility = true;
            mask.Speed = true;
            mask.Endurance = true;
            mask.Personality = true;
            mask.Luck = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureDataGetter? lhs,
            ICreatureDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.CreatureType != rhs.CreatureType) return false;
            if (lhs.CombatSkill != rhs.CombatSkill) return false;
            if (lhs.MagicSkill != rhs.MagicSkill) return false;
            if (lhs.StealthSkill != rhs.StealthSkill) return false;
            if (lhs.SoulLevel != rhs.SoulLevel) return false;
            if (lhs.Health != rhs.Health) return false;
            if (lhs.AttackDamage != rhs.AttackDamage) return false;
            if (lhs.Strength != rhs.Strength) return false;
            if (lhs.Intelligence != rhs.Intelligence) return false;
            if (lhs.Willpower != rhs.Willpower) return false;
            if (lhs.Agility != rhs.Agility) return false;
            if (lhs.Speed != rhs.Speed) return false;
            if (lhs.Endurance != rhs.Endurance) return false;
            if (lhs.Personality != rhs.Personality) return false;
            if (lhs.Luck != rhs.Luck) return false;
            return true;
        }
        
        public virtual int GetHashCode(ICreatureDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CreatureType);
            hash.Add(item.CombatSkill);
            hash.Add(item.MagicSkill);
            hash.Add(item.StealthSkill);
            hash.Add(item.SoulLevel);
            hash.Add(item.Health);
            hash.Add(item.AttackDamage);
            hash.Add(item.Strength);
            hash.Add(item.Intelligence);
            hash.Add(item.Willpower);
            hash.Add(item.Agility);
            hash.Add(item.Speed);
            hash.Add(item.Endurance);
            hash.Add(item.Personality);
            hash.Add(item.Luck);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CreatureData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ICreatureDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class CreatureDataSetterTranslationCommon
    {
        public static readonly CreatureDataSetterTranslationCommon Instance = new CreatureDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICreatureData item,
            ICreatureDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.CreatureType) ?? true))
            {
                item.CreatureType = rhs.CreatureType;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.CombatSkill) ?? true))
            {
                item.CombatSkill = rhs.CombatSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.MagicSkill) ?? true))
            {
                item.MagicSkill = rhs.MagicSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.StealthSkill) ?? true))
            {
                item.StealthSkill = rhs.StealthSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.SoulLevel) ?? true))
            {
                item.SoulLevel = rhs.SoulLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.AttackDamage) ?? true))
            {
                item.AttackDamage = rhs.AttackDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
        }
        
        #endregion
        
        public CreatureData DeepCopy(
            ICreatureDataGetter item,
            CreatureData.TranslationMask? copyMask = null)
        {
            CreatureData ret = (CreatureData)((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public CreatureData DeepCopy(
            ICreatureDataGetter item,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? copyMask = null)
        {
            CreatureData ret = (CreatureData)((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public CreatureData DeepCopy(
            ICreatureDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CreatureData ret = (CreatureData)((CreatureDataCommon)((ICreatureDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureData_Registration.Instance;
        public static CreatureData_Registration Registration => CreatureData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CreatureDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static CreatureDataXmlWriteTranslation Instance = new CreatureDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICreatureDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.CreatureType) ?? true))
            {
                EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.CreatureType),
                    item: item.CreatureType,
                    fieldIndex: (int)CreatureData_FieldIndex.CreatureType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.CombatSkill) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatSkill),
                    item: item.CombatSkill,
                    fieldIndex: (int)CreatureData_FieldIndex.CombatSkill,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.MagicSkill) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MagicSkill),
                    item: item.MagicSkill,
                    fieldIndex: (int)CreatureData_FieldIndex.MagicSkill,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.StealthSkill) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.StealthSkill),
                    item: item.StealthSkill,
                    fieldIndex: (int)CreatureData_FieldIndex.StealthSkill,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.SoulLevel) ?? true))
            {
                EnumXmlTranslation<SoulLevel>.Instance.Write(
                    node: node,
                    name: nameof(item.SoulLevel),
                    item: item.SoulLevel,
                    fieldIndex: (int)CreatureData_FieldIndex.SoulLevel,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Health) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Health),
                    item: item.Health,
                    fieldIndex: (int)CreatureData_FieldIndex.Health,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.AttackDamage) ?? true))
            {
                UInt16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackDamage),
                    item: item.AttackDamage,
                    fieldIndex: (int)CreatureData_FieldIndex.AttackDamage,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Strength) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Strength),
                    item: item.Strength,
                    fieldIndex: (int)CreatureData_FieldIndex.Strength,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Intelligence) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Intelligence),
                    item: item.Intelligence,
                    fieldIndex: (int)CreatureData_FieldIndex.Intelligence,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Willpower) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Willpower),
                    item: item.Willpower,
                    fieldIndex: (int)CreatureData_FieldIndex.Willpower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Agility) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Agility),
                    item: item.Agility,
                    fieldIndex: (int)CreatureData_FieldIndex.Agility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Speed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Speed),
                    item: item.Speed,
                    fieldIndex: (int)CreatureData_FieldIndex.Speed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Endurance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Endurance),
                    item: item.Endurance,
                    fieldIndex: (int)CreatureData_FieldIndex.Endurance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Personality) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Personality),
                    item: item.Personality,
                    fieldIndex: (int)CreatureData_FieldIndex.Personality,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)CreatureData_FieldIndex.Luck) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Luck),
                    item: item.Luck,
                    fieldIndex: (int)CreatureData_FieldIndex.Luck,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICreatureDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.CreatureData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.CreatureData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ICreatureDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ICreatureDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class CreatureDataXmlCreateTranslation
    {
        public readonly static CreatureDataXmlCreateTranslation Instance = new CreatureDataXmlCreateTranslation();

        public static void FillPublicXml(
            ICreatureData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICreatureData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "CreatureType":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.CreatureType);
                    try
                    {
                        item.CreatureType = EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatSkill":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.CombatSkill);
                    try
                    {
                        item.CombatSkill = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSkill":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.MagicSkill);
                    try
                    {
                        item.MagicSkill = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StealthSkill":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.StealthSkill);
                    try
                    {
                        item.StealthSkill = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulLevel":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.SoulLevel);
                    try
                    {
                        item.SoulLevel = EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Health);
                    try
                    {
                        item.Health = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackDamage":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.AttackDamage);
                    try
                    {
                        item.AttackDamage = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Strength":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Strength);
                    try
                    {
                        item.Strength = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Intelligence);
                    try
                    {
                        item.Intelligence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Willpower);
                    try
                    {
                        item.Willpower = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Agility);
                    try
                    {
                        item.Agility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Speed);
                    try
                    {
                        item.Speed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Endurance);
                    try
                    {
                        item.Endurance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Personality);
                    try
                    {
                        item.Personality = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    errorMask?.PushIndex((int)CreatureData_FieldIndex.Luck);
                    try
                    {
                        item.Luck = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CreatureDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICreatureDataGetter item,
            XElement node,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = CreatureData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            string path,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            Stream stream,
            out CreatureData.ErrorMask errorMask,
            CreatureData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((CreatureDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            XElement node,
            string? name = null,
            CreatureData.TranslationMask? translationMask = null)
        {
            ((CreatureDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CreatureDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICreatureDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((CreatureDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static CreatureDataBinaryWriteTranslation Instance = new CreatureDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICreatureDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                writer,
                item.CreatureType,
                length: 1);
            writer.Write(item.CombatSkill);
            writer.Write(item.MagicSkill);
            writer.Write(item.StealthSkill);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.Write(
                writer,
                item.SoulLevel,
                length: 2);
            writer.Write(item.Health);
            writer.Write(item.AttackDamage);
            writer.Write(item.Strength);
            writer.Write(item.Intelligence);
            writer.Write(item.Willpower);
            writer.Write(item.Agility);
            writer.Write(item.Speed);
            writer.Write(item.Endurance);
            writer.Write(item.Personality);
            writer.Write(item.Luck);
        }

        public void Write(
            MutagenWriter writer,
            ICreatureDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(CreatureData_Registration.DATA_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CreatureDataBinaryCreateTranslation
    {
        public readonly static CreatureDataBinaryCreateTranslation Instance = new CreatureDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICreatureDataGetter item,
            MutagenWriter writer)
        {
            ((CreatureDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureDataBinaryOverlay :
        BinaryOverlay,
        ICreatureDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureData_Registration.Instance;
        public static CreatureData_Registration Registration => CreatureData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICreatureDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICreatureDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICreatureDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => CreatureDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CreatureDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Creature.CreatureTypeEnum CreatureType => (Creature.CreatureTypeEnum)_data.Span.Slice(0, 1)[0];
        public Byte CombatSkill => _data.Span[1];
        public Byte MagicSkill => _data.Span[2];
        public Byte StealthSkill => _data.Span[3];
        public SoulLevel SoulLevel => (SoulLevel)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(4, 2));
        public UInt32 Health => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(6, 4));
        public UInt16 AttackDamage => BinaryPrimitives.ReadUInt16LittleEndian(_data.Slice(10, 2));
        public Byte Strength => _data.Span[12];
        public Byte Intelligence => _data.Span[13];
        public Byte Willpower => _data.Span[14];
        public Byte Agility => _data.Span[15];
        public Byte Speed => _data.Span[16];
        public Byte Endurance => _data.Span[17];
        public Byte Personality => _data.Span[18];
        public Byte Luck => _data.Span[19];
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CreatureDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CreatureDataBinaryOverlay CreatureDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new CreatureDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x14 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

