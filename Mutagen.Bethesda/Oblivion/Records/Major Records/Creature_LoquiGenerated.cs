/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Creature :
        ANpc,
        ICreatureInternal,
        ILoquiObjectSetter<Creature>,
        IEquatable<Creature>,
        IEqualsMask
    {
        #region Ctor
        protected Creature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ICreatureGetter.Model => this.Model;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ItemEntry> _Items = new ExtendedList<ItemEntry>();
        public ExtendedList<ItemEntry> Items
        {
            get => this._Items;
            protected set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IItemEntryGetter> ICreatureGetter.Items => _Items;
        #endregion

        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ASpell>> _Spells = new ExtendedList<IFormLink<ASpell>>();
        public ExtendedList<IFormLink<ASpell>> Spells
        {
            get => this._Spells;
            protected set => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IASpellGetter>> ICreatureGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Models
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Models;
        public ExtendedList<String>? Models
        {
            get => this._Models;
            set => this._Models = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? ICreatureGetter.Models => _Models;
        #endregion

        #endregion
        #region NIFT
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _NIFT;
        public Byte[]? NIFT
        {
            get => this._NIFT;
            set => this._NIFT = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICreatureGetter.NIFT => this.NIFT;
        #endregion
        #region Configuration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreatureConfiguration? _Configuration;
        public CreatureConfiguration? Configuration
        {
            get => _Configuration;
            set => _Configuration = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreatureConfigurationGetter? ICreatureGetter.Configuration => this.Configuration;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            protected set => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> ICreatureGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public FormLinkNullable<AItem> DeathItem { get; set; } = new FormLinkNullable<AItem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IAItemGetter> ICreatureGetter.DeathItem => this.DeathItem;
        #endregion
        #region Script
        public FormLinkNullable<Script> Script { get; set; } = new FormLinkNullable<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IScriptGetter> ICreatureGetter.Script => this.Script;
        #endregion
        #region AIData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreatureAIData? _AIData;
        public CreatureAIData? AIData
        {
            get => _AIData;
            set => _AIData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreatureAIDataGetter? ICreatureGetter.AIData => this.AIData;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<AIPackage>> _AIPackages = new ExtendedList<IFormLink<AIPackage>>();
        public ExtendedList<IFormLink<AIPackage>> AIPackages
        {
            get => this._AIPackages;
            protected set => this._AIPackages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IAIPackageGetter>> ICreatureGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Animations;
        public ExtendedList<String>? Animations
        {
            get => this._Animations;
            set => this._Animations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? ICreatureGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreatureData? _Data;
        public CreatureData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreatureDataGetter? ICreatureGetter.Data => this.Data;
        #endregion
        #region AttackReach
        public Byte? AttackReach { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ICreatureGetter.AttackReach => this.AttackReach;
        #endregion
        #region CombatStyle
        public FormLinkNullable<CombatStyle> CombatStyle { get; set; } = new FormLinkNullable<CombatStyle>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ICombatStyleGetter> ICreatureGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region TurningSpeed
        public Single? TurningSpeed { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.TurningSpeed => this.TurningSpeed;
        #endregion
        #region BaseScale
        public Single? BaseScale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.BaseScale => this.BaseScale;
        #endregion
        #region FootWeight
        public Single? FootWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.FootWeight => this.FootWeight;
        #endregion
        #region BloodSpray
        public String? BloodSpray { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.BloodSpray => this.BloodSpray;
        #endregion
        #region BloodDecal
        public String? BloodDecal { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.BloodDecal => this.BloodDecal;
        #endregion
        #region InheritsSoundFrom
        public FormLinkNullable<Creature> InheritsSoundFrom { get; set; } = new FormLinkNullable<Creature>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<ICreatureGetter> ICreatureGetter.InheritsSoundFrom => this.InheritsSoundFrom;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<CreatureSound> _Sounds = new ExtendedList<CreatureSound>();
        public ExtendedList<CreatureSound> Sounds
        {
            get => this._Sounds;
            protected set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICreatureSoundGetter> ICreatureGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICreatureGetter rhs)) return false;
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Creature obj)
        {
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Creature CreateFromXml(
            XElement node,
            Creature.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Creature CreateFromXml(
            XElement node,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Creature CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Creature();
            ((CreatureSetterCommon)((ICreatureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Creature CreateFromXml(
            string path,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            string path,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Creature CreateFromXml(
            Stream stream,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            Stream stream,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANpc.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Models = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.NIFT = initialValue;
                this.Configuration = new MaskItem<TItem, CreatureConfiguration.Mask<TItem>?>(initialValue, new CreatureConfiguration.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Script = initialValue;
                this.AIData = new MaskItem<TItem, CreatureAIData.Mask<TItem>?>(initialValue, new CreatureAIData.Mask<TItem>(initialValue));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, CreatureData.Mask<TItem>?>(initialValue, new CreatureData.Mask<TItem>(initialValue));
                this.AttackReach = initialValue;
                this.CombatStyle = initialValue;
                this.TurningSpeed = initialValue;
                this.BaseScale = initialValue;
                this.FootWeight = initialValue;
                this.BloodSpray = initialValue;
                this.BloodDecal = initialValue;
                this.InheritsSoundFrom = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Items,
                TItem Spells,
                TItem Models,
                TItem NIFT,
                TItem Configuration,
                TItem Factions,
                TItem DeathItem,
                TItem Script,
                TItem AIData,
                TItem AIPackages,
                TItem Animations,
                TItem Data,
                TItem AttackReach,
                TItem CombatStyle,
                TItem TurningSpeed,
                TItem BaseScale,
                TItem FootWeight,
                TItem BloodSpray,
                TItem BloodDecal,
                TItem InheritsSoundFrom,
                TItem Sounds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Models = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Models, Enumerable.Empty<(int Index, TItem Value)>());
                this.NIFT = NIFT;
                this.Configuration = new MaskItem<TItem, CreatureConfiguration.Mask<TItem>?>(Configuration, new CreatureConfiguration.Mask<TItem>(Configuration));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Script = Script;
                this.AIData = new MaskItem<TItem, CreatureAIData.Mask<TItem>?>(AIData, new CreatureAIData.Mask<TItem>(AIData));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AIPackages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Animations, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, CreatureData.Mask<TItem>?>(Data, new CreatureData.Mask<TItem>(Data));
                this.AttackReach = AttackReach;
                this.CombatStyle = CombatStyle;
                this.TurningSpeed = TurningSpeed;
                this.BaseScale = BaseScale;
                this.FootWeight = FootWeight;
                this.BloodSpray = BloodSpray;
                this.BloodDecal = BloodDecal;
                this.InheritsSoundFrom = InheritsSoundFrom;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Models;
            public TItem NIFT;
            public MaskItem<TItem, CreatureConfiguration.Mask<TItem>?>? Configuration { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Script;
            public MaskItem<TItem, CreatureAIData.Mask<TItem>?>? AIData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AIPackages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Animations;
            public MaskItem<TItem, CreatureData.Mask<TItem>?>? Data { get; set; }
            public TItem AttackReach;
            public TItem CombatStyle;
            public TItem TurningSpeed;
            public TItem BaseScale;
            public TItem FootWeight;
            public TItem BloodSpray;
            public TItem BloodDecal;
            public TItem InheritsSoundFrom;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>? Sounds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Models, rhs.Models)) return false;
                if (!object.Equals(this.NIFT, rhs.NIFT)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.AIData, rhs.AIData)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.AttackReach, rhs.AttackReach)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.TurningSpeed, rhs.TurningSpeed)) return false;
                if (!object.Equals(this.BaseScale, rhs.BaseScale)) return false;
                if (!object.Equals(this.FootWeight, rhs.FootWeight)) return false;
                if (!object.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
                if (!object.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
                if (!object.Equals(this.InheritsSoundFrom, rhs.InheritsSoundFrom)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Items);
                hash.Add(this.Spells);
                hash.Add(this.Models);
                hash.Add(this.NIFT);
                hash.Add(this.Configuration);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Script);
                hash.Add(this.AIData);
                hash.Add(this.AIPackages);
                hash.Add(this.Animations);
                hash.Add(this.Data);
                hash.Add(this.AttackReach);
                hash.Add(this.CombatStyle);
                hash.Add(this.TurningSpeed);
                hash.Add(this.BaseScale);
                hash.Add(this.FootWeight);
                hash.Add(this.BloodSpray);
                hash.Add(this.BloodDecal);
                hash.Add(this.InheritsSoundFrom);
                hash.Add(this.Sounds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Models != null)
                {
                    if (!eval(this.Models.Overall)) return false;
                    if (this.Models.Specific != null)
                    {
                        foreach (var item in this.Models.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.NIFT)) return false;
                if (Configuration != null)
                {
                    if (!eval(this.Configuration.Overall)) return false;
                    if (this.Configuration.Specific != null && !this.Configuration.Specific.All(eval)) return false;
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Script)) return false;
                if (AIData != null)
                {
                    if (!eval(this.AIData.Overall)) return false;
                    if (this.AIData.Specific != null && !this.AIData.Specific.All(eval)) return false;
                }
                if (this.AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.AttackReach)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.TurningSpeed)) return false;
                if (!eval(this.BaseScale)) return false;
                if (!eval(this.FootWeight)) return false;
                if (!eval(this.BloodSpray)) return false;
                if (!eval(this.BloodDecal)) return false;
                if (!eval(this.InheritsSoundFrom)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Models != null)
                {
                    if (eval(this.Models.Overall)) return true;
                    if (this.Models.Specific != null)
                    {
                        foreach (var item in this.Models.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.NIFT)) return true;
                if (Configuration != null)
                {
                    if (eval(this.Configuration.Overall)) return true;
                    if (this.Configuration.Specific != null && this.Configuration.Specific.Any(eval)) return true;
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Script)) return true;
                if (AIData != null)
                {
                    if (eval(this.AIData.Overall)) return true;
                    if (this.AIData.Specific != null && this.AIData.Specific.Any(eval)) return true;
                }
                if (this.AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (eval(this.Animations.Overall)) return true;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.AttackReach)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.TurningSpeed)) return true;
                if (eval(this.BaseScale)) return true;
                if (eval(this.FootWeight)) return true;
                if (eval(this.BloodSpray)) return true;
                if (eval(this.BloodDecal)) return true;
                if (eval(this.InheritsSoundFrom)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Creature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ItemEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ItemEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Models != null)
                {
                    obj.Models = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Models.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Models.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Models.Specific = l;
                        foreach (var item in Models.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.NIFT = eval(this.NIFT);
                obj.Configuration = this.Configuration == null ? null : new MaskItem<R, CreatureConfiguration.Mask<R>?>(eval(this.Configuration.Overall), this.Configuration.Specific?.Translate(eval));
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Script = eval(this.Script);
                obj.AIData = this.AIData == null ? null : new MaskItem<R, CreatureAIData.Mask<R>?>(eval(this.AIData.Overall), this.AIData.Specific?.Translate(eval));
                if (AIPackages != null)
                {
                    obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AIPackages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AIPackages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AIPackages.Specific = l;
                        foreach (var item in AIPackages.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, CreatureData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.AttackReach = eval(this.AttackReach);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.TurningSpeed = eval(this.TurningSpeed);
                obj.BaseScale = eval(this.BaseScale);
                obj.FootWeight = eval(this.FootWeight);
                obj.BloodSpray = eval(this.BloodSpray);
                obj.BloodDecal = eval(this.BloodDecal);
                obj.InheritsSoundFrom = eval(this.InheritsSoundFrom);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CreatureSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, CreatureSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CreatureSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, CreatureSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, CreatureSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Creature.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Creature.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Creature.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells.TryGet(out var SpellsItem))
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Models?.Overall ?? true)
                        && Models.TryGet(out var ModelsItem))
                    {
                        fg.AppendLine("Models =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ModelsItem.Overall);
                            if (ModelsItem.Specific != null)
                            {
                                foreach (var subItem in ModelsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.NIFT ?? true)
                    {
                        fg.AppendItem(NIFT, "NIFT");
                    }
                    if (printMask?.Configuration?.Overall ?? true)
                    {
                        Configuration?.ToString(fg);
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions.TryGet(out var FactionsItem))
                    {
                        fg.AppendLine("Factions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        fg.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.AIData?.Overall ?? true)
                    {
                        AIData?.ToString(fg);
                    }
                    if ((printMask?.AIPackages?.Overall ?? true)
                        && AIPackages.TryGet(out var AIPackagesItem))
                    {
                        fg.AppendLine("AIPackages =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AIPackagesItem.Overall);
                            if (AIPackagesItem.Specific != null)
                            {
                                foreach (var subItem in AIPackagesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Animations?.Overall ?? true)
                        && Animations.TryGet(out var AnimationsItem))
                    {
                        fg.AppendLine("Animations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AnimationsItem.Overall);
                            if (AnimationsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.AttackReach ?? true)
                    {
                        fg.AppendItem(AttackReach, "AttackReach");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.TurningSpeed ?? true)
                    {
                        fg.AppendItem(TurningSpeed, "TurningSpeed");
                    }
                    if (printMask?.BaseScale ?? true)
                    {
                        fg.AppendItem(BaseScale, "BaseScale");
                    }
                    if (printMask?.FootWeight ?? true)
                    {
                        fg.AppendItem(FootWeight, "FootWeight");
                    }
                    if (printMask?.BloodSpray ?? true)
                    {
                        fg.AppendItem(BloodSpray, "BloodSpray");
                    }
                    if (printMask?.BloodDecal ?? true)
                    {
                        fg.AppendItem(BloodDecal, "BloodDecal");
                    }
                    if (printMask?.InheritsSoundFrom ?? true)
                    {
                        fg.AppendItem(InheritsSoundFrom, "InheritsSoundFrom");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANpc.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Models;
            public Exception? NIFT;
            public MaskItem<Exception?, CreatureConfiguration.ErrorMask?>? Configuration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Script;
            public MaskItem<Exception?, CreatureAIData.ErrorMask?>? AIData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AIPackages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public MaskItem<Exception?, CreatureData.ErrorMask?>? Data;
            public Exception? AttackReach;
            public Exception? CombatStyle;
            public Exception? TurningSpeed;
            public Exception? BaseScale;
            public Exception? FootWeight;
            public Exception? BloodSpray;
            public Exception? BloodDecal;
            public Exception? InheritsSoundFrom;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        return Name;
                    case Creature_FieldIndex.Model:
                        return Model;
                    case Creature_FieldIndex.Items:
                        return Items;
                    case Creature_FieldIndex.Spells:
                        return Spells;
                    case Creature_FieldIndex.Models:
                        return Models;
                    case Creature_FieldIndex.NIFT:
                        return NIFT;
                    case Creature_FieldIndex.Configuration:
                        return Configuration;
                    case Creature_FieldIndex.Factions:
                        return Factions;
                    case Creature_FieldIndex.DeathItem:
                        return DeathItem;
                    case Creature_FieldIndex.Script:
                        return Script;
                    case Creature_FieldIndex.AIData:
                        return AIData;
                    case Creature_FieldIndex.AIPackages:
                        return AIPackages;
                    case Creature_FieldIndex.Animations:
                        return Animations;
                    case Creature_FieldIndex.Data:
                        return Data;
                    case Creature_FieldIndex.AttackReach:
                        return AttackReach;
                    case Creature_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Creature_FieldIndex.TurningSpeed:
                        return TurningSpeed;
                    case Creature_FieldIndex.BaseScale:
                        return BaseScale;
                    case Creature_FieldIndex.FootWeight:
                        return FootWeight;
                    case Creature_FieldIndex.BloodSpray:
                        return BloodSpray;
                    case Creature_FieldIndex.BloodDecal:
                        return BloodDecal;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        return InheritsSoundFrom;
                    case Creature_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Creature_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Models:
                        this.Models = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.NIFT:
                        this.NIFT = ex;
                        break;
                    case Creature_FieldIndex.Configuration:
                        this.Configuration = new MaskItem<Exception?, CreatureConfiguration.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Creature_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Creature_FieldIndex.AIData:
                        this.AIData = new MaskItem<Exception?, CreatureAIData.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, CreatureData.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.AttackReach:
                        this.AttackReach = ex;
                        break;
                    case Creature_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Creature_FieldIndex.TurningSpeed:
                        this.TurningSpeed = ex;
                        break;
                    case Creature_FieldIndex.BaseScale:
                        this.BaseScale = ex;
                        break;
                    case Creature_FieldIndex.FootWeight:
                        this.FootWeight = ex;
                        break;
                    case Creature_FieldIndex.BloodSpray:
                        this.BloodSpray = ex;
                        break;
                    case Creature_FieldIndex.BloodDecal:
                        this.BloodDecal = ex;
                        break;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        this.InheritsSoundFrom = ex;
                        break;
                    case Creature_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Models:
                        this.Models = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.NIFT:
                        this.NIFT = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Configuration:
                        this.Configuration = (MaskItem<Exception?, CreatureConfiguration.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.AIData:
                        this.AIData = (MaskItem<Exception?, CreatureAIData.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, CreatureData.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.AttackReach:
                        this.AttackReach = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.TurningSpeed:
                        this.TurningSpeed = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BaseScale:
                        this.BaseScale = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.FootWeight:
                        this.FootWeight = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BloodSpray:
                        this.BloodSpray = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BloodDecal:
                        this.BloodDecal = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        this.InheritsSoundFrom = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Items != null) return true;
                if (Spells != null) return true;
                if (Models != null) return true;
                if (NIFT != null) return true;
                if (Configuration != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Script != null) return true;
                if (AIData != null) return true;
                if (AIPackages != null) return true;
                if (Animations != null) return true;
                if (Data != null) return true;
                if (AttackReach != null) return true;
                if (CombatStyle != null) return true;
                if (TurningSpeed != null) return true;
                if (BaseScale != null) return true;
                if (FootWeight != null) return true;
                if (BloodSpray != null) return true;
                if (BloodDecal != null) return true;
                if (InheritsSoundFrom != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Spells.TryGet(out var SpellsItem))
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Models.TryGet(out var ModelsItem))
                {
                    fg.AppendLine("Models =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ModelsItem.Overall);
                        if (ModelsItem.Specific != null)
                        {
                            foreach (var subItem in ModelsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(NIFT, "NIFT");
                Configuration?.ToString(fg);
                if (Factions.TryGet(out var FactionsItem))
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DeathItem, "DeathItem");
                fg.AppendItem(Script, "Script");
                AIData?.ToString(fg);
                if (AIPackages.TryGet(out var AIPackagesItem))
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AIPackagesItem.Overall);
                        if (AIPackagesItem.Specific != null)
                        {
                            foreach (var subItem in AIPackagesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Animations.TryGet(out var AnimationsItem))
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AnimationsItem.Overall);
                        if (AnimationsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Data?.ToString(fg);
                fg.AppendItem(AttackReach, "AttackReach");
                fg.AppendItem(CombatStyle, "CombatStyle");
                fg.AppendItem(TurningSpeed, "TurningSpeed");
                fg.AppendItem(BaseScale, "BaseScale");
                fg.AppendItem(FootWeight, "FootWeight");
                fg.AppendItem(BloodSpray, "BloodSpray");
                fg.AppendItem(BloodDecal, "BloodDecal");
                fg.AppendItem(InheritsSoundFrom, "InheritsSoundFrom");
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Models = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Models?.Overall, rhs.Models?.Overall), ExceptionExt.Combine(this.Models?.Specific, rhs.Models?.Specific));
                ret.NIFT = this.NIFT.Combine(rhs.NIFT);
                ret.Configuration = this.Configuration.Combine(rhs.Configuration, (l, r) => l.Combine(r));
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.AIData = this.AIData.Combine(rhs.AIData, (l, r) => l.Combine(r));
                ret.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AIPackages?.Overall, rhs.AIPackages?.Overall), ExceptionExt.Combine(this.AIPackages?.Specific, rhs.AIPackages?.Specific));
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.AttackReach = this.AttackReach.Combine(rhs.AttackReach);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.TurningSpeed = this.TurningSpeed.Combine(rhs.TurningSpeed);
                ret.BaseScale = this.BaseScale.Combine(rhs.BaseScale);
                ret.FootWeight = this.FootWeight.Combine(rhs.FootWeight);
                ret.BloodSpray = this.BloodSpray.Combine(rhs.BloodSpray);
                ret.BloodDecal = this.BloodDecal.Combine(rhs.BloodDecal);
                ret.InheritsSoundFrom = this.InheritsSoundFrom.Combine(rhs.InheritsSoundFrom);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANpc.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, ItemEntry.TranslationMask?> Items;
            public bool Spells;
            public bool Models;
            public bool NIFT;
            public MaskItem<bool, CreatureConfiguration.TranslationMask?> Configuration;
            public MaskItem<bool, RankPlacement.TranslationMask?> Factions;
            public bool DeathItem;
            public bool Script;
            public MaskItem<bool, CreatureAIData.TranslationMask?> AIData;
            public bool AIPackages;
            public bool Animations;
            public MaskItem<bool, CreatureData.TranslationMask?> Data;
            public bool AttackReach;
            public bool CombatStyle;
            public bool TurningSpeed;
            public bool BaseScale;
            public bool FootWeight;
            public bool BloodSpray;
            public bool BloodDecal;
            public bool InheritsSoundFrom;
            public MaskItem<bool, CreatureSound.TranslationMask?> Sounds;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Items = new MaskItem<bool, ItemEntry.TranslationMask?>(defaultOn, null);
                this.Spells = defaultOn;
                this.Models = defaultOn;
                this.NIFT = defaultOn;
                this.Configuration = new MaskItem<bool, CreatureConfiguration.TranslationMask?>(defaultOn, null);
                this.Factions = new MaskItem<bool, RankPlacement.TranslationMask?>(defaultOn, null);
                this.DeathItem = defaultOn;
                this.Script = defaultOn;
                this.AIData = new MaskItem<bool, CreatureAIData.TranslationMask?>(defaultOn, null);
                this.AIPackages = defaultOn;
                this.Animations = defaultOn;
                this.Data = new MaskItem<bool, CreatureData.TranslationMask?>(defaultOn, null);
                this.AttackReach = defaultOn;
                this.CombatStyle = defaultOn;
                this.TurningSpeed = defaultOn;
                this.BaseScale = defaultOn;
                this.FootWeight = defaultOn;
                this.BloodSpray = defaultOn;
                this.BloodDecal = defaultOn;
                this.InheritsSoundFrom = defaultOn;
                this.Sounds = new MaskItem<bool, CreatureSound.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
                ret.Add((Spells, null));
                ret.Add((Models, null));
                ret.Add((NIFT, null));
                ret.Add((Configuration?.Overall ?? true, Configuration?.Specific?.GetCrystal()));
                ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Script, null));
                ret.Add((AIData?.Overall ?? true, AIData?.Specific?.GetCrystal()));
                ret.Add((AIPackages, null));
                ret.Add((Animations, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((AttackReach, null));
                ret.Add((CombatStyle, null));
                ret.Add((TurningSpeed, null));
                ret.Add((BaseScale, null));
                ret.Add((FootWeight, null));
                ret.Add((BloodSpray, null));
                ret.Add((BloodDecal, null));
                ret.Add((InheritsSoundFrom, null));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Creature_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CreatureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => CreatureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreatureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreatureCommon.Instance.RemapLinks(this, mapping);
        public Creature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Creature(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Creature(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Creature CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Creature CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Creature();
            ((CreatureSetterCommon)((ICreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICreatureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CreatureSetterCommon)((ICreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Creature GetNew()
        {
            return new Creature();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreature :
        ICreatureGetter,
        IANpc,
        INamed,
        ILoquiObjectSetter<ICreatureInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new ExtendedList<ItemEntry> Items { get; }
        new ExtendedList<IFormLink<ASpell>> Spells { get; }
        new ExtendedList<String>? Models { get; set; }
        new Byte[]? NIFT { get; set; }
        new CreatureConfiguration? Configuration { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new FormLinkNullable<AItem> DeathItem { get; set; }
        new FormLinkNullable<Script> Script { get; set; }
        new CreatureAIData? AIData { get; set; }
        new ExtendedList<IFormLink<AIPackage>> AIPackages { get; }
        new ExtendedList<String>? Animations { get; set; }
        new CreatureData? Data { get; set; }
        new Byte? AttackReach { get; set; }
        new FormLinkNullable<CombatStyle> CombatStyle { get; set; }
        new Single? TurningSpeed { get; set; }
        new Single? BaseScale { get; set; }
        new Single? FootWeight { get; set; }
        new String? BloodSpray { get; set; }
        new String? BloodDecal { get; set; }
        new FormLinkNullable<Creature> InheritsSoundFrom { get; set; }
        new ExtendedList<CreatureSound> Sounds { get; }
    }

    public partial interface ICreatureInternal :
        IANpcInternal,
        ICreature,
        ICreatureGetter
    {
    }

    public partial interface ICreatureGetter :
        IANpcGetter,
        INamedGetter,
        ILoquiObject<ICreatureGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Creature_Registration.Instance;
        String? Name { get; }
        IModelGetter? Model { get; }
        IReadOnlyList<IItemEntryGetter> Items { get; }
        IReadOnlyList<IFormLink<IASpellGetter>> Spells { get; }
        IReadOnlyList<String>? Models { get; }
        ReadOnlyMemorySlice<Byte>? NIFT { get; }
        ICreatureConfigurationGetter? Configuration { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        IFormLinkNullable<IAItemGetter> DeathItem { get; }
        IFormLinkNullable<IScriptGetter> Script { get; }
        ICreatureAIDataGetter? AIData { get; }
        IReadOnlyList<IFormLink<IAIPackageGetter>> AIPackages { get; }
        IReadOnlyList<String>? Animations { get; }
        ICreatureDataGetter? Data { get; }
        Byte? AttackReach { get; }
        IFormLinkNullable<ICombatStyleGetter> CombatStyle { get; }
        Single? TurningSpeed { get; }
        Single? BaseScale { get; }
        Single? FootWeight { get; }
        String? BloodSpray { get; }
        String? BloodDecal { get; }
        IFormLinkNullable<ICreatureGetter> InheritsSoundFrom { get; }
        IReadOnlyList<ICreatureSoundGetter> Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreatureMixIn
    {
        public static void Clear(this ICreatureInternal item)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Creature.Mask<bool> GetEqualsMask(
            this ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICreatureGetter item,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICreatureGetter item,
            FileGeneration fg,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICreatureGetter item,
            Creature.Mask<bool?> checkMask)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Creature.Mask<bool> GetHasBeenSetMask(this ICreatureGetter item)
        {
            var ret = new Creature.Mask<bool>(false);
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICreatureGetter item,
            ICreatureGetter rhs)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICreatureInternal lhs,
            ICreatureGetter rhs,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureSetterTranslationCommon)((ICreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureInternal lhs,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureSetterTranslationCommon)((ICreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICreatureInternal item,
            XElement node,
            Creature.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICreatureInternal item,
            XElement node,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            string path,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            string path,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            Stream stream,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            Stream stream,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICreatureInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICreatureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Creature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Items = 7,
        Spells = 8,
        Models = 9,
        NIFT = 10,
        Configuration = 11,
        Factions = 12,
        DeathItem = 13,
        Script = 14,
        AIData = 15,
        AIPackages = 16,
        Animations = 17,
        Data = 18,
        AttackReach = 19,
        CombatStyle = 20,
        TurningSpeed = 21,
        BaseScale = 22,
        FootWeight = 23,
        BloodSpray = 24,
        BloodDecal = 25,
        InheritsSoundFrom = 26,
        Sounds = 27,
    }
    #endregion

    #region Registration
    public partial class Creature_Registration : ILoquiRegistration
    {
        public static readonly Creature_Registration Instance = new Creature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 89,
            version: 0);

        public const string GUID = "9859ec12-21c5-4de8-9caa-404330da8b79";

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(Creature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Creature.ErrorMask);

        public static readonly Type ClassType = typeof(Creature);

        public static readonly Type GetterType = typeof(ICreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreature);

        public static readonly Type? InternalSetterType = typeof(ICreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Creature";

        public const string Name = "Creature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Creature_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Creature_FieldIndex.Model;
                case "ITEMS":
                    return (ushort)Creature_FieldIndex.Items;
                case "SPELLS":
                    return (ushort)Creature_FieldIndex.Spells;
                case "MODELS":
                    return (ushort)Creature_FieldIndex.Models;
                case "NIFT":
                    return (ushort)Creature_FieldIndex.NIFT;
                case "CONFIGURATION":
                    return (ushort)Creature_FieldIndex.Configuration;
                case "FACTIONS":
                    return (ushort)Creature_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)Creature_FieldIndex.DeathItem;
                case "SCRIPT":
                    return (ushort)Creature_FieldIndex.Script;
                case "AIDATA":
                    return (ushort)Creature_FieldIndex.AIData;
                case "AIPACKAGES":
                    return (ushort)Creature_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)Creature_FieldIndex.Animations;
                case "DATA":
                    return (ushort)Creature_FieldIndex.Data;
                case "ATTACKREACH":
                    return (ushort)Creature_FieldIndex.AttackReach;
                case "COMBATSTYLE":
                    return (ushort)Creature_FieldIndex.CombatStyle;
                case "TURNINGSPEED":
                    return (ushort)Creature_FieldIndex.TurningSpeed;
                case "BASESCALE":
                    return (ushort)Creature_FieldIndex.BaseScale;
                case "FOOTWEIGHT":
                    return (ushort)Creature_FieldIndex.FootWeight;
                case "BLOODSPRAY":
                    return (ushort)Creature_FieldIndex.BloodSpray;
                case "BLOODDECAL":
                    return (ushort)Creature_FieldIndex.BloodDecal;
                case "INHERITSSOUNDFROM":
                    return (ushort)Creature_FieldIndex.InheritsSoundFrom;
                case "SOUNDS":
                    return (ushort)Creature_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Configuration:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.AIData:
                case Creature_FieldIndex.Data:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                    return false;
                default:
                    return ANpc_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Configuration:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.AIData:
                case Creature_FieldIndex.Data:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                    return false;
                default:
                    return ANpc_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Configuration:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.AIData:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Data:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return ANpc_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return "Name";
                case Creature_FieldIndex.Model:
                    return "Model";
                case Creature_FieldIndex.Items:
                    return "Items";
                case Creature_FieldIndex.Spells:
                    return "Spells";
                case Creature_FieldIndex.Models:
                    return "Models";
                case Creature_FieldIndex.NIFT:
                    return "NIFT";
                case Creature_FieldIndex.Configuration:
                    return "Configuration";
                case Creature_FieldIndex.Factions:
                    return "Factions";
                case Creature_FieldIndex.DeathItem:
                    return "DeathItem";
                case Creature_FieldIndex.Script:
                    return "Script";
                case Creature_FieldIndex.AIData:
                    return "AIData";
                case Creature_FieldIndex.AIPackages:
                    return "AIPackages";
                case Creature_FieldIndex.Animations:
                    return "Animations";
                case Creature_FieldIndex.Data:
                    return "Data";
                case Creature_FieldIndex.AttackReach:
                    return "AttackReach";
                case Creature_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case Creature_FieldIndex.TurningSpeed:
                    return "TurningSpeed";
                case Creature_FieldIndex.BaseScale:
                    return "BaseScale";
                case Creature_FieldIndex.FootWeight:
                    return "FootWeight";
                case Creature_FieldIndex.BloodSpray:
                    return "BloodSpray";
                case Creature_FieldIndex.BloodDecal:
                    return "BloodDecal";
                case Creature_FieldIndex.InheritsSoundFrom:
                    return "InheritsSoundFrom";
                case Creature_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return ANpc_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Configuration:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.AIData:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Data:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return ANpc_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Configuration:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.AIData:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Data:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                    return false;
                default:
                    return ANpc_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return typeof(String);
                case Creature_FieldIndex.Model:
                    return typeof(Model);
                case Creature_FieldIndex.Items:
                    return typeof(ExtendedList<ItemEntry>);
                case Creature_FieldIndex.Spells:
                    return typeof(ExtendedList<IFormLink<ASpell>>);
                case Creature_FieldIndex.Models:
                    return typeof(ExtendedList<String>);
                case Creature_FieldIndex.NIFT:
                    return typeof(Byte[]);
                case Creature_FieldIndex.Configuration:
                    return typeof(CreatureConfiguration);
                case Creature_FieldIndex.Factions:
                    return typeof(ExtendedList<RankPlacement>);
                case Creature_FieldIndex.DeathItem:
                    return typeof(FormLinkNullable<AItem>);
                case Creature_FieldIndex.Script:
                    return typeof(FormLinkNullable<Script>);
                case Creature_FieldIndex.AIData:
                    return typeof(CreatureAIData);
                case Creature_FieldIndex.AIPackages:
                    return typeof(ExtendedList<IFormLink<AIPackage>>);
                case Creature_FieldIndex.Animations:
                    return typeof(ExtendedList<String>);
                case Creature_FieldIndex.Data:
                    return typeof(CreatureData);
                case Creature_FieldIndex.AttackReach:
                    return typeof(Byte);
                case Creature_FieldIndex.CombatStyle:
                    return typeof(FormLinkNullable<CombatStyle>);
                case Creature_FieldIndex.TurningSpeed:
                    return typeof(Single);
                case Creature_FieldIndex.BaseScale:
                    return typeof(Single);
                case Creature_FieldIndex.FootWeight:
                    return typeof(Single);
                case Creature_FieldIndex.BloodSpray:
                    return typeof(String);
                case Creature_FieldIndex.BloodDecal:
                    return typeof(String);
                case Creature_FieldIndex.InheritsSoundFrom:
                    return typeof(FormLinkNullable<Creature>);
                case Creature_FieldIndex.Sounds:
                    return typeof(ExtendedList<CreatureSound>);
                default:
                    return ANpc_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CreatureXmlWriteTranslation);
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType NIFZ_HEADER = new RecordType("NIFZ");
        public static readonly RecordType NIFT_HEADER = new RecordType("NIFT");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType CSCR_HEADER = new RecordType("CSCR");
        public static readonly RecordType CSDT_HEADER = new RecordType("CSDT");
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static readonly RecordType TriggeringRecordType = CREA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 23;
        public static readonly Type BinaryWriteTranslation = typeof(CreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CreatureSetterCommon : ANpcSetterCommon
    {
        public new static readonly CreatureSetterCommon Instance = new CreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Items.Clear();
            item.Spells.Clear();
            item.Models = null;
            item.NIFT = default;
            item.Configuration = null;
            item.Factions.Clear();
            item.DeathItem = FormLinkNullable<AItem>.Null;
            item.Script = FormLinkNullable<Script>.Null;
            item.AIData = null;
            item.AIPackages.Clear();
            item.Animations = null;
            item.Data = null;
            item.AttackReach = default;
            item.CombatStyle = FormLinkNullable<CombatStyle>.Null;
            item.TurningSpeed = default;
            item.BaseScale = default;
            item.FootWeight = default;
            item.BloodSpray = default;
            item.BloodDecal = default;
            item.InheritsSoundFrom = FormLinkNullable<Creature>.Null;
            item.Sounds.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IANpcInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(IANpcSpawnInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    ANpcSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ICreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IANpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Creature)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IANpcSpawnInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Creature)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Creature)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Creature)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Creature_Registration.CREA_HEADER;
        protected static void FillBinaryStructs(
            ICreatureInternal item,
            MutagenFrame frame)
        {
            ANpcSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ICreatureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Model);
                }
                case 0x4F544E43: // CNTO
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Creature_Registration.CNTO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out ItemEntry listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<ItemEntry>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Items);
                }
                case 0x4F4C5053: // SPLO
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ASpell>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Creature_Registration.SPLO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Spells);
                }
                case 0x5A46494E: // NIFZ
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Models = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out String listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false);
                            })
                        .ToExtendedList<String>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Models);
                }
                case 0x5446494E: // NIFT
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NIFT = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.NIFT);
                }
                case 0x53424341: // ACBS
                {
                    item.Configuration = Mutagen.Bethesda.Oblivion.CreatureConfiguration.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Configuration);
                }
                case 0x4D414E53: // SNAM
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Creature_Registration.SNAM_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out RankPlacement listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<RankPlacement>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.DeathItem);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Script);
                }
                case 0x54444941: // AIDT
                {
                    item.AIData = Mutagen.Bethesda.Oblivion.CreatureAIData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIData);
                }
                case 0x44494B50: // PKID
                {
                    item.AIPackages.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<AIPackage>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Creature_Registration.PKID_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Animations = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out String listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false);
                            })
                        .ToExtendedList<String>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Animations);
                }
                case 0x41544144: // DATA
                {
                    item.Data = Mutagen.Bethesda.Oblivion.CreatureData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Data);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackReach = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AttackReach);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CombatStyle);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TurningSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.TurningSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BaseScale);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FootWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.FootWeight);
                }
                case 0x304D414E: // NAM0
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BloodSpray = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodSpray);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BloodDecal = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodDecal);
                }
                case 0x52435343: // CSCR
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InheritsSoundFrom = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.InheritsSoundFrom);
                }
                case 0x54445343: // CSDT
                case 0x49445343: // CSDI
                case 0x43445343: // CSDC
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<CreatureSound>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: CreatureSound_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out CreatureSound listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<CreatureSound>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Sounds);
                }
                default:
                    return ANpcSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            ICreatureInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICreatureInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IANpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Creature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IANpcSpawnInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Creature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Creature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Creature)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class CreatureCommon : ANpcCommon
    {
        public new static readonly CreatureCommon Instance = new CreatureCommon();

        public Creature.Mask<bool> GetEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Creature.Mask<bool>(false);
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            Creature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Models = item.Models.CollectionEqualsHelper(
                rhs.Models,
                (l, r) => string.Equals(l, r),
                include);
            ret.NIFT = MemorySliceExt.Equal(item.NIFT, rhs.NIFT);
            ret.Configuration = EqualsMaskHelper.EqualsHelper(
                item.Configuration,
                rhs.Configuration,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = object.Equals(item.DeathItem, rhs.DeathItem);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.AIData = EqualsMaskHelper.EqualsHelper(
                item.AIData,
                rhs.AIData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AttackReach = item.AttackReach == rhs.AttackReach;
            ret.CombatStyle = object.Equals(item.CombatStyle, rhs.CombatStyle);
            ret.TurningSpeed = item.TurningSpeed.EqualsWithin(rhs.TurningSpeed);
            ret.BaseScale = item.BaseScale.EqualsWithin(rhs.BaseScale);
            ret.FootWeight = item.FootWeight.EqualsWithin(rhs.FootWeight);
            ret.BloodSpray = string.Equals(item.BloodSpray, rhs.BloodSpray);
            ret.BloodDecal = string.Equals(item.BloodDecal, rhs.BloodDecal);
            ret.InheritsSoundFrom = object.Equals(item.InheritsSoundFrom, rhs.InheritsSoundFrom);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICreatureGetter item,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICreatureGetter item,
            FileGeneration fg,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Creature =>");
            }
            else
            {
                fg.AppendLine($"{name} (Creature) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICreatureGetter item,
            FileGeneration fg,
            Creature.Mask<bool>? printMask = null)
        {
            ANpcCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Models?.Overall ?? true)
                && item.Models.TryGet(out var ModelsItem))
            {
                fg.AppendLine("Models =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ModelsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.NIFT ?? true)
                && item.NIFT.TryGet(out var NIFTItem))
            {
                fg.AppendLine($"NIFT => {SpanExt.ToHexString(NIFTItem)}");
            }
            if ((printMask?.Configuration?.Overall ?? true)
                && item.Configuration.TryGet(out var ConfigurationItem))
            {
                ConfigurationItem?.ToString(fg, "Configuration");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Factions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.DeathItem ?? true)
                && item.DeathItem.TryGet(out var DeathItemItem))
            {
                fg.AppendItem(DeathItemItem, "DeathItem");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if ((printMask?.AIData?.Overall ?? true)
                && item.AIData.TryGet(out var AIDataItem))
            {
                AIDataItem?.ToString(fg, "AIData");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                fg.AppendLine("AIPackages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.AIPackages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Animations?.Overall ?? true)
                && item.Animations.TryGet(out var AnimationsItem))
            {
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AnimationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.AttackReach ?? true)
                && item.AttackReach.TryGet(out var AttackReachItem))
            {
                fg.AppendItem(AttackReachItem, "AttackReach");
            }
            if ((printMask?.CombatStyle ?? true)
                && item.CombatStyle.TryGet(out var CombatStyleItem))
            {
                fg.AppendItem(CombatStyleItem, "CombatStyle");
            }
            if ((printMask?.TurningSpeed ?? true)
                && item.TurningSpeed.TryGet(out var TurningSpeedItem))
            {
                fg.AppendItem(TurningSpeedItem, "TurningSpeed");
            }
            if ((printMask?.BaseScale ?? true)
                && item.BaseScale.TryGet(out var BaseScaleItem))
            {
                fg.AppendItem(BaseScaleItem, "BaseScale");
            }
            if ((printMask?.FootWeight ?? true)
                && item.FootWeight.TryGet(out var FootWeightItem))
            {
                fg.AppendItem(FootWeightItem, "FootWeight");
            }
            if ((printMask?.BloodSpray ?? true)
                && item.BloodSpray.TryGet(out var BloodSprayItem))
            {
                fg.AppendItem(BloodSprayItem, "BloodSpray");
            }
            if ((printMask?.BloodDecal ?? true)
                && item.BloodDecal.TryGet(out var BloodDecalItem))
            {
                fg.AppendItem(BloodDecalItem, "BloodDecal");
            }
            if ((printMask?.InheritsSoundFrom ?? true)
                && item.InheritsSoundFrom.TryGet(out var InheritsSoundFromItem))
            {
                fg.AppendItem(InheritsSoundFromItem, "InheritsSoundFrom");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Sounds)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ICreatureGetter item,
            Creature.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Models?.Overall.HasValue ?? false && checkMask.Models!.Overall.Value != (item.Models != null)) return false;
            if (checkMask.NIFT.HasValue && checkMask.NIFT.Value != (item.NIFT != null)) return false;
            if (checkMask.Configuration?.Overall.HasValue ?? false && checkMask.Configuration.Overall.Value != (item.Configuration != null)) return false;
            if (checkMask.Configuration?.Specific != null && (item.Configuration == null || !item.Configuration.HasBeenSet(checkMask.Configuration.Specific))) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != (item.DeathItem.FormKey != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.AIData?.Overall.HasValue ?? false && checkMask.AIData.Overall.Value != (item.AIData != null)) return false;
            if (checkMask.AIData?.Specific != null && (item.AIData == null || !item.AIData.HasBeenSet(checkMask.AIData.Specific))) return false;
            if (checkMask.Animations?.Overall.HasValue ?? false && checkMask.Animations!.Overall.Value != (item.Animations != null)) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.AttackReach.HasValue && checkMask.AttackReach.Value != (item.AttackReach != null)) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != (item.CombatStyle.FormKey != null)) return false;
            if (checkMask.TurningSpeed.HasValue && checkMask.TurningSpeed.Value != (item.TurningSpeed != null)) return false;
            if (checkMask.BaseScale.HasValue && checkMask.BaseScale.Value != (item.BaseScale != null)) return false;
            if (checkMask.FootWeight.HasValue && checkMask.FootWeight.Value != (item.FootWeight != null)) return false;
            if (checkMask.BloodSpray.HasValue && checkMask.BloodSpray.Value != (item.BloodSpray != null)) return false;
            if (checkMask.BloodDecal.HasValue && checkMask.BloodDecal.Value != (item.BloodDecal != null)) return false;
            if (checkMask.InheritsSoundFrom.HasValue && checkMask.InheritsSoundFrom.Value != (item.InheritsSoundFrom.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICreatureGetter item,
            Creature.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var ItemsItem = item.Items;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ItemEntry.Mask<bool>?>>?>(true, ItemsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, ItemEntry.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Spells = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Models = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Models != null), default);
            mask.NIFT = (item.NIFT != null);
            var itemConfiguration = item.Configuration;
            mask.Configuration = new MaskItem<bool, CreatureConfiguration.Mask<bool>?>(itemConfiguration != null, itemConfiguration?.GetHasBeenSetMask());
            var FactionsItem = item.Factions;
            mask.Factions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RankPlacement.Mask<bool>?>>?>(true, FactionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RankPlacement.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DeathItem = (item.DeathItem.FormKey != null);
            mask.Script = (item.Script.FormKey != null);
            var itemAIData = item.AIData;
            mask.AIData = new MaskItem<bool, CreatureAIData.Mask<bool>?>(itemAIData != null, itemAIData?.GetHasBeenSetMask());
            mask.AIPackages = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Animations = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Animations != null), default);
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, CreatureData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            mask.AttackReach = (item.AttackReach != null);
            mask.CombatStyle = (item.CombatStyle.FormKey != null);
            mask.TurningSpeed = (item.TurningSpeed != null);
            mask.BaseScale = (item.BaseScale != null);
            mask.FootWeight = (item.FootWeight != null);
            mask.BloodSpray = (item.BloodSpray != null);
            mask.BloodDecal = (item.BloodDecal != null);
            mask.InheritsSoundFrom = (item.InheritsSoundFrom.FormKey != null);
            var SoundsItem = item.Sounds;
            mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, CreatureSound.Mask<bool>?>>?>(true, SoundsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, CreatureSound.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Creature_FieldIndex ConvertFieldIndex(ANpc_FieldIndex index)
        {
            switch (index)
            {
                case ANpc_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case ANpc_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case ANpc_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case ANpc_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case ANpc_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(ANpcSpawn_FieldIndex index)
        {
            switch (index)
            {
                case ANpcSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureGetter? lhs,
            ICreatureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            if (!lhs.Models.SequenceEqual(rhs.Models)) return false;
            if (!MemorySliceExt.Equal(lhs.NIFT, rhs.NIFT)) return false;
            if (!object.Equals(lhs.Configuration, rhs.Configuration)) return false;
            if (!lhs.Factions.SequenceEqual(rhs.Factions)) return false;
            if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!object.Equals(lhs.AIData, rhs.AIData)) return false;
            if (!lhs.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            if (!lhs.Animations.SequenceEqual(rhs.Animations)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (lhs.AttackReach != rhs.AttackReach) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!lhs.TurningSpeed.EqualsWithin(rhs.TurningSpeed)) return false;
            if (!lhs.BaseScale.EqualsWithin(rhs.BaseScale)) return false;
            if (!lhs.FootWeight.EqualsWithin(rhs.FootWeight)) return false;
            if (!string.Equals(lhs.BloodSpray, rhs.BloodSpray)) return false;
            if (!string.Equals(lhs.BloodDecal, rhs.BloodDecal)) return false;
            if (!lhs.InheritsSoundFrom.Equals(rhs.InheritsSoundFrom)) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            return true;
        }
        
        public override bool Equals(
            IANpcGetter? lhs,
            IANpcGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public override bool Equals(
            IANpcSpawnGetter? lhs,
            IANpcSpawnGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public virtual int GetHashCode(ICreatureGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Items);
            hash.Add(item.Spells);
            hash.Add(item.Models);
            if (item.NIFT.TryGet(out var NIFTItem))
            {
                hash.Add(NIFTItem);
            }
            if (item.Configuration.TryGet(out var Configurationitem))
            {
                hash.Add(Configurationitem);
            }
            hash.Add(item.Factions);
            if (item.DeathItem.TryGet(out var DeathItemitem))
            {
                hash.Add(DeathItemitem);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                hash.Add(Scriptitem);
            }
            if (item.AIData.TryGet(out var AIDataitem))
            {
                hash.Add(AIDataitem);
            }
            hash.Add(item.AIPackages);
            hash.Add(item.Animations);
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.AttackReach.TryGet(out var AttackReachitem))
            {
                hash.Add(AttackReachitem);
            }
            if (item.CombatStyle.TryGet(out var CombatStyleitem))
            {
                hash.Add(CombatStyleitem);
            }
            if (item.TurningSpeed.TryGet(out var TurningSpeeditem))
            {
                hash.Add(TurningSpeeditem);
            }
            if (item.BaseScale.TryGet(out var BaseScaleitem))
            {
                hash.Add(BaseScaleitem);
            }
            if (item.FootWeight.TryGet(out var FootWeightitem))
            {
                hash.Add(FootWeightitem);
            }
            if (item.BloodSpray.TryGet(out var BloodSprayitem))
            {
                hash.Add(BloodSprayitem);
            }
            if (item.BloodDecal.TryGet(out var BloodDecalitem))
            {
                hash.Add(BloodDecalitem);
            }
            if (item.InheritsSoundFrom.TryGet(out var InheritsSoundFromitem))
            {
                hash.Add(InheritsSoundFromitem);
            }
            hash.Add(item.Sounds);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANpcGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(IANpcSpawnGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Creature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ICreatureGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Items.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.Spells.Select(f => f.FormKey))
            {
                yield return item;
            }
            foreach (var item in obj.Factions.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.DeathItem.FormKey.TryGet(out var DeathItemKey))
            {
                yield return DeathItemKey;
            }
            if (obj.Script.FormKey.TryGet(out var ScriptKey))
            {
                yield return ScriptKey;
            }
            foreach (var item in obj.AIPackages.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.CombatStyle.FormKey.TryGet(out var CombatStyleKey))
            {
                yield return CombatStyleKey;
            }
            if (obj.InheritsSoundFrom.FormKey.TryGet(out var InheritsSoundFromKey))
            {
                yield return InheritsSoundFromKey;
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(ICreatureGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Creature obj, Creature rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Creature(getNextFormKey());
            ret.DeepCopyIn((Creature)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Creature)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class CreatureSetterTranslationCommon : ANpcSetterTranslationCommon
    {
        public new static readonly CreatureSetterTranslationCommon Instance = new CreatureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICreatureInternal item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ICreature item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IANpc)item,
                (IANpcGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                        .Select(r => (IFormLink<ASpell>)new FormLink<ASpell>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                try
                {
                    if ((rhs.Models != null))
                    {
                        item.Models = 
                            rhs.Models
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Models = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                if(rhs.NIFT.TryGet(out var NIFTrhs))
                {
                    item.NIFT = NIFTrhs.ToArray();
                }
                else
                {
                    item.NIFT = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Configuration) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Configuration);
                try
                {
                    if(rhs.Configuration.TryGet(out var rhsConfiguration))
                    {
                        item.Configuration = rhsConfiguration.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Configuration));
                    }
                    else
                    {
                        item.Configuration = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem = rhs.DeathItem.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                item.Script = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AIData) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AIData);
                try
                {
                    if(rhs.AIData.TryGet(out var rhsAIData))
                    {
                        item.AIData = rhsAIData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.AIData));
                    }
                    else
                    {
                        item.AIData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetTo(
                        rhs.AIPackages
                        .Select(r => (IFormLink<AIPackage>)new FormLink<AIPackage>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                try
                {
                    if ((rhs.Animations != null))
                    {
                        item.Animations = 
                            rhs.Animations
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Animations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                item.AttackReach = rhs.AttackReach;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle = rhs.CombatStyle.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                item.TurningSpeed = rhs.TurningSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                item.BaseScale = rhs.BaseScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                item.FootWeight = rhs.FootWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                item.BloodSpray = rhs.BloodSpray;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                item.BloodDecal = rhs.BloodDecal;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                item.InheritsSoundFrom = rhs.InheritsSoundFrom.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IANpcInternal item,
            IANpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IANpc item,
            IANpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IANpcSpawnInternal item,
            IANpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IANpcSpawn item,
            IANpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Creature DeepCopy(
            ICreatureGetter item,
            Creature.TranslationMask? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Creature DeepCopy(
            ICreatureGetter item,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Creature DeepCopy(
            ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Creature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static Creature_Registration Registration => Creature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureXmlWriteTranslation :
        ANpcXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CreatureXmlWriteTranslation Instance = new CreatureXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICreatureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ANpcXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Creature_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Creature_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IItemEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Creature_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Items),
                    transl: (XElement subNode, IItemEntryGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ItemEntryXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormLink<IASpellGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Creature_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Spells),
                    transl: (XElement subNode, IFormLink<IASpellGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Models != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Models),
                    item: item.Models,
                    fieldIndex: (int)Creature_FieldIndex.Models,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Models),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.NIFT != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NIFT),
                    item: item.NIFT.Value,
                    fieldIndex: (int)Creature_FieldIndex.NIFT,
                    errorMask: errorMask);
            }
            if ((item.Configuration != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Configuration) ?? true))
            {
                if (item.Configuration.TryGet(out var ConfigurationItem))
                {
                    ((CreatureConfigurationXmlWriteTranslation)((IXmlItem)ConfigurationItem).XmlWriteTranslator).Write(
                        item: ConfigurationItem,
                        node: node,
                        name: nameof(item.Configuration),
                        fieldIndex: (int)Creature_FieldIndex.Configuration,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Configuration));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                ListXmlTranslation<IRankPlacementGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)Creature_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Factions),
                    transl: (XElement subNode, IRankPlacementGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((RankPlacementXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.DeathItem.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem.FormKey.Value,
                    fieldIndex: (int)Creature_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey.Value,
                    fieldIndex: (int)Creature_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((item.AIData != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AIData) ?? true))
            {
                if (item.AIData.TryGet(out var AIDataItem))
                {
                    ((CreatureAIDataXmlWriteTranslation)((IXmlItem)AIDataItem).XmlWriteTranslator).Write(
                        item: AIDataItem,
                        node: node,
                        name: nameof(item.AIData),
                        fieldIndex: (int)Creature_FieldIndex.AIData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.AIData));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                ListXmlTranslation<IFormLink<IAIPackageGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)Creature_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.AIPackages),
                    transl: (XElement subNode, IFormLink<IAIPackageGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Animations != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)Creature_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Animations),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((CreatureDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)Creature_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Data));
                }
            }
            if ((item.AttackReach != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackReach),
                    item: item.AttackReach.Value,
                    fieldIndex: (int)Creature_FieldIndex.AttackReach,
                    errorMask: errorMask);
            }
            if ((item.CombatStyle.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle.FormKey.Value,
                    fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if ((item.TurningSpeed != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TurningSpeed),
                    item: item.TurningSpeed.Value,
                    fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                    errorMask: errorMask);
            }
            if ((item.BaseScale != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseScale),
                    item: item.BaseScale.Value,
                    fieldIndex: (int)Creature_FieldIndex.BaseScale,
                    errorMask: errorMask);
            }
            if ((item.FootWeight != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FootWeight),
                    item: item.FootWeight.Value,
                    fieldIndex: (int)Creature_FieldIndex.FootWeight,
                    errorMask: errorMask);
            }
            if ((item.BloodSpray != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BloodSpray),
                    item: item.BloodSpray,
                    fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                    errorMask: errorMask);
            }
            if ((item.BloodDecal != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BloodDecal),
                    item: item.BloodDecal,
                    fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                    errorMask: errorMask);
            }
            if ((item.InheritsSoundFrom.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.InheritsSoundFrom),
                    item: item.InheritsSoundFrom.FormKey.Value,
                    fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<ICreatureSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Creature_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Sounds),
                    transl: (XElement subNode, ICreatureSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((CreatureSoundXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Creature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Creature");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IANpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IANpcSpawnGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CreatureXmlCreateTranslation : ANpcXmlCreateTranslation
    {
        public new readonly static CreatureXmlCreateTranslation Instance = new CreatureXmlCreateTranslation();

        public static void FillPublicXml(
            ICreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                    try
                    {
                        if (ListXmlTranslation<ItemEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<ASpell>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Models":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var ModelsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Models = ModelsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Models = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NIFT":
                    errorMask?.PushIndex((int)Creature_FieldIndex.NIFT);
                    try
                    {
                        item.NIFT = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Configuration":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Configuration);
                    try
                    {
                        item.Configuration = LoquiXmlTranslation<CreatureConfiguration>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Configuration));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                    try
                    {
                        if (ListXmlTranslation<RankPlacement>.Instance.Parse(
                            node: node,
                            enumer: out var FactionsItem,
                            transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Factions.SetTo(FactionsItem);
                        }
                        else
                        {
                            item.Factions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeathItem":
                    errorMask?.PushIndex((int)Creature_FieldIndex.DeathItem);
                    try
                    {
                        item.DeathItem = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Script);
                    try
                    {
                        item.Script = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIData":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AIData);
                    try
                    {
                        item.AIData = LoquiXmlTranslation<CreatureAIData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.AIData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<AIPackage>>.Instance.Parse(
                            node: node,
                            enumer: out var AIPackagesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AIPackages.SetTo(AIPackagesItem);
                        }
                        else
                        {
                            item.AIPackages.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations = AnimationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Animations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<CreatureData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackReach":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AttackReach);
                    try
                    {
                        item.AttackReach = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    errorMask?.PushIndex((int)Creature_FieldIndex.CombatStyle);
                    try
                    {
                        item.CombatStyle = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TurningSpeed":
                    errorMask?.PushIndex((int)Creature_FieldIndex.TurningSpeed);
                    try
                    {
                        item.TurningSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseScale":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BaseScale);
                    try
                    {
                        item.BaseScale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FootWeight":
                    errorMask?.PushIndex((int)Creature_FieldIndex.FootWeight);
                    try
                    {
                        item.FootWeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BloodSpray":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BloodSpray);
                    try
                    {
                        item.BloodSpray = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BloodDecal":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BloodDecal);
                    try
                    {
                        item.BloodDecal = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InheritsSoundFrom":
                    errorMask?.PushIndex((int)Creature_FieldIndex.InheritsSoundFrom);
                    try
                    {
                        item.InheritsSoundFrom = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                    try
                    {
                        if (ListXmlTranslation<CreatureSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<CreatureSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds.SetTo(SoundsItem);
                        }
                        else
                        {
                            item.Sounds.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ANpcXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CreatureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICreatureGetter item,
            XElement node,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICreatureGetter item,
            string path,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICreatureGetter item,
            Stream stream,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureBinaryWriteTranslation :
        ANpcBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CreatureBinaryWriteTranslation Instance = new CreatureBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ICreatureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IItemEntryGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ItemEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IASpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLink<IASpellGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Creature_Registration.SPLO_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Models,
                recordType: recordTypeConverter.ConvertToCustom(Creature_Registration.NIFZ_HEADER),
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NIFT,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NIFT_HEADER));
            if (item.Configuration.TryGet(out var ConfigurationItem))
            {
                ((CreatureConfigurationBinaryWriteTranslation)((IBinaryItem)ConfigurationItem).BinaryWriteTranslator).Write(
                    item: ConfigurationItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.INAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.SCRI_HEADER));
            if (item.AIData.TryGet(out var AIDataItem))
            {
                ((CreatureAIDataBinaryWriteTranslation)((IBinaryItem)AIDataItem).BinaryWriteTranslator).Write(
                    item: AIDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IAIPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.AIPackages,
                transl: (MutagenWriter subWriter, IFormLink<IAIPackageGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Creature_Registration.PKID_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                recordType: recordTypeConverter.ConvertToCustom(Creature_Registration.KFFZ_HEADER),
                transl: StringBinaryTranslation.Instance.Write);
            if (item.Data.TryGet(out var DataItem))
            {
                ((CreatureDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackReach,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.RNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.ZNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TurningSpeed,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.TNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseScale,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.BNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FootWeight,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.WNAM_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BloodSpray,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM0_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BloodDecal,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM1_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InheritsSoundFrom,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.CSCR_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ICreatureSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, ICreatureSoundGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((CreatureSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICreatureGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Creature_Registration.CREA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcSpawnGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CreatureBinaryCreateTranslation : ANpcBinaryCreateTranslation
    {
        public new readonly static CreatureBinaryCreateTranslation Instance = new CreatureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureBinaryOverlay :
        ANpcBinaryOverlay,
        ICreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static Creature_Registration Registration => Creature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CreatureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICreatureGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => CreatureCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => CreatureCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreatureCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreatureCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        public IReadOnlyList<IItemEntryGetter> Items { get; private set; } = ListExt.Empty<ItemEntryBinaryOverlay>();
        public IReadOnlyList<IFormLink<IASpellGetter>> Spells { get; private set; } = ListExt.Empty<IFormLink<IASpellGetter>>();
        public IReadOnlyList<String>? Models { get; private set; }
        #region NIFT
        private int? _NIFTLocation;
        public ReadOnlyMemorySlice<Byte>? NIFT => _NIFTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _NIFTLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Configuration
        private RangeInt32? _ConfigurationLocation;
        public ICreatureConfigurationGetter? Configuration => _ConfigurationLocation.HasValue ? CreatureConfigurationBinaryOverlay.CreatureConfigurationFactory(new BinaryMemoryReadStream(_data.Slice(_ConfigurationLocation!.Value.Min)), _package) : default;
        public bool Configuration_IsSet => _ConfigurationLocation.HasValue;
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = ListExt.Empty<RankPlacementBinaryOverlay>();
        #region DeathItem
        private int? _DeathItemLocation;
        public bool DeathItem_IsSet => _DeathItemLocation.HasValue;
        public IFormLinkNullable<IAItemGetter> DeathItem => _DeathItemLocation.HasValue ? new FormLinkNullable<IAItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DeathItemLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAItemGetter>.Null;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullable<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        #region AIData
        private RangeInt32? _AIDataLocation;
        public ICreatureAIDataGetter? AIData => _AIDataLocation.HasValue ? CreatureAIDataBinaryOverlay.CreatureAIDataFactory(new BinaryMemoryReadStream(_data.Slice(_AIDataLocation!.Value.Min)), _package) : default;
        public bool AIData_IsSet => _AIDataLocation.HasValue;
        #endregion
        public IReadOnlyList<IFormLink<IAIPackageGetter>> AIPackages { get; private set; } = ListExt.Empty<IFormLink<IAIPackageGetter>>();
        public IReadOnlyList<String>? Animations { get; private set; }
        #region Data
        private RangeInt32? _DataLocation;
        public ICreatureDataGetter? Data => _DataLocation.HasValue ? CreatureDataBinaryOverlay.CreatureDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        #region AttackReach
        private int? _AttackReachLocation;
        public Byte? AttackReach => _AttackReachLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _AttackReachLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public bool CombatStyle_IsSet => _CombatStyleLocation.HasValue;
        public IFormLinkNullable<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormLinkNullable<ICombatStyleGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CombatStyleLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICombatStyleGetter>.Null;
        #endregion
        #region TurningSpeed
        private int? _TurningSpeedLocation;
        public Single? TurningSpeed => _TurningSpeedLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _TurningSpeedLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        #region BaseScale
        private int? _BaseScaleLocation;
        public Single? BaseScale => _BaseScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _BaseScaleLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        #region FootWeight
        private int? _FootWeightLocation;
        public Single? FootWeight => _FootWeightLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FootWeightLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        #region BloodSpray
        private int? _BloodSprayLocation;
        public String? BloodSpray => _BloodSprayLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _BloodSprayLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region BloodDecal
        private int? _BloodDecalLocation;
        public String? BloodDecal => _BloodDecalLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _BloodDecalLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region InheritsSoundFrom
        private int? _InheritsSoundFromLocation;
        public bool InheritsSoundFrom_IsSet => _InheritsSoundFromLocation.HasValue;
        public IFormLinkNullable<ICreatureGetter> InheritsSoundFrom => _InheritsSoundFromLocation.HasValue ? new FormLinkNullable<ICreatureGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _InheritsSoundFromLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICreatureGetter>.Null;
        #endregion
        public IReadOnlyList<ICreatureSoundGetter> Sounds { get; private set; } = ListExt.Empty<CreatureSoundBinaryOverlay>();
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected CreatureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CreatureBinaryOverlay CreatureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new CreatureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static CreatureBinaryOverlay CreatureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return CreatureFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Model);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryOverlayList<ItemEntryBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ItemEntryBinaryOverlay.ItemEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Items);
                }
                case 0x4F4C5053: // SPLO
                {
                    this.Spells = BinaryOverlayList<IFormLink<IASpellGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IASpellGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Spells);
                }
                case 0x5A46494E: // NIFZ
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Models = BinaryOverlayList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Models);
                }
                case 0x5446494E: // NIFT
                {
                    _NIFTLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.NIFT);
                }
                case 0x53424341: // ACBS
                {
                    _ConfigurationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Configuration);
                }
                case 0x4D414E53: // SNAM
                {
                    this.Factions = BinaryOverlayList<RankPlacementBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    _DeathItemLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.DeathItem);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Script);
                }
                case 0x54444941: // AIDT
                {
                    _AIDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIData);
                }
                case 0x44494B50: // PKID
                {
                    this.AIPackages = BinaryOverlayList<IFormLink<IAIPackageGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IAIPackageGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Animations = BinaryOverlayList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Animations);
                }
                case 0x41544144: // DATA
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Data);
                }
                case 0x4D414E52: // RNAM
                {
                    _AttackReachLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AttackReach);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _CombatStyleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CombatStyle);
                }
                case 0x4D414E54: // TNAM
                {
                    _TurningSpeedLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.TurningSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    _BaseScaleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BaseScale);
                }
                case 0x4D414E57: // WNAM
                {
                    _FootWeightLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.FootWeight);
                }
                case 0x304D414E: // NAM0
                {
                    _BloodSprayLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodSpray);
                }
                case 0x314D414E: // NAM1
                {
                    _BloodDecalLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodDecal);
                }
                case 0x52435343: // CSCR
                {
                    _InheritsSoundFromLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.InheritsSoundFrom);
                }
                case 0x54445343: // CSDT
                case 0x49445343: // CSDI
                case 0x43445343: // CSDC
                {
                    this.Sounds = this.ParseRepeatedTypelessSubrecord<CreatureSoundBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: CreatureSound_Registration.TriggeringRecordTypes,
                        factory:  CreatureSoundBinaryOverlay.CreatureSoundFactory);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Sounds);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

