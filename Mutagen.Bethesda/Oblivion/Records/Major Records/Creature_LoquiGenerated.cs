/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Creature :
        NPCAbstract,
        ICreatureInternal,
        ILoquiObjectSetter<Creature>,
        INamed,
        IEquatable<Creature>,
        IEqualsMask
    {
        #region Ctor
        protected Creature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ICreatureGetter.Model => this.Model;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ItemEntry>? _Items;
        public ExtendedList<ItemEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IItemEntryGetter>? ICreatureGetter.Items => _Items;
        #endregion

        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<SpellAbstract>>? _Spells;
        public ExtendedList<IFormLink<SpellAbstract>>? Spells
        {
            get => this._Spells;
            set => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellAbstractGetter>>? ICreatureGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Models
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Models;
        public ExtendedList<String>? Models
        {
            get => this._Models;
            set => this._Models = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? ICreatureGetter.Models => _Models;
        #endregion

        #endregion
        #region NIFT
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _NIFT;
        public Byte[]? NIFT
        {
            get => this._NIFT;
            set => this._NIFT = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICreatureGetter.NIFT => this.NIFT;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Creature.CreatureFlag _Flags;
        public Creature.CreatureFlag Flags
        {
            get => this._Flags;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region BaseSpellPoints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _BaseSpellPoints;
        public UInt16 BaseSpellPoints
        {
            get => this._BaseSpellPoints;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._BaseSpellPoints = value;
            }
        }
        #endregion
        #region Fatigue
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _Fatigue;
        public UInt16 Fatigue
        {
            get => this._Fatigue;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._Fatigue = value;
            }
        }
        #endregion
        #region BarterGold
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _BarterGold;
        public UInt16 BarterGold
        {
            get => this._BarterGold;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._BarterGold = value;
            }
        }
        #endregion
        #region LevelOffset
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16 _LevelOffset;
        public Int16 LevelOffset
        {
            get => this._LevelOffset;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._LevelOffset = value;
            }
        }
        #endregion
        #region CalcMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _CalcMin;
        public UInt16 CalcMin
        {
            get => this._CalcMin;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._CalcMin = value;
            }
        }
        #endregion
        #region CalcMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _CalcMax;
        public UInt16 CalcMax
        {
            get => this._CalcMax;
            set
            {
                this.ACBSDataTypeState |= ACBSDataType.Has;
                this._CalcMax = value;
            }
        }
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement>? _Factions;
        public ExtendedList<RankPlacement>? Factions
        {
            get => this._Factions;
            set => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter>? ICreatureGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<ItemAbstract> _DeathItem = new FormLinkNullable<ItemAbstract>();
        public IFormLinkNullable<ItemAbstract> DeathItem => this._DeathItem;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IItemAbstractGetter> ICreatureGetter.DeathItem => this.DeathItem;
        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Script> _Script = new FormLinkNullable<Script>();
        public IFormLinkNullable<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> ICreatureGetter.Script => this.Script;
        #endregion
        #region Aggression
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Aggression;
        public Byte Aggression
        {
            get => this._Aggression;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Aggression = value;
            }
        }
        #endregion
        #region Confidence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Confidence;
        public Byte Confidence
        {
            get => this._Confidence;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Confidence = value;
            }
        }
        #endregion
        #region EnergyLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _EnergyLevel;
        public Byte EnergyLevel
        {
            get => this._EnergyLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._EnergyLevel = value;
            }
        }
        #endregion
        #region Responsibility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Responsibility;
        public Byte Responsibility
        {
            get => this._Responsibility;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Responsibility = value;
            }
        }
        #endregion
        #region BuySellServices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NPC.BuySellServiceFlag _BuySellServices;
        public NPC.BuySellServiceFlag BuySellServices
        {
            get => this._BuySellServices;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._BuySellServices = value;
            }
        }
        #endregion
        #region Teaches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Skill _Teaches;
        public Skill Teaches
        {
            get => this._Teaches;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._Teaches = value;
            }
        }
        #endregion
        #region MaximumTrainingLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MaximumTrainingLevel;
        public Byte MaximumTrainingLevel
        {
            get => this._MaximumTrainingLevel;
            set
            {
                this.AIDTDataTypeState |= AIDTDataType.Has;
                this._MaximumTrainingLevel = value;
            }
        }
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<AIPackage>>? _AIPackages;
        public ExtendedList<IFormLink<AIPackage>>? AIPackages
        {
            get => this._AIPackages;
            set => this._AIPackages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>>? ICreatureGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Animations;
        public ExtendedList<String>? Animations
        {
            get => this._Animations;
            set => this._Animations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? ICreatureGetter.Animations => _Animations;
        #endregion

        #endregion
        #region CreatureType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Creature.CreatureTypeEnum _CreatureType;
        public Creature.CreatureTypeEnum CreatureType
        {
            get => this._CreatureType;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._CreatureType = value;
            }
        }
        #endregion
        #region CombatSkill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _CombatSkill;
        public Byte CombatSkill
        {
            get => this._CombatSkill;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._CombatSkill = value;
            }
        }
        #endregion
        #region MagicSkill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _MagicSkill;
        public Byte MagicSkill
        {
            get => this._MagicSkill;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MagicSkill = value;
            }
        }
        #endregion
        #region StealthSkill
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _StealthSkill;
        public Byte StealthSkill
        {
            get => this._StealthSkill;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._StealthSkill = value;
            }
        }
        #endregion
        #region SoulLevel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoulLevel _SoulLevel;
        public SoulLevel SoulLevel
        {
            get => this._SoulLevel;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._SoulLevel = value;
            }
        }
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Health;
        public UInt32 Health
        {
            get => this._Health;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Health = value;
            }
        }
        #endregion
        #region AttackDamage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt16 _AttackDamage;
        public UInt16 AttackDamage
        {
            get => this._AttackDamage;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._AttackDamage = value;
            }
        }
        #endregion
        #region Strength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Strength;
        public Byte Strength
        {
            get => this._Strength;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Strength = value;
            }
        }
        #endregion
        #region Intelligence
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Intelligence;
        public Byte Intelligence
        {
            get => this._Intelligence;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Intelligence = value;
            }
        }
        #endregion
        #region Willpower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Willpower;
        public Byte Willpower
        {
            get => this._Willpower;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Willpower = value;
            }
        }
        #endregion
        #region Agility
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Agility;
        public Byte Agility
        {
            get => this._Agility;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Agility = value;
            }
        }
        #endregion
        #region Speed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Speed;
        public Byte Speed
        {
            get => this._Speed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Speed = value;
            }
        }
        #endregion
        #region Endurance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Endurance;
        public Byte Endurance
        {
            get => this._Endurance;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Endurance = value;
            }
        }
        #endregion
        #region Personality
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Personality;
        public Byte Personality
        {
            get => this._Personality;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Personality = value;
            }
        }
        #endregion
        #region Luck
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Luck;
        public Byte Luck
        {
            get => this._Luck;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Luck = value;
            }
        }
        #endregion
        #region AttackReach
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte? _AttackReach;
        public Byte? AttackReach
        {
            get => this._AttackReach;
            set => this._AttackReach = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ICreatureGetter.AttackReach => this.AttackReach;
        #endregion
        #region CombatStyle
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<CombatStyle> _CombatStyle = new FormLinkNullable<CombatStyle>();
        public IFormLinkNullable<CombatStyle> CombatStyle => this._CombatStyle;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> ICreatureGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region TurningSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _TurningSpeed;
        public Single? TurningSpeed
        {
            get => this._TurningSpeed;
            set => this._TurningSpeed = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.TurningSpeed => this.TurningSpeed;
        #endregion
        #region BaseScale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _BaseScale;
        public Single? BaseScale
        {
            get => this._BaseScale;
            set => this._BaseScale = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.BaseScale => this.BaseScale;
        #endregion
        #region FootWeight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _FootWeight;
        public Single? FootWeight
        {
            get => this._FootWeight;
            set => this._FootWeight = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.FootWeight => this.FootWeight;
        #endregion
        #region BloodSpray
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _BloodSpray;
        public String? BloodSpray
        {
            get => this._BloodSpray;
            set => this._BloodSpray = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.BloodSpray => this.BloodSpray;
        #endregion
        #region BloodDecal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _BloodDecal;
        public String? BloodDecal
        {
            get => this._BloodDecal;
            set => this._BloodDecal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.BloodDecal => this.BloodDecal;
        #endregion
        #region InheritsSoundFrom
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Creature> _InheritsSoundFrom = new FormLinkNullable<Creature>();
        public IFormLinkNullable<Creature> InheritsSoundFrom => this._InheritsSoundFrom;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICreatureGetter> ICreatureGetter.InheritsSoundFrom => this.InheritsSoundFrom;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<CreatureSound>? _Sounds;
        public ExtendedList<CreatureSound>? Sounds
        {
            get => this._Sounds;
            set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICreatureSoundGetter>? ICreatureGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region ACBSDataTypeState
        public Creature.ACBSDataType ACBSDataTypeState { get; set; } = default;
        #endregion
        #region AIDTDataTypeState
        public Creature.AIDTDataType AIDTDataTypeState { get; set; } = default;
        #endregion
        #region DATADataTypeState
        public Creature.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            CreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ICreatureGetter rhs)) return false;
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Creature obj)
        {
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Creature CreateFromXml(
            XElement node,
            Creature.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Creature CreateFromXml(
            XElement node,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Creature CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Creature();
            ((CreatureSetterCommon)((ICreatureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Creature CreateFromXml(
            string path,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            string path,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Creature CreateFromXml(
            Stream stream,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            Stream stream,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Creature CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            NPCAbstract.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Models = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.NIFT = initialValue;
                this.Flags = initialValue;
                this.BaseSpellPoints = initialValue;
                this.Fatigue = initialValue;
                this.BarterGold = initialValue;
                this.LevelOffset = initialValue;
                this.CalcMin = initialValue;
                this.CalcMax = initialValue;
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Script = initialValue;
                this.Aggression = initialValue;
                this.Confidence = initialValue;
                this.EnergyLevel = initialValue;
                this.Responsibility = initialValue;
                this.BuySellServices = initialValue;
                this.Teaches = initialValue;
                this.MaximumTrainingLevel = initialValue;
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.CreatureType = initialValue;
                this.CombatSkill = initialValue;
                this.MagicSkill = initialValue;
                this.StealthSkill = initialValue;
                this.SoulLevel = initialValue;
                this.Health = initialValue;
                this.AttackDamage = initialValue;
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
                this.AttackReach = initialValue;
                this.CombatStyle = initialValue;
                this.TurningSpeed = initialValue;
                this.BaseScale = initialValue;
                this.FootWeight = initialValue;
                this.BloodSpray = initialValue;
                this.BloodDecal = initialValue;
                this.InheritsSoundFrom = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>());
                this.ACBSDataTypeState = initialValue;
                this.AIDTDataTypeState = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Items,
                TItem Spells,
                TItem Models,
                TItem NIFT,
                TItem Flags,
                TItem BaseSpellPoints,
                TItem Fatigue,
                TItem BarterGold,
                TItem LevelOffset,
                TItem CalcMin,
                TItem CalcMax,
                TItem Factions,
                TItem DeathItem,
                TItem Script,
                TItem Aggression,
                TItem Confidence,
                TItem EnergyLevel,
                TItem Responsibility,
                TItem BuySellServices,
                TItem Teaches,
                TItem MaximumTrainingLevel,
                TItem AIPackages,
                TItem Animations,
                TItem CreatureType,
                TItem CombatSkill,
                TItem MagicSkill,
                TItem StealthSkill,
                TItem SoulLevel,
                TItem Health,
                TItem AttackDamage,
                TItem Strength,
                TItem Intelligence,
                TItem Willpower,
                TItem Agility,
                TItem Speed,
                TItem Endurance,
                TItem Personality,
                TItem Luck,
                TItem AttackReach,
                TItem CombatStyle,
                TItem TurningSpeed,
                TItem BaseScale,
                TItem FootWeight,
                TItem BloodSpray,
                TItem BloodDecal,
                TItem InheritsSoundFrom,
                TItem Sounds,
                TItem ACBSDataTypeState,
                TItem AIDTDataTypeState,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Models = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Models, Enumerable.Empty<(int Index, TItem Value)>());
                this.NIFT = NIFT;
                this.Flags = Flags;
                this.BaseSpellPoints = BaseSpellPoints;
                this.Fatigue = Fatigue;
                this.BarterGold = BarterGold;
                this.LevelOffset = LevelOffset;
                this.CalcMin = CalcMin;
                this.CalcMax = CalcMax;
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Script = Script;
                this.Aggression = Aggression;
                this.Confidence = Confidence;
                this.EnergyLevel = EnergyLevel;
                this.Responsibility = Responsibility;
                this.BuySellServices = BuySellServices;
                this.Teaches = Teaches;
                this.MaximumTrainingLevel = MaximumTrainingLevel;
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AIPackages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Animations, Enumerable.Empty<(int Index, TItem Value)>());
                this.CreatureType = CreatureType;
                this.CombatSkill = CombatSkill;
                this.MagicSkill = MagicSkill;
                this.StealthSkill = StealthSkill;
                this.SoulLevel = SoulLevel;
                this.Health = Health;
                this.AttackDamage = AttackDamage;
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
                this.AttackReach = AttackReach;
                this.CombatStyle = CombatStyle;
                this.TurningSpeed = TurningSpeed;
                this.BaseScale = BaseScale;
                this.FootWeight = FootWeight;
                this.BloodSpray = BloodSpray;
                this.BloodDecal = BloodDecal;
                this.InheritsSoundFrom = InheritsSoundFrom;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>());
                this.ACBSDataTypeState = ACBSDataTypeState;
                this.AIDTDataTypeState = AIDTDataTypeState;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Models;
            public TItem NIFT;
            public TItem Flags;
            public TItem BaseSpellPoints;
            public TItem Fatigue;
            public TItem BarterGold;
            public TItem LevelOffset;
            public TItem CalcMin;
            public TItem CalcMax;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Script;
            public TItem Aggression;
            public TItem Confidence;
            public TItem EnergyLevel;
            public TItem Responsibility;
            public TItem BuySellServices;
            public TItem Teaches;
            public TItem MaximumTrainingLevel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AIPackages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Animations;
            public TItem CreatureType;
            public TItem CombatSkill;
            public TItem MagicSkill;
            public TItem StealthSkill;
            public TItem SoulLevel;
            public TItem Health;
            public TItem AttackDamage;
            public TItem Strength;
            public TItem Intelligence;
            public TItem Willpower;
            public TItem Agility;
            public TItem Speed;
            public TItem Endurance;
            public TItem Personality;
            public TItem Luck;
            public TItem AttackReach;
            public TItem CombatStyle;
            public TItem TurningSpeed;
            public TItem BaseScale;
            public TItem FootWeight;
            public TItem BloodSpray;
            public TItem BloodDecal;
            public TItem InheritsSoundFrom;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>? Sounds;
            public TItem ACBSDataTypeState;
            public TItem AIDTDataTypeState;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Models, rhs.Models)) return false;
                if (!object.Equals(this.NIFT, rhs.NIFT)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseSpellPoints, rhs.BaseSpellPoints)) return false;
                if (!object.Equals(this.Fatigue, rhs.Fatigue)) return false;
                if (!object.Equals(this.BarterGold, rhs.BarterGold)) return false;
                if (!object.Equals(this.LevelOffset, rhs.LevelOffset)) return false;
                if (!object.Equals(this.CalcMin, rhs.CalcMin)) return false;
                if (!object.Equals(this.CalcMax, rhs.CalcMax)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
                if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
                if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
                if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
                if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.CreatureType, rhs.CreatureType)) return false;
                if (!object.Equals(this.CombatSkill, rhs.CombatSkill)) return false;
                if (!object.Equals(this.MagicSkill, rhs.MagicSkill)) return false;
                if (!object.Equals(this.StealthSkill, rhs.StealthSkill)) return false;
                if (!object.Equals(this.SoulLevel, rhs.SoulLevel)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.AttackDamage, rhs.AttackDamage)) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                if (!object.Equals(this.AttackReach, rhs.AttackReach)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.TurningSpeed, rhs.TurningSpeed)) return false;
                if (!object.Equals(this.BaseScale, rhs.BaseScale)) return false;
                if (!object.Equals(this.FootWeight, rhs.FootWeight)) return false;
                if (!object.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
                if (!object.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
                if (!object.Equals(this.InheritsSoundFrom, rhs.InheritsSoundFrom)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.ACBSDataTypeState, rhs.ACBSDataTypeState)) return false;
                if (!object.Equals(this.AIDTDataTypeState, rhs.AIDTDataTypeState)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Items?.GetHashCode());
                ret = ret.CombineHashCode(this.Spells?.GetHashCode());
                ret = ret.CombineHashCode(this.Models?.GetHashCode());
                ret = ret.CombineHashCode(this.NIFT?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.BaseSpellPoints?.GetHashCode());
                ret = ret.CombineHashCode(this.Fatigue?.GetHashCode());
                ret = ret.CombineHashCode(this.BarterGold?.GetHashCode());
                ret = ret.CombineHashCode(this.LevelOffset?.GetHashCode());
                ret = ret.CombineHashCode(this.CalcMin?.GetHashCode());
                ret = ret.CombineHashCode(this.CalcMax?.GetHashCode());
                ret = ret.CombineHashCode(this.Factions?.GetHashCode());
                ret = ret.CombineHashCode(this.DeathItem?.GetHashCode());
                ret = ret.CombineHashCode(this.Script?.GetHashCode());
                ret = ret.CombineHashCode(this.Aggression?.GetHashCode());
                ret = ret.CombineHashCode(this.Confidence?.GetHashCode());
                ret = ret.CombineHashCode(this.EnergyLevel?.GetHashCode());
                ret = ret.CombineHashCode(this.Responsibility?.GetHashCode());
                ret = ret.CombineHashCode(this.BuySellServices?.GetHashCode());
                ret = ret.CombineHashCode(this.Teaches?.GetHashCode());
                ret = ret.CombineHashCode(this.MaximumTrainingLevel?.GetHashCode());
                ret = ret.CombineHashCode(this.AIPackages?.GetHashCode());
                ret = ret.CombineHashCode(this.Animations?.GetHashCode());
                ret = ret.CombineHashCode(this.CreatureType?.GetHashCode());
                ret = ret.CombineHashCode(this.CombatSkill?.GetHashCode());
                ret = ret.CombineHashCode(this.MagicSkill?.GetHashCode());
                ret = ret.CombineHashCode(this.StealthSkill?.GetHashCode());
                ret = ret.CombineHashCode(this.SoulLevel?.GetHashCode());
                ret = ret.CombineHashCode(this.Health?.GetHashCode());
                ret = ret.CombineHashCode(this.AttackDamage?.GetHashCode());
                ret = ret.CombineHashCode(this.Strength?.GetHashCode());
                ret = ret.CombineHashCode(this.Intelligence?.GetHashCode());
                ret = ret.CombineHashCode(this.Willpower?.GetHashCode());
                ret = ret.CombineHashCode(this.Agility?.GetHashCode());
                ret = ret.CombineHashCode(this.Speed?.GetHashCode());
                ret = ret.CombineHashCode(this.Endurance?.GetHashCode());
                ret = ret.CombineHashCode(this.Personality?.GetHashCode());
                ret = ret.CombineHashCode(this.Luck?.GetHashCode());
                ret = ret.CombineHashCode(this.AttackReach?.GetHashCode());
                ret = ret.CombineHashCode(this.CombatStyle?.GetHashCode());
                ret = ret.CombineHashCode(this.TurningSpeed?.GetHashCode());
                ret = ret.CombineHashCode(this.BaseScale?.GetHashCode());
                ret = ret.CombineHashCode(this.FootWeight?.GetHashCode());
                ret = ret.CombineHashCode(this.BloodSpray?.GetHashCode());
                ret = ret.CombineHashCode(this.BloodDecal?.GetHashCode());
                ret = ret.CombineHashCode(this.InheritsSoundFrom?.GetHashCode());
                ret = ret.CombineHashCode(this.Sounds?.GetHashCode());
                ret = ret.CombineHashCode(this.ACBSDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(this.AIDTDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Models != null)
                {
                    if (!eval(this.Models.Overall)) return false;
                    if (this.Models.Specific != null)
                    {
                        foreach (var item in this.Models.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.NIFT)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseSpellPoints)) return false;
                if (!eval(this.Fatigue)) return false;
                if (!eval(this.BarterGold)) return false;
                if (!eval(this.LevelOffset)) return false;
                if (!eval(this.CalcMin)) return false;
                if (!eval(this.CalcMax)) return false;
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.Aggression)) return false;
                if (!eval(this.Confidence)) return false;
                if (!eval(this.EnergyLevel)) return false;
                if (!eval(this.Responsibility)) return false;
                if (!eval(this.BuySellServices)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaximumTrainingLevel)) return false;
                if (this.AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.CreatureType)) return false;
                if (!eval(this.CombatSkill)) return false;
                if (!eval(this.MagicSkill)) return false;
                if (!eval(this.StealthSkill)) return false;
                if (!eval(this.SoulLevel)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.AttackDamage)) return false;
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                if (!eval(this.AttackReach)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.TurningSpeed)) return false;
                if (!eval(this.BaseScale)) return false;
                if (!eval(this.FootWeight)) return false;
                if (!eval(this.BloodSpray)) return false;
                if (!eval(this.BloodDecal)) return false;
                if (!eval(this.InheritsSoundFrom)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ACBSDataTypeState)) return false;
                if (!eval(this.AIDTDataTypeState)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Models != null)
                {
                    if (eval(this.Models.Overall)) return true;
                    if (this.Models.Specific != null)
                    {
                        foreach (var item in this.Models.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.NIFT)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.BaseSpellPoints)) return true;
                if (eval(this.Fatigue)) return true;
                if (eval(this.BarterGold)) return true;
                if (eval(this.LevelOffset)) return true;
                if (eval(this.CalcMin)) return true;
                if (eval(this.CalcMax)) return true;
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.Aggression)) return true;
                if (eval(this.Confidence)) return true;
                if (eval(this.EnergyLevel)) return true;
                if (eval(this.Responsibility)) return true;
                if (eval(this.BuySellServices)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaximumTrainingLevel)) return true;
                if (this.AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (eval(this.Animations.Overall)) return true;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.CreatureType)) return true;
                if (eval(this.CombatSkill)) return true;
                if (eval(this.MagicSkill)) return true;
                if (eval(this.StealthSkill)) return true;
                if (eval(this.SoulLevel)) return true;
                if (eval(this.Health)) return true;
                if (eval(this.AttackDamage)) return true;
                if (eval(this.Strength)) return true;
                if (eval(this.Intelligence)) return true;
                if (eval(this.Willpower)) return true;
                if (eval(this.Agility)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Endurance)) return true;
                if (eval(this.Personality)) return true;
                if (eval(this.Luck)) return true;
                if (eval(this.AttackReach)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.TurningSpeed)) return true;
                if (eval(this.BaseScale)) return true;
                if (eval(this.FootWeight)) return true;
                if (eval(this.BloodSpray)) return true;
                if (eval(this.BloodDecal)) return true;
                if (eval(this.InheritsSoundFrom)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ACBSDataTypeState)) return true;
                if (eval(this.AIDTDataTypeState)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Creature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ItemEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ItemEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Models != null)
                {
                    obj.Models = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Models.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Models.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Models.Specific = l;
                        foreach (var item in Models.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.NIFT = eval(this.NIFT);
                obj.Flags = eval(this.Flags);
                obj.BaseSpellPoints = eval(this.BaseSpellPoints);
                obj.Fatigue = eval(this.Fatigue);
                obj.BarterGold = eval(this.BarterGold);
                obj.LevelOffset = eval(this.LevelOffset);
                obj.CalcMin = eval(this.CalcMin);
                obj.CalcMax = eval(this.CalcMax);
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Script = eval(this.Script);
                obj.Aggression = eval(this.Aggression);
                obj.Confidence = eval(this.Confidence);
                obj.EnergyLevel = eval(this.EnergyLevel);
                obj.Responsibility = eval(this.Responsibility);
                obj.BuySellServices = eval(this.BuySellServices);
                obj.Teaches = eval(this.Teaches);
                obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
                if (AIPackages != null)
                {
                    obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AIPackages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AIPackages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AIPackages.Specific = l;
                        foreach (var item in AIPackages.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.CreatureType = eval(this.CreatureType);
                obj.CombatSkill = eval(this.CombatSkill);
                obj.MagicSkill = eval(this.MagicSkill);
                obj.StealthSkill = eval(this.StealthSkill);
                obj.SoulLevel = eval(this.SoulLevel);
                obj.Health = eval(this.Health);
                obj.AttackDamage = eval(this.AttackDamage);
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
                obj.AttackReach = eval(this.AttackReach);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.TurningSpeed = eval(this.TurningSpeed);
                obj.BaseScale = eval(this.BaseScale);
                obj.FootWeight = eval(this.FootWeight);
                obj.BloodSpray = eval(this.BloodSpray);
                obj.BloodDecal = eval(this.BloodDecal);
                obj.InheritsSoundFrom = eval(this.InheritsSoundFrom);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CreatureSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, CreatureSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CreatureSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, CreatureSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, CreatureSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ACBSDataTypeState = eval(this.ACBSDataTypeState);
                obj.AIDTDataTypeState = eval(this.AIDTDataTypeState);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Creature.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Creature.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Creature.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells.TryGet(out var SpellsItem))
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Models?.Overall ?? true)
                        && Models.TryGet(out var ModelsItem))
                    {
                        fg.AppendLine("Models =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ModelsItem.Overall);
                            if (ModelsItem.Specific != null)
                            {
                                foreach (var subItem in ModelsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.NIFT ?? true)
                    {
                        fg.AppendItem(NIFT, "NIFT");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.BaseSpellPoints ?? true)
                    {
                        fg.AppendItem(BaseSpellPoints, "BaseSpellPoints");
                    }
                    if (printMask?.Fatigue ?? true)
                    {
                        fg.AppendItem(Fatigue, "Fatigue");
                    }
                    if (printMask?.BarterGold ?? true)
                    {
                        fg.AppendItem(BarterGold, "BarterGold");
                    }
                    if (printMask?.LevelOffset ?? true)
                    {
                        fg.AppendItem(LevelOffset, "LevelOffset");
                    }
                    if (printMask?.CalcMin ?? true)
                    {
                        fg.AppendItem(CalcMin, "CalcMin");
                    }
                    if (printMask?.CalcMax ?? true)
                    {
                        fg.AppendItem(CalcMax, "CalcMax");
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions.TryGet(out var FactionsItem))
                    {
                        fg.AppendLine("Factions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        fg.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Aggression ?? true)
                    {
                        fg.AppendItem(Aggression, "Aggression");
                    }
                    if (printMask?.Confidence ?? true)
                    {
                        fg.AppendItem(Confidence, "Confidence");
                    }
                    if (printMask?.EnergyLevel ?? true)
                    {
                        fg.AppendItem(EnergyLevel, "EnergyLevel");
                    }
                    if (printMask?.Responsibility ?? true)
                    {
                        fg.AppendItem(Responsibility, "Responsibility");
                    }
                    if (printMask?.BuySellServices ?? true)
                    {
                        fg.AppendItem(BuySellServices, "BuySellServices");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        fg.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaximumTrainingLevel ?? true)
                    {
                        fg.AppendItem(MaximumTrainingLevel, "MaximumTrainingLevel");
                    }
                    if ((printMask?.AIPackages?.Overall ?? true)
                        && AIPackages.TryGet(out var AIPackagesItem))
                    {
                        fg.AppendLine("AIPackages =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AIPackagesItem.Overall);
                            if (AIPackagesItem.Specific != null)
                            {
                                foreach (var subItem in AIPackagesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Animations?.Overall ?? true)
                        && Animations.TryGet(out var AnimationsItem))
                    {
                        fg.AppendLine("Animations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AnimationsItem.Overall);
                            if (AnimationsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.CreatureType ?? true)
                    {
                        fg.AppendItem(CreatureType, "CreatureType");
                    }
                    if (printMask?.CombatSkill ?? true)
                    {
                        fg.AppendItem(CombatSkill, "CombatSkill");
                    }
                    if (printMask?.MagicSkill ?? true)
                    {
                        fg.AppendItem(MagicSkill, "MagicSkill");
                    }
                    if (printMask?.StealthSkill ?? true)
                    {
                        fg.AppendItem(StealthSkill, "StealthSkill");
                    }
                    if (printMask?.SoulLevel ?? true)
                    {
                        fg.AppendItem(SoulLevel, "SoulLevel");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendItem(Health, "Health");
                    }
                    if (printMask?.AttackDamage ?? true)
                    {
                        fg.AppendItem(AttackDamage, "AttackDamage");
                    }
                    if (printMask?.Strength ?? true)
                    {
                        fg.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        fg.AppendItem(Intelligence, "Intelligence");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        fg.AppendItem(Willpower, "Willpower");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        fg.AppendItem(Agility, "Agility");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        fg.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        fg.AppendItem(Endurance, "Endurance");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        fg.AppendItem(Personality, "Personality");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        fg.AppendItem(Luck, "Luck");
                    }
                    if (printMask?.AttackReach ?? true)
                    {
                        fg.AppendItem(AttackReach, "AttackReach");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.TurningSpeed ?? true)
                    {
                        fg.AppendItem(TurningSpeed, "TurningSpeed");
                    }
                    if (printMask?.BaseScale ?? true)
                    {
                        fg.AppendItem(BaseScale, "BaseScale");
                    }
                    if (printMask?.FootWeight ?? true)
                    {
                        fg.AppendItem(FootWeight, "FootWeight");
                    }
                    if (printMask?.BloodSpray ?? true)
                    {
                        fg.AppendItem(BloodSpray, "BloodSpray");
                    }
                    if (printMask?.BloodDecal ?? true)
                    {
                        fg.AppendItem(BloodDecal, "BloodDecal");
                    }
                    if (printMask?.InheritsSoundFrom ?? true)
                    {
                        fg.AppendItem(InheritsSoundFrom, "InheritsSoundFrom");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.ACBSDataTypeState ?? true)
                    {
                        fg.AppendItem(ACBSDataTypeState, "ACBSDataTypeState");
                    }
                    if (printMask?.AIDTDataTypeState ?? true)
                    {
                        fg.AppendItem(AIDTDataTypeState, "AIDTDataTypeState");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            NPCAbstract.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Models;
            public Exception? NIFT;
            public Exception? Flags;
            public Exception? BaseSpellPoints;
            public Exception? Fatigue;
            public Exception? BarterGold;
            public Exception? LevelOffset;
            public Exception? CalcMin;
            public Exception? CalcMax;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Script;
            public Exception? Aggression;
            public Exception? Confidence;
            public Exception? EnergyLevel;
            public Exception? Responsibility;
            public Exception? BuySellServices;
            public Exception? Teaches;
            public Exception? MaximumTrainingLevel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AIPackages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public Exception? CreatureType;
            public Exception? CombatSkill;
            public Exception? MagicSkill;
            public Exception? StealthSkill;
            public Exception? SoulLevel;
            public Exception? Health;
            public Exception? AttackDamage;
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            public Exception? AttackReach;
            public Exception? CombatStyle;
            public Exception? TurningSpeed;
            public Exception? BaseScale;
            public Exception? FootWeight;
            public Exception? BloodSpray;
            public Exception? BloodDecal;
            public Exception? InheritsSoundFrom;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>? Sounds;
            public Exception? ACBSDataTypeState;
            public Exception? AIDTDataTypeState;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        return Name;
                    case Creature_FieldIndex.Model:
                        return Model;
                    case Creature_FieldIndex.Items:
                        return Items;
                    case Creature_FieldIndex.Spells:
                        return Spells;
                    case Creature_FieldIndex.Models:
                        return Models;
                    case Creature_FieldIndex.NIFT:
                        return NIFT;
                    case Creature_FieldIndex.Flags:
                        return Flags;
                    case Creature_FieldIndex.BaseSpellPoints:
                        return BaseSpellPoints;
                    case Creature_FieldIndex.Fatigue:
                        return Fatigue;
                    case Creature_FieldIndex.BarterGold:
                        return BarterGold;
                    case Creature_FieldIndex.LevelOffset:
                        return LevelOffset;
                    case Creature_FieldIndex.CalcMin:
                        return CalcMin;
                    case Creature_FieldIndex.CalcMax:
                        return CalcMax;
                    case Creature_FieldIndex.Factions:
                        return Factions;
                    case Creature_FieldIndex.DeathItem:
                        return DeathItem;
                    case Creature_FieldIndex.Script:
                        return Script;
                    case Creature_FieldIndex.Aggression:
                        return Aggression;
                    case Creature_FieldIndex.Confidence:
                        return Confidence;
                    case Creature_FieldIndex.EnergyLevel:
                        return EnergyLevel;
                    case Creature_FieldIndex.Responsibility:
                        return Responsibility;
                    case Creature_FieldIndex.BuySellServices:
                        return BuySellServices;
                    case Creature_FieldIndex.Teaches:
                        return Teaches;
                    case Creature_FieldIndex.MaximumTrainingLevel:
                        return MaximumTrainingLevel;
                    case Creature_FieldIndex.AIPackages:
                        return AIPackages;
                    case Creature_FieldIndex.Animations:
                        return Animations;
                    case Creature_FieldIndex.CreatureType:
                        return CreatureType;
                    case Creature_FieldIndex.CombatSkill:
                        return CombatSkill;
                    case Creature_FieldIndex.MagicSkill:
                        return MagicSkill;
                    case Creature_FieldIndex.StealthSkill:
                        return StealthSkill;
                    case Creature_FieldIndex.SoulLevel:
                        return SoulLevel;
                    case Creature_FieldIndex.Health:
                        return Health;
                    case Creature_FieldIndex.AttackDamage:
                        return AttackDamage;
                    case Creature_FieldIndex.Strength:
                        return Strength;
                    case Creature_FieldIndex.Intelligence:
                        return Intelligence;
                    case Creature_FieldIndex.Willpower:
                        return Willpower;
                    case Creature_FieldIndex.Agility:
                        return Agility;
                    case Creature_FieldIndex.Speed:
                        return Speed;
                    case Creature_FieldIndex.Endurance:
                        return Endurance;
                    case Creature_FieldIndex.Personality:
                        return Personality;
                    case Creature_FieldIndex.Luck:
                        return Luck;
                    case Creature_FieldIndex.AttackReach:
                        return AttackReach;
                    case Creature_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Creature_FieldIndex.TurningSpeed:
                        return TurningSpeed;
                    case Creature_FieldIndex.BaseScale:
                        return BaseScale;
                    case Creature_FieldIndex.FootWeight:
                        return FootWeight;
                    case Creature_FieldIndex.BloodSpray:
                        return BloodSpray;
                    case Creature_FieldIndex.BloodDecal:
                        return BloodDecal;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        return InheritsSoundFrom;
                    case Creature_FieldIndex.Sounds:
                        return Sounds;
                    case Creature_FieldIndex.ACBSDataTypeState:
                        return ACBSDataTypeState;
                    case Creature_FieldIndex.AIDTDataTypeState:
                        return AIDTDataTypeState;
                    case Creature_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Creature_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Models:
                        this.Models = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.NIFT:
                        this.NIFT = ex;
                        break;
                    case Creature_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Creature_FieldIndex.BaseSpellPoints:
                        this.BaseSpellPoints = ex;
                        break;
                    case Creature_FieldIndex.Fatigue:
                        this.Fatigue = ex;
                        break;
                    case Creature_FieldIndex.BarterGold:
                        this.BarterGold = ex;
                        break;
                    case Creature_FieldIndex.LevelOffset:
                        this.LevelOffset = ex;
                        break;
                    case Creature_FieldIndex.CalcMin:
                        this.CalcMin = ex;
                        break;
                    case Creature_FieldIndex.CalcMax:
                        this.CalcMax = ex;
                        break;
                    case Creature_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Creature_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Creature_FieldIndex.Aggression:
                        this.Aggression = ex;
                        break;
                    case Creature_FieldIndex.Confidence:
                        this.Confidence = ex;
                        break;
                    case Creature_FieldIndex.EnergyLevel:
                        this.EnergyLevel = ex;
                        break;
                    case Creature_FieldIndex.Responsibility:
                        this.Responsibility = ex;
                        break;
                    case Creature_FieldIndex.BuySellServices:
                        this.BuySellServices = ex;
                        break;
                    case Creature_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case Creature_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = ex;
                        break;
                    case Creature_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.CreatureType:
                        this.CreatureType = ex;
                        break;
                    case Creature_FieldIndex.CombatSkill:
                        this.CombatSkill = ex;
                        break;
                    case Creature_FieldIndex.MagicSkill:
                        this.MagicSkill = ex;
                        break;
                    case Creature_FieldIndex.StealthSkill:
                        this.StealthSkill = ex;
                        break;
                    case Creature_FieldIndex.SoulLevel:
                        this.SoulLevel = ex;
                        break;
                    case Creature_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case Creature_FieldIndex.AttackDamage:
                        this.AttackDamage = ex;
                        break;
                    case Creature_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case Creature_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case Creature_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case Creature_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case Creature_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case Creature_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case Creature_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case Creature_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    case Creature_FieldIndex.AttackReach:
                        this.AttackReach = ex;
                        break;
                    case Creature_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Creature_FieldIndex.TurningSpeed:
                        this.TurningSpeed = ex;
                        break;
                    case Creature_FieldIndex.BaseScale:
                        this.BaseScale = ex;
                        break;
                    case Creature_FieldIndex.FootWeight:
                        this.FootWeight = ex;
                        break;
                    case Creature_FieldIndex.BloodSpray:
                        this.BloodSpray = ex;
                        break;
                    case Creature_FieldIndex.BloodDecal:
                        this.BloodDecal = ex;
                        break;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        this.InheritsSoundFrom = ex;
                        break;
                    case Creature_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.ACBSDataTypeState:
                        this.ACBSDataTypeState = ex;
                        break;
                    case Creature_FieldIndex.AIDTDataTypeState:
                        this.AIDTDataTypeState = ex;
                        break;
                    case Creature_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Models:
                        this.Models = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.NIFT:
                        this.NIFT = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BaseSpellPoints:
                        this.BaseSpellPoints = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Fatigue:
                        this.Fatigue = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BarterGold:
                        this.BarterGold = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.LevelOffset:
                        this.LevelOffset = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.CalcMin:
                        this.CalcMin = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.CalcMax:
                        this.CalcMax = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Aggression:
                        this.Aggression = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Confidence:
                        this.Confidence = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.EnergyLevel:
                        this.EnergyLevel = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Responsibility:
                        this.Responsibility = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BuySellServices:
                        this.BuySellServices = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.CreatureType:
                        this.CreatureType = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.CombatSkill:
                        this.CombatSkill = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.MagicSkill:
                        this.MagicSkill = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.StealthSkill:
                        this.StealthSkill = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.SoulLevel:
                        this.SoulLevel = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.AttackDamage:
                        this.AttackDamage = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Intelligence:
                        this.Intelligence = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Willpower:
                        this.Willpower = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Agility:
                        this.Agility = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Endurance:
                        this.Endurance = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Personality:
                        this.Personality = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Luck:
                        this.Luck = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.AttackReach:
                        this.AttackReach = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.TurningSpeed:
                        this.TurningSpeed = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BaseScale:
                        this.BaseScale = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.FootWeight:
                        this.FootWeight = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BloodSpray:
                        this.BloodSpray = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BloodDecal:
                        this.BloodDecal = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        this.InheritsSoundFrom = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.ACBSDataTypeState:
                        this.ACBSDataTypeState = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.AIDTDataTypeState:
                        this.AIDTDataTypeState = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Items != null) return true;
                if (Spells != null) return true;
                if (Models != null) return true;
                if (NIFT != null) return true;
                if (Flags != null) return true;
                if (BaseSpellPoints != null) return true;
                if (Fatigue != null) return true;
                if (BarterGold != null) return true;
                if (LevelOffset != null) return true;
                if (CalcMin != null) return true;
                if (CalcMax != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Script != null) return true;
                if (Aggression != null) return true;
                if (Confidence != null) return true;
                if (EnergyLevel != null) return true;
                if (Responsibility != null) return true;
                if (BuySellServices != null) return true;
                if (Teaches != null) return true;
                if (MaximumTrainingLevel != null) return true;
                if (AIPackages != null) return true;
                if (Animations != null) return true;
                if (CreatureType != null) return true;
                if (CombatSkill != null) return true;
                if (MagicSkill != null) return true;
                if (StealthSkill != null) return true;
                if (SoulLevel != null) return true;
                if (Health != null) return true;
                if (AttackDamage != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                if (AttackReach != null) return true;
                if (CombatStyle != null) return true;
                if (TurningSpeed != null) return true;
                if (BaseScale != null) return true;
                if (FootWeight != null) return true;
                if (BloodSpray != null) return true;
                if (BloodDecal != null) return true;
                if (InheritsSoundFrom != null) return true;
                if (Sounds != null) return true;
                if (ACBSDataTypeState != null) return true;
                if (AIDTDataTypeState != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Spells.TryGet(out var SpellsItem))
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Models.TryGet(out var ModelsItem))
                {
                    fg.AppendLine("Models =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ModelsItem.Overall);
                        if (ModelsItem.Specific != null)
                        {
                            foreach (var subItem in ModelsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(NIFT, "NIFT");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(BaseSpellPoints, "BaseSpellPoints");
                fg.AppendItem(Fatigue, "Fatigue");
                fg.AppendItem(BarterGold, "BarterGold");
                fg.AppendItem(LevelOffset, "LevelOffset");
                fg.AppendItem(CalcMin, "CalcMin");
                fg.AppendItem(CalcMax, "CalcMax");
                if (Factions.TryGet(out var FactionsItem))
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DeathItem, "DeathItem");
                fg.AppendItem(Script, "Script");
                fg.AppendItem(Aggression, "Aggression");
                fg.AppendItem(Confidence, "Confidence");
                fg.AppendItem(EnergyLevel, "EnergyLevel");
                fg.AppendItem(Responsibility, "Responsibility");
                fg.AppendItem(BuySellServices, "BuySellServices");
                fg.AppendItem(Teaches, "Teaches");
                fg.AppendItem(MaximumTrainingLevel, "MaximumTrainingLevel");
                if (AIPackages.TryGet(out var AIPackagesItem))
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AIPackagesItem.Overall);
                        if (AIPackagesItem.Specific != null)
                        {
                            foreach (var subItem in AIPackagesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Animations.TryGet(out var AnimationsItem))
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AnimationsItem.Overall);
                        if (AnimationsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(CreatureType, "CreatureType");
                fg.AppendItem(CombatSkill, "CombatSkill");
                fg.AppendItem(MagicSkill, "MagicSkill");
                fg.AppendItem(StealthSkill, "StealthSkill");
                fg.AppendItem(SoulLevel, "SoulLevel");
                fg.AppendItem(Health, "Health");
                fg.AppendItem(AttackDamage, "AttackDamage");
                fg.AppendItem(Strength, "Strength");
                fg.AppendItem(Intelligence, "Intelligence");
                fg.AppendItem(Willpower, "Willpower");
                fg.AppendItem(Agility, "Agility");
                fg.AppendItem(Speed, "Speed");
                fg.AppendItem(Endurance, "Endurance");
                fg.AppendItem(Personality, "Personality");
                fg.AppendItem(Luck, "Luck");
                fg.AppendItem(AttackReach, "AttackReach");
                fg.AppendItem(CombatStyle, "CombatStyle");
                fg.AppendItem(TurningSpeed, "TurningSpeed");
                fg.AppendItem(BaseScale, "BaseScale");
                fg.AppendItem(FootWeight, "FootWeight");
                fg.AppendItem(BloodSpray, "BloodSpray");
                fg.AppendItem(BloodDecal, "BloodDecal");
                fg.AppendItem(InheritsSoundFrom, "InheritsSoundFrom");
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(ACBSDataTypeState, "ACBSDataTypeState");
                fg.AppendItem(AIDTDataTypeState, "AIDTDataTypeState");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Models = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Models?.Overall, rhs.Models?.Overall), ExceptionExt.Combine(this.Models?.Specific, rhs.Models?.Specific));
                ret.NIFT = this.NIFT.Combine(rhs.NIFT);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseSpellPoints = this.BaseSpellPoints.Combine(rhs.BaseSpellPoints);
                ret.Fatigue = this.Fatigue.Combine(rhs.Fatigue);
                ret.BarterGold = this.BarterGold.Combine(rhs.BarterGold);
                ret.LevelOffset = this.LevelOffset.Combine(rhs.LevelOffset);
                ret.CalcMin = this.CalcMin.Combine(rhs.CalcMin);
                ret.CalcMax = this.CalcMax.Combine(rhs.CalcMax);
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Aggression = this.Aggression.Combine(rhs.Aggression);
                ret.Confidence = this.Confidence.Combine(rhs.Confidence);
                ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
                ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
                ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
                ret.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AIPackages?.Overall, rhs.AIPackages?.Overall), ExceptionExt.Combine(this.AIPackages?.Specific, rhs.AIPackages?.Specific));
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.CreatureType = this.CreatureType.Combine(rhs.CreatureType);
                ret.CombatSkill = this.CombatSkill.Combine(rhs.CombatSkill);
                ret.MagicSkill = this.MagicSkill.Combine(rhs.MagicSkill);
                ret.StealthSkill = this.StealthSkill.Combine(rhs.StealthSkill);
                ret.SoulLevel = this.SoulLevel.Combine(rhs.SoulLevel);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.AttackDamage = this.AttackDamage.Combine(rhs.AttackDamage);
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                ret.AttackReach = this.AttackReach.Combine(rhs.AttackReach);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.TurningSpeed = this.TurningSpeed.Combine(rhs.TurningSpeed);
                ret.BaseScale = this.BaseScale.Combine(rhs.BaseScale);
                ret.FootWeight = this.FootWeight.Combine(rhs.FootWeight);
                ret.BloodSpray = this.BloodSpray.Combine(rhs.BloodSpray);
                ret.BloodDecal = this.BloodDecal.Combine(rhs.BloodDecal);
                ret.InheritsSoundFrom = this.InheritsSoundFrom.Combine(rhs.InheritsSoundFrom);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.ACBSDataTypeState = this.ACBSDataTypeState.Combine(rhs.ACBSDataTypeState);
                ret.AIDTDataTypeState = this.AIDTDataTypeState.Combine(rhs.AIDTDataTypeState);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            NPCAbstract.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, ItemEntry.TranslationMask?> Items;
            public bool Spells;
            public bool Models;
            public bool NIFT;
            public bool Flags;
            public bool BaseSpellPoints;
            public bool Fatigue;
            public bool BarterGold;
            public bool LevelOffset;
            public bool CalcMin;
            public bool CalcMax;
            public MaskItem<bool, RankPlacement.TranslationMask?> Factions;
            public bool DeathItem;
            public bool Script;
            public bool Aggression;
            public bool Confidence;
            public bool EnergyLevel;
            public bool Responsibility;
            public bool BuySellServices;
            public bool Teaches;
            public bool MaximumTrainingLevel;
            public bool AIPackages;
            public bool Animations;
            public bool CreatureType;
            public bool CombatSkill;
            public bool MagicSkill;
            public bool StealthSkill;
            public bool SoulLevel;
            public bool Health;
            public bool AttackDamage;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            public bool AttackReach;
            public bool CombatStyle;
            public bool TurningSpeed;
            public bool BaseScale;
            public bool FootWeight;
            public bool BloodSpray;
            public bool BloodDecal;
            public bool InheritsSoundFrom;
            public MaskItem<bool, CreatureSound.TranslationMask?> Sounds;
            public bool ACBSDataTypeState;
            public bool AIDTDataTypeState;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Items = new MaskItem<bool, ItemEntry.TranslationMask?>(defaultOn, null);
                this.Spells = defaultOn;
                this.Models = defaultOn;
                this.NIFT = defaultOn;
                this.Flags = defaultOn;
                this.BaseSpellPoints = defaultOn;
                this.Fatigue = defaultOn;
                this.BarterGold = defaultOn;
                this.LevelOffset = defaultOn;
                this.CalcMin = defaultOn;
                this.CalcMax = defaultOn;
                this.Factions = new MaskItem<bool, RankPlacement.TranslationMask?>(defaultOn, null);
                this.DeathItem = defaultOn;
                this.Script = defaultOn;
                this.Aggression = defaultOn;
                this.Confidence = defaultOn;
                this.EnergyLevel = defaultOn;
                this.Responsibility = defaultOn;
                this.BuySellServices = defaultOn;
                this.Teaches = defaultOn;
                this.MaximumTrainingLevel = defaultOn;
                this.AIPackages = defaultOn;
                this.Animations = defaultOn;
                this.CreatureType = defaultOn;
                this.CombatSkill = defaultOn;
                this.MagicSkill = defaultOn;
                this.StealthSkill = defaultOn;
                this.SoulLevel = defaultOn;
                this.Health = defaultOn;
                this.AttackDamage = defaultOn;
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
                this.AttackReach = defaultOn;
                this.CombatStyle = defaultOn;
                this.TurningSpeed = defaultOn;
                this.BaseScale = defaultOn;
                this.FootWeight = defaultOn;
                this.BloodSpray = defaultOn;
                this.BloodDecal = defaultOn;
                this.InheritsSoundFrom = defaultOn;
                this.Sounds = new MaskItem<bool, CreatureSound.TranslationMask?>(defaultOn, null);
                this.ACBSDataTypeState = defaultOn;
                this.AIDTDataTypeState = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
                ret.Add((Spells, null));
                ret.Add((Models, null));
                ret.Add((NIFT, null));
                ret.Add((Flags, null));
                ret.Add((BaseSpellPoints, null));
                ret.Add((Fatigue, null));
                ret.Add((BarterGold, null));
                ret.Add((LevelOffset, null));
                ret.Add((CalcMin, null));
                ret.Add((CalcMax, null));
                ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Script, null));
                ret.Add((Aggression, null));
                ret.Add((Confidence, null));
                ret.Add((EnergyLevel, null));
                ret.Add((Responsibility, null));
                ret.Add((BuySellServices, null));
                ret.Add((Teaches, null));
                ret.Add((MaximumTrainingLevel, null));
                ret.Add((AIPackages, null));
                ret.Add((Animations, null));
                ret.Add((CreatureType, null));
                ret.Add((CombatSkill, null));
                ret.Add((MagicSkill, null));
                ret.Add((StealthSkill, null));
                ret.Add((SoulLevel, null));
                ret.Add((Health, null));
                ret.Add((AttackDamage, null));
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
                ret.Add((AttackReach, null));
                ret.Add((CombatStyle, null));
                ret.Add((TurningSpeed, null));
                ret.Add((BaseScale, null));
                ret.Add((FootWeight, null));
                ret.Add((BloodSpray, null));
                ret.Add((BloodDecal, null));
                ret.Add((InheritsSoundFrom, null));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
                ret.Add((ACBSDataTypeState, null));
                ret.Add((AIDTDataTypeState, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = Creature_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum ACBSDataType
        {
            Has = 1
        }
        [Flags]
        public enum AIDTDataType
        {
            Has = 1
        }
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => CreatureCommon.Instance.GetLinks(this);
        public Creature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Creature(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Creature CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Creature CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Creature();
            ((CreatureSetterCommon)((ICreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICreatureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((CreatureSetterCommon)((ICreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Creature GetNew()
        {
            return new Creature();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreature :
        ICreatureGetter,
        INPCAbstract,
        ILoquiObjectSetter<ICreatureInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new ExtendedList<ItemEntry>? Items { get; set; }
        new ExtendedList<IFormLink<SpellAbstract>>? Spells { get; set; }
        new ExtendedList<String>? Models { get; set; }
        new Byte[]? NIFT { get; set; }
        new Creature.CreatureFlag Flags { get; set; }
        new UInt16 BaseSpellPoints { get; set; }
        new UInt16 Fatigue { get; set; }
        new UInt16 BarterGold { get; set; }
        new Int16 LevelOffset { get; set; }
        new UInt16 CalcMin { get; set; }
        new UInt16 CalcMax { get; set; }
        new ExtendedList<RankPlacement>? Factions { get; set; }
        new IFormLinkNullable<ItemAbstract> DeathItem { get; }
        new IFormLinkNullable<Script> Script { get; }
        new Byte Aggression { get; set; }
        new Byte Confidence { get; set; }
        new Byte EnergyLevel { get; set; }
        new Byte Responsibility { get; set; }
        new NPC.BuySellServiceFlag BuySellServices { get; set; }
        new Skill Teaches { get; set; }
        new Byte MaximumTrainingLevel { get; set; }
        new ExtendedList<IFormLink<AIPackage>>? AIPackages { get; set; }
        new ExtendedList<String>? Animations { get; set; }
        new Creature.CreatureTypeEnum CreatureType { get; set; }
        new Byte CombatSkill { get; set; }
        new Byte MagicSkill { get; set; }
        new Byte StealthSkill { get; set; }
        new SoulLevel SoulLevel { get; set; }
        new UInt32 Health { get; set; }
        new UInt16 AttackDamage { get; set; }
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
        new Byte? AttackReach { get; set; }
        new IFormLinkNullable<CombatStyle> CombatStyle { get; }
        new Single? TurningSpeed { get; set; }
        new Single? BaseScale { get; set; }
        new Single? FootWeight { get; set; }
        new String? BloodSpray { get; set; }
        new String? BloodDecal { get; set; }
        new IFormLinkNullable<Creature> InheritsSoundFrom { get; }
        new ExtendedList<CreatureSound>? Sounds { get; set; }
        new Creature.ACBSDataType ACBSDataTypeState { get; set; }
        new Creature.AIDTDataType AIDTDataTypeState { get; set; }
        new Creature.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface ICreatureInternal :
        INPCAbstractInternal,
        ICreature,
        ICreatureGetter
    {
    }

    public partial interface ICreatureGetter :
        INPCAbstractGetter,
        ILoquiObject<ICreatureGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IModelGetter? Model { get; }
        IReadOnlyList<IItemEntryGetter>? Items { get; }
        IReadOnlyList<IFormLinkGetter<ISpellAbstractGetter>>? Spells { get; }
        IReadOnlyList<String>? Models { get; }
        ReadOnlyMemorySlice<Byte>? NIFT { get; }
        Creature.CreatureFlag Flags { get; }
        UInt16 BaseSpellPoints { get; }
        UInt16 Fatigue { get; }
        UInt16 BarterGold { get; }
        Int16 LevelOffset { get; }
        UInt16 CalcMin { get; }
        UInt16 CalcMax { get; }
        IReadOnlyList<IRankPlacementGetter>? Factions { get; }
        IFormLinkNullableGetter<IItemAbstractGetter> DeathItem { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        Byte Aggression { get; }
        Byte Confidence { get; }
        Byte EnergyLevel { get; }
        Byte Responsibility { get; }
        NPC.BuySellServiceFlag BuySellServices { get; }
        Skill Teaches { get; }
        Byte MaximumTrainingLevel { get; }
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>>? AIPackages { get; }
        IReadOnlyList<String>? Animations { get; }
        Creature.CreatureTypeEnum CreatureType { get; }
        Byte CombatSkill { get; }
        Byte MagicSkill { get; }
        Byte StealthSkill { get; }
        SoulLevel SoulLevel { get; }
        UInt32 Health { get; }
        UInt16 AttackDamage { get; }
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }
        Byte? AttackReach { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle { get; }
        Single? TurningSpeed { get; }
        Single? BaseScale { get; }
        Single? FootWeight { get; }
        String? BloodSpray { get; }
        String? BloodDecal { get; }
        IFormLinkNullableGetter<ICreatureGetter> InheritsSoundFrom { get; }
        IReadOnlyList<ICreatureSoundGetter>? Sounds { get; }
        Creature.ACBSDataType ACBSDataTypeState { get; }
        Creature.AIDTDataType AIDTDataTypeState { get; }
        Creature.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class CreatureMixIn
    {
        public static void Clear(this ICreatureInternal item)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Creature.Mask<bool> GetEqualsMask(
            this ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ICreatureGetter item,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ICreatureGetter item,
            FileGeneration fg,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ICreatureGetter item,
            Creature.Mask<bool?> checkMask)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Creature.Mask<bool> GetHasBeenSetMask(this ICreatureGetter item)
        {
            var ret = new Creature.Mask<bool>(false);
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ICreatureGetter item,
            ICreatureGetter rhs)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ICreatureInternal lhs,
            ICreatureGetter rhs,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureSetterTranslationCommon)((ICreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureInternal lhs,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureSetterTranslationCommon)((ICreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICreatureInternal item,
            XElement node,
            Creature.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ICreatureInternal item,
            XElement node,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            string path,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            string path,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            Stream stream,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            Stream stream,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ICreatureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Creature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ICreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ICreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Creature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Items = 7,
        Spells = 8,
        Models = 9,
        NIFT = 10,
        Flags = 11,
        BaseSpellPoints = 12,
        Fatigue = 13,
        BarterGold = 14,
        LevelOffset = 15,
        CalcMin = 16,
        CalcMax = 17,
        Factions = 18,
        DeathItem = 19,
        Script = 20,
        Aggression = 21,
        Confidence = 22,
        EnergyLevel = 23,
        Responsibility = 24,
        BuySellServices = 25,
        Teaches = 26,
        MaximumTrainingLevel = 27,
        AIPackages = 28,
        Animations = 29,
        CreatureType = 30,
        CombatSkill = 31,
        MagicSkill = 32,
        StealthSkill = 33,
        SoulLevel = 34,
        Health = 35,
        AttackDamage = 36,
        Strength = 37,
        Intelligence = 38,
        Willpower = 39,
        Agility = 40,
        Speed = 41,
        Endurance = 42,
        Personality = 43,
        Luck = 44,
        AttackReach = 45,
        CombatStyle = 46,
        TurningSpeed = 47,
        BaseScale = 48,
        FootWeight = 49,
        BloodSpray = 50,
        BloodDecal = 51,
        InheritsSoundFrom = 52,
        Sounds = 53,
        ACBSDataTypeState = 54,
        AIDTDataTypeState = 55,
        DATADataTypeState = 56,
    }
    #endregion

    #region Registration
    public partial class Creature_Registration : ILoquiRegistration
    {
        public static readonly Creature_Registration Instance = new Creature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 89,
            version: 0);

        public const string GUID = "9859ec12-21c5-4de8-9caa-404330da8b79";

        public const ushort AdditionalFieldCount = 52;

        public const ushort FieldCount = 57;

        public static readonly Type MaskType = typeof(Creature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Creature.ErrorMask);

        public static readonly Type ClassType = typeof(Creature);

        public static readonly Type GetterType = typeof(ICreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreature);

        public static readonly Type? InternalSetterType = typeof(ICreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Creature";

        public const string Name = "Creature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Creature_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Creature_FieldIndex.Model;
                case "ITEMS":
                    return (ushort)Creature_FieldIndex.Items;
                case "SPELLS":
                    return (ushort)Creature_FieldIndex.Spells;
                case "MODELS":
                    return (ushort)Creature_FieldIndex.Models;
                case "NIFT":
                    return (ushort)Creature_FieldIndex.NIFT;
                case "FLAGS":
                    return (ushort)Creature_FieldIndex.Flags;
                case "BASESPELLPOINTS":
                    return (ushort)Creature_FieldIndex.BaseSpellPoints;
                case "FATIGUE":
                    return (ushort)Creature_FieldIndex.Fatigue;
                case "BARTERGOLD":
                    return (ushort)Creature_FieldIndex.BarterGold;
                case "LEVELOFFSET":
                    return (ushort)Creature_FieldIndex.LevelOffset;
                case "CALCMIN":
                    return (ushort)Creature_FieldIndex.CalcMin;
                case "CALCMAX":
                    return (ushort)Creature_FieldIndex.CalcMax;
                case "FACTIONS":
                    return (ushort)Creature_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)Creature_FieldIndex.DeathItem;
                case "SCRIPT":
                    return (ushort)Creature_FieldIndex.Script;
                case "AGGRESSION":
                    return (ushort)Creature_FieldIndex.Aggression;
                case "CONFIDENCE":
                    return (ushort)Creature_FieldIndex.Confidence;
                case "ENERGYLEVEL":
                    return (ushort)Creature_FieldIndex.EnergyLevel;
                case "RESPONSIBILITY":
                    return (ushort)Creature_FieldIndex.Responsibility;
                case "BUYSELLSERVICES":
                    return (ushort)Creature_FieldIndex.BuySellServices;
                case "TEACHES":
                    return (ushort)Creature_FieldIndex.Teaches;
                case "MAXIMUMTRAININGLEVEL":
                    return (ushort)Creature_FieldIndex.MaximumTrainingLevel;
                case "AIPACKAGES":
                    return (ushort)Creature_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)Creature_FieldIndex.Animations;
                case "CREATURETYPE":
                    return (ushort)Creature_FieldIndex.CreatureType;
                case "COMBATSKILL":
                    return (ushort)Creature_FieldIndex.CombatSkill;
                case "MAGICSKILL":
                    return (ushort)Creature_FieldIndex.MagicSkill;
                case "STEALTHSKILL":
                    return (ushort)Creature_FieldIndex.StealthSkill;
                case "SOULLEVEL":
                    return (ushort)Creature_FieldIndex.SoulLevel;
                case "HEALTH":
                    return (ushort)Creature_FieldIndex.Health;
                case "ATTACKDAMAGE":
                    return (ushort)Creature_FieldIndex.AttackDamage;
                case "STRENGTH":
                    return (ushort)Creature_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)Creature_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)Creature_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)Creature_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)Creature_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)Creature_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)Creature_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)Creature_FieldIndex.Luck;
                case "ATTACKREACH":
                    return (ushort)Creature_FieldIndex.AttackReach;
                case "COMBATSTYLE":
                    return (ushort)Creature_FieldIndex.CombatStyle;
                case "TURNINGSPEED":
                    return (ushort)Creature_FieldIndex.TurningSpeed;
                case "BASESCALE":
                    return (ushort)Creature_FieldIndex.BaseScale;
                case "FOOTWEIGHT":
                    return (ushort)Creature_FieldIndex.FootWeight;
                case "BLOODSPRAY":
                    return (ushort)Creature_FieldIndex.BloodSpray;
                case "BLOODDECAL":
                    return (ushort)Creature_FieldIndex.BloodDecal;
                case "INHERITSSOUNDFROM":
                    return (ushort)Creature_FieldIndex.InheritsSoundFrom;
                case "SOUNDS":
                    return (ushort)Creature_FieldIndex.Sounds;
                case "ACBSDATATYPESTATE":
                    return (ushort)Creature_FieldIndex.ACBSDataTypeState;
                case "AIDTDATATYPESTATE":
                    return (ushort)Creature_FieldIndex.AIDTDataTypeState;
                case "DATADATATYPESTATE":
                    return (ushort)Creature_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.ACBSDataTypeState:
                case Creature_FieldIndex.AIDTDataTypeState:
                case Creature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.Sounds:
                    return true;
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.ACBSDataTypeState:
                case Creature_FieldIndex.AIDTDataTypeState:
                case Creature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                case Creature_FieldIndex.ACBSDataTypeState:
                case Creature_FieldIndex.AIDTDataTypeState:
                case Creature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return "Name";
                case Creature_FieldIndex.Model:
                    return "Model";
                case Creature_FieldIndex.Items:
                    return "Items";
                case Creature_FieldIndex.Spells:
                    return "Spells";
                case Creature_FieldIndex.Models:
                    return "Models";
                case Creature_FieldIndex.NIFT:
                    return "NIFT";
                case Creature_FieldIndex.Flags:
                    return "Flags";
                case Creature_FieldIndex.BaseSpellPoints:
                    return "BaseSpellPoints";
                case Creature_FieldIndex.Fatigue:
                    return "Fatigue";
                case Creature_FieldIndex.BarterGold:
                    return "BarterGold";
                case Creature_FieldIndex.LevelOffset:
                    return "LevelOffset";
                case Creature_FieldIndex.CalcMin:
                    return "CalcMin";
                case Creature_FieldIndex.CalcMax:
                    return "CalcMax";
                case Creature_FieldIndex.Factions:
                    return "Factions";
                case Creature_FieldIndex.DeathItem:
                    return "DeathItem";
                case Creature_FieldIndex.Script:
                    return "Script";
                case Creature_FieldIndex.Aggression:
                    return "Aggression";
                case Creature_FieldIndex.Confidence:
                    return "Confidence";
                case Creature_FieldIndex.EnergyLevel:
                    return "EnergyLevel";
                case Creature_FieldIndex.Responsibility:
                    return "Responsibility";
                case Creature_FieldIndex.BuySellServices:
                    return "BuySellServices";
                case Creature_FieldIndex.Teaches:
                    return "Teaches";
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return "MaximumTrainingLevel";
                case Creature_FieldIndex.AIPackages:
                    return "AIPackages";
                case Creature_FieldIndex.Animations:
                    return "Animations";
                case Creature_FieldIndex.CreatureType:
                    return "CreatureType";
                case Creature_FieldIndex.CombatSkill:
                    return "CombatSkill";
                case Creature_FieldIndex.MagicSkill:
                    return "MagicSkill";
                case Creature_FieldIndex.StealthSkill:
                    return "StealthSkill";
                case Creature_FieldIndex.SoulLevel:
                    return "SoulLevel";
                case Creature_FieldIndex.Health:
                    return "Health";
                case Creature_FieldIndex.AttackDamage:
                    return "AttackDamage";
                case Creature_FieldIndex.Strength:
                    return "Strength";
                case Creature_FieldIndex.Intelligence:
                    return "Intelligence";
                case Creature_FieldIndex.Willpower:
                    return "Willpower";
                case Creature_FieldIndex.Agility:
                    return "Agility";
                case Creature_FieldIndex.Speed:
                    return "Speed";
                case Creature_FieldIndex.Endurance:
                    return "Endurance";
                case Creature_FieldIndex.Personality:
                    return "Personality";
                case Creature_FieldIndex.Luck:
                    return "Luck";
                case Creature_FieldIndex.AttackReach:
                    return "AttackReach";
                case Creature_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case Creature_FieldIndex.TurningSpeed:
                    return "TurningSpeed";
                case Creature_FieldIndex.BaseScale:
                    return "BaseScale";
                case Creature_FieldIndex.FootWeight:
                    return "FootWeight";
                case Creature_FieldIndex.BloodSpray:
                    return "BloodSpray";
                case Creature_FieldIndex.BloodDecal:
                    return "BloodDecal";
                case Creature_FieldIndex.InheritsSoundFrom:
                    return "InheritsSoundFrom";
                case Creature_FieldIndex.Sounds:
                    return "Sounds";
                case Creature_FieldIndex.ACBSDataTypeState:
                    return "ACBSDataTypeState";
                case Creature_FieldIndex.AIDTDataTypeState:
                    return "AIDTDataTypeState";
                case Creature_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return NPCAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                case Creature_FieldIndex.ACBSDataTypeState:
                case Creature_FieldIndex.AIDTDataTypeState:
                case Creature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                case Creature_FieldIndex.Model:
                case Creature_FieldIndex.Items:
                case Creature_FieldIndex.Spells:
                case Creature_FieldIndex.Models:
                case Creature_FieldIndex.NIFT:
                case Creature_FieldIndex.Flags:
                case Creature_FieldIndex.BaseSpellPoints:
                case Creature_FieldIndex.Fatigue:
                case Creature_FieldIndex.BarterGold:
                case Creature_FieldIndex.LevelOffset:
                case Creature_FieldIndex.CalcMin:
                case Creature_FieldIndex.CalcMax:
                case Creature_FieldIndex.Factions:
                case Creature_FieldIndex.DeathItem:
                case Creature_FieldIndex.Script:
                case Creature_FieldIndex.Aggression:
                case Creature_FieldIndex.Confidence:
                case Creature_FieldIndex.EnergyLevel:
                case Creature_FieldIndex.Responsibility:
                case Creature_FieldIndex.BuySellServices:
                case Creature_FieldIndex.Teaches:
                case Creature_FieldIndex.MaximumTrainingLevel:
                case Creature_FieldIndex.AIPackages:
                case Creature_FieldIndex.Animations:
                case Creature_FieldIndex.CreatureType:
                case Creature_FieldIndex.CombatSkill:
                case Creature_FieldIndex.MagicSkill:
                case Creature_FieldIndex.StealthSkill:
                case Creature_FieldIndex.SoulLevel:
                case Creature_FieldIndex.Health:
                case Creature_FieldIndex.AttackDamage:
                case Creature_FieldIndex.Strength:
                case Creature_FieldIndex.Intelligence:
                case Creature_FieldIndex.Willpower:
                case Creature_FieldIndex.Agility:
                case Creature_FieldIndex.Speed:
                case Creature_FieldIndex.Endurance:
                case Creature_FieldIndex.Personality:
                case Creature_FieldIndex.Luck:
                case Creature_FieldIndex.AttackReach:
                case Creature_FieldIndex.CombatStyle:
                case Creature_FieldIndex.TurningSpeed:
                case Creature_FieldIndex.BaseScale:
                case Creature_FieldIndex.FootWeight:
                case Creature_FieldIndex.BloodSpray:
                case Creature_FieldIndex.BloodDecal:
                case Creature_FieldIndex.InheritsSoundFrom:
                case Creature_FieldIndex.Sounds:
                case Creature_FieldIndex.ACBSDataTypeState:
                case Creature_FieldIndex.AIDTDataTypeState:
                case Creature_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return NPCAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Creature_FieldIndex enu = (Creature_FieldIndex)index;
            switch (enu)
            {
                case Creature_FieldIndex.Name:
                    return typeof(String);
                case Creature_FieldIndex.Model:
                    return typeof(Model);
                case Creature_FieldIndex.Items:
                    return typeof(ExtendedList<ItemEntry>);
                case Creature_FieldIndex.Spells:
                    return typeof(ExtendedList<IFormLink<SpellAbstract>>);
                case Creature_FieldIndex.Models:
                    return typeof(ExtendedList<String>);
                case Creature_FieldIndex.NIFT:
                    return typeof(Byte[]);
                case Creature_FieldIndex.Flags:
                    return typeof(Creature.CreatureFlag);
                case Creature_FieldIndex.BaseSpellPoints:
                    return typeof(UInt16);
                case Creature_FieldIndex.Fatigue:
                    return typeof(UInt16);
                case Creature_FieldIndex.BarterGold:
                    return typeof(UInt16);
                case Creature_FieldIndex.LevelOffset:
                    return typeof(Int16);
                case Creature_FieldIndex.CalcMin:
                    return typeof(UInt16);
                case Creature_FieldIndex.CalcMax:
                    return typeof(UInt16);
                case Creature_FieldIndex.Factions:
                    return typeof(ExtendedList<RankPlacement>);
                case Creature_FieldIndex.DeathItem:
                    return typeof(IFormLinkNullable<ItemAbstract>);
                case Creature_FieldIndex.Script:
                    return typeof(IFormLinkNullable<Script>);
                case Creature_FieldIndex.Aggression:
                    return typeof(Byte);
                case Creature_FieldIndex.Confidence:
                    return typeof(Byte);
                case Creature_FieldIndex.EnergyLevel:
                    return typeof(Byte);
                case Creature_FieldIndex.Responsibility:
                    return typeof(Byte);
                case Creature_FieldIndex.BuySellServices:
                    return typeof(NPC.BuySellServiceFlag);
                case Creature_FieldIndex.Teaches:
                    return typeof(Skill);
                case Creature_FieldIndex.MaximumTrainingLevel:
                    return typeof(Byte);
                case Creature_FieldIndex.AIPackages:
                    return typeof(ExtendedList<IFormLink<AIPackage>>);
                case Creature_FieldIndex.Animations:
                    return typeof(ExtendedList<String>);
                case Creature_FieldIndex.CreatureType:
                    return typeof(Creature.CreatureTypeEnum);
                case Creature_FieldIndex.CombatSkill:
                    return typeof(Byte);
                case Creature_FieldIndex.MagicSkill:
                    return typeof(Byte);
                case Creature_FieldIndex.StealthSkill:
                    return typeof(Byte);
                case Creature_FieldIndex.SoulLevel:
                    return typeof(SoulLevel);
                case Creature_FieldIndex.Health:
                    return typeof(UInt32);
                case Creature_FieldIndex.AttackDamage:
                    return typeof(UInt16);
                case Creature_FieldIndex.Strength:
                    return typeof(Byte);
                case Creature_FieldIndex.Intelligence:
                    return typeof(Byte);
                case Creature_FieldIndex.Willpower:
                    return typeof(Byte);
                case Creature_FieldIndex.Agility:
                    return typeof(Byte);
                case Creature_FieldIndex.Speed:
                    return typeof(Byte);
                case Creature_FieldIndex.Endurance:
                    return typeof(Byte);
                case Creature_FieldIndex.Personality:
                    return typeof(Byte);
                case Creature_FieldIndex.Luck:
                    return typeof(Byte);
                case Creature_FieldIndex.AttackReach:
                    return typeof(Byte);
                case Creature_FieldIndex.CombatStyle:
                    return typeof(IFormLinkNullable<CombatStyle>);
                case Creature_FieldIndex.TurningSpeed:
                    return typeof(Single);
                case Creature_FieldIndex.BaseScale:
                    return typeof(Single);
                case Creature_FieldIndex.FootWeight:
                    return typeof(Single);
                case Creature_FieldIndex.BloodSpray:
                    return typeof(String);
                case Creature_FieldIndex.BloodDecal:
                    return typeof(String);
                case Creature_FieldIndex.InheritsSoundFrom:
                    return typeof(IFormLinkNullable<Creature>);
                case Creature_FieldIndex.Sounds:
                    return typeof(ExtendedList<CreatureSound>);
                case Creature_FieldIndex.ACBSDataTypeState:
                    return typeof(Creature.ACBSDataType);
                case Creature_FieldIndex.AIDTDataTypeState:
                    return typeof(Creature.AIDTDataType);
                case Creature_FieldIndex.DATADataTypeState:
                    return typeof(Creature.DATADataType);
                default:
                    return NPCAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(CreatureXmlWriteTranslation);
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType NIFZ_HEADER = new RecordType("NIFZ");
        public static readonly RecordType NIFT_HEADER = new RecordType("NIFT");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType CSCR_HEADER = new RecordType("CSCR");
        public static readonly RecordType CSDT_HEADER = new RecordType("CSDT");
        public static readonly RecordType CSDI_HEADER = new RecordType("CSDI");
        public static readonly RecordType CSDC_HEADER = new RecordType("CSDC");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = CREA_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 20;
        public static readonly Type BinaryWriteTranslation = typeof(CreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class CreatureSetterCommon : NPCAbstractSetterCommon
    {
        public new static readonly CreatureSetterCommon Instance = new CreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Items = null;
            item.Spells = null;
            item.Models = null;
            item.NIFT = default;
            item.Flags = default;
            item.BaseSpellPoints = default;
            item.Fatigue = default;
            item.BarterGold = default;
            item.LevelOffset = default;
            item.CalcMin = default;
            item.CalcMax = default;
            item.Factions = null;
            item.DeathItem.FormKey = null;
            item.Script.FormKey = null;
            item.Aggression = default;
            item.Confidence = default;
            item.EnergyLevel = default;
            item.Responsibility = default;
            item.BuySellServices = default;
            item.Teaches = default;
            item.MaximumTrainingLevel = default;
            item.AIPackages = null;
            item.Animations = null;
            item.CreatureType = default;
            item.CombatSkill = default;
            item.MagicSkill = default;
            item.StealthSkill = default;
            item.SoulLevel = default;
            item.Health = default;
            item.AttackDamage = default;
            item.Strength = default;
            item.Intelligence = default;
            item.Willpower = default;
            item.Agility = default;
            item.Speed = default;
            item.Endurance = default;
            item.Personality = default;
            item.Luck = default;
            item.AttackReach = default;
            item.CombatStyle.FormKey = null;
            item.TurningSpeed = default;
            item.BaseScale = default;
            item.FootWeight = default;
            item.BloodSpray = default;
            item.BloodDecal = default;
            item.InheritsSoundFrom.FormKey = null;
            item.Sounds = null;
            item.ACBSDataTypeState = default;
            item.AIDTDataTypeState = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(INPCAbstractInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(INPCSpawnInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ICreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasACBSDataType":
                    item.ACBSDataTypeState |= Creature.ACBSDataType.Has;
                    break;
                case "HasAIDTDataType":
                    item.AIDTDataTypeState |= Creature.AIDTDataType.Has;
                    break;
                case "HasDATADataType":
                    item.DATADataTypeState |= Creature.DATADataType.Has;
                    break;
                default:
                    NPCAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ICreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    CreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Creature_Registration.CREA_HEADER;
        protected static void FillBinaryStructs(
            ICreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            NPCAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ICreatureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Model);
                }
                case 0x4F544E43: // CNTO
                {
                    item.Items = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: Creature_Registration.CNTO_HEADER,
                            masterReferences: masterReferences,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: (MutagenFrame r, out ItemEntry listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<ItemEntry>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<ItemEntry>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Items);
                }
                case 0x4F4C5053: // SPLO
                {
                    item.Spells = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<SpellAbstract>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: Creature_Registration.SPLO_HEADER,
                            masterReferences: masterReferences,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<SpellAbstract>>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Spells);
                }
                case 0x5A46494E: // NIFZ
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Models = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out String listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false);
                            })
                        .ToExtendedList<String>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Models);
                }
                case 0x5446494E: // NIFT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.NIFT = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.NIFT);
                }
                case 0x53424341: // ACBS
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.ACBSDataTypeState = Creature.ACBSDataType.Has;
                    }
                    item.Flags = EnumBinaryTranslation<Creature.CreatureFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.BaseSpellPoints = dataFrame.ReadUInt16();
                    item.Fatigue = dataFrame.ReadUInt16();
                    item.BarterGold = dataFrame.ReadUInt16();
                    item.LevelOffset = dataFrame.ReadInt16();
                    item.CalcMin = dataFrame.ReadUInt16();
                    item.CalcMax = dataFrame.ReadUInt16();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    item.Factions = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: Creature_Registration.SNAM_HEADER,
                            masterReferences: masterReferences,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: (MutagenFrame r, out RankPlacement listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<RankPlacement>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<RankPlacement>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.DeathItem.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.DeathItem);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Script);
                }
                case 0x54444941: // AIDT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.AIDTDataTypeState = Creature.AIDTDataType.Has;
                    }
                    item.Aggression = dataFrame.ReadUInt8();
                    item.Confidence = dataFrame.ReadUInt8();
                    item.EnergyLevel = dataFrame.ReadUInt8();
                    item.Responsibility = dataFrame.ReadUInt8();
                    item.BuySellServices = EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Teaches = EnumBinaryTranslation<Skill>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.MaximumTrainingLevel = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.MaximumTrainingLevel);
                }
                case 0x44494B50: // PKID
                {
                    item.AIPackages = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<AIPackage>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: Creature_Registration.PKID_HEADER,
                            masterReferences: masterReferences,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<AIPackage>>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Animations = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.ParseRepeatedItem(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out String listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false);
                            })
                        .ToExtendedList<String>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Animations);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = Creature.DATADataType.Has;
                    }
                    item.CreatureType = EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.CombatSkill = dataFrame.ReadUInt8();
                    item.MagicSkill = dataFrame.ReadUInt8();
                    item.StealthSkill = dataFrame.ReadUInt8();
                    item.SoulLevel = EnumBinaryTranslation<SoulLevel>.Instance.Parse(frame: dataFrame.SpawnWithLength(2));
                    item.Health = dataFrame.ReadUInt32();
                    item.AttackDamage = dataFrame.ReadUInt16();
                    item.Strength = dataFrame.ReadUInt8();
                    item.Intelligence = dataFrame.ReadUInt8();
                    item.Willpower = dataFrame.ReadUInt8();
                    item.Agility = dataFrame.ReadUInt8();
                    item.Speed = dataFrame.ReadUInt8();
                    item.Endurance = dataFrame.ReadUInt8();
                    item.Personality = dataFrame.ReadUInt8();
                    item.Luck = dataFrame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Luck);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.AttackReach = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AttackReach);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CombatStyle.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CombatStyle);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TurningSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.TurningSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BaseScale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BaseScale);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FootWeight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.FootWeight);
                }
                case 0x304D414E: // NAM0
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BloodSpray = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodSpray);
                }
                case 0x314D414E: // NAM1
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.BloodDecal = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodDecal);
                }
                case 0x52435343: // CSCR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.InheritsSoundFrom.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.InheritsSoundFrom);
                }
                case 0x54445343: // CSDT
                case 0x49445343: // CSDI
                case 0x43445343: // CSDC
                {
                    item.Sounds = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<CreatureSound>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: CreatureSound_Registration.TriggeringRecordTypes,
                            masterReferences: masterReferences,
                            lengthLength: frame.MetaData.SubConstants.LengthLength,
                            transl: (MutagenFrame r, out CreatureSound listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<CreatureSound>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<CreatureSound>();
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Sounds);
                }
                default:
                    return NPCAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ICreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ICreatureInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class CreatureCommon : NPCAbstractCommon
    {
        public new static readonly CreatureCommon Instance = new CreatureCommon();

        public Creature.Mask<bool> GetEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Creature.Mask<bool>(false);
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            Creature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Models = item.Models.CollectionEqualsHelper(
                rhs.Models,
                (l, r) => string.Equals(l, r),
                include);
            ret.NIFT = MemorySliceExt.Equal(item.NIFT, rhs.NIFT);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseSpellPoints = item.BaseSpellPoints == rhs.BaseSpellPoints;
            ret.Fatigue = item.Fatigue == rhs.Fatigue;
            ret.BarterGold = item.BarterGold == rhs.BarterGold;
            ret.LevelOffset = item.LevelOffset == rhs.LevelOffset;
            ret.CalcMin = item.CalcMin == rhs.CalcMin;
            ret.CalcMax = item.CalcMax == rhs.CalcMax;
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = object.Equals(item.DeathItem, rhs.DeathItem);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.CreatureType = item.CreatureType == rhs.CreatureType;
            ret.CombatSkill = item.CombatSkill == rhs.CombatSkill;
            ret.MagicSkill = item.MagicSkill == rhs.MagicSkill;
            ret.StealthSkill = item.StealthSkill == rhs.StealthSkill;
            ret.SoulLevel = item.SoulLevel == rhs.SoulLevel;
            ret.Health = item.Health == rhs.Health;
            ret.AttackDamage = item.AttackDamage == rhs.AttackDamage;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
            ret.AttackReach = item.AttackReach == rhs.AttackReach;
            ret.CombatStyle = object.Equals(item.CombatStyle, rhs.CombatStyle);
            ret.TurningSpeed = item.TurningSpeed.EqualsWithin(rhs.TurningSpeed);
            ret.BaseScale = item.BaseScale.EqualsWithin(rhs.BaseScale);
            ret.FootWeight = item.FootWeight.EqualsWithin(rhs.FootWeight);
            ret.BloodSpray = string.Equals(item.BloodSpray, rhs.BloodSpray);
            ret.BloodDecal = string.Equals(item.BloodDecal, rhs.BloodDecal);
            ret.InheritsSoundFrom = object.Equals(item.InheritsSoundFrom, rhs.InheritsSoundFrom);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ACBSDataTypeState = item.ACBSDataTypeState == rhs.ACBSDataTypeState;
            ret.AIDTDataTypeState = item.AIDTDataTypeState == rhs.AIDTDataTypeState;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ICreatureGetter item,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ICreatureGetter item,
            FileGeneration fg,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Creature =>");
            }
            else
            {
                fg.AppendLine($"{name} (Creature) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ICreatureGetter item,
            FileGeneration fg,
            Creature.Mask<bool>? printMask = null)
        {
            NPCAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items.TryGet(out var ItemsItem))
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ItemsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Spells?.Overall ?? true)
                && item.Spells.TryGet(out var SpellsItem))
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SpellsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Models?.Overall ?? true)
                && item.Models.TryGet(out var ModelsItem))
            {
                fg.AppendLine("Models =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ModelsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.NIFT ?? true)
                && item.NIFT.TryGet(out var NIFTItem))
            {
                fg.AppendLine($"NIFT => {SpanExt.ToHexString(NIFTItem)}");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.BaseSpellPoints ?? true)
            {
                fg.AppendItem(item.BaseSpellPoints, "BaseSpellPoints");
            }
            if (printMask?.Fatigue ?? true)
            {
                fg.AppendItem(item.Fatigue, "Fatigue");
            }
            if (printMask?.BarterGold ?? true)
            {
                fg.AppendItem(item.BarterGold, "BarterGold");
            }
            if (printMask?.LevelOffset ?? true)
            {
                fg.AppendItem(item.LevelOffset, "LevelOffset");
            }
            if (printMask?.CalcMin ?? true)
            {
                fg.AppendItem(item.CalcMin, "CalcMin");
            }
            if (printMask?.CalcMax ?? true)
            {
                fg.AppendItem(item.CalcMax, "CalcMax");
            }
            if ((printMask?.Factions?.Overall ?? true)
                && item.Factions.TryGet(out var FactionsItem))
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in FactionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.DeathItem ?? true)
                && item.DeathItem.TryGet(out var DeathItemItem))
            {
                fg.AppendItem(DeathItemItem, "DeathItem");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if (printMask?.Aggression ?? true)
            {
                fg.AppendItem(item.Aggression, "Aggression");
            }
            if (printMask?.Confidence ?? true)
            {
                fg.AppendItem(item.Confidence, "Confidence");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                fg.AppendItem(item.EnergyLevel, "EnergyLevel");
            }
            if (printMask?.Responsibility ?? true)
            {
                fg.AppendItem(item.Responsibility, "Responsibility");
            }
            if (printMask?.BuySellServices ?? true)
            {
                fg.AppendItem(item.BuySellServices, "BuySellServices");
            }
            if (printMask?.Teaches ?? true)
            {
                fg.AppendItem(item.Teaches, "Teaches");
            }
            if (printMask?.MaximumTrainingLevel ?? true)
            {
                fg.AppendItem(item.MaximumTrainingLevel, "MaximumTrainingLevel");
            }
            if ((printMask?.AIPackages?.Overall ?? true)
                && item.AIPackages.TryGet(out var AIPackagesItem))
            {
                fg.AppendLine("AIPackages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AIPackagesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Animations?.Overall ?? true)
                && item.Animations.TryGet(out var AnimationsItem))
            {
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AnimationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.CreatureType ?? true)
            {
                fg.AppendItem(item.CreatureType, "CreatureType");
            }
            if (printMask?.CombatSkill ?? true)
            {
                fg.AppendItem(item.CombatSkill, "CombatSkill");
            }
            if (printMask?.MagicSkill ?? true)
            {
                fg.AppendItem(item.MagicSkill, "MagicSkill");
            }
            if (printMask?.StealthSkill ?? true)
            {
                fg.AppendItem(item.StealthSkill, "StealthSkill");
            }
            if (printMask?.SoulLevel ?? true)
            {
                fg.AppendItem(item.SoulLevel, "SoulLevel");
            }
            if (printMask?.Health ?? true)
            {
                fg.AppendItem(item.Health, "Health");
            }
            if (printMask?.AttackDamage ?? true)
            {
                fg.AppendItem(item.AttackDamage, "AttackDamage");
            }
            if (printMask?.Strength ?? true)
            {
                fg.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendItem(item.Intelligence, "Intelligence");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendItem(item.Willpower, "Willpower");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendItem(item.Agility, "Agility");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendItem(item.Endurance, "Endurance");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendItem(item.Personality, "Personality");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendItem(item.Luck, "Luck");
            }
            if ((printMask?.AttackReach ?? true)
                && item.AttackReach.TryGet(out var AttackReachItem))
            {
                fg.AppendItem(AttackReachItem, "AttackReach");
            }
            if ((printMask?.CombatStyle ?? true)
                && item.CombatStyle.TryGet(out var CombatStyleItem))
            {
                fg.AppendItem(CombatStyleItem, "CombatStyle");
            }
            if ((printMask?.TurningSpeed ?? true)
                && item.TurningSpeed.TryGet(out var TurningSpeedItem))
            {
                fg.AppendItem(TurningSpeedItem, "TurningSpeed");
            }
            if ((printMask?.BaseScale ?? true)
                && item.BaseScale.TryGet(out var BaseScaleItem))
            {
                fg.AppendItem(BaseScaleItem, "BaseScale");
            }
            if ((printMask?.FootWeight ?? true)
                && item.FootWeight.TryGet(out var FootWeightItem))
            {
                fg.AppendItem(FootWeightItem, "FootWeight");
            }
            if ((printMask?.BloodSpray ?? true)
                && item.BloodSpray.TryGet(out var BloodSprayItem))
            {
                fg.AppendItem(BloodSprayItem, "BloodSpray");
            }
            if ((printMask?.BloodDecal ?? true)
                && item.BloodDecal.TryGet(out var BloodDecalItem))
            {
                fg.AppendItem(BloodDecalItem, "BloodDecal");
            }
            if ((printMask?.InheritsSoundFrom ?? true)
                && item.InheritsSoundFrom.TryGet(out var InheritsSoundFromItem))
            {
                fg.AppendItem(InheritsSoundFromItem, "InheritsSoundFrom");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds.TryGet(out var SoundsItem))
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SoundsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.ACBSDataTypeState ?? true)
            {
                fg.AppendItem(item.ACBSDataTypeState, "ACBSDataTypeState");
            }
            if (printMask?.AIDTDataTypeState ?? true)
            {
                fg.AppendItem(item.AIDTDataTypeState, "AIDTDataTypeState");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            ICreatureGetter item,
            Creature.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Items?.Overall.HasValue ?? false && checkMask.Items!.Overall.Value != (item.Items != null)) return false;
            if (checkMask.Spells?.Overall.HasValue ?? false && checkMask.Spells!.Overall.Value != (item.Spells != null)) return false;
            if (checkMask.Models?.Overall.HasValue ?? false && checkMask.Models!.Overall.Value != (item.Models != null)) return false;
            if (checkMask.NIFT.HasValue && checkMask.NIFT.Value != (item.NIFT != null)) return false;
            if (checkMask.Factions?.Overall.HasValue ?? false && checkMask.Factions!.Overall.Value != (item.Factions != null)) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != (item.DeathItem.FormKey != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.AIPackages?.Overall.HasValue ?? false && checkMask.AIPackages!.Overall.Value != (item.AIPackages != null)) return false;
            if (checkMask.Animations?.Overall.HasValue ?? false && checkMask.Animations!.Overall.Value != (item.Animations != null)) return false;
            if (checkMask.AttackReach.HasValue && checkMask.AttackReach.Value != (item.AttackReach != null)) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != (item.CombatStyle.FormKey != null)) return false;
            if (checkMask.TurningSpeed.HasValue && checkMask.TurningSpeed.Value != (item.TurningSpeed != null)) return false;
            if (checkMask.BaseScale.HasValue && checkMask.BaseScale.Value != (item.BaseScale != null)) return false;
            if (checkMask.FootWeight.HasValue && checkMask.FootWeight.Value != (item.FootWeight != null)) return false;
            if (checkMask.BloodSpray.HasValue && checkMask.BloodSpray.Value != (item.BloodSpray != null)) return false;
            if (checkMask.BloodDecal.HasValue && checkMask.BloodDecal.Value != (item.BloodDecal != null)) return false;
            if (checkMask.InheritsSoundFrom.HasValue && checkMask.InheritsSoundFrom.Value != (item.InheritsSoundFrom.FormKey != null)) return false;
            if (checkMask.Sounds?.Overall.HasValue ?? false && checkMask.Sounds!.Overall.Value != (item.Sounds != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ICreatureGetter item,
            Creature.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            if (item.Items.TryGet(out var ItemsItem))
            {
                mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ItemEntry.Mask<bool>?>>?>(true, ItemsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, ItemEntry.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.Spells = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Spells != null), default);
            mask.Models = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Models != null), default);
            mask.NIFT = (item.NIFT != null);
            mask.Flags = true;
            mask.BaseSpellPoints = true;
            mask.Fatigue = true;
            mask.BarterGold = true;
            mask.LevelOffset = true;
            mask.CalcMin = true;
            mask.CalcMax = true;
            if (item.Factions.TryGet(out var FactionsItem))
            {
                mask.Factions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RankPlacement.Mask<bool>?>>?>(true, FactionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RankPlacement.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.DeathItem = (item.DeathItem.FormKey != null);
            mask.Script = (item.Script.FormKey != null);
            mask.Aggression = true;
            mask.Confidence = true;
            mask.EnergyLevel = true;
            mask.Responsibility = true;
            mask.BuySellServices = true;
            mask.Teaches = true;
            mask.MaximumTrainingLevel = true;
            mask.AIPackages = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.AIPackages != null), default);
            mask.Animations = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Animations != null), default);
            mask.CreatureType = true;
            mask.CombatSkill = true;
            mask.MagicSkill = true;
            mask.StealthSkill = true;
            mask.SoulLevel = true;
            mask.Health = true;
            mask.AttackDamage = true;
            mask.Strength = true;
            mask.Intelligence = true;
            mask.Willpower = true;
            mask.Agility = true;
            mask.Speed = true;
            mask.Endurance = true;
            mask.Personality = true;
            mask.Luck = true;
            mask.AttackReach = (item.AttackReach != null);
            mask.CombatStyle = (item.CombatStyle.FormKey != null);
            mask.TurningSpeed = (item.TurningSpeed != null);
            mask.BaseScale = (item.BaseScale != null);
            mask.FootWeight = (item.FootWeight != null);
            mask.BloodSpray = (item.BloodSpray != null);
            mask.BloodDecal = (item.BloodDecal != null);
            mask.InheritsSoundFrom = (item.InheritsSoundFrom.FormKey != null);
            if (item.Sounds.TryGet(out var SoundsItem))
            {
                mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, CreatureSound.Mask<bool>?>>?>(true, SoundsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, CreatureSound.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.ACBSDataTypeState = true;
            mask.AIDTDataTypeState = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Creature_FieldIndex ConvertFieldIndex(NPCAbstract_FieldIndex index)
        {
            switch (index)
            {
                case NPCAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case NPCAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(NPCSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NPCSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case NPCSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureGetter? lhs,
            ICreatureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            if (!lhs.Models.SequenceEqual(rhs.Models)) return false;
            if (!MemorySliceExt.Equal(lhs.NIFT, rhs.NIFT)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.BaseSpellPoints != rhs.BaseSpellPoints) return false;
            if (lhs.Fatigue != rhs.Fatigue) return false;
            if (lhs.BarterGold != rhs.BarterGold) return false;
            if (lhs.LevelOffset != rhs.LevelOffset) return false;
            if (lhs.CalcMin != rhs.CalcMin) return false;
            if (lhs.CalcMax != rhs.CalcMax) return false;
            if (!lhs.Factions.SequenceEqual(rhs.Factions)) return false;
            if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (lhs.Aggression != rhs.Aggression) return false;
            if (lhs.Confidence != rhs.Confidence) return false;
            if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            if (lhs.Responsibility != rhs.Responsibility) return false;
            if (lhs.BuySellServices != rhs.BuySellServices) return false;
            if (lhs.Teaches != rhs.Teaches) return false;
            if (lhs.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            if (!lhs.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            if (!lhs.Animations.SequenceEqual(rhs.Animations)) return false;
            if (lhs.CreatureType != rhs.CreatureType) return false;
            if (lhs.CombatSkill != rhs.CombatSkill) return false;
            if (lhs.MagicSkill != rhs.MagicSkill) return false;
            if (lhs.StealthSkill != rhs.StealthSkill) return false;
            if (lhs.SoulLevel != rhs.SoulLevel) return false;
            if (lhs.Health != rhs.Health) return false;
            if (lhs.AttackDamage != rhs.AttackDamage) return false;
            if (lhs.Strength != rhs.Strength) return false;
            if (lhs.Intelligence != rhs.Intelligence) return false;
            if (lhs.Willpower != rhs.Willpower) return false;
            if (lhs.Agility != rhs.Agility) return false;
            if (lhs.Speed != rhs.Speed) return false;
            if (lhs.Endurance != rhs.Endurance) return false;
            if (lhs.Personality != rhs.Personality) return false;
            if (lhs.Luck != rhs.Luck) return false;
            if (lhs.AttackReach != rhs.AttackReach) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!lhs.TurningSpeed.EqualsWithin(rhs.TurningSpeed)) return false;
            if (!lhs.BaseScale.EqualsWithin(rhs.BaseScale)) return false;
            if (!lhs.FootWeight.EqualsWithin(rhs.FootWeight)) return false;
            if (!string.Equals(lhs.BloodSpray, rhs.BloodSpray)) return false;
            if (!string.Equals(lhs.BloodDecal, rhs.BloodDecal)) return false;
            if (!lhs.InheritsSoundFrom.Equals(rhs.InheritsSoundFrom)) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            if (lhs.ACBSDataTypeState != rhs.ACBSDataTypeState) return false;
            if (lhs.AIDTDataTypeState != rhs.AIDTDataTypeState) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            INPCAbstractGetter? lhs,
            INPCAbstractGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public override bool Equals(
            INPCSpawnGetter? lhs,
            INPCSpawnGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter);
        }
        
        public virtual int GetHashCode(ICreatureGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Items).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Spells).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Models).CombineHashCode(ret);
            if (item.NIFT.TryGet(out var NIFTItem))
            {
                ret = HashHelper.GetHashCode(NIFTItem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BaseSpellPoints).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Fatigue).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BarterGold).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.LevelOffset).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CalcMin).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CalcMax).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Factions).CombineHashCode(ret);
            if (item.DeathItem.TryGet(out var DeathItemitem))
            {
                ret = HashHelper.GetHashCode(DeathItemitem).CombineHashCode(ret);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                ret = HashHelper.GetHashCode(Scriptitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Aggression).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Confidence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EnergyLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Responsibility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BuySellServices).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Teaches).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MaximumTrainingLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AIPackages).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Animations).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CreatureType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CombatSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MagicSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.StealthSkill).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SoulLevel).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Health).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AttackDamage).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Strength).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Intelligence).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Willpower).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Agility).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Speed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Endurance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Personality).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Luck).CombineHashCode(ret);
            if (item.AttackReach.TryGet(out var AttackReachitem))
            {
                ret = HashHelper.GetHashCode(AttackReachitem).CombineHashCode(ret);
            }
            if (item.CombatStyle.TryGet(out var CombatStyleitem))
            {
                ret = HashHelper.GetHashCode(CombatStyleitem).CombineHashCode(ret);
            }
            if (item.TurningSpeed.TryGet(out var TurningSpeeditem))
            {
                ret = HashHelper.GetHashCode(TurningSpeeditem).CombineHashCode(ret);
            }
            if (item.BaseScale.TryGet(out var BaseScaleitem))
            {
                ret = HashHelper.GetHashCode(BaseScaleitem).CombineHashCode(ret);
            }
            if (item.FootWeight.TryGet(out var FootWeightitem))
            {
                ret = HashHelper.GetHashCode(FootWeightitem).CombineHashCode(ret);
            }
            if (item.BloodSpray.TryGet(out var BloodSprayitem))
            {
                ret = HashHelper.GetHashCode(BloodSprayitem).CombineHashCode(ret);
            }
            if (item.BloodDecal.TryGet(out var BloodDecalitem))
            {
                ret = HashHelper.GetHashCode(BloodDecalitem).CombineHashCode(ret);
            }
            if (item.InheritsSoundFrom.TryGet(out var InheritsSoundFromitem))
            {
                ret = HashHelper.GetHashCode(InheritsSoundFromitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Sounds).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ACBSDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.AIDTDataTypeState).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(INPCAbstractGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(INPCSpawnGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Creature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ICreatureGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Items != null)
            {
                foreach (var item in obj.Items.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            if (obj.Spells != null)
            {
                foreach (var item in obj.Spells)
                {
                    yield return item;
                }
            }
            if (obj.Factions != null)
            {
                foreach (var item in obj.Factions.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield return obj.DeathItem;
            yield return obj.Script;
            if (obj.AIPackages != null)
            {
                foreach (var item in obj.AIPackages)
                {
                    yield return item;
                }
            }
            yield return obj.CombatStyle;
            yield return obj.InheritsSoundFrom;
            if (obj.Sounds != null)
            {
                foreach (var item in obj.Sounds.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(Creature obj, Creature rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Creature(getNextFormKey());
            ret.DeepCopyIn((Creature)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Creature)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class CreatureSetterTranslationCommon : NPCAbstractSetterTranslationCommon
    {
        public new static readonly CreatureSetterTranslationCommon Instance = new CreatureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ICreatureInternal item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ICreature item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ItemEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                try
                {
                    if ((rhs.Spells != null))
                    {
                        item.Spells = 
                            rhs.Spells
                            .Select(r => new FormLink<SpellAbstract>(r.FormKey))
                            .ToExtendedList<IFormLink<SpellAbstract>>();
                    }
                    else
                    {
                        item.Spells = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                try
                {
                    if ((rhs.Models != null))
                    {
                        item.Models = 
                            rhs.Models
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Models = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                if(rhs.NIFT.TryGet(out var NIFTrhs))
                {
                    item.NIFT = NIFTrhs.ToArray();
                }
                else
                {
                    item.NIFT = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseSpellPoints) ?? true))
            {
                item.BaseSpellPoints = rhs.BaseSpellPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Fatigue) ?? true))
            {
                item.Fatigue = rhs.Fatigue;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BarterGold) ?? true))
            {
                item.BarterGold = rhs.BarterGold;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.LevelOffset) ?? true))
            {
                item.LevelOffset = rhs.LevelOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CalcMin) ?? true))
            {
                item.CalcMin = rhs.CalcMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CalcMax) ?? true))
            {
                item.CalcMax = rhs.CalcMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                try
                {
                    if ((rhs.Factions != null))
                    {
                        item.Factions = 
                            rhs.Factions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<RankPlacement>();
                    }
                    else
                    {
                        item.Factions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.FormKey = rhs.DeathItem.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                item.Script.FormKey = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Aggression) ?? true))
            {
                item.Aggression = rhs.Aggression;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Confidence) ?? true))
            {
                item.Confidence = rhs.Confidence;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.EnergyLevel) ?? true))
            {
                item.EnergyLevel = rhs.EnergyLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Responsibility) ?? true))
            {
                item.Responsibility = rhs.Responsibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BuySellServices) ?? true))
            {
                item.BuySellServices = rhs.BuySellServices;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                try
                {
                    if ((rhs.AIPackages != null))
                    {
                        item.AIPackages = 
                            rhs.AIPackages
                            .Select(r => new FormLink<AIPackage>(r.FormKey))
                            .ToExtendedList<IFormLink<AIPackage>>();
                    }
                    else
                    {
                        item.AIPackages = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                try
                {
                    if ((rhs.Animations != null))
                    {
                        item.Animations = 
                            rhs.Animations
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Animations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CreatureType) ?? true))
            {
                item.CreatureType = rhs.CreatureType;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatSkill) ?? true))
            {
                item.CombatSkill = rhs.CombatSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.MagicSkill) ?? true))
            {
                item.MagicSkill = rhs.MagicSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.StealthSkill) ?? true))
            {
                item.StealthSkill = rhs.StealthSkill;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.SoulLevel) ?? true))
            {
                item.SoulLevel = rhs.SoulLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackDamage) ?? true))
            {
                item.AttackDamage = rhs.AttackDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                item.AttackReach = rhs.AttackReach;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle.FormKey = rhs.CombatStyle.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                item.TurningSpeed = rhs.TurningSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                item.BaseScale = rhs.BaseScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                item.FootWeight = rhs.FootWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                item.BloodSpray = rhs.BloodSpray;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                item.BloodDecal = rhs.BloodDecal;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                item.InheritsSoundFrom.FormKey = rhs.InheritsSoundFrom.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                try
                {
                    if ((rhs.Sounds != null))
                    {
                        item.Sounds = 
                            rhs.Sounds
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<CreatureSound>();
                    }
                    else
                    {
                        item.Sounds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.ACBSDataTypeState) ?? true))
            {
                item.ACBSDataTypeState = rhs.ACBSDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AIDTDataTypeState) ?? true))
            {
                item.AIDTDataTypeState = rhs.AIDTDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            INPCAbstractInternal item,
            INPCAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INPCAbstract item,
            INPCAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INPCSpawnInternal item,
            INPCSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INPCSpawn item,
            INPCSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Creature DeepCopy(
            ICreatureGetter item,
            Creature.TranslationMask? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Creature DeepCopy(
            ICreatureGetter item,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Creature DeepCopy(
            ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Creature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static Creature_Registration Registration => Creature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureXmlWriteTranslation :
        NPCAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static CreatureXmlWriteTranslation Instance = new CreatureXmlWriteTranslation();

        public static void WriteToNodeXml(
            ICreatureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            NPCAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Creature_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Creature_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                }
            }
            if ((item.Items != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IItemEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Creature_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Items),
                    transl: (XElement subNode, IItemEntryGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ItemEntryXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.Spells != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<ISpellAbstractGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Creature_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Spells),
                    transl: (XElement subNode, IFormLinkGetter<ISpellAbstractGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Models != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Models),
                    item: item.Models,
                    fieldIndex: (int)Creature_FieldIndex.Models,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Models),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.NIFT != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NIFT),
                    item: item.NIFT.Value,
                    fieldIndex: (int)Creature_FieldIndex.NIFT,
                    errorMask: errorMask);
            }
            if (item.ACBSDataTypeState.HasFlag(Creature.ACBSDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<Creature.CreatureFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)Creature_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseSpellPoints) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BaseSpellPoints),
                        item: item.BaseSpellPoints,
                        fieldIndex: (int)Creature_FieldIndex.BaseSpellPoints,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Fatigue) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Fatigue),
                        item: item.Fatigue,
                        fieldIndex: (int)Creature_FieldIndex.Fatigue,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BarterGold) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BarterGold),
                        item: item.BarterGold,
                        fieldIndex: (int)Creature_FieldIndex.BarterGold,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.LevelOffset) ?? true))
                {
                    Int16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.LevelOffset),
                        item: item.LevelOffset,
                        fieldIndex: (int)Creature_FieldIndex.LevelOffset,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CalcMin) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMin),
                        item: item.CalcMin,
                        fieldIndex: (int)Creature_FieldIndex.CalcMin,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CalcMax) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CalcMax),
                        item: item.CalcMax,
                        fieldIndex: (int)Creature_FieldIndex.CalcMax,
                        errorMask: errorMask);
                }
            }
            if ((item.Factions != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                ListXmlTranslation<IRankPlacementGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)Creature_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Factions),
                    transl: (XElement subNode, IRankPlacementGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((RankPlacementXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.DeathItem.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.AIDTDataTypeState.HasFlag(Creature.AIDTDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Aggression) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Aggression),
                        item: item.Aggression,
                        fieldIndex: (int)Creature_FieldIndex.Aggression,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Confidence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Confidence),
                        item: item.Confidence,
                        fieldIndex: (int)Creature_FieldIndex.Confidence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.EnergyLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EnergyLevel),
                        item: item.EnergyLevel,
                        fieldIndex: (int)Creature_FieldIndex.EnergyLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Responsibility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Responsibility),
                        item: item.Responsibility,
                        fieldIndex: (int)Creature_FieldIndex.Responsibility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BuySellServices) ?? true))
                {
                    EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.BuySellServices),
                        item: item.BuySellServices,
                        fieldIndex: (int)Creature_FieldIndex.BuySellServices,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Teaches) ?? true))
                {
                    EnumXmlTranslation<Skill>.Instance.Write(
                        node: node,
                        name: nameof(item.Teaches),
                        item: item.Teaches,
                        fieldIndex: (int)Creature_FieldIndex.Teaches,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.MaximumTrainingLevel) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MaximumTrainingLevel),
                        item: item.MaximumTrainingLevel,
                        fieldIndex: (int)Creature_FieldIndex.MaximumTrainingLevel,
                        errorMask: errorMask);
                }
            }
            if ((item.AIPackages != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)Creature_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.AIPackages),
                    transl: (XElement subNode, IFormLinkGetter<IAIPackageGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Animations != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)Creature_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Animations),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if (item.DATADataTypeState.HasFlag(Creature.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CreatureType) ?? true))
                {
                    EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                        node: node,
                        name: nameof(item.CreatureType),
                        item: item.CreatureType,
                        fieldIndex: (int)Creature_FieldIndex.CreatureType,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatSkill) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CombatSkill),
                        item: item.CombatSkill,
                        fieldIndex: (int)Creature_FieldIndex.CombatSkill,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.MagicSkill) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.MagicSkill),
                        item: item.MagicSkill,
                        fieldIndex: (int)Creature_FieldIndex.MagicSkill,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.StealthSkill) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.StealthSkill),
                        item: item.StealthSkill,
                        fieldIndex: (int)Creature_FieldIndex.StealthSkill,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.SoulLevel) ?? true))
                {
                    EnumXmlTranslation<SoulLevel>.Instance.Write(
                        node: node,
                        name: nameof(item.SoulLevel),
                        item: item.SoulLevel,
                        fieldIndex: (int)Creature_FieldIndex.SoulLevel,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Health) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Health),
                        item: item.Health,
                        fieldIndex: (int)Creature_FieldIndex.Health,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackDamage) ?? true))
                {
                    UInt16XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.AttackDamage),
                        item: item.AttackDamage,
                        fieldIndex: (int)Creature_FieldIndex.AttackDamage,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Strength) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Strength),
                        item: item.Strength,
                        fieldIndex: (int)Creature_FieldIndex.Strength,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Intelligence) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Intelligence),
                        item: item.Intelligence,
                        fieldIndex: (int)Creature_FieldIndex.Intelligence,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Willpower) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Willpower),
                        item: item.Willpower,
                        fieldIndex: (int)Creature_FieldIndex.Willpower,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Agility) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Agility),
                        item: item.Agility,
                        fieldIndex: (int)Creature_FieldIndex.Agility,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Speed) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Speed),
                        item: item.Speed,
                        fieldIndex: (int)Creature_FieldIndex.Speed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Endurance) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Endurance),
                        item: item.Endurance,
                        fieldIndex: (int)Creature_FieldIndex.Endurance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Personality) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Personality),
                        item: item.Personality,
                        fieldIndex: (int)Creature_FieldIndex.Personality,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Luck) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Luck),
                        item: item.Luck,
                        fieldIndex: (int)Creature_FieldIndex.Luck,
                        errorMask: errorMask);
                }
            }
            if ((item.AttackReach != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.AttackReach),
                    item: item.AttackReach.Value,
                    fieldIndex: (int)Creature_FieldIndex.AttackReach,
                    errorMask: errorMask);
            }
            if ((item.CombatStyle.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if ((item.TurningSpeed != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TurningSpeed),
                    item: item.TurningSpeed.Value,
                    fieldIndex: (int)Creature_FieldIndex.TurningSpeed,
                    errorMask: errorMask);
            }
            if ((item.BaseScale != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseScale),
                    item: item.BaseScale.Value,
                    fieldIndex: (int)Creature_FieldIndex.BaseScale,
                    errorMask: errorMask);
            }
            if ((item.FootWeight != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FootWeight),
                    item: item.FootWeight.Value,
                    fieldIndex: (int)Creature_FieldIndex.FootWeight,
                    errorMask: errorMask);
            }
            if ((item.BloodSpray != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BloodSpray),
                    item: item.BloodSpray,
                    fieldIndex: (int)Creature_FieldIndex.BloodSpray,
                    errorMask: errorMask);
            }
            if ((item.BloodDecal != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BloodDecal),
                    item: item.BloodDecal,
                    fieldIndex: (int)Creature_FieldIndex.BloodDecal,
                    errorMask: errorMask);
            }
            if ((item.InheritsSoundFrom.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.InheritsSoundFrom),
                    item: item.InheritsSoundFrom.FormKey,
                    fieldIndex: (int)Creature_FieldIndex.InheritsSoundFrom,
                    errorMask: errorMask);
            }
            if ((item.Sounds != null)
                && (translationMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<ICreatureSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)Creature_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Sounds),
                    transl: (XElement subNode, ICreatureSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((CreatureSoundXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.ACBSDataTypeState) ?? true))
            {
                EnumXmlTranslation<Creature.ACBSDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.ACBSDataTypeState),
                    item: item.ACBSDataTypeState,
                    fieldIndex: (int)Creature_FieldIndex.ACBSDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.AIDTDataTypeState) ?? true))
            {
                EnumXmlTranslation<Creature.AIDTDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.AIDTDataTypeState),
                    item: item.AIDTDataTypeState,
                    fieldIndex: (int)Creature_FieldIndex.AIDTDataTypeState,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Creature_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<Creature.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)Creature_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Creature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Creature");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INPCSpawnGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ICreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class CreatureXmlCreateTranslation : NPCAbstractXmlCreateTranslation
    {
        public new readonly static CreatureXmlCreateTranslation Instance = new CreatureXmlCreateTranslation();

        public static void FillPublicXml(
            ICreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    CreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ICreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                    try
                    {
                        if (ListXmlTranslation<ItemEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items = ItemsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Items = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<SpellAbstract>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells = SpellsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Spells = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Models":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var ModelsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Models = ModelsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Models = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "NIFT":
                    errorMask?.PushIndex((int)Creature_FieldIndex.NIFT);
                    try
                    {
                        item.NIFT = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Creature.CreatureFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.ACBSDataTypeState |= Creature.ACBSDataType.Has;
                    break;
                case "BaseSpellPoints":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BaseSpellPoints);
                    try
                    {
                        item.BaseSpellPoints = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Fatigue":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Fatigue);
                    try
                    {
                        item.Fatigue = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BarterGold":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BarterGold);
                    try
                    {
                        item.BarterGold = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelOffset":
                    errorMask?.PushIndex((int)Creature_FieldIndex.LevelOffset);
                    try
                    {
                        item.LevelOffset = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMin":
                    errorMask?.PushIndex((int)Creature_FieldIndex.CalcMin);
                    try
                    {
                        item.CalcMin = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CalcMax":
                    errorMask?.PushIndex((int)Creature_FieldIndex.CalcMax);
                    try
                    {
                        item.CalcMax = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                    try
                    {
                        if (ListXmlTranslation<RankPlacement>.Instance.Parse(
                            node: node,
                            enumer: out var FactionsItem,
                            transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Factions = FactionsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Factions = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeathItem":
                    errorMask?.PushIndex((int)Creature_FieldIndex.DeathItem);
                    try
                    {
                        item.DeathItem.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Script);
                    try
                    {
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Aggression":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Aggression);
                    try
                    {
                        item.Aggression = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.AIDTDataTypeState |= Creature.AIDTDataType.Has;
                    break;
                case "Confidence":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Confidence);
                    try
                    {
                        item.Confidence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnergyLevel":
                    errorMask?.PushIndex((int)Creature_FieldIndex.EnergyLevel);
                    try
                    {
                        item.EnergyLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responsibility":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Responsibility);
                    try
                    {
                        item.Responsibility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BuySellServices":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BuySellServices);
                    try
                    {
                        item.BuySellServices = EnumXmlTranslation<NPC.BuySellServiceFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Teaches":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Teaches);
                    try
                    {
                        item.Teaches = EnumXmlTranslation<Skill>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumTrainingLevel":
                    errorMask?.PushIndex((int)Creature_FieldIndex.MaximumTrainingLevel);
                    try
                    {
                        item.MaximumTrainingLevel = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<AIPackage>>.Instance.Parse(
                            node: node,
                            enumer: out var AIPackagesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AIPackages = AIPackagesItem.ToExtendedList();
                        }
                        else
                        {
                            item.AIPackages = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations = AnimationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Animations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CreatureType":
                    errorMask?.PushIndex((int)Creature_FieldIndex.CreatureType);
                    try
                    {
                        item.CreatureType = EnumXmlTranslation<Creature.CreatureTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= Creature.DATADataType.Has;
                    break;
                case "CombatSkill":
                    errorMask?.PushIndex((int)Creature_FieldIndex.CombatSkill);
                    try
                    {
                        item.CombatSkill = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSkill":
                    errorMask?.PushIndex((int)Creature_FieldIndex.MagicSkill);
                    try
                    {
                        item.MagicSkill = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "StealthSkill":
                    errorMask?.PushIndex((int)Creature_FieldIndex.StealthSkill);
                    try
                    {
                        item.StealthSkill = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SoulLevel":
                    errorMask?.PushIndex((int)Creature_FieldIndex.SoulLevel);
                    try
                    {
                        item.SoulLevel = EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Health);
                    try
                    {
                        item.Health = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackDamage":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AttackDamage);
                    try
                    {
                        item.AttackDamage = UInt16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Strength":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Strength);
                    try
                    {
                        item.Strength = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Intelligence);
                    try
                    {
                        item.Intelligence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Willpower);
                    try
                    {
                        item.Willpower = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Agility);
                    try
                    {
                        item.Agility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Speed);
                    try
                    {
                        item.Speed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Endurance);
                    try
                    {
                        item.Endurance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Personality);
                    try
                    {
                        item.Personality = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Luck);
                    try
                    {
                        item.Luck = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AttackReach":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AttackReach);
                    try
                    {
                        item.AttackReach = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    errorMask?.PushIndex((int)Creature_FieldIndex.CombatStyle);
                    try
                    {
                        item.CombatStyle.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TurningSpeed":
                    errorMask?.PushIndex((int)Creature_FieldIndex.TurningSpeed);
                    try
                    {
                        item.TurningSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseScale":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BaseScale);
                    try
                    {
                        item.BaseScale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FootWeight":
                    errorMask?.PushIndex((int)Creature_FieldIndex.FootWeight);
                    try
                    {
                        item.FootWeight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BloodSpray":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BloodSpray);
                    try
                    {
                        item.BloodSpray = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BloodDecal":
                    errorMask?.PushIndex((int)Creature_FieldIndex.BloodDecal);
                    try
                    {
                        item.BloodDecal = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "InheritsSoundFrom":
                    errorMask?.PushIndex((int)Creature_FieldIndex.InheritsSoundFrom);
                    try
                    {
                        item.InheritsSoundFrom.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                    try
                    {
                        if (ListXmlTranslation<CreatureSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<CreatureSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds = SoundsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Sounds = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ACBSDataTypeState":
                    errorMask?.PushIndex((int)Creature_FieldIndex.ACBSDataTypeState);
                    try
                    {
                        item.ACBSDataTypeState = EnumXmlTranslation<Creature.ACBSDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIDTDataTypeState":
                    errorMask?.PushIndex((int)Creature_FieldIndex.AIDTDataTypeState);
                    try
                    {
                        item.AIDTDataTypeState = EnumXmlTranslation<Creature.AIDTDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)Creature_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<Creature.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    NPCAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class CreatureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ICreatureGetter item,
            XElement node,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ICreatureGetter item,
            string path,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ICreatureGetter item,
            Stream stream,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureBinaryWriteTranslation :
        NPCAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static CreatureBinaryWriteTranslation Instance = new CreatureBinaryWriteTranslation();

        public static void WriteEmbedded(
            ICreatureGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void WriteRecordTypes(
            ICreatureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IItemEntryGetter subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ItemEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: m);
                    }
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<ISpellAbstractGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellAbstractGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Creature_Registration.SPLO_HEADER),
                        masterReferences: m);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Models,
                recordType: Creature_Registration.NIFZ_HEADER,
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NIFT,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NIFT_HEADER));
            if (item.ACBSDataTypeState.HasFlag(Creature.ACBSDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Creature_Registration.ACBS_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    writer.Write(item.BaseSpellPoints);
                    writer.Write(item.Fatigue);
                    writer.Write(item.BarterGold);
                    writer.Write(item.LevelOffset);
                    writer.Write(item.CalcMin);
                    writer.Write(item.CalcMax);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: m);
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.INAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.SCRI_HEADER),
                masterReferences: masterReferences);
            if (item.AIDTDataTypeState.HasFlag(Creature.AIDTDataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Creature_Registration.AIDT_HEADER)))
                {
                    writer.Write(item.Aggression);
                    writer.Write(item.Confidence);
                    writer.Write(item.EnergyLevel);
                    writer.Write(item.Responsibility);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<NPC.BuySellServiceFlag>.Instance.Write(
                        writer,
                        item.BuySellServices,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Skill>.Instance.Write(
                        writer,
                        item.Teaches,
                        length: 1);
                    writer.Write(item.MaximumTrainingLevel);
                    writer.WriteZeros(2);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.AIPackages,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IAIPackageGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Creature_Registration.PKID_HEADER),
                        masterReferences: m);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                recordType: Creature_Registration.KFFZ_HEADER,
                transl: StringBinaryTranslation.Instance.Write);
            if (item.DATADataTypeState.HasFlag(Creature.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(Creature_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Creature.CreatureTypeEnum>.Instance.Write(
                        writer,
                        item.CreatureType,
                        length: 1);
                    writer.Write(item.CombatSkill);
                    writer.Write(item.MagicSkill);
                    writer.Write(item.StealthSkill);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.Write(
                        writer,
                        item.SoulLevel,
                        length: 2);
                    writer.Write(item.Health);
                    writer.Write(item.AttackDamage);
                    writer.Write(item.Strength);
                    writer.Write(item.Intelligence);
                    writer.Write(item.Willpower);
                    writer.Write(item.Agility);
                    writer.Write(item.Speed);
                    writer.Write(item.Endurance);
                    writer.Write(item.Personality);
                    writer.Write(item.Luck);
                }
            }
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackReach,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.RNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.ZNAM_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TurningSpeed,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.TNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseScale,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.BNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FootWeight,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.WNAM_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BloodSpray,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM0_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BloodDecal,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.NAM1_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InheritsSoundFrom,
                header: recordTypeConverter.ConvertToCustom(Creature_Registration.CSCR_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ICreatureSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, ICreatureSoundGetter subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((CreatureSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            masterReferences: m);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            ICreatureGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Creature_Registration.CREA_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            INPCAbstractGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            INPCSpawnGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ICreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class CreatureBinaryCreateTranslation : NPCAbstractBinaryCreateTranslation
    {
        public new readonly static CreatureBinaryCreateTranslation Instance = new CreatureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class CreatureBinaryOverlay :
        NPCAbstractBinaryOverlay,
        ICreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static Creature_Registration Registration => Creature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CreatureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ICreatureGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => CreatureCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => CreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((CreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((CreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        public IReadOnlyList<IItemEntryGetter>? Items { get; private set; }
        public IReadOnlyList<IFormLinkGetter<ISpellAbstractGetter>>? Spells { get; private set; }
        public IReadOnlyList<String>? Models { get; private set; }
        #region NIFT
        private int? _NIFTLocation;
        public ReadOnlyMemorySlice<Byte>? NIFT => _NIFTLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _NIFTLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private int? _ACBSLocation;
        public Creature.ACBSDataType ACBSDataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _ACBSLocation!.Value + 0x0;
        private bool _Flags_IsSet => _ACBSLocation.HasValue;
        public Creature.CreatureFlag Flags => _Flags_IsSet ? (Creature.CreatureFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region BaseSpellPoints
        private int _BaseSpellPointsLocation => _ACBSLocation!.Value + 0x4;
        private bool _BaseSpellPoints_IsSet => _ACBSLocation.HasValue;
        public UInt16 BaseSpellPoints => _BaseSpellPoints_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BaseSpellPointsLocation, 2)) : default;
        #endregion
        #region Fatigue
        private int _FatigueLocation => _ACBSLocation!.Value + 0x6;
        private bool _Fatigue_IsSet => _ACBSLocation.HasValue;
        public UInt16 Fatigue => _Fatigue_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_FatigueLocation, 2)) : default;
        #endregion
        #region BarterGold
        private int _BarterGoldLocation => _ACBSLocation!.Value + 0x8;
        private bool _BarterGold_IsSet => _ACBSLocation.HasValue;
        public UInt16 BarterGold => _BarterGold_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_BarterGoldLocation, 2)) : default;
        #endregion
        #region LevelOffset
        private int _LevelOffsetLocation => _ACBSLocation!.Value + 0xA;
        private bool _LevelOffset_IsSet => _ACBSLocation.HasValue;
        public Int16 LevelOffset => _LevelOffset_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_data.Span.Slice(_LevelOffsetLocation, 2)) : default;
        #endregion
        #region CalcMin
        private int _CalcMinLocation => _ACBSLocation!.Value + 0xC;
        private bool _CalcMin_IsSet => _ACBSLocation.HasValue;
        public UInt16 CalcMin => _CalcMin_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CalcMinLocation, 2)) : default;
        #endregion
        #region CalcMax
        private int _CalcMaxLocation => _ACBSLocation!.Value + 0xE;
        private bool _CalcMax_IsSet => _ACBSLocation.HasValue;
        public UInt16 CalcMax => _CalcMax_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_CalcMaxLocation, 2)) : default;
        #endregion
        public IReadOnlyList<IRankPlacementGetter>? Factions { get; private set; }
        #region DeathItem
        private int? _DeathItemLocation;
        public bool DeathItem_IsSet => _DeathItemLocation.HasValue;
        public IFormLinkNullableGetter<IItemAbstractGetter> DeathItem => _DeathItemLocation.HasValue ? new FormLinkNullable<IItemAbstractGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DeathItemLocation.Value, _package.Meta)))) : FormLinkNullable<IItemAbstractGetter>.Empty;
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormLinkNullable<IScriptGetter>.Empty;
        #endregion
        private int? _AIDTLocation;
        public Creature.AIDTDataType AIDTDataTypeState { get; private set; }
        #region Aggression
        private int _AggressionLocation => _AIDTLocation!.Value + 0x0;
        private bool _Aggression_IsSet => _AIDTLocation.HasValue;
        public Byte Aggression => _Aggression_IsSet ? _data.Span[_AggressionLocation] : default;
        #endregion
        #region Confidence
        private int _ConfidenceLocation => _AIDTLocation!.Value + 0x1;
        private bool _Confidence_IsSet => _AIDTLocation.HasValue;
        public Byte Confidence => _Confidence_IsSet ? _data.Span[_ConfidenceLocation] : default;
        #endregion
        #region EnergyLevel
        private int _EnergyLevelLocation => _AIDTLocation!.Value + 0x2;
        private bool _EnergyLevel_IsSet => _AIDTLocation.HasValue;
        public Byte EnergyLevel => _EnergyLevel_IsSet ? _data.Span[_EnergyLevelLocation] : default;
        #endregion
        #region Responsibility
        private int _ResponsibilityLocation => _AIDTLocation!.Value + 0x3;
        private bool _Responsibility_IsSet => _AIDTLocation.HasValue;
        public Byte Responsibility => _Responsibility_IsSet ? _data.Span[_ResponsibilityLocation] : default;
        #endregion
        #region BuySellServices
        private int _BuySellServicesLocation => _AIDTLocation!.Value + 0x4;
        private bool _BuySellServices_IsSet => _AIDTLocation.HasValue;
        public NPC.BuySellServiceFlag BuySellServices => _BuySellServices_IsSet ? (NPC.BuySellServiceFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_BuySellServicesLocation, 4)) : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _AIDTLocation!.Value + 0x8;
        private bool _Teaches_IsSet => _AIDTLocation.HasValue;
        public Skill Teaches => _Teaches_IsSet ? (Skill)_data.Span.Slice(_TeachesLocation, 1)[0] : default;
        #endregion
        #region MaximumTrainingLevel
        private int _MaximumTrainingLevelLocation => _AIDTLocation!.Value + 0x9;
        private bool _MaximumTrainingLevel_IsSet => _AIDTLocation.HasValue;
        public Byte MaximumTrainingLevel => _MaximumTrainingLevel_IsSet ? _data.Span[_MaximumTrainingLevelLocation] : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IAIPackageGetter>>? AIPackages { get; private set; }
        public IReadOnlyList<String>? Animations { get; private set; }
        private int? _DATALocation;
        public Creature.DATADataType DATADataTypeState { get; private set; }
        #region CreatureType
        private int _CreatureTypeLocation => _DATALocation!.Value + 0x0;
        private bool _CreatureType_IsSet => _DATALocation.HasValue;
        public Creature.CreatureTypeEnum CreatureType => _CreatureType_IsSet ? (Creature.CreatureTypeEnum)_data.Span.Slice(_CreatureTypeLocation, 1)[0] : default;
        #endregion
        #region CombatSkill
        private int _CombatSkillLocation => _DATALocation!.Value + 0x1;
        private bool _CombatSkill_IsSet => _DATALocation.HasValue;
        public Byte CombatSkill => _CombatSkill_IsSet ? _data.Span[_CombatSkillLocation] : default;
        #endregion
        #region MagicSkill
        private int _MagicSkillLocation => _DATALocation!.Value + 0x2;
        private bool _MagicSkill_IsSet => _DATALocation.HasValue;
        public Byte MagicSkill => _MagicSkill_IsSet ? _data.Span[_MagicSkillLocation] : default;
        #endregion
        #region StealthSkill
        private int _StealthSkillLocation => _DATALocation!.Value + 0x3;
        private bool _StealthSkill_IsSet => _DATALocation.HasValue;
        public Byte StealthSkill => _StealthSkill_IsSet ? _data.Span[_StealthSkillLocation] : default;
        #endregion
        #region SoulLevel
        private int _SoulLevelLocation => _DATALocation!.Value + 0x4;
        private bool _SoulLevel_IsSet => _DATALocation.HasValue;
        public SoulLevel SoulLevel => _SoulLevel_IsSet ? (SoulLevel)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_SoulLevelLocation, 2)) : default;
        #endregion
        #region Health
        private int _HealthLocation => _DATALocation!.Value + 0x6;
        private bool _Health_IsSet => _DATALocation.HasValue;
        public UInt32 Health => _Health_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_HealthLocation, 4)) : default;
        #endregion
        #region AttackDamage
        private int _AttackDamageLocation => _DATALocation!.Value + 0xA;
        private bool _AttackDamage_IsSet => _DATALocation.HasValue;
        public UInt16 AttackDamage => _AttackDamage_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(_AttackDamageLocation, 2)) : default;
        #endregion
        #region Strength
        private int _StrengthLocation => _DATALocation!.Value + 0xC;
        private bool _Strength_IsSet => _DATALocation.HasValue;
        public Byte Strength => _Strength_IsSet ? _data.Span[_StrengthLocation] : default;
        #endregion
        #region Intelligence
        private int _IntelligenceLocation => _DATALocation!.Value + 0xD;
        private bool _Intelligence_IsSet => _DATALocation.HasValue;
        public Byte Intelligence => _Intelligence_IsSet ? _data.Span[_IntelligenceLocation] : default;
        #endregion
        #region Willpower
        private int _WillpowerLocation => _DATALocation!.Value + 0xE;
        private bool _Willpower_IsSet => _DATALocation.HasValue;
        public Byte Willpower => _Willpower_IsSet ? _data.Span[_WillpowerLocation] : default;
        #endregion
        #region Agility
        private int _AgilityLocation => _DATALocation!.Value + 0xF;
        private bool _Agility_IsSet => _DATALocation.HasValue;
        public Byte Agility => _Agility_IsSet ? _data.Span[_AgilityLocation] : default;
        #endregion
        #region Speed
        private int _SpeedLocation => _DATALocation!.Value + 0x10;
        private bool _Speed_IsSet => _DATALocation.HasValue;
        public Byte Speed => _Speed_IsSet ? _data.Span[_SpeedLocation] : default;
        #endregion
        #region Endurance
        private int _EnduranceLocation => _DATALocation!.Value + 0x11;
        private bool _Endurance_IsSet => _DATALocation.HasValue;
        public Byte Endurance => _Endurance_IsSet ? _data.Span[_EnduranceLocation] : default;
        #endregion
        #region Personality
        private int _PersonalityLocation => _DATALocation!.Value + 0x12;
        private bool _Personality_IsSet => _DATALocation.HasValue;
        public Byte Personality => _Personality_IsSet ? _data.Span[_PersonalityLocation] : default;
        #endregion
        #region Luck
        private int _LuckLocation => _DATALocation!.Value + 0x13;
        private bool _Luck_IsSet => _DATALocation.HasValue;
        public Byte Luck => _Luck_IsSet ? _data.Span[_LuckLocation] : default;
        #endregion
        #region AttackReach
        private int? _AttackReachLocation;
        public Byte? AttackReach => _AttackReachLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _AttackReachLocation.Value, _package.Meta)[0] : default(Byte?);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public bool CombatStyle_IsSet => _CombatStyleLocation.HasValue;
        public IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormLinkNullable<ICombatStyleGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CombatStyleLocation.Value, _package.Meta)))) : FormLinkNullable<ICombatStyleGetter>.Empty;
        #endregion
        #region TurningSpeed
        private int? _TurningSpeedLocation;
        public Single? TurningSpeed => _TurningSpeedLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _TurningSpeedLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region BaseScale
        private int? _BaseScaleLocation;
        public Single? BaseScale => _BaseScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _BaseScaleLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region FootWeight
        private int? _FootWeightLocation;
        public Single? FootWeight => _FootWeightLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _FootWeightLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region BloodSpray
        private int? _BloodSprayLocation;
        public String? BloodSpray => _BloodSprayLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _BloodSprayLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region BloodDecal
        private int? _BloodDecalLocation;
        public String? BloodDecal => _BloodDecalLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _BloodDecalLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region InheritsSoundFrom
        private int? _InheritsSoundFromLocation;
        public bool InheritsSoundFrom_IsSet => _InheritsSoundFromLocation.HasValue;
        public IFormLinkNullableGetter<ICreatureGetter> InheritsSoundFrom => _InheritsSoundFromLocation.HasValue ? new FormLinkNullable<ICreatureGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _InheritsSoundFromLocation.Value, _package.Meta)))) : FormLinkNullable<ICreatureGetter>.Empty;
        #endregion
        public IReadOnlyList<ICreatureSoundGetter>? Sounds { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected CreatureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static CreatureBinaryOverlay CreatureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new CreatureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Model);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryOverlaySetList<ItemEntryBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ItemEntryBinaryOverlay.ItemEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Items);
                }
                case 0x4F4C5053: // SPLO
                {
                    this.Spells = BinaryOverlaySetList<IFormLinkGetter<ISpellAbstractGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<ISpellAbstractGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Spells);
                }
                case 0x5A46494E: // NIFZ
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Models = BinaryOverlaySetList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Models);
                }
                case 0x5446494E: // NIFT
                {
                    _NIFTLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.NIFT);
                }
                case 0x53424341: // ACBS
                {
                    _ACBSLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.ACBSDataTypeState = Creature.ACBSDataType.Has;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CalcMax);
                }
                case 0x4D414E53: // SNAM
                {
                    this.Factions = BinaryOverlaySetList<RankPlacementBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    _DeathItemLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.DeathItem);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Script);
                }
                case 0x54444941: // AIDT
                {
                    _AIDTLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.AIDTDataTypeState = Creature.AIDTDataType.Has;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.MaximumTrainingLevel);
                }
                case 0x44494B50: // PKID
                {
                    this.AIPackages = BinaryOverlaySetList<IFormLinkGetter<IAIPackageGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IAIPackageGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    var subMeta = _package.Meta.ReadSubRecord(stream);
                    var subLen = subMeta.RecordLength;
                    this.Animations = BinaryOverlaySetList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Animations);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = Creature.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Luck);
                }
                case 0x4D414E52: // RNAM
                {
                    _AttackReachLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.AttackReach);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _CombatStyleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.CombatStyle);
                }
                case 0x4D414E54: // TNAM
                {
                    _TurningSpeedLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.TurningSpeed);
                }
                case 0x4D414E42: // BNAM
                {
                    _BaseScaleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BaseScale);
                }
                case 0x4D414E57: // WNAM
                {
                    _FootWeightLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.FootWeight);
                }
                case 0x304D414E: // NAM0
                {
                    _BloodSprayLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodSpray);
                }
                case 0x314D414E: // NAM1
                {
                    _BloodDecalLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.BloodDecal);
                }
                case 0x52435343: // CSCR
                {
                    _InheritsSoundFromLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.InheritsSoundFrom);
                }
                case 0x54445343: // CSDT
                case 0x49445343: // CSDI
                case 0x43445343: // CSDC
                {
                    this.Sounds = this.ParseRepeatedTypelessSubrecord<CreatureSoundBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: CreatureSound_Registration.TriggeringRecordTypes,
                        factory:  CreatureSoundBinaryOverlay.CreatureSoundFactory);
                    return TryGet<int?>.Succeed((int)Creature_FieldIndex.Sounds);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

