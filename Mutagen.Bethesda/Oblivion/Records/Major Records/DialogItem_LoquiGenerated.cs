/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogItem :
        OblivionMajorRecord,
        IDialogItemInternal,
        ILoquiObjectSetter<DialogItem>,
        IEquatable<DialogItem>,
        IEqualsMask
    {
        #region Ctor
        protected DialogItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogItemData? _Data;
        public DialogItemData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogItemDataGetter? IDialogItemGetter.Data => this.Data;
        #endregion
        #region Quest
        public FormLinkNullable<Quest> Quest { get; set; } = new FormLinkNullable<Quest>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IQuestGetter> IDialogItemGetter.Quest => this.Quest;
        #endregion
        #region PreviousTopic
        public FormLinkNullable<DialogItem> PreviousTopic { get; set; } = new FormLinkNullable<DialogItem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullable<IDialogItemGetter> IDialogItemGetter.PreviousTopic => this.PreviousTopic;
        #endregion
        #region Topics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<DialogTopic>> _Topics = new ExtendedList<IFormLink<DialogTopic>>();
        public ExtendedList<IFormLink<DialogTopic>> Topics
        {
            get => this._Topics;
            protected set => this._Topics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IDialogTopicGetter>> IDialogItemGetter.Topics => _Topics;
        #endregion

        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponse> _Responses = new ExtendedList<DialogResponse>();
        public ExtendedList<DialogResponse> Responses
        {
            get => this._Responses;
            protected set => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseGetter> IDialogItemGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            protected set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IDialogItemGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Choices
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<DialogTopic>> _Choices = new ExtendedList<IFormLink<DialogTopic>>();
        public ExtendedList<IFormLink<DialogTopic>> Choices
        {
            get => this._Choices;
            protected set => this._Choices = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IDialogTopicGetter>> IDialogItemGetter.Choices => _Choices;
        #endregion

        #endregion
        #region LinkFrom
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<DialogTopic>> _LinkFrom = new ExtendedList<IFormLink<DialogTopic>>();
        public ExtendedList<IFormLink<DialogTopic>> LinkFrom
        {
            get => this._LinkFrom;
            protected set => this._LinkFrom = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLink<IDialogTopicGetter>> IDialogItemGetter.LinkFrom => _LinkFrom;
        #endregion

        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ScriptFields _Script_Object = new ScriptFields();
        public ScriptFields Script => _Script_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFieldsGetter IDialogItemGetter.Script => _Script_Object;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogItemGetter rhs)) return false;
            return ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DialogItem obj)
        {
            return ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogItemCommon)((IDialogItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogItemXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogItemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new DialogItem CreateFromXml(
            XElement node,
            DialogItem.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogItem CreateFromXml(
            XElement node,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static DialogItem CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DialogItem();
            ((DialogItemSetterCommon)((IDialogItemGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DialogItem CreateFromXml(
            string path,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            string path,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogItem CreateFromXml(
            Stream stream,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            Stream stream,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogItem CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, DialogItemData.Mask<TItem>?>(initialValue, new DialogItemData.Mask<TItem>(initialValue));
                this.Quest = initialValue;
                this.PreviousTopic = initialValue;
                this.Topics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Choices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LinkFrom = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(initialValue, new ScriptFields.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Data,
                TItem Quest,
                TItem PreviousTopic,
                TItem Topics,
                TItem Responses,
                TItem Conditions,
                TItem Choices,
                TItem LinkFrom,
                TItem Script)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Data = new MaskItem<TItem, DialogItemData.Mask<TItem>?>(Data, new DialogItemData.Mask<TItem>(Data));
                this.Quest = Quest;
                this.PreviousTopic = PreviousTopic;
                this.Topics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Topics, Enumerable.Empty<(int Index, TItem Value)>());
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Choices = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Choices, Enumerable.Empty<(int Index, TItem Value)>());
                this.LinkFrom = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkFrom, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(Script, new ScriptFields.Mask<TItem>(Script));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, DialogItemData.Mask<TItem>?>? Data { get; set; }
            public TItem Quest;
            public TItem PreviousTopic;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Topics;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>? Responses;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Choices;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkFrom;
            public MaskItem<TItem, ScriptFields.Mask<TItem>?>? Script { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.PreviousTopic, rhs.PreviousTopic)) return false;
                if (!object.Equals(this.Topics, rhs.Topics)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Choices, rhs.Choices)) return false;
                if (!object.Equals(this.LinkFrom, rhs.LinkFrom)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.Quest);
                hash.Add(this.PreviousTopic);
                hash.Add(this.Topics);
                hash.Add(this.Responses);
                hash.Add(this.Conditions);
                hash.Add(this.Choices);
                hash.Add(this.LinkFrom);
                hash.Add(this.Script);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.Quest)) return false;
                if (!eval(this.PreviousTopic)) return false;
                if (this.Topics != null)
                {
                    if (!eval(this.Topics.Overall)) return false;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Choices != null)
                {
                    if (!eval(this.Choices.Overall)) return false;
                    if (this.Choices.Specific != null)
                    {
                        foreach (var item in this.Choices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LinkFrom != null)
                {
                    if (!eval(this.LinkFrom.Overall)) return false;
                    if (this.LinkFrom.Specific != null)
                    {
                        foreach (var item in this.LinkFrom.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Script != null)
                {
                    if (!eval(this.Script.Overall)) return false;
                    if (this.Script.Specific != null && !this.Script.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.Quest)) return true;
                if (eval(this.PreviousTopic)) return true;
                if (this.Topics != null)
                {
                    if (eval(this.Topics.Overall)) return true;
                    if (this.Topics.Specific != null)
                    {
                        foreach (var item in this.Topics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Choices != null)
                {
                    if (eval(this.Choices.Overall)) return true;
                    if (this.Choices.Specific != null)
                    {
                        foreach (var item in this.Choices.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LinkFrom != null)
                {
                    if (eval(this.LinkFrom.Overall)) return true;
                    if (this.LinkFrom.Specific != null)
                    {
                        foreach (var item in this.LinkFrom.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Script != null)
                {
                    if (eval(this.Script.Overall)) return true;
                    if (this.Script.Specific != null && this.Script.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, DialogItemData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Quest = eval(this.Quest);
                obj.PreviousTopic = eval(this.PreviousTopic);
                if (Topics != null)
                {
                    obj.Topics = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Topics.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Topics.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Topics.Specific = l;
                        foreach (var item in Topics.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponse.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponse.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, DialogResponse.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, DialogResponse.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Choices != null)
                {
                    obj.Choices = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Choices.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Choices.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Choices.Specific = l;
                        foreach (var item in Choices.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (LinkFrom != null)
                {
                    obj.LinkFrom = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkFrom.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkFrom.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkFrom.Specific = l;
                        foreach (var item in LinkFrom.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Script = this.Script == null ? null : new MaskItem<R, ScriptFields.Mask<R>?>(eval(this.Script.Overall), this.Script.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogItem.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogItem.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogItem.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.Quest ?? true)
                    {
                        fg.AppendItem(Quest, "Quest");
                    }
                    if (printMask?.PreviousTopic ?? true)
                    {
                        fg.AppendItem(PreviousTopic, "PreviousTopic");
                    }
                    if ((printMask?.Topics?.Overall ?? true)
                        && Topics.TryGet(out var TopicsItem))
                    {
                        fg.AppendLine("Topics =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TopicsItem.Overall);
                            if (TopicsItem.Specific != null)
                            {
                                foreach (var subItem in TopicsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses.TryGet(out var ResponsesItem))
                    {
                        fg.AppendLine("Responses =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Choices?.Overall ?? true)
                        && Choices.TryGet(out var ChoicesItem))
                    {
                        fg.AppendLine("Choices =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ChoicesItem.Overall);
                            if (ChoicesItem.Specific != null)
                            {
                                foreach (var subItem in ChoicesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.LinkFrom?.Overall ?? true)
                        && LinkFrom.TryGet(out var LinkFromItem))
                    {
                        fg.AppendLine("LinkFrom =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LinkFromItem.Overall);
                            if (LinkFromItem.Specific != null)
                            {
                                foreach (var subItem in LinkFromItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Script?.Overall ?? true)
                    {
                        Script?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, DialogItemData.ErrorMask?>? Data;
            public Exception? Quest;
            public Exception? PreviousTopic;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Topics;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>? Responses;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Choices;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkFrom;
            public MaskItem<Exception?, ScriptFields.ErrorMask?>? Script;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
                switch (enu)
                {
                    case DialogItem_FieldIndex.Data:
                        return Data;
                    case DialogItem_FieldIndex.Quest:
                        return Quest;
                    case DialogItem_FieldIndex.PreviousTopic:
                        return PreviousTopic;
                    case DialogItem_FieldIndex.Topics:
                        return Topics;
                    case DialogItem_FieldIndex.Responses:
                        return Responses;
                    case DialogItem_FieldIndex.Conditions:
                        return Conditions;
                    case DialogItem_FieldIndex.Choices:
                        return Choices;
                    case DialogItem_FieldIndex.LinkFrom:
                        return LinkFrom;
                    case DialogItem_FieldIndex.Script:
                        return Script;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
                switch (enu)
                {
                    case DialogItem_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, DialogItemData.ErrorMask?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case DialogItem_FieldIndex.PreviousTopic:
                        this.PreviousTopic = ex;
                        break;
                    case DialogItem_FieldIndex.Topics:
                        this.Topics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Choices:
                        this.Choices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.LinkFrom:
                        this.LinkFrom = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogItem_FieldIndex.Script:
                        this.Script = new MaskItem<Exception?, ScriptFields.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
                switch (enu)
                {
                    case DialogItem_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, DialogItemData.ErrorMask?>?)obj;
                        break;
                    case DialogItem_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case DialogItem_FieldIndex.PreviousTopic:
                        this.PreviousTopic = (Exception?)obj;
                        break;
                    case DialogItem_FieldIndex.Topics:
                        this.Topics = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Choices:
                        this.Choices = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogItem_FieldIndex.LinkFrom:
                        this.LinkFrom = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogItem_FieldIndex.Script:
                        this.Script = (MaskItem<Exception?, ScriptFields.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (Quest != null) return true;
                if (PreviousTopic != null) return true;
                if (Topics != null) return true;
                if (Responses != null) return true;
                if (Conditions != null) return true;
                if (Choices != null) return true;
                if (LinkFrom != null) return true;
                if (Script != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Data?.ToString(fg);
                fg.AppendItem(Quest, "Quest");
                fg.AppendItem(PreviousTopic, "PreviousTopic");
                if (Topics.TryGet(out var TopicsItem))
                {
                    fg.AppendLine("Topics =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TopicsItem.Overall);
                        if (TopicsItem.Specific != null)
                        {
                            foreach (var subItem in TopicsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Responses.TryGet(out var ResponsesItem))
                {
                    fg.AppendLine("Responses =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Choices.TryGet(out var ChoicesItem))
                {
                    fg.AppendLine("Choices =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ChoicesItem.Overall);
                        if (ChoicesItem.Specific != null)
                        {
                            foreach (var subItem in ChoicesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (LinkFrom.TryGet(out var LinkFromItem))
                {
                    fg.AppendLine("LinkFrom =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LinkFromItem.Overall);
                        if (LinkFromItem.Specific != null)
                        {
                            foreach (var subItem in LinkFromItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Script?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.PreviousTopic = this.PreviousTopic.Combine(rhs.PreviousTopic);
                ret.Topics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Topics?.Overall, rhs.Topics?.Overall), ExceptionExt.Combine(this.Topics?.Specific, rhs.Topics?.Specific));
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Choices = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Choices?.Overall, rhs.Choices?.Overall), ExceptionExt.Combine(this.Choices?.Specific, rhs.Choices?.Specific));
                ret.LinkFrom = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.LinkFrom?.Overall, rhs.LinkFrom?.Overall), ExceptionExt.Combine(this.LinkFrom?.Specific, rhs.LinkFrom?.Specific));
                ret.Script = this.Script.Combine(rhs.Script, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, DialogItemData.TranslationMask?> Data;
            public bool Quest;
            public bool PreviousTopic;
            public bool Topics;
            public MaskItem<bool, DialogResponse.TranslationMask?> Responses;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool Choices;
            public bool LinkFrom;
            public MaskItem<bool, ScriptFields.TranslationMask?> Script;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Data = new MaskItem<bool, DialogItemData.TranslationMask?>(defaultOn, null);
                this.Quest = defaultOn;
                this.PreviousTopic = defaultOn;
                this.Topics = defaultOn;
                this.Responses = new MaskItem<bool, DialogResponse.TranslationMask?>(defaultOn, null);
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.Choices = defaultOn;
                this.LinkFrom = defaultOn;
                this.Script = new MaskItem<bool, ScriptFields.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((Quest, null));
                ret.Add((PreviousTopic, null));
                ret.Add((Topics, null));
                ret.Add((Responses?.Overall ?? true, Responses?.Specific?.GetCrystal()));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((Choices, null));
                ret.Add((LinkFrom, null));
                ret.Add((Script?.Overall ?? true, Script?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = DialogItem_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogItemCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DialogItemCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogItemCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogItemCommon.Instance.RemapLinks(this, mapping);
        public DialogItem(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogItem(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public DialogItem(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogItemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new DialogItem CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static DialogItem CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogItem();
            ((DialogItemSetterCommon)((IDialogItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogItemGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogItem GetNew()
        {
            return new DialogItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogItem :
        IDialogItemGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IDialogItemInternal>
    {
        new DialogItemData? Data { get; set; }
        new FormLinkNullable<Quest> Quest { get; set; }
        new FormLinkNullable<DialogItem> PreviousTopic { get; set; }
        new ExtendedList<IFormLink<DialogTopic>> Topics { get; }
        new ExtendedList<DialogResponse> Responses { get; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<IFormLink<DialogTopic>> Choices { get; }
        new ExtendedList<IFormLink<DialogTopic>> LinkFrom { get; }
        new ScriptFields Script { get; }
    }

    public partial interface IDialogItemInternal :
        IOblivionMajorRecordInternal,
        IDialogItem,
        IDialogItemGetter
    {
        new ScriptFields Script { get; }
    }

    public partial interface IDialogItemGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IDialogItemGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => DialogItem_Registration.Instance;
        IDialogItemDataGetter? Data { get; }
        IFormLinkNullable<IQuestGetter> Quest { get; }
        IFormLinkNullable<IDialogItemGetter> PreviousTopic { get; }
        IReadOnlyList<IFormLink<IDialogTopicGetter>> Topics { get; }
        IReadOnlyList<IDialogResponseGetter> Responses { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IFormLink<IDialogTopicGetter>> Choices { get; }
        IReadOnlyList<IFormLink<IDialogTopicGetter>> LinkFrom { get; }
        IScriptFieldsGetter Script { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogItemMixIn
    {
        public static void Clear(this IDialogItemInternal item)
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogItem.Mask<bool> GetEqualsMask(
            this IDialogItemGetter item,
            IDialogItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogItemGetter item,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogItemGetter item,
            FileGeneration fg,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogItemGetter item,
            DialogItem.Mask<bool?> checkMask)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogItem.Mask<bool> GetHasBeenSetMask(this IDialogItemGetter item)
        {
            var ret = new DialogItem.Mask<bool>(false);
            ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDialogItemGetter item,
            IDialogItemGetter rhs)
        {
            return ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogItemInternal lhs,
            IDialogItemGetter rhs,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DialogItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogItemInternal lhs,
            IDialogItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogItemSetterTranslationCommon)((IDialogItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DialogItem DeepCopy(
            this IDialogItemGetter item,
            DialogItem.TranslationMask? copyMask = null)
        {
            return ((DialogItemSetterTranslationCommon)((IDialogItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogItem DeepCopy(
            this IDialogItemGetter item,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? copyMask = null)
        {
            return ((DialogItemSetterTranslationCommon)((IDialogItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogItem DeepCopy(
            this IDialogItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogItemSetterTranslationCommon)((IDialogItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogItemInternal item,
            XElement node,
            DialogItem.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogItemInternal item,
            XElement node,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            string path,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            string path,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            Stream stream,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            Stream stream,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogItemInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogItem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDialogItemInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDialogItemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogItemSetterCommon)((IDialogItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogItem_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Data = 5,
        Quest = 6,
        PreviousTopic = 7,
        Topics = 8,
        Responses = 9,
        Conditions = 10,
        Choices = 11,
        LinkFrom = 12,
        Script = 13,
    }
    #endregion

    #region Registration
    public partial class DialogItem_Registration : ILoquiRegistration
    {
        public static readonly DialogItem_Registration Instance = new DialogItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 149,
            version: 0);

        public const string GUID = "2d9149e0-aa5e-4b4e-8bef-93b32f602f3b";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(DialogItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogItem.ErrorMask);

        public static readonly Type ClassType = typeof(DialogItem);

        public static readonly Type GetterType = typeof(IDialogItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogItem);

        public static readonly Type? InternalSetterType = typeof(IDialogItemInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogItem";

        public const string Name = "DialogItem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATA":
                    return (ushort)DialogItem_FieldIndex.Data;
                case "QUEST":
                    return (ushort)DialogItem_FieldIndex.Quest;
                case "PREVIOUSTOPIC":
                    return (ushort)DialogItem_FieldIndex.PreviousTopic;
                case "TOPICS":
                    return (ushort)DialogItem_FieldIndex.Topics;
                case "RESPONSES":
                    return (ushort)DialogItem_FieldIndex.Responses;
                case "CONDITIONS":
                    return (ushort)DialogItem_FieldIndex.Conditions;
                case "CHOICES":
                    return (ushort)DialogItem_FieldIndex.Choices;
                case "LINKFROM":
                    return (ushort)DialogItem_FieldIndex.LinkFrom;
                case "SCRIPT":
                    return (ushort)DialogItem_FieldIndex.Script;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return true;
                case DialogItem_FieldIndex.Data:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Script:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Data:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.Data:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Data:
                    return "Data";
                case DialogItem_FieldIndex.Quest:
                    return "Quest";
                case DialogItem_FieldIndex.PreviousTopic:
                    return "PreviousTopic";
                case DialogItem_FieldIndex.Topics:
                    return "Topics";
                case DialogItem_FieldIndex.Responses:
                    return "Responses";
                case DialogItem_FieldIndex.Conditions:
                    return "Conditions";
                case DialogItem_FieldIndex.Choices:
                    return "Choices";
                case DialogItem_FieldIndex.LinkFrom:
                    return "LinkFrom";
                case DialogItem_FieldIndex.Script:
                    return "Script";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Data:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                case DialogItem_FieldIndex.Script:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Script:
                    return true;
                case DialogItem_FieldIndex.Data:
                case DialogItem_FieldIndex.Quest:
                case DialogItem_FieldIndex.PreviousTopic:
                case DialogItem_FieldIndex.Topics:
                case DialogItem_FieldIndex.Responses:
                case DialogItem_FieldIndex.Conditions:
                case DialogItem_FieldIndex.Choices:
                case DialogItem_FieldIndex.LinkFrom:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogItem_FieldIndex enu = (DialogItem_FieldIndex)index;
            switch (enu)
            {
                case DialogItem_FieldIndex.Data:
                    return typeof(DialogItemData);
                case DialogItem_FieldIndex.Quest:
                    return typeof(FormLinkNullable<Quest>);
                case DialogItem_FieldIndex.PreviousTopic:
                    return typeof(FormLinkNullable<DialogItem>);
                case DialogItem_FieldIndex.Topics:
                    return typeof(ExtendedList<IFormLink<DialogTopic>>);
                case DialogItem_FieldIndex.Responses:
                    return typeof(ExtendedList<DialogResponse>);
                case DialogItem_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case DialogItem_FieldIndex.Choices:
                    return typeof(ExtendedList<IFormLink<DialogTopic>>);
                case DialogItem_FieldIndex.LinkFrom:
                    return typeof(ExtendedList<IFormLink<DialogTopic>>);
                case DialogItem_FieldIndex.Script:
                    return typeof(ScriptFields);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DialogItemXmlWriteTranslation);
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType QSTI_HEADER = new RecordType("QSTI");
        public static readonly RecordType PNAM_HEADER = new RecordType("PNAM");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType NAM1_HEADER = new RecordType("NAM1");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType TCLT_HEADER = new RecordType("TCLT");
        public static readonly RecordType TCLF_HEADER = new RecordType("TCLF");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType TriggeringRecordType = INFO_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 9;
        public static readonly Type BinaryWriteTranslation = typeof(DialogItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogItemSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DialogItemSetterCommon Instance = new DialogItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogItemInternal item)
        {
            ClearPartial();
            item.Data = null;
            item.Quest = FormLinkNullable<Quest>.Null;
            item.PreviousTopic = FormLinkNullable<DialogItem>.Null;
            item.Topics.Clear();
            item.Responses.Clear();
            item.Conditions.Clear();
            item.Choices.Clear();
            item.LinkFrom.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDialogItemInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogItemInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IDialogItemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Script":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                    try
                    {
                        item.Script.CopyInFromXml(
                            node: node,
                            translationMask: translationMask,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IDialogItemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DialogItemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (DialogItem)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (DialogItem)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogItemInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDialogItemInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: DialogItemBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogItemBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogItem)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (DialogItem)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DialogItemCommon : OblivionMajorRecordCommon
    {
        public new static readonly DialogItemCommon Instance = new DialogItemCommon();

        public DialogItem.Mask<bool> GetEqualsMask(
            IDialogItemGetter item,
            IDialogItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogItem.Mask<bool>(false);
            ((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogItemGetter item,
            IDialogItemGetter rhs,
            DialogItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Quest = object.Equals(item.Quest, rhs.Quest);
            ret.PreviousTopic = object.Equals(item.PreviousTopic, rhs.PreviousTopic);
            ret.Topics = item.Topics.CollectionEqualsHelper(
                rhs.Topics,
                (l, r) => object.Equals(l, r),
                include);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Choices = item.Choices.CollectionEqualsHelper(
                rhs.Choices,
                (l, r) => object.Equals(l, r),
                include);
            ret.LinkFrom = item.LinkFrom.CollectionEqualsHelper(
                rhs.LinkFrom,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = MaskItemExt.Factory(item.Script.GetEqualsMask(rhs.Script, include), include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDialogItemGetter item,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogItemGetter item,
            FileGeneration fg,
            string? name = null,
            DialogItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogItem =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogItem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogItemGetter item,
            FileGeneration fg,
            DialogItem.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.Quest ?? true)
                && item.Quest.TryGet(out var QuestItem))
            {
                fg.AppendItem(QuestItem, "Quest");
            }
            if ((printMask?.PreviousTopic ?? true)
                && item.PreviousTopic.TryGet(out var PreviousTopicItem))
            {
                fg.AppendItem(PreviousTopicItem, "PreviousTopic");
            }
            if (printMask?.Topics?.Overall ?? true)
            {
                fg.AppendLine("Topics =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Topics)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                fg.AppendLine("Responses =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Responses)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Conditions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Choices?.Overall ?? true)
            {
                fg.AppendLine("Choices =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Choices)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.LinkFrom?.Overall ?? true)
            {
                fg.AppendLine("LinkFrom =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.LinkFrom)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.Script?.Overall ?? true)
            {
                item.Script?.ToString(fg, "Script");
            }
        }
        
        public bool HasBeenSet(
            IDialogItemGetter item,
            DialogItem.Mask<bool?> checkMask)
        {
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.Quest.HasValue && checkMask.Quest.Value != (item.Quest.FormKey != null)) return false;
            if (checkMask.PreviousTopic.HasValue && checkMask.PreviousTopic.Value != (item.PreviousTopic.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IDialogItemGetter item,
            DialogItem.Mask<bool> mask)
        {
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, DialogItemData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            mask.Quest = (item.Quest.FormKey != null);
            mask.PreviousTopic = (item.PreviousTopic.FormKey != null);
            mask.Topics = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            var ResponsesItem = item.Responses;
            mask.Responses = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, DialogResponse.Mask<bool>?>>?>(true, ResponsesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, DialogResponse.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var ConditionsItem = item.Conditions;
            mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Choices = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.LinkFrom = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Script = new MaskItem<bool, ScriptFields.Mask<bool>?>(true, item.Script?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static DialogItem_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new DialogItem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (DialogItem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogItem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogItemGetter? lhs,
            IDialogItemGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!lhs.Quest.Equals(rhs.Quest)) return false;
            if (!lhs.PreviousTopic.Equals(rhs.PreviousTopic)) return false;
            if (!lhs.Topics.SequenceEqual(rhs.Topics)) return false;
            if (!lhs.Responses.SequenceEqual(rhs.Responses)) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (!lhs.Choices.SequenceEqual(rhs.Choices)) return false;
            if (!lhs.LinkFrom.SequenceEqual(rhs.LinkFrom)) return false;
            if (!object.Equals(lhs.Script, rhs.Script)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogItemGetter?)lhs,
                rhs: rhs as IDialogItemGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDialogItemGetter?)lhs,
                rhs: rhs as IDialogItemGetter);
        }
        
        public virtual int GetHashCode(IDialogItemGetter item)
        {
            var hash = new HashCode();
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.Quest.TryGet(out var Questitem))
            {
                hash.Add(Questitem);
            }
            if (item.PreviousTopic.TryGet(out var PreviousTopicitem))
            {
                hash.Add(PreviousTopicitem);
            }
            hash.Add(item.Topics);
            hash.Add(item.Responses);
            hash.Add(item.Conditions);
            hash.Add(item.Choices);
            hash.Add(item.LinkFrom);
            hash.Add(item.Script);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogItemGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogItemGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDialogItemGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Quest.FormKey.TryGet(out var QuestKey))
            {
                yield return QuestKey;
            }
            if (obj.PreviousTopic.FormKey.TryGet(out var PreviousTopicKey))
            {
                yield return PreviousTopicKey;
            }
            foreach (var item in obj.Topics.Select(f => f.FormKey))
            {
                yield return item;
            }
            foreach (var item in obj.Choices.Select(f => f.FormKey))
            {
                yield return item;
            }
            foreach (var item in obj.LinkFrom.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.Script is ILinkedFormKeyContainer ScriptlinkCont)
            {
                foreach (var item in ScriptlinkCont.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IDialogItemGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(DialogItem obj, DialogItem rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new DialogItem(getNextFormKey());
            ret.DeepCopyIn((DialogItem)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (DialogItem)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class DialogItemSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogItemSetterTranslationCommon Instance = new DialogItemSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDialogItemInternal item,
            IDialogItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IDialogItem item,
            IDialogItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogItem_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Quest) ?? true))
            {
                item.Quest = rhs.Quest.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.PreviousTopic) ?? true))
            {
                item.PreviousTopic = rhs.PreviousTopic.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Topics) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                try
                {
                    item.Topics.SetTo(
                        rhs.Topics
                        .Select(r => (IFormLink<DialogTopic>)new FormLink<DialogTopic>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Choices) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                try
                {
                    item.Choices.SetTo(
                        rhs.Choices
                        .Select(r => (IFormLink<DialogTopic>)new FormLink<DialogTopic>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.LinkFrom) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                try
                {
                    item.LinkFrom.SetTo(
                        rhs.LinkFrom
                        .Select(r => (IFormLink<DialogTopic>)new FormLink<DialogTopic>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Script) ?? true))
            {
                errorMask?.PushIndex((int)DialogItem_FieldIndex.Script);
                try
                {
                    item.Script.DeepCopyIn(
                        rhs: rhs.Script,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)DialogItem_FieldIndex.Script));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogItemInternal)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogItem)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogItemInternal)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDialogItem)item,
                rhs: (IDialogItemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public DialogItem DeepCopy(
            IDialogItemGetter item,
            DialogItem.TranslationMask? copyMask = null)
        {
            DialogItem ret = (DialogItem)((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogItem DeepCopy(
            IDialogItemGetter item,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? copyMask = null)
        {
            DialogItem ret = (DialogItem)((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogItem DeepCopy(
            IDialogItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogItem ret = (DialogItem)((DialogItemCommon)((IDialogItemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class DialogItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration Registration => DialogItem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogItemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogItemSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DialogItemXmlWriteTranslation Instance = new DialogItemXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogItemGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((DialogItemDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)DialogItem_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Data));
                }
            }
            if ((item.Quest.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Quest) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Quest),
                    item: item.Quest.FormKey.Value,
                    fieldIndex: (int)DialogItem_FieldIndex.Quest,
                    errorMask: errorMask);
            }
            if ((item.PreviousTopic.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.PreviousTopic) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PreviousTopic),
                    item: item.PreviousTopic.FormKey.Value,
                    fieldIndex: (int)DialogItem_FieldIndex.PreviousTopic,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Topics) ?? true))
            {
                ListXmlTranslation<IFormLink<IDialogTopicGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Topics),
                    item: item.Topics,
                    fieldIndex: (int)DialogItem_FieldIndex.Topics,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Topics),
                    transl: (XElement subNode, IFormLink<IDialogTopicGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Responses) ?? true))
            {
                ListXmlTranslation<IDialogResponseGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Responses),
                    item: item.Responses,
                    fieldIndex: (int)DialogItem_FieldIndex.Responses,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Responses),
                    transl: (XElement subNode, IDialogResponseGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((DialogResponseXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)DialogItem_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Choices) ?? true))
            {
                ListXmlTranslation<IFormLink<IDialogTopicGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Choices),
                    item: item.Choices,
                    fieldIndex: (int)DialogItem_FieldIndex.Choices,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Choices),
                    transl: (XElement subNode, IFormLink<IDialogTopicGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.LinkFrom) ?? true))
            {
                ListXmlTranslation<IFormLink<IDialogTopicGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.LinkFrom),
                    item: item.LinkFrom,
                    fieldIndex: (int)DialogItem_FieldIndex.LinkFrom,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.LinkFrom),
                    transl: (XElement subNode, IFormLink<IDialogTopicGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)DialogItem_FieldIndex.Script) ?? true))
            {
                var ScriptItem = item.Script;
                ((ScriptFieldsXmlWriteTranslation)((IXmlItem)ScriptItem).XmlWriteTranslator).Write(
                    item: ScriptItem,
                    node: node,
                    name: nameof(item.Script),
                    fieldIndex: (int)DialogItem_FieldIndex.Script,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Script));
            }
        }

        public void Write(
            XElement node,
            IDialogItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogItem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogItem");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DialogItemXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static DialogItemXmlCreateTranslation Instance = new DialogItemXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogItemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogItemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogItemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Data":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<DialogItemData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)DialogItem_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Quest":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Quest);
                    try
                    {
                        item.Quest = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PreviousTopic":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.PreviousTopic);
                    try
                    {
                        item.PreviousTopic = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Topics":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Topics);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<DialogTopic>>.Instance.Parse(
                            node: node,
                            enumer: out var TopicsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Topics.SetTo(TopicsItem);
                        }
                        else
                        {
                            item.Topics.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Responses":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Responses);
                    try
                    {
                        if (ListXmlTranslation<DialogResponse>.Instance.Parse(
                            node: node,
                            enumer: out var ResponsesItem,
                            transl: LoquiXmlTranslation<DialogResponse>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Responses.SetTo(ResponsesItem);
                        }
                        else
                        {
                            item.Responses.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions.SetTo(ConditionsItem);
                        }
                        else
                        {
                            item.Conditions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Choices":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.Choices);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<DialogTopic>>.Instance.Parse(
                            node: node,
                            enumer: out var ChoicesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Choices.SetTo(ChoicesItem);
                        }
                        else
                        {
                            item.Choices.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LinkFrom":
                    errorMask?.PushIndex((int)DialogItem_FieldIndex.LinkFrom);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<DialogTopic>>.Instance.Parse(
                            node: node,
                            enumer: out var LinkFromItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.LinkFrom.SetTo(LinkFromItem);
                        }
                        else
                        {
                            item.LinkFrom.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class DialogItemXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogItemGetter item,
            XElement node,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogItemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogItemGetter item,
            string path,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogItemGetter item,
            Stream stream,
            out DialogItem.ErrorMask errorMask,
            DialogItem.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DialogItemBinaryWriteTranslation Instance = new DialogItemBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IDialogItemGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Data.TryGet(out var DataItem))
            {
                ((DialogItemDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Quest,
                header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.QSTI_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousTopic,
                header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.PNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogTopicGetter>>.Instance.Write(
                writer: writer,
                items: item.Topics,
                transl: (MutagenWriter subWriter, IFormLink<IDialogTopicGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.NAME_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IDialogResponseGetter>.Instance.Write(
                writer: writer,
                items: item.Responses,
                transl: (MutagenWriter subWriter, IDialogResponseGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogTopicGetter>>.Instance.Write(
                writer: writer,
                items: item.Choices,
                transl: (MutagenWriter subWriter, IFormLink<IDialogTopicGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.TCLT_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<IDialogTopicGetter>>.Instance.Write(
                writer: writer,
                items: item.LinkFrom,
                transl: (MutagenWriter subWriter, IFormLink<IDialogTopicGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(DialogItem_Registration.TCLF_HEADER));
                });
            var ScriptItem = item.Script;
            ((ScriptFieldsBinaryWriteTranslation)((IBinaryItem)ScriptItem).BinaryWriteTranslator).Write(
                item: ScriptItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            IDialogItemGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(DialogItem_Registration.INFO_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogItemGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogItemBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DialogItemBinaryCreateTranslation Instance = new DialogItemBinaryCreateTranslation();

        public override RecordType RecordType => DialogItem_Registration.INFO_HEADER;
        public static void FillBinaryStructs(
            IDialogItemInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IDialogItemInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    item.Data = Mutagen.Bethesda.Oblivion.DialogItemData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Data);
                }
                case 0x49545351: // QSTI
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Quest);
                }
                case 0x4D414E50: // PNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousTopic = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.PreviousTopic);
                }
                case 0x454D414E: // NAME
                {
                    item.Topics.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<DialogTopic>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogItem_Registration.NAME_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Topics);
                }
                case 0x54445254: // TRDT
                case 0x314D414E: // NAM1
                case 0x324D414E: // NAM2
                {
                    item.Responses.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<DialogResponse>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogResponse_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out DialogResponse listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<DialogResponse>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Responses);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Condition listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Conditions);
                }
                case 0x544C4354: // TCLT
                {
                    item.Choices.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<DialogTopic>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogItem_Registration.TCLT_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Choices);
                }
                case 0x464C4354: // TCLF
                {
                    item.LinkFrom.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<DialogTopic>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: DialogItem_Registration.TCLF_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.LinkFrom);
                }
                case 0x44484353: // SCHD
                case 0x52484353: // SCHR
                {
                    item.Script.CopyInFromBinary(
                        frame: frame,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Script);
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DialogItemBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogItemBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IDialogItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogItem_Registration.Instance;
        public new static DialogItem_Registration Registration => DialogItem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogItemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogItemSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogItemGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DialogItemCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DialogItemCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogItemCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogItemCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DialogItemXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogItemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogItemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Data
        private RangeInt32? _DataLocation;
        public IDialogItemDataGetter? Data => _DataLocation.HasValue ? DialogItemDataBinaryOverlay.DialogItemDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        #region Quest
        private int? _QuestLocation;
        public bool Quest_IsSet => _QuestLocation.HasValue;
        public IFormLinkNullable<IQuestGetter> Quest => _QuestLocation.HasValue ? new FormLinkNullable<IQuestGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _QuestLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IQuestGetter>.Null;
        #endregion
        #region PreviousTopic
        private int? _PreviousTopicLocation;
        public bool PreviousTopic_IsSet => _PreviousTopicLocation.HasValue;
        public IFormLinkNullable<IDialogItemGetter> PreviousTopic => _PreviousTopicLocation.HasValue ? new FormLinkNullable<IDialogItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _PreviousTopicLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IDialogItemGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLink<IDialogTopicGetter>> Topics { get; private set; } = ListExt.Empty<IFormLink<IDialogTopicGetter>>();
        public IReadOnlyList<IDialogResponseGetter> Responses { get; private set; } = ListExt.Empty<DialogResponseBinaryOverlay>();
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = ListExt.Empty<ConditionBinaryOverlay>();
        public IReadOnlyList<IFormLink<IDialogTopicGetter>> Choices { get; private set; } = ListExt.Empty<IFormLink<IDialogTopicGetter>>();
        public IReadOnlyList<IFormLink<IDialogTopicGetter>> LinkFrom { get; private set; } = ListExt.Empty<IFormLink<IDialogTopicGetter>>();
        #region Script
        private IScriptFieldsGetter? _Script;
        public IScriptFieldsGetter Script => _Script ?? new ScriptFields();
        #endregion
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogItemBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static DialogItemBinaryOverlay DialogItemFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new DialogItemBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DialogItemBinaryOverlay DialogItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogItemFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Data);
                }
                case 0x49545351: // QSTI
                {
                    _QuestLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Quest);
                }
                case 0x4D414E50: // PNAM
                {
                    _PreviousTopicLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.PreviousTopic);
                }
                case 0x454D414E: // NAME
                {
                    this.Topics = BinaryOverlayList<IFormLink<IDialogTopicGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogTopicGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Topics);
                }
                case 0x54445254: // TRDT
                case 0x314D414E: // NAM1
                case 0x324D414E: // NAM2
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<DialogResponseBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: DialogResponse_Registration.TriggeringRecordTypes,
                        factory:  DialogResponseBinaryOverlay.DialogResponseFactory);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Responses);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    this.Conditions = BinaryOverlayList<ConditionBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Conditions);
                }
                case 0x544C4354: // TCLT
                {
                    this.Choices = BinaryOverlayList<IFormLink<IDialogTopicGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogTopicGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Choices);
                }
                case 0x464C4354: // TCLF
                {
                    this.LinkFrom = BinaryOverlayList<IFormLink<IDialogTopicGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IDialogTopicGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.LinkFrom);
                }
                case 0x44484353: // SCHD
                case 0x52484353: // SCHR
                {
                    this._Script = ScriptFieldsBinaryOverlay.ScriptFieldsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)DialogItem_FieldIndex.Script);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogItemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

