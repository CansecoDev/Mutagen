/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogResponseData :
        IDialogResponseData,
        ILoquiObjectSetter<DialogResponseData>,
        IEquatable<DialogResponseData>,
        IEqualsMask
    {
        #region Ctor
        public DialogResponseData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        public EmotionType Emotion { get; set; } = default;
        #endregion
        #region EmotionValue
        public Int32 EmotionValue { get; set; } = default;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default;
        #endregion
        #region ResponseNumber
        public Byte ResponseNumber { get; set; } = default;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unknown2 = new byte[3];
        public Byte[] Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IDialogResponseDataGetter.Unknown2 => this.Unknown2;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponseDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDialogResponseDataGetter rhs)) return false;
            return ((DialogResponseDataCommon)((IDialogResponseDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(DialogResponseData obj)
        {
            return ((DialogResponseDataCommon)((IDialogResponseDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DialogResponseDataCommon)((IDialogResponseDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => DialogResponseDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogResponseDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static DialogResponseData CreateFromXml(
            XElement node,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static DialogResponseData CreateFromXml(
            XElement node,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponseData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static DialogResponseData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new DialogResponseData();
            ((DialogResponseDataSetterCommon)((IDialogResponseDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static DialogResponseData CreateFromXml(
            string path,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogResponseData CreateFromXml(
            string path,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponseData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static DialogResponseData CreateFromXml(
            Stream stream,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static DialogResponseData CreateFromXml(
            Stream stream,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static DialogResponseData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Emotion = initialValue;
                this.EmotionValue = initialValue;
                this.Unknown = initialValue;
                this.ResponseNumber = initialValue;
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem Emotion,
                TItem EmotionValue,
                TItem Unknown,
                TItem ResponseNumber,
                TItem Unknown2)
            {
                this.Emotion = Emotion;
                this.EmotionValue = EmotionValue;
                this.Unknown = Unknown;
                this.ResponseNumber = ResponseNumber;
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Emotion;
            public TItem EmotionValue;
            public TItem Unknown;
            public TItem ResponseNumber;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
                if (!object.Equals(this.EmotionValue, rhs.EmotionValue)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.ResponseNumber, rhs.ResponseNumber)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Emotion);
                hash.Add(this.EmotionValue);
                hash.Add(this.Unknown);
                hash.Add(this.ResponseNumber);
                hash.Add(this.Unknown2);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Emotion)) return false;
                if (!eval(this.EmotionValue)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.ResponseNumber)) return false;
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Emotion)) return true;
                if (eval(this.EmotionValue)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.ResponseNumber)) return true;
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponseData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Emotion = eval(this.Emotion);
                obj.EmotionValue = eval(this.EmotionValue);
                obj.Unknown = eval(this.Unknown);
                obj.ResponseNumber = eval(this.ResponseNumber);
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(DialogResponseData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, DialogResponseData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(DialogResponseData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Emotion ?? true)
                    {
                        fg.AppendItem(Emotion, "Emotion");
                    }
                    if (printMask?.EmotionValue ?? true)
                    {
                        fg.AppendItem(EmotionValue, "EmotionValue");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.ResponseNumber ?? true)
                    {
                        fg.AppendItem(ResponseNumber, "ResponseNumber");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        fg.AppendItem(Unknown2, "Unknown2");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Emotion;
            public Exception? EmotionValue;
            public Exception? Unknown;
            public Exception? ResponseNumber;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponseData_FieldIndex.Emotion:
                        return Emotion;
                    case DialogResponseData_FieldIndex.EmotionValue:
                        return EmotionValue;
                    case DialogResponseData_FieldIndex.Unknown:
                        return Unknown;
                    case DialogResponseData_FieldIndex.ResponseNumber:
                        return ResponseNumber;
                    case DialogResponseData_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponseData_FieldIndex.Emotion:
                        this.Emotion = ex;
                        break;
                    case DialogResponseData_FieldIndex.EmotionValue:
                        this.EmotionValue = ex;
                        break;
                    case DialogResponseData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case DialogResponseData_FieldIndex.ResponseNumber:
                        this.ResponseNumber = ex;
                        break;
                    case DialogResponseData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponseData_FieldIndex.Emotion:
                        this.Emotion = (Exception?)obj;
                        break;
                    case DialogResponseData_FieldIndex.EmotionValue:
                        this.EmotionValue = (Exception?)obj;
                        break;
                    case DialogResponseData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case DialogResponseData_FieldIndex.ResponseNumber:
                        this.ResponseNumber = (Exception?)obj;
                        break;
                    case DialogResponseData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Emotion != null) return true;
                if (EmotionValue != null) return true;
                if (Unknown != null) return true;
                if (ResponseNumber != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Emotion, "Emotion");
                fg.AppendItem(EmotionValue, "EmotionValue");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(ResponseNumber, "ResponseNumber");
                fg.AppendItem(Unknown2, "Unknown2");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Emotion = this.Emotion.Combine(rhs.Emotion);
                ret.EmotionValue = this.EmotionValue.Combine(rhs.EmotionValue);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.ResponseNumber = this.ResponseNumber.Combine(rhs.ResponseNumber);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Emotion;
            public bool EmotionValue;
            public bool Unknown;
            public bool ResponseNumber;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Emotion = defaultOn;
                this.EmotionValue = defaultOn;
                this.Unknown = defaultOn;
                this.ResponseNumber = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Emotion, null));
                ret.Add((EmotionValue, null));
                ret.Add((Unknown, null));
                ret.Add((ResponseNumber, null));
                ret.Add((Unknown2, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = DialogResponseData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static DialogResponseData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static DialogResponseData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogResponseData();
            ((DialogResponseDataSetterCommon)((IDialogResponseDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogResponseDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DialogResponseDataSetterCommon)((IDialogResponseDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponseData GetNew()
        {
            return new DialogResponseData();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponseData :
        IDialogResponseDataGetter,
        ILoquiObjectSetter<IDialogResponseData>
    {
        new EmotionType Emotion { get; set; }
        new Int32 EmotionValue { get; set; }
        new Int32 Unknown { get; set; }
        new Byte ResponseNumber { get; set; }
        new Byte[] Unknown2 { get; set; }
    }

    public partial interface IDialogResponseDataGetter :
        ILoquiObject,
        ILoquiObject<IDialogResponseDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => DialogResponseData_Registration.Instance;
        EmotionType Emotion { get; }
        Int32 EmotionValue { get; }
        Int32 Unknown { get; }
        Byte ResponseNumber { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponseDataMixIn
    {
        public static void Clear(this IDialogResponseData item)
        {
            ((DialogResponseDataSetterCommon)((IDialogResponseDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponseData.Mask<bool> GetEqualsMask(
            this IDialogResponseDataGetter item,
            IDialogResponseDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDialogResponseDataGetter item,
            string? name = null,
            DialogResponseData.Mask<bool>? printMask = null)
        {
            return ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDialogResponseDataGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponseData.Mask<bool>? printMask = null)
        {
            ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDialogResponseDataGetter item,
            DialogResponseData.Mask<bool?> checkMask)
        {
            return ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static DialogResponseData.Mask<bool> GetHasBeenSetMask(this IDialogResponseDataGetter item)
        {
            var ret = new DialogResponseData.Mask<bool>(false);
            ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDialogResponseDataGetter item,
            IDialogResponseDataGetter rhs)
        {
            return ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDialogResponseData lhs,
            IDialogResponseDataGetter rhs)
        {
            ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IDialogResponseData lhs,
            IDialogResponseDataGetter rhs,
            DialogResponseData.TranslationMask? copyMask = null)
        {
            ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponseData lhs,
            IDialogResponseDataGetter rhs,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = DialogResponseData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponseData lhs,
            IDialogResponseDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static DialogResponseData DeepCopy(
            this IDialogResponseDataGetter item,
            DialogResponseData.TranslationMask? copyMask = null)
        {
            return ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponseData DeepCopy(
            this IDialogResponseDataGetter item,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? copyMask = null)
        {
            return ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponseData DeepCopy(
            this IDialogResponseDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponseDataSetterTranslationCommon)((IDialogResponseDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogResponseData item,
            XElement node,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDialogResponseData item,
            XElement node,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponseData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DialogResponseDataSetterCommon)((IDialogResponseDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            string path,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            string path,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            string path,
            ErrorMaskBuilder? errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            Stream stream,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            Stream stream,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDialogResponseData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDialogResponseData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDialogResponseData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseDataSetterCommon)((IDialogResponseDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum DialogResponseData_FieldIndex
    {
        Emotion = 0,
        EmotionValue = 1,
        Unknown = 2,
        ResponseNumber = 3,
        Unknown2 = 4,
    }
    #endregion

    #region Registration
    public partial class DialogResponseData_Registration : ILoquiRegistration
    {
        public static readonly DialogResponseData_Registration Instance = new DialogResponseData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 187,
            version: 0);

        public const string GUID = "000d3b32-e5ea-42c0-84d5-1f91f223bf0c";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(DialogResponseData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponseData.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponseData);

        public static readonly Type GetterType = typeof(IDialogResponseDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponseData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogResponseData";

        public const string Name = "DialogResponseData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "EMOTION":
                    return (ushort)DialogResponseData_FieldIndex.Emotion;
                case "EMOTIONVALUE":
                    return (ushort)DialogResponseData_FieldIndex.EmotionValue;
                case "UNKNOWN":
                    return (ushort)DialogResponseData_FieldIndex.Unknown;
                case "RESPONSENUMBER":
                    return (ushort)DialogResponseData_FieldIndex.ResponseNumber;
                case "UNKNOWN2":
                    return (ushort)DialogResponseData_FieldIndex.Unknown2;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                case DialogResponseData_FieldIndex.EmotionValue:
                case DialogResponseData_FieldIndex.Unknown:
                case DialogResponseData_FieldIndex.ResponseNumber:
                case DialogResponseData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                case DialogResponseData_FieldIndex.EmotionValue:
                case DialogResponseData_FieldIndex.Unknown:
                case DialogResponseData_FieldIndex.ResponseNumber:
                case DialogResponseData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                case DialogResponseData_FieldIndex.EmotionValue:
                case DialogResponseData_FieldIndex.Unknown:
                case DialogResponseData_FieldIndex.ResponseNumber:
                case DialogResponseData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                    return "Emotion";
                case DialogResponseData_FieldIndex.EmotionValue:
                    return "EmotionValue";
                case DialogResponseData_FieldIndex.Unknown:
                    return "Unknown";
                case DialogResponseData_FieldIndex.ResponseNumber:
                    return "ResponseNumber";
                case DialogResponseData_FieldIndex.Unknown2:
                    return "Unknown2";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                case DialogResponseData_FieldIndex.EmotionValue:
                case DialogResponseData_FieldIndex.Unknown:
                case DialogResponseData_FieldIndex.ResponseNumber:
                case DialogResponseData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                case DialogResponseData_FieldIndex.EmotionValue:
                case DialogResponseData_FieldIndex.Unknown:
                case DialogResponseData_FieldIndex.ResponseNumber:
                case DialogResponseData_FieldIndex.Unknown2:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            DialogResponseData_FieldIndex enu = (DialogResponseData_FieldIndex)index;
            switch (enu)
            {
                case DialogResponseData_FieldIndex.Emotion:
                    return typeof(EmotionType);
                case DialogResponseData_FieldIndex.EmotionValue:
                    return typeof(Int32);
                case DialogResponseData_FieldIndex.Unknown:
                    return typeof(Int32);
                case DialogResponseData_FieldIndex.ResponseNumber:
                    return typeof(Byte);
                case DialogResponseData_FieldIndex.Unknown2:
                    return typeof(Byte[]);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DialogResponseDataXmlWriteTranslation);
        public static readonly RecordType TRDT_HEADER = new RecordType("TRDT");
        public static readonly RecordType TriggeringRecordType = TRDT_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponseDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DialogResponseDataSetterCommon
    {
        public static readonly DialogResponseDataSetterCommon Instance = new DialogResponseDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponseData item)
        {
            ClearPartial();
            item.Emotion = default;
            item.EmotionValue = default;
            item.Unknown = default;
            item.ResponseNumber = default;
            item.Unknown2 = new byte[3];
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IDialogResponseData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogResponseDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IDialogResponseData item,
            MutagenFrame frame)
        {
            item.Emotion = EnumBinaryTranslation<EmotionType>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.EmotionValue = frame.ReadInt32();
            item.Unknown = frame.ReadInt32();
            item.ResponseNumber = frame.ReadUInt8();
            item.Unknown2 = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(3));
        }
        
        public virtual void CopyInFromBinary(
            IDialogResponseData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(DialogResponseData_Registration.TRDT_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class DialogResponseDataCommon
    {
        public static readonly DialogResponseDataCommon Instance = new DialogResponseDataCommon();

        public DialogResponseData.Mask<bool> GetEqualsMask(
            IDialogResponseDataGetter item,
            IDialogResponseDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponseData.Mask<bool>(false);
            ((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponseDataGetter item,
            IDialogResponseDataGetter rhs,
            DialogResponseData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Emotion = item.Emotion == rhs.Emotion;
            ret.EmotionValue = item.EmotionValue == rhs.EmotionValue;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.ResponseNumber = item.ResponseNumber == rhs.ResponseNumber;
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
        }
        
        public string ToString(
            IDialogResponseDataGetter item,
            string? name = null,
            DialogResponseData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDialogResponseDataGetter item,
            FileGeneration fg,
            string? name = null,
            DialogResponseData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"DialogResponseData =>");
            }
            else
            {
                fg.AppendLine($"{name} (DialogResponseData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDialogResponseDataGetter item,
            FileGeneration fg,
            DialogResponseData.Mask<bool>? printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                fg.AppendItem(item.Emotion, "Emotion");
            }
            if (printMask?.EmotionValue ?? true)
            {
                fg.AppendItem(item.EmotionValue, "EmotionValue");
            }
            if (printMask?.Unknown ?? true)
            {
                fg.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.ResponseNumber ?? true)
            {
                fg.AppendItem(item.ResponseNumber, "ResponseNumber");
            }
            if (printMask?.Unknown2 ?? true)
            {
                fg.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
        }
        
        public bool HasBeenSet(
            IDialogResponseDataGetter item,
            DialogResponseData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IDialogResponseDataGetter item,
            DialogResponseData.Mask<bool> mask)
        {
            mask.Emotion = true;
            mask.EmotionValue = true;
            mask.Unknown = true;
            mask.ResponseNumber = true;
            mask.Unknown2 = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponseDataGetter? lhs,
            IDialogResponseDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Emotion != rhs.Emotion) return false;
            if (lhs.EmotionValue != rhs.EmotionValue) return false;
            if (lhs.Unknown != rhs.Unknown) return false;
            if (lhs.ResponseNumber != rhs.ResponseNumber) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponseDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Emotion);
            hash.Add(item.EmotionValue);
            hash.Add(item.Unknown);
            hash.Add(item.ResponseNumber);
            hash.Add(item.Unknown2);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponseData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDialogResponseDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IDialogResponseDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class DialogResponseDataSetterTranslationCommon
    {
        public static readonly DialogResponseDataSetterTranslationCommon Instance = new DialogResponseDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDialogResponseData item,
            IDialogResponseDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.Emotion) ?? true))
            {
                item.Emotion = rhs.Emotion;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.EmotionValue) ?? true))
            {
                item.EmotionValue = rhs.EmotionValue;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.ResponseNumber) ?? true))
            {
                item.ResponseNumber = rhs.ResponseNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
        }
        
        #endregion
        
        public DialogResponseData DeepCopy(
            IDialogResponseDataGetter item,
            DialogResponseData.TranslationMask? copyMask = null)
        {
            DialogResponseData ret = (DialogResponseData)((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogResponseData DeepCopy(
            IDialogResponseDataGetter item,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? copyMask = null)
        {
            DialogResponseData ret = (DialogResponseData)((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public DialogResponseData DeepCopy(
            IDialogResponseDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponseData ret = (DialogResponseData)((DialogResponseDataCommon)((IDialogResponseDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class DialogResponseData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponseData_Registration.Instance;
        public static DialogResponseData_Registration Registration => DialogResponseData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponseDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponseDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponseDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogResponseDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static DialogResponseDataXmlWriteTranslation Instance = new DialogResponseDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDialogResponseDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.Emotion) ?? true))
            {
                EnumXmlTranslation<EmotionType>.Instance.Write(
                    node: node,
                    name: nameof(item.Emotion),
                    item: item.Emotion,
                    fieldIndex: (int)DialogResponseData_FieldIndex.Emotion,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.EmotionValue) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EmotionValue),
                    item: item.EmotionValue,
                    fieldIndex: (int)DialogResponseData_FieldIndex.EmotionValue,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.Unknown) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown,
                    fieldIndex: (int)DialogResponseData_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.ResponseNumber) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ResponseNumber),
                    item: item.ResponseNumber,
                    fieldIndex: (int)DialogResponseData_FieldIndex.ResponseNumber,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)DialogResponseData_FieldIndex.Unknown2) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown2),
                    item: item.Unknown2,
                    fieldIndex: (int)DialogResponseData_FieldIndex.Unknown2,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IDialogResponseDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.DialogResponseData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.DialogResponseData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDialogResponseDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IDialogResponseDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IDialogResponseDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class DialogResponseDataXmlCreateTranslation
    {
        public readonly static DialogResponseDataXmlCreateTranslation Instance = new DialogResponseDataXmlCreateTranslation();

        public static void FillPublicXml(
            IDialogResponseData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DialogResponseDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDialogResponseData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Emotion":
                    errorMask?.PushIndex((int)DialogResponseData_FieldIndex.Emotion);
                    try
                    {
                        item.Emotion = EnumXmlTranslation<EmotionType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EmotionValue":
                    errorMask?.PushIndex((int)DialogResponseData_FieldIndex.EmotionValue);
                    try
                    {
                        item.EmotionValue = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)DialogResponseData_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResponseNumber":
                    errorMask?.PushIndex((int)DialogResponseData_FieldIndex.ResponseNumber);
                    try
                    {
                        item.ResponseNumber = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown2":
                    errorMask?.PushIndex((int)DialogResponseData_FieldIndex.Unknown2);
                    try
                    {
                        item.Unknown2 = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 3,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class DialogResponseDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            XElement node,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = DialogResponseData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            string path,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            Stream stream,
            out DialogResponseData.ErrorMask errorMask,
            DialogResponseData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((DialogResponseDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            XElement node,
            string? name = null,
            DialogResponseData.TranslationMask? translationMask = null)
        {
            ((DialogResponseDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((DialogResponseDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDialogResponseDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((DialogResponseDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogResponseDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static DialogResponseDataBinaryWriteTranslation Instance = new DialogResponseDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IDialogResponseDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<EmotionType>.Instance.Write(
                writer,
                item.Emotion,
                length: 4);
            writer.Write(item.EmotionValue);
            writer.Write(item.Unknown);
            writer.Write(item.ResponseNumber);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown2);
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(DialogResponseData_Registration.TRDT_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDialogResponseDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DialogResponseDataBinaryCreateTranslation
    {
        public readonly static DialogResponseDataBinaryCreateTranslation Instance = new DialogResponseDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DialogResponseDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseDataGetter item,
            MutagenWriter writer)
        {
            ((DialogResponseDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DialogResponseDataBinaryOverlay :
        BinaryOverlay,
        IDialogResponseDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponseData_Registration.Instance;
        public static DialogResponseData_Registration Registration => DialogResponseData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponseDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponseDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDialogResponseDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => DialogResponseDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DialogResponseDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DialogResponseDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public EmotionType Emotion => (EmotionType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public Int32 EmotionValue => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x4, 0x4));
        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        public Byte ResponseNumber => _data.Span[0xC];
        public ReadOnlyMemorySlice<Byte> Unknown2 => _data.Span.Slice(0xD, 0x3).ToArray();
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected DialogResponseDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static DialogResponseDataBinaryOverlay DialogResponseDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new DialogResponseDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static DialogResponseDataBinaryOverlay DialogResponseDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DialogResponseDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DialogResponseDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

