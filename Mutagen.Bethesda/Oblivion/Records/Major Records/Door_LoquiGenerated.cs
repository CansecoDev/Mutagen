/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Door :
        OblivionMajorRecord,
        IDoorInternal,
        ILoquiObjectSetter<Door>,
        IEquatable<Door>,
        IEqualsMask
    {
        #region Ctor
        protected Door()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDoorGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IDoorGetter.Model => this.Model;
        #endregion
        #region Script
        public FormLinkNullable<Script> Script { get; set; } = new FormLinkNullable<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> IDoorGetter.Script => this.Script;
        #endregion
        #region OpenSound
        public FormLinkNullable<Sound> OpenSound { get; set; } = new FormLinkNullable<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IDoorGetter.OpenSound => this.OpenSound;
        #endregion
        #region CloseSound
        public FormLinkNullable<Sound> CloseSound { get; set; } = new FormLinkNullable<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IDoorGetter.CloseSound => this.CloseSound;
        #endregion
        #region LoopSound
        public FormLinkNullable<Sound> LoopSound { get; set; } = new FormLinkNullable<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IDoorGetter.LoopSound => this.LoopSound;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Door.DoorFlag? _Flags;
        public Door.DoorFlag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Door.DoorFlag? IDoorGetter.Flags => this.Flags;
        #endregion
        #region RandomTeleportDestinations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Place>>? _RandomTeleportDestinations;
        public ExtendedList<IFormLink<Place>>? RandomTeleportDestinations
        {
            get => this._RandomTeleportDestinations;
            set => this._RandomTeleportDestinations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlaceGetter>>? IDoorGetter.RandomTeleportDestinations => _RandomTeleportDestinations;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DoorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IDoorGetter rhs)) return false;
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Door obj)
        {
            return ((DoorCommon)((IDoorGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((DoorCommon)((IDoorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DoorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DoorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Door CreateFromXml(
            XElement node,
            Door.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Door CreateFromXml(
            XElement node,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Door CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Door();
            ((DoorSetterCommon)((IDoorGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Door CreateFromXml(
            string path,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            string path,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Door CreateFromXml(
            Stream stream,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            Stream stream,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Door CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Script = initialValue;
                this.OpenSound = initialValue;
                this.CloseSound = initialValue;
                this.LoopSound = initialValue;
                this.Flags = initialValue;
                this.RandomTeleportDestinations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Script,
                TItem OpenSound,
                TItem CloseSound,
                TItem LoopSound,
                TItem Flags,
                TItem RandomTeleportDestinations)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Script = Script;
                this.OpenSound = OpenSound;
                this.CloseSound = CloseSound;
                this.LoopSound = LoopSound;
                this.Flags = Flags;
                this.RandomTeleportDestinations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RandomTeleportDestinations, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Script;
            public TItem OpenSound;
            public TItem CloseSound;
            public TItem LoopSound;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RandomTeleportDestinations;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
                if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
                if (!object.Equals(this.LoopSound, rhs.LoopSound)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.RandomTeleportDestinations, rhs.RandomTeleportDestinations)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Script);
                hash.Add(this.OpenSound);
                hash.Add(this.CloseSound);
                hash.Add(this.LoopSound);
                hash.Add(this.Flags);
                hash.Add(this.RandomTeleportDestinations);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Script)) return false;
                if (!eval(this.OpenSound)) return false;
                if (!eval(this.CloseSound)) return false;
                if (!eval(this.LoopSound)) return false;
                if (!eval(this.Flags)) return false;
                if (this.RandomTeleportDestinations != null)
                {
                    if (!eval(this.RandomTeleportDestinations.Overall)) return false;
                    if (this.RandomTeleportDestinations.Specific != null)
                    {
                        foreach (var item in this.RandomTeleportDestinations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Script)) return true;
                if (eval(this.OpenSound)) return true;
                if (eval(this.CloseSound)) return true;
                if (eval(this.LoopSound)) return true;
                if (eval(this.Flags)) return true;
                if (this.RandomTeleportDestinations != null)
                {
                    if (eval(this.RandomTeleportDestinations.Overall)) return true;
                    if (this.RandomTeleportDestinations.Specific != null)
                    {
                        foreach (var item in this.RandomTeleportDestinations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Door.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Script = eval(this.Script);
                obj.OpenSound = eval(this.OpenSound);
                obj.CloseSound = eval(this.CloseSound);
                obj.LoopSound = eval(this.LoopSound);
                obj.Flags = eval(this.Flags);
                if (RandomTeleportDestinations != null)
                {
                    obj.RandomTeleportDestinations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RandomTeleportDestinations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RandomTeleportDestinations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RandomTeleportDestinations.Specific = l;
                        foreach (var item in RandomTeleportDestinations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Door.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Door.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Door.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.OpenSound ?? true)
                    {
                        fg.AppendItem(OpenSound, "OpenSound");
                    }
                    if (printMask?.CloseSound ?? true)
                    {
                        fg.AppendItem(CloseSound, "CloseSound");
                    }
                    if (printMask?.LoopSound ?? true)
                    {
                        fg.AppendItem(LoopSound, "LoopSound");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.RandomTeleportDestinations?.Overall ?? true)
                        && RandomTeleportDestinations.TryGet(out var RandomTeleportDestinationsItem))
                    {
                        fg.AppendLine("RandomTeleportDestinations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(RandomTeleportDestinationsItem.Overall);
                            if (RandomTeleportDestinationsItem.Specific != null)
                            {
                                foreach (var subItem in RandomTeleportDestinationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Script;
            public Exception? OpenSound;
            public Exception? CloseSound;
            public Exception? LoopSound;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RandomTeleportDestinations;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Door_FieldIndex enu = (Door_FieldIndex)index;
                switch (enu)
                {
                    case Door_FieldIndex.Name:
                        return Name;
                    case Door_FieldIndex.Model:
                        return Model;
                    case Door_FieldIndex.Script:
                        return Script;
                    case Door_FieldIndex.OpenSound:
                        return OpenSound;
                    case Door_FieldIndex.CloseSound:
                        return CloseSound;
                    case Door_FieldIndex.LoopSound:
                        return LoopSound;
                    case Door_FieldIndex.Flags:
                        return Flags;
                    case Door_FieldIndex.RandomTeleportDestinations:
                        return RandomTeleportDestinations;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Door_FieldIndex enu = (Door_FieldIndex)index;
                switch (enu)
                {
                    case Door_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Door_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Door_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Door_FieldIndex.OpenSound:
                        this.OpenSound = ex;
                        break;
                    case Door_FieldIndex.CloseSound:
                        this.CloseSound = ex;
                        break;
                    case Door_FieldIndex.LoopSound:
                        this.LoopSound = ex;
                        break;
                    case Door_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Door_FieldIndex.RandomTeleportDestinations:
                        this.RandomTeleportDestinations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Door_FieldIndex enu = (Door_FieldIndex)index;
                switch (enu)
                {
                    case Door_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Door_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Door_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Door_FieldIndex.OpenSound:
                        this.OpenSound = (Exception?)obj;
                        break;
                    case Door_FieldIndex.CloseSound:
                        this.CloseSound = (Exception?)obj;
                        break;
                    case Door_FieldIndex.LoopSound:
                        this.LoopSound = (Exception?)obj;
                        break;
                    case Door_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Door_FieldIndex.RandomTeleportDestinations:
                        this.RandomTeleportDestinations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Script != null) return true;
                if (OpenSound != null) return true;
                if (CloseSound != null) return true;
                if (LoopSound != null) return true;
                if (Flags != null) return true;
                if (RandomTeleportDestinations != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Script, "Script");
                fg.AppendItem(OpenSound, "OpenSound");
                fg.AppendItem(CloseSound, "CloseSound");
                fg.AppendItem(LoopSound, "LoopSound");
                fg.AppendItem(Flags, "Flags");
                if (RandomTeleportDestinations.TryGet(out var RandomTeleportDestinationsItem))
                {
                    fg.AppendLine("RandomTeleportDestinations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(RandomTeleportDestinationsItem.Overall);
                        if (RandomTeleportDestinationsItem.Specific != null)
                        {
                            foreach (var subItem in RandomTeleportDestinationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound);
                ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound);
                ret.LoopSound = this.LoopSound.Combine(rhs.LoopSound);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.RandomTeleportDestinations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.RandomTeleportDestinations?.Overall, rhs.RandomTeleportDestinations?.Overall), ExceptionExt.Combine(this.RandomTeleportDestinations?.Specific, rhs.RandomTeleportDestinations?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Script;
            public bool OpenSound;
            public bool CloseSound;
            public bool LoopSound;
            public bool Flags;
            public bool RandomTeleportDestinations;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Script = defaultOn;
                this.OpenSound = defaultOn;
                this.CloseSound = defaultOn;
                this.LoopSound = defaultOn;
                this.Flags = defaultOn;
                this.RandomTeleportDestinations = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Script, null));
                ret.Add((OpenSound, null));
                ret.Add((CloseSound, null));
                ret.Add((LoopSound, null));
                ret.Add((Flags, null));
                ret.Add((RandomTeleportDestinations, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Door_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DoorCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DoorCommon.Instance.RemapLinks(this, mapping);
        public Door(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Door(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Door(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DoorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DoorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Door CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Door CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Door();
            ((DoorSetterCommon)((IDoorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDoorGetter)rhs, include);

        void IClearable.Clear()
        {
            ((DoorSetterCommon)((IDoorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Door GetNew()
        {
            return new Door();
        }

    }
    #endregion

    #region Interface
    public partial interface IDoor :
        IDoorGetter,
        IOblivionMajorRecord,
        INamed,
        ILoquiObjectSetter<IDoorInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new FormLinkNullable<Script> Script { get; set; }
        new FormLinkNullable<Sound> OpenSound { get; set; }
        new FormLinkNullable<Sound> CloseSound { get; set; }
        new FormLinkNullable<Sound> LoopSound { get; set; }
        new Door.DoorFlag? Flags { get; set; }
        new ExtendedList<IFormLink<Place>>? RandomTeleportDestinations { get; set; }
    }

    public partial interface IDoorInternal :
        IOblivionMajorRecordInternal,
        IDoor,
        IDoorGetter
    {
    }

    public partial interface IDoorGetter :
        IOblivionMajorRecordGetter,
        INamedGetter,
        ILoquiObject<IDoorGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Door_Registration.Instance;
        String? Name { get; }
        IModelGetter? Model { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IFormLinkNullableGetter<ISoundGetter> OpenSound { get; }
        IFormLinkNullableGetter<ISoundGetter> CloseSound { get; }
        IFormLinkNullableGetter<ISoundGetter> LoopSound { get; }
        Door.DoorFlag? Flags { get; }
        IReadOnlyList<IFormLinkGetter<IPlaceGetter>>? RandomTeleportDestinations { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DoorMixIn
    {
        public static void Clear(this IDoorInternal item)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Door.Mask<bool> GetEqualsMask(
            this IDoorGetter item,
            IDoorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IDoorGetter item,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IDoorGetter item,
            FileGeneration fg,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            ((DoorCommon)((IDoorGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IDoorGetter item,
            Door.Mask<bool?> checkMask)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Door.Mask<bool> GetHasBeenSetMask(this IDoorGetter item)
        {
            var ret = new Door.Mask<bool>(false);
            ((DoorCommon)((IDoorGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IDoorGetter item,
            IDoorGetter rhs)
        {
            return ((DoorCommon)((IDoorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DoorSetterTranslationCommon)((IDoorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Door.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDoorInternal lhs,
            IDoorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DoorSetterTranslationCommon)((IDoorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            Door.TranslationMask? copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Door DeepCopy(
            this IDoorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DoorSetterTranslationCommon)((IDoorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDoorInternal item,
            XElement node,
            Door.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IDoorInternal item,
            XElement node,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            string path,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            string path,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            Stream stream,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            Stream stream,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IDoorInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Door.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IDoorInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IDoorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DoorSetterCommon)((IDoorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Door_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Script = 7,
        OpenSound = 8,
        CloseSound = 9,
        LoopSound = 10,
        Flags = 11,
        RandomTeleportDestinations = 12,
    }
    #endregion

    #region Registration
    public partial class Door_Registration : ILoquiRegistration
    {
        public static readonly Door_Registration Instance = new Door_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 74,
            version: 0);

        public const string GUID = "2430f9e3-8270-4b86-b1e2-03757c4a0f93";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Door.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Door.ErrorMask);

        public static readonly Type ClassType = typeof(Door);

        public static readonly Type GetterType = typeof(IDoorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDoor);

        public static readonly Type? InternalSetterType = typeof(IDoorInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Door";

        public const string Name = "Door";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Door_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Door_FieldIndex.Model;
                case "SCRIPT":
                    return (ushort)Door_FieldIndex.Script;
                case "OPENSOUND":
                    return (ushort)Door_FieldIndex.OpenSound;
                case "CLOSESOUND":
                    return (ushort)Door_FieldIndex.CloseSound;
                case "LOOPSOUND":
                    return (ushort)Door_FieldIndex.LoopSound;
                case "FLAGS":
                    return (ushort)Door_FieldIndex.Flags;
                case "RANDOMTELEPORTDESTINATIONS":
                    return (ushort)Door_FieldIndex.RandomTeleportDestinations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.RandomTeleportDestinations:
                    return true;
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Model:
                    return true;
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return "Name";
                case Door_FieldIndex.Model:
                    return "Model";
                case Door_FieldIndex.Script:
                    return "Script";
                case Door_FieldIndex.OpenSound:
                    return "OpenSound";
                case Door_FieldIndex.CloseSound:
                    return "CloseSound";
                case Door_FieldIndex.LoopSound:
                    return "LoopSound";
                case Door_FieldIndex.Flags:
                    return "Flags";
                case Door_FieldIndex.RandomTeleportDestinations:
                    return "RandomTeleportDestinations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                case Door_FieldIndex.Model:
                case Door_FieldIndex.Script:
                case Door_FieldIndex.OpenSound:
                case Door_FieldIndex.CloseSound:
                case Door_FieldIndex.LoopSound:
                case Door_FieldIndex.Flags:
                case Door_FieldIndex.RandomTeleportDestinations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Door_FieldIndex enu = (Door_FieldIndex)index;
            switch (enu)
            {
                case Door_FieldIndex.Name:
                    return typeof(String);
                case Door_FieldIndex.Model:
                    return typeof(Model);
                case Door_FieldIndex.Script:
                    return typeof(FormLinkNullable<Script>);
                case Door_FieldIndex.OpenSound:
                    return typeof(FormLinkNullable<Sound>);
                case Door_FieldIndex.CloseSound:
                    return typeof(FormLinkNullable<Sound>);
                case Door_FieldIndex.LoopSound:
                    return typeof(FormLinkNullable<Sound>);
                case Door_FieldIndex.Flags:
                    return typeof(Door.DoorFlag);
                case Door_FieldIndex.RandomTeleportDestinations:
                    return typeof(ExtendedList<IFormLink<Place>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(DoorXmlWriteTranslation);
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TriggeringRecordType = DOOR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 8;
        public static readonly Type BinaryWriteTranslation = typeof(DoorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class DoorSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DoorSetterCommon Instance = new DoorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDoorInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Script = null;
            item.OpenSound = null;
            item.CloseSound = null;
            item.LoopSound = null;
            item.Flags = default;
            item.RandomTeleportDestinations = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDoorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDoorInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IDoorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IDoorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    DoorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Door)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Door)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Door_Registration.DOOR_HEADER;
        protected static void FillBinaryStructs(
            IDoorInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IDoorInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Script);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.OpenSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.OpenSound);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CloseSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.CloseSound);
                }
                case 0x4D414E42: // BNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.LoopSound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.LoopSound);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Door.DoorFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Flags);
                }
                case 0x4D414E54: // TNAM
                {
                    item.RandomTeleportDestinations = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Place>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Door_Registration.TNAM_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Place>>();
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.RandomTeleportDestinations);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IDoorInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IDoorInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Door)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Door)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class DoorCommon : OblivionMajorRecordCommon
    {
        public new static readonly DoorCommon Instance = new DoorCommon();

        public Door.Mask<bool> GetEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Door.Mask<bool>(false);
            ((DoorCommon)((IDoorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDoorGetter item,
            IDoorGetter rhs,
            Door.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.OpenSound = object.Equals(item.OpenSound, rhs.OpenSound);
            ret.CloseSound = object.Equals(item.CloseSound, rhs.CloseSound);
            ret.LoopSound = object.Equals(item.LoopSound, rhs.LoopSound);
            ret.Flags = item.Flags == rhs.Flags;
            ret.RandomTeleportDestinations = item.RandomTeleportDestinations.CollectionEqualsHelper(
                rhs.RandomTeleportDestinations,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IDoorGetter item,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IDoorGetter item,
            FileGeneration fg,
            string? name = null,
            Door.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Door =>");
            }
            else
            {
                fg.AppendLine($"{name} (Door) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IDoorGetter item,
            FileGeneration fg,
            Door.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if ((printMask?.OpenSound ?? true)
                && item.OpenSound.TryGet(out var OpenSoundItem))
            {
                fg.AppendItem(OpenSoundItem, "OpenSound");
            }
            if ((printMask?.CloseSound ?? true)
                && item.CloseSound.TryGet(out var CloseSoundItem))
            {
                fg.AppendItem(CloseSoundItem, "CloseSound");
            }
            if ((printMask?.LoopSound ?? true)
                && item.LoopSound.TryGet(out var LoopSoundItem))
            {
                fg.AppendItem(LoopSoundItem, "LoopSound");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.RandomTeleportDestinations?.Overall ?? true)
                && item.RandomTeleportDestinations.TryGet(out var RandomTeleportDestinationsItem))
            {
                fg.AppendLine("RandomTeleportDestinations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in RandomTeleportDestinationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IDoorGetter item,
            Door.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.OpenSound.HasValue && checkMask.OpenSound.Value != (item.OpenSound.FormKey != null)) return false;
            if (checkMask.CloseSound.HasValue && checkMask.CloseSound.Value != (item.CloseSound.FormKey != null)) return false;
            if (checkMask.LoopSound.HasValue && checkMask.LoopSound.Value != (item.LoopSound.FormKey != null)) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.RandomTeleportDestinations?.Overall.HasValue ?? false && checkMask.RandomTeleportDestinations!.Overall.Value != (item.RandomTeleportDestinations != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IDoorGetter item,
            Door.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Script = (item.Script.FormKey != null);
            mask.OpenSound = (item.OpenSound.FormKey != null);
            mask.CloseSound = (item.CloseSound.FormKey != null);
            mask.LoopSound = (item.LoopSound.FormKey != null);
            mask.Flags = (item.Flags != null);
            mask.RandomTeleportDestinations = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.RandomTeleportDestinations != null), default);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Door_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Door_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Door_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Door_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDoorGetter? lhs,
            IDoorGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.OpenSound.Equals(rhs.OpenSound)) return false;
            if (!lhs.CloseSound.Equals(rhs.CloseSound)) return false;
            if (!lhs.LoopSound.Equals(rhs.LoopSound)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.RandomTeleportDestinations.SequenceEqual(rhs.RandomTeleportDestinations)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDoorGetter?)lhs,
                rhs: rhs as IDoorGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IDoorGetter?)lhs,
                rhs: rhs as IDoorGetter);
        }
        
        public virtual int GetHashCode(IDoorGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                hash.Add(Scriptitem);
            }
            if (item.OpenSound.TryGet(out var OpenSounditem))
            {
                hash.Add(OpenSounditem);
            }
            if (item.CloseSound.TryGet(out var CloseSounditem))
            {
                hash.Add(CloseSounditem);
            }
            if (item.LoopSound.TryGet(out var LoopSounditem))
            {
                hash.Add(LoopSounditem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.RandomTeleportDestinations);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDoorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDoorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Door.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IDoorGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Script.FormKey.TryGet(out var ScriptKey))
            {
                yield return ScriptKey;
            }
            if (obj.OpenSound.FormKey.TryGet(out var OpenSoundKey))
            {
                yield return OpenSoundKey;
            }
            if (obj.CloseSound.FormKey.TryGet(out var CloseSoundKey))
            {
                yield return CloseSoundKey;
            }
            if (obj.LoopSound.FormKey.TryGet(out var LoopSoundKey))
            {
                yield return LoopSoundKey;
            }
            if (obj.RandomTeleportDestinations.TryGet(out var RandomTeleportDestinationsItem))
            {
                foreach (var item in RandomTeleportDestinationsItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IDoorGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Door obj, Door rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Door(getNextFormKey());
            ret.DeepCopyIn((Door)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Door)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class DoorSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DoorSetterTranslationCommon Instance = new DoorSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IDoorInternal item,
            IDoorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IDoor item,
            IDoorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Door_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Script) ?? true))
            {
                item.Script = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.OpenSound) ?? true))
            {
                item.OpenSound = rhs.OpenSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.CloseSound) ?? true))
            {
                item.CloseSound = rhs.CloseSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.LoopSound) ?? true))
            {
                item.LoopSound = rhs.LoopSound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Door_FieldIndex.RandomTeleportDestinations) ?? true))
            {
                errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                try
                {
                    if ((rhs.RandomTeleportDestinations != null))
                    {
                        item.RandomTeleportDestinations = 
                            rhs.RandomTeleportDestinations
                            .Select(r => (IFormLink<Place>)new FormLink<Place>(r.FormKey))
                            .ToExtendedList<IFormLink<Place>>();
                    }
                    else
                    {
                        item.RandomTeleportDestinations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDoorInternal)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDoor)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDoorInternal)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IDoor)item,
                rhs: (IDoorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Door DeepCopy(
            IDoorGetter item,
            Door.TranslationMask? copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Door DeepCopy(
            IDoorGetter item,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Door DeepCopy(
            IDoorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Door ret = (Door)((DoorCommon)((IDoorGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Door
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DoorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DoorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DoorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static DoorXmlWriteTranslation Instance = new DoorXmlWriteTranslation();

        public static void WriteToNodeXml(
            IDoorGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Door_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Door_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.Model));
                }
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey.Value,
                    fieldIndex: (int)Door_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((item.OpenSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.OpenSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenSound),
                    item: item.OpenSound.FormKey.Value,
                    fieldIndex: (int)Door_FieldIndex.OpenSound,
                    errorMask: errorMask);
            }
            if ((item.CloseSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.CloseSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloseSound),
                    item: item.CloseSound.FormKey.Value,
                    fieldIndex: (int)Door_FieldIndex.CloseSound,
                    errorMask: errorMask);
            }
            if ((item.LoopSound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.LoopSound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LoopSound),
                    item: item.LoopSound.FormKey.Value,
                    fieldIndex: (int)Door_FieldIndex.LoopSound,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Door.DoorFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Door_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.RandomTeleportDestinations != null)
                && (translationMask?.GetShouldTranslate((int)Door_FieldIndex.RandomTeleportDestinations) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IPlaceGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.RandomTeleportDestinations),
                    item: item.RandomTeleportDestinations,
                    fieldIndex: (int)Door_FieldIndex.RandomTeleportDestinations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.RandomTeleportDestinations),
                    transl: (XElement subNode, IFormLinkGetter<IPlaceGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IDoorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Door");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Door");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDoorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDoorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IDoorGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class DoorXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static DoorXmlCreateTranslation Instance = new DoorXmlCreateTranslation();

        public static void FillPublicXml(
            IDoorInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    DoorXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IDoorInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Door_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Door_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Door_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)Door_FieldIndex.Script);
                    try
                    {
                        item.Script = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenSound":
                    errorMask?.PushIndex((int)Door_FieldIndex.OpenSound);
                    try
                    {
                        item.OpenSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloseSound":
                    errorMask?.PushIndex((int)Door_FieldIndex.CloseSound);
                    try
                    {
                        item.CloseSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LoopSound":
                    errorMask?.PushIndex((int)Door_FieldIndex.LoopSound);
                    try
                    {
                        item.LoopSound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Door_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Door.DoorFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RandomTeleportDestinations":
                    errorMask?.PushIndex((int)Door_FieldIndex.RandomTeleportDestinations);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Place>>.Instance.Parse(
                            node: node,
                            enumer: out var RandomTeleportDestinationsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.RandomTeleportDestinations = RandomTeleportDestinationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.RandomTeleportDestinations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class DoorXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IDoorGetter item,
            XElement node,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((DoorXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Door.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IDoorGetter item,
            string path,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IDoorGetter item,
            Stream stream,
            out Door.ErrorMask errorMask,
            Door.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static DoorBinaryWriteTranslation Instance = new DoorBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IDoorGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Door_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(Door_Registration.SCRI_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OpenSound,
                header: recordTypeConverter.ConvertToCustom(Door_Registration.SNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CloseSound,
                header: recordTypeConverter.ConvertToCustom(Door_Registration.ANAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LoopSound,
                header: recordTypeConverter.ConvertToCustom(Door_Registration.BNAM_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Door.DoorFlag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(Door_Registration.FNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IPlaceGetter>>.Instance.Write(
                writer: writer,
                items: item.RandomTeleportDestinations,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlaceGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Door_Registration.TNAM_HEADER));
                });
        }

        public void Write(
            MutagenWriter writer,
            IDoorGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Door_Registration.DOOR_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDoorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDoorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IDoorGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class DoorBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static DoorBinaryCreateTranslation Instance = new DoorBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DoorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class DoorBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IDoorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Door_Registration.Instance;
        public new static Door_Registration Registration => Door_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DoorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DoorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IDoorGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => DoorCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DoorCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DoorCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => DoorXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((DoorXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DoorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((DoorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        #region OpenSound
        private int? _OpenSoundLocation;
        public bool OpenSound_IsSet => _OpenSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundGetter> OpenSound => _OpenSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OpenSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region CloseSound
        private int? _CloseSoundLocation;
        public bool CloseSound_IsSet => _CloseSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundGetter> CloseSound => _CloseSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CloseSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region LoopSound
        private int? _LoopSoundLocation;
        public bool LoopSound_IsSet => _LoopSoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundGetter> LoopSound => _LoopSoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _LoopSoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Door.DoorFlag? Flags => _FlagsLocation.HasValue ? (Door.DoorFlag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(Door.DoorFlag?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IPlaceGetter>>? RandomTeleportDestinations { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected DoorBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static DoorBinaryOverlay DoorFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new DoorBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static DoorBinaryOverlay DoorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return DoorFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Model);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Script);
                }
                case 0x4D414E53: // SNAM
                {
                    _OpenSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.OpenSound);
                }
                case 0x4D414E41: // ANAM
                {
                    _CloseSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.CloseSound);
                }
                case 0x4D414E42: // BNAM
                {
                    _LoopSoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.LoopSound);
                }
                case 0x4D414E46: // FNAM
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.Flags);
                }
                case 0x4D414E54: // TNAM
                {
                    this.RandomTeleportDestinations = BinaryOverlaySetList<IFormLinkGetter<IPlaceGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IPlaceGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Door_FieldIndex.RandomTeleportDestinations);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            DoorMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

