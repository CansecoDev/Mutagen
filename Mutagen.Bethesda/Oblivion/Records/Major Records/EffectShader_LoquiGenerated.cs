/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class EffectShader :
        OblivionMajorRecord,
        IEffectShaderInternal,
        ILoquiObjectSetter<EffectShader>,
        IEquatable<EffectShader>,
        IEqualsMask
    {
        #region Ctor
        protected EffectShader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FillTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _FillTexture;
        public String? FillTexture
        {
            get => this._FillTexture;
            set => this._FillTexture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.FillTexture => this.FillTexture;
        #endregion
        #region ParticleShaderTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _ParticleShaderTexture;
        public String? ParticleShaderTexture
        {
            get => this._ParticleShaderTexture;
            set => this._ParticleShaderTexture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.ParticleShaderTexture => this.ParticleShaderTexture;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.Flag _Flags;
        public EffectShader.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region MembraneShaderSourceBlendMode
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.SourceBlendMode _MembraneShaderSourceBlendMode;
        public EffectShader.SourceBlendMode MembraneShaderSourceBlendMode
        {
            get => this._MembraneShaderSourceBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MembraneShaderSourceBlendMode = value;
            }
        }
        #endregion
        #region MembraneShaderBlendOperation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.BlendOperation _MembraneShaderBlendOperation;
        public EffectShader.BlendOperation MembraneShaderBlendOperation
        {
            get => this._MembraneShaderBlendOperation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MembraneShaderBlendOperation = value;
            }
        }
        #endregion
        #region MembraneShaderZTestFunction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.ZTestFunction _MembraneShaderZTestFunction;
        public EffectShader.ZTestFunction MembraneShaderZTestFunction
        {
            get => this._MembraneShaderZTestFunction;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MembraneShaderZTestFunction = value;
            }
        }
        #endregion
        #region FillTextureEffectColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _FillTextureEffectColor;
        public Color FillTextureEffectColor
        {
            get => this._FillTextureEffectColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectColor = value;
            }
        }
        #endregion
        #region FillTextureEffectAlphaFadeInTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectAlphaFadeInTime;
        public Single FillTextureEffectAlphaFadeInTime
        {
            get => this._FillTextureEffectAlphaFadeInTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectAlphaFadeInTime = value;
            }
        }
        #endregion
        #region FillTextureEffectFullAlphaTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectFullAlphaTime;
        public Single FillTextureEffectFullAlphaTime
        {
            get => this._FillTextureEffectFullAlphaTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectFullAlphaTime = value;
            }
        }
        #endregion
        #region FillTextureEffectAlphaFadeOutTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectAlphaFadeOutTime;
        public Single FillTextureEffectAlphaFadeOutTime
        {
            get => this._FillTextureEffectAlphaFadeOutTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectAlphaFadeOutTime = value;
            }
        }
        #endregion
        #region FillTextureEffectPersistentAlphaRatio
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectPersistentAlphaRatio;
        public Single FillTextureEffectPersistentAlphaRatio
        {
            get => this._FillTextureEffectPersistentAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectPersistentAlphaRatio = value;
            }
        }
        #endregion
        #region FillTextureEffectAlphaPulseAmplitude
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectAlphaPulseAmplitude;
        public Single FillTextureEffectAlphaPulseAmplitude
        {
            get => this._FillTextureEffectAlphaPulseAmplitude;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectAlphaPulseAmplitude = value;
            }
        }
        #endregion
        #region FillTextureEffectAlphaPulseFrequency
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectAlphaPulseFrequency;
        public Single FillTextureEffectAlphaPulseFrequency
        {
            get => this._FillTextureEffectAlphaPulseFrequency;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectAlphaPulseFrequency = value;
            }
        }
        #endregion
        #region FillTextureEffectTextureAnimationSpeedU
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectTextureAnimationSpeedU;
        public Single FillTextureEffectTextureAnimationSpeedU
        {
            get => this._FillTextureEffectTextureAnimationSpeedU;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectTextureAnimationSpeedU = value;
            }
        }
        #endregion
        #region FillTextureEffectTextureAnimationSpeedV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectTextureAnimationSpeedV;
        public Single FillTextureEffectTextureAnimationSpeedV
        {
            get => this._FillTextureEffectTextureAnimationSpeedV;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectTextureAnimationSpeedV = value;
            }
        }
        #endregion
        #region EdgeEffectFallOff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectFallOff;
        public Single EdgeEffectFallOff
        {
            get => this._EdgeEffectFallOff;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectFallOff = value;
            }
        }
        #endregion
        #region EdgeEffectColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _EdgeEffectColor;
        public Color EdgeEffectColor
        {
            get => this._EdgeEffectColor;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectColor = value;
            }
        }
        #endregion
        #region EdgeEffectAlphaFadeInTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectAlphaFadeInTime;
        public Single EdgeEffectAlphaFadeInTime
        {
            get => this._EdgeEffectAlphaFadeInTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectAlphaFadeInTime = value;
            }
        }
        #endregion
        #region EdgeEffectFullAlphaTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectFullAlphaTime;
        public Single EdgeEffectFullAlphaTime
        {
            get => this._EdgeEffectFullAlphaTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectFullAlphaTime = value;
            }
        }
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectAlphaFadeOutTime;
        public Single EdgeEffectAlphaFadeOutTime
        {
            get => this._EdgeEffectAlphaFadeOutTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectAlphaFadeOutTime = value;
            }
        }
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectPersistentAlphaRatio;
        public Single EdgeEffectPersistentAlphaRatio
        {
            get => this._EdgeEffectPersistentAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectPersistentAlphaRatio = value;
            }
        }
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectAlphaPulseAmplitude;
        public Single EdgeEffectAlphaPulseAmplitude
        {
            get => this._EdgeEffectAlphaPulseAmplitude;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectAlphaPulseAmplitude = value;
            }
        }
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectAlphaPulseFrequency;
        public Single EdgeEffectAlphaPulseFrequency
        {
            get => this._EdgeEffectAlphaPulseFrequency;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectAlphaPulseFrequency = value;
            }
        }
        #endregion
        #region FillTextureEffectFullAlphaRatio
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureEffectFullAlphaRatio;
        public Single FillTextureEffectFullAlphaRatio
        {
            get => this._FillTextureEffectFullAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._FillTextureEffectFullAlphaRatio = value;
            }
        }
        #endregion
        #region EdgeEffectFullAlphaRatio
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _EdgeEffectFullAlphaRatio;
        public Single EdgeEffectFullAlphaRatio
        {
            get => this._EdgeEffectFullAlphaRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._EdgeEffectFullAlphaRatio = value;
            }
        }
        #endregion
        #region MembraneShaderDestBlendMode
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.SourceBlendMode _MembraneShaderDestBlendMode;
        public EffectShader.SourceBlendMode MembraneShaderDestBlendMode
        {
            get => this._MembraneShaderDestBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MembraneShaderDestBlendMode = value;
            }
        }
        #endregion
        #region ParticleShaderSourceBlendMode
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.SourceBlendMode _ParticleShaderSourceBlendMode;
        public EffectShader.SourceBlendMode ParticleShaderSourceBlendMode
        {
            get => this._ParticleShaderSourceBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderSourceBlendMode = value;
            }
        }
        #endregion
        #region ParticleShaderBlendOperation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.BlendOperation _ParticleShaderBlendOperation;
        public EffectShader.BlendOperation ParticleShaderBlendOperation
        {
            get => this._ParticleShaderBlendOperation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderBlendOperation = value;
            }
        }
        #endregion
        #region ParticleShaderZTestFunction
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.ZTestFunction _ParticleShaderZTestFunction;
        public EffectShader.ZTestFunction ParticleShaderZTestFunction
        {
            get => this._ParticleShaderZTestFunction;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderZTestFunction = value;
            }
        }
        #endregion
        #region ParticleShaderDestBlendMode
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.SourceBlendMode _ParticleShaderDestBlendMode;
        public EffectShader.SourceBlendMode ParticleShaderDestBlendMode
        {
            get => this._ParticleShaderDestBlendMode;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderDestBlendMode = value;
            }
        }
        #endregion
        #region ParticleShaderParticleBirthRampUpTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderParticleBirthRampUpTime;
        public Single ParticleShaderParticleBirthRampUpTime
        {
            get => this._ParticleShaderParticleBirthRampUpTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderParticleBirthRampUpTime = value;
            }
        }
        #endregion
        #region ParticleShaderFullParticleBirthTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderFullParticleBirthTime;
        public Single ParticleShaderFullParticleBirthTime
        {
            get => this._ParticleShaderFullParticleBirthTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderFullParticleBirthTime = value;
            }
        }
        #endregion
        #region ParticleShaderParticleBirthRampDownTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderParticleBirthRampDownTime;
        public Single ParticleShaderParticleBirthRampDownTime
        {
            get => this._ParticleShaderParticleBirthRampDownTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderParticleBirthRampDownTime = value;
            }
        }
        #endregion
        #region ParticleShaderFullParticleBirthRatio
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderFullParticleBirthRatio;
        public Single ParticleShaderFullParticleBirthRatio
        {
            get => this._ParticleShaderFullParticleBirthRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderFullParticleBirthRatio = value;
            }
        }
        #endregion
        #region ParticleShaderPersistentParticleBirthRatio
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderPersistentParticleBirthRatio;
        public Single ParticleShaderPersistentParticleBirthRatio
        {
            get => this._ParticleShaderPersistentParticleBirthRatio;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderPersistentParticleBirthRatio = value;
            }
        }
        #endregion
        #region ParticleShaderParticleLifetime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderParticleLifetime;
        public Single ParticleShaderParticleLifetime
        {
            get => this._ParticleShaderParticleLifetime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderParticleLifetime = value;
            }
        }
        #endregion
        #region ParticleShaderParticleLifetimePlusMinus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderParticleLifetimePlusMinus;
        public Single ParticleShaderParticleLifetimePlusMinus
        {
            get => this._ParticleShaderParticleLifetimePlusMinus;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderParticleLifetimePlusMinus = value;
            }
        }
        #endregion
        #region ParticleShaderInitialSpeedAlongNormal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderInitialSpeedAlongNormal;
        public Single ParticleShaderInitialSpeedAlongNormal
        {
            get => this._ParticleShaderInitialSpeedAlongNormal;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderInitialSpeedAlongNormal = value;
            }
        }
        #endregion
        #region ParticleShaderAccelerationAlongNormal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderAccelerationAlongNormal;
        public Single ParticleShaderAccelerationAlongNormal
        {
            get => this._ParticleShaderAccelerationAlongNormal;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderAccelerationAlongNormal = value;
            }
        }
        #endregion
        #region ParticleShaderInitialVelocity1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderInitialVelocity1;
        public Single ParticleShaderInitialVelocity1
        {
            get => this._ParticleShaderInitialVelocity1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderInitialVelocity1 = value;
            }
        }
        #endregion
        #region ParticleShaderInitialVelocity2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderInitialVelocity2;
        public Single ParticleShaderInitialVelocity2
        {
            get => this._ParticleShaderInitialVelocity2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderInitialVelocity2 = value;
            }
        }
        #endregion
        #region ParticleShaderInitialVelocity3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderInitialVelocity3;
        public Single ParticleShaderInitialVelocity3
        {
            get => this._ParticleShaderInitialVelocity3;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderInitialVelocity3 = value;
            }
        }
        #endregion
        #region ParticleShaderAcceleration1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderAcceleration1;
        public Single ParticleShaderAcceleration1
        {
            get => this._ParticleShaderAcceleration1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderAcceleration1 = value;
            }
        }
        #endregion
        #region ParticleShaderAcceleration2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderAcceleration2;
        public Single ParticleShaderAcceleration2
        {
            get => this._ParticleShaderAcceleration2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderAcceleration2 = value;
            }
        }
        #endregion
        #region ParticleShaderAcceleration3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderAcceleration3;
        public Single ParticleShaderAcceleration3
        {
            get => this._ParticleShaderAcceleration3;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderAcceleration3 = value;
            }
        }
        #endregion
        #region ParticleShaderScaleKey1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderScaleKey1;
        public Single ParticleShaderScaleKey1
        {
            get => this._ParticleShaderScaleKey1;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderScaleKey1 = value;
            }
        }
        #endregion
        #region ParticleShaderScaleKey2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderScaleKey2;
        public Single ParticleShaderScaleKey2
        {
            get => this._ParticleShaderScaleKey2;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderScaleKey2 = value;
            }
        }
        #endregion
        #region ParticleShaderScaleKey1Time
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderScaleKey1Time;
        public Single ParticleShaderScaleKey1Time
        {
            get => this._ParticleShaderScaleKey1Time;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderScaleKey1Time = value;
            }
        }
        #endregion
        #region ParticleShaderScaleKey2Time
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ParticleShaderScaleKey2Time;
        public Single ParticleShaderScaleKey2Time
        {
            get => this._ParticleShaderScaleKey2Time;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ParticleShaderScaleKey2Time = value;
            }
        }
        #endregion
        #region ColorKey1Color
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _ColorKey1Color;
        public Color ColorKey1Color
        {
            get => this._ColorKey1Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey1Color = value;
            }
        }
        #endregion
        #region ColorKey2Color
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _ColorKey2Color;
        public Color ColorKey2Color
        {
            get => this._ColorKey2Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey2Color = value;
            }
        }
        #endregion
        #region ColorKey3Color
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _ColorKey3Color;
        public Color ColorKey3Color
        {
            get => this._ColorKey3Color;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey3Color = value;
            }
        }
        #endregion
        #region ColorKey1ColorAlpha
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorKey1ColorAlpha;
        public Single ColorKey1ColorAlpha
        {
            get => this._ColorKey1ColorAlpha;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey1ColorAlpha = value;
            }
        }
        #endregion
        #region ColorKey2ColorAlpha
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorKey2ColorAlpha;
        public Single ColorKey2ColorAlpha
        {
            get => this._ColorKey2ColorAlpha;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey2ColorAlpha = value;
            }
        }
        #endregion
        #region ColorKey3ColorAlpha
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorKey3ColorAlpha;
        public Single ColorKey3ColorAlpha
        {
            get => this._ColorKey3ColorAlpha;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey3ColorAlpha = value;
            }
        }
        #endregion
        #region ColorKey1ColorKeyTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorKey1ColorKeyTime;
        public Single ColorKey1ColorKeyTime
        {
            get => this._ColorKey1ColorKeyTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey1ColorKeyTime = value;
            }
        }
        #endregion
        #region ColorKey2ColorKeyTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorKey2ColorKeyTime;
        public Single ColorKey2ColorKeyTime
        {
            get => this._ColorKey2ColorKeyTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey2ColorKeyTime = value;
            }
        }
        #endregion
        #region ColorKey3ColorKeyTime
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorKey3ColorKeyTime;
        public Single ColorKey3ColorKeyTime
        {
            get => this._ColorKey3ColorKeyTime;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._ColorKey3ColorKeyTime = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public EffectShader.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            EffectShaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IEffectShaderGetter rhs)) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(EffectShader obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => EffectShaderXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EffectShaderXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new EffectShader CreateFromXml(
            XElement node,
            EffectShader.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static EffectShader CreateFromXml(
            XElement node,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static EffectShader CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new EffectShader();
            ((EffectShaderSetterCommon)((IEffectShaderGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static EffectShader CreateFromXml(
            string path,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static EffectShader CreateFromXml(
            string path,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EffectShader CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static EffectShader CreateFromXml(
            Stream stream,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static EffectShader CreateFromXml(
            Stream stream,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static EffectShader CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FillTexture = initialValue;
                this.ParticleShaderTexture = initialValue;
                this.Flags = initialValue;
                this.MembraneShaderSourceBlendMode = initialValue;
                this.MembraneShaderBlendOperation = initialValue;
                this.MembraneShaderZTestFunction = initialValue;
                this.FillTextureEffectColor = initialValue;
                this.FillTextureEffectAlphaFadeInTime = initialValue;
                this.FillTextureEffectFullAlphaTime = initialValue;
                this.FillTextureEffectAlphaFadeOutTime = initialValue;
                this.FillTextureEffectPersistentAlphaRatio = initialValue;
                this.FillTextureEffectAlphaPulseAmplitude = initialValue;
                this.FillTextureEffectAlphaPulseFrequency = initialValue;
                this.FillTextureEffectTextureAnimationSpeedU = initialValue;
                this.FillTextureEffectTextureAnimationSpeedV = initialValue;
                this.EdgeEffectFallOff = initialValue;
                this.EdgeEffectColor = initialValue;
                this.EdgeEffectAlphaFadeInTime = initialValue;
                this.EdgeEffectFullAlphaTime = initialValue;
                this.EdgeEffectAlphaFadeOutTime = initialValue;
                this.EdgeEffectPersistentAlphaRatio = initialValue;
                this.EdgeEffectAlphaPulseAmplitude = initialValue;
                this.EdgeEffectAlphaPulseFrequency = initialValue;
                this.FillTextureEffectFullAlphaRatio = initialValue;
                this.EdgeEffectFullAlphaRatio = initialValue;
                this.MembraneShaderDestBlendMode = initialValue;
                this.ParticleShaderSourceBlendMode = initialValue;
                this.ParticleShaderBlendOperation = initialValue;
                this.ParticleShaderZTestFunction = initialValue;
                this.ParticleShaderDestBlendMode = initialValue;
                this.ParticleShaderParticleBirthRampUpTime = initialValue;
                this.ParticleShaderFullParticleBirthTime = initialValue;
                this.ParticleShaderParticleBirthRampDownTime = initialValue;
                this.ParticleShaderFullParticleBirthRatio = initialValue;
                this.ParticleShaderPersistentParticleBirthRatio = initialValue;
                this.ParticleShaderParticleLifetime = initialValue;
                this.ParticleShaderParticleLifetimePlusMinus = initialValue;
                this.ParticleShaderInitialSpeedAlongNormal = initialValue;
                this.ParticleShaderAccelerationAlongNormal = initialValue;
                this.ParticleShaderInitialVelocity1 = initialValue;
                this.ParticleShaderInitialVelocity2 = initialValue;
                this.ParticleShaderInitialVelocity3 = initialValue;
                this.ParticleShaderAcceleration1 = initialValue;
                this.ParticleShaderAcceleration2 = initialValue;
                this.ParticleShaderAcceleration3 = initialValue;
                this.ParticleShaderScaleKey1 = initialValue;
                this.ParticleShaderScaleKey2 = initialValue;
                this.ParticleShaderScaleKey1Time = initialValue;
                this.ParticleShaderScaleKey2Time = initialValue;
                this.ColorKey1Color = initialValue;
                this.ColorKey2Color = initialValue;
                this.ColorKey3Color = initialValue;
                this.ColorKey1ColorAlpha = initialValue;
                this.ColorKey2ColorAlpha = initialValue;
                this.ColorKey3ColorAlpha = initialValue;
                this.ColorKey1ColorKeyTime = initialValue;
                this.ColorKey2ColorKeyTime = initialValue;
                this.ColorKey3ColorKeyTime = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem FillTexture,
                TItem ParticleShaderTexture,
                TItem Flags,
                TItem MembraneShaderSourceBlendMode,
                TItem MembraneShaderBlendOperation,
                TItem MembraneShaderZTestFunction,
                TItem FillTextureEffectColor,
                TItem FillTextureEffectAlphaFadeInTime,
                TItem FillTextureEffectFullAlphaTime,
                TItem FillTextureEffectAlphaFadeOutTime,
                TItem FillTextureEffectPersistentAlphaRatio,
                TItem FillTextureEffectAlphaPulseAmplitude,
                TItem FillTextureEffectAlphaPulseFrequency,
                TItem FillTextureEffectTextureAnimationSpeedU,
                TItem FillTextureEffectTextureAnimationSpeedV,
                TItem EdgeEffectFallOff,
                TItem EdgeEffectColor,
                TItem EdgeEffectAlphaFadeInTime,
                TItem EdgeEffectFullAlphaTime,
                TItem EdgeEffectAlphaFadeOutTime,
                TItem EdgeEffectPersistentAlphaRatio,
                TItem EdgeEffectAlphaPulseAmplitude,
                TItem EdgeEffectAlphaPulseFrequency,
                TItem FillTextureEffectFullAlphaRatio,
                TItem EdgeEffectFullAlphaRatio,
                TItem MembraneShaderDestBlendMode,
                TItem ParticleShaderSourceBlendMode,
                TItem ParticleShaderBlendOperation,
                TItem ParticleShaderZTestFunction,
                TItem ParticleShaderDestBlendMode,
                TItem ParticleShaderParticleBirthRampUpTime,
                TItem ParticleShaderFullParticleBirthTime,
                TItem ParticleShaderParticleBirthRampDownTime,
                TItem ParticleShaderFullParticleBirthRatio,
                TItem ParticleShaderPersistentParticleBirthRatio,
                TItem ParticleShaderParticleLifetime,
                TItem ParticleShaderParticleLifetimePlusMinus,
                TItem ParticleShaderInitialSpeedAlongNormal,
                TItem ParticleShaderAccelerationAlongNormal,
                TItem ParticleShaderInitialVelocity1,
                TItem ParticleShaderInitialVelocity2,
                TItem ParticleShaderInitialVelocity3,
                TItem ParticleShaderAcceleration1,
                TItem ParticleShaderAcceleration2,
                TItem ParticleShaderAcceleration3,
                TItem ParticleShaderScaleKey1,
                TItem ParticleShaderScaleKey2,
                TItem ParticleShaderScaleKey1Time,
                TItem ParticleShaderScaleKey2Time,
                TItem ColorKey1Color,
                TItem ColorKey2Color,
                TItem ColorKey3Color,
                TItem ColorKey1ColorAlpha,
                TItem ColorKey2ColorAlpha,
                TItem ColorKey3ColorAlpha,
                TItem ColorKey1ColorKeyTime,
                TItem ColorKey2ColorKeyTime,
                TItem ColorKey3ColorKeyTime,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.FillTexture = FillTexture;
                this.ParticleShaderTexture = ParticleShaderTexture;
                this.Flags = Flags;
                this.MembraneShaderSourceBlendMode = MembraneShaderSourceBlendMode;
                this.MembraneShaderBlendOperation = MembraneShaderBlendOperation;
                this.MembraneShaderZTestFunction = MembraneShaderZTestFunction;
                this.FillTextureEffectColor = FillTextureEffectColor;
                this.FillTextureEffectAlphaFadeInTime = FillTextureEffectAlphaFadeInTime;
                this.FillTextureEffectFullAlphaTime = FillTextureEffectFullAlphaTime;
                this.FillTextureEffectAlphaFadeOutTime = FillTextureEffectAlphaFadeOutTime;
                this.FillTextureEffectPersistentAlphaRatio = FillTextureEffectPersistentAlphaRatio;
                this.FillTextureEffectAlphaPulseAmplitude = FillTextureEffectAlphaPulseAmplitude;
                this.FillTextureEffectAlphaPulseFrequency = FillTextureEffectAlphaPulseFrequency;
                this.FillTextureEffectTextureAnimationSpeedU = FillTextureEffectTextureAnimationSpeedU;
                this.FillTextureEffectTextureAnimationSpeedV = FillTextureEffectTextureAnimationSpeedV;
                this.EdgeEffectFallOff = EdgeEffectFallOff;
                this.EdgeEffectColor = EdgeEffectColor;
                this.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTime;
                this.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTime;
                this.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTime;
                this.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatio;
                this.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitude;
                this.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequency;
                this.FillTextureEffectFullAlphaRatio = FillTextureEffectFullAlphaRatio;
                this.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatio;
                this.MembraneShaderDestBlendMode = MembraneShaderDestBlendMode;
                this.ParticleShaderSourceBlendMode = ParticleShaderSourceBlendMode;
                this.ParticleShaderBlendOperation = ParticleShaderBlendOperation;
                this.ParticleShaderZTestFunction = ParticleShaderZTestFunction;
                this.ParticleShaderDestBlendMode = ParticleShaderDestBlendMode;
                this.ParticleShaderParticleBirthRampUpTime = ParticleShaderParticleBirthRampUpTime;
                this.ParticleShaderFullParticleBirthTime = ParticleShaderFullParticleBirthTime;
                this.ParticleShaderParticleBirthRampDownTime = ParticleShaderParticleBirthRampDownTime;
                this.ParticleShaderFullParticleBirthRatio = ParticleShaderFullParticleBirthRatio;
                this.ParticleShaderPersistentParticleBirthRatio = ParticleShaderPersistentParticleBirthRatio;
                this.ParticleShaderParticleLifetime = ParticleShaderParticleLifetime;
                this.ParticleShaderParticleLifetimePlusMinus = ParticleShaderParticleLifetimePlusMinus;
                this.ParticleShaderInitialSpeedAlongNormal = ParticleShaderInitialSpeedAlongNormal;
                this.ParticleShaderAccelerationAlongNormal = ParticleShaderAccelerationAlongNormal;
                this.ParticleShaderInitialVelocity1 = ParticleShaderInitialVelocity1;
                this.ParticleShaderInitialVelocity2 = ParticleShaderInitialVelocity2;
                this.ParticleShaderInitialVelocity3 = ParticleShaderInitialVelocity3;
                this.ParticleShaderAcceleration1 = ParticleShaderAcceleration1;
                this.ParticleShaderAcceleration2 = ParticleShaderAcceleration2;
                this.ParticleShaderAcceleration3 = ParticleShaderAcceleration3;
                this.ParticleShaderScaleKey1 = ParticleShaderScaleKey1;
                this.ParticleShaderScaleKey2 = ParticleShaderScaleKey2;
                this.ParticleShaderScaleKey1Time = ParticleShaderScaleKey1Time;
                this.ParticleShaderScaleKey2Time = ParticleShaderScaleKey2Time;
                this.ColorKey1Color = ColorKey1Color;
                this.ColorKey2Color = ColorKey2Color;
                this.ColorKey3Color = ColorKey3Color;
                this.ColorKey1ColorAlpha = ColorKey1ColorAlpha;
                this.ColorKey2ColorAlpha = ColorKey2ColorAlpha;
                this.ColorKey3ColorAlpha = ColorKey3ColorAlpha;
                this.ColorKey1ColorKeyTime = ColorKey1ColorKeyTime;
                this.ColorKey2ColorKeyTime = ColorKey2ColorKeyTime;
                this.ColorKey3ColorKeyTime = ColorKey3ColorKeyTime;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FillTexture;
            public TItem ParticleShaderTexture;
            public TItem Flags;
            public TItem MembraneShaderSourceBlendMode;
            public TItem MembraneShaderBlendOperation;
            public TItem MembraneShaderZTestFunction;
            public TItem FillTextureEffectColor;
            public TItem FillTextureEffectAlphaFadeInTime;
            public TItem FillTextureEffectFullAlphaTime;
            public TItem FillTextureEffectAlphaFadeOutTime;
            public TItem FillTextureEffectPersistentAlphaRatio;
            public TItem FillTextureEffectAlphaPulseAmplitude;
            public TItem FillTextureEffectAlphaPulseFrequency;
            public TItem FillTextureEffectTextureAnimationSpeedU;
            public TItem FillTextureEffectTextureAnimationSpeedV;
            public TItem EdgeEffectFallOff;
            public TItem EdgeEffectColor;
            public TItem EdgeEffectAlphaFadeInTime;
            public TItem EdgeEffectFullAlphaTime;
            public TItem EdgeEffectAlphaFadeOutTime;
            public TItem EdgeEffectPersistentAlphaRatio;
            public TItem EdgeEffectAlphaPulseAmplitude;
            public TItem EdgeEffectAlphaPulseFrequency;
            public TItem FillTextureEffectFullAlphaRatio;
            public TItem EdgeEffectFullAlphaRatio;
            public TItem MembraneShaderDestBlendMode;
            public TItem ParticleShaderSourceBlendMode;
            public TItem ParticleShaderBlendOperation;
            public TItem ParticleShaderZTestFunction;
            public TItem ParticleShaderDestBlendMode;
            public TItem ParticleShaderParticleBirthRampUpTime;
            public TItem ParticleShaderFullParticleBirthTime;
            public TItem ParticleShaderParticleBirthRampDownTime;
            public TItem ParticleShaderFullParticleBirthRatio;
            public TItem ParticleShaderPersistentParticleBirthRatio;
            public TItem ParticleShaderParticleLifetime;
            public TItem ParticleShaderParticleLifetimePlusMinus;
            public TItem ParticleShaderInitialSpeedAlongNormal;
            public TItem ParticleShaderAccelerationAlongNormal;
            public TItem ParticleShaderInitialVelocity1;
            public TItem ParticleShaderInitialVelocity2;
            public TItem ParticleShaderInitialVelocity3;
            public TItem ParticleShaderAcceleration1;
            public TItem ParticleShaderAcceleration2;
            public TItem ParticleShaderAcceleration3;
            public TItem ParticleShaderScaleKey1;
            public TItem ParticleShaderScaleKey2;
            public TItem ParticleShaderScaleKey1Time;
            public TItem ParticleShaderScaleKey2Time;
            public TItem ColorKey1Color;
            public TItem ColorKey2Color;
            public TItem ColorKey3Color;
            public TItem ColorKey1ColorAlpha;
            public TItem ColorKey2ColorAlpha;
            public TItem ColorKey3ColorAlpha;
            public TItem ColorKey1ColorKeyTime;
            public TItem ColorKey2ColorKeyTime;
            public TItem ColorKey3ColorKeyTime;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FillTexture, rhs.FillTexture)) return false;
                if (!object.Equals(this.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MembraneShaderSourceBlendMode, rhs.MembraneShaderSourceBlendMode)) return false;
                if (!object.Equals(this.MembraneShaderBlendOperation, rhs.MembraneShaderBlendOperation)) return false;
                if (!object.Equals(this.MembraneShaderZTestFunction, rhs.MembraneShaderZTestFunction)) return false;
                if (!object.Equals(this.FillTextureEffectColor, rhs.FillTextureEffectColor)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaFadeInTime, rhs.FillTextureEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.FillTextureEffectFullAlphaTime, rhs.FillTextureEffectFullAlphaTime)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaFadeOutTime, rhs.FillTextureEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.FillTextureEffectPersistentAlphaRatio, rhs.FillTextureEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaPulseAmplitude, rhs.FillTextureEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.FillTextureEffectAlphaPulseFrequency, rhs.FillTextureEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillTextureEffectTextureAnimationSpeedU, rhs.FillTextureEffectTextureAnimationSpeedU)) return false;
                if (!object.Equals(this.FillTextureEffectTextureAnimationSpeedV, rhs.FillTextureEffectTextureAnimationSpeedV)) return false;
                if (!object.Equals(this.EdgeEffectFallOff, rhs.EdgeEffectFallOff)) return false;
                if (!object.Equals(this.EdgeEffectColor, rhs.EdgeEffectColor)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeInTime, rhs.EdgeEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaTime, rhs.EdgeEffectFullAlphaTime)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeOutTime, rhs.EdgeEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.EdgeEffectPersistentAlphaRatio, rhs.EdgeEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseAmplitude, rhs.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseFrequency, rhs.EdgeEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillTextureEffectFullAlphaRatio, rhs.FillTextureEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaRatio, rhs.EdgeEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.MembraneShaderDestBlendMode, rhs.MembraneShaderDestBlendMode)) return false;
                if (!object.Equals(this.ParticleShaderSourceBlendMode, rhs.ParticleShaderSourceBlendMode)) return false;
                if (!object.Equals(this.ParticleShaderBlendOperation, rhs.ParticleShaderBlendOperation)) return false;
                if (!object.Equals(this.ParticleShaderZTestFunction, rhs.ParticleShaderZTestFunction)) return false;
                if (!object.Equals(this.ParticleShaderDestBlendMode, rhs.ParticleShaderDestBlendMode)) return false;
                if (!object.Equals(this.ParticleShaderParticleBirthRampUpTime, rhs.ParticleShaderParticleBirthRampUpTime)) return false;
                if (!object.Equals(this.ParticleShaderFullParticleBirthTime, rhs.ParticleShaderFullParticleBirthTime)) return false;
                if (!object.Equals(this.ParticleShaderParticleBirthRampDownTime, rhs.ParticleShaderParticleBirthRampDownTime)) return false;
                if (!object.Equals(this.ParticleShaderFullParticleBirthRatio, rhs.ParticleShaderFullParticleBirthRatio)) return false;
                if (!object.Equals(this.ParticleShaderPersistentParticleBirthRatio, rhs.ParticleShaderPersistentParticleBirthRatio)) return false;
                if (!object.Equals(this.ParticleShaderParticleLifetime, rhs.ParticleShaderParticleLifetime)) return false;
                if (!object.Equals(this.ParticleShaderParticleLifetimePlusMinus, rhs.ParticleShaderParticleLifetimePlusMinus)) return false;
                if (!object.Equals(this.ParticleShaderInitialSpeedAlongNormal, rhs.ParticleShaderInitialSpeedAlongNormal)) return false;
                if (!object.Equals(this.ParticleShaderAccelerationAlongNormal, rhs.ParticleShaderAccelerationAlongNormal)) return false;
                if (!object.Equals(this.ParticleShaderInitialVelocity1, rhs.ParticleShaderInitialVelocity1)) return false;
                if (!object.Equals(this.ParticleShaderInitialVelocity2, rhs.ParticleShaderInitialVelocity2)) return false;
                if (!object.Equals(this.ParticleShaderInitialVelocity3, rhs.ParticleShaderInitialVelocity3)) return false;
                if (!object.Equals(this.ParticleShaderAcceleration1, rhs.ParticleShaderAcceleration1)) return false;
                if (!object.Equals(this.ParticleShaderAcceleration2, rhs.ParticleShaderAcceleration2)) return false;
                if (!object.Equals(this.ParticleShaderAcceleration3, rhs.ParticleShaderAcceleration3)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey1, rhs.ParticleShaderScaleKey1)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey2, rhs.ParticleShaderScaleKey2)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey1Time, rhs.ParticleShaderScaleKey1Time)) return false;
                if (!object.Equals(this.ParticleShaderScaleKey2Time, rhs.ParticleShaderScaleKey2Time)) return false;
                if (!object.Equals(this.ColorKey1Color, rhs.ColorKey1Color)) return false;
                if (!object.Equals(this.ColorKey2Color, rhs.ColorKey2Color)) return false;
                if (!object.Equals(this.ColorKey3Color, rhs.ColorKey3Color)) return false;
                if (!object.Equals(this.ColorKey1ColorAlpha, rhs.ColorKey1ColorAlpha)) return false;
                if (!object.Equals(this.ColorKey2ColorAlpha, rhs.ColorKey2ColorAlpha)) return false;
                if (!object.Equals(this.ColorKey3ColorAlpha, rhs.ColorKey3ColorAlpha)) return false;
                if (!object.Equals(this.ColorKey1ColorKeyTime, rhs.ColorKey1ColorKeyTime)) return false;
                if (!object.Equals(this.ColorKey2ColorKeyTime, rhs.ColorKey2ColorKeyTime)) return false;
                if (!object.Equals(this.ColorKey3ColorKeyTime, rhs.ColorKey3ColorKeyTime)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.FillTexture?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderTexture?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.MembraneShaderSourceBlendMode?.GetHashCode());
                ret = ret.CombineHashCode(this.MembraneShaderBlendOperation?.GetHashCode());
                ret = ret.CombineHashCode(this.MembraneShaderZTestFunction?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectColor?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectAlphaFadeInTime?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectFullAlphaTime?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectAlphaFadeOutTime?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectPersistentAlphaRatio?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectAlphaPulseAmplitude?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectAlphaPulseFrequency?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectTextureAnimationSpeedU?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectTextureAnimationSpeedV?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectFallOff?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectColor?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectAlphaFadeInTime?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectFullAlphaTime?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectAlphaFadeOutTime?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectPersistentAlphaRatio?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectAlphaPulseAmplitude?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectAlphaPulseFrequency?.GetHashCode());
                ret = ret.CombineHashCode(this.FillTextureEffectFullAlphaRatio?.GetHashCode());
                ret = ret.CombineHashCode(this.EdgeEffectFullAlphaRatio?.GetHashCode());
                ret = ret.CombineHashCode(this.MembraneShaderDestBlendMode?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderSourceBlendMode?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderBlendOperation?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderZTestFunction?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderDestBlendMode?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderParticleBirthRampUpTime?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderFullParticleBirthTime?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderParticleBirthRampDownTime?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderFullParticleBirthRatio?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderPersistentParticleBirthRatio?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderParticleLifetime?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderParticleLifetimePlusMinus?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderInitialSpeedAlongNormal?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderAccelerationAlongNormal?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderInitialVelocity1?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderInitialVelocity2?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderInitialVelocity3?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderAcceleration1?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderAcceleration2?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderAcceleration3?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderScaleKey1?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderScaleKey2?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderScaleKey1Time?.GetHashCode());
                ret = ret.CombineHashCode(this.ParticleShaderScaleKey2Time?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey1Color?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey2Color?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey3Color?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey1ColorAlpha?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey2ColorAlpha?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey3ColorAlpha?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey1ColorKeyTime?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey2ColorKeyTime?.GetHashCode());
                ret = ret.CombineHashCode(this.ColorKey3ColorKeyTime?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FillTexture)) return false;
                if (!eval(this.ParticleShaderTexture)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MembraneShaderSourceBlendMode)) return false;
                if (!eval(this.MembraneShaderBlendOperation)) return false;
                if (!eval(this.MembraneShaderZTestFunction)) return false;
                if (!eval(this.FillTextureEffectColor)) return false;
                if (!eval(this.FillTextureEffectAlphaFadeInTime)) return false;
                if (!eval(this.FillTextureEffectFullAlphaTime)) return false;
                if (!eval(this.FillTextureEffectAlphaFadeOutTime)) return false;
                if (!eval(this.FillTextureEffectPersistentAlphaRatio)) return false;
                if (!eval(this.FillTextureEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.FillTextureEffectAlphaPulseFrequency)) return false;
                if (!eval(this.FillTextureEffectTextureAnimationSpeedU)) return false;
                if (!eval(this.FillTextureEffectTextureAnimationSpeedV)) return false;
                if (!eval(this.EdgeEffectFallOff)) return false;
                if (!eval(this.EdgeEffectColor)) return false;
                if (!eval(this.EdgeEffectAlphaFadeInTime)) return false;
                if (!eval(this.EdgeEffectFullAlphaTime)) return false;
                if (!eval(this.EdgeEffectAlphaFadeOutTime)) return false;
                if (!eval(this.EdgeEffectPersistentAlphaRatio)) return false;
                if (!eval(this.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.EdgeEffectAlphaPulseFrequency)) return false;
                if (!eval(this.FillTextureEffectFullAlphaRatio)) return false;
                if (!eval(this.EdgeEffectFullAlphaRatio)) return false;
                if (!eval(this.MembraneShaderDestBlendMode)) return false;
                if (!eval(this.ParticleShaderSourceBlendMode)) return false;
                if (!eval(this.ParticleShaderBlendOperation)) return false;
                if (!eval(this.ParticleShaderZTestFunction)) return false;
                if (!eval(this.ParticleShaderDestBlendMode)) return false;
                if (!eval(this.ParticleShaderParticleBirthRampUpTime)) return false;
                if (!eval(this.ParticleShaderFullParticleBirthTime)) return false;
                if (!eval(this.ParticleShaderParticleBirthRampDownTime)) return false;
                if (!eval(this.ParticleShaderFullParticleBirthRatio)) return false;
                if (!eval(this.ParticleShaderPersistentParticleBirthRatio)) return false;
                if (!eval(this.ParticleShaderParticleLifetime)) return false;
                if (!eval(this.ParticleShaderParticleLifetimePlusMinus)) return false;
                if (!eval(this.ParticleShaderInitialSpeedAlongNormal)) return false;
                if (!eval(this.ParticleShaderAccelerationAlongNormal)) return false;
                if (!eval(this.ParticleShaderInitialVelocity1)) return false;
                if (!eval(this.ParticleShaderInitialVelocity2)) return false;
                if (!eval(this.ParticleShaderInitialVelocity3)) return false;
                if (!eval(this.ParticleShaderAcceleration1)) return false;
                if (!eval(this.ParticleShaderAcceleration2)) return false;
                if (!eval(this.ParticleShaderAcceleration3)) return false;
                if (!eval(this.ParticleShaderScaleKey1)) return false;
                if (!eval(this.ParticleShaderScaleKey2)) return false;
                if (!eval(this.ParticleShaderScaleKey1Time)) return false;
                if (!eval(this.ParticleShaderScaleKey2Time)) return false;
                if (!eval(this.ColorKey1Color)) return false;
                if (!eval(this.ColorKey2Color)) return false;
                if (!eval(this.ColorKey3Color)) return false;
                if (!eval(this.ColorKey1ColorAlpha)) return false;
                if (!eval(this.ColorKey2ColorAlpha)) return false;
                if (!eval(this.ColorKey3ColorAlpha)) return false;
                if (!eval(this.ColorKey1ColorKeyTime)) return false;
                if (!eval(this.ColorKey2ColorKeyTime)) return false;
                if (!eval(this.ColorKey3ColorKeyTime)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FillTexture)) return true;
                if (eval(this.ParticleShaderTexture)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MembraneShaderSourceBlendMode)) return true;
                if (eval(this.MembraneShaderBlendOperation)) return true;
                if (eval(this.MembraneShaderZTestFunction)) return true;
                if (eval(this.FillTextureEffectColor)) return true;
                if (eval(this.FillTextureEffectAlphaFadeInTime)) return true;
                if (eval(this.FillTextureEffectFullAlphaTime)) return true;
                if (eval(this.FillTextureEffectAlphaFadeOutTime)) return true;
                if (eval(this.FillTextureEffectPersistentAlphaRatio)) return true;
                if (eval(this.FillTextureEffectAlphaPulseAmplitude)) return true;
                if (eval(this.FillTextureEffectAlphaPulseFrequency)) return true;
                if (eval(this.FillTextureEffectTextureAnimationSpeedU)) return true;
                if (eval(this.FillTextureEffectTextureAnimationSpeedV)) return true;
                if (eval(this.EdgeEffectFallOff)) return true;
                if (eval(this.EdgeEffectColor)) return true;
                if (eval(this.EdgeEffectAlphaFadeInTime)) return true;
                if (eval(this.EdgeEffectFullAlphaTime)) return true;
                if (eval(this.EdgeEffectAlphaFadeOutTime)) return true;
                if (eval(this.EdgeEffectPersistentAlphaRatio)) return true;
                if (eval(this.EdgeEffectAlphaPulseAmplitude)) return true;
                if (eval(this.EdgeEffectAlphaPulseFrequency)) return true;
                if (eval(this.FillTextureEffectFullAlphaRatio)) return true;
                if (eval(this.EdgeEffectFullAlphaRatio)) return true;
                if (eval(this.MembraneShaderDestBlendMode)) return true;
                if (eval(this.ParticleShaderSourceBlendMode)) return true;
                if (eval(this.ParticleShaderBlendOperation)) return true;
                if (eval(this.ParticleShaderZTestFunction)) return true;
                if (eval(this.ParticleShaderDestBlendMode)) return true;
                if (eval(this.ParticleShaderParticleBirthRampUpTime)) return true;
                if (eval(this.ParticleShaderFullParticleBirthTime)) return true;
                if (eval(this.ParticleShaderParticleBirthRampDownTime)) return true;
                if (eval(this.ParticleShaderFullParticleBirthRatio)) return true;
                if (eval(this.ParticleShaderPersistentParticleBirthRatio)) return true;
                if (eval(this.ParticleShaderParticleLifetime)) return true;
                if (eval(this.ParticleShaderParticleLifetimePlusMinus)) return true;
                if (eval(this.ParticleShaderInitialSpeedAlongNormal)) return true;
                if (eval(this.ParticleShaderAccelerationAlongNormal)) return true;
                if (eval(this.ParticleShaderInitialVelocity1)) return true;
                if (eval(this.ParticleShaderInitialVelocity2)) return true;
                if (eval(this.ParticleShaderInitialVelocity3)) return true;
                if (eval(this.ParticleShaderAcceleration1)) return true;
                if (eval(this.ParticleShaderAcceleration2)) return true;
                if (eval(this.ParticleShaderAcceleration3)) return true;
                if (eval(this.ParticleShaderScaleKey1)) return true;
                if (eval(this.ParticleShaderScaleKey2)) return true;
                if (eval(this.ParticleShaderScaleKey1Time)) return true;
                if (eval(this.ParticleShaderScaleKey2Time)) return true;
                if (eval(this.ColorKey1Color)) return true;
                if (eval(this.ColorKey2Color)) return true;
                if (eval(this.ColorKey3Color)) return true;
                if (eval(this.ColorKey1ColorAlpha)) return true;
                if (eval(this.ColorKey2ColorAlpha)) return true;
                if (eval(this.ColorKey3ColorAlpha)) return true;
                if (eval(this.ColorKey1ColorKeyTime)) return true;
                if (eval(this.ColorKey2ColorKeyTime)) return true;
                if (eval(this.ColorKey3ColorKeyTime)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EffectShader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FillTexture = eval(this.FillTexture);
                obj.ParticleShaderTexture = eval(this.ParticleShaderTexture);
                obj.Flags = eval(this.Flags);
                obj.MembraneShaderSourceBlendMode = eval(this.MembraneShaderSourceBlendMode);
                obj.MembraneShaderBlendOperation = eval(this.MembraneShaderBlendOperation);
                obj.MembraneShaderZTestFunction = eval(this.MembraneShaderZTestFunction);
                obj.FillTextureEffectColor = eval(this.FillTextureEffectColor);
                obj.FillTextureEffectAlphaFadeInTime = eval(this.FillTextureEffectAlphaFadeInTime);
                obj.FillTextureEffectFullAlphaTime = eval(this.FillTextureEffectFullAlphaTime);
                obj.FillTextureEffectAlphaFadeOutTime = eval(this.FillTextureEffectAlphaFadeOutTime);
                obj.FillTextureEffectPersistentAlphaRatio = eval(this.FillTextureEffectPersistentAlphaRatio);
                obj.FillTextureEffectAlphaPulseAmplitude = eval(this.FillTextureEffectAlphaPulseAmplitude);
                obj.FillTextureEffectAlphaPulseFrequency = eval(this.FillTextureEffectAlphaPulseFrequency);
                obj.FillTextureEffectTextureAnimationSpeedU = eval(this.FillTextureEffectTextureAnimationSpeedU);
                obj.FillTextureEffectTextureAnimationSpeedV = eval(this.FillTextureEffectTextureAnimationSpeedV);
                obj.EdgeEffectFallOff = eval(this.EdgeEffectFallOff);
                obj.EdgeEffectColor = eval(this.EdgeEffectColor);
                obj.EdgeEffectAlphaFadeInTime = eval(this.EdgeEffectAlphaFadeInTime);
                obj.EdgeEffectFullAlphaTime = eval(this.EdgeEffectFullAlphaTime);
                obj.EdgeEffectAlphaFadeOutTime = eval(this.EdgeEffectAlphaFadeOutTime);
                obj.EdgeEffectPersistentAlphaRatio = eval(this.EdgeEffectPersistentAlphaRatio);
                obj.EdgeEffectAlphaPulseAmplitude = eval(this.EdgeEffectAlphaPulseAmplitude);
                obj.EdgeEffectAlphaPulseFrequency = eval(this.EdgeEffectAlphaPulseFrequency);
                obj.FillTextureEffectFullAlphaRatio = eval(this.FillTextureEffectFullAlphaRatio);
                obj.EdgeEffectFullAlphaRatio = eval(this.EdgeEffectFullAlphaRatio);
                obj.MembraneShaderDestBlendMode = eval(this.MembraneShaderDestBlendMode);
                obj.ParticleShaderSourceBlendMode = eval(this.ParticleShaderSourceBlendMode);
                obj.ParticleShaderBlendOperation = eval(this.ParticleShaderBlendOperation);
                obj.ParticleShaderZTestFunction = eval(this.ParticleShaderZTestFunction);
                obj.ParticleShaderDestBlendMode = eval(this.ParticleShaderDestBlendMode);
                obj.ParticleShaderParticleBirthRampUpTime = eval(this.ParticleShaderParticleBirthRampUpTime);
                obj.ParticleShaderFullParticleBirthTime = eval(this.ParticleShaderFullParticleBirthTime);
                obj.ParticleShaderParticleBirthRampDownTime = eval(this.ParticleShaderParticleBirthRampDownTime);
                obj.ParticleShaderFullParticleBirthRatio = eval(this.ParticleShaderFullParticleBirthRatio);
                obj.ParticleShaderPersistentParticleBirthRatio = eval(this.ParticleShaderPersistentParticleBirthRatio);
                obj.ParticleShaderParticleLifetime = eval(this.ParticleShaderParticleLifetime);
                obj.ParticleShaderParticleLifetimePlusMinus = eval(this.ParticleShaderParticleLifetimePlusMinus);
                obj.ParticleShaderInitialSpeedAlongNormal = eval(this.ParticleShaderInitialSpeedAlongNormal);
                obj.ParticleShaderAccelerationAlongNormal = eval(this.ParticleShaderAccelerationAlongNormal);
                obj.ParticleShaderInitialVelocity1 = eval(this.ParticleShaderInitialVelocity1);
                obj.ParticleShaderInitialVelocity2 = eval(this.ParticleShaderInitialVelocity2);
                obj.ParticleShaderInitialVelocity3 = eval(this.ParticleShaderInitialVelocity3);
                obj.ParticleShaderAcceleration1 = eval(this.ParticleShaderAcceleration1);
                obj.ParticleShaderAcceleration2 = eval(this.ParticleShaderAcceleration2);
                obj.ParticleShaderAcceleration3 = eval(this.ParticleShaderAcceleration3);
                obj.ParticleShaderScaleKey1 = eval(this.ParticleShaderScaleKey1);
                obj.ParticleShaderScaleKey2 = eval(this.ParticleShaderScaleKey2);
                obj.ParticleShaderScaleKey1Time = eval(this.ParticleShaderScaleKey1Time);
                obj.ParticleShaderScaleKey2Time = eval(this.ParticleShaderScaleKey2Time);
                obj.ColorKey1Color = eval(this.ColorKey1Color);
                obj.ColorKey2Color = eval(this.ColorKey2Color);
                obj.ColorKey3Color = eval(this.ColorKey3Color);
                obj.ColorKey1ColorAlpha = eval(this.ColorKey1ColorAlpha);
                obj.ColorKey2ColorAlpha = eval(this.ColorKey2ColorAlpha);
                obj.ColorKey3ColorAlpha = eval(this.ColorKey3ColorAlpha);
                obj.ColorKey1ColorKeyTime = eval(this.ColorKey1ColorKeyTime);
                obj.ColorKey2ColorKeyTime = eval(this.ColorKey2ColorKeyTime);
                obj.ColorKey3ColorKeyTime = eval(this.ColorKey3ColorKeyTime);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(EffectShader.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, EffectShader.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(EffectShader.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.FillTexture ?? true)
                    {
                        fg.AppendItem(FillTexture, "FillTexture");
                    }
                    if (printMask?.ParticleShaderTexture ?? true)
                    {
                        fg.AppendItem(ParticleShaderTexture, "ParticleShaderTexture");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MembraneShaderSourceBlendMode ?? true)
                    {
                        fg.AppendItem(MembraneShaderSourceBlendMode, "MembraneShaderSourceBlendMode");
                    }
                    if (printMask?.MembraneShaderBlendOperation ?? true)
                    {
                        fg.AppendItem(MembraneShaderBlendOperation, "MembraneShaderBlendOperation");
                    }
                    if (printMask?.MembraneShaderZTestFunction ?? true)
                    {
                        fg.AppendItem(MembraneShaderZTestFunction, "MembraneShaderZTestFunction");
                    }
                    if (printMask?.FillTextureEffectColor ?? true)
                    {
                        fg.AppendItem(FillTextureEffectColor, "FillTextureEffectColor");
                    }
                    if (printMask?.FillTextureEffectAlphaFadeInTime ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaFadeInTime, "FillTextureEffectAlphaFadeInTime");
                    }
                    if (printMask?.FillTextureEffectFullAlphaTime ?? true)
                    {
                        fg.AppendItem(FillTextureEffectFullAlphaTime, "FillTextureEffectFullAlphaTime");
                    }
                    if (printMask?.FillTextureEffectAlphaFadeOutTime ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaFadeOutTime, "FillTextureEffectAlphaFadeOutTime");
                    }
                    if (printMask?.FillTextureEffectPersistentAlphaRatio ?? true)
                    {
                        fg.AppendItem(FillTextureEffectPersistentAlphaRatio, "FillTextureEffectPersistentAlphaRatio");
                    }
                    if (printMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaPulseAmplitude, "FillTextureEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.FillTextureEffectAlphaPulseFrequency ?? true)
                    {
                        fg.AppendItem(FillTextureEffectAlphaPulseFrequency, "FillTextureEffectAlphaPulseFrequency");
                    }
                    if (printMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
                    {
                        fg.AppendItem(FillTextureEffectTextureAnimationSpeedU, "FillTextureEffectTextureAnimationSpeedU");
                    }
                    if (printMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
                    {
                        fg.AppendItem(FillTextureEffectTextureAnimationSpeedV, "FillTextureEffectTextureAnimationSpeedV");
                    }
                    if (printMask?.EdgeEffectFallOff ?? true)
                    {
                        fg.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                    }
                    if (printMask?.EdgeEffectColor ?? true)
                    {
                        fg.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                    }
                    if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                    }
                    if (printMask?.EdgeEffectFullAlphaTime ?? true)
                    {
                        fg.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                    }
                    if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                    }
                    if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                    {
                        fg.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                    }
                    if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                    {
                        fg.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                    }
                    if (printMask?.FillTextureEffectFullAlphaRatio ?? true)
                    {
                        fg.AppendItem(FillTextureEffectFullAlphaRatio, "FillTextureEffectFullAlphaRatio");
                    }
                    if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                    {
                        fg.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                    }
                    if (printMask?.MembraneShaderDestBlendMode ?? true)
                    {
                        fg.AppendItem(MembraneShaderDestBlendMode, "MembraneShaderDestBlendMode");
                    }
                    if (printMask?.ParticleShaderSourceBlendMode ?? true)
                    {
                        fg.AppendItem(ParticleShaderSourceBlendMode, "ParticleShaderSourceBlendMode");
                    }
                    if (printMask?.ParticleShaderBlendOperation ?? true)
                    {
                        fg.AppendItem(ParticleShaderBlendOperation, "ParticleShaderBlendOperation");
                    }
                    if (printMask?.ParticleShaderZTestFunction ?? true)
                    {
                        fg.AppendItem(ParticleShaderZTestFunction, "ParticleShaderZTestFunction");
                    }
                    if (printMask?.ParticleShaderDestBlendMode ?? true)
                    {
                        fg.AppendItem(ParticleShaderDestBlendMode, "ParticleShaderDestBlendMode");
                    }
                    if (printMask?.ParticleShaderParticleBirthRampUpTime ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleBirthRampUpTime, "ParticleShaderParticleBirthRampUpTime");
                    }
                    if (printMask?.ParticleShaderFullParticleBirthTime ?? true)
                    {
                        fg.AppendItem(ParticleShaderFullParticleBirthTime, "ParticleShaderFullParticleBirthTime");
                    }
                    if (printMask?.ParticleShaderParticleBirthRampDownTime ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleBirthRampDownTime, "ParticleShaderParticleBirthRampDownTime");
                    }
                    if (printMask?.ParticleShaderFullParticleBirthRatio ?? true)
                    {
                        fg.AppendItem(ParticleShaderFullParticleBirthRatio, "ParticleShaderFullParticleBirthRatio");
                    }
                    if (printMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
                    {
                        fg.AppendItem(ParticleShaderPersistentParticleBirthRatio, "ParticleShaderPersistentParticleBirthRatio");
                    }
                    if (printMask?.ParticleShaderParticleLifetime ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleLifetime, "ParticleShaderParticleLifetime");
                    }
                    if (printMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
                    {
                        fg.AppendItem(ParticleShaderParticleLifetimePlusMinus, "ParticleShaderParticleLifetimePlusMinus");
                    }
                    if (printMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialSpeedAlongNormal, "ParticleShaderInitialSpeedAlongNormal");
                    }
                    if (printMask?.ParticleShaderAccelerationAlongNormal ?? true)
                    {
                        fg.AppendItem(ParticleShaderAccelerationAlongNormal, "ParticleShaderAccelerationAlongNormal");
                    }
                    if (printMask?.ParticleShaderInitialVelocity1 ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialVelocity1, "ParticleShaderInitialVelocity1");
                    }
                    if (printMask?.ParticleShaderInitialVelocity2 ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialVelocity2, "ParticleShaderInitialVelocity2");
                    }
                    if (printMask?.ParticleShaderInitialVelocity3 ?? true)
                    {
                        fg.AppendItem(ParticleShaderInitialVelocity3, "ParticleShaderInitialVelocity3");
                    }
                    if (printMask?.ParticleShaderAcceleration1 ?? true)
                    {
                        fg.AppendItem(ParticleShaderAcceleration1, "ParticleShaderAcceleration1");
                    }
                    if (printMask?.ParticleShaderAcceleration2 ?? true)
                    {
                        fg.AppendItem(ParticleShaderAcceleration2, "ParticleShaderAcceleration2");
                    }
                    if (printMask?.ParticleShaderAcceleration3 ?? true)
                    {
                        fg.AppendItem(ParticleShaderAcceleration3, "ParticleShaderAcceleration3");
                    }
                    if (printMask?.ParticleShaderScaleKey1 ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey1, "ParticleShaderScaleKey1");
                    }
                    if (printMask?.ParticleShaderScaleKey2 ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey2, "ParticleShaderScaleKey2");
                    }
                    if (printMask?.ParticleShaderScaleKey1Time ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey1Time, "ParticleShaderScaleKey1Time");
                    }
                    if (printMask?.ParticleShaderScaleKey2Time ?? true)
                    {
                        fg.AppendItem(ParticleShaderScaleKey2Time, "ParticleShaderScaleKey2Time");
                    }
                    if (printMask?.ColorKey1Color ?? true)
                    {
                        fg.AppendItem(ColorKey1Color, "ColorKey1Color");
                    }
                    if (printMask?.ColorKey2Color ?? true)
                    {
                        fg.AppendItem(ColorKey2Color, "ColorKey2Color");
                    }
                    if (printMask?.ColorKey3Color ?? true)
                    {
                        fg.AppendItem(ColorKey3Color, "ColorKey3Color");
                    }
                    if (printMask?.ColorKey1ColorAlpha ?? true)
                    {
                        fg.AppendItem(ColorKey1ColorAlpha, "ColorKey1ColorAlpha");
                    }
                    if (printMask?.ColorKey2ColorAlpha ?? true)
                    {
                        fg.AppendItem(ColorKey2ColorAlpha, "ColorKey2ColorAlpha");
                    }
                    if (printMask?.ColorKey3ColorAlpha ?? true)
                    {
                        fg.AppendItem(ColorKey3ColorAlpha, "ColorKey3ColorAlpha");
                    }
                    if (printMask?.ColorKey1ColorKeyTime ?? true)
                    {
                        fg.AppendItem(ColorKey1ColorKeyTime, "ColorKey1ColorKeyTime");
                    }
                    if (printMask?.ColorKey2ColorKeyTime ?? true)
                    {
                        fg.AppendItem(ColorKey2ColorKeyTime, "ColorKey2ColorKeyTime");
                    }
                    if (printMask?.ColorKey3ColorKeyTime ?? true)
                    {
                        fg.AppendItem(ColorKey3ColorKeyTime, "ColorKey3ColorKeyTime");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FillTexture;
            public Exception? ParticleShaderTexture;
            public Exception? Flags;
            public Exception? MembraneShaderSourceBlendMode;
            public Exception? MembraneShaderBlendOperation;
            public Exception? MembraneShaderZTestFunction;
            public Exception? FillTextureEffectColor;
            public Exception? FillTextureEffectAlphaFadeInTime;
            public Exception? FillTextureEffectFullAlphaTime;
            public Exception? FillTextureEffectAlphaFadeOutTime;
            public Exception? FillTextureEffectPersistentAlphaRatio;
            public Exception? FillTextureEffectAlphaPulseAmplitude;
            public Exception? FillTextureEffectAlphaPulseFrequency;
            public Exception? FillTextureEffectTextureAnimationSpeedU;
            public Exception? FillTextureEffectTextureAnimationSpeedV;
            public Exception? EdgeEffectFallOff;
            public Exception? EdgeEffectColor;
            public Exception? EdgeEffectAlphaFadeInTime;
            public Exception? EdgeEffectFullAlphaTime;
            public Exception? EdgeEffectAlphaFadeOutTime;
            public Exception? EdgeEffectPersistentAlphaRatio;
            public Exception? EdgeEffectAlphaPulseAmplitude;
            public Exception? EdgeEffectAlphaPulseFrequency;
            public Exception? FillTextureEffectFullAlphaRatio;
            public Exception? EdgeEffectFullAlphaRatio;
            public Exception? MembraneShaderDestBlendMode;
            public Exception? ParticleShaderSourceBlendMode;
            public Exception? ParticleShaderBlendOperation;
            public Exception? ParticleShaderZTestFunction;
            public Exception? ParticleShaderDestBlendMode;
            public Exception? ParticleShaderParticleBirthRampUpTime;
            public Exception? ParticleShaderFullParticleBirthTime;
            public Exception? ParticleShaderParticleBirthRampDownTime;
            public Exception? ParticleShaderFullParticleBirthRatio;
            public Exception? ParticleShaderPersistentParticleBirthRatio;
            public Exception? ParticleShaderParticleLifetime;
            public Exception? ParticleShaderParticleLifetimePlusMinus;
            public Exception? ParticleShaderInitialSpeedAlongNormal;
            public Exception? ParticleShaderAccelerationAlongNormal;
            public Exception? ParticleShaderInitialVelocity1;
            public Exception? ParticleShaderInitialVelocity2;
            public Exception? ParticleShaderInitialVelocity3;
            public Exception? ParticleShaderAcceleration1;
            public Exception? ParticleShaderAcceleration2;
            public Exception? ParticleShaderAcceleration3;
            public Exception? ParticleShaderScaleKey1;
            public Exception? ParticleShaderScaleKey2;
            public Exception? ParticleShaderScaleKey1Time;
            public Exception? ParticleShaderScaleKey2Time;
            public Exception? ColorKey1Color;
            public Exception? ColorKey2Color;
            public Exception? ColorKey3Color;
            public Exception? ColorKey1ColorAlpha;
            public Exception? ColorKey2ColorAlpha;
            public Exception? ColorKey3ColorAlpha;
            public Exception? ColorKey1ColorKeyTime;
            public Exception? ColorKey2ColorKeyTime;
            public Exception? ColorKey3ColorKeyTime;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        return FillTexture;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        return ParticleShaderTexture;
                    case EffectShader_FieldIndex.Flags:
                        return Flags;
                    case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                        return MembraneShaderSourceBlendMode;
                    case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                        return MembraneShaderBlendOperation;
                    case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                        return MembraneShaderZTestFunction;
                    case EffectShader_FieldIndex.FillTextureEffectColor:
                        return FillTextureEffectColor;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                        return FillTextureEffectAlphaFadeInTime;
                    case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                        return FillTextureEffectFullAlphaTime;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                        return FillTextureEffectAlphaFadeOutTime;
                    case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                        return FillTextureEffectPersistentAlphaRatio;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                        return FillTextureEffectAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                        return FillTextureEffectAlphaPulseFrequency;
                    case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                        return FillTextureEffectTextureAnimationSpeedU;
                    case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                        return FillTextureEffectTextureAnimationSpeedV;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        return EdgeEffectFallOff;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        return EdgeEffectColor;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        return EdgeEffectAlphaFadeInTime;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        return EdgeEffectFullAlphaTime;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        return EdgeEffectAlphaFadeOutTime;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        return EdgeEffectPersistentAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        return EdgeEffectAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        return EdgeEffectAlphaPulseFrequency;
                    case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                        return FillTextureEffectFullAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        return EdgeEffectFullAlphaRatio;
                    case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                        return MembraneShaderDestBlendMode;
                    case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                        return ParticleShaderSourceBlendMode;
                    case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                        return ParticleShaderBlendOperation;
                    case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                        return ParticleShaderZTestFunction;
                    case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                        return ParticleShaderDestBlendMode;
                    case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                        return ParticleShaderParticleBirthRampUpTime;
                    case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                        return ParticleShaderFullParticleBirthTime;
                    case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                        return ParticleShaderParticleBirthRampDownTime;
                    case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                        return ParticleShaderFullParticleBirthRatio;
                    case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                        return ParticleShaderPersistentParticleBirthRatio;
                    case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                        return ParticleShaderParticleLifetime;
                    case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                        return ParticleShaderParticleLifetimePlusMinus;
                    case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                        return ParticleShaderInitialSpeedAlongNormal;
                    case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                        return ParticleShaderAccelerationAlongNormal;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                        return ParticleShaderInitialVelocity1;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                        return ParticleShaderInitialVelocity2;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                        return ParticleShaderInitialVelocity3;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                        return ParticleShaderAcceleration1;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                        return ParticleShaderAcceleration2;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                        return ParticleShaderAcceleration3;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                        return ParticleShaderScaleKey1;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                        return ParticleShaderScaleKey2;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                        return ParticleShaderScaleKey1Time;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                        return ParticleShaderScaleKey2Time;
                    case EffectShader_FieldIndex.ColorKey1Color:
                        return ColorKey1Color;
                    case EffectShader_FieldIndex.ColorKey2Color:
                        return ColorKey2Color;
                    case EffectShader_FieldIndex.ColorKey3Color:
                        return ColorKey3Color;
                    case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                        return ColorKey1ColorAlpha;
                    case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                        return ColorKey2ColorAlpha;
                    case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                        return ColorKey3ColorAlpha;
                    case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                        return ColorKey1ColorKeyTime;
                    case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                        return ColorKey2ColorKeyTime;
                    case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                        return ColorKey3ColorKeyTime;
                    case EffectShader_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        this.FillTexture = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        this.ParticleShaderTexture = ex;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                        this.MembraneShaderSourceBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                        this.MembraneShaderBlendOperation = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                        this.MembraneShaderZTestFunction = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectColor:
                        this.FillTextureEffectColor = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                        this.FillTextureEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                        this.FillTextureEffectFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                        this.FillTextureEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                        this.FillTextureEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                        this.FillTextureEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                        this.FillTextureEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                        this.FillTextureEffectTextureAnimationSpeedU = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                        this.FillTextureEffectTextureAnimationSpeedV = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                        this.FillTextureEffectFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                        this.MembraneShaderDestBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                        this.ParticleShaderSourceBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                        this.ParticleShaderBlendOperation = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                        this.ParticleShaderZTestFunction = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                        this.ParticleShaderDestBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                        this.ParticleShaderParticleBirthRampUpTime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                        this.ParticleShaderFullParticleBirthTime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                        this.ParticleShaderParticleBirthRampDownTime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                        this.ParticleShaderFullParticleBirthRatio = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                        this.ParticleShaderPersistentParticleBirthRatio = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                        this.ParticleShaderParticleLifetime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                        this.ParticleShaderParticleLifetimePlusMinus = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                        this.ParticleShaderInitialSpeedAlongNormal = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                        this.ParticleShaderAccelerationAlongNormal = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                        this.ParticleShaderInitialVelocity1 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                        this.ParticleShaderInitialVelocity2 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                        this.ParticleShaderInitialVelocity3 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                        this.ParticleShaderAcceleration1 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                        this.ParticleShaderAcceleration2 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                        this.ParticleShaderAcceleration3 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                        this.ParticleShaderScaleKey1 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                        this.ParticleShaderScaleKey2 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                        this.ParticleShaderScaleKey1Time = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                        this.ParticleShaderScaleKey2Time = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey1Color:
                        this.ColorKey1Color = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey2Color:
                        this.ColorKey2Color = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey3Color:
                        this.ColorKey3Color = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                        this.ColorKey1ColorAlpha = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                        this.ColorKey2ColorAlpha = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                        this.ColorKey3ColorAlpha = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                        this.ColorKey1ColorKeyTime = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                        this.ColorKey2ColorKeyTime = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                        this.ColorKey3ColorKeyTime = ex;
                        break;
                    case EffectShader_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        this.FillTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        this.ParticleShaderTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                        this.MembraneShaderSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                        this.MembraneShaderBlendOperation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                        this.MembraneShaderZTestFunction = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectColor:
                        this.FillTextureEffectColor = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                        this.FillTextureEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                        this.FillTextureEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                        this.FillTextureEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                        this.FillTextureEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                        this.FillTextureEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                        this.FillTextureEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                        this.FillTextureEffectTextureAnimationSpeedU = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                        this.FillTextureEffectTextureAnimationSpeedV = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                        this.FillTextureEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                        this.MembraneShaderDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                        this.ParticleShaderSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                        this.ParticleShaderBlendOperation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                        this.ParticleShaderZTestFunction = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                        this.ParticleShaderDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                        this.ParticleShaderParticleBirthRampUpTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                        this.ParticleShaderFullParticleBirthTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                        this.ParticleShaderParticleBirthRampDownTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                        this.ParticleShaderFullParticleBirthRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                        this.ParticleShaderPersistentParticleBirthRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                        this.ParticleShaderParticleLifetime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                        this.ParticleShaderParticleLifetimePlusMinus = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                        this.ParticleShaderInitialSpeedAlongNormal = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                        this.ParticleShaderAccelerationAlongNormal = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                        this.ParticleShaderInitialVelocity1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                        this.ParticleShaderInitialVelocity2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                        this.ParticleShaderInitialVelocity3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                        this.ParticleShaderAcceleration1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                        this.ParticleShaderAcceleration2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                        this.ParticleShaderAcceleration3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                        this.ParticleShaderScaleKey1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                        this.ParticleShaderScaleKey2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                        this.ParticleShaderScaleKey1Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                        this.ParticleShaderScaleKey2Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey1Color:
                        this.ColorKey1Color = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey2Color:
                        this.ColorKey2Color = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey3Color:
                        this.ColorKey3Color = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                        this.ColorKey1ColorAlpha = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                        this.ColorKey2ColorAlpha = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                        this.ColorKey3ColorAlpha = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                        this.ColorKey1ColorKeyTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                        this.ColorKey2ColorKeyTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                        this.ColorKey3ColorKeyTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FillTexture != null) return true;
                if (ParticleShaderTexture != null) return true;
                if (Flags != null) return true;
                if (MembraneShaderSourceBlendMode != null) return true;
                if (MembraneShaderBlendOperation != null) return true;
                if (MembraneShaderZTestFunction != null) return true;
                if (FillTextureEffectColor != null) return true;
                if (FillTextureEffectAlphaFadeInTime != null) return true;
                if (FillTextureEffectFullAlphaTime != null) return true;
                if (FillTextureEffectAlphaFadeOutTime != null) return true;
                if (FillTextureEffectPersistentAlphaRatio != null) return true;
                if (FillTextureEffectAlphaPulseAmplitude != null) return true;
                if (FillTextureEffectAlphaPulseFrequency != null) return true;
                if (FillTextureEffectTextureAnimationSpeedU != null) return true;
                if (FillTextureEffectTextureAnimationSpeedV != null) return true;
                if (EdgeEffectFallOff != null) return true;
                if (EdgeEffectColor != null) return true;
                if (EdgeEffectAlphaFadeInTime != null) return true;
                if (EdgeEffectFullAlphaTime != null) return true;
                if (EdgeEffectAlphaFadeOutTime != null) return true;
                if (EdgeEffectPersistentAlphaRatio != null) return true;
                if (EdgeEffectAlphaPulseAmplitude != null) return true;
                if (EdgeEffectAlphaPulseFrequency != null) return true;
                if (FillTextureEffectFullAlphaRatio != null) return true;
                if (EdgeEffectFullAlphaRatio != null) return true;
                if (MembraneShaderDestBlendMode != null) return true;
                if (ParticleShaderSourceBlendMode != null) return true;
                if (ParticleShaderBlendOperation != null) return true;
                if (ParticleShaderZTestFunction != null) return true;
                if (ParticleShaderDestBlendMode != null) return true;
                if (ParticleShaderParticleBirthRampUpTime != null) return true;
                if (ParticleShaderFullParticleBirthTime != null) return true;
                if (ParticleShaderParticleBirthRampDownTime != null) return true;
                if (ParticleShaderFullParticleBirthRatio != null) return true;
                if (ParticleShaderPersistentParticleBirthRatio != null) return true;
                if (ParticleShaderParticleLifetime != null) return true;
                if (ParticleShaderParticleLifetimePlusMinus != null) return true;
                if (ParticleShaderInitialSpeedAlongNormal != null) return true;
                if (ParticleShaderAccelerationAlongNormal != null) return true;
                if (ParticleShaderInitialVelocity1 != null) return true;
                if (ParticleShaderInitialVelocity2 != null) return true;
                if (ParticleShaderInitialVelocity3 != null) return true;
                if (ParticleShaderAcceleration1 != null) return true;
                if (ParticleShaderAcceleration2 != null) return true;
                if (ParticleShaderAcceleration3 != null) return true;
                if (ParticleShaderScaleKey1 != null) return true;
                if (ParticleShaderScaleKey2 != null) return true;
                if (ParticleShaderScaleKey1Time != null) return true;
                if (ParticleShaderScaleKey2Time != null) return true;
                if (ColorKey1Color != null) return true;
                if (ColorKey2Color != null) return true;
                if (ColorKey3Color != null) return true;
                if (ColorKey1ColorAlpha != null) return true;
                if (ColorKey2ColorAlpha != null) return true;
                if (ColorKey3ColorAlpha != null) return true;
                if (ColorKey1ColorKeyTime != null) return true;
                if (ColorKey2ColorKeyTime != null) return true;
                if (ColorKey3ColorKeyTime != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(FillTexture, "FillTexture");
                fg.AppendItem(ParticleShaderTexture, "ParticleShaderTexture");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(MembraneShaderSourceBlendMode, "MembraneShaderSourceBlendMode");
                fg.AppendItem(MembraneShaderBlendOperation, "MembraneShaderBlendOperation");
                fg.AppendItem(MembraneShaderZTestFunction, "MembraneShaderZTestFunction");
                fg.AppendItem(FillTextureEffectColor, "FillTextureEffectColor");
                fg.AppendItem(FillTextureEffectAlphaFadeInTime, "FillTextureEffectAlphaFadeInTime");
                fg.AppendItem(FillTextureEffectFullAlphaTime, "FillTextureEffectFullAlphaTime");
                fg.AppendItem(FillTextureEffectAlphaFadeOutTime, "FillTextureEffectAlphaFadeOutTime");
                fg.AppendItem(FillTextureEffectPersistentAlphaRatio, "FillTextureEffectPersistentAlphaRatio");
                fg.AppendItem(FillTextureEffectAlphaPulseAmplitude, "FillTextureEffectAlphaPulseAmplitude");
                fg.AppendItem(FillTextureEffectAlphaPulseFrequency, "FillTextureEffectAlphaPulseFrequency");
                fg.AppendItem(FillTextureEffectTextureAnimationSpeedU, "FillTextureEffectTextureAnimationSpeedU");
                fg.AppendItem(FillTextureEffectTextureAnimationSpeedV, "FillTextureEffectTextureAnimationSpeedV");
                fg.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                fg.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                fg.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                fg.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                fg.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                fg.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                fg.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                fg.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                fg.AppendItem(FillTextureEffectFullAlphaRatio, "FillTextureEffectFullAlphaRatio");
                fg.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                fg.AppendItem(MembraneShaderDestBlendMode, "MembraneShaderDestBlendMode");
                fg.AppendItem(ParticleShaderSourceBlendMode, "ParticleShaderSourceBlendMode");
                fg.AppendItem(ParticleShaderBlendOperation, "ParticleShaderBlendOperation");
                fg.AppendItem(ParticleShaderZTestFunction, "ParticleShaderZTestFunction");
                fg.AppendItem(ParticleShaderDestBlendMode, "ParticleShaderDestBlendMode");
                fg.AppendItem(ParticleShaderParticleBirthRampUpTime, "ParticleShaderParticleBirthRampUpTime");
                fg.AppendItem(ParticleShaderFullParticleBirthTime, "ParticleShaderFullParticleBirthTime");
                fg.AppendItem(ParticleShaderParticleBirthRampDownTime, "ParticleShaderParticleBirthRampDownTime");
                fg.AppendItem(ParticleShaderFullParticleBirthRatio, "ParticleShaderFullParticleBirthRatio");
                fg.AppendItem(ParticleShaderPersistentParticleBirthRatio, "ParticleShaderPersistentParticleBirthRatio");
                fg.AppendItem(ParticleShaderParticleLifetime, "ParticleShaderParticleLifetime");
                fg.AppendItem(ParticleShaderParticleLifetimePlusMinus, "ParticleShaderParticleLifetimePlusMinus");
                fg.AppendItem(ParticleShaderInitialSpeedAlongNormal, "ParticleShaderInitialSpeedAlongNormal");
                fg.AppendItem(ParticleShaderAccelerationAlongNormal, "ParticleShaderAccelerationAlongNormal");
                fg.AppendItem(ParticleShaderInitialVelocity1, "ParticleShaderInitialVelocity1");
                fg.AppendItem(ParticleShaderInitialVelocity2, "ParticleShaderInitialVelocity2");
                fg.AppendItem(ParticleShaderInitialVelocity3, "ParticleShaderInitialVelocity3");
                fg.AppendItem(ParticleShaderAcceleration1, "ParticleShaderAcceleration1");
                fg.AppendItem(ParticleShaderAcceleration2, "ParticleShaderAcceleration2");
                fg.AppendItem(ParticleShaderAcceleration3, "ParticleShaderAcceleration3");
                fg.AppendItem(ParticleShaderScaleKey1, "ParticleShaderScaleKey1");
                fg.AppendItem(ParticleShaderScaleKey2, "ParticleShaderScaleKey2");
                fg.AppendItem(ParticleShaderScaleKey1Time, "ParticleShaderScaleKey1Time");
                fg.AppendItem(ParticleShaderScaleKey2Time, "ParticleShaderScaleKey2Time");
                fg.AppendItem(ColorKey1Color, "ColorKey1Color");
                fg.AppendItem(ColorKey2Color, "ColorKey2Color");
                fg.AppendItem(ColorKey3Color, "ColorKey3Color");
                fg.AppendItem(ColorKey1ColorAlpha, "ColorKey1ColorAlpha");
                fg.AppendItem(ColorKey2ColorAlpha, "ColorKey2ColorAlpha");
                fg.AppendItem(ColorKey3ColorAlpha, "ColorKey3ColorAlpha");
                fg.AppendItem(ColorKey1ColorKeyTime, "ColorKey1ColorKeyTime");
                fg.AppendItem(ColorKey2ColorKeyTime, "ColorKey2ColorKeyTime");
                fg.AppendItem(ColorKey3ColorKeyTime, "ColorKey3ColorKeyTime");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FillTexture = this.FillTexture.Combine(rhs.FillTexture);
                ret.ParticleShaderTexture = this.ParticleShaderTexture.Combine(rhs.ParticleShaderTexture);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MembraneShaderSourceBlendMode = this.MembraneShaderSourceBlendMode.Combine(rhs.MembraneShaderSourceBlendMode);
                ret.MembraneShaderBlendOperation = this.MembraneShaderBlendOperation.Combine(rhs.MembraneShaderBlendOperation);
                ret.MembraneShaderZTestFunction = this.MembraneShaderZTestFunction.Combine(rhs.MembraneShaderZTestFunction);
                ret.FillTextureEffectColor = this.FillTextureEffectColor.Combine(rhs.FillTextureEffectColor);
                ret.FillTextureEffectAlphaFadeInTime = this.FillTextureEffectAlphaFadeInTime.Combine(rhs.FillTextureEffectAlphaFadeInTime);
                ret.FillTextureEffectFullAlphaTime = this.FillTextureEffectFullAlphaTime.Combine(rhs.FillTextureEffectFullAlphaTime);
                ret.FillTextureEffectAlphaFadeOutTime = this.FillTextureEffectAlphaFadeOutTime.Combine(rhs.FillTextureEffectAlphaFadeOutTime);
                ret.FillTextureEffectPersistentAlphaRatio = this.FillTextureEffectPersistentAlphaRatio.Combine(rhs.FillTextureEffectPersistentAlphaRatio);
                ret.FillTextureEffectAlphaPulseAmplitude = this.FillTextureEffectAlphaPulseAmplitude.Combine(rhs.FillTextureEffectAlphaPulseAmplitude);
                ret.FillTextureEffectAlphaPulseFrequency = this.FillTextureEffectAlphaPulseFrequency.Combine(rhs.FillTextureEffectAlphaPulseFrequency);
                ret.FillTextureEffectTextureAnimationSpeedU = this.FillTextureEffectTextureAnimationSpeedU.Combine(rhs.FillTextureEffectTextureAnimationSpeedU);
                ret.FillTextureEffectTextureAnimationSpeedV = this.FillTextureEffectTextureAnimationSpeedV.Combine(rhs.FillTextureEffectTextureAnimationSpeedV);
                ret.EdgeEffectFallOff = this.EdgeEffectFallOff.Combine(rhs.EdgeEffectFallOff);
                ret.EdgeEffectColor = this.EdgeEffectColor.Combine(rhs.EdgeEffectColor);
                ret.EdgeEffectAlphaFadeInTime = this.EdgeEffectAlphaFadeInTime.Combine(rhs.EdgeEffectAlphaFadeInTime);
                ret.EdgeEffectFullAlphaTime = this.EdgeEffectFullAlphaTime.Combine(rhs.EdgeEffectFullAlphaTime);
                ret.EdgeEffectAlphaFadeOutTime = this.EdgeEffectAlphaFadeOutTime.Combine(rhs.EdgeEffectAlphaFadeOutTime);
                ret.EdgeEffectPersistentAlphaRatio = this.EdgeEffectPersistentAlphaRatio.Combine(rhs.EdgeEffectPersistentAlphaRatio);
                ret.EdgeEffectAlphaPulseAmplitude = this.EdgeEffectAlphaPulseAmplitude.Combine(rhs.EdgeEffectAlphaPulseAmplitude);
                ret.EdgeEffectAlphaPulseFrequency = this.EdgeEffectAlphaPulseFrequency.Combine(rhs.EdgeEffectAlphaPulseFrequency);
                ret.FillTextureEffectFullAlphaRatio = this.FillTextureEffectFullAlphaRatio.Combine(rhs.FillTextureEffectFullAlphaRatio);
                ret.EdgeEffectFullAlphaRatio = this.EdgeEffectFullAlphaRatio.Combine(rhs.EdgeEffectFullAlphaRatio);
                ret.MembraneShaderDestBlendMode = this.MembraneShaderDestBlendMode.Combine(rhs.MembraneShaderDestBlendMode);
                ret.ParticleShaderSourceBlendMode = this.ParticleShaderSourceBlendMode.Combine(rhs.ParticleShaderSourceBlendMode);
                ret.ParticleShaderBlendOperation = this.ParticleShaderBlendOperation.Combine(rhs.ParticleShaderBlendOperation);
                ret.ParticleShaderZTestFunction = this.ParticleShaderZTestFunction.Combine(rhs.ParticleShaderZTestFunction);
                ret.ParticleShaderDestBlendMode = this.ParticleShaderDestBlendMode.Combine(rhs.ParticleShaderDestBlendMode);
                ret.ParticleShaderParticleBirthRampUpTime = this.ParticleShaderParticleBirthRampUpTime.Combine(rhs.ParticleShaderParticleBirthRampUpTime);
                ret.ParticleShaderFullParticleBirthTime = this.ParticleShaderFullParticleBirthTime.Combine(rhs.ParticleShaderFullParticleBirthTime);
                ret.ParticleShaderParticleBirthRampDownTime = this.ParticleShaderParticleBirthRampDownTime.Combine(rhs.ParticleShaderParticleBirthRampDownTime);
                ret.ParticleShaderFullParticleBirthRatio = this.ParticleShaderFullParticleBirthRatio.Combine(rhs.ParticleShaderFullParticleBirthRatio);
                ret.ParticleShaderPersistentParticleBirthRatio = this.ParticleShaderPersistentParticleBirthRatio.Combine(rhs.ParticleShaderPersistentParticleBirthRatio);
                ret.ParticleShaderParticleLifetime = this.ParticleShaderParticleLifetime.Combine(rhs.ParticleShaderParticleLifetime);
                ret.ParticleShaderParticleLifetimePlusMinus = this.ParticleShaderParticleLifetimePlusMinus.Combine(rhs.ParticleShaderParticleLifetimePlusMinus);
                ret.ParticleShaderInitialSpeedAlongNormal = this.ParticleShaderInitialSpeedAlongNormal.Combine(rhs.ParticleShaderInitialSpeedAlongNormal);
                ret.ParticleShaderAccelerationAlongNormal = this.ParticleShaderAccelerationAlongNormal.Combine(rhs.ParticleShaderAccelerationAlongNormal);
                ret.ParticleShaderInitialVelocity1 = this.ParticleShaderInitialVelocity1.Combine(rhs.ParticleShaderInitialVelocity1);
                ret.ParticleShaderInitialVelocity2 = this.ParticleShaderInitialVelocity2.Combine(rhs.ParticleShaderInitialVelocity2);
                ret.ParticleShaderInitialVelocity3 = this.ParticleShaderInitialVelocity3.Combine(rhs.ParticleShaderInitialVelocity3);
                ret.ParticleShaderAcceleration1 = this.ParticleShaderAcceleration1.Combine(rhs.ParticleShaderAcceleration1);
                ret.ParticleShaderAcceleration2 = this.ParticleShaderAcceleration2.Combine(rhs.ParticleShaderAcceleration2);
                ret.ParticleShaderAcceleration3 = this.ParticleShaderAcceleration3.Combine(rhs.ParticleShaderAcceleration3);
                ret.ParticleShaderScaleKey1 = this.ParticleShaderScaleKey1.Combine(rhs.ParticleShaderScaleKey1);
                ret.ParticleShaderScaleKey2 = this.ParticleShaderScaleKey2.Combine(rhs.ParticleShaderScaleKey2);
                ret.ParticleShaderScaleKey1Time = this.ParticleShaderScaleKey1Time.Combine(rhs.ParticleShaderScaleKey1Time);
                ret.ParticleShaderScaleKey2Time = this.ParticleShaderScaleKey2Time.Combine(rhs.ParticleShaderScaleKey2Time);
                ret.ColorKey1Color = this.ColorKey1Color.Combine(rhs.ColorKey1Color);
                ret.ColorKey2Color = this.ColorKey2Color.Combine(rhs.ColorKey2Color);
                ret.ColorKey3Color = this.ColorKey3Color.Combine(rhs.ColorKey3Color);
                ret.ColorKey1ColorAlpha = this.ColorKey1ColorAlpha.Combine(rhs.ColorKey1ColorAlpha);
                ret.ColorKey2ColorAlpha = this.ColorKey2ColorAlpha.Combine(rhs.ColorKey2ColorAlpha);
                ret.ColorKey3ColorAlpha = this.ColorKey3ColorAlpha.Combine(rhs.ColorKey3ColorAlpha);
                ret.ColorKey1ColorKeyTime = this.ColorKey1ColorKeyTime.Combine(rhs.ColorKey1ColorKeyTime);
                ret.ColorKey2ColorKeyTime = this.ColorKey2ColorKeyTime.Combine(rhs.ColorKey2ColorKeyTime);
                ret.ColorKey3ColorKeyTime = this.ColorKey3ColorKeyTime.Combine(rhs.ColorKey3ColorKeyTime);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FillTexture;
            public bool ParticleShaderTexture;
            public bool Flags;
            public bool MembraneShaderSourceBlendMode;
            public bool MembraneShaderBlendOperation;
            public bool MembraneShaderZTestFunction;
            public bool FillTextureEffectColor;
            public bool FillTextureEffectAlphaFadeInTime;
            public bool FillTextureEffectFullAlphaTime;
            public bool FillTextureEffectAlphaFadeOutTime;
            public bool FillTextureEffectPersistentAlphaRatio;
            public bool FillTextureEffectAlphaPulseAmplitude;
            public bool FillTextureEffectAlphaPulseFrequency;
            public bool FillTextureEffectTextureAnimationSpeedU;
            public bool FillTextureEffectTextureAnimationSpeedV;
            public bool EdgeEffectFallOff;
            public bool EdgeEffectColor;
            public bool EdgeEffectAlphaFadeInTime;
            public bool EdgeEffectFullAlphaTime;
            public bool EdgeEffectAlphaFadeOutTime;
            public bool EdgeEffectPersistentAlphaRatio;
            public bool EdgeEffectAlphaPulseAmplitude;
            public bool EdgeEffectAlphaPulseFrequency;
            public bool FillTextureEffectFullAlphaRatio;
            public bool EdgeEffectFullAlphaRatio;
            public bool MembraneShaderDestBlendMode;
            public bool ParticleShaderSourceBlendMode;
            public bool ParticleShaderBlendOperation;
            public bool ParticleShaderZTestFunction;
            public bool ParticleShaderDestBlendMode;
            public bool ParticleShaderParticleBirthRampUpTime;
            public bool ParticleShaderFullParticleBirthTime;
            public bool ParticleShaderParticleBirthRampDownTime;
            public bool ParticleShaderFullParticleBirthRatio;
            public bool ParticleShaderPersistentParticleBirthRatio;
            public bool ParticleShaderParticleLifetime;
            public bool ParticleShaderParticleLifetimePlusMinus;
            public bool ParticleShaderInitialSpeedAlongNormal;
            public bool ParticleShaderAccelerationAlongNormal;
            public bool ParticleShaderInitialVelocity1;
            public bool ParticleShaderInitialVelocity2;
            public bool ParticleShaderInitialVelocity3;
            public bool ParticleShaderAcceleration1;
            public bool ParticleShaderAcceleration2;
            public bool ParticleShaderAcceleration3;
            public bool ParticleShaderScaleKey1;
            public bool ParticleShaderScaleKey2;
            public bool ParticleShaderScaleKey1Time;
            public bool ParticleShaderScaleKey2Time;
            public bool ColorKey1Color;
            public bool ColorKey2Color;
            public bool ColorKey3Color;
            public bool ColorKey1ColorAlpha;
            public bool ColorKey2ColorAlpha;
            public bool ColorKey3ColorAlpha;
            public bool ColorKey1ColorKeyTime;
            public bool ColorKey2ColorKeyTime;
            public bool ColorKey3ColorKeyTime;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.FillTexture = defaultOn;
                this.ParticleShaderTexture = defaultOn;
                this.Flags = defaultOn;
                this.MembraneShaderSourceBlendMode = defaultOn;
                this.MembraneShaderBlendOperation = defaultOn;
                this.MembraneShaderZTestFunction = defaultOn;
                this.FillTextureEffectColor = defaultOn;
                this.FillTextureEffectAlphaFadeInTime = defaultOn;
                this.FillTextureEffectFullAlphaTime = defaultOn;
                this.FillTextureEffectAlphaFadeOutTime = defaultOn;
                this.FillTextureEffectPersistentAlphaRatio = defaultOn;
                this.FillTextureEffectAlphaPulseAmplitude = defaultOn;
                this.FillTextureEffectAlphaPulseFrequency = defaultOn;
                this.FillTextureEffectTextureAnimationSpeedU = defaultOn;
                this.FillTextureEffectTextureAnimationSpeedV = defaultOn;
                this.EdgeEffectFallOff = defaultOn;
                this.EdgeEffectColor = defaultOn;
                this.EdgeEffectAlphaFadeInTime = defaultOn;
                this.EdgeEffectFullAlphaTime = defaultOn;
                this.EdgeEffectAlphaFadeOutTime = defaultOn;
                this.EdgeEffectPersistentAlphaRatio = defaultOn;
                this.EdgeEffectAlphaPulseAmplitude = defaultOn;
                this.EdgeEffectAlphaPulseFrequency = defaultOn;
                this.FillTextureEffectFullAlphaRatio = defaultOn;
                this.EdgeEffectFullAlphaRatio = defaultOn;
                this.MembraneShaderDestBlendMode = defaultOn;
                this.ParticleShaderSourceBlendMode = defaultOn;
                this.ParticleShaderBlendOperation = defaultOn;
                this.ParticleShaderZTestFunction = defaultOn;
                this.ParticleShaderDestBlendMode = defaultOn;
                this.ParticleShaderParticleBirthRampUpTime = defaultOn;
                this.ParticleShaderFullParticleBirthTime = defaultOn;
                this.ParticleShaderParticleBirthRampDownTime = defaultOn;
                this.ParticleShaderFullParticleBirthRatio = defaultOn;
                this.ParticleShaderPersistentParticleBirthRatio = defaultOn;
                this.ParticleShaderParticleLifetime = defaultOn;
                this.ParticleShaderParticleLifetimePlusMinus = defaultOn;
                this.ParticleShaderInitialSpeedAlongNormal = defaultOn;
                this.ParticleShaderAccelerationAlongNormal = defaultOn;
                this.ParticleShaderInitialVelocity1 = defaultOn;
                this.ParticleShaderInitialVelocity2 = defaultOn;
                this.ParticleShaderInitialVelocity3 = defaultOn;
                this.ParticleShaderAcceleration1 = defaultOn;
                this.ParticleShaderAcceleration2 = defaultOn;
                this.ParticleShaderAcceleration3 = defaultOn;
                this.ParticleShaderScaleKey1 = defaultOn;
                this.ParticleShaderScaleKey2 = defaultOn;
                this.ParticleShaderScaleKey1Time = defaultOn;
                this.ParticleShaderScaleKey2Time = defaultOn;
                this.ColorKey1Color = defaultOn;
                this.ColorKey2Color = defaultOn;
                this.ColorKey3Color = defaultOn;
                this.ColorKey1ColorAlpha = defaultOn;
                this.ColorKey2ColorAlpha = defaultOn;
                this.ColorKey3ColorAlpha = defaultOn;
                this.ColorKey1ColorKeyTime = defaultOn;
                this.ColorKey2ColorKeyTime = defaultOn;
                this.ColorKey3ColorKeyTime = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FillTexture, null));
                ret.Add((ParticleShaderTexture, null));
                ret.Add((Flags, null));
                ret.Add((MembraneShaderSourceBlendMode, null));
                ret.Add((MembraneShaderBlendOperation, null));
                ret.Add((MembraneShaderZTestFunction, null));
                ret.Add((FillTextureEffectColor, null));
                ret.Add((FillTextureEffectAlphaFadeInTime, null));
                ret.Add((FillTextureEffectFullAlphaTime, null));
                ret.Add((FillTextureEffectAlphaFadeOutTime, null));
                ret.Add((FillTextureEffectPersistentAlphaRatio, null));
                ret.Add((FillTextureEffectAlphaPulseAmplitude, null));
                ret.Add((FillTextureEffectAlphaPulseFrequency, null));
                ret.Add((FillTextureEffectTextureAnimationSpeedU, null));
                ret.Add((FillTextureEffectTextureAnimationSpeedV, null));
                ret.Add((EdgeEffectFallOff, null));
                ret.Add((EdgeEffectColor, null));
                ret.Add((EdgeEffectAlphaFadeInTime, null));
                ret.Add((EdgeEffectFullAlphaTime, null));
                ret.Add((EdgeEffectAlphaFadeOutTime, null));
                ret.Add((EdgeEffectPersistentAlphaRatio, null));
                ret.Add((EdgeEffectAlphaPulseAmplitude, null));
                ret.Add((EdgeEffectAlphaPulseFrequency, null));
                ret.Add((FillTextureEffectFullAlphaRatio, null));
                ret.Add((EdgeEffectFullAlphaRatio, null));
                ret.Add((MembraneShaderDestBlendMode, null));
                ret.Add((ParticleShaderSourceBlendMode, null));
                ret.Add((ParticleShaderBlendOperation, null));
                ret.Add((ParticleShaderZTestFunction, null));
                ret.Add((ParticleShaderDestBlendMode, null));
                ret.Add((ParticleShaderParticleBirthRampUpTime, null));
                ret.Add((ParticleShaderFullParticleBirthTime, null));
                ret.Add((ParticleShaderParticleBirthRampDownTime, null));
                ret.Add((ParticleShaderFullParticleBirthRatio, null));
                ret.Add((ParticleShaderPersistentParticleBirthRatio, null));
                ret.Add((ParticleShaderParticleLifetime, null));
                ret.Add((ParticleShaderParticleLifetimePlusMinus, null));
                ret.Add((ParticleShaderInitialSpeedAlongNormal, null));
                ret.Add((ParticleShaderAccelerationAlongNormal, null));
                ret.Add((ParticleShaderInitialVelocity1, null));
                ret.Add((ParticleShaderInitialVelocity2, null));
                ret.Add((ParticleShaderInitialVelocity3, null));
                ret.Add((ParticleShaderAcceleration1, null));
                ret.Add((ParticleShaderAcceleration2, null));
                ret.Add((ParticleShaderAcceleration3, null));
                ret.Add((ParticleShaderScaleKey1, null));
                ret.Add((ParticleShaderScaleKey2, null));
                ret.Add((ParticleShaderScaleKey1Time, null));
                ret.Add((ParticleShaderScaleKey2Time, null));
                ret.Add((ColorKey1Color, null));
                ret.Add((ColorKey2Color, null));
                ret.Add((ColorKey3Color, null));
                ret.Add((ColorKey1ColorAlpha, null));
                ret.Add((ColorKey2ColorAlpha, null));
                ret.Add((ColorKey3ColorAlpha, null));
                ret.Add((ColorKey1ColorKeyTime, null));
                ret.Add((ColorKey2ColorKeyTime, null));
                ret.Add((ColorKey3ColorKeyTime, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = EffectShader_Registration.TriggeringRecordType;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        public EffectShader(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public EffectShader(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public EffectShader(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new EffectShader CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static EffectShader CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new EffectShader();
            ((EffectShaderSetterCommon)((IEffectShaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEffectShaderGetter)rhs, include);

        void IClearable.Clear()
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new EffectShader GetNew()
        {
            return new EffectShader();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffectShader :
        IEffectShaderGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IEffectShaderInternal>
    {
        new String? FillTexture { get; set; }
        new String? ParticleShaderTexture { get; set; }
        new EffectShader.Flag Flags { get; set; }
        new EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; set; }
        new EffectShader.BlendOperation MembraneShaderBlendOperation { get; set; }
        new EffectShader.ZTestFunction MembraneShaderZTestFunction { get; set; }
        new Color FillTextureEffectColor { get; set; }
        new Single FillTextureEffectAlphaFadeInTime { get; set; }
        new Single FillTextureEffectFullAlphaTime { get; set; }
        new Single FillTextureEffectAlphaFadeOutTime { get; set; }
        new Single FillTextureEffectPersistentAlphaRatio { get; set; }
        new Single FillTextureEffectAlphaPulseAmplitude { get; set; }
        new Single FillTextureEffectAlphaPulseFrequency { get; set; }
        new Single FillTextureEffectTextureAnimationSpeedU { get; set; }
        new Single FillTextureEffectTextureAnimationSpeedV { get; set; }
        new Single EdgeEffectFallOff { get; set; }
        new Color EdgeEffectColor { get; set; }
        new Single EdgeEffectAlphaFadeInTime { get; set; }
        new Single EdgeEffectFullAlphaTime { get; set; }
        new Single EdgeEffectAlphaFadeOutTime { get; set; }
        new Single EdgeEffectPersistentAlphaRatio { get; set; }
        new Single EdgeEffectAlphaPulseAmplitude { get; set; }
        new Single EdgeEffectAlphaPulseFrequency { get; set; }
        new Single FillTextureEffectFullAlphaRatio { get; set; }
        new Single EdgeEffectFullAlphaRatio { get; set; }
        new EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; set; }
        new EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; set; }
        new EffectShader.BlendOperation ParticleShaderBlendOperation { get; set; }
        new EffectShader.ZTestFunction ParticleShaderZTestFunction { get; set; }
        new EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; set; }
        new Single ParticleShaderParticleBirthRampUpTime { get; set; }
        new Single ParticleShaderFullParticleBirthTime { get; set; }
        new Single ParticleShaderParticleBirthRampDownTime { get; set; }
        new Single ParticleShaderFullParticleBirthRatio { get; set; }
        new Single ParticleShaderPersistentParticleBirthRatio { get; set; }
        new Single ParticleShaderParticleLifetime { get; set; }
        new Single ParticleShaderParticleLifetimePlusMinus { get; set; }
        new Single ParticleShaderInitialSpeedAlongNormal { get; set; }
        new Single ParticleShaderAccelerationAlongNormal { get; set; }
        new Single ParticleShaderInitialVelocity1 { get; set; }
        new Single ParticleShaderInitialVelocity2 { get; set; }
        new Single ParticleShaderInitialVelocity3 { get; set; }
        new Single ParticleShaderAcceleration1 { get; set; }
        new Single ParticleShaderAcceleration2 { get; set; }
        new Single ParticleShaderAcceleration3 { get; set; }
        new Single ParticleShaderScaleKey1 { get; set; }
        new Single ParticleShaderScaleKey2 { get; set; }
        new Single ParticleShaderScaleKey1Time { get; set; }
        new Single ParticleShaderScaleKey2Time { get; set; }
        new Color ColorKey1Color { get; set; }
        new Color ColorKey2Color { get; set; }
        new Color ColorKey3Color { get; set; }
        new Single ColorKey1ColorAlpha { get; set; }
        new Single ColorKey2ColorAlpha { get; set; }
        new Single ColorKey3ColorAlpha { get; set; }
        new Single ColorKey1ColorKeyTime { get; set; }
        new Single ColorKey2ColorKeyTime { get; set; }
        new Single ColorKey3ColorKeyTime { get; set; }
        new EffectShader.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IEffectShaderInternal :
        IOblivionMajorRecordInternal,
        IEffectShader,
        IEffectShaderGetter
    {
    }

    public partial interface IEffectShaderGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IEffectShaderGetter>,
        IXmlItem,
        IBinaryItem
    {
        String? FillTexture { get; }
        String? ParticleShaderTexture { get; }
        EffectShader.Flag Flags { get; }
        EffectShader.SourceBlendMode MembraneShaderSourceBlendMode { get; }
        EffectShader.BlendOperation MembraneShaderBlendOperation { get; }
        EffectShader.ZTestFunction MembraneShaderZTestFunction { get; }
        Color FillTextureEffectColor { get; }
        Single FillTextureEffectAlphaFadeInTime { get; }
        Single FillTextureEffectFullAlphaTime { get; }
        Single FillTextureEffectAlphaFadeOutTime { get; }
        Single FillTextureEffectPersistentAlphaRatio { get; }
        Single FillTextureEffectAlphaPulseAmplitude { get; }
        Single FillTextureEffectAlphaPulseFrequency { get; }
        Single FillTextureEffectTextureAnimationSpeedU { get; }
        Single FillTextureEffectTextureAnimationSpeedV { get; }
        Single EdgeEffectFallOff { get; }
        Color EdgeEffectColor { get; }
        Single EdgeEffectAlphaFadeInTime { get; }
        Single EdgeEffectFullAlphaTime { get; }
        Single EdgeEffectAlphaFadeOutTime { get; }
        Single EdgeEffectPersistentAlphaRatio { get; }
        Single EdgeEffectAlphaPulseAmplitude { get; }
        Single EdgeEffectAlphaPulseFrequency { get; }
        Single FillTextureEffectFullAlphaRatio { get; }
        Single EdgeEffectFullAlphaRatio { get; }
        EffectShader.SourceBlendMode MembraneShaderDestBlendMode { get; }
        EffectShader.SourceBlendMode ParticleShaderSourceBlendMode { get; }
        EffectShader.BlendOperation ParticleShaderBlendOperation { get; }
        EffectShader.ZTestFunction ParticleShaderZTestFunction { get; }
        EffectShader.SourceBlendMode ParticleShaderDestBlendMode { get; }
        Single ParticleShaderParticleBirthRampUpTime { get; }
        Single ParticleShaderFullParticleBirthTime { get; }
        Single ParticleShaderParticleBirthRampDownTime { get; }
        Single ParticleShaderFullParticleBirthRatio { get; }
        Single ParticleShaderPersistentParticleBirthRatio { get; }
        Single ParticleShaderParticleLifetime { get; }
        Single ParticleShaderParticleLifetimePlusMinus { get; }
        Single ParticleShaderInitialSpeedAlongNormal { get; }
        Single ParticleShaderAccelerationAlongNormal { get; }
        Single ParticleShaderInitialVelocity1 { get; }
        Single ParticleShaderInitialVelocity2 { get; }
        Single ParticleShaderInitialVelocity3 { get; }
        Single ParticleShaderAcceleration1 { get; }
        Single ParticleShaderAcceleration2 { get; }
        Single ParticleShaderAcceleration3 { get; }
        Single ParticleShaderScaleKey1 { get; }
        Single ParticleShaderScaleKey2 { get; }
        Single ParticleShaderScaleKey1Time { get; }
        Single ParticleShaderScaleKey2Time { get; }
        Color ColorKey1Color { get; }
        Color ColorKey2Color { get; }
        Color ColorKey3Color { get; }
        Single ColorKey1ColorAlpha { get; }
        Single ColorKey2ColorAlpha { get; }
        Single ColorKey3ColorAlpha { get; }
        Single ColorKey1ColorKeyTime { get; }
        Single ColorKey2ColorKeyTime { get; }
        Single ColorKey3ColorKeyTime { get; }
        EffectShader.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EffectShaderMixIn
    {
        public static void Clear(this IEffectShaderInternal item)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EffectShader.Mask<bool> GetEqualsMask(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IEffectShaderGetter item,
            FileGeneration fg,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IEffectShaderGetter item,
            EffectShader.Mask<bool?> checkMask)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static EffectShader.Mask<bool> GetHasBeenSetMask(this IEffectShaderGetter item)
        {
            var ret = new EffectShader.Mask<bool>(false);
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            XElement node,
            EffectShader.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            XElement node,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            string path,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            string path,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            Stream stream,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            Stream stream,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IEffectShaderInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            EffectShader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IEffectShaderInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IEffectShaderInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum EffectShader_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        FillTexture = 5,
        ParticleShaderTexture = 6,
        Flags = 7,
        MembraneShaderSourceBlendMode = 8,
        MembraneShaderBlendOperation = 9,
        MembraneShaderZTestFunction = 10,
        FillTextureEffectColor = 11,
        FillTextureEffectAlphaFadeInTime = 12,
        FillTextureEffectFullAlphaTime = 13,
        FillTextureEffectAlphaFadeOutTime = 14,
        FillTextureEffectPersistentAlphaRatio = 15,
        FillTextureEffectAlphaPulseAmplitude = 16,
        FillTextureEffectAlphaPulseFrequency = 17,
        FillTextureEffectTextureAnimationSpeedU = 18,
        FillTextureEffectTextureAnimationSpeedV = 19,
        EdgeEffectFallOff = 20,
        EdgeEffectColor = 21,
        EdgeEffectAlphaFadeInTime = 22,
        EdgeEffectFullAlphaTime = 23,
        EdgeEffectAlphaFadeOutTime = 24,
        EdgeEffectPersistentAlphaRatio = 25,
        EdgeEffectAlphaPulseAmplitude = 26,
        EdgeEffectAlphaPulseFrequency = 27,
        FillTextureEffectFullAlphaRatio = 28,
        EdgeEffectFullAlphaRatio = 29,
        MembraneShaderDestBlendMode = 30,
        ParticleShaderSourceBlendMode = 31,
        ParticleShaderBlendOperation = 32,
        ParticleShaderZTestFunction = 33,
        ParticleShaderDestBlendMode = 34,
        ParticleShaderParticleBirthRampUpTime = 35,
        ParticleShaderFullParticleBirthTime = 36,
        ParticleShaderParticleBirthRampDownTime = 37,
        ParticleShaderFullParticleBirthRatio = 38,
        ParticleShaderPersistentParticleBirthRatio = 39,
        ParticleShaderParticleLifetime = 40,
        ParticleShaderParticleLifetimePlusMinus = 41,
        ParticleShaderInitialSpeedAlongNormal = 42,
        ParticleShaderAccelerationAlongNormal = 43,
        ParticleShaderInitialVelocity1 = 44,
        ParticleShaderInitialVelocity2 = 45,
        ParticleShaderInitialVelocity3 = 46,
        ParticleShaderAcceleration1 = 47,
        ParticleShaderAcceleration2 = 48,
        ParticleShaderAcceleration3 = 49,
        ParticleShaderScaleKey1 = 50,
        ParticleShaderScaleKey2 = 51,
        ParticleShaderScaleKey1Time = 52,
        ParticleShaderScaleKey2Time = 53,
        ColorKey1Color = 54,
        ColorKey2Color = 55,
        ColorKey3Color = 56,
        ColorKey1ColorAlpha = 57,
        ColorKey2ColorAlpha = 58,
        ColorKey3ColorAlpha = 59,
        ColorKey1ColorKeyTime = 60,
        ColorKey2ColorKeyTime = 61,
        ColorKey3ColorKeyTime = 62,
        DATADataTypeState = 63,
    }
    #endregion

    #region Registration
    public partial class EffectShader_Registration : ILoquiRegistration
    {
        public static readonly EffectShader_Registration Instance = new EffectShader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 57,
            version: 0);

        public const string GUID = "2fe14395-5518-4c4a-85ff-7aba6d405e2b";

        public const ushort AdditionalFieldCount = 59;

        public const ushort FieldCount = 64;

        public static readonly Type MaskType = typeof(EffectShader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectShader.ErrorMask);

        public static readonly Type ClassType = typeof(EffectShader);

        public static readonly Type GetterType = typeof(IEffectShaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffectShader);

        public static readonly Type? InternalSetterType = typeof(IEffectShaderInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.EffectShader";

        public const string Name = "EffectShader";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FILLTEXTURE":
                    return (ushort)EffectShader_FieldIndex.FillTexture;
                case "PARTICLESHADERTEXTURE":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderTexture;
                case "FLAGS":
                    return (ushort)EffectShader_FieldIndex.Flags;
                case "MEMBRANESHADERSOURCEBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderSourceBlendMode;
                case "MEMBRANESHADERBLENDOPERATION":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderBlendOperation;
                case "MEMBRANESHADERZTESTFUNCTION":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderZTestFunction;
                case "FILLTEXTUREEFFECTCOLOR":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectColor;
                case "FILLTEXTUREEFFECTALPHAFADEINTIME":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime;
                case "FILLTEXTUREEFFECTFULLALPHATIME":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime;
                case "FILLTEXTUREEFFECTALPHAFADEOUTTIME":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime;
                case "FILLTEXTUREEFFECTPERSISTENTALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio;
                case "FILLTEXTUREEFFECTALPHAPULSEAMPLITUDE":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude;
                case "FILLTEXTUREEFFECTALPHAPULSEFREQUENCY":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency;
                case "FILLTEXTUREEFFECTTEXTUREANIMATIONSPEEDU":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU;
                case "FILLTEXTUREEFFECTTEXTUREANIMATIONSPEEDV":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV;
                case "EDGEEFFECTFALLOFF":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectFallOff;
                case "EDGEEFFECTCOLOR":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectColor;
                case "EDGEEFFECTALPHAFADEINTIME":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime;
                case "EDGEEFFECTFULLALPHATIME":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectFullAlphaTime;
                case "EDGEEFFECTALPHAFADEOUTTIME":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime;
                case "EDGEEFFECTPERSISTENTALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio;
                case "EDGEEFFECTALPHAPULSEAMPLITUDE":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude;
                case "EDGEEFFECTALPHAPULSEFREQUENCY":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency;
                case "FILLTEXTUREEFFECTFULLALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio;
                case "EDGEEFFECTFULLALPHARATIO":
                    return (ushort)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio;
                case "MEMBRANESHADERDESTBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.MembraneShaderDestBlendMode;
                case "PARTICLESHADERSOURCEBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderSourceBlendMode;
                case "PARTICLESHADERBLENDOPERATION":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderBlendOperation;
                case "PARTICLESHADERZTESTFUNCTION":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderZTestFunction;
                case "PARTICLESHADERDESTBLENDMODE":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderDestBlendMode;
                case "PARTICLESHADERPARTICLEBIRTHRAMPUPTIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime;
                case "PARTICLESHADERFULLPARTICLEBIRTHTIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime;
                case "PARTICLESHADERPARTICLEBIRTHRAMPDOWNTIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime;
                case "PARTICLESHADERFULLPARTICLEBIRTHRATIO":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio;
                case "PARTICLESHADERPERSISTENTPARTICLEBIRTHRATIO":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio;
                case "PARTICLESHADERPARTICLELIFETIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleLifetime;
                case "PARTICLESHADERPARTICLELIFETIMEPLUSMINUS":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus;
                case "PARTICLESHADERINITIALSPEEDALONGNORMAL":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal;
                case "PARTICLESHADERACCELERATIONALONGNORMAL":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal;
                case "PARTICLESHADERINITIALVELOCITY1":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialVelocity1;
                case "PARTICLESHADERINITIALVELOCITY2":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialVelocity2;
                case "PARTICLESHADERINITIALVELOCITY3":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderInitialVelocity3;
                case "PARTICLESHADERACCELERATION1":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAcceleration1;
                case "PARTICLESHADERACCELERATION2":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAcceleration2;
                case "PARTICLESHADERACCELERATION3":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderAcceleration3;
                case "PARTICLESHADERSCALEKEY1":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey1;
                case "PARTICLESHADERSCALEKEY2":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey2;
                case "PARTICLESHADERSCALEKEY1TIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey1Time;
                case "PARTICLESHADERSCALEKEY2TIME":
                    return (ushort)EffectShader_FieldIndex.ParticleShaderScaleKey2Time;
                case "COLORKEY1COLOR":
                    return (ushort)EffectShader_FieldIndex.ColorKey1Color;
                case "COLORKEY2COLOR":
                    return (ushort)EffectShader_FieldIndex.ColorKey2Color;
                case "COLORKEY3COLOR":
                    return (ushort)EffectShader_FieldIndex.ColorKey3Color;
                case "COLORKEY1COLORALPHA":
                    return (ushort)EffectShader_FieldIndex.ColorKey1ColorAlpha;
                case "COLORKEY2COLORALPHA":
                    return (ushort)EffectShader_FieldIndex.ColorKey2ColorAlpha;
                case "COLORKEY3COLORALPHA":
                    return (ushort)EffectShader_FieldIndex.ColorKey3ColorAlpha;
                case "COLORKEY1COLORKEYTIME":
                    return (ushort)EffectShader_FieldIndex.ColorKey1ColorKeyTime;
                case "COLORKEY2COLORKEYTIME":
                    return (ushort)EffectShader_FieldIndex.ColorKey2ColorKeyTime;
                case "COLORKEY3COLORKEYTIME":
                    return (ushort)EffectShader_FieldIndex.ColorKey3ColorKeyTime;
                case "DATADATATYPESTATE":
                    return (ushort)EffectShader_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                case EffectShader_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                case EffectShader_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                case EffectShader_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    return "FillTexture";
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    return "ParticleShaderTexture";
                case EffectShader_FieldIndex.Flags:
                    return "Flags";
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    return "MembraneShaderSourceBlendMode";
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    return "MembraneShaderBlendOperation";
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    return "MembraneShaderZTestFunction";
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    return "FillTextureEffectColor";
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return "FillTextureEffectAlphaFadeInTime";
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    return "FillTextureEffectFullAlphaTime";
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return "FillTextureEffectAlphaFadeOutTime";
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return "FillTextureEffectPersistentAlphaRatio";
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return "FillTextureEffectAlphaPulseAmplitude";
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return "FillTextureEffectAlphaPulseFrequency";
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return "FillTextureEffectTextureAnimationSpeedU";
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return "FillTextureEffectTextureAnimationSpeedV";
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    return "EdgeEffectFallOff";
                case EffectShader_FieldIndex.EdgeEffectColor:
                    return "EdgeEffectColor";
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return "EdgeEffectAlphaFadeInTime";
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    return "EdgeEffectFullAlphaTime";
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return "EdgeEffectAlphaFadeOutTime";
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return "EdgeEffectPersistentAlphaRatio";
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return "EdgeEffectAlphaPulseAmplitude";
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return "EdgeEffectAlphaPulseFrequency";
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return "FillTextureEffectFullAlphaRatio";
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    return "EdgeEffectFullAlphaRatio";
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    return "MembraneShaderDestBlendMode";
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    return "ParticleShaderSourceBlendMode";
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    return "ParticleShaderBlendOperation";
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    return "ParticleShaderZTestFunction";
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    return "ParticleShaderDestBlendMode";
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return "ParticleShaderParticleBirthRampUpTime";
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return "ParticleShaderFullParticleBirthTime";
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return "ParticleShaderParticleBirthRampDownTime";
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return "ParticleShaderFullParticleBirthRatio";
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return "ParticleShaderPersistentParticleBirthRatio";
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    return "ParticleShaderParticleLifetime";
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return "ParticleShaderParticleLifetimePlusMinus";
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return "ParticleShaderInitialSpeedAlongNormal";
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return "ParticleShaderAccelerationAlongNormal";
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    return "ParticleShaderInitialVelocity1";
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    return "ParticleShaderInitialVelocity2";
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    return "ParticleShaderInitialVelocity3";
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    return "ParticleShaderAcceleration1";
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    return "ParticleShaderAcceleration2";
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    return "ParticleShaderAcceleration3";
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    return "ParticleShaderScaleKey1";
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    return "ParticleShaderScaleKey2";
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    return "ParticleShaderScaleKey1Time";
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    return "ParticleShaderScaleKey2Time";
                case EffectShader_FieldIndex.ColorKey1Color:
                    return "ColorKey1Color";
                case EffectShader_FieldIndex.ColorKey2Color:
                    return "ColorKey2Color";
                case EffectShader_FieldIndex.ColorKey3Color:
                    return "ColorKey3Color";
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    return "ColorKey1ColorAlpha";
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    return "ColorKey2ColorAlpha";
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    return "ColorKey3ColorAlpha";
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    return "ColorKey1ColorKeyTime";
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    return "ColorKey2ColorKeyTime";
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return "ColorKey3ColorKeyTime";
                case EffectShader_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                case EffectShader_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                case EffectShader_FieldIndex.ParticleShaderTexture:
                case EffectShader_FieldIndex.Flags:
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                case EffectShader_FieldIndex.FillTextureEffectColor:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                case EffectShader_FieldIndex.EdgeEffectColor:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                case EffectShader_FieldIndex.ColorKey1Color:
                case EffectShader_FieldIndex.ColorKey2Color:
                case EffectShader_FieldIndex.ColorKey3Color:
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                case EffectShader_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
            switch (enu)
            {
                case EffectShader_FieldIndex.FillTexture:
                    return typeof(String);
                case EffectShader_FieldIndex.ParticleShaderTexture:
                    return typeof(String);
                case EffectShader_FieldIndex.Flags:
                    return typeof(EffectShader.Flag);
                case EffectShader_FieldIndex.MembraneShaderSourceBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.MembraneShaderBlendOperation:
                    return typeof(EffectShader.BlendOperation);
                case EffectShader_FieldIndex.MembraneShaderZTestFunction:
                    return typeof(EffectShader.ZTestFunction);
                case EffectShader_FieldIndex.FillTextureEffectColor:
                    return typeof(Color);
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectFallOff:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectColor:
                    return typeof(Color);
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                    return typeof(Single);
                case EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.MembraneShaderDestBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.ParticleShaderSourceBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.ParticleShaderBlendOperation:
                    return typeof(EffectShader.BlendOperation);
                case EffectShader_FieldIndex.ParticleShaderZTestFunction:
                    return typeof(EffectShader.ZTestFunction);
                case EffectShader_FieldIndex.ParticleShaderDestBlendMode:
                    return typeof(EffectShader.SourceBlendMode);
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderParticleLifetime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity1:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity2:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderInitialVelocity3:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAcceleration1:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAcceleration2:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderAcceleration3:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey1:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey2:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey1Time:
                    return typeof(Single);
                case EffectShader_FieldIndex.ParticleShaderScaleKey2Time:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey1Color:
                    return typeof(Color);
                case EffectShader_FieldIndex.ColorKey2Color:
                    return typeof(Color);
                case EffectShader_FieldIndex.ColorKey3Color:
                    return typeof(Color);
                case EffectShader_FieldIndex.ColorKey1ColorAlpha:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey2ColorAlpha:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey3ColorAlpha:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey1ColorKeyTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey2ColorKeyTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.ColorKey3ColorKeyTime:
                    return typeof(Single);
                case EffectShader_FieldIndex.DATADataTypeState:
                    return typeof(EffectShader.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(EffectShaderXmlWriteTranslation);
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType ICO2_HEADER = new RecordType("ICO2");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = EFSH_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(EffectShaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class EffectShaderSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly EffectShaderSetterCommon Instance = new EffectShaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffectShaderInternal item)
        {
            ClearPartial();
            item.FillTexture = default;
            item.ParticleShaderTexture = default;
            item.Flags = default;
            item.MembraneShaderSourceBlendMode = default;
            item.MembraneShaderBlendOperation = default;
            item.MembraneShaderZTestFunction = default;
            item.FillTextureEffectColor = default;
            item.FillTextureEffectAlphaFadeInTime = default;
            item.FillTextureEffectFullAlphaTime = default;
            item.FillTextureEffectAlphaFadeOutTime = default;
            item.FillTextureEffectPersistentAlphaRatio = default;
            item.FillTextureEffectAlphaPulseAmplitude = default;
            item.FillTextureEffectAlphaPulseFrequency = default;
            item.FillTextureEffectTextureAnimationSpeedU = default;
            item.FillTextureEffectTextureAnimationSpeedV = default;
            item.EdgeEffectFallOff = default;
            item.EdgeEffectColor = default;
            item.EdgeEffectAlphaFadeInTime = default;
            item.EdgeEffectFullAlphaTime = default;
            item.EdgeEffectAlphaFadeOutTime = default;
            item.EdgeEffectPersistentAlphaRatio = default;
            item.EdgeEffectAlphaPulseAmplitude = default;
            item.EdgeEffectAlphaPulseFrequency = default;
            item.FillTextureEffectFullAlphaRatio = default;
            item.EdgeEffectFullAlphaRatio = default;
            item.MembraneShaderDestBlendMode = default;
            item.ParticleShaderSourceBlendMode = default;
            item.ParticleShaderBlendOperation = default;
            item.ParticleShaderZTestFunction = default;
            item.ParticleShaderDestBlendMode = default;
            item.ParticleShaderParticleBirthRampUpTime = default;
            item.ParticleShaderFullParticleBirthTime = default;
            item.ParticleShaderParticleBirthRampDownTime = default;
            item.ParticleShaderFullParticleBirthRatio = default;
            item.ParticleShaderPersistentParticleBirthRatio = default;
            item.ParticleShaderParticleLifetime = default;
            item.ParticleShaderParticleLifetimePlusMinus = default;
            item.ParticleShaderInitialSpeedAlongNormal = default;
            item.ParticleShaderAccelerationAlongNormal = default;
            item.ParticleShaderInitialVelocity1 = default;
            item.ParticleShaderInitialVelocity2 = default;
            item.ParticleShaderInitialVelocity3 = default;
            item.ParticleShaderAcceleration1 = default;
            item.ParticleShaderAcceleration2 = default;
            item.ParticleShaderAcceleration3 = default;
            item.ParticleShaderScaleKey1 = default;
            item.ParticleShaderScaleKey2 = default;
            item.ParticleShaderScaleKey1Time = default;
            item.ParticleShaderScaleKey2Time = default;
            item.ColorKey1Color = default;
            item.ColorKey2Color = default;
            item.ColorKey3Color = default;
            item.ColorKey1ColorAlpha = default;
            item.ColorKey2ColorAlpha = default;
            item.ColorKey3ColorAlpha = default;
            item.ColorKey1ColorKeyTime = default;
            item.ColorKey2ColorKeyTime = default;
            item.ColorKey3ColorKeyTime = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IEffectShaderInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= EffectShader.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IEffectShaderInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.DATADataTypeState |= EffectShader.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    EffectShaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => EffectShader_Registration.EFSH_HEADER;
        protected static void FillBinaryStructs(
            IEffectShaderInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IEffectShaderInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FillTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.FillTexture);
                }
                case 0x324F4349: // ICO2
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ParticleShaderTexture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.ParticleShaderTexture);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = EffectShader.DATADataType.Has;
                    }
                    item.Flags = EnumBinaryTranslation<EffectShader.Flag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.MembraneShaderSourceBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.MembraneShaderBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.MembraneShaderZTestFunction = EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.FillTextureEffectColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true);
                    item.FillTextureEffectAlphaFadeInTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectFullAlphaTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectAlphaFadeOutTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectPersistentAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectAlphaPulseAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectAlphaPulseFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectTextureAnimationSpeedU = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectTextureAnimationSpeedV = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectFallOff = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectColor = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true);
                    item.EdgeEffectAlphaFadeInTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectFullAlphaTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectAlphaFadeOutTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectPersistentAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectAlphaPulseAmplitude = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectAlphaPulseFrequency = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.FillTextureEffectFullAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EdgeEffectFullAlphaRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.MembraneShaderDestBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= EffectShader.DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode);
                    }
                    item.ParticleShaderSourceBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ParticleShaderBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ParticleShaderZTestFunction = EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ParticleShaderDestBlendMode = EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.ParticleShaderParticleBirthRampUpTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderFullParticleBirthTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderParticleBirthRampDownTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderFullParticleBirthRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderPersistentParticleBirthRatio = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderParticleLifetime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderParticleLifetimePlusMinus = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderInitialSpeedAlongNormal = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderAccelerationAlongNormal = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderInitialVelocity1 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderInitialVelocity2 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderInitialVelocity3 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderAcceleration1 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderAcceleration2 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderAcceleration3 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderScaleKey1 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderScaleKey2 = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderScaleKey1Time = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ParticleShaderScaleKey2Time = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorKey1Color = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true);
                    item.ColorKey2Color = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true);
                    item.ColorKey3Color = Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        extraByte: true);
                    item.ColorKey1ColorAlpha = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorKey2ColorAlpha = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorKey3ColorAlpha = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorKey1ColorKeyTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorKey2ColorKeyTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.ColorKey3ColorKeyTime = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            IEffectShaderInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IEffectShaderInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class EffectShaderCommon : OblivionMajorRecordCommon
    {
        public new static readonly EffectShaderCommon Instance = new EffectShaderCommon();

        public EffectShader.Mask<bool> GetEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectShader.Mask<bool>(false);
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.FillTexture = string.Equals(item.FillTexture, rhs.FillTexture);
            ret.ParticleShaderTexture = string.Equals(item.ParticleShaderTexture, rhs.ParticleShaderTexture);
            ret.Flags = item.Flags == rhs.Flags;
            ret.MembraneShaderSourceBlendMode = item.MembraneShaderSourceBlendMode == rhs.MembraneShaderSourceBlendMode;
            ret.MembraneShaderBlendOperation = item.MembraneShaderBlendOperation == rhs.MembraneShaderBlendOperation;
            ret.MembraneShaderZTestFunction = item.MembraneShaderZTestFunction == rhs.MembraneShaderZTestFunction;
            ret.FillTextureEffectColor = item.FillTextureEffectColor.ColorOnlyEquals(rhs.FillTextureEffectColor);
            ret.FillTextureEffectAlphaFadeInTime = item.FillTextureEffectAlphaFadeInTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeInTime);
            ret.FillTextureEffectFullAlphaTime = item.FillTextureEffectFullAlphaTime.EqualsWithin(rhs.FillTextureEffectFullAlphaTime);
            ret.FillTextureEffectAlphaFadeOutTime = item.FillTextureEffectAlphaFadeOutTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeOutTime);
            ret.FillTextureEffectPersistentAlphaRatio = item.FillTextureEffectPersistentAlphaRatio.EqualsWithin(rhs.FillTextureEffectPersistentAlphaRatio);
            ret.FillTextureEffectAlphaPulseAmplitude = item.FillTextureEffectAlphaPulseAmplitude.EqualsWithin(rhs.FillTextureEffectAlphaPulseAmplitude);
            ret.FillTextureEffectAlphaPulseFrequency = item.FillTextureEffectAlphaPulseFrequency.EqualsWithin(rhs.FillTextureEffectAlphaPulseFrequency);
            ret.FillTextureEffectTextureAnimationSpeedU = item.FillTextureEffectTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedU);
            ret.FillTextureEffectTextureAnimationSpeedV = item.FillTextureEffectTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedV);
            ret.EdgeEffectFallOff = item.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = item.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = item.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = item.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = item.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = item.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = item.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = item.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency);
            ret.FillTextureEffectFullAlphaRatio = item.FillTextureEffectFullAlphaRatio.EqualsWithin(rhs.FillTextureEffectFullAlphaRatio);
            ret.EdgeEffectFullAlphaRatio = item.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio);
            ret.MembraneShaderDestBlendMode = item.MembraneShaderDestBlendMode == rhs.MembraneShaderDestBlendMode;
            ret.ParticleShaderSourceBlendMode = item.ParticleShaderSourceBlendMode == rhs.ParticleShaderSourceBlendMode;
            ret.ParticleShaderBlendOperation = item.ParticleShaderBlendOperation == rhs.ParticleShaderBlendOperation;
            ret.ParticleShaderZTestFunction = item.ParticleShaderZTestFunction == rhs.ParticleShaderZTestFunction;
            ret.ParticleShaderDestBlendMode = item.ParticleShaderDestBlendMode == rhs.ParticleShaderDestBlendMode;
            ret.ParticleShaderParticleBirthRampUpTime = item.ParticleShaderParticleBirthRampUpTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampUpTime);
            ret.ParticleShaderFullParticleBirthTime = item.ParticleShaderFullParticleBirthTime.EqualsWithin(rhs.ParticleShaderFullParticleBirthTime);
            ret.ParticleShaderParticleBirthRampDownTime = item.ParticleShaderParticleBirthRampDownTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampDownTime);
            ret.ParticleShaderFullParticleBirthRatio = item.ParticleShaderFullParticleBirthRatio.EqualsWithin(rhs.ParticleShaderFullParticleBirthRatio);
            ret.ParticleShaderPersistentParticleBirthRatio = item.ParticleShaderPersistentParticleBirthRatio.EqualsWithin(rhs.ParticleShaderPersistentParticleBirthRatio);
            ret.ParticleShaderParticleLifetime = item.ParticleShaderParticleLifetime.EqualsWithin(rhs.ParticleShaderParticleLifetime);
            ret.ParticleShaderParticleLifetimePlusMinus = item.ParticleShaderParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleShaderParticleLifetimePlusMinus);
            ret.ParticleShaderInitialSpeedAlongNormal = item.ParticleShaderInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleShaderInitialSpeedAlongNormal);
            ret.ParticleShaderAccelerationAlongNormal = item.ParticleShaderAccelerationAlongNormal.EqualsWithin(rhs.ParticleShaderAccelerationAlongNormal);
            ret.ParticleShaderInitialVelocity1 = item.ParticleShaderInitialVelocity1.EqualsWithin(rhs.ParticleShaderInitialVelocity1);
            ret.ParticleShaderInitialVelocity2 = item.ParticleShaderInitialVelocity2.EqualsWithin(rhs.ParticleShaderInitialVelocity2);
            ret.ParticleShaderInitialVelocity3 = item.ParticleShaderInitialVelocity3.EqualsWithin(rhs.ParticleShaderInitialVelocity3);
            ret.ParticleShaderAcceleration1 = item.ParticleShaderAcceleration1.EqualsWithin(rhs.ParticleShaderAcceleration1);
            ret.ParticleShaderAcceleration2 = item.ParticleShaderAcceleration2.EqualsWithin(rhs.ParticleShaderAcceleration2);
            ret.ParticleShaderAcceleration3 = item.ParticleShaderAcceleration3.EqualsWithin(rhs.ParticleShaderAcceleration3);
            ret.ParticleShaderScaleKey1 = item.ParticleShaderScaleKey1.EqualsWithin(rhs.ParticleShaderScaleKey1);
            ret.ParticleShaderScaleKey2 = item.ParticleShaderScaleKey2.EqualsWithin(rhs.ParticleShaderScaleKey2);
            ret.ParticleShaderScaleKey1Time = item.ParticleShaderScaleKey1Time.EqualsWithin(rhs.ParticleShaderScaleKey1Time);
            ret.ParticleShaderScaleKey2Time = item.ParticleShaderScaleKey2Time.EqualsWithin(rhs.ParticleShaderScaleKey2Time);
            ret.ColorKey1Color = item.ColorKey1Color.ColorOnlyEquals(rhs.ColorKey1Color);
            ret.ColorKey2Color = item.ColorKey2Color.ColorOnlyEquals(rhs.ColorKey2Color);
            ret.ColorKey3Color = item.ColorKey3Color.ColorOnlyEquals(rhs.ColorKey3Color);
            ret.ColorKey1ColorAlpha = item.ColorKey1ColorAlpha.EqualsWithin(rhs.ColorKey1ColorAlpha);
            ret.ColorKey2ColorAlpha = item.ColorKey2ColorAlpha.EqualsWithin(rhs.ColorKey2ColorAlpha);
            ret.ColorKey3ColorAlpha = item.ColorKey3ColorAlpha.EqualsWithin(rhs.ColorKey3ColorAlpha);
            ret.ColorKey1ColorKeyTime = item.ColorKey1ColorKeyTime.EqualsWithin(rhs.ColorKey1ColorKeyTime);
            ret.ColorKey2ColorKeyTime = item.ColorKey2ColorKeyTime.EqualsWithin(rhs.ColorKey2ColorKeyTime);
            ret.ColorKey3ColorKeyTime = item.ColorKey3ColorKeyTime.EqualsWithin(rhs.ColorKey3ColorKeyTime);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IEffectShaderGetter item,
            FileGeneration fg,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"EffectShader =>");
            }
            else
            {
                fg.AppendLine($"{name} (EffectShader) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IEffectShaderGetter item,
            FileGeneration fg,
            EffectShader.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.FillTexture ?? true)
                && item.FillTexture.TryGet(out var FillTextureItem))
            {
                fg.AppendItem(FillTextureItem, "FillTexture");
            }
            if ((printMask?.ParticleShaderTexture ?? true)
                && item.ParticleShaderTexture.TryGet(out var ParticleShaderTextureItem))
            {
                fg.AppendItem(ParticleShaderTextureItem, "ParticleShaderTexture");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.MembraneShaderSourceBlendMode ?? true)
            {
                fg.AppendItem(item.MembraneShaderSourceBlendMode, "MembraneShaderSourceBlendMode");
            }
            if (printMask?.MembraneShaderBlendOperation ?? true)
            {
                fg.AppendItem(item.MembraneShaderBlendOperation, "MembraneShaderBlendOperation");
            }
            if (printMask?.MembraneShaderZTestFunction ?? true)
            {
                fg.AppendItem(item.MembraneShaderZTestFunction, "MembraneShaderZTestFunction");
            }
            if (printMask?.FillTextureEffectColor ?? true)
            {
                fg.AppendItem(item.FillTextureEffectColor, "FillTextureEffectColor");
            }
            if (printMask?.FillTextureEffectAlphaFadeInTime ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaFadeInTime, "FillTextureEffectAlphaFadeInTime");
            }
            if (printMask?.FillTextureEffectFullAlphaTime ?? true)
            {
                fg.AppendItem(item.FillTextureEffectFullAlphaTime, "FillTextureEffectFullAlphaTime");
            }
            if (printMask?.FillTextureEffectAlphaFadeOutTime ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaFadeOutTime, "FillTextureEffectAlphaFadeOutTime");
            }
            if (printMask?.FillTextureEffectPersistentAlphaRatio ?? true)
            {
                fg.AppendItem(item.FillTextureEffectPersistentAlphaRatio, "FillTextureEffectPersistentAlphaRatio");
            }
            if (printMask?.FillTextureEffectAlphaPulseAmplitude ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaPulseAmplitude, "FillTextureEffectAlphaPulseAmplitude");
            }
            if (printMask?.FillTextureEffectAlphaPulseFrequency ?? true)
            {
                fg.AppendItem(item.FillTextureEffectAlphaPulseFrequency, "FillTextureEffectAlphaPulseFrequency");
            }
            if (printMask?.FillTextureEffectTextureAnimationSpeedU ?? true)
            {
                fg.AppendItem(item.FillTextureEffectTextureAnimationSpeedU, "FillTextureEffectTextureAnimationSpeedU");
            }
            if (printMask?.FillTextureEffectTextureAnimationSpeedV ?? true)
            {
                fg.AppendItem(item.FillTextureEffectTextureAnimationSpeedV, "FillTextureEffectTextureAnimationSpeedV");
            }
            if (printMask?.EdgeEffectFallOff ?? true)
            {
                fg.AppendItem(item.EdgeEffectFallOff, "EdgeEffectFallOff");
            }
            if (printMask?.EdgeEffectColor ?? true)
            {
                fg.AppendItem(item.EdgeEffectColor, "EdgeEffectColor");
            }
            if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
            }
            if (printMask?.EdgeEffectFullAlphaTime ?? true)
            {
                fg.AppendItem(item.EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
            }
            if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
            }
            if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
            {
                fg.AppendItem(item.EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
            }
            if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
            }
            if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
            {
                fg.AppendItem(item.EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
            }
            if (printMask?.FillTextureEffectFullAlphaRatio ?? true)
            {
                fg.AppendItem(item.FillTextureEffectFullAlphaRatio, "FillTextureEffectFullAlphaRatio");
            }
            if (printMask?.EdgeEffectFullAlphaRatio ?? true)
            {
                fg.AppendItem(item.EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
            }
            if (printMask?.MembraneShaderDestBlendMode ?? true)
            {
                fg.AppendItem(item.MembraneShaderDestBlendMode, "MembraneShaderDestBlendMode");
            }
            if (printMask?.ParticleShaderSourceBlendMode ?? true)
            {
                fg.AppendItem(item.ParticleShaderSourceBlendMode, "ParticleShaderSourceBlendMode");
            }
            if (printMask?.ParticleShaderBlendOperation ?? true)
            {
                fg.AppendItem(item.ParticleShaderBlendOperation, "ParticleShaderBlendOperation");
            }
            if (printMask?.ParticleShaderZTestFunction ?? true)
            {
                fg.AppendItem(item.ParticleShaderZTestFunction, "ParticleShaderZTestFunction");
            }
            if (printMask?.ParticleShaderDestBlendMode ?? true)
            {
                fg.AppendItem(item.ParticleShaderDestBlendMode, "ParticleShaderDestBlendMode");
            }
            if (printMask?.ParticleShaderParticleBirthRampUpTime ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleBirthRampUpTime, "ParticleShaderParticleBirthRampUpTime");
            }
            if (printMask?.ParticleShaderFullParticleBirthTime ?? true)
            {
                fg.AppendItem(item.ParticleShaderFullParticleBirthTime, "ParticleShaderFullParticleBirthTime");
            }
            if (printMask?.ParticleShaderParticleBirthRampDownTime ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleBirthRampDownTime, "ParticleShaderParticleBirthRampDownTime");
            }
            if (printMask?.ParticleShaderFullParticleBirthRatio ?? true)
            {
                fg.AppendItem(item.ParticleShaderFullParticleBirthRatio, "ParticleShaderFullParticleBirthRatio");
            }
            if (printMask?.ParticleShaderPersistentParticleBirthRatio ?? true)
            {
                fg.AppendItem(item.ParticleShaderPersistentParticleBirthRatio, "ParticleShaderPersistentParticleBirthRatio");
            }
            if (printMask?.ParticleShaderParticleLifetime ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleLifetime, "ParticleShaderParticleLifetime");
            }
            if (printMask?.ParticleShaderParticleLifetimePlusMinus ?? true)
            {
                fg.AppendItem(item.ParticleShaderParticleLifetimePlusMinus, "ParticleShaderParticleLifetimePlusMinus");
            }
            if (printMask?.ParticleShaderInitialSpeedAlongNormal ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialSpeedAlongNormal, "ParticleShaderInitialSpeedAlongNormal");
            }
            if (printMask?.ParticleShaderAccelerationAlongNormal ?? true)
            {
                fg.AppendItem(item.ParticleShaderAccelerationAlongNormal, "ParticleShaderAccelerationAlongNormal");
            }
            if (printMask?.ParticleShaderInitialVelocity1 ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialVelocity1, "ParticleShaderInitialVelocity1");
            }
            if (printMask?.ParticleShaderInitialVelocity2 ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialVelocity2, "ParticleShaderInitialVelocity2");
            }
            if (printMask?.ParticleShaderInitialVelocity3 ?? true)
            {
                fg.AppendItem(item.ParticleShaderInitialVelocity3, "ParticleShaderInitialVelocity3");
            }
            if (printMask?.ParticleShaderAcceleration1 ?? true)
            {
                fg.AppendItem(item.ParticleShaderAcceleration1, "ParticleShaderAcceleration1");
            }
            if (printMask?.ParticleShaderAcceleration2 ?? true)
            {
                fg.AppendItem(item.ParticleShaderAcceleration2, "ParticleShaderAcceleration2");
            }
            if (printMask?.ParticleShaderAcceleration3 ?? true)
            {
                fg.AppendItem(item.ParticleShaderAcceleration3, "ParticleShaderAcceleration3");
            }
            if (printMask?.ParticleShaderScaleKey1 ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey1, "ParticleShaderScaleKey1");
            }
            if (printMask?.ParticleShaderScaleKey2 ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey2, "ParticleShaderScaleKey2");
            }
            if (printMask?.ParticleShaderScaleKey1Time ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey1Time, "ParticleShaderScaleKey1Time");
            }
            if (printMask?.ParticleShaderScaleKey2Time ?? true)
            {
                fg.AppendItem(item.ParticleShaderScaleKey2Time, "ParticleShaderScaleKey2Time");
            }
            if (printMask?.ColorKey1Color ?? true)
            {
                fg.AppendItem(item.ColorKey1Color, "ColorKey1Color");
            }
            if (printMask?.ColorKey2Color ?? true)
            {
                fg.AppendItem(item.ColorKey2Color, "ColorKey2Color");
            }
            if (printMask?.ColorKey3Color ?? true)
            {
                fg.AppendItem(item.ColorKey3Color, "ColorKey3Color");
            }
            if (printMask?.ColorKey1ColorAlpha ?? true)
            {
                fg.AppendItem(item.ColorKey1ColorAlpha, "ColorKey1ColorAlpha");
            }
            if (printMask?.ColorKey2ColorAlpha ?? true)
            {
                fg.AppendItem(item.ColorKey2ColorAlpha, "ColorKey2ColorAlpha");
            }
            if (printMask?.ColorKey3ColorAlpha ?? true)
            {
                fg.AppendItem(item.ColorKey3ColorAlpha, "ColorKey3ColorAlpha");
            }
            if (printMask?.ColorKey1ColorKeyTime ?? true)
            {
                fg.AppendItem(item.ColorKey1ColorKeyTime, "ColorKey1ColorKeyTime");
            }
            if (printMask?.ColorKey2ColorKeyTime ?? true)
            {
                fg.AppendItem(item.ColorKey2ColorKeyTime, "ColorKey2ColorKeyTime");
            }
            if (printMask?.ColorKey3ColorKeyTime ?? true)
            {
                fg.AppendItem(item.ColorKey3ColorKeyTime, "ColorKey3ColorKeyTime");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IEffectShaderGetter item,
            EffectShader.Mask<bool?> checkMask)
        {
            if (checkMask.FillTexture.HasValue && checkMask.FillTexture.Value != (item.FillTexture != null)) return false;
            if (checkMask.ParticleShaderTexture.HasValue && checkMask.ParticleShaderTexture.Value != (item.ParticleShaderTexture != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IEffectShaderGetter item,
            EffectShader.Mask<bool> mask)
        {
            mask.FillTexture = (item.FillTexture != null);
            mask.ParticleShaderTexture = (item.ParticleShaderTexture != null);
            mask.Flags = true;
            mask.MembraneShaderSourceBlendMode = true;
            mask.MembraneShaderBlendOperation = true;
            mask.MembraneShaderZTestFunction = true;
            mask.FillTextureEffectColor = true;
            mask.FillTextureEffectAlphaFadeInTime = true;
            mask.FillTextureEffectFullAlphaTime = true;
            mask.FillTextureEffectAlphaFadeOutTime = true;
            mask.FillTextureEffectPersistentAlphaRatio = true;
            mask.FillTextureEffectAlphaPulseAmplitude = true;
            mask.FillTextureEffectAlphaPulseFrequency = true;
            mask.FillTextureEffectTextureAnimationSpeedU = true;
            mask.FillTextureEffectTextureAnimationSpeedV = true;
            mask.EdgeEffectFallOff = true;
            mask.EdgeEffectColor = true;
            mask.EdgeEffectAlphaFadeInTime = true;
            mask.EdgeEffectFullAlphaTime = true;
            mask.EdgeEffectAlphaFadeOutTime = true;
            mask.EdgeEffectPersistentAlphaRatio = true;
            mask.EdgeEffectAlphaPulseAmplitude = true;
            mask.EdgeEffectAlphaPulseFrequency = true;
            mask.FillTextureEffectFullAlphaRatio = true;
            mask.EdgeEffectFullAlphaRatio = true;
            mask.MembraneShaderDestBlendMode = true;
            mask.ParticleShaderSourceBlendMode = true;
            mask.ParticleShaderBlendOperation = true;
            mask.ParticleShaderZTestFunction = true;
            mask.ParticleShaderDestBlendMode = true;
            mask.ParticleShaderParticleBirthRampUpTime = true;
            mask.ParticleShaderFullParticleBirthTime = true;
            mask.ParticleShaderParticleBirthRampDownTime = true;
            mask.ParticleShaderFullParticleBirthRatio = true;
            mask.ParticleShaderPersistentParticleBirthRatio = true;
            mask.ParticleShaderParticleLifetime = true;
            mask.ParticleShaderParticleLifetimePlusMinus = true;
            mask.ParticleShaderInitialSpeedAlongNormal = true;
            mask.ParticleShaderAccelerationAlongNormal = true;
            mask.ParticleShaderInitialVelocity1 = true;
            mask.ParticleShaderInitialVelocity2 = true;
            mask.ParticleShaderInitialVelocity3 = true;
            mask.ParticleShaderAcceleration1 = true;
            mask.ParticleShaderAcceleration2 = true;
            mask.ParticleShaderAcceleration3 = true;
            mask.ParticleShaderScaleKey1 = true;
            mask.ParticleShaderScaleKey2 = true;
            mask.ParticleShaderScaleKey1Time = true;
            mask.ParticleShaderScaleKey2Time = true;
            mask.ColorKey1Color = true;
            mask.ColorKey2Color = true;
            mask.ColorKey3Color = true;
            mask.ColorKey1ColorAlpha = true;
            mask.ColorKey2ColorAlpha = true;
            mask.ColorKey3ColorAlpha = true;
            mask.ColorKey1ColorKeyTime = true;
            mask.ColorKey2ColorKeyTime = true;
            mask.ColorKey3ColorKeyTime = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static EffectShader_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new EffectShader_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectShaderGetter? lhs,
            IEffectShaderGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.FillTexture, rhs.FillTexture)) return false;
            if (!string.Equals(lhs.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.MembraneShaderSourceBlendMode != rhs.MembraneShaderSourceBlendMode) return false;
            if (lhs.MembraneShaderBlendOperation != rhs.MembraneShaderBlendOperation) return false;
            if (lhs.MembraneShaderZTestFunction != rhs.MembraneShaderZTestFunction) return false;
            if (!lhs.FillTextureEffectColor.ColorOnlyEquals(rhs.FillTextureEffectColor)) return false;
            if (!lhs.FillTextureEffectAlphaFadeInTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeInTime)) return false;
            if (!lhs.FillTextureEffectFullAlphaTime.EqualsWithin(rhs.FillTextureEffectFullAlphaTime)) return false;
            if (!lhs.FillTextureEffectAlphaFadeOutTime.EqualsWithin(rhs.FillTextureEffectAlphaFadeOutTime)) return false;
            if (!lhs.FillTextureEffectPersistentAlphaRatio.EqualsWithin(rhs.FillTextureEffectPersistentAlphaRatio)) return false;
            if (!lhs.FillTextureEffectAlphaPulseAmplitude.EqualsWithin(rhs.FillTextureEffectAlphaPulseAmplitude)) return false;
            if (!lhs.FillTextureEffectAlphaPulseFrequency.EqualsWithin(rhs.FillTextureEffectAlphaPulseFrequency)) return false;
            if (!lhs.FillTextureEffectTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedU)) return false;
            if (!lhs.FillTextureEffectTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureEffectTextureAnimationSpeedV)) return false;
            if (!lhs.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff)) return false;
            if (!lhs.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor)) return false;
            if (!lhs.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime)) return false;
            if (!lhs.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime)) return false;
            if (!lhs.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime)) return false;
            if (!lhs.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio)) return false;
            if (!lhs.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            if (!lhs.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency)) return false;
            if (!lhs.FillTextureEffectFullAlphaRatio.EqualsWithin(rhs.FillTextureEffectFullAlphaRatio)) return false;
            if (!lhs.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio)) return false;
            if (lhs.MembraneShaderDestBlendMode != rhs.MembraneShaderDestBlendMode) return false;
            if (lhs.ParticleShaderSourceBlendMode != rhs.ParticleShaderSourceBlendMode) return false;
            if (lhs.ParticleShaderBlendOperation != rhs.ParticleShaderBlendOperation) return false;
            if (lhs.ParticleShaderZTestFunction != rhs.ParticleShaderZTestFunction) return false;
            if (lhs.ParticleShaderDestBlendMode != rhs.ParticleShaderDestBlendMode) return false;
            if (!lhs.ParticleShaderParticleBirthRampUpTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampUpTime)) return false;
            if (!lhs.ParticleShaderFullParticleBirthTime.EqualsWithin(rhs.ParticleShaderFullParticleBirthTime)) return false;
            if (!lhs.ParticleShaderParticleBirthRampDownTime.EqualsWithin(rhs.ParticleShaderParticleBirthRampDownTime)) return false;
            if (!lhs.ParticleShaderFullParticleBirthRatio.EqualsWithin(rhs.ParticleShaderFullParticleBirthRatio)) return false;
            if (!lhs.ParticleShaderPersistentParticleBirthRatio.EqualsWithin(rhs.ParticleShaderPersistentParticleBirthRatio)) return false;
            if (!lhs.ParticleShaderParticleLifetime.EqualsWithin(rhs.ParticleShaderParticleLifetime)) return false;
            if (!lhs.ParticleShaderParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleShaderParticleLifetimePlusMinus)) return false;
            if (!lhs.ParticleShaderInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleShaderInitialSpeedAlongNormal)) return false;
            if (!lhs.ParticleShaderAccelerationAlongNormal.EqualsWithin(rhs.ParticleShaderAccelerationAlongNormal)) return false;
            if (!lhs.ParticleShaderInitialVelocity1.EqualsWithin(rhs.ParticleShaderInitialVelocity1)) return false;
            if (!lhs.ParticleShaderInitialVelocity2.EqualsWithin(rhs.ParticleShaderInitialVelocity2)) return false;
            if (!lhs.ParticleShaderInitialVelocity3.EqualsWithin(rhs.ParticleShaderInitialVelocity3)) return false;
            if (!lhs.ParticleShaderAcceleration1.EqualsWithin(rhs.ParticleShaderAcceleration1)) return false;
            if (!lhs.ParticleShaderAcceleration2.EqualsWithin(rhs.ParticleShaderAcceleration2)) return false;
            if (!lhs.ParticleShaderAcceleration3.EqualsWithin(rhs.ParticleShaderAcceleration3)) return false;
            if (!lhs.ParticleShaderScaleKey1.EqualsWithin(rhs.ParticleShaderScaleKey1)) return false;
            if (!lhs.ParticleShaderScaleKey2.EqualsWithin(rhs.ParticleShaderScaleKey2)) return false;
            if (!lhs.ParticleShaderScaleKey1Time.EqualsWithin(rhs.ParticleShaderScaleKey1Time)) return false;
            if (!lhs.ParticleShaderScaleKey2Time.EqualsWithin(rhs.ParticleShaderScaleKey2Time)) return false;
            if (!lhs.ColorKey1Color.ColorOnlyEquals(rhs.ColorKey1Color)) return false;
            if (!lhs.ColorKey2Color.ColorOnlyEquals(rhs.ColorKey2Color)) return false;
            if (!lhs.ColorKey3Color.ColorOnlyEquals(rhs.ColorKey3Color)) return false;
            if (!lhs.ColorKey1ColorAlpha.EqualsWithin(rhs.ColorKey1ColorAlpha)) return false;
            if (!lhs.ColorKey2ColorAlpha.EqualsWithin(rhs.ColorKey2ColorAlpha)) return false;
            if (!lhs.ColorKey3ColorAlpha.EqualsWithin(rhs.ColorKey3ColorAlpha)) return false;
            if (!lhs.ColorKey1ColorKeyTime.EqualsWithin(rhs.ColorKey1ColorKeyTime)) return false;
            if (!lhs.ColorKey2ColorKeyTime.EqualsWithin(rhs.ColorKey2ColorKeyTime)) return false;
            if (!lhs.ColorKey3ColorKeyTime.EqualsWithin(rhs.ColorKey3ColorKeyTime)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter);
        }
        
        public virtual int GetHashCode(IEffectShaderGetter item)
        {
            int ret = 0;
            if (item.FillTexture.TryGet(out var FillTextureitem))
            {
                ret = HashHelper.GetHashCode(FillTextureitem).CombineHashCode(ret);
            }
            if (item.ParticleShaderTexture.TryGet(out var ParticleShaderTextureitem))
            {
                ret = HashHelper.GetHashCode(ParticleShaderTextureitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MembraneShaderSourceBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MembraneShaderBlendOperation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MembraneShaderZTestFunction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectAlphaFadeInTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectFullAlphaTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectAlphaFadeOutTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectPersistentAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectAlphaPulseAmplitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectAlphaPulseFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectTextureAnimationSpeedU).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectTextureAnimationSpeedV).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectFallOff).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectColor).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectAlphaFadeInTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectFullAlphaTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectAlphaFadeOutTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectPersistentAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectAlphaPulseAmplitude).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectAlphaPulseFrequency).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.FillTextureEffectFullAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EdgeEffectFullAlphaRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MembraneShaderDestBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderSourceBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderBlendOperation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderZTestFunction).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderDestBlendMode).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderParticleBirthRampUpTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderFullParticleBirthTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderParticleBirthRampDownTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderFullParticleBirthRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderPersistentParticleBirthRatio).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderParticleLifetime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderParticleLifetimePlusMinus).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderInitialSpeedAlongNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderAccelerationAlongNormal).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderInitialVelocity1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderInitialVelocity2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderInitialVelocity3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderAcceleration1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderAcceleration2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderAcceleration3).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderScaleKey1).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderScaleKey2).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderScaleKey1Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ParticleShaderScaleKey2Time).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey1Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey2Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey3Color).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey1ColorAlpha).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey2ColorAlpha).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey3ColorAlpha).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey1ColorKeyTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey2ColorKeyTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ColorKey3ColorKeyTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return EffectShader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IEffectShaderGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(EffectShader obj, EffectShader rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new EffectShader(getNextFormKey());
            ret.DeepCopyIn((EffectShader)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (EffectShader)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class EffectShaderSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly EffectShaderSetterTranslationCommon Instance = new EffectShaderSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IEffectShaderInternal item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTexture) ?? true))
            {
                item.FillTexture = rhs.FillTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderTexture) ?? true))
            {
                item.ParticleShaderTexture = rhs.ParticleShaderTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode) ?? true))
            {
                item.MembraneShaderSourceBlendMode = rhs.MembraneShaderSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderBlendOperation) ?? true))
            {
                item.MembraneShaderBlendOperation = rhs.MembraneShaderBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderZTestFunction) ?? true))
            {
                item.MembraneShaderZTestFunction = rhs.MembraneShaderZTestFunction;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectColor) ?? true))
            {
                item.FillTextureEffectColor = rhs.FillTextureEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime) ?? true))
            {
                item.FillTextureEffectAlphaFadeInTime = rhs.FillTextureEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime) ?? true))
            {
                item.FillTextureEffectFullAlphaTime = rhs.FillTextureEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime) ?? true))
            {
                item.FillTextureEffectAlphaFadeOutTime = rhs.FillTextureEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio) ?? true))
            {
                item.FillTextureEffectPersistentAlphaRatio = rhs.FillTextureEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude) ?? true))
            {
                item.FillTextureEffectAlphaPulseAmplitude = rhs.FillTextureEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency) ?? true))
            {
                item.FillTextureEffectAlphaPulseFrequency = rhs.FillTextureEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU) ?? true))
            {
                item.FillTextureEffectTextureAnimationSpeedU = rhs.FillTextureEffectTextureAnimationSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV) ?? true))
            {
                item.FillTextureEffectTextureAnimationSpeedV = rhs.FillTextureEffectTextureAnimationSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                item.EdgeEffectFallOff = rhs.EdgeEffectFallOff;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                item.EdgeEffectColor = rhs.EdgeEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                item.EdgeEffectAlphaFadeInTime = rhs.EdgeEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                item.EdgeEffectFullAlphaTime = rhs.EdgeEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                item.EdgeEffectAlphaFadeOutTime = rhs.EdgeEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                item.EdgeEffectPersistentAlphaRatio = rhs.EdgeEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                item.EdgeEffectAlphaPulseAmplitude = rhs.EdgeEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                item.EdgeEffectAlphaPulseFrequency = rhs.EdgeEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio) ?? true))
            {
                item.FillTextureEffectFullAlphaRatio = rhs.FillTextureEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                item.EdgeEffectFullAlphaRatio = rhs.EdgeEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode) ?? true))
            {
                item.MembraneShaderDestBlendMode = rhs.MembraneShaderDestBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode) ?? true))
            {
                item.ParticleShaderSourceBlendMode = rhs.ParticleShaderSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderBlendOperation) ?? true))
            {
                item.ParticleShaderBlendOperation = rhs.ParticleShaderBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderZTestFunction) ?? true))
            {
                item.ParticleShaderZTestFunction = rhs.ParticleShaderZTestFunction;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode) ?? true))
            {
                item.ParticleShaderDestBlendMode = rhs.ParticleShaderDestBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime) ?? true))
            {
                item.ParticleShaderParticleBirthRampUpTime = rhs.ParticleShaderParticleBirthRampUpTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime) ?? true))
            {
                item.ParticleShaderFullParticleBirthTime = rhs.ParticleShaderFullParticleBirthTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime) ?? true))
            {
                item.ParticleShaderParticleBirthRampDownTime = rhs.ParticleShaderParticleBirthRampDownTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio) ?? true))
            {
                item.ParticleShaderFullParticleBirthRatio = rhs.ParticleShaderFullParticleBirthRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio) ?? true))
            {
                item.ParticleShaderPersistentParticleBirthRatio = rhs.ParticleShaderPersistentParticleBirthRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime) ?? true))
            {
                item.ParticleShaderParticleLifetime = rhs.ParticleShaderParticleLifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus) ?? true))
            {
                item.ParticleShaderParticleLifetimePlusMinus = rhs.ParticleShaderParticleLifetimePlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal) ?? true))
            {
                item.ParticleShaderInitialSpeedAlongNormal = rhs.ParticleShaderInitialSpeedAlongNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal) ?? true))
            {
                item.ParticleShaderAccelerationAlongNormal = rhs.ParticleShaderAccelerationAlongNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1) ?? true))
            {
                item.ParticleShaderInitialVelocity1 = rhs.ParticleShaderInitialVelocity1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2) ?? true))
            {
                item.ParticleShaderInitialVelocity2 = rhs.ParticleShaderInitialVelocity2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3) ?? true))
            {
                item.ParticleShaderInitialVelocity3 = rhs.ParticleShaderInitialVelocity3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration1) ?? true))
            {
                item.ParticleShaderAcceleration1 = rhs.ParticleShaderAcceleration1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration2) ?? true))
            {
                item.ParticleShaderAcceleration2 = rhs.ParticleShaderAcceleration2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration3) ?? true))
            {
                item.ParticleShaderAcceleration3 = rhs.ParticleShaderAcceleration3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey1) ?? true))
            {
                item.ParticleShaderScaleKey1 = rhs.ParticleShaderScaleKey1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey2) ?? true))
            {
                item.ParticleShaderScaleKey2 = rhs.ParticleShaderScaleKey2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time) ?? true))
            {
                item.ParticleShaderScaleKey1Time = rhs.ParticleShaderScaleKey1Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time) ?? true))
            {
                item.ParticleShaderScaleKey2Time = rhs.ParticleShaderScaleKey2Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Color) ?? true))
            {
                item.ColorKey1Color = rhs.ColorKey1Color;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Color) ?? true))
            {
                item.ColorKey2Color = rhs.ColorKey2Color;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Color) ?? true))
            {
                item.ColorKey3Color = rhs.ColorKey3Color;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1ColorAlpha) ?? true))
            {
                item.ColorKey1ColorAlpha = rhs.ColorKey1ColorAlpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2ColorAlpha) ?? true))
            {
                item.ColorKey2ColorAlpha = rhs.ColorKey2ColorAlpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3ColorAlpha) ?? true))
            {
                item.ColorKey3ColorAlpha = rhs.ColorKey3ColorAlpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime) ?? true))
            {
                item.ColorKey1ColorKeyTime = rhs.ColorKey1ColorKeyTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime) ?? true))
            {
                item.ColorKey2ColorKeyTime = rhs.ColorKey2ColorKeyTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime) ?? true))
            {
                item.ColorKey3ColorKeyTime = rhs.ColorKey3ColorKeyTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class EffectShader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static EffectShader_Registration Registration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return EffectShaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectShaderXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static EffectShaderXmlWriteTranslation Instance = new EffectShaderXmlWriteTranslation();

        public static void WriteToNodeXml(
            IEffectShaderGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.FillTexture != null)
                && (translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FillTexture),
                    item: item.FillTexture,
                    fieldIndex: (int)EffectShader_FieldIndex.FillTexture,
                    errorMask: errorMask);
            }
            if ((item.ParticleShaderTexture != null)
                && (translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderTexture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ParticleShaderTexture),
                    item: item.ParticleShaderTexture,
                    fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderTexture,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<EffectShader.Flag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)EffectShader_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode) ?? true))
                {
                    EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderSourceBlendMode),
                        item: item.MembraneShaderSourceBlendMode,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderBlendOperation) ?? true))
                {
                    EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderBlendOperation),
                        item: item.MembraneShaderBlendOperation,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderBlendOperation,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderZTestFunction) ?? true))
                {
                    EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderZTestFunction),
                        item: item.MembraneShaderZTestFunction,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderZTestFunction,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectColor) ?? true))
                {
                    ColorXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectColor),
                        item: item.FillTextureEffectColor,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectColor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaFadeInTime),
                        item: item.FillTextureEffectAlphaFadeInTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectFullAlphaTime),
                        item: item.FillTextureEffectFullAlphaTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaFadeOutTime),
                        item: item.FillTextureEffectAlphaFadeOutTime,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectPersistentAlphaRatio),
                        item: item.FillTextureEffectPersistentAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaPulseAmplitude),
                        item: item.FillTextureEffectAlphaPulseAmplitude,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectAlphaPulseFrequency),
                        item: item.FillTextureEffectAlphaPulseFrequency,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectTextureAnimationSpeedU),
                        item: item.FillTextureEffectTextureAnimationSpeedU,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectTextureAnimationSpeedV),
                        item: item.FillTextureEffectTextureAnimationSpeedV,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectFallOff),
                        item: item.EdgeEffectFallOff,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFallOff,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
                {
                    ColorXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectColor),
                        item: item.EdgeEffectColor,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectColor,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaFadeInTime),
                        item: item.EdgeEffectAlphaFadeInTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectFullAlphaTime),
                        item: item.EdgeEffectFullAlphaTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaFadeOutTime),
                        item: item.EdgeEffectAlphaFadeOutTime,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectPersistentAlphaRatio),
                        item: item.EdgeEffectPersistentAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaPulseAmplitude),
                        item: item.EdgeEffectAlphaPulseAmplitude,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectAlphaPulseFrequency),
                        item: item.EdgeEffectAlphaPulseFrequency,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.FillTextureEffectFullAlphaRatio),
                        item: item.FillTextureEffectFullAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EdgeEffectFullAlphaRatio),
                        item: item.EdgeEffectFullAlphaRatio,
                        fieldIndex: (int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode) ?? true))
                {
                    EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        node: node,
                        name: nameof(item.MembraneShaderDestBlendMode),
                        item: item.MembraneShaderDestBlendMode,
                        fieldIndex: (int)EffectShader_FieldIndex.MembraneShaderDestBlendMode,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderSourceBlendMode),
                            item: item.ParticleShaderSourceBlendMode,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderBlendOperation) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderBlendOperation),
                            item: item.ParticleShaderBlendOperation,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderBlendOperation,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderZTestFunction) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderZTestFunction),
                            item: item.ParticleShaderZTestFunction,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderZTestFunction,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode) ?? true))
                    {
                        EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderDestBlendMode),
                            item: item.ParticleShaderDestBlendMode,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderDestBlendMode,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleBirthRampUpTime),
                            item: item.ParticleShaderParticleBirthRampUpTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderFullParticleBirthTime),
                            item: item.ParticleShaderFullParticleBirthTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleBirthRampDownTime),
                            item: item.ParticleShaderParticleBirthRampDownTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderFullParticleBirthRatio),
                            item: item.ParticleShaderFullParticleBirthRatio,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderPersistentParticleBirthRatio),
                            item: item.ParticleShaderPersistentParticleBirthRatio,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleLifetime),
                            item: item.ParticleShaderParticleLifetime,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleLifetime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderParticleLifetimePlusMinus),
                            item: item.ParticleShaderParticleLifetimePlusMinus,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialSpeedAlongNormal),
                            item: item.ParticleShaderInitialSpeedAlongNormal,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAccelerationAlongNormal),
                            item: item.ParticleShaderAccelerationAlongNormal,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialVelocity1),
                            item: item.ParticleShaderInitialVelocity1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialVelocity2),
                            item: item.ParticleShaderInitialVelocity2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderInitialVelocity3),
                            item: item.ParticleShaderInitialVelocity3,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration1) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAcceleration1),
                            item: item.ParticleShaderAcceleration1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration1,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration2) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAcceleration2),
                            item: item.ParticleShaderAcceleration2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration2,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderAcceleration3) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderAcceleration3),
                            item: item.ParticleShaderAcceleration3,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderAcceleration3,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey1) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey1),
                            item: item.ParticleShaderScaleKey1,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey1,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey2) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey2),
                            item: item.ParticleShaderScaleKey2,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey2,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey1Time),
                            item: item.ParticleShaderScaleKey1Time,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ParticleShaderScaleKey2Time),
                            item: item.ParticleShaderScaleKey2Time,
                            fieldIndex: (int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Color) ?? true))
                    {
                        ColorXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey1Color),
                            item: item.ColorKey1Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1Color,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Color) ?? true))
                    {
                        ColorXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey2Color),
                            item: item.ColorKey2Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2Color,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Color) ?? true))
                    {
                        ColorXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey3Color),
                            item: item.ColorKey3Color,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3Color,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1ColorAlpha) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey1ColorAlpha),
                            item: item.ColorKey1ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1ColorAlpha,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2ColorAlpha) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey2ColorAlpha),
                            item: item.ColorKey2ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2ColorAlpha,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3ColorAlpha) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey3ColorAlpha),
                            item: item.ColorKey3ColorAlpha,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3ColorAlpha,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey1ColorKeyTime),
                            item: item.ColorKey1ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey1ColorKeyTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey2ColorKeyTime),
                            item: item.ColorKey2ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey2ColorKeyTime,
                            errorMask: errorMask);
                    }
                    if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime) ?? true))
                    {
                        FloatXmlTranslation.Instance.Write(
                            node: node,
                            name: nameof(item.ColorKey3ColorKeyTime),
                            item: item.ColorKey3ColorKeyTime,
                            fieldIndex: (int)EffectShader_FieldIndex.ColorKey3ColorKeyTime,
                            errorMask: errorMask);
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)EffectShader_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<EffectShader.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)EffectShader_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.EffectShader");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.EffectShader");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEffectShaderGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEffectShaderGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IEffectShaderGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class EffectShaderXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static EffectShaderXmlCreateTranslation Instance = new EffectShaderXmlCreateTranslation();

        public static void FillPublicXml(
            IEffectShaderInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    EffectShaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IEffectShaderInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "FillTexture":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTexture);
                    try
                    {
                        item.FillTexture = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderTexture":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderTexture);
                    try
                    {
                        item.ParticleShaderTexture = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<EffectShader.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= EffectShader.DATADataType.Has;
                    break;
                case "MembraneShaderSourceBlendMode":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderSourceBlendMode);
                    try
                    {
                        item.MembraneShaderSourceBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderBlendOperation":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderBlendOperation);
                    try
                    {
                        item.MembraneShaderBlendOperation = EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderZTestFunction":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderZTestFunction);
                    try
                    {
                        item.MembraneShaderZTestFunction = EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectColor":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectColor);
                    try
                    {
                        item.FillTextureEffectColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaFadeInTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeInTime);
                    try
                    {
                        item.FillTextureEffectAlphaFadeInTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectFullAlphaTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaTime);
                    try
                    {
                        item.FillTextureEffectFullAlphaTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaFadeOutTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaFadeOutTime);
                    try
                    {
                        item.FillTextureEffectAlphaFadeOutTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectPersistentAlphaRatio":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectPersistentAlphaRatio);
                    try
                    {
                        item.FillTextureEffectPersistentAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaPulseAmplitude":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseAmplitude);
                    try
                    {
                        item.FillTextureEffectAlphaPulseAmplitude = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectAlphaPulseFrequency":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectAlphaPulseFrequency);
                    try
                    {
                        item.FillTextureEffectAlphaPulseFrequency = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectTextureAnimationSpeedU":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedU);
                    try
                    {
                        item.FillTextureEffectTextureAnimationSpeedU = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectTextureAnimationSpeedV":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectTextureAnimationSpeedV);
                    try
                    {
                        item.FillTextureEffectTextureAnimationSpeedV = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFallOff":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFallOff);
                    try
                    {
                        item.EdgeEffectFallOff = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectColor":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectColor);
                    try
                    {
                        item.EdgeEffectColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaFadeInTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime);
                    try
                    {
                        item.EdgeEffectAlphaFadeInTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFullAlphaTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime);
                    try
                    {
                        item.EdgeEffectFullAlphaTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaFadeOutTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime);
                    try
                    {
                        item.EdgeEffectAlphaFadeOutTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectPersistentAlphaRatio":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio);
                    try
                    {
                        item.EdgeEffectPersistentAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaPulseAmplitude":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude);
                    try
                    {
                        item.EdgeEffectAlphaPulseAmplitude = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectAlphaPulseFrequency":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency);
                    try
                    {
                        item.EdgeEffectAlphaPulseFrequency = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FillTextureEffectFullAlphaRatio":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.FillTextureEffectFullAlphaRatio);
                    try
                    {
                        item.FillTextureEffectFullAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EdgeEffectFullAlphaRatio":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio);
                    try
                    {
                        item.EdgeEffectFullAlphaRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MembraneShaderDestBlendMode":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.MembraneShaderDestBlendMode);
                    try
                    {
                        item.MembraneShaderDestBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderSourceBlendMode":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderSourceBlendMode);
                    try
                    {
                        item.ParticleShaderSourceBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~EffectShader.DATADataType.Break0;
                    break;
                case "ParticleShaderBlendOperation":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderBlendOperation);
                    try
                    {
                        item.ParticleShaderBlendOperation = EnumXmlTranslation<EffectShader.BlendOperation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderZTestFunction":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderZTestFunction);
                    try
                    {
                        item.ParticleShaderZTestFunction = EnumXmlTranslation<EffectShader.ZTestFunction>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderDestBlendMode":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderDestBlendMode);
                    try
                    {
                        item.ParticleShaderDestBlendMode = EnumXmlTranslation<EffectShader.SourceBlendMode>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleBirthRampUpTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampUpTime);
                    try
                    {
                        item.ParticleShaderParticleBirthRampUpTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderFullParticleBirthTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthTime);
                    try
                    {
                        item.ParticleShaderFullParticleBirthTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleBirthRampDownTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleBirthRampDownTime);
                    try
                    {
                        item.ParticleShaderParticleBirthRampDownTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderFullParticleBirthRatio":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderFullParticleBirthRatio);
                    try
                    {
                        item.ParticleShaderFullParticleBirthRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderPersistentParticleBirthRatio":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderPersistentParticleBirthRatio);
                    try
                    {
                        item.ParticleShaderPersistentParticleBirthRatio = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleLifetime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetime);
                    try
                    {
                        item.ParticleShaderParticleLifetime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderParticleLifetimePlusMinus":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderParticleLifetimePlusMinus);
                    try
                    {
                        item.ParticleShaderParticleLifetimePlusMinus = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialSpeedAlongNormal":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialSpeedAlongNormal);
                    try
                    {
                        item.ParticleShaderInitialSpeedAlongNormal = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAccelerationAlongNormal":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAccelerationAlongNormal);
                    try
                    {
                        item.ParticleShaderAccelerationAlongNormal = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity1":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity1);
                    try
                    {
                        item.ParticleShaderInitialVelocity1 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity2":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity2);
                    try
                    {
                        item.ParticleShaderInitialVelocity2 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderInitialVelocity3":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderInitialVelocity3);
                    try
                    {
                        item.ParticleShaderInitialVelocity3 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration1":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration1);
                    try
                    {
                        item.ParticleShaderAcceleration1 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration2":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration2);
                    try
                    {
                        item.ParticleShaderAcceleration2 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderAcceleration3":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderAcceleration3);
                    try
                    {
                        item.ParticleShaderAcceleration3 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey1":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1);
                    try
                    {
                        item.ParticleShaderScaleKey1 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey2":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2);
                    try
                    {
                        item.ParticleShaderScaleKey2 = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey1Time":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey1Time);
                    try
                    {
                        item.ParticleShaderScaleKey1Time = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ParticleShaderScaleKey2Time":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ParticleShaderScaleKey2Time);
                    try
                    {
                        item.ParticleShaderScaleKey2Time = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1Color":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1Color);
                    try
                    {
                        item.ColorKey1Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2Color":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2Color);
                    try
                    {
                        item.ColorKey2Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3Color":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3Color);
                    try
                    {
                        item.ColorKey3Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1ColorAlpha":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorAlpha);
                    try
                    {
                        item.ColorKey1ColorAlpha = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2ColorAlpha":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorAlpha);
                    try
                    {
                        item.ColorKey2ColorAlpha = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3ColorAlpha":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorAlpha);
                    try
                    {
                        item.ColorKey3ColorAlpha = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey1ColorKeyTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey1ColorKeyTime);
                    try
                    {
                        item.ColorKey1ColorKeyTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey2ColorKeyTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey2ColorKeyTime);
                    try
                    {
                        item.ColorKey2ColorKeyTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ColorKey3ColorKeyTime":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                    try
                    {
                        item.ColorKey3ColorKeyTime = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)EffectShader_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<EffectShader.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class EffectShaderXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IEffectShaderGetter item,
            XElement node,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IEffectShaderGetter item,
            string path,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IEffectShaderGetter item,
            Stream stream,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectShaderBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static EffectShaderBinaryWriteTranslation Instance = new EffectShaderBinaryWriteTranslation();

        public static void WriteEmbedded(
            IEffectShaderGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IEffectShaderGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FillTexture,
                header: recordTypeConverter.ConvertToCustom(EffectShader_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParticleShaderTexture,
                header: recordTypeConverter.ConvertToCustom(EffectShader_Registration.ICO2_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(EffectShader_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.Flag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        writer,
                        item.MembraneShaderSourceBlendMode,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Write(
                        writer,
                        item.MembraneShaderBlendOperation,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Write(
                        writer,
                        item.MembraneShaderZTestFunction,
                        length: 4);
                    Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectColor,
                        extraByte: true);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaFadeInTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectFullAlphaTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaFadeOutTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectPersistentAlphaRatio);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaPulseAmplitude);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectAlphaPulseFrequency);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectTextureAnimationSpeedU);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectTextureAnimationSpeedV);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectFallOff);
                    Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectColor,
                        extraByte: true);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaFadeInTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectFullAlphaTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaFadeOutTime);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectPersistentAlphaRatio);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaPulseAmplitude);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectAlphaPulseFrequency);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FillTextureEffectFullAlphaRatio);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EdgeEffectFullAlphaRatio);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                        writer,
                        item.MembraneShaderDestBlendMode,
                        length: 4);
                    if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0))
                    {
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            writer,
                            item.ParticleShaderSourceBlendMode,
                            length: 4);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.BlendOperation>.Instance.Write(
                            writer,
                            item.ParticleShaderBlendOperation,
                            length: 4);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.ZTestFunction>.Instance.Write(
                            writer,
                            item.ParticleShaderZTestFunction,
                            length: 4);
                        Mutagen.Bethesda.Binary.EnumBinaryTranslation<EffectShader.SourceBlendMode>.Instance.Write(
                            writer,
                            item.ParticleShaderDestBlendMode,
                            length: 4);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleBirthRampUpTime);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderFullParticleBirthTime);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleBirthRampDownTime);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderFullParticleBirthRatio);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderPersistentParticleBirthRatio);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleLifetime);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderParticleLifetimePlusMinus);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialSpeedAlongNormal);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAccelerationAlongNormal);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialVelocity1);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialVelocity2);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderInitialVelocity3);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAcceleration1);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAcceleration2);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderAcceleration3);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey1);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey2);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey1Time);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ParticleShaderScaleKey2Time);
                        Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey1Color,
                            extraByte: true);
                        Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey2Color,
                            extraByte: true);
                        Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey3Color,
                            extraByte: true);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey1ColorAlpha);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey2ColorAlpha);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey3ColorAlpha);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey1ColorKeyTime);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey2ColorKeyTime);
                        Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.ColorKey3ColorKeyTime);
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IEffectShaderGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: EffectShader_Registration.EFSH_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class EffectShaderBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static EffectShaderBinaryCreateTranslation Instance = new EffectShaderBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class EffectShaderBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class EffectShaderBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IEffectShaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static EffectShader_Registration Registration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IEffectShaderGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => EffectShaderXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((EffectShaderXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region FillTexture
        private int? _FillTextureLocation;
        public String? FillTexture => _FillTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _FillTextureLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region ParticleShaderTexture
        private int? _ParticleShaderTextureLocation;
        public String? ParticleShaderTexture => _ParticleShaderTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _ParticleShaderTextureLocation.Value, _package.Meta)) : default(string?);
        #endregion
        private int? _DATALocation;
        public EffectShader.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public EffectShader.Flag Flags => _Flags_IsSet ? (EffectShader.Flag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region MembraneShaderSourceBlendMode
        private int _MembraneShaderSourceBlendModeLocation => _DATALocation!.Value + 0x4;
        private bool _MembraneShaderSourceBlendMode_IsSet => _DATALocation.HasValue;
        public EffectShader.SourceBlendMode MembraneShaderSourceBlendMode => _MembraneShaderSourceBlendMode_IsSet ? (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MembraneShaderSourceBlendModeLocation, 4)) : default;
        #endregion
        #region MembraneShaderBlendOperation
        private int _MembraneShaderBlendOperationLocation => _DATALocation!.Value + 0x8;
        private bool _MembraneShaderBlendOperation_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendOperation MembraneShaderBlendOperation => _MembraneShaderBlendOperation_IsSet ? (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MembraneShaderBlendOperationLocation, 4)) : default;
        #endregion
        #region MembraneShaderZTestFunction
        private int _MembraneShaderZTestFunctionLocation => _DATALocation!.Value + 0xC;
        private bool _MembraneShaderZTestFunction_IsSet => _DATALocation.HasValue;
        public EffectShader.ZTestFunction MembraneShaderZTestFunction => _MembraneShaderZTestFunction_IsSet ? (EffectShader.ZTestFunction)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MembraneShaderZTestFunctionLocation, 4)) : default;
        #endregion
        #region FillTextureEffectColor
        private int _FillTextureEffectColorLocation => _DATALocation!.Value + 0x10;
        private bool _FillTextureEffectColor_IsSet => _DATALocation.HasValue;
        public Color FillTextureEffectColor => _FillTextureEffectColor_IsSet ? _data.Span.Slice(_FillTextureEffectColorLocation, 4).ReadColor() : default;
        #endregion
        #region FillTextureEffectAlphaFadeInTime
        private int _FillTextureEffectAlphaFadeInTimeLocation => _DATALocation!.Value + 0x14;
        private bool _FillTextureEffectAlphaFadeInTime_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectAlphaFadeInTime => _FillTextureEffectAlphaFadeInTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectAlphaFadeInTimeLocation, 4)) : default;
        #endregion
        #region FillTextureEffectFullAlphaTime
        private int _FillTextureEffectFullAlphaTimeLocation => _DATALocation!.Value + 0x18;
        private bool _FillTextureEffectFullAlphaTime_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectFullAlphaTime => _FillTextureEffectFullAlphaTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectFullAlphaTimeLocation, 4)) : default;
        #endregion
        #region FillTextureEffectAlphaFadeOutTime
        private int _FillTextureEffectAlphaFadeOutTimeLocation => _DATALocation!.Value + 0x1C;
        private bool _FillTextureEffectAlphaFadeOutTime_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectAlphaFadeOutTime => _FillTextureEffectAlphaFadeOutTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectAlphaFadeOutTimeLocation, 4)) : default;
        #endregion
        #region FillTextureEffectPersistentAlphaRatio
        private int _FillTextureEffectPersistentAlphaRatioLocation => _DATALocation!.Value + 0x20;
        private bool _FillTextureEffectPersistentAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectPersistentAlphaRatio => _FillTextureEffectPersistentAlphaRatio_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectPersistentAlphaRatioLocation, 4)) : default;
        #endregion
        #region FillTextureEffectAlphaPulseAmplitude
        private int _FillTextureEffectAlphaPulseAmplitudeLocation => _DATALocation!.Value + 0x24;
        private bool _FillTextureEffectAlphaPulseAmplitude_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectAlphaPulseAmplitude => _FillTextureEffectAlphaPulseAmplitude_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectAlphaPulseAmplitudeLocation, 4)) : default;
        #endregion
        #region FillTextureEffectAlphaPulseFrequency
        private int _FillTextureEffectAlphaPulseFrequencyLocation => _DATALocation!.Value + 0x28;
        private bool _FillTextureEffectAlphaPulseFrequency_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectAlphaPulseFrequency => _FillTextureEffectAlphaPulseFrequency_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectAlphaPulseFrequencyLocation, 4)) : default;
        #endregion
        #region FillTextureEffectTextureAnimationSpeedU
        private int _FillTextureEffectTextureAnimationSpeedULocation => _DATALocation!.Value + 0x2C;
        private bool _FillTextureEffectTextureAnimationSpeedU_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectTextureAnimationSpeedU => _FillTextureEffectTextureAnimationSpeedU_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectTextureAnimationSpeedULocation, 4)) : default;
        #endregion
        #region FillTextureEffectTextureAnimationSpeedV
        private int _FillTextureEffectTextureAnimationSpeedVLocation => _DATALocation!.Value + 0x30;
        private bool _FillTextureEffectTextureAnimationSpeedV_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectTextureAnimationSpeedV => _FillTextureEffectTextureAnimationSpeedV_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectTextureAnimationSpeedVLocation, 4)) : default;
        #endregion
        #region EdgeEffectFallOff
        private int _EdgeEffectFallOffLocation => _DATALocation!.Value + 0x34;
        private bool _EdgeEffectFallOff_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectFallOff => _EdgeEffectFallOff_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectFallOffLocation, 4)) : default;
        #endregion
        #region EdgeEffectColor
        private int _EdgeEffectColorLocation => _DATALocation!.Value + 0x38;
        private bool _EdgeEffectColor_IsSet => _DATALocation.HasValue;
        public Color EdgeEffectColor => _EdgeEffectColor_IsSet ? _data.Span.Slice(_EdgeEffectColorLocation, 4).ReadColor() : default;
        #endregion
        #region EdgeEffectAlphaFadeInTime
        private int _EdgeEffectAlphaFadeInTimeLocation => _DATALocation!.Value + 0x3C;
        private bool _EdgeEffectAlphaFadeInTime_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaFadeInTime => _EdgeEffectAlphaFadeInTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectAlphaFadeInTimeLocation, 4)) : default;
        #endregion
        #region EdgeEffectFullAlphaTime
        private int _EdgeEffectFullAlphaTimeLocation => _DATALocation!.Value + 0x40;
        private bool _EdgeEffectFullAlphaTime_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectFullAlphaTime => _EdgeEffectFullAlphaTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectFullAlphaTimeLocation, 4)) : default;
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        private int _EdgeEffectAlphaFadeOutTimeLocation => _DATALocation!.Value + 0x44;
        private bool _EdgeEffectAlphaFadeOutTime_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaFadeOutTime => _EdgeEffectAlphaFadeOutTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectAlphaFadeOutTimeLocation, 4)) : default;
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        private int _EdgeEffectPersistentAlphaRatioLocation => _DATALocation!.Value + 0x48;
        private bool _EdgeEffectPersistentAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectPersistentAlphaRatio => _EdgeEffectPersistentAlphaRatio_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectPersistentAlphaRatioLocation, 4)) : default;
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        private int _EdgeEffectAlphaPulseAmplitudeLocation => _DATALocation!.Value + 0x4C;
        private bool _EdgeEffectAlphaPulseAmplitude_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaPulseAmplitude => _EdgeEffectAlphaPulseAmplitude_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectAlphaPulseAmplitudeLocation, 4)) : default;
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        private int _EdgeEffectAlphaPulseFrequencyLocation => _DATALocation!.Value + 0x50;
        private bool _EdgeEffectAlphaPulseFrequency_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaPulseFrequency => _EdgeEffectAlphaPulseFrequency_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectAlphaPulseFrequencyLocation, 4)) : default;
        #endregion
        #region FillTextureEffectFullAlphaRatio
        private int _FillTextureEffectFullAlphaRatioLocation => _DATALocation!.Value + 0x54;
        private bool _FillTextureEffectFullAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single FillTextureEffectFullAlphaRatio => _FillTextureEffectFullAlphaRatio_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_FillTextureEffectFullAlphaRatioLocation, 4)) : default;
        #endregion
        #region EdgeEffectFullAlphaRatio
        private int _EdgeEffectFullAlphaRatioLocation => _DATALocation!.Value + 0x58;
        private bool _EdgeEffectFullAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectFullAlphaRatio => _EdgeEffectFullAlphaRatio_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_EdgeEffectFullAlphaRatioLocation, 4)) : default;
        #endregion
        #region MembraneShaderDestBlendMode
        private int _MembraneShaderDestBlendModeLocation => _DATALocation!.Value + 0x5C;
        private bool _MembraneShaderDestBlendMode_IsSet => _DATALocation.HasValue;
        public EffectShader.SourceBlendMode MembraneShaderDestBlendMode => _MembraneShaderDestBlendMode_IsSet ? (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MembraneShaderDestBlendModeLocation, 4)) : default;
        #endregion
        #region ParticleShaderSourceBlendMode
        private int _ParticleShaderSourceBlendModeLocation => _DATALocation!.Value + 0x60;
        private bool _ParticleShaderSourceBlendMode_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public EffectShader.SourceBlendMode ParticleShaderSourceBlendMode => _ParticleShaderSourceBlendMode_IsSet ? (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ParticleShaderSourceBlendModeLocation, 4)) : default;
        #endregion
        #region ParticleShaderBlendOperation
        private int _ParticleShaderBlendOperationLocation => _DATALocation!.Value + 0x64;
        private bool _ParticleShaderBlendOperation_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public EffectShader.BlendOperation ParticleShaderBlendOperation => _ParticleShaderBlendOperation_IsSet ? (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ParticleShaderBlendOperationLocation, 4)) : default;
        #endregion
        #region ParticleShaderZTestFunction
        private int _ParticleShaderZTestFunctionLocation => _DATALocation!.Value + 0x68;
        private bool _ParticleShaderZTestFunction_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public EffectShader.ZTestFunction ParticleShaderZTestFunction => _ParticleShaderZTestFunction_IsSet ? (EffectShader.ZTestFunction)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ParticleShaderZTestFunctionLocation, 4)) : default;
        #endregion
        #region ParticleShaderDestBlendMode
        private int _ParticleShaderDestBlendModeLocation => _DATALocation!.Value + 0x6C;
        private bool _ParticleShaderDestBlendMode_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public EffectShader.SourceBlendMode ParticleShaderDestBlendMode => _ParticleShaderDestBlendMode_IsSet ? (EffectShader.SourceBlendMode)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ParticleShaderDestBlendModeLocation, 4)) : default;
        #endregion
        #region ParticleShaderParticleBirthRampUpTime
        private int _ParticleShaderParticleBirthRampUpTimeLocation => _DATALocation!.Value + 0x70;
        private bool _ParticleShaderParticleBirthRampUpTime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderParticleBirthRampUpTime => _ParticleShaderParticleBirthRampUpTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderParticleBirthRampUpTimeLocation, 4)) : default;
        #endregion
        #region ParticleShaderFullParticleBirthTime
        private int _ParticleShaderFullParticleBirthTimeLocation => _DATALocation!.Value + 0x74;
        private bool _ParticleShaderFullParticleBirthTime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderFullParticleBirthTime => _ParticleShaderFullParticleBirthTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderFullParticleBirthTimeLocation, 4)) : default;
        #endregion
        #region ParticleShaderParticleBirthRampDownTime
        private int _ParticleShaderParticleBirthRampDownTimeLocation => _DATALocation!.Value + 0x78;
        private bool _ParticleShaderParticleBirthRampDownTime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderParticleBirthRampDownTime => _ParticleShaderParticleBirthRampDownTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderParticleBirthRampDownTimeLocation, 4)) : default;
        #endregion
        #region ParticleShaderFullParticleBirthRatio
        private int _ParticleShaderFullParticleBirthRatioLocation => _DATALocation!.Value + 0x7C;
        private bool _ParticleShaderFullParticleBirthRatio_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderFullParticleBirthRatio => _ParticleShaderFullParticleBirthRatio_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderFullParticleBirthRatioLocation, 4)) : default;
        #endregion
        #region ParticleShaderPersistentParticleBirthRatio
        private int _ParticleShaderPersistentParticleBirthRatioLocation => _DATALocation!.Value + 0x80;
        private bool _ParticleShaderPersistentParticleBirthRatio_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderPersistentParticleBirthRatio => _ParticleShaderPersistentParticleBirthRatio_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderPersistentParticleBirthRatioLocation, 4)) : default;
        #endregion
        #region ParticleShaderParticleLifetime
        private int _ParticleShaderParticleLifetimeLocation => _DATALocation!.Value + 0x84;
        private bool _ParticleShaderParticleLifetime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderParticleLifetime => _ParticleShaderParticleLifetime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderParticleLifetimeLocation, 4)) : default;
        #endregion
        #region ParticleShaderParticleLifetimePlusMinus
        private int _ParticleShaderParticleLifetimePlusMinusLocation => _DATALocation!.Value + 0x88;
        private bool _ParticleShaderParticleLifetimePlusMinus_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderParticleLifetimePlusMinus => _ParticleShaderParticleLifetimePlusMinus_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderParticleLifetimePlusMinusLocation, 4)) : default;
        #endregion
        #region ParticleShaderInitialSpeedAlongNormal
        private int _ParticleShaderInitialSpeedAlongNormalLocation => _DATALocation!.Value + 0x8C;
        private bool _ParticleShaderInitialSpeedAlongNormal_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderInitialSpeedAlongNormal => _ParticleShaderInitialSpeedAlongNormal_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderInitialSpeedAlongNormalLocation, 4)) : default;
        #endregion
        #region ParticleShaderAccelerationAlongNormal
        private int _ParticleShaderAccelerationAlongNormalLocation => _DATALocation!.Value + 0x90;
        private bool _ParticleShaderAccelerationAlongNormal_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderAccelerationAlongNormal => _ParticleShaderAccelerationAlongNormal_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderAccelerationAlongNormalLocation, 4)) : default;
        #endregion
        #region ParticleShaderInitialVelocity1
        private int _ParticleShaderInitialVelocity1Location => _DATALocation!.Value + 0x94;
        private bool _ParticleShaderInitialVelocity1_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderInitialVelocity1 => _ParticleShaderInitialVelocity1_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderInitialVelocity1Location, 4)) : default;
        #endregion
        #region ParticleShaderInitialVelocity2
        private int _ParticleShaderInitialVelocity2Location => _DATALocation!.Value + 0x98;
        private bool _ParticleShaderInitialVelocity2_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderInitialVelocity2 => _ParticleShaderInitialVelocity2_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderInitialVelocity2Location, 4)) : default;
        #endregion
        #region ParticleShaderInitialVelocity3
        private int _ParticleShaderInitialVelocity3Location => _DATALocation!.Value + 0x9C;
        private bool _ParticleShaderInitialVelocity3_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderInitialVelocity3 => _ParticleShaderInitialVelocity3_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderInitialVelocity3Location, 4)) : default;
        #endregion
        #region ParticleShaderAcceleration1
        private int _ParticleShaderAcceleration1Location => _DATALocation!.Value + 0xA0;
        private bool _ParticleShaderAcceleration1_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderAcceleration1 => _ParticleShaderAcceleration1_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderAcceleration1Location, 4)) : default;
        #endregion
        #region ParticleShaderAcceleration2
        private int _ParticleShaderAcceleration2Location => _DATALocation!.Value + 0xA4;
        private bool _ParticleShaderAcceleration2_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderAcceleration2 => _ParticleShaderAcceleration2_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderAcceleration2Location, 4)) : default;
        #endregion
        #region ParticleShaderAcceleration3
        private int _ParticleShaderAcceleration3Location => _DATALocation!.Value + 0xA8;
        private bool _ParticleShaderAcceleration3_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderAcceleration3 => _ParticleShaderAcceleration3_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderAcceleration3Location, 4)) : default;
        #endregion
        #region ParticleShaderScaleKey1
        private int _ParticleShaderScaleKey1Location => _DATALocation!.Value + 0xAC;
        private bool _ParticleShaderScaleKey1_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderScaleKey1 => _ParticleShaderScaleKey1_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderScaleKey1Location, 4)) : default;
        #endregion
        #region ParticleShaderScaleKey2
        private int _ParticleShaderScaleKey2Location => _DATALocation!.Value + 0xB0;
        private bool _ParticleShaderScaleKey2_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderScaleKey2 => _ParticleShaderScaleKey2_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderScaleKey2Location, 4)) : default;
        #endregion
        #region ParticleShaderScaleKey1Time
        private int _ParticleShaderScaleKey1TimeLocation => _DATALocation!.Value + 0xB4;
        private bool _ParticleShaderScaleKey1Time_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderScaleKey1Time => _ParticleShaderScaleKey1Time_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderScaleKey1TimeLocation, 4)) : default;
        #endregion
        #region ParticleShaderScaleKey2Time
        private int _ParticleShaderScaleKey2TimeLocation => _DATALocation!.Value + 0xB8;
        private bool _ParticleShaderScaleKey2Time_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ParticleShaderScaleKey2Time => _ParticleShaderScaleKey2Time_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ParticleShaderScaleKey2TimeLocation, 4)) : default;
        #endregion
        #region ColorKey1Color
        private int _ColorKey1ColorLocation => _DATALocation!.Value + 0xBC;
        private bool _ColorKey1Color_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Color ColorKey1Color => _ColorKey1Color_IsSet ? _data.Span.Slice(_ColorKey1ColorLocation, 4).ReadColor() : default;
        #endregion
        #region ColorKey2Color
        private int _ColorKey2ColorLocation => _DATALocation!.Value + 0xC0;
        private bool _ColorKey2Color_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Color ColorKey2Color => _ColorKey2Color_IsSet ? _data.Span.Slice(_ColorKey2ColorLocation, 4).ReadColor() : default;
        #endregion
        #region ColorKey3Color
        private int _ColorKey3ColorLocation => _DATALocation!.Value + 0xC4;
        private bool _ColorKey3Color_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Color ColorKey3Color => _ColorKey3Color_IsSet ? _data.Span.Slice(_ColorKey3ColorLocation, 4).ReadColor() : default;
        #endregion
        #region ColorKey1ColorAlpha
        private int _ColorKey1ColorAlphaLocation => _DATALocation!.Value + 0xC8;
        private bool _ColorKey1ColorAlpha_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ColorKey1ColorAlpha => _ColorKey1ColorAlpha_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorKey1ColorAlphaLocation, 4)) : default;
        #endregion
        #region ColorKey2ColorAlpha
        private int _ColorKey2ColorAlphaLocation => _DATALocation!.Value + 0xCC;
        private bool _ColorKey2ColorAlpha_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ColorKey2ColorAlpha => _ColorKey2ColorAlpha_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorKey2ColorAlphaLocation, 4)) : default;
        #endregion
        #region ColorKey3ColorAlpha
        private int _ColorKey3ColorAlphaLocation => _DATALocation!.Value + 0xD0;
        private bool _ColorKey3ColorAlpha_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ColorKey3ColorAlpha => _ColorKey3ColorAlpha_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorKey3ColorAlphaLocation, 4)) : default;
        #endregion
        #region ColorKey1ColorKeyTime
        private int _ColorKey1ColorKeyTimeLocation => _DATALocation!.Value + 0xD4;
        private bool _ColorKey1ColorKeyTime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ColorKey1ColorKeyTime => _ColorKey1ColorKeyTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorKey1ColorKeyTimeLocation, 4)) : default;
        #endregion
        #region ColorKey2ColorKeyTime
        private int _ColorKey2ColorKeyTimeLocation => _DATALocation!.Value + 0xD8;
        private bool _ColorKey2ColorKeyTime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ColorKey2ColorKeyTime => _ColorKey2ColorKeyTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorKey2ColorKeyTimeLocation, 4)) : default;
        #endregion
        #region ColorKey3ColorKeyTime
        private int _ColorKey3ColorKeyTimeLocation => _DATALocation!.Value + 0xDC;
        private bool _ColorKey3ColorKeyTime_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public Single ColorKey3ColorKeyTime => _ColorKey3ColorKeyTime_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ColorKey3ColorKeyTimeLocation, 4)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected EffectShaderBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static EffectShaderBinaryOverlay EffectShaderFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new EffectShaderBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    _FillTextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.FillTexture);
                }
                case 0x324F4349: // ICO2
                {
                    _ParticleShaderTextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.ParticleShaderTexture);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = EffectShader.DATADataType.Has;
                    var subLen = _package.Meta.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x60)
                    {
                        this.DATADataTypeState |= EffectShader.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)EffectShader_FieldIndex.ColorKey3ColorKeyTime);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

