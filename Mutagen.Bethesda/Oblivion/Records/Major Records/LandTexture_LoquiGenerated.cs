/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LandTexture :
        OblivionMajorRecord,
        ILandTextureInternal,
        ILoquiObjectSetter<LandTexture>,
        IEquatable<LandTexture>,
        IEqualsMask
    {
        #region Ctor
        protected LandTexture()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILandTextureGetter.Icon => this.Icon;
        #endregion
        #region Havok
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private HavokData? _Havok;
        public HavokData? Havok
        {
            get => _Havok;
            set => _Havok = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHavokDataGetter? ILandTextureGetter.Havok => this.Havok;
        #endregion
        #region TextureSpecularExponent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte? _TextureSpecularExponent;
        public Byte? TextureSpecularExponent
        {
            get => this._TextureSpecularExponent;
            set => this._TextureSpecularExponent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ILandTextureGetter.TextureSpecularExponent => this.TextureSpecularExponent;
        #endregion
        #region PotentialGrass
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Grass>>? _PotentialGrass;
        public ExtendedList<IFormLink<Grass>>? PotentialGrass
        {
            get => this._PotentialGrass;
            set => this._PotentialGrass = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IGrassGetter>>? ILandTextureGetter.PotentialGrass => _PotentialGrass;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandTextureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILandTextureGetter rhs)) return false;
            return ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LandTexture obj)
        {
            return ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LandTextureCommon)((ILandTextureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LandTextureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LandTextureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new LandTexture CreateFromXml(
            XElement node,
            LandTexture.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LandTexture CreateFromXml(
            XElement node,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LandTexture.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LandTexture CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LandTexture();
            ((LandTextureSetterCommon)((ILandTextureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LandTexture CreateFromXml(
            string path,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LandTexture CreateFromXml(
            string path,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LandTexture CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LandTexture CreateFromXml(
            Stream stream,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LandTexture CreateFromXml(
            Stream stream,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LandTexture CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Icon = initialValue;
                this.Havok = new MaskItem<TItem, HavokData.Mask<TItem>?>(initialValue, new HavokData.Mask<TItem>(initialValue));
                this.TextureSpecularExponent = initialValue;
                this.PotentialGrass = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Icon,
                TItem Havok,
                TItem TextureSpecularExponent,
                TItem PotentialGrass)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Icon = Icon;
                this.Havok = new MaskItem<TItem, HavokData.Mask<TItem>?>(Havok, new HavokData.Mask<TItem>(Havok));
                this.TextureSpecularExponent = TextureSpecularExponent;
                this.PotentialGrass = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PotentialGrass, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Icon;
            public MaskItem<TItem, HavokData.Mask<TItem>?>? Havok { get; set; }
            public TItem TextureSpecularExponent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PotentialGrass;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Havok, rhs.Havok)) return false;
                if (!object.Equals(this.TextureSpecularExponent, rhs.TextureSpecularExponent)) return false;
                if (!object.Equals(this.PotentialGrass, rhs.PotentialGrass)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.Havok?.GetHashCode());
                ret = ret.CombineHashCode(this.TextureSpecularExponent?.GetHashCode());
                ret = ret.CombineHashCode(this.PotentialGrass?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Icon)) return false;
                if (Havok != null)
                {
                    if (!eval(this.Havok.Overall)) return false;
                    if (this.Havok.Specific != null && !this.Havok.Specific.All(eval)) return false;
                }
                if (!eval(this.TextureSpecularExponent)) return false;
                if (this.PotentialGrass != null)
                {
                    if (!eval(this.PotentialGrass.Overall)) return false;
                    if (this.PotentialGrass.Specific != null)
                    {
                        foreach (var item in this.PotentialGrass.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Icon)) return true;
                if (Havok != null)
                {
                    if (eval(this.Havok.Overall)) return true;
                    if (this.Havok.Specific != null && this.Havok.Specific.Any(eval)) return true;
                }
                if (eval(this.TextureSpecularExponent)) return true;
                if (this.PotentialGrass != null)
                {
                    if (eval(this.PotentialGrass.Overall)) return true;
                    if (this.PotentialGrass.Specific != null)
                    {
                        foreach (var item in this.PotentialGrass.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LandTexture.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Icon = eval(this.Icon);
                obj.Havok = this.Havok == null ? null : new MaskItem<R, HavokData.Mask<R>?>(eval(this.Havok.Overall), this.Havok.Specific?.Translate(eval));
                obj.TextureSpecularExponent = eval(this.TextureSpecularExponent);
                if (PotentialGrass != null)
                {
                    obj.PotentialGrass = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PotentialGrass.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PotentialGrass.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PotentialGrass.Specific = l;
                        foreach (var item in PotentialGrass.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LandTexture.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LandTexture.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LandTexture.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Havok?.Overall ?? true)
                    {
                        Havok?.ToString(fg);
                    }
                    if (printMask?.TextureSpecularExponent ?? true)
                    {
                        fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                    }
                    if ((printMask?.PotentialGrass?.Overall ?? true)
                        && PotentialGrass.TryGet(out var PotentialGrassItem))
                    {
                        fg.AppendLine("PotentialGrass =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(PotentialGrassItem.Overall);
                            if (PotentialGrassItem.Specific != null)
                            {
                                foreach (var subItem in PotentialGrassItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Icon;
            public MaskItem<Exception?, HavokData.ErrorMask?>? Havok;
            public Exception? TextureSpecularExponent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PotentialGrass;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandTexture_FieldIndex.Icon:
                        return Icon;
                    case LandTexture_FieldIndex.Havok:
                        return Havok;
                    case LandTexture_FieldIndex.TextureSpecularExponent:
                        return TextureSpecularExponent;
                    case LandTexture_FieldIndex.PotentialGrass:
                        return PotentialGrass;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandTexture_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case LandTexture_FieldIndex.Havok:
                        this.Havok = new MaskItem<Exception?, HavokData.ErrorMask?>(ex, null);
                        break;
                    case LandTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = ex;
                        break;
                    case LandTexture_FieldIndex.PotentialGrass:
                        this.PotentialGrass = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
                switch (enu)
                {
                    case LandTexture_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case LandTexture_FieldIndex.Havok:
                        this.Havok = (MaskItem<Exception?, HavokData.ErrorMask?>?)obj;
                        break;
                    case LandTexture_FieldIndex.TextureSpecularExponent:
                        this.TextureSpecularExponent = (Exception?)obj;
                        break;
                    case LandTexture_FieldIndex.PotentialGrass:
                        this.PotentialGrass = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Icon != null) return true;
                if (Havok != null) return true;
                if (TextureSpecularExponent != null) return true;
                if (PotentialGrass != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Icon, "Icon");
                Havok?.ToString(fg);
                fg.AppendItem(TextureSpecularExponent, "TextureSpecularExponent");
                if (PotentialGrass.TryGet(out var PotentialGrassItem))
                {
                    fg.AppendLine("PotentialGrass =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(PotentialGrassItem.Overall);
                        if (PotentialGrassItem.Specific != null)
                        {
                            foreach (var subItem in PotentialGrassItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Havok = this.Havok.Combine(rhs.Havok, (l, r) => l.Combine(r));
                ret.TextureSpecularExponent = this.TextureSpecularExponent.Combine(rhs.TextureSpecularExponent);
                ret.PotentialGrass = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.PotentialGrass?.Overall, rhs.PotentialGrass?.Overall), ExceptionExt.Combine(this.PotentialGrass?.Specific, rhs.PotentialGrass?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Icon;
            public MaskItem<bool, HavokData.TranslationMask?> Havok;
            public bool TextureSpecularExponent;
            public bool PotentialGrass;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Icon = defaultOn;
                this.Havok = new MaskItem<bool, HavokData.TranslationMask?>(defaultOn, null);
                this.TextureSpecularExponent = defaultOn;
                this.PotentialGrass = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Icon, null));
                ret.Add((Havok?.Overall ?? true, Havok?.Specific?.GetCrystal()));
                ret.Add((TextureSpecularExponent, null));
                ret.Add((PotentialGrass, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LandTexture_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => LandTextureCommon.Instance.GetLinks(this);
        public LandTexture(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LandTexture(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public LandTexture(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new LandTexture CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static LandTexture CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LandTexture();
            ((LandTextureSetterCommon)((ILandTextureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandTextureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LandTexture GetNew()
        {
            return new LandTexture();
        }

    }
    #endregion

    #region Interface
    public partial interface ILandTexture :
        ILandTextureGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ILandTextureInternal>
    {
        new String? Icon { get; set; }
        new HavokData? Havok { get; set; }
        new Byte? TextureSpecularExponent { get; set; }
        new ExtendedList<IFormLink<Grass>>? PotentialGrass { get; set; }
    }

    public partial interface ILandTextureInternal :
        IOblivionMajorRecordInternal,
        ILandTexture,
        ILandTextureGetter
    {
    }

    public partial interface ILandTextureGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ILandTextureGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Icon { get; }
        IHavokDataGetter? Havok { get; }
        Byte? TextureSpecularExponent { get; }
        IReadOnlyList<IFormLinkGetter<IGrassGetter>>? PotentialGrass { get; }

    }

    #endregion

    #region Common MixIn
    public static class LandTextureMixIn
    {
        public static void Clear(this ILandTextureInternal item)
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LandTexture.Mask<bool> GetEqualsMask(
            this ILandTextureGetter item,
            ILandTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILandTextureGetter item,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILandTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILandTextureGetter item,
            LandTexture.Mask<bool?> checkMask)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LandTexture.Mask<bool> GetHasBeenSetMask(this ILandTextureGetter item)
        {
            var ret = new LandTexture.Mask<bool>(false);
            ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILandTextureGetter item,
            ILandTextureGetter rhs)
        {
            return ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILandTextureInternal lhs,
            ILandTextureGetter rhs,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LandTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILandTextureInternal lhs,
            ILandTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LandTextureSetterTranslationCommon)((ILandTextureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LandTexture DeepCopy(
            this ILandTextureGetter item,
            LandTexture.TranslationMask? copyMask = null)
        {
            return ((LandTextureSetterTranslationCommon)((ILandTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LandTexture DeepCopy(
            this ILandTextureGetter item,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? copyMask = null)
        {
            return ((LandTextureSetterTranslationCommon)((ILandTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LandTexture DeepCopy(
            this ILandTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LandTextureSetterTranslationCommon)((ILandTextureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILandTextureInternal item,
            XElement node,
            LandTexture.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILandTextureInternal item,
            XElement node,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LandTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            string path,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            string path,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            Stream stream,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            Stream stream,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandTextureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LandTexture.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILandTextureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILandTextureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandTextureSetterCommon)((ILandTextureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LandTexture_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        Havok = 6,
        TextureSpecularExponent = 7,
        PotentialGrass = 8,
    }
    #endregion

    #region Registration
    public partial class LandTexture_Registration : ILoquiRegistration
    {
        public static readonly LandTexture_Registration Instance = new LandTexture_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 51,
            version: 0);

        public const string GUID = "528c071e-b61d-4149-b96a-a28f0d96e87e";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(LandTexture.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LandTexture.ErrorMask);

        public static readonly Type ClassType = typeof(LandTexture);

        public static readonly Type GetterType = typeof(ILandTextureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandTexture);

        public static readonly Type? InternalSetterType = typeof(ILandTextureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LandTexture";

        public const string Name = "LandTexture";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)LandTexture_FieldIndex.Icon;
                case "HAVOK":
                    return (ushort)LandTexture_FieldIndex.Havok;
                case "TEXTURESPECULAREXPONENT":
                    return (ushort)LandTexture_FieldIndex.TextureSpecularExponent;
                case "POTENTIALGRASS":
                    return (ushort)LandTexture_FieldIndex.PotentialGrass;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.PotentialGrass:
                    return true;
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Havok:
                    return true;
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return "Icon";
                case LandTexture_FieldIndex.Havok:
                    return "Havok";
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return "TextureSpecularExponent";
                case LandTexture_FieldIndex.PotentialGrass:
                    return "PotentialGrass";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                case LandTexture_FieldIndex.Havok:
                case LandTexture_FieldIndex.TextureSpecularExponent:
                case LandTexture_FieldIndex.PotentialGrass:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LandTexture_FieldIndex enu = (LandTexture_FieldIndex)index;
            switch (enu)
            {
                case LandTexture_FieldIndex.Icon:
                    return typeof(String);
                case LandTexture_FieldIndex.Havok:
                    return typeof(HavokData);
                case LandTexture_FieldIndex.TextureSpecularExponent:
                    return typeof(Byte);
                case LandTexture_FieldIndex.PotentialGrass:
                    return typeof(ExtendedList<IFormLink<Grass>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LandTextureXmlWriteTranslation);
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LTEX_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(LandTextureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LandTextureSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly LandTextureSetterCommon Instance = new LandTextureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILandTextureInternal item)
        {
            ClearPartial();
            item.Icon = default;
            item.Havok = null;
            item.TextureSpecularExponent = default;
            item.PotentialGrass = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILandTextureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandTextureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILandTextureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ILandTextureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LandTextureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LandTexture_Registration.LTEX_HEADER;
        protected static void FillBinaryStructs(
            ILandTextureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILandTextureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.Icon);
                }
                case 0x4D414E48: // HNAM
                {
                    item.Havok = Mutagen.Bethesda.Oblivion.HavokData.CreateFromBinary(
                        frame: frame,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.Havok);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.TextureSpecularExponent = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.TextureSpecularExponent);
                }
                case 0x4D414E47: // GNAM
                {
                    item.PotentialGrass = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Grass>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: LandTexture_Registration.GNAM_HEADER,
                            masterReferences: masterReferences,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Grass>>();
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.PotentialGrass);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ILandTextureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILandTextureInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LandTextureCommon : OblivionMajorRecordCommon
    {
        public new static readonly LandTextureCommon Instance = new LandTextureCommon();

        public LandTexture.Mask<bool> GetEqualsMask(
            ILandTextureGetter item,
            ILandTextureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LandTexture.Mask<bool>(false);
            ((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandTextureGetter item,
            ILandTextureGetter rhs,
            LandTexture.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Havok = EqualsMaskHelper.EqualsHelper(
                item.Havok,
                rhs.Havok,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TextureSpecularExponent = item.TextureSpecularExponent == rhs.TextureSpecularExponent;
            ret.PotentialGrass = item.PotentialGrass.CollectionEqualsHelper(
                rhs.PotentialGrass,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILandTextureGetter item,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILandTextureGetter item,
            FileGeneration fg,
            string? name = null,
            LandTexture.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LandTexture =>");
            }
            else
            {
                fg.AppendLine($"{name} (LandTexture) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILandTextureGetter item,
            FileGeneration fg,
            LandTexture.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.Havok?.Overall ?? true)
                && item.Havok.TryGet(out var HavokItem))
            {
                HavokItem?.ToString(fg, "Havok");
            }
            if ((printMask?.TextureSpecularExponent ?? true)
                && item.TextureSpecularExponent.TryGet(out var TextureSpecularExponentItem))
            {
                fg.AppendItem(TextureSpecularExponentItem, "TextureSpecularExponent");
            }
            if ((printMask?.PotentialGrass?.Overall ?? true)
                && item.PotentialGrass.TryGet(out var PotentialGrassItem))
            {
                fg.AppendLine("PotentialGrass =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in PotentialGrassItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILandTextureGetter item,
            LandTexture.Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.Havok?.Overall.HasValue ?? false && checkMask.Havok.Overall.Value != (item.Havok != null)) return false;
            if (checkMask.Havok?.Specific != null && (item.Havok == null || !item.Havok.HasBeenSet(checkMask.Havok.Specific))) return false;
            if (checkMask.TextureSpecularExponent.HasValue && checkMask.TextureSpecularExponent.Value != (item.TextureSpecularExponent != null)) return false;
            if (checkMask.PotentialGrass?.Overall.HasValue ?? false && checkMask.PotentialGrass!.Overall.Value != (item.PotentialGrass != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILandTextureGetter item,
            LandTexture.Mask<bool> mask)
        {
            mask.Icon = (item.Icon != null);
            var itemHavok = item.Havok;
            mask.Havok = new MaskItem<bool, HavokData.Mask<bool>?>(itemHavok != null, itemHavok?.GetHasBeenSetMask());
            mask.TextureSpecularExponent = (item.TextureSpecularExponent != null);
            mask.PotentialGrass = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.PotentialGrass != null), default);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LandTexture_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LandTexture_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LandTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LandTexture_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LandTexture_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LandTexture_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandTextureGetter? lhs,
            ILandTextureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!object.Equals(lhs.Havok, rhs.Havok)) return false;
            if (lhs.TextureSpecularExponent != rhs.TextureSpecularExponent) return false;
            if (!lhs.PotentialGrass.SequenceEqual(rhs.PotentialGrass)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandTextureGetter?)lhs,
                rhs: rhs as ILandTextureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandTextureGetter?)lhs,
                rhs: rhs as ILandTextureGetter);
        }
        
        public virtual int GetHashCode(ILandTextureGetter item)
        {
            int ret = 0;
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            if (item.Havok.TryGet(out var Havokitem))
            {
                ret = HashHelper.GetHashCode(Havokitem).CombineHashCode(ret);
            }
            if (item.TextureSpecularExponent.TryGet(out var TextureSpecularExponentitem))
            {
                ret = HashHelper.GetHashCode(TextureSpecularExponentitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.PotentialGrass).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandTextureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandTextureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LandTexture.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILandTextureGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.PotentialGrass != null)
            {
                foreach (var item in obj.PotentialGrass)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(LandTexture obj, LandTexture rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new LandTexture(getNextFormKey());
            ret.DeepCopyIn((LandTexture)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LandTexture)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LandTextureSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly LandTextureSetterTranslationCommon Instance = new LandTextureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILandTextureInternal item,
            ILandTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ILandTexture item,
            ILandTextureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.Havok) ?? true))
            {
                errorMask?.PushIndex((int)LandTexture_FieldIndex.Havok);
                try
                {
                    if(rhs.Havok.TryGet(out var rhsHavok))
                    {
                        item.Havok = rhsHavok.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LandTexture_FieldIndex.Havok));
                    }
                    else
                    {
                        item.Havok = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                item.TextureSpecularExponent = rhs.TextureSpecularExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)LandTexture_FieldIndex.PotentialGrass) ?? true))
            {
                errorMask?.PushIndex((int)LandTexture_FieldIndex.PotentialGrass);
                try
                {
                    if ((rhs.PotentialGrass != null))
                    {
                        item.PotentialGrass = 
                            rhs.PotentialGrass
                            .Select(r => new FormLink<Grass>(r.FormKey))
                            .ToExtendedList<IFormLink<Grass>>();
                    }
                    else
                    {
                        item.PotentialGrass = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandTextureInternal)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandTexture)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandTextureInternal)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandTexture)item,
                rhs: (ILandTextureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LandTexture DeepCopy(
            ILandTextureGetter item,
            LandTexture.TranslationMask? copyMask = null)
        {
            LandTexture ret = (LandTexture)((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LandTexture DeepCopy(
            ILandTextureGetter item,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? copyMask = null)
        {
            LandTexture ret = (LandTexture)((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LandTexture DeepCopy(
            ILandTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LandTexture ret = (LandTexture)((LandTextureCommon)((ILandTextureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LandTexture
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandTexture_Registration.Instance;
        public new static LandTexture_Registration Registration => LandTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LandTextureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandTextureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandTextureXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LandTextureXmlWriteTranslation Instance = new LandTextureXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILandTextureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)LandTexture_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)LandTexture_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.Havok != null)
                && (translationMask?.GetShouldTranslate((int)LandTexture_FieldIndex.Havok) ?? true))
            {
                if (item.Havok.TryGet(out var HavokItem))
                {
                    ((HavokDataXmlWriteTranslation)((IXmlItem)HavokItem).XmlWriteTranslator).Write(
                        item: HavokItem,
                        node: node,
                        name: nameof(item.Havok),
                        fieldIndex: (int)LandTexture_FieldIndex.Havok,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)LandTexture_FieldIndex.Havok));
                }
            }
            if ((item.TextureSpecularExponent != null)
                && (translationMask?.GetShouldTranslate((int)LandTexture_FieldIndex.TextureSpecularExponent) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TextureSpecularExponent),
                    item: item.TextureSpecularExponent.Value,
                    fieldIndex: (int)LandTexture_FieldIndex.TextureSpecularExponent,
                    errorMask: errorMask);
            }
            if ((item.PotentialGrass != null)
                && (translationMask?.GetShouldTranslate((int)LandTexture_FieldIndex.PotentialGrass) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IGrassGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.PotentialGrass),
                    item: item.PotentialGrass,
                    fieldIndex: (int)LandTexture_FieldIndex.PotentialGrass,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LandTexture_FieldIndex.PotentialGrass),
                    transl: (XElement subNode, IFormLinkGetter<IGrassGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILandTextureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LandTexture");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LandTexture");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LandTextureXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static LandTextureXmlCreateTranslation Instance = new LandTextureXmlCreateTranslation();

        public static void FillPublicXml(
            ILandTextureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LandTextureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILandTextureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Icon":
                    errorMask?.PushIndex((int)LandTexture_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Havok":
                    errorMask?.PushIndex((int)LandTexture_FieldIndex.Havok);
                    try
                    {
                        item.Havok = LoquiXmlTranslation<HavokData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)LandTexture_FieldIndex.Havok));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TextureSpecularExponent":
                    errorMask?.PushIndex((int)LandTexture_FieldIndex.TextureSpecularExponent);
                    try
                    {
                        item.TextureSpecularExponent = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PotentialGrass":
                    errorMask?.PushIndex((int)LandTexture_FieldIndex.PotentialGrass);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Grass>>.Instance.Parse(
                            node: node,
                            enumer: out var PotentialGrassItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.PotentialGrass = PotentialGrassItem.ToExtendedList();
                        }
                        else
                        {
                            item.PotentialGrass = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LandTextureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILandTextureGetter item,
            XElement node,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LandTextureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LandTexture.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILandTextureGetter item,
            string path,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILandTextureGetter item,
            Stream stream,
            out LandTexture.ErrorMask errorMask,
            LandTexture.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandTextureBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LandTextureBinaryWriteTranslation Instance = new LandTextureBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILandTextureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(LandTexture_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Havok.TryGet(out var HavokItem))
            {
                ((HavokDataBinaryWriteTranslation)((IBinaryItem)HavokItem).BinaryWriteTranslator).Write(
                    item: HavokItem,
                    writer: writer,
                    masterReferences: masterReferences);
            }
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureSpecularExponent,
                header: recordTypeConverter.ConvertToCustom(LandTexture_Registration.SNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IGrassGetter>>.Instance.Write(
                writer: writer,
                items: item.PotentialGrass,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IGrassGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(LandTexture_Registration.GNAM_HEADER),
                        masterReferences: m);
                });
        }

        public void Write(
            MutagenWriter writer,
            ILandTextureGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LandTexture_Registration.LTEX_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandTextureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LandTextureBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static LandTextureBinaryCreateTranslation Instance = new LandTextureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LandTextureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandTextureBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ILandTextureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LandTexture_Registration.Instance;
        public new static LandTexture_Registration Registration => LandTexture_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandTextureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandTextureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandTextureGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => LandTextureCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LandTextureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LandTextureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandTextureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandTextureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Havok
        private RangeInt32? _HavokLocation;
        private bool _Havok_IsSet => _HavokLocation.HasValue;
        public IHavokDataGetter? Havok => _Havok_IsSet ? HavokDataBinaryOverlay.HavokDataFactory(new BinaryMemoryReadStream(_data.Slice(_HavokLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Havok_IsSet => _HavokLocation.HasValue;
        #endregion
        #region TextureSpecularExponent
        private int? _TextureSpecularExponentLocation;
        public Byte? TextureSpecularExponent => _TextureSpecularExponentLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _TextureSpecularExponentLocation.Value, _package.Meta)[0] : default(Byte?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IGrassGetter>>? PotentialGrass { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LandTextureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LandTextureBinaryOverlay LandTextureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LandTextureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.Icon);
                }
                case 0x4D414E48: // HNAM
                {
                    _HavokLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.Havok);
                }
                case 0x4D414E53: // SNAM
                {
                    _TextureSpecularExponentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.TextureSpecularExponent);
                }
                case 0x4D414E47: // GNAM
                {
                    this.PotentialGrass = BinaryOverlaySetList<IFormLinkGetter<IGrassGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IGrassGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.Meta.SubConstants,
                            trigger: type,
                            skipHeader: true));
                    return TryGet<int?>.Succeed((int)LandTexture_FieldIndex.PotentialGrass);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

