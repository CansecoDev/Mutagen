/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Landscape :
        OblivionMajorRecord,
        ILandscapeInternal,
        ILoquiObjectSetter<Landscape>,
        IEquatable<Landscape>,
        IEqualsMask
    {
        #region Ctor
        protected Landscape()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILandscapeGetter.Unknown => this.Unknown;
        #endregion
        #region VertexNormals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _VertexNormals;
        public Byte[]? VertexNormals
        {
            get => this._VertexNormals;
            set => this._VertexNormals = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILandscapeGetter.VertexNormals => this.VertexNormals;
        #endregion
        #region VertexHeightMap
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _VertexHeightMap;
        public Byte[]? VertexHeightMap
        {
            get => this._VertexHeightMap;
            set => this._VertexHeightMap = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILandscapeGetter.VertexHeightMap => this.VertexHeightMap;
        #endregion
        #region VertexColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _VertexColors;
        public Byte[]? VertexColors
        {
            get => this._VertexColors;
            set => this._VertexColors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ILandscapeGetter.VertexColors => this.VertexColors;
        #endregion
        #region Layers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BaseLayer> _Layers = new ExtendedList<BaseLayer>();
        public ExtendedList<BaseLayer> Layers
        {
            get => this._Layers;
            protected set => this._Layers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBaseLayerGetter> ILandscapeGetter.Layers => _Layers;
        #endregion

        #endregion
        #region Textures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<LandTexture>>? _Textures;
        public ExtendedList<IFormLink<LandTexture>>? Textures
        {
            get => this._Textures;
            set => this._Textures = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILandTextureGetter>>? ILandscapeGetter.Textures => _Textures;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandscapeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILandscapeGetter rhs)) return false;
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Landscape obj)
        {
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LandscapeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LandscapeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Landscape CreateFromXml(
            XElement node,
            Landscape.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Landscape CreateFromXml(
            XElement node,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Landscape.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Landscape CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Landscape();
            ((LandscapeSetterCommon)((ILandscapeGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Landscape CreateFromXml(
            string path,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            string path,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Landscape CreateFromXml(
            Stream stream,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            Stream stream,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Landscape CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Unknown = initialValue;
                this.VertexNormals = initialValue;
                this.VertexHeightMap = initialValue;
                this.VertexColors = initialValue;
                this.Layers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>());
                this.Textures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Unknown,
                TItem VertexNormals,
                TItem VertexHeightMap,
                TItem VertexColors,
                TItem Layers,
                TItem Textures)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Unknown = Unknown;
                this.VertexNormals = VertexNormals;
                this.VertexHeightMap = VertexHeightMap;
                this.VertexColors = VertexColors;
                this.Layers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>?>(Layers, Enumerable.Empty<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>());
                this.Textures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Textures, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown;
            public TItem VertexNormals;
            public TItem VertexHeightMap;
            public TItem VertexColors;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>?>? Layers;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Textures;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.VertexNormals, rhs.VertexNormals)) return false;
                if (!object.Equals(this.VertexHeightMap, rhs.VertexHeightMap)) return false;
                if (!object.Equals(this.VertexColors, rhs.VertexColors)) return false;
                if (!object.Equals(this.Layers, rhs.Layers)) return false;
                if (!object.Equals(this.Textures, rhs.Textures)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown);
                hash.Add(this.VertexNormals);
                hash.Add(this.VertexHeightMap);
                hash.Add(this.VertexColors);
                hash.Add(this.Layers);
                hash.Add(this.Textures);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.VertexNormals)) return false;
                if (!eval(this.VertexHeightMap)) return false;
                if (!eval(this.VertexColors)) return false;
                if (this.Layers != null)
                {
                    if (!eval(this.Layers.Overall)) return false;
                    if (this.Layers.Specific != null)
                    {
                        foreach (var item in this.Layers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Textures != null)
                {
                    if (!eval(this.Textures.Overall)) return false;
                    if (this.Textures.Specific != null)
                    {
                        foreach (var item in this.Textures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.VertexNormals)) return true;
                if (eval(this.VertexHeightMap)) return true;
                if (eval(this.VertexColors)) return true;
                if (this.Layers != null)
                {
                    if (eval(this.Layers.Overall)) return true;
                    if (this.Layers.Specific != null)
                    {
                        foreach (var item in this.Layers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Textures != null)
                {
                    if (eval(this.Textures.Overall)) return true;
                    if (this.Textures.Specific != null)
                    {
                        foreach (var item in this.Textures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Landscape.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Unknown = eval(this.Unknown);
                obj.VertexNormals = eval(this.VertexNormals);
                obj.VertexHeightMap = eval(this.VertexHeightMap);
                obj.VertexColors = eval(this.VertexColors);
                if (Layers != null)
                {
                    obj.Layers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BaseLayer.Mask<R>?>>?>(eval(this.Layers.Overall), Enumerable.Empty<MaskItemIndexed<R, BaseLayer.Mask<R>?>>());
                    if (Layers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BaseLayer.Mask<R>?>>();
                        obj.Layers.Specific = l;
                        foreach (var item in Layers.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, BaseLayer.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, BaseLayer.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Textures != null)
                {
                    obj.Textures = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Textures.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Textures.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Textures.Specific = l;
                        foreach (var item in Textures.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Landscape.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Landscape.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Landscape.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.VertexNormals ?? true)
                    {
                        fg.AppendItem(VertexNormals, "VertexNormals");
                    }
                    if (printMask?.VertexHeightMap ?? true)
                    {
                        fg.AppendItem(VertexHeightMap, "VertexHeightMap");
                    }
                    if (printMask?.VertexColors ?? true)
                    {
                        fg.AppendItem(VertexColors, "VertexColors");
                    }
                    if ((printMask?.Layers?.Overall ?? true)
                        && Layers.TryGet(out var LayersItem))
                    {
                        fg.AppendLine("Layers =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LayersItem.Overall);
                            if (LayersItem.Specific != null)
                            {
                                foreach (var subItem in LayersItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Textures?.Overall ?? true)
                        && Textures.TryGet(out var TexturesItem))
                    {
                        fg.AppendLine("Textures =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(TexturesItem.Overall);
                            if (TexturesItem.Specific != null)
                            {
                                foreach (var subItem in TexturesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Unknown;
            public Exception? VertexNormals;
            public Exception? VertexHeightMap;
            public Exception? VertexColors;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>? Layers;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Textures;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
                switch (enu)
                {
                    case Landscape_FieldIndex.Unknown:
                        return Unknown;
                    case Landscape_FieldIndex.VertexNormals:
                        return VertexNormals;
                    case Landscape_FieldIndex.VertexHeightMap:
                        return VertexHeightMap;
                    case Landscape_FieldIndex.VertexColors:
                        return VertexColors;
                    case Landscape_FieldIndex.Layers:
                        return Layers;
                    case Landscape_FieldIndex.Textures:
                        return Textures;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
                switch (enu)
                {
                    case Landscape_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Landscape_FieldIndex.VertexNormals:
                        this.VertexNormals = ex;
                        break;
                    case Landscape_FieldIndex.VertexHeightMap:
                        this.VertexHeightMap = ex;
                        break;
                    case Landscape_FieldIndex.VertexColors:
                        this.VertexColors = ex;
                        break;
                    case Landscape_FieldIndex.Layers:
                        this.Layers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>(ex, null);
                        break;
                    case Landscape_FieldIndex.Textures:
                        this.Textures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
                switch (enu)
                {
                    case Landscape_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Landscape_FieldIndex.VertexNormals:
                        this.VertexNormals = (Exception?)obj;
                        break;
                    case Landscape_FieldIndex.VertexHeightMap:
                        this.VertexHeightMap = (Exception?)obj;
                        break;
                    case Landscape_FieldIndex.VertexColors:
                        this.VertexColors = (Exception?)obj;
                        break;
                    case Landscape_FieldIndex.Layers:
                        this.Layers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>)obj;
                        break;
                    case Landscape_FieldIndex.Textures:
                        this.Textures = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown != null) return true;
                if (VertexNormals != null) return true;
                if (VertexHeightMap != null) return true;
                if (VertexColors != null) return true;
                if (Layers != null) return true;
                if (Textures != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(VertexNormals, "VertexNormals");
                fg.AppendItem(VertexHeightMap, "VertexHeightMap");
                fg.AppendItem(VertexColors, "VertexColors");
                if (Layers.TryGet(out var LayersItem))
                {
                    fg.AppendLine("Layers =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LayersItem.Overall);
                        if (LayersItem.Specific != null)
                        {
                            foreach (var subItem in LayersItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Textures.TryGet(out var TexturesItem))
                {
                    fg.AppendLine("Textures =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(TexturesItem.Overall);
                        if (TexturesItem.Specific != null)
                        {
                            foreach (var subItem in TexturesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.VertexNormals = this.VertexNormals.Combine(rhs.VertexNormals);
                ret.VertexHeightMap = this.VertexHeightMap.Combine(rhs.VertexHeightMap);
                ret.VertexColors = this.VertexColors.Combine(rhs.VertexColors);
                ret.Layers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>(ExceptionExt.Combine(this.Layers?.Overall, rhs.Layers?.Overall), ExceptionExt.Combine(this.Layers?.Specific, rhs.Layers?.Specific));
                ret.Textures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Textures?.Overall, rhs.Textures?.Overall), ExceptionExt.Combine(this.Textures?.Specific, rhs.Textures?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Unknown;
            public bool VertexNormals;
            public bool VertexHeightMap;
            public bool VertexColors;
            public MaskItem<bool, BaseLayer.TranslationMask?> Layers;
            public bool Textures;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Unknown = defaultOn;
                this.VertexNormals = defaultOn;
                this.VertexHeightMap = defaultOn;
                this.VertexColors = defaultOn;
                this.Layers = new MaskItem<bool, BaseLayer.TranslationMask?>(defaultOn, null);
                this.Textures = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Unknown, null));
                ret.Add((VertexNormals, null));
                ret.Add((VertexHeightMap, null));
                ret.Add((VertexColors, null));
                ret.Add((Layers?.Overall ?? true, Layers?.Specific?.GetCrystal()));
                ret.Add((Textures, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Landscape_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => LandscapeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => LandscapeCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeCommon.Instance.RemapLinks(this, mapping);
        public Landscape(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Landscape(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Landscape(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Landscape CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Landscape CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Landscape();
            ((LandscapeSetterCommon)((ILandscapeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandscapeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Landscape GetNew()
        {
            return new Landscape();
        }

    }
    #endregion

    #region Interface
    public partial interface ILandscape :
        ILandscapeGetter,
        IOblivionMajorRecord,
        IPlaced,
        ILoquiObjectSetter<ILandscapeInternal>
    {
        new Byte[]? Unknown { get; set; }
        new Byte[]? VertexNormals { get; set; }
        new Byte[]? VertexHeightMap { get; set; }
        new Byte[]? VertexColors { get; set; }
        new ExtendedList<BaseLayer> Layers { get; }
        new ExtendedList<IFormLink<LandTexture>>? Textures { get; set; }
    }

    public partial interface ILandscapeInternal :
        IOblivionMajorRecordInternal,
        ILandscape,
        ILandscapeGetter
    {
    }

    public partial interface ILandscapeGetter :
        IOblivionMajorRecordGetter,
        IPlacedGetter,
        ILoquiObject<ILandscapeGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Landscape_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? Unknown { get; }
        ReadOnlyMemorySlice<Byte>? VertexNormals { get; }
        ReadOnlyMemorySlice<Byte>? VertexHeightMap { get; }
        ReadOnlyMemorySlice<Byte>? VertexColors { get; }
        IReadOnlyList<IBaseLayerGetter> Layers { get; }
        IReadOnlyList<IFormLinkGetter<ILandTextureGetter>>? Textures { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LandscapeMixIn
    {
        public static void Clear(this ILandscapeInternal item)
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Landscape.Mask<bool> GetEqualsMask(
            this ILandscapeGetter item,
            ILandscapeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILandscapeGetter item,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILandscapeGetter item,
            FileGeneration fg,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILandscapeGetter item,
            Landscape.Mask<bool?> checkMask)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Landscape.Mask<bool> GetHasBeenSetMask(this ILandscapeGetter item)
        {
            var ret = new Landscape.Mask<bool>(false);
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILandscapeGetter item,
            ILandscapeGetter rhs)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILandscapeInternal lhs,
            ILandscapeGetter rhs,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Landscape.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILandscapeInternal lhs,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Landscape DeepCopy(
            this ILandscapeGetter item,
            Landscape.TranslationMask? copyMask = null)
        {
            return ((LandscapeSetterTranslationCommon)((ILandscapeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Landscape DeepCopy(
            this ILandscapeGetter item,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? copyMask = null)
        {
            return ((LandscapeSetterTranslationCommon)((ILandscapeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Landscape DeepCopy(
            this ILandscapeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LandscapeSetterTranslationCommon)((ILandscapeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILandscapeInternal item,
            XElement node,
            Landscape.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILandscapeInternal item,
            XElement node,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Landscape.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            string path,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            string path,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            Stream stream,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            Stream stream,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILandscapeInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Landscape.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILandscapeInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILandscapeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Landscape_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Unknown = 5,
        VertexNormals = 6,
        VertexHeightMap = 7,
        VertexColors = 8,
        Layers = 9,
        Textures = 10,
    }
    #endregion

    #region Registration
    public partial class Landscape_Registration : ILoquiRegistration
    {
        public static readonly Landscape_Registration Instance = new Landscape_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 143,
            version: 0);

        public const string GUID = "f03a09c7-ce1f-4764-ac9a-bccccfa481d4";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Landscape.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Landscape.ErrorMask);

        public static readonly Type ClassType = typeof(Landscape);

        public static readonly Type GetterType = typeof(ILandscapeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandscape);

        public static readonly Type? InternalSetterType = typeof(ILandscapeInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Landscape";

        public const string Name = "Landscape";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "UNKNOWN":
                    return (ushort)Landscape_FieldIndex.Unknown;
                case "VERTEXNORMALS":
                    return (ushort)Landscape_FieldIndex.VertexNormals;
                case "VERTEXHEIGHTMAP":
                    return (ushort)Landscape_FieldIndex.VertexHeightMap;
                case "VERTEXCOLORS":
                    return (ushort)Landscape_FieldIndex.VertexColors;
                case "LAYERS":
                    return (ushort)Landscape_FieldIndex.Layers;
                case "TEXTURES":
                    return (ushort)Landscape_FieldIndex.Textures;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return true;
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Layers:
                    return true;
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return "Unknown";
                case Landscape_FieldIndex.VertexNormals:
                    return "VertexNormals";
                case Landscape_FieldIndex.VertexHeightMap:
                    return "VertexHeightMap";
                case Landscape_FieldIndex.VertexColors:
                    return "VertexColors";
                case Landscape_FieldIndex.Layers:
                    return "Layers";
                case Landscape_FieldIndex.Textures:
                    return "Textures";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                case Landscape_FieldIndex.VertexNormals:
                case Landscape_FieldIndex.VertexHeightMap:
                case Landscape_FieldIndex.VertexColors:
                case Landscape_FieldIndex.Layers:
                case Landscape_FieldIndex.Textures:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
            switch (enu)
            {
                case Landscape_FieldIndex.Unknown:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexNormals:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexHeightMap:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.VertexColors:
                    return typeof(Byte[]);
                case Landscape_FieldIndex.Layers:
                    return typeof(ExtendedList<BaseLayer>);
                case Landscape_FieldIndex.Textures:
                    return typeof(ExtendedList<IFormLink<LandTexture>>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LandscapeXmlWriteTranslation);
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType VNML_HEADER = new RecordType("VNML");
        public static readonly RecordType VHGT_HEADER = new RecordType("VHGT");
        public static readonly RecordType VCLR_HEADER = new RecordType("VCLR");
        public static readonly RecordType BTXT_HEADER = new RecordType("BTXT");
        public static readonly RecordType ATXT_HEADER = new RecordType("ATXT");
        public static readonly RecordType VTEX_HEADER = new RecordType("VTEX");
        public static readonly RecordType TriggeringRecordType = LAND_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(LandscapeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LandscapeSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly LandscapeSetterCommon Instance = new LandscapeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILandscapeInternal item)
        {
            ClearPartial();
            item.Unknown = default;
            item.VertexNormals = default;
            item.VertexHeightMap = default;
            item.VertexColors = default;
            item.Layers.Clear();
            item.Textures = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILandscapeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandscapeInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILandscapeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ILandscapeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LandscapeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Landscape)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Landscape)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Landscape_Registration.LAND_HEADER;
        protected static void FillBinaryStructs(
            ILandscapeInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILandscapeInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Unknown);
                }
                case 0x4C4D4E56: // VNML
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VertexNormals = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexNormals);
                }
                case 0x54474856: // VHGT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VertexHeightMap = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexHeightMap);
                }
                case 0x524C4356: // VCLR
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.VertexColors = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexColors);
                }
                case 0x54585442: // BTXT
                case 0x54585441: // ATXT
                {
                    item.Layers.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<BaseLayer>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: BaseLayer_Registration.TriggeringRecordTypes,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, RecordType header, out BaseLayer listSubItem, RecordTypeConverter? conv) =>
                            {
                                switch (header.TypeInt)
                                {
                                    case 0x54585442: // BTXT
                                        return LoquiBinaryTranslation<BaseLayer>.Instance.Parse(
                                            frame: r,
                                            item: out listSubItem!,
                                            recordTypeConverter: conv);
                                    case 0x54585441: // ATXT
                                        return LoquiBinaryTranslation<AlphaLayer>.Instance.Parse(
                                            frame: r,
                                            item: out listSubItem!,
                                            recordTypeConverter: conv);
                                    default:
                                        throw new NotImplementedException();
                                }
                            }));
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Layers);
                }
                case 0x58455456: // VTEX
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Textures = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<LandTexture>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<LandTexture>>();
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Textures);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            ILandscapeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILandscapeInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Landscape)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Landscape)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class LandscapeCommon : OblivionMajorRecordCommon
    {
        public new static readonly LandscapeCommon Instance = new LandscapeCommon();

        public Landscape.Mask<bool> GetEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Landscape.Mask<bool>(false);
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            Landscape.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Unknown = MemorySliceExt.Equal(item.Unknown, rhs.Unknown);
            ret.VertexNormals = MemorySliceExt.Equal(item.VertexNormals, rhs.VertexNormals);
            ret.VertexHeightMap = MemorySliceExt.Equal(item.VertexHeightMap, rhs.VertexHeightMap);
            ret.VertexColors = MemorySliceExt.Equal(item.VertexColors, rhs.VertexColors);
            ret.Layers = item.Layers.CollectionEqualsHelper(
                rhs.Layers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Textures = item.Textures.CollectionEqualsHelper(
                rhs.Textures,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILandscapeGetter item,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILandscapeGetter item,
            FileGeneration fg,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Landscape =>");
            }
            else
            {
                fg.AppendLine($"{name} (Landscape) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILandscapeGetter item,
            FileGeneration fg,
            Landscape.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Unknown ?? true)
                && item.Unknown.TryGet(out var UnknownItem))
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(UnknownItem)}");
            }
            if ((printMask?.VertexNormals ?? true)
                && item.VertexNormals.TryGet(out var VertexNormalsItem))
            {
                fg.AppendLine($"VertexNormals => {SpanExt.ToHexString(VertexNormalsItem)}");
            }
            if ((printMask?.VertexHeightMap ?? true)
                && item.VertexHeightMap.TryGet(out var VertexHeightMapItem))
            {
                fg.AppendLine($"VertexHeightMap => {SpanExt.ToHexString(VertexHeightMapItem)}");
            }
            if ((printMask?.VertexColors ?? true)
                && item.VertexColors.TryGet(out var VertexColorsItem))
            {
                fg.AppendLine($"VertexColors => {SpanExt.ToHexString(VertexColorsItem)}");
            }
            if (printMask?.Layers?.Overall ?? true)
            {
                fg.AppendLine("Layers =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Layers)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Textures?.Overall ?? true)
                && item.Textures.TryGet(out var TexturesItem))
            {
                fg.AppendLine("Textures =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in TexturesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILandscapeGetter item,
            Landscape.Mask<bool?> checkMask)
        {
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != (item.Unknown != null)) return false;
            if (checkMask.VertexNormals.HasValue && checkMask.VertexNormals.Value != (item.VertexNormals != null)) return false;
            if (checkMask.VertexHeightMap.HasValue && checkMask.VertexHeightMap.Value != (item.VertexHeightMap != null)) return false;
            if (checkMask.VertexColors.HasValue && checkMask.VertexColors.Value != (item.VertexColors != null)) return false;
            if (checkMask.Textures?.Overall.HasValue ?? false && checkMask.Textures!.Overall.Value != (item.Textures != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILandscapeGetter item,
            Landscape.Mask<bool> mask)
        {
            mask.Unknown = (item.Unknown != null);
            mask.VertexNormals = (item.VertexNormals != null);
            mask.VertexHeightMap = (item.VertexHeightMap != null);
            mask.VertexColors = (item.VertexColors != null);
            var LayersItem = item.Layers;
            mask.Layers = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, BaseLayer.Mask<bool>?>>?>(true, LayersItem.WithIndex().Select((i) => new MaskItemIndexed<bool, BaseLayer.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.Textures = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Textures != null), default);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Landscape_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Landscape_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandscapeGetter? lhs,
            ILandscapeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!MemorySliceExt.Equal(lhs.Unknown, rhs.Unknown)) return false;
            if (!MemorySliceExt.Equal(lhs.VertexNormals, rhs.VertexNormals)) return false;
            if (!MemorySliceExt.Equal(lhs.VertexHeightMap, rhs.VertexHeightMap)) return false;
            if (!MemorySliceExt.Equal(lhs.VertexColors, rhs.VertexColors)) return false;
            if (!lhs.Layers.SequenceEqual(rhs.Layers)) return false;
            if (!lhs.Textures.SequenceEqual(rhs.Textures)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandscapeGetter?)lhs,
                rhs: rhs as ILandscapeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILandscapeGetter?)lhs,
                rhs: rhs as ILandscapeGetter);
        }
        
        public virtual int GetHashCode(ILandscapeGetter item)
        {
            var hash = new HashCode();
            if (item.Unknown.TryGet(out var UnknownItem))
            {
                hash.Add(UnknownItem);
            }
            if (item.VertexNormals.TryGet(out var VertexNormalsItem))
            {
                hash.Add(VertexNormalsItem);
            }
            if (item.VertexHeightMap.TryGet(out var VertexHeightMapItem))
            {
                hash.Add(VertexHeightMapItem);
            }
            if (item.VertexColors.TryGet(out var VertexColorsItem))
            {
                hash.Add(VertexColorsItem);
            }
            hash.Add(item.Layers);
            hash.Add(item.Textures);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Landscape.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ILandscapeGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Layers.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.Textures.TryGet(out var TexturesItem))
            {
                foreach (var item in TexturesItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(ILandscapeGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Landscape obj, Landscape rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Landscape(getNextFormKey());
            ret.DeepCopyIn((Landscape)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Landscape)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LandscapeSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly LandscapeSetterTranslationCommon Instance = new LandscapeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILandscapeInternal item,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ILandscape item,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown.TryGet(out var Unknownrhs))
                {
                    item.Unknown = Unknownrhs.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexNormals) ?? true))
            {
                if(rhs.VertexNormals.TryGet(out var VertexNormalsrhs))
                {
                    item.VertexNormals = VertexNormalsrhs.ToArray();
                }
                else
                {
                    item.VertexNormals = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexHeightMap) ?? true))
            {
                if(rhs.VertexHeightMap.TryGet(out var VertexHeightMaprhs))
                {
                    item.VertexHeightMap = VertexHeightMaprhs.ToArray();
                }
                else
                {
                    item.VertexHeightMap = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexColors) ?? true))
            {
                if(rhs.VertexColors.TryGet(out var VertexColorsrhs))
                {
                    item.VertexColors = VertexColorsrhs.ToArray();
                }
                else
                {
                    item.VertexColors = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.Layers) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Layers);
                try
                {
                    item.Layers.SetTo(
                        rhs.Layers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.Textures) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Textures);
                try
                {
                    if ((rhs.Textures != null))
                    {
                        item.Textures = 
                            rhs.Textures
                            .Select(r => (IFormLink<LandTexture>)new FormLink<LandTexture>(r.FormKey))
                            .ToExtendedList<IFormLink<LandTexture>>();
                    }
                    else
                    {
                        item.Textures = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscapeInternal)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscape)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscapeInternal)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILandscape)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Landscape DeepCopy(
            ILandscapeGetter item,
            Landscape.TranslationMask? copyMask = null)
        {
            Landscape ret = (Landscape)((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Landscape DeepCopy(
            ILandscapeGetter item,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? copyMask = null)
        {
            Landscape ret = (Landscape)((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Landscape DeepCopy(
            ILandscapeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Landscape ret = (Landscape)((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Landscape
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static Landscape_Registration Registration => Landscape_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LandscapeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandscapeXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LandscapeXmlWriteTranslation Instance = new LandscapeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILandscapeGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Unknown != null)
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown.Value,
                    fieldIndex: (int)Landscape_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.VertexNormals != null)
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexNormals) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VertexNormals),
                    item: item.VertexNormals.Value,
                    fieldIndex: (int)Landscape_FieldIndex.VertexNormals,
                    errorMask: errorMask);
            }
            if ((item.VertexHeightMap != null)
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexHeightMap) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VertexHeightMap),
                    item: item.VertexHeightMap.Value,
                    fieldIndex: (int)Landscape_FieldIndex.VertexHeightMap,
                    errorMask: errorMask);
            }
            if ((item.VertexColors != null)
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexColors) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VertexColors),
                    item: item.VertexColors.Value,
                    fieldIndex: (int)Landscape_FieldIndex.VertexColors,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.Layers) ?? true))
            {
                ListXmlTranslation<IBaseLayerGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Layers),
                    item: item.Layers,
                    fieldIndex: (int)Landscape_FieldIndex.Layers,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Landscape_FieldIndex.Layers),
                    transl: (XElement subNode, IBaseLayerGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((BaseLayerXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.Textures != null)
                && (translationMask?.GetShouldTranslate((int)Landscape_FieldIndex.Textures) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<ILandTextureGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Textures),
                    item: item.Textures,
                    fieldIndex: (int)Landscape_FieldIndex.Textures,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Landscape_FieldIndex.Textures),
                    transl: (XElement subNode, IFormLinkGetter<ILandTextureGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
        }

        public void Write(
            XElement node,
            ILandscapeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Landscape");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Landscape");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LandscapeXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static LandscapeXmlCreateTranslation Instance = new LandscapeXmlCreateTranslation();

        public static void FillPublicXml(
            ILandscapeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LandscapeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILandscapeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Unknown":
                    errorMask?.PushIndex((int)Landscape_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexNormals":
                    errorMask?.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                    try
                    {
                        item.VertexNormals = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexHeightMap":
                    errorMask?.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                    try
                    {
                        item.VertexHeightMap = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VertexColors":
                    errorMask?.PushIndex((int)Landscape_FieldIndex.VertexColors);
                    try
                    {
                        item.VertexColors = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Layers":
                    errorMask?.PushIndex((int)Landscape_FieldIndex.Layers);
                    try
                    {
                        if (ListXmlTranslation<BaseLayer>.Instance.Parse(
                            node: node,
                            enumer: out var LayersItem,
                            transl: LoquiXmlTranslation<BaseLayer>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Layers.SetTo(LayersItem);
                        }
                        else
                        {
                            item.Layers.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Textures":
                    errorMask?.PushIndex((int)Landscape_FieldIndex.Textures);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<LandTexture>>.Instance.Parse(
                            node: node,
                            enumer: out var TexturesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Textures = TexturesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Textures = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LandscapeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILandscapeGetter item,
            XElement node,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LandscapeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Landscape.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILandscapeGetter item,
            string path,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILandscapeGetter item,
            Stream stream,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandscapeBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LandscapeBinaryWriteTranslation Instance = new LandscapeBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILandscapeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.DATA_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VertexNormals,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VNML_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VertexHeightMap,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VHGT_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VertexColors,
                header: recordTypeConverter.ConvertToCustom(Landscape_Registration.VCLR_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IBaseLayerGetter>.Instance.Write(
                writer: writer,
                items: item.Layers,
                transl: (MutagenWriter subWriter, IBaseLayerGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((BaseLayerBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<ILandTextureGetter>>.Instance.Write(
                writer: writer,
                items: item.Textures,
                recordType: recordTypeConverter.ConvertToCustom(Landscape_Registration.VTEX_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILandTextureGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            ILandscapeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Landscape_Registration.LAND_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILandscapeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LandscapeBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static LandscapeBinaryCreateTranslation Instance = new LandscapeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LandscapeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LandscapeBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ILandscapeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static Landscape_Registration Registration => Landscape_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILandscapeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => LandscapeCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => LandscapeCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LandscapeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LandscapeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LandscapeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Unknown
        private int? _UnknownLocation;
        public ReadOnlyMemorySlice<Byte>? Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region VertexNormals
        private int? _VertexNormalsLocation;
        public ReadOnlyMemorySlice<Byte>? VertexNormals => _VertexNormalsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _VertexNormalsLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region VertexHeightMap
        private int? _VertexHeightMapLocation;
        public ReadOnlyMemorySlice<Byte>? VertexHeightMap => _VertexHeightMapLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _VertexHeightMapLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region VertexColors
        private int? _VertexColorsLocation;
        public ReadOnlyMemorySlice<Byte>? VertexColors => _VertexColorsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _VertexColorsLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IBaseLayerGetter> Layers { get; private set; } = ListExt.Empty<BaseLayerBinaryOverlay>();
        public IReadOnlyList<IFormLinkGetter<ILandTextureGetter>>? Textures { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LandscapeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LandscapeBinaryOverlay LandscapeFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LandscapeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static LandscapeBinaryOverlay LandscapeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LandscapeFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x41544144: // DATA
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Unknown);
                }
                case 0x4C4D4E56: // VNML
                {
                    _VertexNormalsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexNormals);
                }
                case 0x54474856: // VHGT
                {
                    _VertexHeightMapLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexHeightMap);
                }
                case 0x524C4356: // VCLR
                {
                    _VertexColorsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.VertexColors);
                }
                case 0x54585442: // BTXT
                case 0x54585441: // ATXT
                {
                    this.Layers = this.ParseRepeatedTypelessSubrecord<BaseLayerBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: BaseLayer_Registration.TriggeringRecordTypes,
                        factory: (s, r, p, recConv) =>
                        {
                            switch (r.TypeInt)
                            {
                                case 0x54585442: // BTXT
                                    return BaseLayerBinaryOverlay.BaseLayerFactory(s, p);
                                case 0x54585441: // ATXT
                                    return AlphaLayerBinaryOverlay.AlphaLayerFactory(s, p);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Layers);
                }
                case 0x58455456: // VTEX
                {
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Textures = BinaryOverlaySetList<IFormLinkGetter<ILandTextureGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<ILandTextureGetter>(FormKey.Factory(p.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Landscape_FieldIndex.Textures);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LandscapeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

