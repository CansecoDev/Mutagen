/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LeveledCreature :
        NpcSpawn,
        ILeveledCreatureInternal,
        ILoquiObjectSetter<LeveledCreature>,
        IEquatable<LeveledCreature>,
        IEqualsMask
    {
        #region Ctor
        protected LeveledCreature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ChanceNone
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte? _ChanceNone;
        public Byte? ChanceNone
        {
            get => this._ChanceNone;
            set => this._ChanceNone = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ILeveledCreatureGetter.ChanceNone => this.ChanceNone;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LeveledFlag? _Flags;
        public LeveledFlag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LeveledFlag? ILeveledCreatureGetter.Flags => this.Flags;
        #endregion
        #region Entries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LeveledEntry<NpcSpawn>>? _Entries;
        public ExtendedList<LeveledEntry<NpcSpawn>>? Entries
        {
            get => this._Entries;
            set => this._Entries = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILeveledEntryGetter<INpcSpawnGetter>>? ILeveledCreatureGetter.Entries => _Entries;
        #endregion

        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Script> _Script = new FormLinkNullable<Script>();
        public IFormLinkNullable<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> ILeveledCreatureGetter.Script => this.Script;
        #endregion
        #region Template
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<ANpc> _Template = new FormLinkNullable<ANpc>();
        public IFormLinkNullable<ANpc> Template => this._Template;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IANpcGetter> ILeveledCreatureGetter.Template => this.Template;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LeveledCreatureMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILeveledCreatureGetter rhs)) return false;
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LeveledCreature obj)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LeveledCreatureCommon)((ILeveledCreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LeveledCreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LeveledCreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new LeveledCreature CreateFromXml(
            XElement node,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LeveledCreature CreateFromXml(
            XElement node,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LeveledCreature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LeveledCreature CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LeveledCreature();
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LeveledCreature CreateFromXml(
            string path,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LeveledCreature CreateFromXml(
            string path,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledCreature CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LeveledCreature CreateFromXml(
            Stream stream,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LeveledCreature CreateFromXml(
            Stream stream,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LeveledCreature CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            NpcSpawn.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ChanceNone = initialValue;
                this.Flags = initialValue;
                this.Entries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>());
                this.Script = initialValue;
                this.Template = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem ChanceNone,
                TItem Flags,
                TItem Entries,
                TItem Script,
                TItem Template)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.ChanceNone = ChanceNone;
                this.Flags = Flags;
                this.Entries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>?>(Entries, Enumerable.Empty<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>());
                this.Script = Script;
                this.Template = Template;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ChanceNone;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LeveledEntry.Mask<TItem>?>>?>? Entries;
            public TItem Script;
            public TItem Template;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ChanceNone, rhs.ChanceNone)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Entries, rhs.Entries)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.ChanceNone?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Entries?.GetHashCode());
                ret = ret.CombineHashCode(this.Script?.GetHashCode());
                ret = ret.CombineHashCode(this.Template?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ChanceNone)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Entries != null)
                {
                    if (!eval(this.Entries.Overall)) return false;
                    if (this.Entries.Specific != null)
                    {
                        foreach (var item in this.Entries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Script)) return false;
                if (!eval(this.Template)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ChanceNone)) return true;
                if (eval(this.Flags)) return true;
                if (this.Entries != null)
                {
                    if (eval(this.Entries.Overall)) return true;
                    if (this.Entries.Specific != null)
                    {
                        foreach (var item in this.Entries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Script)) return true;
                if (eval(this.Template)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LeveledCreature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ChanceNone = eval(this.ChanceNone);
                obj.Flags = eval(this.Flags);
                if (Entries != null)
                {
                    obj.Entries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LeveledEntry.Mask<R>?>>?>(eval(this.Entries.Overall), Enumerable.Empty<MaskItemIndexed<R, LeveledEntry.Mask<R>?>>());
                    if (Entries.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LeveledEntry.Mask<R>?>>();
                        obj.Entries.Specific = l;
                        foreach (var item in Entries.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LeveledEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LeveledEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Script = eval(this.Script);
                obj.Template = eval(this.Template);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LeveledCreature.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LeveledCreature.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LeveledCreature.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.ChanceNone ?? true)
                    {
                        fg.AppendItem(ChanceNone, "ChanceNone");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Entries?.Overall ?? true)
                        && Entries.TryGet(out var EntriesItem))
                    {
                        fg.AppendLine("Entries =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EntriesItem.Overall);
                            if (EntriesItem.Specific != null)
                            {
                                foreach (var subItem in EntriesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Template ?? true)
                    {
                        fg.AppendItem(Template, "Template");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            NpcSpawn.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ChanceNone;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<NpcSpawn.ErrorMask>?>>?>? Entries;
            public Exception? Script;
            public Exception? Template;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
                switch (enu)
                {
                    case LeveledCreature_FieldIndex.ChanceNone:
                        return ChanceNone;
                    case LeveledCreature_FieldIndex.Flags:
                        return Flags;
                    case LeveledCreature_FieldIndex.Entries:
                        return Entries;
                    case LeveledCreature_FieldIndex.Script:
                        return Script;
                    case LeveledCreature_FieldIndex.Template:
                        return Template;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
                switch (enu)
                {
                    case LeveledCreature_FieldIndex.ChanceNone:
                        this.ChanceNone = ex;
                        break;
                    case LeveledCreature_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LeveledCreature_FieldIndex.Entries:
                        this.Entries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<NpcSpawn.ErrorMask>?>>?>(ex, null);
                        break;
                    case LeveledCreature_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case LeveledCreature_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
                switch (enu)
                {
                    case LeveledCreature_FieldIndex.ChanceNone:
                        this.ChanceNone = (Exception?)obj;
                        break;
                    case LeveledCreature_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LeveledCreature_FieldIndex.Entries:
                        this.Entries = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<NpcSpawn.ErrorMask>?>>?>)obj;
                        break;
                    case LeveledCreature_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case LeveledCreature_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ChanceNone != null) return true;
                if (Flags != null) return true;
                if (Entries != null) return true;
                if (Script != null) return true;
                if (Template != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(ChanceNone, "ChanceNone");
                fg.AppendItem(Flags, "Flags");
                if (Entries.TryGet(out var EntriesItem))
                {
                    fg.AppendLine("Entries =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EntriesItem.Overall);
                        if (EntriesItem.Specific != null)
                        {
                            foreach (var subItem in EntriesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Script, "Script");
                fg.AppendItem(Template, "Template");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ChanceNone = this.ChanceNone.Combine(rhs.ChanceNone);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Entries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LeveledEntry.ErrorMask<NpcSpawn.ErrorMask>?>>?>(ExceptionExt.Combine(this.Entries?.Overall, rhs.Entries?.Overall), ExceptionExt.Combine(this.Entries?.Specific, rhs.Entries?.Specific));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Template = this.Template.Combine(rhs.Template);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            NpcSpawn.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ChanceNone;
            public bool Flags;
            public MaskItem<bool, LeveledEntry.TranslationMask<NpcSpawn.TranslationMask>?> Entries;
            public bool Script;
            public bool Template;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.ChanceNone = defaultOn;
                this.Flags = defaultOn;
                this.Entries = new MaskItem<bool, LeveledEntry.TranslationMask<NpcSpawn.TranslationMask>?>(defaultOn, null);
                this.Script = defaultOn;
                this.Template = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ChanceNone, null));
                ret.Add((Flags, null));
                ret.Add((Entries?.Overall ?? true, Entries?.Specific?.GetCrystal()));
                ret.Add((Script, null));
                ret.Add((Template, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LeveledCreature_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => LeveledCreatureCommon.Instance.GetLinks(this);
        public LeveledCreature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LeveledCreature(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public LeveledCreature(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LeveledCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new LeveledCreature CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static LeveledCreature CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LeveledCreature();
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledCreatureGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LeveledCreature GetNew()
        {
            return new LeveledCreature();
        }

    }
    #endregion

    #region Interface
    public partial interface ILeveledCreature :
        ILeveledCreatureGetter,
        INpcSpawn,
        ILoquiObjectSetter<ILeveledCreatureInternal>
    {
        new Byte? ChanceNone { get; set; }
        new LeveledFlag? Flags { get; set; }
        new ExtendedList<LeveledEntry<NpcSpawn>>? Entries { get; set; }
        new IFormLinkNullable<Script> Script { get; }
        new IFormLinkNullable<ANpc> Template { get; }
    }

    public partial interface ILeveledCreatureInternal :
        INpcSpawnInternal,
        ILeveledCreature,
        ILeveledCreatureGetter
    {
    }

    public partial interface ILeveledCreatureGetter :
        INpcSpawnGetter,
        ILoquiObject<ILeveledCreatureGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        Byte? ChanceNone { get; }
        LeveledFlag? Flags { get; }
        IReadOnlyList<ILeveledEntryGetter<INpcSpawnGetter>>? Entries { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IFormLinkNullableGetter<IANpcGetter> Template { get; }

    }

    #endregion

    #region Common MixIn
    public static class LeveledCreatureMixIn
    {
        public static void Clear(this ILeveledCreatureInternal item)
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LeveledCreature.Mask<bool> GetEqualsMask(
            this ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILeveledCreatureGetter item,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILeveledCreatureGetter item,
            FileGeneration fg,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILeveledCreatureGetter item,
            LeveledCreature.Mask<bool?> checkMask)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LeveledCreature.Mask<bool> GetHasBeenSetMask(this ILeveledCreatureGetter item)
        {
            var ret = new LeveledCreature.Mask<bool>(false);
            ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs)
        {
            return ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILeveledCreatureInternal lhs,
            ILeveledCreatureGetter rhs,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LeveledCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILeveledCreatureInternal lhs,
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LeveledCreature DeepCopy(
            this ILeveledCreatureGetter item,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            return ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LeveledCreature DeepCopy(
            this ILeveledCreatureGetter item,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            return ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LeveledCreature DeepCopy(
            this ILeveledCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LeveledCreatureSetterTranslationCommon)((ILeveledCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            XElement node,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            XElement node,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LeveledCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            string path,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            string path,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            Stream stream,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            Stream stream,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILeveledCreatureInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LeveledCreature.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILeveledCreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILeveledCreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledCreatureSetterCommon)((ILeveledCreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LeveledCreature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        ChanceNone = 5,
        Flags = 6,
        Entries = 7,
        Script = 8,
        Template = 9,
    }
    #endregion

    #region Registration
    public partial class LeveledCreature_Registration : ILoquiRegistration
    {
        public static readonly LeveledCreature_Registration Instance = new LeveledCreature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 93,
            version: 0);

        public const string GUID = "3b7a7716-fb68-4925-94fc-7ec66bea9349";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(LeveledCreature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LeveledCreature.ErrorMask);

        public static readonly Type ClassType = typeof(LeveledCreature);

        public static readonly Type GetterType = typeof(ILeveledCreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILeveledCreature);

        public static readonly Type? InternalSetterType = typeof(ILeveledCreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LeveledCreature";

        public const string Name = "LeveledCreature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CHANCENONE":
                    return (ushort)LeveledCreature_FieldIndex.ChanceNone;
                case "FLAGS":
                    return (ushort)LeveledCreature_FieldIndex.Flags;
                case "ENTRIES":
                    return (ushort)LeveledCreature_FieldIndex.Entries;
                case "SCRIPT":
                    return (ushort)LeveledCreature_FieldIndex.Script;
                case "TEMPLATE":
                    return (ushort)LeveledCreature_FieldIndex.Template;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.Entries:
                    return true;
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NpcSpawn_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.Entries:
                    return true;
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NpcSpawn_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NpcSpawn_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return "ChanceNone";
                case LeveledCreature_FieldIndex.Flags:
                    return "Flags";
                case LeveledCreature_FieldIndex.Entries:
                    return "Entries";
                case LeveledCreature_FieldIndex.Script:
                    return "Script";
                case LeveledCreature_FieldIndex.Template:
                    return "Template";
                default:
                    return NpcSpawn_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NpcSpawn_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                case LeveledCreature_FieldIndex.Flags:
                case LeveledCreature_FieldIndex.Entries:
                case LeveledCreature_FieldIndex.Script:
                case LeveledCreature_FieldIndex.Template:
                    return false;
                default:
                    return NpcSpawn_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LeveledCreature_FieldIndex enu = (LeveledCreature_FieldIndex)index;
            switch (enu)
            {
                case LeveledCreature_FieldIndex.ChanceNone:
                    return typeof(Byte);
                case LeveledCreature_FieldIndex.Flags:
                    return typeof(LeveledFlag);
                case LeveledCreature_FieldIndex.Entries:
                    return typeof(ExtendedList<LeveledEntry<NpcSpawn>>);
                case LeveledCreature_FieldIndex.Script:
                    return typeof(IFormLinkNullable<Script>);
                case LeveledCreature_FieldIndex.Template:
                    return typeof(IFormLinkNullable<ANpc>);
                default:
                    return NpcSpawn_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LeveledCreatureXmlWriteTranslation);
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType LVLD_HEADER = new RecordType("LVLD");
        public static readonly RecordType LVLF_HEADER = new RecordType("LVLF");
        public static readonly RecordType LVLO_HEADER = new RecordType("LVLO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LVLC_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(LeveledCreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LeveledCreatureSetterCommon : NpcSpawnSetterCommon
    {
        public new static readonly LeveledCreatureSetterCommon Instance = new LeveledCreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILeveledCreatureInternal item)
        {
            ClearPartial();
            item.ChanceNone = default;
            item.Flags = default;
            item.Entries = null;
            item.Script.FormKey = null;
            item.Template.FormKey = null;
            base.Clear(item);
        }
        
        public override void Clear(INpcSpawnInternal item)
        {
            Clear(item: (ILeveledCreatureInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILeveledCreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILeveledCreatureInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILeveledCreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    NpcSpawnSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ILeveledCreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LeveledCreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LeveledCreature_Registration.LVLC_HEADER;
        protected static void FillBinaryStructs(
            ILeveledCreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            NpcSpawnSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILeveledCreatureInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444C564C: // LVLD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ChanceNone = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.ChanceNone);
                }
                case 0x464C564C: // LVLF
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<LeveledFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Flags);
                }
                case 0x4F4C564C: // LVLO
                {
                    item.Entries = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LeveledEntry<NpcSpawn>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: LeveledCreature_Registration.LVLO_HEADER,
                            masterReferences: masterReferences,
                            transl: (MutagenFrame r, out LeveledEntry<NpcSpawn> listSubItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<LeveledEntry<NpcSpawn>>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem,
                                    masterReferences: m);
                            })
                        .ToExtendedList<LeveledEntry<NpcSpawn>>();
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Entries);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Script);
                }
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Template.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Template);
                }
                default:
                    return NpcSpawnSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ILeveledCreatureInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILeveledCreatureInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LeveledCreatureCommon : NpcSpawnCommon
    {
        public new static readonly LeveledCreatureCommon Instance = new LeveledCreatureCommon();

        public LeveledCreature.Mask<bool> GetEqualsMask(
            ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LeveledCreature.Mask<bool>(false);
            ((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILeveledCreatureGetter item,
            ILeveledCreatureGetter rhs,
            LeveledCreature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.ChanceNone = item.ChanceNone == rhs.ChanceNone;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Entries = item.Entries.CollectionEqualsHelper(
                rhs.Entries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Template = object.Equals(item.Template, rhs.Template);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILeveledCreatureGetter item,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILeveledCreatureGetter item,
            FileGeneration fg,
            string? name = null,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LeveledCreature =>");
            }
            else
            {
                fg.AppendLine($"{name} (LeveledCreature) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILeveledCreatureGetter item,
            FileGeneration fg,
            LeveledCreature.Mask<bool>? printMask = null)
        {
            NpcSpawnCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.ChanceNone ?? true)
                && item.ChanceNone.TryGet(out var ChanceNoneItem))
            {
                fg.AppendItem(ChanceNoneItem, "ChanceNone");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Entries?.Overall ?? true)
                && item.Entries.TryGet(out var EntriesItem))
            {
                fg.AppendLine("Entries =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in EntriesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if ((printMask?.Template ?? true)
                && item.Template.TryGet(out var TemplateItem))
            {
                fg.AppendItem(TemplateItem, "Template");
            }
        }
        
        public bool HasBeenSet(
            ILeveledCreatureGetter item,
            LeveledCreature.Mask<bool?> checkMask)
        {
            if (checkMask.ChanceNone.HasValue && checkMask.ChanceNone.Value != (item.ChanceNone != null)) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.Entries?.Overall.HasValue ?? false && checkMask.Entries!.Overall.Value != (item.Entries != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.Template.HasValue && checkMask.Template.Value != (item.Template.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILeveledCreatureGetter item,
            LeveledCreature.Mask<bool> mask)
        {
            mask.ChanceNone = (item.ChanceNone != null);
            mask.Flags = (item.Flags != null);
            if (item.Entries.TryGet(out var EntriesItem))
            {
                mask.Entries = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LeveledEntry.Mask<bool>?>>?>(true, EntriesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, LeveledEntry.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.Script = (item.Script.FormKey != null);
            mask.Template = (item.Template.FormKey != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LeveledCreature_FieldIndex ConvertFieldIndex(NpcSpawn_FieldIndex index)
        {
            switch (index)
            {
                case NpcSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NpcSpawn_FieldIndex.FormKey:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NpcSpawn_FieldIndex.Version:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NpcSpawn_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case NpcSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LeveledCreature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LeveledCreature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LeveledCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LeveledCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILeveledCreatureGetter? lhs,
            ILeveledCreatureGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.ChanceNone != rhs.ChanceNone) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Entries.SequenceEqual(rhs.Entries)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Template.Equals(rhs.Template)) return false;
            return true;
        }
        
        public override bool Equals(
            INpcSpawnGetter? lhs,
            INpcSpawnGetter? rhs)
        {
            return Equals(
                lhs: (ILeveledCreatureGetter?)lhs,
                rhs: rhs as ILeveledCreatureGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILeveledCreatureGetter?)lhs,
                rhs: rhs as ILeveledCreatureGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILeveledCreatureGetter?)lhs,
                rhs: rhs as ILeveledCreatureGetter);
        }
        
        public virtual int GetHashCode(ILeveledCreatureGetter item)
        {
            int ret = 0;
            if (item.ChanceNone.TryGet(out var ChanceNoneitem))
            {
                ret = HashHelper.GetHashCode(ChanceNoneitem).CombineHashCode(ret);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                ret = HashHelper.GetHashCode(Flagsitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Entries).CombineHashCode(ret);
            if (item.Script.TryGet(out var Scriptitem))
            {
                ret = HashHelper.GetHashCode(Scriptitem).CombineHashCode(ret);
            }
            if (item.Template.TryGet(out var Templateitem))
            {
                ret = HashHelper.GetHashCode(Templateitem).CombineHashCode(ret);
            }
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(INpcSpawnGetter item)
        {
            return GetHashCode(item: (ILeveledCreatureGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILeveledCreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILeveledCreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LeveledCreature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILeveledCreatureGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Entries != null)
            {
                foreach (var item in obj.Entries.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield return obj.Script;
            yield return obj.Template;
            yield break;
        }
        
        partial void PostDuplicate(LeveledCreature obj, LeveledCreature rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new LeveledCreature(getNextFormKey());
            ret.DeepCopyIn((LeveledCreature)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LeveledCreature)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LeveledCreatureSetterTranslationCommon : NpcSpawnSetterTranslationCommon
    {
        public new static readonly LeveledCreatureSetterTranslationCommon Instance = new LeveledCreatureSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILeveledCreatureInternal item,
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ILeveledCreature item,
            ILeveledCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.ChanceNone) ?? true))
            {
                item.ChanceNone = rhs.ChanceNone;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Entries) ?? true))
            {
                errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Entries);
                try
                {
                    if ((rhs.Entries != null))
                    {
                        item.Entries = 
                            rhs.Entries
                            .Select(r =>
                            {
                                return r.DeepCopy<NpcSpawn, INpcSpawnGetter, NpcSpawn.TranslationMask>(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LeveledEntry<NpcSpawn>>();
                    }
                    else
                    {
                        item.Entries = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Script) ?? true))
            {
                item.Script.FormKey = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Template) ?? true))
            {
                item.Template.FormKey = rhs.Template.FormKey;
            }
        }
        
        public override void DeepCopyIn(
            INpcSpawnInternal item,
            INpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILeveledCreatureInternal)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            INpcSpawn item,
            INpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILeveledCreature)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILeveledCreatureInternal)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILeveledCreature)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILeveledCreatureInternal)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILeveledCreature)item,
                rhs: (ILeveledCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LeveledCreature DeepCopy(
            ILeveledCreatureGetter item,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            LeveledCreature ret = (LeveledCreature)((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LeveledCreature DeepCopy(
            ILeveledCreatureGetter item,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? copyMask = null)
        {
            LeveledCreature ret = (LeveledCreature)((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LeveledCreature DeepCopy(
            ILeveledCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LeveledCreature ret = (LeveledCreature)((LeveledCreatureCommon)((ILeveledCreatureGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LeveledCreature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledCreature_Registration.Instance;
        public new static LeveledCreature_Registration Registration => LeveledCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LeveledCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LeveledCreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LeveledCreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledCreatureXmlWriteTranslation :
        NpcSpawnXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LeveledCreatureXmlWriteTranslation Instance = new LeveledCreatureXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILeveledCreatureGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            NpcSpawnXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.ChanceNone != null)
                && (translationMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.ChanceNone) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ChanceNone),
                    item: item.ChanceNone.Value,
                    fieldIndex: (int)LeveledCreature_FieldIndex.ChanceNone,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<LeveledFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.Entries != null)
                && (translationMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Entries) ?? true))
            {
                ListXmlTranslation<ILeveledEntryGetter<INpcSpawnGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Entries),
                    item: item.Entries,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Entries,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LeveledCreature_FieldIndex.Entries),
                    transl: (XElement subNode, ILeveledEntryGetter<INpcSpawnGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((LeveledEntryXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write<INpcSpawnGetter>(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((item.Template.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)LeveledCreature_FieldIndex.Template) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Template),
                    item: item.Template.FormKey,
                    fieldIndex: (int)LeveledCreature_FieldIndex.Template,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILeveledCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LeveledCreature");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LeveledCreature");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            INpcSpawnGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LeveledCreatureXmlCreateTranslation : NpcSpawnXmlCreateTranslation
    {
        public new readonly static LeveledCreatureXmlCreateTranslation Instance = new LeveledCreatureXmlCreateTranslation();

        public static void FillPublicXml(
            ILeveledCreatureInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LeveledCreatureXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILeveledCreatureInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "ChanceNone":
                    errorMask?.PushIndex((int)LeveledCreature_FieldIndex.ChanceNone);
                    try
                    {
                        item.ChanceNone = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<LeveledFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entries":
                    errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Entries);
                    try
                    {
                        if (ListXmlTranslation<LeveledEntry<NpcSpawn>>.Instance.Parse(
                            node: node,
                            enumer: out var EntriesItem,
                            transl: LoquiXmlTranslation<LeveledEntry<NpcSpawn>>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Entries = EntriesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Entries = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Script);
                    try
                    {
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Template":
                    errorMask?.PushIndex((int)LeveledCreature_FieldIndex.Template);
                    try
                    {
                        item.Template.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    NpcSpawnXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LeveledCreatureXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILeveledCreatureGetter item,
            XElement node,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LeveledCreatureXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LeveledCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILeveledCreatureGetter item,
            string path,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILeveledCreatureGetter item,
            Stream stream,
            out LeveledCreature.ErrorMask errorMask,
            LeveledCreature.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledCreatureBinaryWriteTranslation :
        NpcSpawnBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LeveledCreatureBinaryWriteTranslation Instance = new LeveledCreatureBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILeveledCreatureGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ChanceNone,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.LVLD_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LeveledFlag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.LVLF_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILeveledEntryGetter<INpcSpawnGetter>>.Instance.Write(
                writer: writer,
                items: item.Entries,
                masterReferences: masterReferences,
                transl: (MutagenWriter subWriter, ILeveledEntryGetter<INpcSpawnGetter> subItem, MasterReferenceReader m, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((LeveledEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<INpcSpawnGetter>(
                            item: Item,
                            writer: subWriter,
                            masterReferences: m);
                    }
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.SCRI_HEADER),
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: recordTypeConverter.ConvertToCustom(LeveledCreature_Registration.TNAM_HEADER),
                masterReferences: masterReferences);
        }

        public void Write(
            MutagenWriter writer,
            ILeveledCreatureGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LeveledCreature_Registration.LVLC_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            INpcSpawnGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILeveledCreatureGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LeveledCreatureBinaryCreateTranslation : NpcSpawnBinaryCreateTranslation
    {
        public new readonly static LeveledCreatureBinaryCreateTranslation Instance = new LeveledCreatureBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LeveledCreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LeveledCreatureBinaryOverlay :
        NpcSpawnBinaryOverlay,
        ILeveledCreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LeveledCreature_Registration.Instance;
        public new static LeveledCreature_Registration Registration => LeveledCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LeveledCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LeveledCreatureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILeveledCreatureGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => LeveledCreatureCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LeveledCreatureXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LeveledCreatureXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LeveledCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LeveledCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region ChanceNone
        private int? _ChanceNoneLocation;
        public Byte? ChanceNone => _ChanceNoneLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _ChanceNoneLocation.Value, _package.Meta)[0] : default(Byte?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        private bool Flags_IsSet => _FlagsLocation.HasValue;
        public LeveledFlag? Flags => Flags_IsSet ? (LeveledFlag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(LeveledFlag?);
        #endregion
        public IReadOnlyList<ILeveledEntryGetter<INpcSpawnGetter>>? Entries { get; private set; }
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormLinkNullable<IScriptGetter>.Empty;
        #endregion
        #region Template
        private int? _TemplateLocation;
        public bool Template_IsSet => _TemplateLocation.HasValue;
        public IFormLinkNullableGetter<IANpcGetter> Template => _TemplateLocation.HasValue ? new FormLinkNullable<IANpcGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TemplateLocation.Value, _package.Meta)))) : FormLinkNullable<IANpcGetter>.Empty;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LeveledCreatureBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LeveledCreatureBinaryOverlay LeveledCreatureFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LeveledCreatureBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444C564C: // LVLD
                {
                    _ChanceNoneLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.ChanceNone);
                }
                case 0x464C564C: // LVLF
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Flags);
                }
                case 0x4F4C564C: // LVLO
                {
                    this.Entries = BinaryOverlaySetList<LeveledEntryBinaryOverlay<INpcSpawnGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => LeveledEntryBinaryOverlay<INpcSpawnGetter>.LeveledEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Entries);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Script);
                }
                case 0x4D414E54: // TNAM
                {
                    _TemplateLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LeveledCreature_FieldIndex.Template);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

