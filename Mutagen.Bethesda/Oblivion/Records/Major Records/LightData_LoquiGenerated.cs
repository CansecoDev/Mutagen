/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LightData :
        ILightData,
        ILoquiObjectSetter<LightData>,
        IEquatable<LightData>,
        IEqualsMask
    {
        #region Ctor
        public LightData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public LightData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Time
        public readonly static Int32 _Time_Default = -1;
        public Int32 Time { get; set; } = default;
        #endregion
        #region Radius
        public UInt32 Radius { get; set; } = default;
        #endregion
        #region Color
        public Color Color { get; set; } = default;
        #endregion
        #region Flags
        public Light.LightFlag Flags { get; set; } = default;
        #endregion
        #region FalloffExponent
        public readonly static Single _FalloffExponent_Default = 1;
        public Single FalloffExponent { get; set; } = default;
        #endregion
        #region FOV
        public readonly static Single _FOV_Default = 90;
        public Single FOV { get; set; } = default;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default;
        #endregion
        #region Weight
        public Single Weight { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LightDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILightDataGetter rhs)) return false;
            return ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LightData obj)
        {
            return ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LightDataCommon)((ILightDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LightDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LightDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LightData CreateFromXml(
            XElement node,
            LightData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LightData CreateFromXml(
            XElement node,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LightData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LightData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LightData();
            ((LightDataSetterCommon)((ILightDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LightData CreateFromXml(
            string path,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LightData CreateFromXml(
            string path,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LightData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LightData CreateFromXml(
            Stream stream,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LightData CreateFromXml(
            Stream stream,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LightData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Time = initialValue;
                this.Radius = initialValue;
                this.Color = initialValue;
                this.Flags = initialValue;
                this.FalloffExponent = initialValue;
                this.FOV = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Time,
                TItem Radius,
                TItem Color,
                TItem Flags,
                TItem FalloffExponent,
                TItem FOV,
                TItem Value,
                TItem Weight)
            {
                this.Versioning = Versioning;
                this.Time = Time;
                this.Radius = Radius;
                this.Color = Color;
                this.Flags = Flags;
                this.FalloffExponent = FalloffExponent;
                this.FOV = FOV;
                this.Value = Value;
                this.Weight = Weight;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Time;
            public TItem Radius;
            public TItem Color;
            public TItem Flags;
            public TItem FalloffExponent;
            public TItem FOV;
            public TItem Value;
            public TItem Weight;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Time, rhs.Time)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FalloffExponent, rhs.FalloffExponent)) return false;
                if (!object.Equals(this.FOV, rhs.FOV)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Time);
                hash.Add(this.Radius);
                hash.Add(this.Color);
                hash.Add(this.Flags);
                hash.Add(this.FalloffExponent);
                hash.Add(this.FOV);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Time)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FalloffExponent)) return false;
                if (!eval(this.FOV)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Time)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FalloffExponent)) return true;
                if (eval(this.FOV)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LightData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Time = eval(this.Time);
                obj.Radius = eval(this.Radius);
                obj.Color = eval(this.Color);
                obj.Flags = eval(this.Flags);
                obj.FalloffExponent = eval(this.FalloffExponent);
                obj.FOV = eval(this.FOV);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LightData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LightData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LightData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Time ?? true)
                    {
                        fg.AppendItem(Time, "Time");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        fg.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Color ?? true)
                    {
                        fg.AppendItem(Color, "Color");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FalloffExponent ?? true)
                    {
                        fg.AppendItem(FalloffExponent, "FalloffExponent");
                    }
                    if (printMask?.FOV ?? true)
                    {
                        fg.AppendItem(FOV, "FOV");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Time;
            public Exception? Radius;
            public Exception? Color;
            public Exception? Flags;
            public Exception? FalloffExponent;
            public Exception? FOV;
            public Exception? Value;
            public Exception? Weight;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LightData_FieldIndex enu = (LightData_FieldIndex)index;
                switch (enu)
                {
                    case LightData_FieldIndex.Versioning:
                        return Versioning;
                    case LightData_FieldIndex.Time:
                        return Time;
                    case LightData_FieldIndex.Radius:
                        return Radius;
                    case LightData_FieldIndex.Color:
                        return Color;
                    case LightData_FieldIndex.Flags:
                        return Flags;
                    case LightData_FieldIndex.FalloffExponent:
                        return FalloffExponent;
                    case LightData_FieldIndex.FOV:
                        return FOV;
                    case LightData_FieldIndex.Value:
                        return Value;
                    case LightData_FieldIndex.Weight:
                        return Weight;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LightData_FieldIndex enu = (LightData_FieldIndex)index;
                switch (enu)
                {
                    case LightData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case LightData_FieldIndex.Time:
                        this.Time = ex;
                        break;
                    case LightData_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case LightData_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case LightData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LightData_FieldIndex.FalloffExponent:
                        this.FalloffExponent = ex;
                        break;
                    case LightData_FieldIndex.FOV:
                        this.FOV = ex;
                        break;
                    case LightData_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case LightData_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LightData_FieldIndex enu = (LightData_FieldIndex)index;
                switch (enu)
                {
                    case LightData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Time:
                        this.Time = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.FalloffExponent:
                        this.FalloffExponent = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.FOV:
                        this.FOV = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case LightData_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Time != null) return true;
                if (Radius != null) return true;
                if (Color != null) return true;
                if (Flags != null) return true;
                if (FalloffExponent != null) return true;
                if (FOV != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Time, "Time");
                fg.AppendItem(Radius, "Radius");
                fg.AppendItem(Color, "Color");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(FalloffExponent, "FalloffExponent");
                fg.AppendItem(FOV, "FOV");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Time = this.Time.Combine(rhs.Time);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FalloffExponent = this.FalloffExponent.Combine(rhs.FalloffExponent);
                ret.FOV = this.FOV.Combine(rhs.FOV);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool Time;
            public bool Radius;
            public bool Color;
            public bool Flags;
            public bool FalloffExponent;
            public bool FOV;
            public bool Value;
            public bool Weight;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.Time = defaultOn;
                this.Radius = defaultOn;
                this.Color = defaultOn;
                this.Flags = defaultOn;
                this.FalloffExponent = defaultOn;
                this.FOV = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Time, null));
                ret.Add((Radius, null));
                ret.Add((Color, null));
                ret.Add((Flags, null));
                ret.Add((FalloffExponent, null));
                ret.Add((FOV, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = LightData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LightDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LightDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LightData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static LightData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LightData();
            ((LightDataSetterCommon)((ILightDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILightDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LightDataSetterCommon)((ILightDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LightData GetNew()
        {
            return new LightData();
        }

    }
    #endregion

    #region Interface
    public partial interface ILightData :
        ILightDataGetter,
        ILoquiObjectSetter<ILightData>
    {
        new LightData.VersioningBreaks Versioning { get; set; }
        new Int32 Time { get; set; }
        new UInt32 Radius { get; set; }
        new Color Color { get; set; }
        new Light.LightFlag Flags { get; set; }
        new Single FalloffExponent { get; set; }
        new Single FOV { get; set; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
    }

    public partial interface ILightDataGetter :
        ILoquiObject,
        ILoquiObject<ILightDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => LightData_Registration.Instance;
        LightData.VersioningBreaks Versioning { get; }
        Int32 Time { get; }
        UInt32 Radius { get; }
        Color Color { get; }
        Light.LightFlag Flags { get; }
        Single FalloffExponent { get; }
        Single FOV { get; }
        UInt32 Value { get; }
        Single Weight { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LightDataMixIn
    {
        public static void Clear(this ILightData item)
        {
            ((LightDataSetterCommon)((ILightDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LightData.Mask<bool> GetEqualsMask(
            this ILightDataGetter item,
            ILightDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILightDataGetter item,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILightDataGetter item,
            FileGeneration fg,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILightDataGetter item,
            LightData.Mask<bool?> checkMask)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LightData.Mask<bool> GetHasBeenSetMask(this ILightDataGetter item)
        {
            var ret = new LightData.Mask<bool>(false);
            ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILightDataGetter item,
            ILightDataGetter rhs)
        {
            return ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs)
        {
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs,
            LightData.TranslationMask? copyMask = null)
        {
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LightData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILightData lhs,
            ILightDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LightDataSetterTranslationCommon)((ILightDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LightData DeepCopy(
            this ILightDataGetter item,
            LightData.TranslationMask? copyMask = null)
        {
            return ((LightDataSetterTranslationCommon)((ILightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LightData DeepCopy(
            this ILightDataGetter item,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? copyMask = null)
        {
            return ((LightDataSetterTranslationCommon)((ILightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LightData DeepCopy(
            this ILightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LightDataSetterTranslationCommon)((ILightDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILightData item,
            XElement node,
            LightData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILightData item,
            XElement node,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LightData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILightData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LightDataSetterCommon)((ILightDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILightData item,
            string path,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILightData item,
            string path,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILightData item,
            string path,
            ErrorMaskBuilder? errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILightData item,
            Stream stream,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILightData item,
            Stream stream,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILightData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LightData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILightData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILightData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LightDataSetterCommon)((ILightDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LightData_FieldIndex
    {
        Versioning = 0,
        Time = 1,
        Radius = 2,
        Color = 3,
        Flags = 4,
        FalloffExponent = 5,
        FOV = 6,
        Value = 7,
        Weight = 8,
    }
    #endregion

    #region Registration
    public partial class LightData_Registration : ILoquiRegistration
    {
        public static readonly LightData_Registration Instance = new LightData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 195,
            version: 0);

        public const string GUID = "64493ae8-9647-44e1-bd6d-544b3907b84d";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(LightData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LightData.ErrorMask);

        public static readonly Type ClassType = typeof(LightData);

        public static readonly Type GetterType = typeof(ILightDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILightData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LightData";

        public const string Name = "LightData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)LightData_FieldIndex.Versioning;
                case "TIME":
                    return (ushort)LightData_FieldIndex.Time;
                case "RADIUS":
                    return (ushort)LightData_FieldIndex.Radius;
                case "COLOR":
                    return (ushort)LightData_FieldIndex.Color;
                case "FLAGS":
                    return (ushort)LightData_FieldIndex.Flags;
                case "FALLOFFEXPONENT":
                    return (ushort)LightData_FieldIndex.FalloffExponent;
                case "FOV":
                    return (ushort)LightData_FieldIndex.FOV;
                case "VALUE":
                    return (ushort)LightData_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)LightData_FieldIndex.Weight;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                case LightData_FieldIndex.Time:
                case LightData_FieldIndex.Radius:
                case LightData_FieldIndex.Color:
                case LightData_FieldIndex.Flags:
                case LightData_FieldIndex.FalloffExponent:
                case LightData_FieldIndex.FOV:
                case LightData_FieldIndex.Value:
                case LightData_FieldIndex.Weight:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                case LightData_FieldIndex.Time:
                case LightData_FieldIndex.Radius:
                case LightData_FieldIndex.Color:
                case LightData_FieldIndex.Flags:
                case LightData_FieldIndex.FalloffExponent:
                case LightData_FieldIndex.FOV:
                case LightData_FieldIndex.Value:
                case LightData_FieldIndex.Weight:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                case LightData_FieldIndex.Time:
                case LightData_FieldIndex.Radius:
                case LightData_FieldIndex.Color:
                case LightData_FieldIndex.Flags:
                case LightData_FieldIndex.FalloffExponent:
                case LightData_FieldIndex.FOV:
                case LightData_FieldIndex.Value:
                case LightData_FieldIndex.Weight:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                    return "Versioning";
                case LightData_FieldIndex.Time:
                    return "Time";
                case LightData_FieldIndex.Radius:
                    return "Radius";
                case LightData_FieldIndex.Color:
                    return "Color";
                case LightData_FieldIndex.Flags:
                    return "Flags";
                case LightData_FieldIndex.FalloffExponent:
                    return "FalloffExponent";
                case LightData_FieldIndex.FOV:
                    return "FOV";
                case LightData_FieldIndex.Value:
                    return "Value";
                case LightData_FieldIndex.Weight:
                    return "Weight";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                case LightData_FieldIndex.Time:
                case LightData_FieldIndex.Radius:
                case LightData_FieldIndex.Color:
                case LightData_FieldIndex.Flags:
                case LightData_FieldIndex.FalloffExponent:
                case LightData_FieldIndex.FOV:
                case LightData_FieldIndex.Value:
                case LightData_FieldIndex.Weight:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                case LightData_FieldIndex.Time:
                case LightData_FieldIndex.Radius:
                case LightData_FieldIndex.Color:
                case LightData_FieldIndex.Flags:
                case LightData_FieldIndex.FalloffExponent:
                case LightData_FieldIndex.FOV:
                case LightData_FieldIndex.Value:
                case LightData_FieldIndex.Weight:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LightData_FieldIndex enu = (LightData_FieldIndex)index;
            switch (enu)
            {
                case LightData_FieldIndex.Versioning:
                    return typeof(LightData.VersioningBreaks);
                case LightData_FieldIndex.Time:
                    return typeof(Int32);
                case LightData_FieldIndex.Radius:
                    return typeof(UInt32);
                case LightData_FieldIndex.Color:
                    return typeof(Color);
                case LightData_FieldIndex.Flags:
                    return typeof(Light.LightFlag);
                case LightData_FieldIndex.FalloffExponent:
                    return typeof(Single);
                case LightData_FieldIndex.FOV:
                    return typeof(Single);
                case LightData_FieldIndex.Value:
                    return typeof(UInt32);
                case LightData_FieldIndex.Weight:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LightDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(LightDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LightDataSetterCommon
    {
        public static readonly LightDataSetterCommon Instance = new LightDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILightData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Time = LightData._Time_Default;
            item.Radius = default;
            item.Color = default;
            item.Flags = default;
            item.FalloffExponent = LightData._FalloffExponent_Default;
            item.FOV = LightData._FOV_Default;
            item.Value = default;
            item.Weight = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ILightData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LightDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILightData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(LightData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: LightDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LightDataCommon
    {
        public static readonly LightDataCommon Instance = new LightDataCommon();

        public LightData.Mask<bool> GetEqualsMask(
            ILightDataGetter item,
            ILightDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LightData.Mask<bool>(false);
            ((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightDataGetter item,
            ILightDataGetter rhs,
            LightData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Time = item.Time == rhs.Time;
            ret.Radius = item.Radius == rhs.Radius;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FalloffExponent = item.FalloffExponent.EqualsWithin(rhs.FalloffExponent);
            ret.FOV = item.FOV.EqualsWithin(rhs.FOV);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
        }
        
        public string ToString(
            ILightDataGetter item,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILightDataGetter item,
            FileGeneration fg,
            string? name = null,
            LightData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LightData =>");
            }
            else
            {
                fg.AppendLine($"{name} (LightData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILightDataGetter item,
            FileGeneration fg,
            LightData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Time ?? true)
            {
                fg.AppendItem(item.Time, "Time");
            }
            if (printMask?.Radius ?? true)
            {
                fg.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Color ?? true)
            {
                fg.AppendItem(item.Color, "Color");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FalloffExponent ?? true)
            {
                fg.AppendItem(item.FalloffExponent, "FalloffExponent");
            }
            if (printMask?.FOV ?? true)
            {
                fg.AppendItem(item.FOV, "FOV");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
        }
        
        public bool HasBeenSet(
            ILightDataGetter item,
            LightData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILightDataGetter item,
            LightData.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.Time = true;
            mask.Radius = true;
            mask.Color = true;
            mask.Flags = true;
            mask.FalloffExponent = true;
            mask.FOV = true;
            mask.Value = true;
            mask.Weight = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightDataGetter? lhs,
            ILightDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.Time != rhs.Time) return false;
            if (lhs.Radius != rhs.Radius) return false;
            if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.FalloffExponent.EqualsWithin(rhs.FalloffExponent)) return false;
            if (!lhs.FOV.EqualsWithin(rhs.FOV)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILightDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Time);
            hash.Add(item.Radius);
            hash.Add(item.Color);
            hash.Add(item.Flags);
            hash.Add(item.FalloffExponent);
            hash.Add(item.FOV);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LightData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(ILightDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(ILightDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class LightDataSetterTranslationCommon
    {
        public static readonly LightDataSetterTranslationCommon Instance = new LightDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILightData item,
            ILightDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Time) ?? true))
            {
                item.Time = rhs.Time;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.FalloffExponent) ?? true))
            {
                item.FalloffExponent = rhs.FalloffExponent;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.FOV) ?? true))
            {
                item.FOV = rhs.FOV;
            }
            if (rhs.Versioning.HasFlag(LightData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)LightData_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
        }
        
        #endregion
        
        public LightData DeepCopy(
            ILightDataGetter item,
            LightData.TranslationMask? copyMask = null)
        {
            LightData ret = (LightData)((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LightData DeepCopy(
            ILightDataGetter item,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? copyMask = null)
        {
            LightData ret = (LightData)((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LightData DeepCopy(
            ILightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LightData ret = (LightData)((LightDataCommon)((ILightDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LightData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LightData_Registration.Instance;
        public static LightData_Registration Registration => LightData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LightDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LightDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LightDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILightDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILightDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILightDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LightDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LightDataXmlWriteTranslation Instance = new LightDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILightDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<LightData.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)LightData_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Time) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Time),
                    item: item.Time,
                    fieldIndex: (int)LightData_FieldIndex.Time,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Radius) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Radius),
                    item: item.Radius,
                    fieldIndex: (int)LightData_FieldIndex.Radius,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Color) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Color),
                    item: item.Color,
                    fieldIndex: (int)LightData_FieldIndex.Color,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Light.LightFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LightData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.FalloffExponent) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FalloffExponent),
                    item: item.FalloffExponent,
                    fieldIndex: (int)LightData_FieldIndex.FalloffExponent,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.FOV) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FOV),
                    item: item.FOV,
                    fieldIndex: (int)LightData_FieldIndex.FOV,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Value) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Value),
                    item: item.Value,
                    fieldIndex: (int)LightData_FieldIndex.Value,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LightData_FieldIndex.Weight) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Weight),
                    item: item.Weight,
                    fieldIndex: (int)LightData_FieldIndex.Weight,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILightDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LightData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LightData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILightDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ILightDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ILightDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LightDataXmlCreateTranslation
    {
        public readonly static LightDataXmlCreateTranslation Instance = new LightDataXmlCreateTranslation();

        public static void FillPublicXml(
            ILightData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LightDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILightData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<LightData.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Time":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Time);
                    try
                    {
                        item.Time = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Radius":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Radius);
                    try
                    {
                        item.Radius = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Color":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Color);
                    try
                    {
                        item.Color = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Light.LightFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FalloffExponent":
                    errorMask?.PushIndex((int)LightData_FieldIndex.FalloffExponent);
                    try
                    {
                        item.FalloffExponent = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FOV":
                    errorMask?.PushIndex((int)LightData_FieldIndex.FOV);
                    try
                    {
                        item.FOV = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Value);
                    try
                    {
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)LightData_FieldIndex.Weight);
                    try
                    {
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LightDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILightDataGetter item,
            XElement node,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LightDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LightData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            string path,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            Stream stream,
            out LightData.ErrorMask errorMask,
            LightData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((LightDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            XElement node,
            string? name = null,
            LightData.TranslationMask? translationMask = null)
        {
            ((LightDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LightDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILightDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LightDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LightDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LightDataBinaryWriteTranslation Instance = new LightDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILightDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Time);
            writer.Write(item.Radius);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Color);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Light.LightFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FalloffExponent);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FOV);
            if (!item.Versioning.HasFlag(LightData.VersioningBreaks.Break0))
            {
                writer.Write(item.Value);
                Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILightDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(LightData_Registration.DATA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILightDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LightDataBinaryCreateTranslation
    {
        public readonly static LightDataBinaryCreateTranslation Instance = new LightDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ILightData item,
            MutagenFrame frame)
        {
            item.Time = frame.ReadInt32();
            item.Radius = frame.ReadUInt32();
            item.Color = frame.ReadColor(ColorBinaryType.Alpha);
            item.Flags = EnumBinaryTranslation<Light.LightFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.FalloffExponent = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.FOV = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            if (frame.Complete)
            {
                item.Versioning |= LightData.VersioningBreaks.Break0;
                return;
            }
            item.Value = frame.ReadUInt32();
            item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LightDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILightDataGetter item,
            MutagenWriter writer)
        {
            ((LightDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LightDataBinaryOverlay :
        BinaryOverlay,
        ILightDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LightData_Registration.Instance;
        public static LightData_Registration Registration => LightData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LightDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LightDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILightDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILightDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILightDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILightDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LightDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LightDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LightDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LightDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public LightData.VersioningBreaks Versioning { get; private set; }
        public Int32 Time => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x0, 0x4));
        public UInt32 Radius => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        public Color Color => _data.Slice(0x8, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Light.LightFlag Flags => (Light.LightFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0xC, 0x4));
        public Single FalloffExponent => SpanExt.GetFloat(_data.Slice(0x10, 0x4));
        public Single FOV => SpanExt.GetFloat(_data.Slice(0x14, 0x4));
        public UInt32 Value => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x18, 0x4));
        public Single Weight => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        partial void CustomCtor(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected LightDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LightDataBinaryOverlay LightDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LightDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x18)
            {
                ret.Versioning |= LightData.VersioningBreaks.Break0;
            }
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static LightDataBinaryOverlay LightDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return LightDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LightDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

