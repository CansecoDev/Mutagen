/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LoadScreenLocation :
        ILoadScreenLocation,
        ILoquiObjectSetter<LoadScreenLocation>,
        IEquatable<LoadScreenLocation>,
        IEqualsMask
    {
        #region Ctor
        public LoadScreenLocation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Direct
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Place> _Direct = new FormLink<Place>();
        public IFormLink<Place> Direct => this._Direct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPlaceGetter> ILoadScreenLocationGetter.Direct => this.Direct;
        #endregion
        #region Indirect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Worldspace> _Indirect = new FormLink<Worldspace>();
        public IFormLink<Worldspace> Indirect => this._Indirect;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IWorldspaceGetter> ILoadScreenLocationGetter.Indirect => this.Indirect;
        #endregion
        #region GridPoint
        public P2Int16 GridPoint { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LoadScreenLocationMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILoadScreenLocationGetter rhs)) return false;
            return ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LoadScreenLocation obj)
        {
            return ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LoadScreenLocationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LoadScreenLocationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromXml(
            XElement node,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromXml(
            XElement node,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreenLocation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LoadScreenLocation CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LoadScreenLocation();
            ((LoadScreenLocationSetterCommon)((ILoadScreenLocationGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LoadScreenLocation CreateFromXml(
            string path,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            string path,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LoadScreenLocation CreateFromXml(
            Stream stream,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            Stream stream,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreenLocation CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Direct = initialValue;
                this.Indirect = initialValue;
                this.GridPoint = initialValue;
            }

            public Mask(
                TItem Direct,
                TItem Indirect,
                TItem GridPoint)
            {
                this.Direct = Direct;
                this.Indirect = Indirect;
                this.GridPoint = GridPoint;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Direct;
            public TItem Indirect;
            public TItem GridPoint;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Direct, rhs.Direct)) return false;
                if (!object.Equals(this.Indirect, rhs.Indirect)) return false;
                if (!object.Equals(this.GridPoint, rhs.GridPoint)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Direct?.GetHashCode());
                ret = ret.CombineHashCode(this.Indirect?.GetHashCode());
                ret = ret.CombineHashCode(this.GridPoint?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Direct)) return false;
                if (!eval(this.Indirect)) return false;
                if (!eval(this.GridPoint)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Direct)) return true;
                if (eval(this.Indirect)) return true;
                if (eval(this.GridPoint)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LoadScreenLocation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Direct = eval(this.Direct);
                obj.Indirect = eval(this.Indirect);
                obj.GridPoint = eval(this.GridPoint);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LoadScreenLocation.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LoadScreenLocation.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LoadScreenLocation.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Direct ?? true)
                    {
                        fg.AppendItem(Direct, "Direct");
                    }
                    if (printMask?.Indirect ?? true)
                    {
                        fg.AppendItem(Indirect, "Indirect");
                    }
                    if (printMask?.GridPoint ?? true)
                    {
                        fg.AppendItem(GridPoint, "GridPoint");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Direct;
            public Exception? Indirect;
            public Exception? GridPoint;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreenLocation_FieldIndex.Direct:
                        return Direct;
                    case LoadScreenLocation_FieldIndex.Indirect:
                        return Indirect;
                    case LoadScreenLocation_FieldIndex.GridPoint:
                        return GridPoint;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreenLocation_FieldIndex.Direct:
                        this.Direct = ex;
                        break;
                    case LoadScreenLocation_FieldIndex.Indirect:
                        this.Indirect = ex;
                        break;
                    case LoadScreenLocation_FieldIndex.GridPoint:
                        this.GridPoint = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreenLocation_FieldIndex.Direct:
                        this.Direct = (Exception?)obj;
                        break;
                    case LoadScreenLocation_FieldIndex.Indirect:
                        this.Indirect = (Exception?)obj;
                        break;
                    case LoadScreenLocation_FieldIndex.GridPoint:
                        this.GridPoint = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Direct != null) return true;
                if (Indirect != null) return true;
                if (GridPoint != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Direct, "Direct");
                fg.AppendItem(Indirect, "Indirect");
                fg.AppendItem(GridPoint, "GridPoint");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Direct = this.Direct.Combine(rhs.Direct);
                ret.Indirect = this.Indirect.Combine(rhs.Indirect);
                ret.GridPoint = this.GridPoint.Combine(rhs.GridPoint);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Direct;
            public bool Indirect;
            public bool GridPoint;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Direct = defaultOn;
                this.Indirect = defaultOn;
                this.GridPoint = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Direct, null));
                ret.Add((Indirect, null));
                ret.Add((GridPoint, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LoadScreenLocation_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => LoadScreenLocationCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LoadScreenLocationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenLocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LoadScreenLocation CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static LoadScreenLocation CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LoadScreenLocation();
            ((LoadScreenLocationSetterCommon)((ILoadScreenLocationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenLocationGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LoadScreenLocationSetterCommon)((ILoadScreenLocationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LoadScreenLocation GetNew()
        {
            return new LoadScreenLocation();
        }

    }
    #endregion

    #region Interface
    public partial interface ILoadScreenLocation :
        ILoadScreenLocationGetter,
        ILoquiObjectSetter<ILoadScreenLocation>
    {
        new IFormLink<Place> Direct { get; }
        new IFormLink<Worldspace> Indirect { get; }
        new P2Int16 GridPoint { get; set; }
    }

    public partial interface ILoadScreenLocationGetter :
        ILoquiObject,
        ILoquiObject<ILoadScreenLocationGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        IFormLinkGetter<IPlaceGetter> Direct { get; }
        IFormLinkGetter<IWorldspaceGetter> Indirect { get; }
        P2Int16 GridPoint { get; }

    }

    #endregion

    #region Common MixIn
    public static class LoadScreenLocationMixIn
    {
        public static void Clear(this ILoadScreenLocation item)
        {
            ((LoadScreenLocationSetterCommon)((ILoadScreenLocationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LoadScreenLocation.Mask<bool> GetEqualsMask(
            this ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILoadScreenLocationGetter item,
            string? name = null,
            LoadScreenLocation.Mask<bool>? printMask = null)
        {
            return ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILoadScreenLocationGetter item,
            FileGeneration fg,
            string? name = null,
            LoadScreenLocation.Mask<bool>? printMask = null)
        {
            ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILoadScreenLocationGetter item,
            LoadScreenLocation.Mask<bool?> checkMask)
        {
            return ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LoadScreenLocation.Mask<bool> GetHasBeenSetMask(this ILoadScreenLocationGetter item)
        {
            var ret = new LoadScreenLocation.Mask<bool>(false);
            ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs)
        {
            return ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILoadScreenLocation lhs,
            ILoadScreenLocationGetter rhs,
            LoadScreenLocation.TranslationMask? copyMask = null)
        {
            ((LoadScreenLocationSetterTranslationCommon)((ILoadScreenLocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ILoadScreenLocation lhs,
            ILoadScreenLocationGetter rhs,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LoadScreenLocationSetterTranslationCommon)((ILoadScreenLocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LoadScreenLocation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILoadScreenLocation lhs,
            ILoadScreenLocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LoadScreenLocationSetterTranslationCommon)((ILoadScreenLocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LoadScreenLocation DeepCopy(
            this ILoadScreenLocationGetter item,
            LoadScreenLocation.TranslationMask? copyMask = null)
        {
            return ((LoadScreenLocationSetterTranslationCommon)((ILoadScreenLocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LoadScreenLocation DeepCopy(
            this ILoadScreenLocationGetter item,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? copyMask = null)
        {
            return ((LoadScreenLocationSetterTranslationCommon)((ILoadScreenLocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LoadScreenLocation DeepCopy(
            this ILoadScreenLocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LoadScreenLocationSetterTranslationCommon)((ILoadScreenLocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            XElement node,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            XElement node,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreenLocation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LoadScreenLocationSetterCommon)((ILoadScreenLocationGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            string path,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            string path,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            string path,
            ErrorMaskBuilder? errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            Stream stream,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            Stream stream,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenLocation item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILoadScreenLocation item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILoadScreenLocation item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenLocationSetterCommon)((ILoadScreenLocationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LoadScreenLocation_FieldIndex
    {
        Direct = 0,
        Indirect = 1,
        GridPoint = 2,
    }
    #endregion

    #region Registration
    public partial class LoadScreenLocation_Registration : ILoquiRegistration
    {
        public static readonly LoadScreenLocation_Registration Instance = new LoadScreenLocation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 162,
            version: 0);

        public const string GUID = "20b31ea8-66df-4668-9f33-8a69f340c592";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(LoadScreenLocation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreenLocation.ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreenLocation);

        public static readonly Type GetterType = typeof(ILoadScreenLocationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILoadScreenLocation);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LoadScreenLocation";

        public const string Name = "LoadScreenLocation";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DIRECT":
                    return (ushort)LoadScreenLocation_FieldIndex.Direct;
                case "INDIRECT":
                    return (ushort)LoadScreenLocation_FieldIndex.Indirect;
                case "GRIDPOINT":
                    return (ushort)LoadScreenLocation_FieldIndex.GridPoint;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    return "Direct";
                case LoadScreenLocation_FieldIndex.Indirect:
                    return "Indirect";
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return "GridPoint";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                case LoadScreenLocation_FieldIndex.Indirect:
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LoadScreenLocation_FieldIndex enu = (LoadScreenLocation_FieldIndex)index;
            switch (enu)
            {
                case LoadScreenLocation_FieldIndex.Direct:
                    return typeof(IFormLink<Place>);
                case LoadScreenLocation_FieldIndex.Indirect:
                    return typeof(IFormLink<Worldspace>);
                case LoadScreenLocation_FieldIndex.GridPoint:
                    return typeof(P2Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LoadScreenLocationXmlWriteTranslation);
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(LoadScreenLocationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LoadScreenLocationSetterCommon
    {
        public static readonly LoadScreenLocationSetterCommon Instance = new LoadScreenLocationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILoadScreenLocation item)
        {
            ClearPartial();
            item.Direct.FormKey = FormKey.Null;
            item.Indirect.FormKey = FormKey.Null;
            item.GridPoint = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ILoadScreenLocation item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenLocationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ILoadScreenLocation item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            item.Direct.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.Indirect.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                masterReferences: masterReferences,
                defaultVal: FormKey.Null);
            item.GridPoint = Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public void CopyInFromBinary(
            ILoadScreenLocation item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(LoadScreenLocation_Registration.LNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                masterReferences: masterReferences,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class LoadScreenLocationCommon
    {
        public static readonly LoadScreenLocationCommon Instance = new LoadScreenLocationCommon();

        public LoadScreenLocation.Mask<bool> GetEqualsMask(
            ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreenLocation.Mask<bool>(false);
            ((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILoadScreenLocationGetter item,
            ILoadScreenLocationGetter rhs,
            LoadScreenLocation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Direct = object.Equals(item.Direct, rhs.Direct);
            ret.Indirect = object.Equals(item.Indirect, rhs.Indirect);
            ret.GridPoint = item.GridPoint.Equals(rhs.GridPoint);
        }
        
        public string ToString(
            ILoadScreenLocationGetter item,
            string? name = null,
            LoadScreenLocation.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILoadScreenLocationGetter item,
            FileGeneration fg,
            string? name = null,
            LoadScreenLocation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LoadScreenLocation =>");
            }
            else
            {
                fg.AppendLine($"{name} (LoadScreenLocation) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILoadScreenLocationGetter item,
            FileGeneration fg,
            LoadScreenLocation.Mask<bool>? printMask = null)
        {
            if (printMask?.Direct ?? true)
            {
                fg.AppendItem(item.Direct, "Direct");
            }
            if (printMask?.Indirect ?? true)
            {
                fg.AppendItem(item.Indirect, "Indirect");
            }
            if (printMask?.GridPoint ?? true)
            {
                fg.AppendItem(item.GridPoint, "GridPoint");
            }
        }
        
        public bool HasBeenSet(
            ILoadScreenLocationGetter item,
            LoadScreenLocation.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILoadScreenLocationGetter item,
            LoadScreenLocation.Mask<bool> mask)
        {
            mask.Direct = true;
            mask.Indirect = true;
            mask.GridPoint = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILoadScreenLocationGetter? lhs,
            ILoadScreenLocationGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.Direct.Equals(rhs.Direct)) return false;
            if (!lhs.Indirect.Equals(rhs.Indirect)) return false;
            if (!lhs.GridPoint.Equals(rhs.GridPoint)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILoadScreenLocationGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Direct).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Indirect).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.GridPoint).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LoadScreenLocation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILoadScreenLocationGetter obj)
        {
            yield return obj.Direct;
            yield return obj.Indirect;
            yield break;
        }
        
        #endregion
        
    }
    public partial class LoadScreenLocationSetterTranslationCommon
    {
        public static readonly LoadScreenLocationSetterTranslationCommon Instance = new LoadScreenLocationSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILoadScreenLocation item,
            ILoadScreenLocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.Direct) ?? true))
            {
                item.Direct.FormKey = rhs.Direct.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.Indirect) ?? true))
            {
                item.Indirect.FormKey = rhs.Indirect.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.GridPoint) ?? true))
            {
                item.GridPoint = rhs.GridPoint;
            }
        }
        
        #endregion
        
        public LoadScreenLocation DeepCopy(
            ILoadScreenLocationGetter item,
            LoadScreenLocation.TranslationMask? copyMask = null)
        {
            LoadScreenLocation ret = (LoadScreenLocation)((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LoadScreenLocation DeepCopy(
            ILoadScreenLocationGetter item,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? copyMask = null)
        {
            LoadScreenLocation ret = (LoadScreenLocation)((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LoadScreenLocation DeepCopy(
            ILoadScreenLocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LoadScreenLocation ret = (LoadScreenLocation)((LoadScreenLocationCommon)((ILoadScreenLocationGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LoadScreenLocation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreenLocation_Registration.Instance;
        public static LoadScreenLocation_Registration Registration => LoadScreenLocation_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LoadScreenLocationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LoadScreenLocationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LoadScreenLocationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILoadScreenLocationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILoadScreenLocationGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILoadScreenLocationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenLocationXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LoadScreenLocationXmlWriteTranslation Instance = new LoadScreenLocationXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILoadScreenLocationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.Direct) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Direct),
                    item: item.Direct.FormKey,
                    fieldIndex: (int)LoadScreenLocation_FieldIndex.Direct,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.Indirect) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Indirect),
                    item: item.Indirect.FormKey,
                    fieldIndex: (int)LoadScreenLocation_FieldIndex.Indirect,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)LoadScreenLocation_FieldIndex.GridPoint) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GridPoint),
                    item: item.GridPoint,
                    fieldIndex: (int)LoadScreenLocation_FieldIndex.GridPoint,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ILoadScreenLocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LoadScreenLocation");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LoadScreenLocation");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILoadScreenLocationGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ILoadScreenLocationGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ILoadScreenLocationGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LoadScreenLocationXmlCreateTranslation
    {
        public readonly static LoadScreenLocationXmlCreateTranslation Instance = new LoadScreenLocationXmlCreateTranslation();

        public static void FillPublicXml(
            ILoadScreenLocation item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenLocationXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILoadScreenLocation item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Direct":
                    errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.Direct);
                    try
                    {
                        item.Direct.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Indirect":
                    errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.Indirect);
                    try
                    {
                        item.Indirect.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GridPoint":
                    errorMask?.PushIndex((int)LoadScreenLocation_FieldIndex.GridPoint);
                    try
                    {
                        item.GridPoint = P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LoadScreenLocationXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            XElement node,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreenLocation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            string path,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            Stream stream,
            out LoadScreenLocation.ErrorMask errorMask,
            LoadScreenLocation.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            XElement node,
            string? name = null,
            LoadScreenLocation.TranslationMask? translationMask = null)
        {
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenLocationGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LoadScreenLocationXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenLocationBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LoadScreenLocationBinaryWriteTranslation Instance = new LoadScreenLocationBinaryWriteTranslation();

        public static void WriteEmbedded(
            ILoadScreenLocationGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Direct,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Indirect,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GridPoint);
        }

        public void Write(
            MutagenWriter writer,
            ILoadScreenLocationGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LoadScreenLocation_Registration.LNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenLocationGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LoadScreenLocationBinaryCreateTranslation
    {
        public readonly static LoadScreenLocationBinaryCreateTranslation Instance = new LoadScreenLocationBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LoadScreenLocationBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILoadScreenLocationGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            ((LoadScreenLocationBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenLocationBinaryOverlay :
        BinaryOverlay,
        ILoadScreenLocationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreenLocation_Registration.Instance;
        public static LoadScreenLocation_Registration Registration => LoadScreenLocation_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LoadScreenLocationCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LoadScreenLocationSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILoadScreenLocationGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILoadScreenLocationGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILoadScreenLocationGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenLocationGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => LoadScreenLocationCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LoadScreenLocationXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LoadScreenLocationXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LoadScreenLocationBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenLocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        public IFormLinkGetter<IPlaceGetter> Direct => new FormLink<IPlaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0, 4))));
        public IFormLinkGetter<IWorldspaceGetter> Indirect => new FormLink<IWorldspaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(4, 4))));
        public P2Int16 GridPoint => P2Int16BinaryTranslation.Read(_data.Span.Slice(8, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LoadScreenLocationBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LoadScreenLocationBinaryOverlay LoadScreenLocationFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LoadScreenLocationBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.SubRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

