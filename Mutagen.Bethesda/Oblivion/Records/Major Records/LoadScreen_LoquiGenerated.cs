/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LoadScreen :
        OblivionMajorRecord,
        ILoadScreenInternal,
        ILoquiObjectSetter<LoadScreen>,
        IEquatable<LoadScreen>,
        IEqualsMask
    {
        #region Ctor
        protected LoadScreen()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILoadScreenGetter.Icon => this.Icon;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILoadScreenGetter.Description => this.Description;
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LoadScreenLocation>? _Locations;
        public ExtendedList<LoadScreenLocation>? Locations
        {
            get => this._Locations;
            set => this._Locations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILoadScreenLocationGetter>? ILoadScreenGetter.Locations => _Locations;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LoadScreenMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILoadScreenGetter rhs)) return false;
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LoadScreen obj)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LoadScreenXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LoadScreenXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new LoadScreen CreateFromXml(
            XElement node,
            LoadScreen.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LoadScreen CreateFromXml(
            XElement node,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static LoadScreen CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LoadScreen();
            ((LoadScreenSetterCommon)((ILoadScreenGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LoadScreen CreateFromXml(
            string path,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            string path,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LoadScreen CreateFromXml(
            Stream stream,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            Stream stream,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LoadScreen CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Icon = initialValue;
                this.Description = initialValue;
                this.Locations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LoadScreenLocation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LoadScreenLocation.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Icon,
                TItem Description,
                TItem Locations)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Icon = Icon;
                this.Description = Description;
                this.Locations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LoadScreenLocation.Mask<TItem>?>>?>(Locations, Enumerable.Empty<MaskItemIndexed<TItem, LoadScreenLocation.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Icon;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LoadScreenLocation.Mask<TItem>?>>?>? Locations;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Locations, rhs.Locations)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.Locations?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Icon)) return false;
                if (!eval(this.Description)) return false;
                if (this.Locations != null)
                {
                    if (!eval(this.Locations.Overall)) return false;
                    if (this.Locations.Specific != null)
                    {
                        foreach (var item in this.Locations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Icon)) return true;
                if (eval(this.Description)) return true;
                if (this.Locations != null)
                {
                    if (eval(this.Locations.Overall)) return true;
                    if (this.Locations.Specific != null)
                    {
                        foreach (var item in this.Locations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LoadScreen.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Icon = eval(this.Icon);
                obj.Description = eval(this.Description);
                if (Locations != null)
                {
                    obj.Locations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LoadScreenLocation.Mask<R>?>>?>(eval(this.Locations.Overall), Enumerable.Empty<MaskItemIndexed<R, LoadScreenLocation.Mask<R>?>>());
                    if (Locations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LoadScreenLocation.Mask<R>?>>();
                        obj.Locations.Specific = l;
                        foreach (var item in Locations.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, LoadScreenLocation.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, LoadScreenLocation.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LoadScreen.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LoadScreen.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LoadScreen.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Locations?.Overall ?? true)
                        && Locations.TryGet(out var LocationsItem))
                    {
                        fg.AppendLine("Locations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(LocationsItem.Overall);
                            if (LocationsItem.Specific != null)
                            {
                                foreach (var subItem in LocationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Icon;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LoadScreenLocation.ErrorMask?>>?>? Locations;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icon:
                        return Icon;
                    case LoadScreen_FieldIndex.Description:
                        return Description;
                    case LoadScreen_FieldIndex.Locations:
                        return Locations;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case LoadScreen_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case LoadScreen_FieldIndex.Locations:
                        this.Locations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LoadScreenLocation.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.Locations:
                        this.Locations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LoadScreenLocation.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Icon != null) return true;
                if (Description != null) return true;
                if (Locations != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Icon, "Icon");
                fg.AppendItem(Description, "Description");
                if (Locations.TryGet(out var LocationsItem))
                {
                    fg.AppendLine("Locations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(LocationsItem.Overall);
                        if (LocationsItem.Specific != null)
                        {
                            foreach (var subItem in LocationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Locations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LoadScreenLocation.ErrorMask?>>?>(ExceptionExt.Combine(this.Locations?.Overall, rhs.Locations?.Overall), ExceptionExt.Combine(this.Locations?.Specific, rhs.Locations?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Icon;
            public bool Description;
            public MaskItem<bool, LoadScreenLocation.TranslationMask?> Locations;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Icon = defaultOn;
                this.Description = defaultOn;
                this.Locations = new MaskItem<bool, LoadScreenLocation.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Icon, null));
                ret.Add((Description, null));
                ret.Add((Locations?.Overall ?? true, Locations?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = LoadScreen_Registration.TRIGGERING_RECORD_TYPE;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => LoadScreenCommon.Instance.GetLinks(this);
        public LoadScreen(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public LoadScreen(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public LoadScreen(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new LoadScreen CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static LoadScreen CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LoadScreen();
            ((LoadScreenSetterCommon)((ILoadScreenGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LoadScreen GetNew()
        {
            return new LoadScreen();
        }

    }
    #endregion

    #region Interface
    public partial interface ILoadScreen :
        ILoadScreenGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ILoadScreenInternal>
    {
        new String? Icon { get; set; }
        new String? Description { get; set; }
        new ExtendedList<LoadScreenLocation>? Locations { get; set; }
    }

    public partial interface ILoadScreenInternal :
        IOblivionMajorRecordInternal,
        ILoadScreen,
        ILoadScreenGetter
    {
    }

    public partial interface ILoadScreenGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ILoadScreenGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Icon { get; }
        String? Description { get; }
        IReadOnlyList<ILoadScreenLocationGetter>? Locations { get; }

    }

    #endregion

    #region Common MixIn
    public static class LoadScreenMixIn
    {
        public static void Clear(this ILoadScreenInternal item)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LoadScreen.Mask<bool> GetEqualsMask(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILoadScreenGetter item,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILoadScreenGetter item,
            FileGeneration fg,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILoadScreenGetter item,
            LoadScreen.Mask<bool?> checkMask)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LoadScreen.Mask<bool> GetHasBeenSetMask(this ILoadScreenGetter item)
        {
            var ret = new LoadScreen.Mask<bool>(false);
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            XElement node,
            LoadScreen.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            XElement node,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            string path,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            string path,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            Stream stream,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            Stream stream,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILoadScreenInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LoadScreen.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LoadScreen_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Icon = 5,
        Description = 6,
        Locations = 7,
    }
    #endregion

    #region Registration
    public partial class LoadScreen_Registration : ILoquiRegistration
    {
        public static readonly LoadScreen_Registration Instance = new LoadScreen_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 161,
            version: 0);

        public const string GUID = "12f93621-ba01-4a56-89b2-13d84e7a6972";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(LoadScreen.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreen.ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreen);

        public static readonly Type GetterType = typeof(ILoadScreenGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILoadScreen);

        public static readonly Type? InternalSetterType = typeof(ILoadScreenInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.LoadScreen";

        public const string Name = "LoadScreen";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ICON":
                    return (ushort)LoadScreen_FieldIndex.Icon;
                case "DESCRIPTION":
                    return (ushort)LoadScreen_FieldIndex.Description;
                case "LOCATIONS":
                    return (ushort)LoadScreen_FieldIndex.Locations;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Locations:
                    return true;
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Locations:
                    return true;
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return "Icon";
                case LoadScreen_FieldIndex.Description:
                    return "Description";
                case LoadScreen_FieldIndex.Locations:
                    return "Locations";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                case LoadScreen_FieldIndex.Description:
                case LoadScreen_FieldIndex.Locations:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
            switch (enu)
            {
                case LoadScreen_FieldIndex.Icon:
                    return typeof(String);
                case LoadScreen_FieldIndex.Description:
                    return typeof(String);
                case LoadScreen_FieldIndex.Locations:
                    return typeof(ExtendedList<LoadScreenLocation>);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LoadScreenXmlWriteTranslation);
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = LSCR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 3;
        public static readonly Type BinaryWriteTranslation = typeof(LoadScreenBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LoadScreenSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly LoadScreenSetterCommon Instance = new LoadScreenSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILoadScreenInternal item)
        {
            ClearPartial();
            item.Icon = default;
            item.Description = default;
            item.Locations = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ILoadScreenInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ILoadScreenInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    LoadScreenXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => LoadScreen_Registration.LSCR_HEADER;
        protected static void FillBinaryStructs(
            ILoadScreenInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILoadScreenInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Icon);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Description);
                }
                case 0x4D414E4C: // LNAM
                {
                    item.Locations = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<LoadScreenLocation>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: LoadScreen_Registration.LNAM_HEADER,
                            transl: (MutagenFrame r, out LoadScreenLocation listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<LoadScreenLocation>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!);
                            })
                        .ToExtendedList<LoadScreenLocation>();
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Locations);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            ILoadScreenInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ILoadScreenInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LoadScreenCommon : OblivionMajorRecordCommon
    {
        public new static readonly LoadScreenCommon Instance = new LoadScreenCommon();

        public LoadScreen.Mask<bool> GetEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreen.Mask<bool>(false);
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            LoadScreen.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Locations = item.Locations.CollectionEqualsHelper(
                rhs.Locations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ILoadScreenGetter item,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILoadScreenGetter item,
            FileGeneration fg,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LoadScreen =>");
            }
            else
            {
                fg.AppendLine($"{name} (LoadScreen) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILoadScreenGetter item,
            FileGeneration fg,
            LoadScreen.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Locations?.Overall ?? true)
                && item.Locations.TryGet(out var LocationsItem))
            {
                fg.AppendLine("Locations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in LocationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            ILoadScreenGetter item,
            LoadScreen.Mask<bool?> checkMask)
        {
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Locations?.Overall.HasValue ?? false && checkMask.Locations!.Overall.Value != (item.Locations != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ILoadScreenGetter item,
            LoadScreen.Mask<bool> mask)
        {
            mask.Icon = (item.Icon != null);
            mask.Description = (item.Description != null);
            if (item.Locations.TryGet(out var LocationsItem))
            {
                mask.Locations = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, LoadScreenLocation.Mask<bool>?>>?>(true, LocationsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, LoadScreenLocation.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static LoadScreen_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new LoadScreen_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILoadScreenGetter? lhs,
            ILoadScreenGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.Locations.SequenceEqual(rhs.Locations)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILoadScreenGetter?)lhs,
                rhs: rhs as ILoadScreenGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ILoadScreenGetter?)lhs,
                rhs: rhs as ILoadScreenGetter);
        }
        
        public virtual int GetHashCode(ILoadScreenGetter item)
        {
            int ret = 0;
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Locations).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LoadScreen.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILoadScreenGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Locations != null)
            {
                foreach (var item in obj.Locations.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(LoadScreen obj, LoadScreen rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new LoadScreen(getNextFormKey());
            ret.DeepCopyIn((LoadScreen)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (LoadScreen)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class LoadScreenSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly LoadScreenSetterTranslationCommon Instance = new LoadScreenSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILoadScreenInternal item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ILoadScreen item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Locations);
                try
                {
                    if ((rhs.Locations != null))
                    {
                        item.Locations = 
                            rhs.Locations
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LoadScreenLocation>();
                    }
                    else
                    {
                        item.Locations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            LoadScreen.TranslationMask? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LoadScreen
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LoadScreenSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static LoadScreenXmlWriteTranslation Instance = new LoadScreenXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILoadScreenGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)LoadScreen_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)LoadScreen_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Locations != null)
                && (translationMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Locations) ?? true))
            {
                ListXmlTranslation<ILoadScreenLocationGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Locations),
                    item: item.Locations,
                    fieldIndex: (int)LoadScreen_FieldIndex.Locations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Locations),
                    transl: (XElement subNode, ILoadScreenLocationGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((LoadScreenLocationXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
        }

        public void Write(
            XElement node,
            ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LoadScreen");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LoadScreen");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class LoadScreenXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static LoadScreenXmlCreateTranslation Instance = new LoadScreenXmlCreateTranslation();

        public static void FillPublicXml(
            ILoadScreenInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LoadScreenXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILoadScreenInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Icon":
                    errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)LoadScreen_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Locations":
                    errorMask?.PushIndex((int)LoadScreen_FieldIndex.Locations);
                    try
                    {
                        if (ListXmlTranslation<LoadScreenLocation>.Instance.Parse(
                            node: node,
                            enumer: out var LocationsItem,
                            transl: LoquiXmlTranslation<LoadScreenLocation>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Locations = LocationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Locations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LoadScreenXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILoadScreenGetter item,
            XElement node,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LoadScreenXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILoadScreenGetter item,
            string path,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILoadScreenGetter item,
            Stream stream,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static LoadScreenBinaryWriteTranslation Instance = new LoadScreenBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILoadScreenGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(LoadScreen_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(LoadScreen_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ILoadScreenLocationGetter>.Instance.Write(
                writer: writer,
                items: item.Locations,
                transl: (MutagenWriter subWriter, ILoadScreenLocationGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((LoadScreenLocationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            ILoadScreenGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: LoadScreen_Registration.LSCR_HEADER,
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LoadScreenBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static LoadScreenBinaryCreateTranslation Instance = new LoadScreenBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LoadScreenBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LoadScreenBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ILoadScreenGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static LoadScreen_Registration Registration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILoadScreenGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => LoadScreenCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => LoadScreenXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LoadScreenXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlyList<ILoadScreenLocationGetter>? Locations { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LoadScreenBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LoadScreenBinaryOverlay LoadScreenFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new LoadScreenBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Icon);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Description);
                }
                case 0x4D414E4C: // LNAM
                {
                    this.Locations = BinaryOverlaySetList<LoadScreenLocationBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => LoadScreenLocationBinaryOverlay.LoadScreenLocationFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)LoadScreen_FieldIndex.Locations);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

