/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class LogEntry :
        ILogEntry,
        ILoquiObjectSetter<LogEntry>,
        IEquatable<LogEntry>,
        IEqualsMask
    {
        #region Ctor
        public LogEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LogEntry.Flag? _Flags;
        public LogEntry.Flag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        LogEntry.Flag? ILogEntryGetter.Flags => this.Flags;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? ILogEntryGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Entry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Entry;
        public String? Entry
        {
            get => this._Entry;
            set => this._Entry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ILogEntryGetter.Entry => this.Entry;
        #endregion
        #region ResultScript
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ScriptFields? _ResultScript;
        public ScriptFields? ResultScript
        {
            get => _ResultScript;
            set => _ResultScript = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptFieldsGetter? ILogEntryGetter.ResultScript => this.ResultScript;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            LogEntryMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ILogEntryGetter rhs)) return false;
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(LogEntry obj)
        {
            return ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((LogEntryCommon)((ILogEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LogEntryXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LogEntryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static LogEntry CreateFromXml(
            XElement node,
            LogEntry.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static LogEntry CreateFromXml(
            XElement node,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LogEntry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static LogEntry CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new LogEntry();
            ((LogEntrySetterCommon)((ILogEntryGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static LogEntry CreateFromXml(
            string path,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            string path,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static LogEntry CreateFromXml(
            Stream stream,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            Stream stream,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static LogEntry CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Entry = initialValue;
                this.ResultScript = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(initialValue, new ScriptFields.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Flags,
                TItem Conditions,
                TItem Entry,
                TItem ResultScript)
            {
                this.Flags = Flags;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Entry = Entry;
                this.ResultScript = new MaskItem<TItem, ScriptFields.Mask<TItem>?>(ResultScript, new ScriptFields.Mask<TItem>(ResultScript));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Entry;
            public MaskItem<TItem, ScriptFields.Mask<TItem>?>? ResultScript { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Entry, rhs.Entry)) return false;
                if (!object.Equals(this.ResultScript, rhs.ResultScript)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Conditions?.GetHashCode());
                ret = ret.CombineHashCode(this.Entry?.GetHashCode());
                ret = ret.CombineHashCode(this.ResultScript?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Entry)) return false;
                if (ResultScript != null)
                {
                    if (!eval(this.ResultScript.Overall)) return false;
                    if (this.ResultScript.Specific != null && !this.ResultScript.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Entry)) return true;
                if (ResultScript != null)
                {
                    if (eval(this.ResultScript.Overall)) return true;
                    if (this.ResultScript.Specific != null && this.ResultScript.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LogEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Entry = eval(this.Entry);
                obj.ResultScript = this.ResultScript == null ? null : new MaskItem<R, ScriptFields.Mask<R>?>(eval(this.ResultScript.Overall), this.ResultScript.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(LogEntry.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, LogEntry.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(LogEntry.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions.TryGet(out var ConditionsItem))
                    {
                        fg.AppendLine("Conditions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Entry ?? true)
                    {
                        fg.AppendItem(Entry, "Entry");
                    }
                    if (printMask?.ResultScript?.Overall ?? true)
                    {
                        ResultScript?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Entry;
            public MaskItem<Exception?, ScriptFields.ErrorMask?>? ResultScript;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
                switch (enu)
                {
                    case LogEntry_FieldIndex.Flags:
                        return Flags;
                    case LogEntry_FieldIndex.Conditions:
                        return Conditions;
                    case LogEntry_FieldIndex.Entry:
                        return Entry;
                    case LogEntry_FieldIndex.ResultScript:
                        return ResultScript;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
                switch (enu)
                {
                    case LogEntry_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case LogEntry_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case LogEntry_FieldIndex.Entry:
                        this.Entry = ex;
                        break;
                    case LogEntry_FieldIndex.ResultScript:
                        this.ResultScript = new MaskItem<Exception?, ScriptFields.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
                switch (enu)
                {
                    case LogEntry_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case LogEntry_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case LogEntry_FieldIndex.Entry:
                        this.Entry = (Exception?)obj;
                        break;
                    case LogEntry_FieldIndex.ResultScript:
                        this.ResultScript = (MaskItem<Exception?, ScriptFields.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (Conditions != null) return true;
                if (Entry != null) return true;
                if (ResultScript != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                if (Conditions.TryGet(out var ConditionsItem))
                {
                    fg.AppendLine("Conditions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Entry, "Entry");
                ResultScript?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Entry = this.Entry.Combine(rhs.Entry);
                ret.ResultScript = this.ResultScript.Combine(rhs.ResultScript, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Flags;
            public MaskItem<bool, Condition.TranslationMask?> Conditions;
            public bool Entry;
            public MaskItem<bool, ScriptFields.TranslationMask?> ResultScript;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Flags = defaultOn;
                this.Conditions = new MaskItem<bool, Condition.TranslationMask?>(defaultOn, null);
                this.Entry = defaultOn;
                this.ResultScript = new MaskItem<bool, ScriptFields.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((Conditions?.Overall ?? true, Conditions?.Specific?.GetCrystal()));
                ret.Add((Entry, null));
                ret.Add((ResultScript?.Overall ?? true, ResultScript?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => LogEntryCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LogEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static LogEntry CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static LogEntry CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LogEntry();
            ((LogEntrySetterCommon)((ILogEntryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILogEntryGetter)rhs, include);

        void IClearable.Clear()
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static LogEntry GetNew()
        {
            return new LogEntry();
        }

    }
    #endregion

    #region Interface
    public partial interface ILogEntry :
        ILogEntryGetter,
        ILoquiObjectSetter<ILogEntry>
    {
        new LogEntry.Flag? Flags { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
        new String? Entry { get; set; }
        new ScriptFields? ResultScript { get; set; }
    }

    public partial interface ILogEntryGetter :
        ILoquiObject,
        ILoquiObject<ILogEntryGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        LogEntry.Flag? Flags { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        String? Entry { get; }
        IScriptFieldsGetter? ResultScript { get; }

    }

    #endregion

    #region Common MixIn
    public static class LogEntryMixIn
    {
        public static void Clear(this ILogEntry item)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LogEntry.Mask<bool> GetEqualsMask(
            this ILogEntryGetter item,
            ILogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ILogEntryGetter item,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ILogEntryGetter item,
            FileGeneration fg,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ILogEntryGetter item,
            LogEntry.Mask<bool?> checkMask)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static LogEntry.Mask<bool> GetHasBeenSetMask(this ILogEntryGetter item)
        {
            var ret = new LogEntry.Mask<bool>(false);
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ILogEntryGetter item,
            ILogEntryGetter rhs)
        {
            return ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            LogEntry.TranslationMask? copyMask = null)
        {
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = LogEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILogEntry lhs,
            ILogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LogEntrySetterTranslationCommon)((ILogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            LogEntry.TranslationMask? copyMask = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? copyMask = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LogEntry DeepCopy(
            this ILogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LogEntrySetterTranslationCommon)((ILogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILogEntry item,
            XElement node,
            LogEntry.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ILogEntry item,
            XElement node,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LogEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            string path,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            string path,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            string path,
            ErrorMaskBuilder? errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            Stream stream,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            Stream stream,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ILogEntry item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            LogEntry.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ILogEntry item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ILogEntry item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LogEntrySetterCommon)((ILogEntryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum LogEntry_FieldIndex
    {
        Flags = 0,
        Conditions = 1,
        Entry = 2,
        ResultScript = 3,
    }
    #endregion

    #region Registration
    public partial class LogEntry_Registration : ILoquiRegistration
    {
        public static readonly LogEntry_Registration Instance = new LogEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 153,
            version: 0);

        public const string GUID = "c5072833-ef3f-418b-b86d-452f4bbd7617";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(LogEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LogEntry.ErrorMask);

        public static readonly Type ClassType = typeof(LogEntry);

        public static readonly Type GetterType = typeof(ILogEntryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILogEntry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.LogEntry";

        public const string Name = "LogEntry";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)LogEntry_FieldIndex.Flags;
                case "CONDITIONS":
                    return (ushort)LogEntry_FieldIndex.Conditions;
                case "ENTRY":
                    return (ushort)LogEntry_FieldIndex.Entry;
                case "RESULTSCRIPT":
                    return (ushort)LogEntry_FieldIndex.ResultScript;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Conditions:
                    return true;
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.ResultScript:
                    return true;
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Entry:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return "Flags";
                case LogEntry_FieldIndex.Conditions:
                    return "Conditions";
                case LogEntry_FieldIndex.Entry:
                    return "Entry";
                case LogEntry_FieldIndex.ResultScript:
                    return "ResultScript";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                case LogEntry_FieldIndex.Conditions:
                case LogEntry_FieldIndex.Entry:
                case LogEntry_FieldIndex.ResultScript:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            LogEntry_FieldIndex enu = (LogEntry_FieldIndex)index;
            switch (enu)
            {
                case LogEntry_FieldIndex.Flags:
                    return typeof(LogEntry.Flag);
                case LogEntry_FieldIndex.Conditions:
                    return typeof(ExtendedList<Condition>);
                case LogEntry_FieldIndex.Entry:
                    return typeof(String);
                case LogEntry_FieldIndex.ResultScript:
                    return typeof(ScriptFields);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(LogEntryXmlWriteTranslation);
        public static readonly RecordType QSDT_HEADER = new RecordType("QSDT");
        public static readonly RecordType CTDA_HEADER = new RecordType("CTDA");
        public static readonly RecordType CTDT_HEADER = new RecordType("CTDT");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SCHR_HEADER = new RecordType("SCHR");
        public static readonly RecordType SCHD_HEADER = new RecordType("SCHD");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        QSDT_HEADER,
                        CTDA_HEADER,
                        CTDT_HEADER,
                        CNAM_HEADER,
                        SCHR_HEADER,
                        SCHD_HEADER
                    })
            );
        });
        public const int NumStructFields = 0;
        public const int NumTypedFields = 4;
        public static readonly Type BinaryWriteTranslation = typeof(LogEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class LogEntrySetterCommon
    {
        public static readonly LogEntrySetterCommon Instance = new LogEntrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILogEntry item)
        {
            ClearPartial();
            item.Flags = default;
            item.Conditions = null;
            item.Entry = default;
            item.ResultScript = null;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            ILogEntry item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LogEntryXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ILogEntry item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ILogEntry item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54445351: // QSDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Flags) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<LogEntry.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Flags);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Conditions) return TryGet<int?>.Failure;
                    item.Conditions = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Condition>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Condition_Registration.TriggeringRecordTypes,
                            transl: (MutagenFrame r, out Condition listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Condition>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem);
                            })
                        .ToExtendedList<Condition>();
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Conditions);
                }
                case 0x4D414E43: // CNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Entry) return TryGet<int?>.Failure;
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Entry = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Entry);
                }
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.ResultScript) return TryGet<int?>.Failure;
                    item.ResultScript = Mutagen.Bethesda.Oblivion.ScriptFields.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.ResultScript);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            ILogEntry item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class LogEntryCommon
    {
        public static readonly LogEntryCommon Instance = new LogEntryCommon();

        public LogEntry.Mask<bool> GetEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LogEntry.Mask<bool>(false);
            ((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILogEntryGetter item,
            ILogEntryGetter rhs,
            LogEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Entry = string.Equals(item.Entry, rhs.Entry);
            ret.ResultScript = EqualsMaskHelper.EqualsHelper(
                item.ResultScript,
                rhs.ResultScript,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            ILogEntryGetter item,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ILogEntryGetter item,
            FileGeneration fg,
            string? name = null,
            LogEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"LogEntry =>");
            }
            else
            {
                fg.AppendLine($"{name} (LogEntry) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ILogEntryGetter item,
            FileGeneration fg,
            LogEntry.Mask<bool>? printMask = null)
        {
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions.TryGet(out var ConditionsItem))
            {
                fg.AppendLine("Conditions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Entry ?? true)
                && item.Entry.TryGet(out var EntryItem))
            {
                fg.AppendItem(EntryItem, "Entry");
            }
            if ((printMask?.ResultScript?.Overall ?? true)
                && item.ResultScript.TryGet(out var ResultScriptItem))
            {
                ResultScriptItem?.ToString(fg, "ResultScript");
            }
        }
        
        public bool HasBeenSet(
            ILogEntryGetter item,
            LogEntry.Mask<bool?> checkMask)
        {
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.Conditions?.Overall.HasValue ?? false && checkMask.Conditions!.Overall.Value != (item.Conditions != null)) return false;
            if (checkMask.Entry.HasValue && checkMask.Entry.Value != (item.Entry != null)) return false;
            if (checkMask.ResultScript?.Overall.HasValue ?? false && checkMask.ResultScript.Overall.Value != (item.ResultScript != null)) return false;
            if (checkMask.ResultScript?.Specific != null && (item.ResultScript == null || !item.ResultScript.HasBeenSet(checkMask.ResultScript.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            ILogEntryGetter item,
            LogEntry.Mask<bool> mask)
        {
            mask.Flags = (item.Flags != null);
            if (item.Conditions.TryGet(out var ConditionsItem))
            {
                mask.Conditions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Condition.Mask<bool>?>>?>(true, ConditionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Condition.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.Entry = (item.Entry != null);
            var itemResultScript = item.ResultScript;
            mask.ResultScript = new MaskItem<bool, ScriptFields.Mask<bool>?>(itemResultScript != null, itemResultScript?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILogEntryGetter? lhs,
            ILogEntryGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.Conditions.SequenceEqual(rhs.Conditions)) return false;
            if (!string.Equals(lhs.Entry, rhs.Entry)) return false;
            if (!object.Equals(lhs.ResultScript, rhs.ResultScript)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ILogEntryGetter item)
        {
            int ret = 0;
            if (item.Flags.TryGet(out var Flagsitem))
            {
                ret = HashHelper.GetHashCode(Flagsitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Conditions).CombineHashCode(ret);
            if (item.Entry.TryGet(out var Entryitem))
            {
                ret = HashHelper.GetHashCode(Entryitem).CombineHashCode(ret);
            }
            if (item.ResultScript.TryGet(out var ResultScriptitem))
            {
                ret = HashHelper.GetHashCode(ResultScriptitem).CombineHashCode(ret);
            }
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return LogEntry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ILogEntryGetter obj)
        {
            if (obj.ResultScript is ILinkContainer ResultScriptlinkCont)
            {
                foreach (var item in ResultScriptlinkCont.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class LogEntrySetterTranslationCommon
    {
        public static readonly LogEntrySetterTranslationCommon Instance = new LogEntrySetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ILogEntry item,
            ILogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Entry) ?? true))
            {
                item.Entry = rhs.Entry;
            }
            if ((copyMask?.GetShouldTranslate((int)LogEntry_FieldIndex.ResultScript) ?? true))
            {
                errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                try
                {
                    if(rhs.ResultScript.TryGet(out var rhsResultScript))
                    {
                        item.ResultScript = rhsResultScript.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript));
                    }
                    else
                    {
                        item.ResultScript = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            LogEntry.TranslationMask? copyMask = null)
        {
            LogEntry ret = (LogEntry)((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? copyMask = null)
        {
            LogEntry ret = (LogEntry)((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public LogEntry DeepCopy(
            ILogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LogEntry ret = (LogEntry)((LogEntryCommon)((ILogEntryGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class LogEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration Registration => LogEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LogEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return LogEntrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LogEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static LogEntryXmlWriteTranslation Instance = new LogEntryXmlWriteTranslation();

        public static void WriteToNodeXml(
            ILogEntryGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<LogEntry.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)LogEntry_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.Conditions != null)
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Conditions) ?? true))
            {
                ListXmlTranslation<IConditionGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Conditions),
                    item: item.Conditions,
                    fieldIndex: (int)LogEntry_FieldIndex.Conditions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.Conditions),
                    transl: (XElement subNode, IConditionGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((ConditionXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((item.Entry != null)
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.Entry) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Entry),
                    item: item.Entry,
                    fieldIndex: (int)LogEntry_FieldIndex.Entry,
                    errorMask: errorMask);
            }
            if ((item.ResultScript != null)
                && (translationMask?.GetShouldTranslate((int)LogEntry_FieldIndex.ResultScript) ?? true))
            {
                if (item.ResultScript.TryGet(out var ResultScriptItem))
                {
                    ((ScriptFieldsXmlWriteTranslation)((IXmlItem)ResultScriptItem).XmlWriteTranslator).Write(
                        item: ResultScriptItem,
                        node: node,
                        name: nameof(item.ResultScript),
                        fieldIndex: (int)LogEntry_FieldIndex.ResultScript,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript));
                }
            }
        }

        public void Write(
            XElement node,
            ILogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.LogEntry");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.LogEntry");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ILogEntryGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ILogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ILogEntryGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class LogEntryXmlCreateTranslation
    {
        public readonly static LogEntryXmlCreateTranslation Instance = new LogEntryXmlCreateTranslation();

        public static void FillPublicXml(
            ILogEntry item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    LogEntryXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ILogEntry item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Flags":
                    errorMask?.PushIndex((int)LogEntry_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<LogEntry.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Conditions":
                    errorMask?.PushIndex((int)LogEntry_FieldIndex.Conditions);
                    try
                    {
                        if (ListXmlTranslation<Condition>.Instance.Parse(
                            node: node,
                            enumer: out var ConditionsItem,
                            transl: LoquiXmlTranslation<Condition>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Conditions = ConditionsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Conditions = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Entry":
                    errorMask?.PushIndex((int)LogEntry_FieldIndex.Entry);
                    try
                    {
                        item.Entry = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ResultScript":
                    errorMask?.PushIndex((int)LogEntry_FieldIndex.ResultScript);
                    try
                    {
                        item.ResultScript = LoquiXmlTranslation<ScriptFields>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)LogEntry_FieldIndex.ResultScript));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class LogEntryXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ILogEntryGetter item,
            XElement node,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = LogEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            string path,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            Stream stream,
            out LogEntry.ErrorMask errorMask,
            LogEntry.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            XElement node,
            string? name = null,
            LogEntry.TranslationMask? translationMask = null)
        {
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ILogEntryGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((LogEntryXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static LogEntryBinaryWriteTranslation Instance = new LogEntryBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ILogEntryGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<LogEntry.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(LogEntry_Registration.QSDT_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    }
                });
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Entry,
                header: recordTypeConverter.ConvertToCustom(LogEntry_Registration.CNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.ResultScript.TryGet(out var ResultScriptItem))
            {
                ((ScriptFieldsBinaryWriteTranslation)((IBinaryItem)ResultScriptItem).BinaryWriteTranslator).Write(
                    item: ResultScriptItem,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            ILogEntryGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ILogEntryGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class LogEntryBinaryCreateTranslation
    {
        public readonly static LogEntryBinaryCreateTranslation Instance = new LogEntryBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class LogEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ILogEntryGetter item,
            MutagenWriter writer)
        {
            ((LogEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class LogEntryBinaryOverlay :
        BinaryOverlay,
        ILogEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LogEntry_Registration.Instance;
        public static LogEntry_Registration Registration => LogEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => LogEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => LogEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ILogEntryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ILogEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ILogEntryGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => LogEntryCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => LogEntryXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((LogEntryXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => LogEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((LogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Flags
        private int? _FlagsLocation;
        private bool Flags_IsSet => _FlagsLocation.HasValue;
        public LogEntry.Flag? Flags => Flags_IsSet ? (LogEntry.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(LogEntry.Flag?);
        #endregion
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        #region Entry
        private int? _EntryLocation;
        public String? Entry => _EntryLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _EntryLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region ResultScript
        public IScriptFieldsGetter? ResultScript { get; private set; }
        public bool ResultScript_IsSet => ResultScript != null;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected LogEntryBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static LogEntryBinaryOverlay LogEntryFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new LogEntryBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: 0);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54445351: // QSDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Flags) return TryGet<int?>.Failure;
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Flags);
                }
                case 0x41445443: // CTDA
                case 0x54445443: // CTDT
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Conditions) return TryGet<int?>.Failure;
                    this.Conditions = BinaryOverlaySetList<ConditionBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: null,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.Meta.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Conditions);
                }
                case 0x4D414E43: // CNAM
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.Entry) return TryGet<int?>.Failure;
                    _EntryLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.Entry);
                }
                case 0x52484353: // SCHR
                case 0x44484353: // SCHD
                {
                    if (lastParsed.HasValue && lastParsed.Value >= (int)LogEntry_FieldIndex.ResultScript) return TryGet<int?>.Failure;
                    this.ResultScript = ScriptFieldsBinaryOverlay.ScriptFieldsFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)LogEntry_FieldIndex.ResultScript);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

