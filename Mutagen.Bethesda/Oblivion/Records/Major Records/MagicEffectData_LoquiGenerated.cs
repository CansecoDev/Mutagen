/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffectData :
        IMagicEffectData,
        ILoquiObjectSetter<MagicEffectData>,
        IEquatable<MagicEffectData>,
        IEqualsMask
    {
        #region Ctor
        public MagicEffectData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public MagicEffectData.VersioningBreaks Versioning { get; set; } = default;
        #endregion
        #region Flags
        public MagicEffect.MagicFlag Flags { get; set; } = default;
        #endregion
        #region BaseCost
        public Single BaseCost { get; set; } = default;
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unused = new byte[4];
        public Byte[] Unused
        {
            get => _Unused;
            set => this._Unused = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMagicEffectDataGetter.Unused => this.Unused;
        #endregion
        #region MagicSchool
        public MagicSchool MagicSchool { get; set; } = default;
        #endregion
        #region Resistance
        public Resistance Resistance { get; set; } = default;
        #endregion
        #region CounterEffectCount
        public UInt32 CounterEffectCount { get; set; } = default;
        #endregion
        #region Light
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Light> _Light = new FormLink<Light>();
        public IFormLink<Light> Light => this._Light;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IMagicEffectDataGetter.Light => this.Light;
        #endregion
        #region ProjectileSpeed
        public Single ProjectileSpeed { get; set; } = default;
        #endregion
        #region EffectShader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<EffectShader> _EffectShader = new FormLink<EffectShader>();
        public IFormLink<EffectShader> EffectShader => this._EffectShader;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectDataGetter.EffectShader => this.EffectShader;
        #endregion
        #region SubData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicEffectSubData? _SubData;
        public MagicEffectSubData? SubData
        {
            get => _SubData;
            set => _SubData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMagicEffectSubDataGetter? IMagicEffectDataGetter.SubData => this.SubData;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMagicEffectDataGetter rhs)) return false;
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MagicEffectData obj)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectDataCommon)((IMagicEffectDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MagicEffectDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MagicEffectData CreateFromXml(
            XElement node,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MagicEffectData CreateFromXml(
            XElement node,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MagicEffectData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new MagicEffectData();
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MagicEffectData CreateFromXml(
            string path,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffectData CreateFromXml(
            string path,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffectData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MagicEffectData CreateFromXml(
            Stream stream,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffectData CreateFromXml(
            Stream stream,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffectData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Flags = initialValue;
                this.BaseCost = initialValue;
                this.Unused = initialValue;
                this.MagicSchool = initialValue;
                this.Resistance = initialValue;
                this.CounterEffectCount = initialValue;
                this.Light = initialValue;
                this.ProjectileSpeed = initialValue;
                this.EffectShader = initialValue;
                this.SubData = new MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>(initialValue, new MagicEffectSubData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Versioning,
                TItem Flags,
                TItem BaseCost,
                TItem Unused,
                TItem MagicSchool,
                TItem Resistance,
                TItem CounterEffectCount,
                TItem Light,
                TItem ProjectileSpeed,
                TItem EffectShader,
                TItem SubData)
            {
                this.Versioning = Versioning;
                this.Flags = Flags;
                this.BaseCost = BaseCost;
                this.Unused = Unused;
                this.MagicSchool = MagicSchool;
                this.Resistance = Resistance;
                this.CounterEffectCount = CounterEffectCount;
                this.Light = Light;
                this.ProjectileSpeed = ProjectileSpeed;
                this.EffectShader = EffectShader;
                this.SubData = new MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>(SubData, new MagicEffectSubData.Mask<TItem>(SubData));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Flags;
            public TItem BaseCost;
            public TItem Unused;
            public TItem MagicSchool;
            public TItem Resistance;
            public TItem CounterEffectCount;
            public TItem Light;
            public TItem ProjectileSpeed;
            public TItem EffectShader;
            public MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>? SubData { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
                if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
                if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.ProjectileSpeed, rhs.ProjectileSpeed)) return false;
                if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
                if (!object.Equals(this.SubData, rhs.SubData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Flags);
                hash.Add(this.BaseCost);
                hash.Add(this.Unused);
                hash.Add(this.MagicSchool);
                hash.Add(this.Resistance);
                hash.Add(this.CounterEffectCount);
                hash.Add(this.Light);
                hash.Add(this.ProjectileSpeed);
                hash.Add(this.EffectShader);
                hash.Add(this.SubData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Unused)) return false;
                if (!eval(this.MagicSchool)) return false;
                if (!eval(this.Resistance)) return false;
                if (!eval(this.CounterEffectCount)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.ProjectileSpeed)) return false;
                if (!eval(this.EffectShader)) return false;
                if (SubData != null)
                {
                    if (!eval(this.SubData.Overall)) return false;
                    if (this.SubData.Specific != null && !this.SubData.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Unused)) return true;
                if (eval(this.MagicSchool)) return true;
                if (eval(this.Resistance)) return true;
                if (eval(this.CounterEffectCount)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.ProjectileSpeed)) return true;
                if (eval(this.EffectShader)) return true;
                if (SubData != null)
                {
                    if (eval(this.SubData.Overall)) return true;
                    if (this.SubData.Specific != null && this.SubData.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffectData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Flags = eval(this.Flags);
                obj.BaseCost = eval(this.BaseCost);
                obj.Unused = eval(this.Unused);
                obj.MagicSchool = eval(this.MagicSchool);
                obj.Resistance = eval(this.Resistance);
                obj.CounterEffectCount = eval(this.CounterEffectCount);
                obj.Light = eval(this.Light);
                obj.ProjectileSpeed = eval(this.ProjectileSpeed);
                obj.EffectShader = eval(this.EffectShader);
                obj.SubData = this.SubData == null ? null : new MaskItem<R, MagicEffectSubData.Mask<R>?>(eval(this.SubData.Overall), this.SubData.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MagicEffectData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MagicEffectData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MagicEffectData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Versioning ?? true)
                    {
                        fg.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.MagicSchool ?? true)
                    {
                        fg.AppendItem(MagicSchool, "MagicSchool");
                    }
                    if (printMask?.Resistance ?? true)
                    {
                        fg.AppendItem(Resistance, "Resistance");
                    }
                    if (printMask?.CounterEffectCount ?? true)
                    {
                        fg.AppendItem(CounterEffectCount, "CounterEffectCount");
                    }
                    if (printMask?.Light ?? true)
                    {
                        fg.AppendItem(Light, "Light");
                    }
                    if (printMask?.ProjectileSpeed ?? true)
                    {
                        fg.AppendItem(ProjectileSpeed, "ProjectileSpeed");
                    }
                    if (printMask?.EffectShader ?? true)
                    {
                        fg.AppendItem(EffectShader, "EffectShader");
                    }
                    if (printMask?.SubData?.Overall ?? true)
                    {
                        SubData?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Flags;
            public Exception? BaseCost;
            public Exception? Unused;
            public Exception? MagicSchool;
            public Exception? Resistance;
            public Exception? CounterEffectCount;
            public Exception? Light;
            public Exception? ProjectileSpeed;
            public Exception? EffectShader;
            public MaskItem<Exception?, MagicEffectSubData.ErrorMask?>? SubData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectData_FieldIndex.Versioning:
                        return Versioning;
                    case MagicEffectData_FieldIndex.Flags:
                        return Flags;
                    case MagicEffectData_FieldIndex.BaseCost:
                        return BaseCost;
                    case MagicEffectData_FieldIndex.Unused:
                        return Unused;
                    case MagicEffectData_FieldIndex.MagicSchool:
                        return MagicSchool;
                    case MagicEffectData_FieldIndex.Resistance:
                        return Resistance;
                    case MagicEffectData_FieldIndex.CounterEffectCount:
                        return CounterEffectCount;
                    case MagicEffectData_FieldIndex.Light:
                        return Light;
                    case MagicEffectData_FieldIndex.ProjectileSpeed:
                        return ProjectileSpeed;
                    case MagicEffectData_FieldIndex.EffectShader:
                        return EffectShader;
                    case MagicEffectData_FieldIndex.SubData:
                        return SubData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case MagicEffectData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MagicEffectData_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case MagicEffectData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case MagicEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = ex;
                        break;
                    case MagicEffectData_FieldIndex.Resistance:
                        this.Resistance = ex;
                        break;
                    case MagicEffectData_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = ex;
                        break;
                    case MagicEffectData_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case MagicEffectData_FieldIndex.ProjectileSpeed:
                        this.ProjectileSpeed = ex;
                        break;
                    case MagicEffectData_FieldIndex.EffectShader:
                        this.EffectShader = ex;
                        break;
                    case MagicEffectData_FieldIndex.SubData:
                        this.SubData = new MaskItem<Exception?, MagicEffectSubData.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffectData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.MagicSchool:
                        this.MagicSchool = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Resistance:
                        this.Resistance = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.ProjectileSpeed:
                        this.ProjectileSpeed = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.EffectShader:
                        this.EffectShader = (Exception?)obj;
                        break;
                    case MagicEffectData_FieldIndex.SubData:
                        this.SubData = (MaskItem<Exception?, MagicEffectSubData.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Flags != null) return true;
                if (BaseCost != null) return true;
                if (Unused != null) return true;
                if (MagicSchool != null) return true;
                if (Resistance != null) return true;
                if (CounterEffectCount != null) return true;
                if (Light != null) return true;
                if (ProjectileSpeed != null) return true;
                if (EffectShader != null) return true;
                if (SubData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Versioning, "Versioning");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(Unused, "Unused");
                fg.AppendItem(MagicSchool, "MagicSchool");
                fg.AppendItem(Resistance, "Resistance");
                fg.AppendItem(CounterEffectCount, "CounterEffectCount");
                fg.AppendItem(Light, "Light");
                fg.AppendItem(ProjectileSpeed, "ProjectileSpeed");
                fg.AppendItem(EffectShader, "EffectShader");
                SubData?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
                ret.Resistance = this.Resistance.Combine(rhs.Resistance);
                ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.ProjectileSpeed = this.ProjectileSpeed.Combine(rhs.ProjectileSpeed);
                ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
                ret.SubData = this.SubData.Combine(rhs.SubData, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Versioning;
            public bool Flags;
            public bool BaseCost;
            public bool Unused;
            public bool MagicSchool;
            public bool Resistance;
            public bool CounterEffectCount;
            public bool Light;
            public bool ProjectileSpeed;
            public bool EffectShader;
            public MaskItem<bool, MagicEffectSubData.TranslationMask?> SubData;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Versioning = defaultOn;
                this.Flags = defaultOn;
                this.BaseCost = defaultOn;
                this.Unused = defaultOn;
                this.MagicSchool = defaultOn;
                this.Resistance = defaultOn;
                this.CounterEffectCount = defaultOn;
                this.Light = defaultOn;
                this.ProjectileSpeed = defaultOn;
                this.EffectShader = defaultOn;
                this.SubData = new MaskItem<bool, MagicEffectSubData.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Flags, null));
                ret.Add((BaseCost, null));
                ret.Add((Unused, null));
                ret.Add((MagicSchool, null));
                ret.Add((Resistance, null));
                ret.Add((CounterEffectCount, null));
                ret.Add((Light, null));
                ret.Add((ProjectileSpeed, null));
                ret.Add((EffectShader, null));
                ret.Add((SubData?.Overall ?? true, SubData?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = MagicEffectData_Registration.TriggeringRecordType;
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<ILinkGetter> Links => MagicEffectDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MagicEffectData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static MagicEffectData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MagicEffectData();
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MagicEffectData GetNew()
        {
            return new MagicEffectData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffectData :
        IMagicEffectDataGetter,
        ILoquiObjectSetter<IMagicEffectData>
    {
        new MagicEffectData.VersioningBreaks Versioning { get; set; }
        new MagicEffect.MagicFlag Flags { get; set; }
        new Single BaseCost { get; set; }
        new Byte[] Unused { get; set; }
        new MagicSchool MagicSchool { get; set; }
        new Resistance Resistance { get; set; }
        new UInt32 CounterEffectCount { get; set; }
        new IFormLink<Light> Light { get; }
        new Single ProjectileSpeed { get; set; }
        new IFormLink<EffectShader> EffectShader { get; }
        new MagicEffectSubData? SubData { get; set; }
    }

    public partial interface IMagicEffectDataGetter :
        ILoquiObject,
        ILoquiObject<IMagicEffectDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => MagicEffectData_Registration.Instance;
        MagicEffectData.VersioningBreaks Versioning { get; }
        MagicEffect.MagicFlag Flags { get; }
        Single BaseCost { get; }
        ReadOnlyMemorySlice<Byte> Unused { get; }
        MagicSchool MagicSchool { get; }
        Resistance Resistance { get; }
        UInt32 CounterEffectCount { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        Single ProjectileSpeed { get; }
        IFormLinkGetter<IEffectShaderGetter> EffectShader { get; }
        IMagicEffectSubDataGetter? SubData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectDataMixIn
    {
        public static void Clear(this IMagicEffectData item)
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffectData.Mask<bool> GetEqualsMask(
            this IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMagicEffectDataGetter item,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMagicEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMagicEffectDataGetter item,
            MagicEffectData.Mask<bool?> checkMask)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MagicEffectData.Mask<bool> GetHasBeenSetMask(this IMagicEffectDataGetter item)
        {
            var ret = new MagicEffectData.Mask<bool>(false);
            ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs)
        {
            return ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MagicEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectData lhs,
            IMagicEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MagicEffectData DeepCopy(
            this IMagicEffectDataGetter item,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffectData DeepCopy(
            this IMagicEffectDataGetter item,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            return ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffectData DeepCopy(
            this IMagicEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectDataSetterTranslationCommon)((IMagicEffectDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectData item,
            XElement node,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectData item,
            XElement node,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            string path,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            string path,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            Stream stream,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            Stream stream,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMagicEffectData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMagicEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectDataSetterCommon)((IMagicEffectDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffectData_FieldIndex
    {
        Versioning = 0,
        Flags = 1,
        BaseCost = 2,
        Unused = 3,
        MagicSchool = 4,
        Resistance = 5,
        CounterEffectCount = 6,
        Light = 7,
        ProjectileSpeed = 8,
        EffectShader = 9,
        SubData = 10,
    }
    #endregion

    #region Registration
    public partial class MagicEffectData_Registration : ILoquiRegistration
    {
        public static readonly MagicEffectData_Registration Instance = new MagicEffectData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 196,
            version: 0);

        public const string GUID = "5b30822f-ca7b-436d-b0f1-f2cb07b5aee6";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(MagicEffectData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffectData.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffectData);

        public static readonly Type GetterType = typeof(IMagicEffectDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffectData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffectData";

        public const string Name = "MagicEffectData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "VERSIONING":
                    return (ushort)MagicEffectData_FieldIndex.Versioning;
                case "FLAGS":
                    return (ushort)MagicEffectData_FieldIndex.Flags;
                case "BASECOST":
                    return (ushort)MagicEffectData_FieldIndex.BaseCost;
                case "UNUSED":
                    return (ushort)MagicEffectData_FieldIndex.Unused;
                case "MAGICSCHOOL":
                    return (ushort)MagicEffectData_FieldIndex.MagicSchool;
                case "RESISTANCE":
                    return (ushort)MagicEffectData_FieldIndex.Resistance;
                case "COUNTEREFFECTCOUNT":
                    return (ushort)MagicEffectData_FieldIndex.CounterEffectCount;
                case "LIGHT":
                    return (ushort)MagicEffectData_FieldIndex.Light;
                case "PROJECTILESPEED":
                    return (ushort)MagicEffectData_FieldIndex.ProjectileSpeed;
                case "EFFECTSHADER":
                    return (ushort)MagicEffectData_FieldIndex.EffectShader;
                case "SUBDATA":
                    return (ushort)MagicEffectData_FieldIndex.SubData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.Versioning:
                case MagicEffectData_FieldIndex.Flags:
                case MagicEffectData_FieldIndex.BaseCost:
                case MagicEffectData_FieldIndex.Unused:
                case MagicEffectData_FieldIndex.MagicSchool:
                case MagicEffectData_FieldIndex.Resistance:
                case MagicEffectData_FieldIndex.CounterEffectCount:
                case MagicEffectData_FieldIndex.Light:
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                case MagicEffectData_FieldIndex.EffectShader:
                case MagicEffectData_FieldIndex.SubData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.SubData:
                    return true;
                case MagicEffectData_FieldIndex.Versioning:
                case MagicEffectData_FieldIndex.Flags:
                case MagicEffectData_FieldIndex.BaseCost:
                case MagicEffectData_FieldIndex.Unused:
                case MagicEffectData_FieldIndex.MagicSchool:
                case MagicEffectData_FieldIndex.Resistance:
                case MagicEffectData_FieldIndex.CounterEffectCount:
                case MagicEffectData_FieldIndex.Light:
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                case MagicEffectData_FieldIndex.EffectShader:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.Versioning:
                case MagicEffectData_FieldIndex.Flags:
                case MagicEffectData_FieldIndex.BaseCost:
                case MagicEffectData_FieldIndex.Unused:
                case MagicEffectData_FieldIndex.MagicSchool:
                case MagicEffectData_FieldIndex.Resistance:
                case MagicEffectData_FieldIndex.CounterEffectCount:
                case MagicEffectData_FieldIndex.Light:
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                case MagicEffectData_FieldIndex.EffectShader:
                case MagicEffectData_FieldIndex.SubData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.Versioning:
                    return "Versioning";
                case MagicEffectData_FieldIndex.Flags:
                    return "Flags";
                case MagicEffectData_FieldIndex.BaseCost:
                    return "BaseCost";
                case MagicEffectData_FieldIndex.Unused:
                    return "Unused";
                case MagicEffectData_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case MagicEffectData_FieldIndex.Resistance:
                    return "Resistance";
                case MagicEffectData_FieldIndex.CounterEffectCount:
                    return "CounterEffectCount";
                case MagicEffectData_FieldIndex.Light:
                    return "Light";
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                    return "ProjectileSpeed";
                case MagicEffectData_FieldIndex.EffectShader:
                    return "EffectShader";
                case MagicEffectData_FieldIndex.SubData:
                    return "SubData";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.Versioning:
                case MagicEffectData_FieldIndex.Flags:
                case MagicEffectData_FieldIndex.BaseCost:
                case MagicEffectData_FieldIndex.Unused:
                case MagicEffectData_FieldIndex.MagicSchool:
                case MagicEffectData_FieldIndex.Resistance:
                case MagicEffectData_FieldIndex.CounterEffectCount:
                case MagicEffectData_FieldIndex.Light:
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                case MagicEffectData_FieldIndex.EffectShader:
                case MagicEffectData_FieldIndex.SubData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.Versioning:
                case MagicEffectData_FieldIndex.Flags:
                case MagicEffectData_FieldIndex.BaseCost:
                case MagicEffectData_FieldIndex.Unused:
                case MagicEffectData_FieldIndex.MagicSchool:
                case MagicEffectData_FieldIndex.Resistance:
                case MagicEffectData_FieldIndex.CounterEffectCount:
                case MagicEffectData_FieldIndex.Light:
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                case MagicEffectData_FieldIndex.EffectShader:
                case MagicEffectData_FieldIndex.SubData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffectData_FieldIndex enu = (MagicEffectData_FieldIndex)index;
            switch (enu)
            {
                case MagicEffectData_FieldIndex.Versioning:
                    return typeof(MagicEffectData.VersioningBreaks);
                case MagicEffectData_FieldIndex.Flags:
                    return typeof(MagicEffect.MagicFlag);
                case MagicEffectData_FieldIndex.BaseCost:
                    return typeof(Single);
                case MagicEffectData_FieldIndex.Unused:
                    return typeof(Byte[]);
                case MagicEffectData_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case MagicEffectData_FieldIndex.Resistance:
                    return typeof(Resistance);
                case MagicEffectData_FieldIndex.CounterEffectCount:
                    return typeof(UInt32);
                case MagicEffectData_FieldIndex.Light:
                    return typeof(IFormLink<Light>);
                case MagicEffectData_FieldIndex.ProjectileSpeed:
                    return typeof(Single);
                case MagicEffectData_FieldIndex.EffectShader:
                    return typeof(IFormLink<EffectShader>);
                case MagicEffectData_FieldIndex.SubData:
                    return typeof(MagicEffectSubData);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MagicEffectDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 10;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MagicEffectDataSetterCommon
    {
        public static readonly MagicEffectDataSetterCommon Instance = new MagicEffectDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectData item)
        {
            ClearPartial();
            item.Versioning = default;
            item.Flags = default;
            item.BaseCost = default;
            item.Unused = new byte[4];
            item.MagicSchool = default;
            item.Resistance = default;
            item.CounterEffectCount = default;
            item.Light.FormKey = FormKey.Null;
            item.ProjectileSpeed = default;
            item.EffectShader.FormKey = FormKey.Null;
            item.SubData = null;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IMagicEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IMagicEffectData item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.BaseCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.Unused = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.MagicSchool = EnumBinaryTranslation<MagicSchool>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Resistance = EnumBinaryTranslation<Resistance>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.CounterEffectCount = frame.ReadUInt32();
            item.Light.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            item.ProjectileSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.EffectShader.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                frame: frame,
                defaultVal: FormKey.Null);
            if (frame.Complete)
            {
                item.Versioning |= MagicEffectData.VersioningBreaks.Break0;
                return;
            }
            if (frame.Complete) return;
            item.SubData = Mutagen.Bethesda.Oblivion.MagicEffectSubData.CreateFromBinary(frame: frame);
        }
        
        public virtual void CopyInFromBinary(
            IMagicEffectData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(MagicEffectData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class MagicEffectDataCommon
    {
        public static readonly MagicEffectDataCommon Instance = new MagicEffectDataCommon();

        public MagicEffectData.Mask<bool> GetEqualsMask(
            IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffectData.Mask<bool>(false);
            ((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectDataGetter item,
            IMagicEffectDataGetter rhs,
            MagicEffectData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseCost = item.BaseCost.EqualsWithin(rhs.BaseCost);
            ret.Unused = MemoryExtensions.SequenceEqual(item.Unused.Span, rhs.Unused.Span);
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.Resistance = item.Resistance == rhs.Resistance;
            ret.CounterEffectCount = item.CounterEffectCount == rhs.CounterEffectCount;
            ret.Light = object.Equals(item.Light, rhs.Light);
            ret.ProjectileSpeed = item.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed);
            ret.EffectShader = object.Equals(item.EffectShader, rhs.EffectShader);
            ret.SubData = EqualsMaskHelper.EqualsHelper(
                item.SubData,
                rhs.SubData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string ToString(
            IMagicEffectDataGetter item,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMagicEffectDataGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MagicEffectData =>");
            }
            else
            {
                fg.AppendLine($"{name} (MagicEffectData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMagicEffectDataGetter item,
            FileGeneration fg,
            MagicEffectData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                fg.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(item.Unused)}");
            }
            if (printMask?.MagicSchool ?? true)
            {
                fg.AppendItem(item.MagicSchool, "MagicSchool");
            }
            if (printMask?.Resistance ?? true)
            {
                fg.AppendItem(item.Resistance, "Resistance");
            }
            if (printMask?.CounterEffectCount ?? true)
            {
                fg.AppendItem(item.CounterEffectCount, "CounterEffectCount");
            }
            if (printMask?.Light ?? true)
            {
                fg.AppendItem(item.Light, "Light");
            }
            if (printMask?.ProjectileSpeed ?? true)
            {
                fg.AppendItem(item.ProjectileSpeed, "ProjectileSpeed");
            }
            if (printMask?.EffectShader ?? true)
            {
                fg.AppendItem(item.EffectShader, "EffectShader");
            }
            if ((printMask?.SubData?.Overall ?? true)
                && item.SubData.TryGet(out var SubDataItem))
            {
                SubDataItem?.ToString(fg, "SubData");
            }
        }
        
        public bool HasBeenSet(
            IMagicEffectDataGetter item,
            MagicEffectData.Mask<bool?> checkMask)
        {
            if (checkMask.SubData?.Overall.HasValue ?? false && checkMask.SubData.Overall.Value != (item.SubData != null)) return false;
            if (checkMask.SubData?.Specific != null && (item.SubData == null || !item.SubData.HasBeenSet(checkMask.SubData.Specific))) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMagicEffectDataGetter item,
            MagicEffectData.Mask<bool> mask)
        {
            mask.Versioning = true;
            mask.Flags = true;
            mask.BaseCost = true;
            mask.Unused = true;
            mask.MagicSchool = true;
            mask.Resistance = true;
            mask.CounterEffectCount = true;
            mask.Light = true;
            mask.ProjectileSpeed = true;
            mask.EffectShader = true;
            var itemSubData = item.SubData;
            mask.SubData = new MaskItem<bool, MagicEffectSubData.Mask<bool>?>(itemSubData != null, itemSubData?.GetHasBeenSetMask());
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectDataGetter? lhs,
            IMagicEffectDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Versioning != rhs.Versioning) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.BaseCost.EqualsWithin(rhs.BaseCost)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unused.Span, rhs.Unused.Span)) return false;
            if (lhs.MagicSchool != rhs.MagicSchool) return false;
            if (lhs.Resistance != rhs.Resistance) return false;
            if (lhs.CounterEffectCount != rhs.CounterEffectCount) return false;
            if (!lhs.Light.Equals(rhs.Light)) return false;
            if (!lhs.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed)) return false;
            if (!lhs.EffectShader.Equals(rhs.EffectShader)) return false;
            if (!object.Equals(lhs.SubData, rhs.SubData)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMagicEffectDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Flags);
            hash.Add(item.BaseCost);
            hash.Add(item.Unused);
            hash.Add(item.MagicSchool);
            hash.Add(item.Resistance);
            hash.Add(item.CounterEffectCount);
            hash.Add(item.Light);
            hash.Add(item.ProjectileSpeed);
            hash.Add(item.EffectShader);
            if (item.SubData.TryGet(out var SubDataitem))
            {
                hash.Add(SubDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MagicEffectData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMagicEffectDataGetter obj)
        {
            yield return obj.Light;
            yield return obj.EffectShader;
            if (obj.SubData != null)
            {
                foreach (var item in obj.SubData.Links)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    public partial class MagicEffectDataSetterTranslationCommon
    {
        public static readonly MagicEffectDataSetterTranslationCommon Instance = new MagicEffectDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IMagicEffectData item,
            IMagicEffectDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.MagicSchool) ?? true))
            {
                item.MagicSchool = rhs.MagicSchool;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Resistance) ?? true))
            {
                item.Resistance = rhs.Resistance;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.CounterEffectCount) ?? true))
            {
                item.CounterEffectCount = rhs.CounterEffectCount;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Light) ?? true))
            {
                item.Light.FormKey = rhs.Light.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.ProjectileSpeed) ?? true))
            {
                item.ProjectileSpeed = rhs.ProjectileSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.EffectShader) ?? true))
            {
                item.EffectShader.FormKey = rhs.EffectShader.FormKey;
            }
            if (rhs.Versioning.HasFlag(MagicEffectData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.SubData) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffectData_FieldIndex.SubData);
                try
                {
                    if(rhs.SubData.TryGet(out var rhsSubData))
                    {
                        item.SubData = rhsSubData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffectData_FieldIndex.SubData));
                    }
                    else
                    {
                        item.SubData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public MagicEffectData DeepCopy(
            IMagicEffectDataGetter item,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            MagicEffectData ret = (MagicEffectData)((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffectData DeepCopy(
            IMagicEffectDataGetter item,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? copyMask = null)
        {
            MagicEffectData ret = (MagicEffectData)((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffectData DeepCopy(
            IMagicEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffectData ret = (MagicEffectData)((MagicEffectDataCommon)((IMagicEffectDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffectData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectData_Registration.Instance;
        public static MagicEffectData_Registration Registration => MagicEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MagicEffectDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MagicEffectDataXmlWriteTranslation Instance = new MagicEffectDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMagicEffectDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Versioning) ?? true))
            {
                EnumXmlTranslation<MagicEffectData.VersioningBreaks>.Instance.Write(
                    node: node,
                    name: nameof(item.Versioning),
                    item: item.Versioning,
                    fieldIndex: (int)MagicEffectData_FieldIndex.Versioning,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)MagicEffectData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.BaseCost) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BaseCost),
                    item: item.BaseCost,
                    fieldIndex: (int)MagicEffectData_FieldIndex.BaseCost,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Unused) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unused),
                    item: item.Unused,
                    fieldIndex: (int)MagicEffectData_FieldIndex.Unused,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.MagicSchool) ?? true))
            {
                EnumXmlTranslation<MagicSchool>.Instance.Write(
                    node: node,
                    name: nameof(item.MagicSchool),
                    item: item.MagicSchool,
                    fieldIndex: (int)MagicEffectData_FieldIndex.MagicSchool,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Resistance) ?? true))
            {
                EnumXmlTranslation<Resistance>.Instance.Write(
                    node: node,
                    name: nameof(item.Resistance),
                    item: item.Resistance,
                    fieldIndex: (int)MagicEffectData_FieldIndex.Resistance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.CounterEffectCount) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CounterEffectCount),
                    item: item.CounterEffectCount,
                    fieldIndex: (int)MagicEffectData_FieldIndex.CounterEffectCount,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.Light) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Light),
                    item: item.Light.FormKey,
                    fieldIndex: (int)MagicEffectData_FieldIndex.Light,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.ProjectileSpeed) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ProjectileSpeed),
                    item: item.ProjectileSpeed,
                    fieldIndex: (int)MagicEffectData_FieldIndex.ProjectileSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.EffectShader) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.EffectShader),
                    item: item.EffectShader.FormKey,
                    fieldIndex: (int)MagicEffectData_FieldIndex.EffectShader,
                    errorMask: errorMask);
            }
            if ((item.SubData != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffectData_FieldIndex.SubData) ?? true))
            {
                if (item.SubData.TryGet(out var SubDataItem))
                {
                    ((MagicEffectSubDataXmlWriteTranslation)((IXmlItem)SubDataItem).XmlWriteTranslator).Write(
                        item: SubDataItem,
                        node: node,
                        name: nameof(item.SubData),
                        fieldIndex: (int)MagicEffectData_FieldIndex.SubData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)MagicEffectData_FieldIndex.SubData));
                }
            }
        }

        public void Write(
            XElement node,
            IMagicEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MagicEffectData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MagicEffectData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMagicEffectDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IMagicEffectDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MagicEffectDataXmlCreateTranslation
    {
        public readonly static MagicEffectDataXmlCreateTranslation Instance = new MagicEffectDataXmlCreateTranslation();

        public static void FillPublicXml(
            IMagicEffectData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMagicEffectData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Versioning":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.Versioning);
                    try
                    {
                        item.Versioning = EnumXmlTranslation<MagicEffectData.VersioningBreaks>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BaseCost":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.BaseCost);
                    try
                    {
                        item.BaseCost = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unused":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.Unused);
                    try
                    {
                        item.Unused = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSchool":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.MagicSchool);
                    try
                    {
                        item.MagicSchool = EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Resistance":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.Resistance);
                    try
                    {
                        item.Resistance = EnumXmlTranslation<Resistance>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CounterEffectCount":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.CounterEffectCount);
                    try
                    {
                        item.CounterEffectCount = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Light":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.Light);
                    try
                    {
                        item.Light.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ProjectileSpeed":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.ProjectileSpeed);
                    try
                    {
                        item.ProjectileSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectShader":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.EffectShader);
                    try
                    {
                        item.EffectShader.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubData":
                    errorMask?.PushIndex((int)MagicEffectData_FieldIndex.SubData);
                    try
                    {
                        item.SubData = LoquiXmlTranslation<MagicEffectSubData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffectData_FieldIndex.SubData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MagicEffectDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            XElement node,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffectData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            string path,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            Stream stream,
            out MagicEffectData.ErrorMask errorMask,
            MagicEffectData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((MagicEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            XElement node,
            string? name = null,
            MagicEffectData.TranslationMask? translationMask = null)
        {
            ((MagicEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MagicEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MagicEffectDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MagicEffectDataBinaryWriteTranslation Instance = new MagicEffectDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IMagicEffectDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BaseCost);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unused);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                writer,
                item.MagicSchool,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Resistance>.Instance.Write(
                writer,
                item.Resistance,
                length: 4);
            writer.Write(item.CounterEffectCount);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Light);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ProjectileSpeed);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EffectShader);
            if (!item.Versioning.HasFlag(MagicEffectData.VersioningBreaks.Break0))
            {
                if (item.SubData.TryGet(out var SubDataItem))
                {
                    ((MagicEffectSubDataBinaryWriteTranslation)((IBinaryItem)SubDataItem).BinaryWriteTranslator).Write(
                        item: SubDataItem,
                        writer: writer);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(MagicEffectData_Registration.DATA_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MagicEffectDataBinaryCreateTranslation
    {
        public readonly static MagicEffectDataBinaryCreateTranslation Instance = new MagicEffectDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MagicEffectDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMagicEffectDataGetter item,
            MutagenWriter writer)
        {
            ((MagicEffectDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectDataBinaryOverlay :
        BinaryOverlay,
        IMagicEffectDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffectData_Registration.Instance;
        public static MagicEffectData_Registration Registration => MagicEffectData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MagicEffectDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MagicEffectDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMagicEffectDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMagicEffectDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectDataGetter)rhs, include);

        public IEnumerable<ILinkGetter> Links => MagicEffectDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MagicEffectDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MagicEffectDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public MagicEffectData.VersioningBreaks Versioning { get; private set; }
        public MagicEffect.MagicFlag Flags => (MagicEffect.MagicFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public Single BaseCost => SpanExt.GetFloat(_data.Slice(0x4, 0x4));
        public ReadOnlyMemorySlice<Byte> Unused => _data.Span.Slice(0x8, 0x4).ToArray();
        public MagicSchool MagicSchool => (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0xC, 0x4));
        public Resistance Resistance => (Resistance)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x10, 0x4));
        public UInt32 CounterEffectCount => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x14, 0x4));
        public IFormLinkGetter<ILightGetter> Light => new FormLink<ILightGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x18, 0x4))));
        public Single ProjectileSpeed => SpanExt.GetFloat(_data.Slice(0x1C, 0x4));
        public IFormLinkGetter<IEffectShaderGetter> EffectShader => new FormLink<IEffectShaderGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(0x20, 0x4))));
        public IMagicEffectSubDataGetter SubData => MagicEffectSubDataBinaryOverlay.MagicEffectSubDataFactory(new BinaryMemoryReadStream(_data.Slice(0x24)), _package, default(RecordTypeConverter));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MagicEffectDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MagicEffectDataBinaryOverlay MagicEffectDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MagicEffectDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            if (ret._data.Length <= 0x24)
            {
                ret.Versioning |= MagicEffectData.VersioningBreaks.Break0;
            }
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static MagicEffectDataBinaryOverlay MagicEffectDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return MagicEffectDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

