/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MagicEffect :
        OblivionMajorRecord,
        IMagicEffectInternal,
        ILoquiObjectSetter<MagicEffect>,
        INamed,
        IEquatable<MagicEffect>,
        IEqualsMask
    {
        #region Ctor
        protected MagicEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMagicEffectGetter.Name => this.Name;
        #endregion
        #region Description
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Description;
        public String? Description
        {
            get => this._Description;
            set => this._Description = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMagicEffectGetter.Description => this.Description;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMagicEffectGetter.Icon => this.Icon;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IMagicEffectGetter.Model => this.Model;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicEffect.MagicFlag _Flags;
        public MagicEffect.MagicFlag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region BaseCost
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BaseCost;
        public Single BaseCost
        {
            get => this._BaseCost;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._BaseCost = value;
            }
        }
        #endregion
        #region Unused
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _Unused = new byte[4];
        public Byte[] Unused
        {
            get => _Unused;
            set => this._Unused = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMagicEffectGetter.Unused => this.Unused;
        #endregion
        #region MagicSchool
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicSchool _MagicSchool;
        public MagicSchool MagicSchool
        {
            get => this._MagicSchool;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._MagicSchool = value;
            }
        }
        #endregion
        #region Resistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Resistance _Resistance;
        public Resistance Resistance
        {
            get => this._Resistance;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Resistance = value;
            }
        }
        #endregion
        #region CounterEffectCount
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _CounterEffectCount;
        public UInt32 CounterEffectCount
        {
            get => this._CounterEffectCount;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._CounterEffectCount = value;
            }
        }
        #endregion
        #region Light
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<Light> _Light = new FormLink<Light>();
        public IFormLink<Light> Light => this._Light;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IMagicEffectGetter.Light => this.Light;
        #endregion
        #region ProjectileSpeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ProjectileSpeed;
        public Single ProjectileSpeed
        {
            get => this._ProjectileSpeed;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._ProjectileSpeed = value;
            }
        }
        #endregion
        #region EffectShader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLink<EffectShader> _EffectShader = new FormLink<EffectShader>();
        public IFormLink<EffectShader> EffectShader => this._EffectShader;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectGetter.EffectShader => this.EffectShader;
        #endregion
        #region SubData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MagicEffectSubData _SubData = new MagicEffectSubData();
        public MagicEffectSubData SubData
        {
            get => _SubData;
            set => _SubData = value ?? new MagicEffectSubData();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMagicEffectSubDataGetter IMagicEffectGetter.SubData => _SubData;
        #endregion
        #region CounterEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IEDIDLink<MagicEffect>>? _CounterEffects;
        public ExtendedList<IEDIDLink<MagicEffect>>? CounterEffects
        {
            get => this._CounterEffects;
            set => this._CounterEffects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEDIDLinkGetter<IMagicEffectGetter>>? IMagicEffectGetter.CounterEffects => _CounterEffects;
        #endregion

        #endregion
        #region DATADataTypeState
        public MagicEffect.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MagicEffectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMagicEffectGetter rhs)) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MagicEffect obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => MagicEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new MagicEffect CreateFromXml(
            XElement node,
            MagicEffect.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MagicEffect CreateFromXml(
            XElement node,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static MagicEffect CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MagicEffect CreateFromXml(
            string path,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            string path,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MagicEffect CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.BaseCost = initialValue;
                this.Unused = initialValue;
                this.MagicSchool = initialValue;
                this.Resistance = initialValue;
                this.CounterEffectCount = initialValue;
                this.Light = initialValue;
                this.ProjectileSpeed = initialValue;
                this.EffectShader = initialValue;
                this.SubData = new MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>(initialValue, new MagicEffectSubData.Mask<TItem>(initialValue));
                this.CounterEffects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Icon,
                TItem Model,
                TItem Flags,
                TItem BaseCost,
                TItem Unused,
                TItem MagicSchool,
                TItem Resistance,
                TItem CounterEffectCount,
                TItem Light,
                TItem ProjectileSpeed,
                TItem EffectShader,
                TItem SubData,
                TItem CounterEffects,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Icon = Icon;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Flags = Flags;
                this.BaseCost = BaseCost;
                this.Unused = Unused;
                this.MagicSchool = MagicSchool;
                this.Resistance = Resistance;
                this.CounterEffectCount = CounterEffectCount;
                this.Light = Light;
                this.ProjectileSpeed = ProjectileSpeed;
                this.EffectShader = EffectShader;
                this.SubData = new MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>(SubData, new MagicEffectSubData.Mask<TItem>(SubData));
                this.CounterEffects = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CounterEffects, Enumerable.Empty<(int Index, TItem Value)>());
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem Icon;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Flags;
            public TItem BaseCost;
            public TItem Unused;
            public TItem MagicSchool;
            public TItem Resistance;
            public TItem CounterEffectCount;
            public TItem Light;
            public TItem ProjectileSpeed;
            public TItem EffectShader;
            public MaskItem<TItem, MagicEffectSubData.Mask<TItem>?>? SubData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CounterEffects;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.MagicSchool, rhs.MagicSchool)) return false;
                if (!object.Equals(this.Resistance, rhs.Resistance)) return false;
                if (!object.Equals(this.CounterEffectCount, rhs.CounterEffectCount)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.ProjectileSpeed, rhs.ProjectileSpeed)) return false;
                if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
                if (!object.Equals(this.SubData, rhs.SubData)) return false;
                if (!object.Equals(this.CounterEffects, rhs.CounterEffects)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Description?.GetHashCode());
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.BaseCost?.GetHashCode());
                ret = ret.CombineHashCode(this.Unused?.GetHashCode());
                ret = ret.CombineHashCode(this.MagicSchool?.GetHashCode());
                ret = ret.CombineHashCode(this.Resistance?.GetHashCode());
                ret = ret.CombineHashCode(this.CounterEffectCount?.GetHashCode());
                ret = ret.CombineHashCode(this.Light?.GetHashCode());
                ret = ret.CombineHashCode(this.ProjectileSpeed?.GetHashCode());
                ret = ret.CombineHashCode(this.EffectShader?.GetHashCode());
                ret = ret.CombineHashCode(this.SubData?.GetHashCode());
                ret = ret.CombineHashCode(this.CounterEffects?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Unused)) return false;
                if (!eval(this.MagicSchool)) return false;
                if (!eval(this.Resistance)) return false;
                if (!eval(this.CounterEffectCount)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.ProjectileSpeed)) return false;
                if (!eval(this.EffectShader)) return false;
                if (SubData != null)
                {
                    if (!eval(this.SubData.Overall)) return false;
                    if (this.SubData.Specific != null && !this.SubData.Specific.All(eval)) return false;
                }
                if (this.CounterEffects != null)
                {
                    if (!eval(this.CounterEffects.Overall)) return false;
                    if (this.CounterEffects.Specific != null)
                    {
                        foreach (var item in this.CounterEffects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Icon)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Unused)) return true;
                if (eval(this.MagicSchool)) return true;
                if (eval(this.Resistance)) return true;
                if (eval(this.CounterEffectCount)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.ProjectileSpeed)) return true;
                if (eval(this.EffectShader)) return true;
                if (SubData != null)
                {
                    if (eval(this.SubData.Overall)) return true;
                    if (this.SubData.Specific != null && this.SubData.Specific.Any(eval)) return true;
                }
                if (this.CounterEffects != null)
                {
                    if (eval(this.CounterEffects.Overall)) return true;
                    if (this.CounterEffects.Specific != null)
                    {
                        foreach (var item in this.CounterEffects.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.BaseCost = eval(this.BaseCost);
                obj.Unused = eval(this.Unused);
                obj.MagicSchool = eval(this.MagicSchool);
                obj.Resistance = eval(this.Resistance);
                obj.CounterEffectCount = eval(this.CounterEffectCount);
                obj.Light = eval(this.Light);
                obj.ProjectileSpeed = eval(this.ProjectileSpeed);
                obj.EffectShader = eval(this.EffectShader);
                obj.SubData = this.SubData == null ? null : new MaskItem<R, MagicEffectSubData.Mask<R>?>(eval(this.SubData.Overall), this.SubData.Specific?.Translate(eval));
                if (CounterEffects != null)
                {
                    obj.CounterEffects = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CounterEffects.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CounterEffects.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CounterEffects.Specific = l;
                        foreach (var item in CounterEffects.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MagicEffect.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MagicEffect.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MagicEffect.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        fg.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if (printMask?.MagicSchool ?? true)
                    {
                        fg.AppendItem(MagicSchool, "MagicSchool");
                    }
                    if (printMask?.Resistance ?? true)
                    {
                        fg.AppendItem(Resistance, "Resistance");
                    }
                    if (printMask?.CounterEffectCount ?? true)
                    {
                        fg.AppendItem(CounterEffectCount, "CounterEffectCount");
                    }
                    if (printMask?.Light ?? true)
                    {
                        fg.AppendItem(Light, "Light");
                    }
                    if (printMask?.ProjectileSpeed ?? true)
                    {
                        fg.AppendItem(ProjectileSpeed, "ProjectileSpeed");
                    }
                    if (printMask?.EffectShader ?? true)
                    {
                        fg.AppendItem(EffectShader, "EffectShader");
                    }
                    if (printMask?.SubData?.Overall ?? true)
                    {
                        SubData?.ToString(fg);
                    }
                    if ((printMask?.CounterEffects?.Overall ?? true)
                        && CounterEffects.TryGet(out var CounterEffectsItem))
                    {
                        fg.AppendLine("CounterEffects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(CounterEffectsItem.Overall);
                            if (CounterEffectsItem.Specific != null)
                            {
                                foreach (var subItem in CounterEffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Icon;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Flags;
            public Exception? BaseCost;
            public Exception? Unused;
            public Exception? MagicSchool;
            public Exception? Resistance;
            public Exception? CounterEffectCount;
            public Exception? Light;
            public Exception? ProjectileSpeed;
            public Exception? EffectShader;
            public MaskItem<Exception?, MagicEffectSubData.ErrorMask?>? SubData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CounterEffects;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.Name:
                        return Name;
                    case MagicEffect_FieldIndex.Description:
                        return Description;
                    case MagicEffect_FieldIndex.Icon:
                        return Icon;
                    case MagicEffect_FieldIndex.Model:
                        return Model;
                    case MagicEffect_FieldIndex.Flags:
                        return Flags;
                    case MagicEffect_FieldIndex.BaseCost:
                        return BaseCost;
                    case MagicEffect_FieldIndex.Unused:
                        return Unused;
                    case MagicEffect_FieldIndex.MagicSchool:
                        return MagicSchool;
                    case MagicEffect_FieldIndex.Resistance:
                        return Resistance;
                    case MagicEffect_FieldIndex.CounterEffectCount:
                        return CounterEffectCount;
                    case MagicEffect_FieldIndex.Light:
                        return Light;
                    case MagicEffect_FieldIndex.ProjectileSpeed:
                        return ProjectileSpeed;
                    case MagicEffect_FieldIndex.EffectShader:
                        return EffectShader;
                    case MagicEffect_FieldIndex.SubData:
                        return SubData;
                    case MagicEffect_FieldIndex.CounterEffects:
                        return CounterEffects;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MagicEffect_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case MagicEffect_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case MagicEffect_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MagicEffect_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case MagicEffect_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case MagicEffect_FieldIndex.MagicSchool:
                        this.MagicSchool = ex;
                        break;
                    case MagicEffect_FieldIndex.Resistance:
                        this.Resistance = ex;
                        break;
                    case MagicEffect_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = ex;
                        break;
                    case MagicEffect_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case MagicEffect_FieldIndex.ProjectileSpeed:
                        this.ProjectileSpeed = ex;
                        break;
                    case MagicEffect_FieldIndex.EffectShader:
                        this.EffectShader = ex;
                        break;
                    case MagicEffect_FieldIndex.SubData:
                        this.SubData = new MaskItem<Exception?, MagicEffectSubData.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.CounterEffects:
                        this.CounterEffects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.MagicSchool:
                        this.MagicSchool = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Resistance:
                        this.Resistance = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CounterEffectCount:
                        this.CounterEffectCount = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ProjectileSpeed:
                        this.ProjectileSpeed = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EffectShader:
                        this.EffectShader = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.SubData:
                        this.SubData = (MaskItem<Exception?, MagicEffectSubData.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.CounterEffects:
                        this.CounterEffects = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (Model != null) return true;
                if (Flags != null) return true;
                if (BaseCost != null) return true;
                if (Unused != null) return true;
                if (MagicSchool != null) return true;
                if (Resistance != null) return true;
                if (CounterEffectCount != null) return true;
                if (Light != null) return true;
                if (ProjectileSpeed != null) return true;
                if (EffectShader != null) return true;
                if (SubData != null) return true;
                if (CounterEffects != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Description, "Description");
                fg.AppendItem(Icon, "Icon");
                Model?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(BaseCost, "BaseCost");
                fg.AppendItem(Unused, "Unused");
                fg.AppendItem(MagicSchool, "MagicSchool");
                fg.AppendItem(Resistance, "Resistance");
                fg.AppendItem(CounterEffectCount, "CounterEffectCount");
                fg.AppendItem(Light, "Light");
                fg.AppendItem(ProjectileSpeed, "ProjectileSpeed");
                fg.AppendItem(EffectShader, "EffectShader");
                SubData?.ToString(fg);
                if (CounterEffects.TryGet(out var CounterEffectsItem))
                {
                    fg.AppendLine("CounterEffects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(CounterEffectsItem.Overall);
                        if (CounterEffectsItem.Specific != null)
                        {
                            foreach (var subItem in CounterEffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.MagicSchool = this.MagicSchool.Combine(rhs.MagicSchool);
                ret.Resistance = this.Resistance.Combine(rhs.Resistance);
                ret.CounterEffectCount = this.CounterEffectCount.Combine(rhs.CounterEffectCount);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.ProjectileSpeed = this.ProjectileSpeed.Combine(rhs.ProjectileSpeed);
                ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
                ret.SubData = this.SubData.Combine(rhs.SubData, (l, r) => l.Combine(r));
                ret.CounterEffects = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.CounterEffects?.Overall, rhs.CounterEffects?.Overall), ExceptionExt.Combine(this.CounterEffects?.Specific, rhs.CounterEffects?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Icon;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Flags;
            public bool BaseCost;
            public bool Unused;
            public bool MagicSchool;
            public bool Resistance;
            public bool CounterEffectCount;
            public bool Light;
            public bool ProjectileSpeed;
            public bool EffectShader;
            public MaskItem<bool, MagicEffectSubData.TranslationMask?> SubData;
            public bool CounterEffects;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.BaseCost = defaultOn;
                this.Unused = defaultOn;
                this.MagicSchool = defaultOn;
                this.Resistance = defaultOn;
                this.CounterEffectCount = defaultOn;
                this.Light = defaultOn;
                this.ProjectileSpeed = defaultOn;
                this.EffectShader = defaultOn;
                this.SubData = new MaskItem<bool, MagicEffectSubData.TranslationMask?>(defaultOn, null);
                this.CounterEffects = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((BaseCost, null));
                ret.Add((Unused, null));
                ret.Add((MagicSchool, null));
                ret.Add((Resistance, null));
                ret.Add((CounterEffectCount, null));
                ret.Add((Light, null));
                ret.Add((ProjectileSpeed, null));
                ret.Add((EffectShader, null));
                ret.Add((SubData?.Overall ?? true, SubData?.Specific?.GetCrystal()));
                ret.Add((CounterEffects, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = MagicEffect_Registration.TriggeringRecordType;
        [Flags]
        public enum DATADataType
        {
            Has = 1,
            Break0 = 2
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => MagicEffectCommon.Instance.GetLinks(this);
        public MagicEffect(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public MagicEffect(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public MagicEffect(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new MagicEffect CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static MagicEffect CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MagicEffect GetNew()
        {
            return new MagicEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffect :
        IMagicEffectGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IMagicEffectInternal>
    {
        new String? Name { get; set; }
        new String? Description { get; set; }
        new String? Icon { get; set; }
        new Model? Model { get; set; }
        new MagicEffect.MagicFlag Flags { get; set; }
        new Single BaseCost { get; set; }
        new Byte[] Unused { get; set; }
        new MagicSchool MagicSchool { get; set; }
        new Resistance Resistance { get; set; }
        new UInt32 CounterEffectCount { get; set; }
        new IFormLink<Light> Light { get; }
        new Single ProjectileSpeed { get; set; }
        new IFormLink<EffectShader> EffectShader { get; }
        new MagicEffectSubData SubData { get; set; }
        new ExtendedList<IEDIDLink<MagicEffect>>? CounterEffects { get; set; }
        new MagicEffect.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IMagicEffectInternal :
        IOblivionMajorRecordInternal,
        IMagicEffect,
        IMagicEffectGetter
    {
    }

    public partial interface IMagicEffectGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IMagicEffectGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        String? Description { get; }
        String? Icon { get; }
        IModelGetter? Model { get; }
        MagicEffect.MagicFlag Flags { get; }
        Single BaseCost { get; }
        ReadOnlyMemorySlice<Byte> Unused { get; }
        MagicSchool MagicSchool { get; }
        Resistance Resistance { get; }
        UInt32 CounterEffectCount { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        Single ProjectileSpeed { get; }
        IFormLinkGetter<IEffectShaderGetter> EffectShader { get; }
        IMagicEffectSubDataGetter SubData { get; }
        IReadOnlyList<IEDIDLinkGetter<IMagicEffectGetter>>? CounterEffects { get; }
        MagicEffect.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectMixIn
    {
        public static void Clear(this IMagicEffectInternal item)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffect.Mask<bool> GetEqualsMask(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMagicEffectGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMagicEffectGetter item,
            MagicEffect.Mask<bool?> checkMask)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MagicEffect.Mask<bool> GetHasBeenSetMask(this IMagicEffectGetter item)
        {
            var ret = new MagicEffect.Mask<bool>(false);
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            MagicEffect.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMagicEffectInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MagicEffect.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MagicEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Icon = 7,
        Model = 8,
        Flags = 9,
        BaseCost = 10,
        Unused = 11,
        MagicSchool = 12,
        Resistance = 13,
        CounterEffectCount = 14,
        Light = 15,
        ProjectileSpeed = 16,
        EffectShader = 17,
        SubData = 18,
        CounterEffects = 19,
        DATADataTypeState = 20,
    }
    #endregion

    #region Registration
    public partial class MagicEffect_Registration : ILoquiRegistration
    {
        public static readonly MagicEffect_Registration Instance = new MagicEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 44,
            version: 0);

        public const string GUID = "57a9087c-140b-4152-8b1e-0508d36a2df4";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(MagicEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffect.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffect);

        public static readonly Type GetterType = typeof(IMagicEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffect);

        public static readonly Type? InternalSetterType = typeof(IMagicEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.MagicEffect";

        public const string Name = "MagicEffect";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)MagicEffect_FieldIndex.Name;
                case "DESCRIPTION":
                    return (ushort)MagicEffect_FieldIndex.Description;
                case "ICON":
                    return (ushort)MagicEffect_FieldIndex.Icon;
                case "MODEL":
                    return (ushort)MagicEffect_FieldIndex.Model;
                case "FLAGS":
                    return (ushort)MagicEffect_FieldIndex.Flags;
                case "BASECOST":
                    return (ushort)MagicEffect_FieldIndex.BaseCost;
                case "UNUSED":
                    return (ushort)MagicEffect_FieldIndex.Unused;
                case "MAGICSCHOOL":
                    return (ushort)MagicEffect_FieldIndex.MagicSchool;
                case "RESISTANCE":
                    return (ushort)MagicEffect_FieldIndex.Resistance;
                case "COUNTEREFFECTCOUNT":
                    return (ushort)MagicEffect_FieldIndex.CounterEffectCount;
                case "LIGHT":
                    return (ushort)MagicEffect_FieldIndex.Light;
                case "PROJECTILESPEED":
                    return (ushort)MagicEffect_FieldIndex.ProjectileSpeed;
                case "EFFECTSHADER":
                    return (ushort)MagicEffect_FieldIndex.EffectShader;
                case "SUBDATA":
                    return (ushort)MagicEffect_FieldIndex.SubData;
                case "COUNTEREFFECTS":
                    return (ushort)MagicEffect_FieldIndex.CounterEffects;
                case "DATADATATYPESTATE":
                    return (ushort)MagicEffect_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.CounterEffects:
                    return true;
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.SubData:
                    return true;
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    return "Name";
                case MagicEffect_FieldIndex.Description:
                    return "Description";
                case MagicEffect_FieldIndex.Icon:
                    return "Icon";
                case MagicEffect_FieldIndex.Model:
                    return "Model";
                case MagicEffect_FieldIndex.Flags:
                    return "Flags";
                case MagicEffect_FieldIndex.BaseCost:
                    return "BaseCost";
                case MagicEffect_FieldIndex.Unused:
                    return "Unused";
                case MagicEffect_FieldIndex.MagicSchool:
                    return "MagicSchool";
                case MagicEffect_FieldIndex.Resistance:
                    return "Resistance";
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return "CounterEffectCount";
                case MagicEffect_FieldIndex.Light:
                    return "Light";
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return "ProjectileSpeed";
                case MagicEffect_FieldIndex.EffectShader:
                    return "EffectShader";
                case MagicEffect_FieldIndex.SubData:
                    return "SubData";
                case MagicEffect_FieldIndex.CounterEffects:
                    return "CounterEffects";
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                case MagicEffect_FieldIndex.Description:
                case MagicEffect_FieldIndex.Icon:
                case MagicEffect_FieldIndex.Model:
                case MagicEffect_FieldIndex.Flags:
                case MagicEffect_FieldIndex.BaseCost:
                case MagicEffect_FieldIndex.Unused:
                case MagicEffect_FieldIndex.MagicSchool:
                case MagicEffect_FieldIndex.Resistance:
                case MagicEffect_FieldIndex.CounterEffectCount:
                case MagicEffect_FieldIndex.Light:
                case MagicEffect_FieldIndex.ProjectileSpeed:
                case MagicEffect_FieldIndex.EffectShader:
                case MagicEffect_FieldIndex.SubData:
                case MagicEffect_FieldIndex.CounterEffects:
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
            switch (enu)
            {
                case MagicEffect_FieldIndex.Name:
                    return typeof(String);
                case MagicEffect_FieldIndex.Description:
                    return typeof(String);
                case MagicEffect_FieldIndex.Icon:
                    return typeof(String);
                case MagicEffect_FieldIndex.Model:
                    return typeof(Model);
                case MagicEffect_FieldIndex.Flags:
                    return typeof(MagicEffect.MagicFlag);
                case MagicEffect_FieldIndex.BaseCost:
                    return typeof(Single);
                case MagicEffect_FieldIndex.Unused:
                    return typeof(Byte[]);
                case MagicEffect_FieldIndex.MagicSchool:
                    return typeof(MagicSchool);
                case MagicEffect_FieldIndex.Resistance:
                    return typeof(Resistance);
                case MagicEffect_FieldIndex.CounterEffectCount:
                    return typeof(UInt32);
                case MagicEffect_FieldIndex.Light:
                    return typeof(IFormLink<Light>);
                case MagicEffect_FieldIndex.ProjectileSpeed:
                    return typeof(Single);
                case MagicEffect_FieldIndex.EffectShader:
                    return typeof(IFormLink<EffectShader>);
                case MagicEffect_FieldIndex.SubData:
                    return typeof(MagicEffectSubData);
                case MagicEffect_FieldIndex.CounterEffects:
                    return typeof(ExtendedList<IEDIDLink<MagicEffect>>);
                case MagicEffect_FieldIndex.DATADataTypeState:
                    return typeof(MagicEffect.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MagicEffectXmlWriteTranslation);
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType DESC_HEADER = new RecordType("DESC");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType ESCE_HEADER = new RecordType("ESCE");
        public static readonly RecordType TriggeringRecordType = MGEF_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MagicEffectSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly MagicEffectSetterCommon Instance = new MagicEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Icon = default;
            item.Model = null;
            item.Flags = default;
            item.BaseCost = default;
            item.Unused = new byte[4];
            item.MagicSchool = default;
            item.Resistance = default;
            item.CounterEffectCount = default;
            item.Light.FormKey = FormKey.Null;
            item.ProjectileSpeed = default;
            item.EffectShader.FormKey = FormKey.Null;
            item.SubData = new MagicEffectSubData();
            item.CounterEffects = null;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IMagicEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= MagicEffect.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                item.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    MagicEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => MagicEffect_Registration.MGEF_HEADER;
        protected static void FillBinaryStructs(
            IMagicEffectInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IMagicEffectInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Icon);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = MagicEffect.DATADataType.Has;
                    }
                    item.Flags = EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.BaseCost = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Unused = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.MagicSchool = EnumBinaryTranslation<MagicSchool>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Resistance = EnumBinaryTranslation<Resistance>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.CounterEffectCount = dataFrame.ReadUInt32();
                    item.Light.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    item.ProjectileSpeed = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.EffectShader.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: dataFrame,
                        defaultVal: FormKey.Null);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                        return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.EffectShader);
                    }
                    item.SubData = Mutagen.Bethesda.Oblivion.MagicEffectSubData.CreateFromBinary(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.SubData);
                }
                case 0x45435345: // ESCE
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.CounterEffects = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IEDIDLink<MagicEffect>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: RecordTypeBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IEDIDLink<MagicEffect>>();
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.CounterEffects);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            IMagicEffectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IMagicEffectInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class MagicEffectCommon : OblivionMajorRecordCommon
    {
        public new static readonly MagicEffectCommon Instance = new MagicEffectCommon();

        public MagicEffect.Mask<bool> GetEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffect.Mask<bool>(false);
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.BaseCost = item.BaseCost.EqualsWithin(rhs.BaseCost);
            ret.Unused = MemoryExtensions.SequenceEqual(item.Unused.Span, rhs.Unused.Span);
            ret.MagicSchool = item.MagicSchool == rhs.MagicSchool;
            ret.Resistance = item.Resistance == rhs.Resistance;
            ret.CounterEffectCount = item.CounterEffectCount == rhs.CounterEffectCount;
            ret.Light = object.Equals(item.Light, rhs.Light);
            ret.ProjectileSpeed = item.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed);
            ret.EffectShader = object.Equals(item.EffectShader, rhs.EffectShader);
            ret.SubData = MaskItemExt.Factory(item.SubData.GetEqualsMask(rhs.SubData, include), include);
            ret.CounterEffects = item.CounterEffects.CollectionEqualsHelper(
                rhs.CounterEffects,
                (l, r) => object.Equals(l, r),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMagicEffectGetter item,
            FileGeneration fg,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MagicEffect =>");
            }
            else
            {
                fg.AppendLine($"{name} (MagicEffect) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMagicEffectGetter item,
            FileGeneration fg,
            MagicEffect.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.BaseCost ?? true)
            {
                fg.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendLine($"Unused => {SpanExt.ToHexString(item.Unused)}");
            }
            if (printMask?.MagicSchool ?? true)
            {
                fg.AppendItem(item.MagicSchool, "MagicSchool");
            }
            if (printMask?.Resistance ?? true)
            {
                fg.AppendItem(item.Resistance, "Resistance");
            }
            if (printMask?.CounterEffectCount ?? true)
            {
                fg.AppendItem(item.CounterEffectCount, "CounterEffectCount");
            }
            if (printMask?.Light ?? true)
            {
                fg.AppendItem(item.Light, "Light");
            }
            if (printMask?.ProjectileSpeed ?? true)
            {
                fg.AppendItem(item.ProjectileSpeed, "ProjectileSpeed");
            }
            if (printMask?.EffectShader ?? true)
            {
                fg.AppendItem(item.EffectShader, "EffectShader");
            }
            if (printMask?.SubData?.Overall ?? true)
            {
                item.SubData?.ToString(fg, "SubData");
            }
            if ((printMask?.CounterEffects?.Overall ?? true)
                && item.CounterEffects.TryGet(out var CounterEffectsItem))
            {
                fg.AppendLine("CounterEffects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in CounterEffectsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IMagicEffectGetter item,
            MagicEffect.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.CounterEffects?.Overall.HasValue ?? false && checkMask.CounterEffects!.Overall.Value != (item.CounterEffects != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IMagicEffectGetter item,
            MagicEffect.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Description = (item.Description != null);
            mask.Icon = (item.Icon != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Flags = true;
            mask.BaseCost = true;
            mask.Unused = true;
            mask.MagicSchool = true;
            mask.Resistance = true;
            mask.CounterEffectCount = true;
            mask.Light = true;
            mask.ProjectileSpeed = true;
            mask.EffectShader = true;
            mask.SubData = new MaskItem<bool, MagicEffectSubData.Mask<bool>?>(true, item.SubData?.GetHasBeenSetMask());
            mask.CounterEffects = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.CounterEffects != null), default);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static MagicEffect_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new MagicEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectGetter? lhs,
            IMagicEffectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.BaseCost.EqualsWithin(rhs.BaseCost)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.Unused.Span, rhs.Unused.Span)) return false;
            if (lhs.MagicSchool != rhs.MagicSchool) return false;
            if (lhs.Resistance != rhs.Resistance) return false;
            if (lhs.CounterEffectCount != rhs.CounterEffectCount) return false;
            if (!lhs.Light.Equals(rhs.Light)) return false;
            if (!lhs.ProjectileSpeed.EqualsWithin(rhs.ProjectileSpeed)) return false;
            if (!lhs.EffectShader.Equals(rhs.EffectShader)) return false;
            if (!object.Equals(lhs.SubData, rhs.SubData)) return false;
            if (!lhs.CounterEffects.SequenceEqual(rhs.CounterEffects)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter);
        }
        
        public virtual int GetHashCode(IMagicEffectGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                ret = HashHelper.GetHashCode(Descriptionitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.BaseCost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Unused).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.MagicSchool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Resistance).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CounterEffectCount).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Light).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.ProjectileSpeed).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.EffectShader).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SubData).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CounterEffects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MagicEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMagicEffectGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Light;
            yield return obj.EffectShader;
            foreach (var item in obj.SubData.Links)
            {
                yield return item;
            }
            if (obj.CounterEffects != null)
            {
                foreach (var item in obj.CounterEffects)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(MagicEffect obj, MagicEffect rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new MagicEffect(getNextFormKey());
            ret.DeepCopyIn((MagicEffect)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (MagicEffect)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class MagicEffectSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly MagicEffectSetterTranslationCommon Instance = new MagicEffectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IMagicEffectInternal item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IMagicEffect item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicSchool) ?? true))
            {
                item.MagicSchool = rhs.MagicSchool;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Resistance) ?? true))
            {
                item.Resistance = rhs.Resistance;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffectCount) ?? true))
            {
                item.CounterEffectCount = rhs.CounterEffectCount;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Light) ?? true))
            {
                item.Light.FormKey = rhs.Light.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ProjectileSpeed) ?? true))
            {
                item.ProjectileSpeed = rhs.ProjectileSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EffectShader) ?? true))
            {
                item.EffectShader.FormKey = rhs.EffectShader.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SubData) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.SubData);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SubData) ?? true))
                    {
                        item.SubData = rhs.SubData.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.SubData),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                try
                {
                    if ((rhs.CounterEffects != null))
                    {
                        item.CounterEffects = 
                            rhs.CounterEffects
                            .Select(r => new EDIDLink<MagicEffect>(r.EDID))
                            .ToExtendedList<IEDIDLink<MagicEffect>>();
                    }
                    else
                    {
                        item.CounterEffects = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MagicEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MagicEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static MagicEffectXmlWriteTranslation Instance = new MagicEffectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMagicEffectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)MagicEffect_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)MagicEffect_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)MagicEffect_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)MagicEffect_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Model));
                }
            }
            if (item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)MagicEffect_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.BaseCost) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.BaseCost),
                        item: item.BaseCost,
                        fieldIndex: (int)MagicEffect_FieldIndex.BaseCost,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unused) ?? true))
                {
                    ByteArrayXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Unused),
                        item: item.Unused,
                        fieldIndex: (int)MagicEffect_FieldIndex.Unused,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MagicSchool) ?? true))
                {
                    EnumXmlTranslation<MagicSchool>.Instance.Write(
                        node: node,
                        name: nameof(item.MagicSchool),
                        item: item.MagicSchool,
                        fieldIndex: (int)MagicEffect_FieldIndex.MagicSchool,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Resistance) ?? true))
                {
                    EnumXmlTranslation<Resistance>.Instance.Write(
                        node: node,
                        name: nameof(item.Resistance),
                        item: item.Resistance,
                        fieldIndex: (int)MagicEffect_FieldIndex.Resistance,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffectCount) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.CounterEffectCount),
                        item: item.CounterEffectCount,
                        fieldIndex: (int)MagicEffect_FieldIndex.CounterEffectCount,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Light) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Light),
                        item: item.Light.FormKey,
                        fieldIndex: (int)MagicEffect_FieldIndex.Light,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ProjectileSpeed) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.ProjectileSpeed),
                        item: item.ProjectileSpeed,
                        fieldIndex: (int)MagicEffect_FieldIndex.ProjectileSpeed,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EffectShader) ?? true))
                {
                    FormKeyXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.EffectShader),
                        item: item.EffectShader.FormKey,
                        fieldIndex: (int)MagicEffect_FieldIndex.EffectShader,
                        errorMask: errorMask);
                }
                if (!item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0))
                {
                    if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.SubData) ?? true))
                    {
                        var SubDataItem = item.SubData;
                        ((MagicEffectSubDataXmlWriteTranslation)((IXmlItem)SubDataItem).XmlWriteTranslator).Write(
                            item: SubDataItem,
                            node: node,
                            name: nameof(item.SubData),
                            fieldIndex: (int)MagicEffect_FieldIndex.SubData,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.SubData));
                    }
                }
                else
                {
                    node.Add(new XElement("HasDATADataType"));
                }
            }
            if ((item.CounterEffects != null)
                && (translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CounterEffects) ?? true))
            {
                ListXmlTranslation<IEDIDLinkGetter<IMagicEffectGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.CounterEffects),
                    item: item.CounterEffects,
                    fieldIndex: (int)MagicEffect_FieldIndex.CounterEffects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.CounterEffects),
                    transl: (XElement subNode, IEDIDLinkGetter<IMagicEffectGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        RecordTypeXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.EDID,
                            errorMask: listSubMask);
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<MagicEffect.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)MagicEffect_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MagicEffect");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MagicEffect");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class MagicEffectXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static MagicEffectXmlCreateTranslation Instance = new MagicEffectXmlCreateTranslation();

        public static void FillPublicXml(
            IMagicEffectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MagicEffectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMagicEffectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<MagicEffect.MagicFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= MagicEffect.DATADataType.Has;
                    break;
                case "BaseCost":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.BaseCost);
                    try
                    {
                        item.BaseCost = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unused":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Unused);
                    try
                    {
                        item.Unused = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MagicSchool":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.MagicSchool);
                    try
                    {
                        item.MagicSchool = EnumXmlTranslation<MagicSchool>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Resistance":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Resistance);
                    try
                    {
                        item.Resistance = EnumXmlTranslation<Resistance>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CounterEffectCount":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffectCount);
                    try
                    {
                        item.CounterEffectCount = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Light":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.Light);
                    try
                    {
                        item.Light.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ProjectileSpeed":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.ProjectileSpeed);
                    try
                    {
                        item.ProjectileSpeed = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EffectShader":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.EffectShader);
                    try
                    {
                        item.EffectShader.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubData":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.SubData);
                    try
                    {
                        item.SubData = LoquiXmlTranslation<MagicEffectSubData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)MagicEffect_FieldIndex.SubData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState &= ~MagicEffect.DATADataType.Break0;
                    break;
                case "CounterEffects":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.CounterEffects);
                    try
                    {
                        if (ListXmlTranslation<IEDIDLink<MagicEffect>>.Instance.Parse(
                            node: node,
                            enumer: out var CounterEffectsItem,
                            transl: RecordTypeXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.CounterEffects = CounterEffectsItem.ToExtendedList();
                        }
                        else
                        {
                            item.CounterEffects = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)MagicEffect_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<MagicEffect.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MagicEffectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMagicEffectGetter item,
            XElement node,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMagicEffectGetter item,
            string path,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMagicEffectGetter item,
            Stream stream,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static MagicEffectBinaryWriteTranslation Instance = new MagicEffectBinaryWriteTranslation();

        public static void WriteEmbedded(
            IMagicEffectGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IMagicEffectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.DESC_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(MagicEffect_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer);
            }
            if (item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(MagicEffect_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicEffect.MagicFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 4);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.BaseCost);
                    Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Unused);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<MagicSchool>.Instance.Write(
                        writer,
                        item.MagicSchool,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Resistance>.Instance.Write(
                        writer,
                        item.Resistance,
                        length: 4);
                    writer.Write(item.CounterEffectCount);
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Light);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ProjectileSpeed);
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.EffectShader);
                    if (!item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0))
                    {
                        var SubDataItem = item.SubData;
                        ((MagicEffectSubDataBinaryWriteTranslation)((IBinaryItem)SubDataItem).BinaryWriteTranslator).Write(
                            item: SubDataItem,
                            writer: writer,
                            recordTypeConverter: recordTypeConverter);
                    }
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEDIDLinkGetter<IMagicEffectGetter>>.Instance.Write(
                writer: writer,
                items: item.CounterEffects,
                recordType: MagicEffect_Registration.ESCE_HEADER,
                transl: (MutagenWriter subWriter, IEDIDLinkGetter<IMagicEffectGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.RecordTypeBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: MagicEffect_Registration.MGEF_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MagicEffectBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static MagicEffectBinaryCreateTranslation Instance = new MagicEffectBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MagicEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MagicEffectBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IMagicEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static MagicEffect_Registration Registration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMagicEffectGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => MagicEffectCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => MagicEffectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MagicEffectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        private int? _DATALocation;
        public MagicEffect.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value + 0x0;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public MagicEffect.MagicFlag Flags => _Flags_IsSet ? (MagicEffect.MagicFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagsLocation, 4)) : default;
        #endregion
        #region BaseCost
        private int _BaseCostLocation => _DATALocation!.Value + 0x4;
        private bool _BaseCost_IsSet => _DATALocation.HasValue;
        public Single BaseCost => _BaseCost_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_BaseCostLocation, 4)) : default;
        #endregion
        #region Unused
        private int _UnusedLocation => _DATALocation!.Value + 0x8;
        private bool _Unused_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unused => _Unused_IsSet ? _data.Span.Slice(_UnusedLocation, 4).ToArray() : default(ReadOnlyMemorySlice<byte>);
        #endregion
        #region MagicSchool
        private int _MagicSchoolLocation => _DATALocation!.Value + 0xC;
        private bool _MagicSchool_IsSet => _DATALocation.HasValue;
        public MagicSchool MagicSchool => _MagicSchool_IsSet ? (MagicSchool)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_MagicSchoolLocation, 4)) : default;
        #endregion
        #region Resistance
        private int _ResistanceLocation => _DATALocation!.Value + 0x10;
        private bool _Resistance_IsSet => _DATALocation.HasValue;
        public Resistance Resistance => _Resistance_IsSet ? (Resistance)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_ResistanceLocation, 4)) : default;
        #endregion
        #region CounterEffectCount
        private int _CounterEffectCountLocation => _DATALocation!.Value + 0x14;
        private bool _CounterEffectCount_IsSet => _DATALocation.HasValue;
        public UInt32 CounterEffectCount => _CounterEffectCount_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CounterEffectCountLocation, 4)) : default;
        #endregion
        #region Light
        private int _LightLocation => _DATALocation!.Value + 0x18;
        private bool _Light_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ILightGetter> Light => _Light_IsSet ? new FormLink<ILightGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_LightLocation, 4)))) : FormLink<ILightGetter>.Empty;
        #endregion
        #region ProjectileSpeed
        private int _ProjectileSpeedLocation => _DATALocation!.Value + 0x1C;
        private bool _ProjectileSpeed_IsSet => _DATALocation.HasValue;
        public Single ProjectileSpeed => _ProjectileSpeed_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_ProjectileSpeedLocation, 4)) : default;
        #endregion
        #region EffectShader
        private int _EffectShaderLocation => _DATALocation!.Value + 0x20;
        private bool _EffectShader_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IEffectShaderGetter> EffectShader => _EffectShader_IsSet ? new FormLink<IEffectShaderGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_EffectShaderLocation, 4)))) : FormLink<IEffectShaderGetter>.Empty;
        #endregion
        #region SubData
        private int _SubDataLocation => _DATALocation!.Value + 0x24;
        private bool _SubData_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0);
        private IMagicEffectSubDataGetter? _SubData => _SubData_IsSet ? MagicEffectSubDataBinaryOverlay.MagicEffectSubDataFactory(new BinaryMemoryReadStream(_data.Slice(_SubDataLocation)), _package) : default;
        public IMagicEffectSubDataGetter SubData => _SubData ?? new MagicEffectSubData();
        #endregion
        public IReadOnlyList<IEDIDLinkGetter<IMagicEffectGetter>>? CounterEffects { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MagicEffectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MagicEffectBinaryOverlay MagicEffectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new MagicEffectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Name);
                }
                case 0x43534544: // DESC
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Description);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Icon);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.Model);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = MagicEffect.DATADataType.Has;
                    var subLen = _package.Meta.Subrecord(_data.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x24)
                    {
                        this.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                    }
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.SubData);
                }
                case 0x45435345: // ESCE
                {
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.CounterEffects = BinaryOverlaySetList<IEDIDLinkGetter<IMagicEffectGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new EDIDLink<IMagicEffectGetter>(new RecordType(BinaryPrimitives.ReadInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)MagicEffect_FieldIndex.CounterEffects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

