/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class MapData :
        IMapData,
        ILoquiObjectSetter<MapData>,
        IEquatable<MapData>,
        IEqualsMask
    {
        #region Ctor
        public MapData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region UsableDimensions
        public P2Int UsableDimensions { get; set; } = default;
        #endregion
        #region CellCoordinatesNWCell
        public P2Int16 CellCoordinatesNWCell { get; set; } = default;
        #endregion
        #region CellCoordinatesSECell
        public P2Int16 CellCoordinatesSECell { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            MapDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IMapDataGetter rhs)) return false;
            return ((MapDataCommon)((IMapDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(MapData obj)
        {
            return ((MapDataCommon)((IMapDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((MapDataCommon)((IMapDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MapDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MapDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static MapData CreateFromXml(
            XElement node,
            MapData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static MapData CreateFromXml(
            XElement node,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static MapData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new MapData();
            ((MapDataSetterCommon)((IMapDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static MapData CreateFromXml(
            string path,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            string path,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static MapData CreateFromXml(
            Stream stream,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            Stream stream,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static MapData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.UsableDimensions = initialValue;
                this.CellCoordinatesNWCell = initialValue;
                this.CellCoordinatesSECell = initialValue;
            }

            public Mask(
                TItem UsableDimensions,
                TItem CellCoordinatesNWCell,
                TItem CellCoordinatesSECell)
            {
                this.UsableDimensions = UsableDimensions;
                this.CellCoordinatesNWCell = CellCoordinatesNWCell;
                this.CellCoordinatesSECell = CellCoordinatesSECell;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem UsableDimensions;
            public TItem CellCoordinatesNWCell;
            public TItem CellCoordinatesSECell;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.UsableDimensions, rhs.UsableDimensions)) return false;
                if (!object.Equals(this.CellCoordinatesNWCell, rhs.CellCoordinatesNWCell)) return false;
                if (!object.Equals(this.CellCoordinatesSECell, rhs.CellCoordinatesSECell)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.UsableDimensions?.GetHashCode());
                ret = ret.CombineHashCode(this.CellCoordinatesNWCell?.GetHashCode());
                ret = ret.CombineHashCode(this.CellCoordinatesSECell?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.UsableDimensions)) return false;
                if (!eval(this.CellCoordinatesNWCell)) return false;
                if (!eval(this.CellCoordinatesSECell)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.UsableDimensions)) return true;
                if (eval(this.CellCoordinatesNWCell)) return true;
                if (eval(this.CellCoordinatesSECell)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MapData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.UsableDimensions = eval(this.UsableDimensions);
                obj.CellCoordinatesNWCell = eval(this.CellCoordinatesNWCell);
                obj.CellCoordinatesSECell = eval(this.CellCoordinatesSECell);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(MapData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, MapData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(MapData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.UsableDimensions ?? true)
                    {
                        fg.AppendItem(UsableDimensions, "UsableDimensions");
                    }
                    if (printMask?.CellCoordinatesNWCell ?? true)
                    {
                        fg.AppendItem(CellCoordinatesNWCell, "CellCoordinatesNWCell");
                    }
                    if (printMask?.CellCoordinatesSECell ?? true)
                    {
                        fg.AppendItem(CellCoordinatesSECell, "CellCoordinatesSECell");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? UsableDimensions;
            public Exception? CellCoordinatesNWCell;
            public Exception? CellCoordinatesSECell;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MapData_FieldIndex enu = (MapData_FieldIndex)index;
                switch (enu)
                {
                    case MapData_FieldIndex.UsableDimensions:
                        return UsableDimensions;
                    case MapData_FieldIndex.CellCoordinatesNWCell:
                        return CellCoordinatesNWCell;
                    case MapData_FieldIndex.CellCoordinatesSECell:
                        return CellCoordinatesSECell;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MapData_FieldIndex enu = (MapData_FieldIndex)index;
                switch (enu)
                {
                    case MapData_FieldIndex.UsableDimensions:
                        this.UsableDimensions = ex;
                        break;
                    case MapData_FieldIndex.CellCoordinatesNWCell:
                        this.CellCoordinatesNWCell = ex;
                        break;
                    case MapData_FieldIndex.CellCoordinatesSECell:
                        this.CellCoordinatesSECell = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MapData_FieldIndex enu = (MapData_FieldIndex)index;
                switch (enu)
                {
                    case MapData_FieldIndex.UsableDimensions:
                        this.UsableDimensions = (Exception?)obj;
                        break;
                    case MapData_FieldIndex.CellCoordinatesNWCell:
                        this.CellCoordinatesNWCell = (Exception?)obj;
                        break;
                    case MapData_FieldIndex.CellCoordinatesSECell:
                        this.CellCoordinatesSECell = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (UsableDimensions != null) return true;
                if (CellCoordinatesNWCell != null) return true;
                if (CellCoordinatesSECell != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(UsableDimensions, "UsableDimensions");
                fg.AppendItem(CellCoordinatesNWCell, "CellCoordinatesNWCell");
                fg.AppendItem(CellCoordinatesSECell, "CellCoordinatesSECell");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.UsableDimensions = this.UsableDimensions.Combine(rhs.UsableDimensions);
                ret.CellCoordinatesNWCell = this.CellCoordinatesNWCell.Combine(rhs.CellCoordinatesNWCell);
                ret.CellCoordinatesSECell = this.CellCoordinatesSECell.Combine(rhs.CellCoordinatesSECell);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool UsableDimensions;
            public bool CellCoordinatesNWCell;
            public bool CellCoordinatesSECell;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.UsableDimensions = defaultOn;
                this.CellCoordinatesNWCell = defaultOn;
                this.CellCoordinatesSECell = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((UsableDimensions, null));
                ret.Add((CellCoordinatesNWCell, null));
                ret.Add((CellCoordinatesSECell, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = MapData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MapDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MapDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static MapData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static MapData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MapData();
            ((MapDataSetterCommon)((IMapDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((MapDataSetterCommon)((IMapDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MapData GetNew()
        {
            return new MapData();
        }

    }
    #endregion

    #region Interface
    public partial interface IMapData :
        IMapDataGetter,
        ILoquiObjectSetter<IMapData>
    {
        new P2Int UsableDimensions { get; set; }
        new P2Int16 CellCoordinatesNWCell { get; set; }
        new P2Int16 CellCoordinatesSECell { get; set; }
    }

    public partial interface IMapDataGetter :
        ILoquiObject,
        ILoquiObject<IMapDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        P2Int UsableDimensions { get; }
        P2Int16 CellCoordinatesNWCell { get; }
        P2Int16 CellCoordinatesSECell { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MapDataMixIn
    {
        public static void Clear(this IMapData item)
        {
            ((MapDataSetterCommon)((IMapDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MapData.Mask<bool> GetEqualsMask(
            this IMapDataGetter item,
            IMapDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IMapDataGetter item,
            string? name = null,
            MapData.Mask<bool>? printMask = null)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IMapDataGetter item,
            FileGeneration fg,
            string? name = null,
            MapData.Mask<bool>? printMask = null)
        {
            ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IMapDataGetter item,
            MapData.Mask<bool?> checkMask)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static MapData.Mask<bool> GetHasBeenSetMask(this IMapDataGetter item)
        {
            var ret = new MapData.Mask<bool>(false);
            ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IMapDataGetter item,
            IMapDataGetter rhs)
        {
            return ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IMapData lhs,
            IMapDataGetter rhs,
            MapData.TranslationMask? copyMask = null)
        {
            ((MapDataSetterTranslationCommon)((IMapDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IMapData lhs,
            IMapDataGetter rhs,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MapDataSetterTranslationCommon)((IMapDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = MapData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMapData lhs,
            IMapDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MapDataSetterTranslationCommon)((IMapDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static MapData DeepCopy(
            this IMapDataGetter item,
            MapData.TranslationMask? copyMask = null)
        {
            return ((MapDataSetterTranslationCommon)((IMapDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MapData DeepCopy(
            this IMapDataGetter item,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? copyMask = null)
        {
            return ((MapDataSetterTranslationCommon)((IMapDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MapData DeepCopy(
            this IMapDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MapDataSetterTranslationCommon)((IMapDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMapData item,
            XElement node,
            MapData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IMapData item,
            XElement node,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IMapData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((MapDataSetterCommon)((IMapDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            string path,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            string path,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            string path,
            ErrorMaskBuilder? errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IMapData item,
            Stream stream,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            Stream stream,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IMapData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            MapData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IMapData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IMapData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MapDataSetterCommon)((IMapDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum MapData_FieldIndex
    {
        UsableDimensions = 0,
        CellCoordinatesNWCell = 1,
        CellCoordinatesSECell = 2,
    }
    #endregion

    #region Registration
    public partial class MapData_Registration : ILoquiRegistration
    {
        public static readonly MapData_Registration Instance = new MapData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 146,
            version: 0);

        public const string GUID = "493c28c6-8dd0-40cd-9c54-87243564a406";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(MapData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MapData.ErrorMask);

        public static readonly Type ClassType = typeof(MapData);

        public static readonly Type GetterType = typeof(IMapDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMapData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.MapData";

        public const string Name = "MapData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "USABLEDIMENSIONS":
                    return (ushort)MapData_FieldIndex.UsableDimensions;
                case "CELLCOORDINATESNWCELL":
                    return (ushort)MapData_FieldIndex.CellCoordinatesNWCell;
                case "CELLCOORDINATESSECELL":
                    return (ushort)MapData_FieldIndex.CellCoordinatesSECell;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return "UsableDimensions";
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return "CellCoordinatesNWCell";
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return "CellCoordinatesSECell";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                case MapData_FieldIndex.CellCoordinatesNWCell:
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MapData_FieldIndex enu = (MapData_FieldIndex)index;
            switch (enu)
            {
                case MapData_FieldIndex.UsableDimensions:
                    return typeof(P2Int);
                case MapData_FieldIndex.CellCoordinatesNWCell:
                    return typeof(P2Int16);
                case MapData_FieldIndex.CellCoordinatesSECell:
                    return typeof(P2Int16);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(MapDataXmlWriteTranslation);
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType TriggeringRecordType = MNAM_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(MapDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class MapDataSetterCommon
    {
        public static readonly MapDataSetterCommon Instance = new MapDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMapData item)
        {
            ClearPartial();
            item.UsableDimensions = default;
            item.CellCoordinatesNWCell = default;
            item.CellCoordinatesSECell = default;
        }
        
        #region Xml Translation
        public void CopyInFromXml(
            IMapData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IMapData item,
            MutagenFrame frame)
        {
            item.UsableDimensions = Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Parse(frame: frame);
            item.CellCoordinatesNWCell = Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(frame: frame);
            item.CellCoordinatesSECell = Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public void CopyInFromBinary(
            IMapData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(MapData_Registration.MNAM_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                setFinal: true,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class MapDataCommon
    {
        public static readonly MapDataCommon Instance = new MapDataCommon();

        public MapData.Mask<bool> GetEqualsMask(
            IMapDataGetter item,
            IMapDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MapData.Mask<bool>(false);
            ((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMapDataGetter item,
            IMapDataGetter rhs,
            MapData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.UsableDimensions = item.UsableDimensions.Equals(rhs.UsableDimensions);
            ret.CellCoordinatesNWCell = item.CellCoordinatesNWCell.Equals(rhs.CellCoordinatesNWCell);
            ret.CellCoordinatesSECell = item.CellCoordinatesSECell.Equals(rhs.CellCoordinatesSECell);
        }
        
        public string ToString(
            IMapDataGetter item,
            string? name = null,
            MapData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IMapDataGetter item,
            FileGeneration fg,
            string? name = null,
            MapData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"MapData =>");
            }
            else
            {
                fg.AppendLine($"{name} (MapData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IMapDataGetter item,
            FileGeneration fg,
            MapData.Mask<bool>? printMask = null)
        {
            if (printMask?.UsableDimensions ?? true)
            {
                fg.AppendItem(item.UsableDimensions, "UsableDimensions");
            }
            if (printMask?.CellCoordinatesNWCell ?? true)
            {
                fg.AppendItem(item.CellCoordinatesNWCell, "CellCoordinatesNWCell");
            }
            if (printMask?.CellCoordinatesSECell ?? true)
            {
                fg.AppendItem(item.CellCoordinatesSECell, "CellCoordinatesSECell");
            }
        }
        
        public bool HasBeenSet(
            IMapDataGetter item,
            MapData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IMapDataGetter item,
            MapData.Mask<bool> mask)
        {
            mask.UsableDimensions = true;
            mask.CellCoordinatesNWCell = true;
            mask.CellCoordinatesSECell = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMapDataGetter? lhs,
            IMapDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!lhs.UsableDimensions.Equals(rhs.UsableDimensions)) return false;
            if (!lhs.CellCoordinatesNWCell.Equals(rhs.CellCoordinatesNWCell)) return false;
            if (!lhs.CellCoordinatesSECell.Equals(rhs.CellCoordinatesSECell)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IMapDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.UsableDimensions).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CellCoordinatesNWCell).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.CellCoordinatesSECell).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MapData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IMapDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class MapDataSetterTranslationCommon
    {
        public static readonly MapDataSetterTranslationCommon Instance = new MapDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IMapData item,
            IMapDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)MapData_FieldIndex.UsableDimensions) ?? true))
            {
                item.UsableDimensions = rhs.UsableDimensions;
            }
            if ((copyMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesNWCell) ?? true))
            {
                item.CellCoordinatesNWCell = rhs.CellCoordinatesNWCell;
            }
            if ((copyMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesSECell) ?? true))
            {
                item.CellCoordinatesSECell = rhs.CellCoordinatesSECell;
            }
        }
        
        #endregion
        
        public MapData DeepCopy(
            IMapDataGetter item,
            MapData.TranslationMask? copyMask = null)
        {
            MapData ret = (MapData)((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public MapData DeepCopy(
            IMapDataGetter item,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? copyMask = null)
        {
            MapData ret = (MapData)((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public MapData DeepCopy(
            IMapDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MapData ret = (MapData)((MapDataCommon)((IMapDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class MapData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapData_Registration.Instance;
        public static MapData_Registration Registration => MapData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MapDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MapDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MapDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMapDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static MapDataXmlWriteTranslation Instance = new MapDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IMapDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.UsableDimensions) ?? true))
            {
                P2IntXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UsableDimensions),
                    item: item.UsableDimensions,
                    fieldIndex: (int)MapData_FieldIndex.UsableDimensions,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesNWCell) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CellCoordinatesNWCell),
                    item: item.CellCoordinatesNWCell,
                    fieldIndex: (int)MapData_FieldIndex.CellCoordinatesNWCell,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MapData_FieldIndex.CellCoordinatesSECell) ?? true))
            {
                P2Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CellCoordinatesSECell),
                    item: item.CellCoordinatesSECell,
                    fieldIndex: (int)MapData_FieldIndex.CellCoordinatesSECell,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IMapDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.MapData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.MapData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IMapDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IMapDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IMapDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class MapDataXmlCreateTranslation
    {
        public readonly static MapDataXmlCreateTranslation Instance = new MapDataXmlCreateTranslation();

        public static void FillPublicXml(
            IMapData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    MapDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IMapData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "UsableDimensions":
                    errorMask?.PushIndex((int)MapData_FieldIndex.UsableDimensions);
                    try
                    {
                        item.UsableDimensions = P2IntXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CellCoordinatesNWCell":
                    errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesNWCell);
                    try
                    {
                        item.CellCoordinatesNWCell = P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CellCoordinatesSECell":
                    errorMask?.PushIndex((int)MapData_FieldIndex.CellCoordinatesSECell);
                    try
                    {
                        item.CellCoordinatesSECell = P2Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class MapDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IMapDataGetter item,
            XElement node,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MapData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            string path,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            Stream stream,
            out MapData.ErrorMask errorMask,
            MapData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            XElement node,
            string? name = null,
            MapData.TranslationMask? translationMask = null)
        {
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IMapDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((MapDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static MapDataBinaryWriteTranslation Instance = new MapDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IMapDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.P2IntBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UsableDimensions);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CellCoordinatesNWCell);
            Mutagen.Bethesda.Binary.P2Int16BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CellCoordinatesSECell);
        }

        public void Write(
            MutagenWriter writer,
            IMapDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: MapData_Registration.MNAM_HEADER,
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IMapDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class MapDataBinaryCreateTranslation
    {
        public readonly static MapDataBinaryCreateTranslation Instance = new MapDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class MapDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMapDataGetter item,
            MutagenWriter writer)
        {
            ((MapDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class MapDataBinaryOverlay :
        BinaryOverlay,
        IMapDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MapData_Registration.Instance;
        public static MapData_Registration Registration => MapData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MapDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MapDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMapDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMapDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMapDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IMapDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => MapDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((MapDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MapDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((MapDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        public P2Int UsableDimensions => P2IntBinaryTranslation.Read(_data.Span.Slice(0, 8));
        public P2Int16 CellCoordinatesNWCell => P2Int16BinaryTranslation.Read(_data.Span.Slice(8, 4));
        public P2Int16 CellCoordinatesSECell => P2Int16BinaryTranslation.Read(_data.Span.Slice(12, 4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected MapDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static MapDataBinaryOverlay MapDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new MapDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x10 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

    }

}
#endregion

#endregion

