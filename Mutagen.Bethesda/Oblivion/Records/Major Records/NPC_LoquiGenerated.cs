/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Drawing;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Npc :
        ANpc,
        INpcInternal,
        ILoquiObjectSetter<Npc>,
        IEquatable<Npc>,
        IEqualsMask
    {
        #region Ctor
        protected Npc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? INpcGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? INpcGetter.Model => this.Model;
        #endregion
        #region Configuration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcConfiguration? _Configuration;
        public NpcConfiguration? Configuration
        {
            get => _Configuration;
            set => _Configuration = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcConfigurationGetter? INpcGetter.Configuration => this.Configuration;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            protected set => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> INpcGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        public FormLinkNullable<AItem> DeathItem { get; set; } = new FormLinkNullable<AItem>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAItemGetter> INpcGetter.DeathItem => this.DeathItem;
        #endregion
        #region Race
        public FormLinkNullable<Race> Race { get; set; } = new FormLinkNullable<Race>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> INpcGetter.Race => this.Race;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<ASpell>> _Spells = new ExtendedList<IFormLink<ASpell>>();
        public ExtendedList<IFormLink<ASpell>> Spells
        {
            get => this._Spells;
            protected set => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IASpellGetter>> INpcGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Script
        public FormLinkNullable<Script> Script { get; set; } = new FormLinkNullable<Script>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> INpcGetter.Script => this.Script;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ItemEntry> _Items = new ExtendedList<ItemEntry>();
        public ExtendedList<ItemEntry> Items
        {
            get => this._Items;
            protected set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IItemEntryGetter> INpcGetter.Items => _Items;
        #endregion

        #endregion
        #region AIData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIData? _AIData;
        public AIData? AIData
        {
            get => _AIData;
            set => _AIData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIDataGetter? INpcGetter.AIData => this.AIData;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<AIPackage>> _AIPackages = new ExtendedList<IFormLink<AIPackage>>();
        public ExtendedList<IFormLink<AIPackage>> AIPackages
        {
            get => this._AIPackages;
            protected set => this._AIPackages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> INpcGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Animations;
        public ExtendedList<String>? Animations
        {
            get => this._Animations;
            set => this._Animations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? INpcGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Class
        public FormLinkNullable<Class> Class { get; set; } = new FormLinkNullable<Class>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClassGetter> INpcGetter.Class => this.Class;
        #endregion
        #region Stats
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcData? _Stats;
        public NpcData? Stats
        {
            get => _Stats;
            set => _Stats = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcDataGetter? INpcGetter.Stats => this.Stats;
        #endregion
        #region Hair
        public FormLinkNullable<Hair> Hair { get; set; } = new FormLinkNullable<Hair>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IHairGetter> INpcGetter.Hair => this.Hair;
        #endregion
        #region HairLength
        public Single? HairLength { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? INpcGetter.HairLength => this.HairLength;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLink<Eye>>? _Eyes;
        public ExtendedList<IFormLink<Eye>>? Eyes
        {
            get => this._Eyes;
            set => this._Eyes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEyeGetter>>? INpcGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region HairColor
        public Color? HairColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? INpcGetter.HairColor => this.HairColor;
        #endregion
        #region CombatStyle
        public FormLinkNullable<CombatStyle> CombatStyle { get; set; } = new FormLinkNullable<CombatStyle>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> INpcGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region FaceGenGeometrySymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FaceGenGeometrySymmetric;
        public Byte[]? FaceGenGeometrySymmetric
        {
            get => this._FaceGenGeometrySymmetric;
            set => this._FaceGenGeometrySymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FaceGenGeometrySymmetric => this.FaceGenGeometrySymmetric;
        #endregion
        #region FaceGenGeometryAsymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FaceGenGeometryAsymmetric;
        public Byte[]? FaceGenGeometryAsymmetric
        {
            get => this._FaceGenGeometryAsymmetric;
            set => this._FaceGenGeometryAsymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FaceGenGeometryAsymmetric => this.FaceGenGeometryAsymmetric;
        #endregion
        #region FaceGenTextureSymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FaceGenTextureSymmetric;
        public Byte[]? FaceGenTextureSymmetric
        {
            get => this._FaceGenTextureSymmetric;
            set => this._FaceGenTextureSymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FaceGenTextureSymmetric => this.FaceGenTextureSymmetric;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Unknown;
        public Byte[]? Unknown
        {
            get => this._Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.Unknown => this.Unknown;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is INpcGetter rhs)) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Npc obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => NpcXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NpcXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Npc CreateFromXml(
            XElement node,
            Npc.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Npc CreateFromXml(
            XElement node,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Npc CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Npc();
            ((NpcSetterCommon)((INpcGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Npc CreateFromXml(
            string path,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Npc CreateFromXml(
            string path,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Npc CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Npc CreateFromXml(
            Stream stream,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Npc CreateFromXml(
            Stream stream,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Npc CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ANpc.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(initialValue, new NpcConfiguration.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Race = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(initialValue, new AIData.Mask<TItem>(initialValue));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = initialValue;
                this.Stats = new MaskItem<TItem, NpcData.Mask<TItem>?>(initialValue, new NpcData.Mask<TItem>(initialValue));
                this.Hair = initialValue;
                this.HairLength = initialValue;
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = initialValue;
                this.CombatStyle = initialValue;
                this.FaceGenGeometrySymmetric = initialValue;
                this.FaceGenGeometryAsymmetric = initialValue;
                this.FaceGenTextureSymmetric = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Configuration,
                TItem Factions,
                TItem DeathItem,
                TItem Race,
                TItem Spells,
                TItem Script,
                TItem Items,
                TItem AIData,
                TItem AIPackages,
                TItem Animations,
                TItem Class,
                TItem Stats,
                TItem Hair,
                TItem HairLength,
                TItem Eyes,
                TItem HairColor,
                TItem CombatStyle,
                TItem FaceGenGeometrySymmetric,
                TItem FaceGenGeometryAsymmetric,
                TItem FaceGenTextureSymmetric,
                TItem Unknown)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(Configuration, new NpcConfiguration.Mask<TItem>(Configuration));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Race = Race;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = Script;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(AIData, new AIData.Mask<TItem>(AIData));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AIPackages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Animations, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = Class;
                this.Stats = new MaskItem<TItem, NpcData.Mask<TItem>?>(Stats, new NpcData.Mask<TItem>(Stats));
                this.Hair = Hair;
                this.HairLength = HairLength;
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Eyes, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = HairColor;
                this.CombatStyle = CombatStyle;
                this.FaceGenGeometrySymmetric = FaceGenGeometrySymmetric;
                this.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetric;
                this.FaceGenTextureSymmetric = FaceGenTextureSymmetric;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, NpcConfiguration.Mask<TItem>?>? Configuration { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public TItem Script;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, AIData.Mask<TItem>?>? AIData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AIPackages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Animations;
            public TItem Class;
            public MaskItem<TItem, NpcData.Mask<TItem>?>? Stats { get; set; }
            public TItem Hair;
            public TItem HairLength;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Eyes;
            public TItem HairColor;
            public TItem CombatStyle;
            public TItem FaceGenGeometrySymmetric;
            public TItem FaceGenGeometryAsymmetric;
            public TItem FaceGenTextureSymmetric;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.AIData, rhs.AIData)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.Class, rhs.Class)) return false;
                if (!object.Equals(this.Stats, rhs.Stats)) return false;
                if (!object.Equals(this.Hair, rhs.Hair)) return false;
                if (!object.Equals(this.HairLength, rhs.HairLength)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
                if (!object.Equals(this.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
                if (!object.Equals(this.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Configuration);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Race);
                hash.Add(this.Spells);
                hash.Add(this.Script);
                hash.Add(this.Items);
                hash.Add(this.AIData);
                hash.Add(this.AIPackages);
                hash.Add(this.Animations);
                hash.Add(this.Class);
                hash.Add(this.Stats);
                hash.Add(this.Hair);
                hash.Add(this.HairLength);
                hash.Add(this.Eyes);
                hash.Add(this.HairColor);
                hash.Add(this.CombatStyle);
                hash.Add(this.FaceGenGeometrySymmetric);
                hash.Add(this.FaceGenGeometryAsymmetric);
                hash.Add(this.FaceGenTextureSymmetric);
                hash.Add(this.Unknown);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Configuration != null)
                {
                    if (!eval(this.Configuration.Overall)) return false;
                    if (this.Configuration.Specific != null && !this.Configuration.Specific.All(eval)) return false;
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Race)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Script)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (!eval(this.AIData.Overall)) return false;
                    if (this.AIData.Specific != null && !this.AIData.Specific.All(eval)) return false;
                }
                if (this.AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Class)) return false;
                if (Stats != null)
                {
                    if (!eval(this.Stats.Overall)) return false;
                    if (this.Stats.Specific != null && !this.Stats.Specific.All(eval)) return false;
                }
                if (!eval(this.Hair)) return false;
                if (!eval(this.HairLength)) return false;
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HairColor)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.FaceGenGeometrySymmetric)) return false;
                if (!eval(this.FaceGenGeometryAsymmetric)) return false;
                if (!eval(this.FaceGenTextureSymmetric)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Configuration != null)
                {
                    if (eval(this.Configuration.Overall)) return true;
                    if (this.Configuration.Specific != null && this.Configuration.Specific.Any(eval)) return true;
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Race)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Script)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (eval(this.AIData.Overall)) return true;
                    if (this.AIData.Specific != null && this.AIData.Specific.Any(eval)) return true;
                }
                if (this.AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (eval(this.Animations.Overall)) return true;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Class)) return true;
                if (Stats != null)
                {
                    if (eval(this.Stats.Overall)) return true;
                    if (this.Stats.Specific != null && this.Stats.Specific.Any(eval)) return true;
                }
                if (eval(this.Hair)) return true;
                if (eval(this.HairLength)) return true;
                if (this.Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.HairColor)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.FaceGenGeometrySymmetric)) return true;
                if (eval(this.FaceGenGeometryAsymmetric)) return true;
                if (eval(this.FaceGenTextureSymmetric)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Npc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Configuration = this.Configuration == null ? null : new MaskItem<R, NpcConfiguration.Mask<R>?>(eval(this.Configuration.Overall), this.Configuration.Specific?.Translate(eval));
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Race = eval(this.Race);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Script = eval(this.Script);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, ItemEntry.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, ItemEntry.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AIData = this.AIData == null ? null : new MaskItem<R, AIData.Mask<R>?>(eval(this.AIData.Overall), this.AIData.Specific?.Translate(eval));
                if (AIPackages != null)
                {
                    obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AIPackages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AIPackages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AIPackages.Specific = l;
                        foreach (var item in AIPackages.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Class = eval(this.Class);
                obj.Stats = this.Stats == null ? null : new MaskItem<R, NpcData.Mask<R>?>(eval(this.Stats.Overall), this.Stats.Specific?.Translate(eval));
                obj.Hair = eval(this.Hair);
                obj.HairLength = eval(this.HairLength);
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HairColor = eval(this.HairColor);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.FaceGenGeometrySymmetric = eval(this.FaceGenGeometrySymmetric);
                obj.FaceGenGeometryAsymmetric = eval(this.FaceGenGeometryAsymmetric);
                obj.FaceGenTextureSymmetric = eval(this.FaceGenTextureSymmetric);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Npc.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Npc.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Npc.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Configuration?.Overall ?? true)
                    {
                        Configuration?.ToString(fg);
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions.TryGet(out var FactionsItem))
                    {
                        fg.AppendLine("Factions =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        fg.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Race ?? true)
                    {
                        fg.AppendItem(Race, "Race");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells.TryGet(out var SpellsItem))
                    {
                        fg.AppendLine("Spells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.AIData?.Overall ?? true)
                    {
                        AIData?.ToString(fg);
                    }
                    if ((printMask?.AIPackages?.Overall ?? true)
                        && AIPackages.TryGet(out var AIPackagesItem))
                    {
                        fg.AppendLine("AIPackages =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AIPackagesItem.Overall);
                            if (AIPackagesItem.Specific != null)
                            {
                                foreach (var subItem in AIPackagesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if ((printMask?.Animations?.Overall ?? true)
                        && Animations.TryGet(out var AnimationsItem))
                    {
                        fg.AppendLine("Animations =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(AnimationsItem.Overall);
                            if (AnimationsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Class ?? true)
                    {
                        fg.AppendItem(Class, "Class");
                    }
                    if (printMask?.Stats?.Overall ?? true)
                    {
                        Stats?.ToString(fg);
                    }
                    if (printMask?.Hair ?? true)
                    {
                        fg.AppendItem(Hair, "Hair");
                    }
                    if (printMask?.HairLength ?? true)
                    {
                        fg.AppendItem(HairLength, "HairLength");
                    }
                    if ((printMask?.Eyes?.Overall ?? true)
                        && Eyes.TryGet(out var EyesItem))
                    {
                        fg.AppendLine("Eyes =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EyesItem.Overall);
                            if (EyesItem.Specific != null)
                            {
                                foreach (var subItem in EyesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.HairColor ?? true)
                    {
                        fg.AppendItem(HairColor, "HairColor");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        fg.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.FaceGenGeometrySymmetric ?? true)
                    {
                        fg.AppendItem(FaceGenGeometrySymmetric, "FaceGenGeometrySymmetric");
                    }
                    if (printMask?.FaceGenGeometryAsymmetric ?? true)
                    {
                        fg.AppendItem(FaceGenGeometryAsymmetric, "FaceGenGeometryAsymmetric");
                    }
                    if (printMask?.FaceGenTextureSymmetric ?? true)
                    {
                        fg.AppendItem(FaceGenTextureSymmetric, "FaceGenTextureSymmetric");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ANpc.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, NpcConfiguration.ErrorMask?>? Configuration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public Exception? Script;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, AIData.ErrorMask?>? AIData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AIPackages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public Exception? Class;
            public MaskItem<Exception?, NpcData.ErrorMask?>? Stats;
            public Exception? Hair;
            public Exception? HairLength;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public Exception? HairColor;
            public Exception? CombatStyle;
            public Exception? FaceGenGeometrySymmetric;
            public Exception? FaceGenGeometryAsymmetric;
            public Exception? FaceGenTextureSymmetric;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.Name:
                        return Name;
                    case Npc_FieldIndex.Model:
                        return Model;
                    case Npc_FieldIndex.Configuration:
                        return Configuration;
                    case Npc_FieldIndex.Factions:
                        return Factions;
                    case Npc_FieldIndex.DeathItem:
                        return DeathItem;
                    case Npc_FieldIndex.Race:
                        return Race;
                    case Npc_FieldIndex.Spells:
                        return Spells;
                    case Npc_FieldIndex.Script:
                        return Script;
                    case Npc_FieldIndex.Items:
                        return Items;
                    case Npc_FieldIndex.AIData:
                        return AIData;
                    case Npc_FieldIndex.AIPackages:
                        return AIPackages;
                    case Npc_FieldIndex.Animations:
                        return Animations;
                    case Npc_FieldIndex.Class:
                        return Class;
                    case Npc_FieldIndex.Stats:
                        return Stats;
                    case Npc_FieldIndex.Hair:
                        return Hair;
                    case Npc_FieldIndex.HairLength:
                        return HairLength;
                    case Npc_FieldIndex.Eyes:
                        return Eyes;
                    case Npc_FieldIndex.HairColor:
                        return HairColor;
                    case Npc_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Npc_FieldIndex.FaceGenGeometrySymmetric:
                        return FaceGenGeometrySymmetric;
                    case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                        return FaceGenGeometryAsymmetric;
                    case Npc_FieldIndex.FaceGenTextureSymmetric:
                        return FaceGenTextureSymmetric;
                    case Npc_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Npc_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = new MaskItem<Exception?, NpcConfiguration.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Npc_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = new MaskItem<Exception?, AIData.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = ex;
                        break;
                    case Npc_FieldIndex.Stats:
                        this.Stats = new MaskItem<Exception?, NpcData.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Hair:
                        this.Hair = ex;
                        break;
                    case Npc_FieldIndex.HairLength:
                        this.HairLength = ex;
                        break;
                    case Npc_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = ex;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Npc_FieldIndex.FaceGenGeometrySymmetric:
                        this.FaceGenGeometrySymmetric = ex;
                        break;
                    case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                        this.FaceGenGeometryAsymmetric = ex;
                        break;
                    case Npc_FieldIndex.FaceGenTextureSymmetric:
                        this.FaceGenTextureSymmetric = ex;
                        break;
                    case Npc_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = (MaskItem<Exception?, NpcConfiguration.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = (MaskItem<Exception?, AIData.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Stats:
                        this.Stats = (MaskItem<Exception?, NpcData.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Hair:
                        this.Hair = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HairLength:
                        this.HairLength = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceGenGeometrySymmetric:
                        this.FaceGenGeometrySymmetric = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                        this.FaceGenGeometryAsymmetric = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceGenTextureSymmetric:
                        this.FaceGenTextureSymmetric = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Configuration != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Race != null) return true;
                if (Spells != null) return true;
                if (Script != null) return true;
                if (Items != null) return true;
                if (AIData != null) return true;
                if (AIPackages != null) return true;
                if (Animations != null) return true;
                if (Class != null) return true;
                if (Stats != null) return true;
                if (Hair != null) return true;
                if (HairLength != null) return true;
                if (Eyes != null) return true;
                if (HairColor != null) return true;
                if (CombatStyle != null) return true;
                if (FaceGenGeometrySymmetric != null) return true;
                if (FaceGenGeometryAsymmetric != null) return true;
                if (FaceGenTextureSymmetric != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                Configuration?.ToString(fg);
                if (Factions.TryGet(out var FactionsItem))
                {
                    fg.AppendLine("Factions =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(DeathItem, "DeathItem");
                fg.AppendItem(Race, "Race");
                if (Spells.TryGet(out var SpellsItem))
                {
                    fg.AppendLine("Spells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Script, "Script");
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                AIData?.ToString(fg);
                if (AIPackages.TryGet(out var AIPackagesItem))
                {
                    fg.AppendLine("AIPackages =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AIPackagesItem.Overall);
                        if (AIPackagesItem.Specific != null)
                        {
                            foreach (var subItem in AIPackagesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Animations.TryGet(out var AnimationsItem))
                {
                    fg.AppendLine("Animations =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(AnimationsItem.Overall);
                        if (AnimationsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(Class, "Class");
                Stats?.ToString(fg);
                fg.AppendItem(Hair, "Hair");
                fg.AppendItem(HairLength, "HairLength");
                if (Eyes.TryGet(out var EyesItem))
                {
                    fg.AppendLine("Eyes =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EyesItem.Overall);
                        if (EyesItem.Specific != null)
                        {
                            foreach (var subItem in EyesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(HairColor, "HairColor");
                fg.AppendItem(CombatStyle, "CombatStyle");
                fg.AppendItem(FaceGenGeometrySymmetric, "FaceGenGeometrySymmetric");
                fg.AppendItem(FaceGenGeometryAsymmetric, "FaceGenGeometryAsymmetric");
                fg.AppendItem(FaceGenTextureSymmetric, "FaceGenTextureSymmetric");
                fg.AppendItem(Unknown, "Unknown");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Configuration = this.Configuration.Combine(rhs.Configuration, (l, r) => l.Combine(r));
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.AIData = this.AIData.Combine(rhs.AIData, (l, r) => l.Combine(r));
                ret.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.AIPackages?.Overall, rhs.AIPackages?.Overall), ExceptionExt.Combine(this.AIPackages?.Specific, rhs.AIPackages?.Specific));
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.Class = this.Class.Combine(rhs.Class);
                ret.Stats = this.Stats.Combine(rhs.Stats, (l, r) => l.Combine(r));
                ret.Hair = this.Hair.Combine(rhs.Hair);
                ret.HairLength = this.HairLength.Combine(rhs.HairLength);
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.HairColor = this.HairColor.Combine(rhs.HairColor);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.FaceGenGeometrySymmetric = this.FaceGenGeometrySymmetric.Combine(rhs.FaceGenGeometrySymmetric);
                ret.FaceGenGeometryAsymmetric = this.FaceGenGeometryAsymmetric.Combine(rhs.FaceGenGeometryAsymmetric);
                ret.FaceGenTextureSymmetric = this.FaceGenTextureSymmetric.Combine(rhs.FaceGenTextureSymmetric);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ANpc.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public MaskItem<bool, NpcConfiguration.TranslationMask?> Configuration;
            public MaskItem<bool, RankPlacement.TranslationMask?> Factions;
            public bool DeathItem;
            public bool Race;
            public bool Spells;
            public bool Script;
            public MaskItem<bool, ItemEntry.TranslationMask?> Items;
            public MaskItem<bool, AIData.TranslationMask?> AIData;
            public bool AIPackages;
            public bool Animations;
            public bool Class;
            public MaskItem<bool, NpcData.TranslationMask?> Stats;
            public bool Hair;
            public bool HairLength;
            public bool Eyes;
            public bool HairColor;
            public bool CombatStyle;
            public bool FaceGenGeometrySymmetric;
            public bool FaceGenGeometryAsymmetric;
            public bool FaceGenTextureSymmetric;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Configuration = new MaskItem<bool, NpcConfiguration.TranslationMask?>(defaultOn, null);
                this.Factions = new MaskItem<bool, RankPlacement.TranslationMask?>(defaultOn, null);
                this.DeathItem = defaultOn;
                this.Race = defaultOn;
                this.Spells = defaultOn;
                this.Script = defaultOn;
                this.Items = new MaskItem<bool, ItemEntry.TranslationMask?>(defaultOn, null);
                this.AIData = new MaskItem<bool, AIData.TranslationMask?>(defaultOn, null);
                this.AIPackages = defaultOn;
                this.Animations = defaultOn;
                this.Class = defaultOn;
                this.Stats = new MaskItem<bool, NpcData.TranslationMask?>(defaultOn, null);
                this.Hair = defaultOn;
                this.HairLength = defaultOn;
                this.Eyes = defaultOn;
                this.HairColor = defaultOn;
                this.CombatStyle = defaultOn;
                this.FaceGenGeometrySymmetric = defaultOn;
                this.FaceGenGeometryAsymmetric = defaultOn;
                this.FaceGenTextureSymmetric = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Configuration?.Overall ?? true, Configuration?.Specific?.GetCrystal()));
                ret.Add((Factions?.Overall ?? true, Factions?.Specific?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Race, null));
                ret.Add((Spells, null));
                ret.Add((Script, null));
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
                ret.Add((AIData?.Overall ?? true, AIData?.Specific?.GetCrystal()));
                ret.Add((AIPackages, null));
                ret.Add((Animations, null));
                ret.Add((Class, null));
                ret.Add((Stats?.Overall ?? true, Stats?.Specific?.GetCrystal()));
                ret.Add((Hair, null));
                ret.Add((HairLength, null));
                ret.Add((Eyes, null));
                ret.Add((HairColor, null));
                ret.Add((CombatStyle, null));
                ret.Add((FaceGenGeometrySymmetric, null));
                ret.Add((FaceGenGeometryAsymmetric, null));
                ret.Add((FaceGenTextureSymmetric, null));
                ret.Add((Unknown, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Npc_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => NpcCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => NpcCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcCommon.Instance.RemapLinks(this, mapping);
        public Npc(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Npc(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Npc(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Npc CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Npc CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Npc();
            ((NpcSetterCommon)((INpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INpcGetter)rhs, include);

        void IClearable.Clear()
        {
            ((NpcSetterCommon)((INpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Npc GetNew()
        {
            return new Npc();
        }

    }
    #endregion

    #region Interface
    public partial interface INpc :
        INpcGetter,
        IANpc,
        INamed,
        IOwner,
        ILoquiObjectSetter<INpcInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new NpcConfiguration? Configuration { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new FormLinkNullable<AItem> DeathItem { get; set; }
        new FormLinkNullable<Race> Race { get; set; }
        new ExtendedList<IFormLink<ASpell>> Spells { get; }
        new FormLinkNullable<Script> Script { get; set; }
        new ExtendedList<ItemEntry> Items { get; }
        new AIData? AIData { get; set; }
        new ExtendedList<IFormLink<AIPackage>> AIPackages { get; }
        new ExtendedList<String>? Animations { get; set; }
        new FormLinkNullable<Class> Class { get; set; }
        new NpcData? Stats { get; set; }
        new FormLinkNullable<Hair> Hair { get; set; }
        new Single? HairLength { get; set; }
        new ExtendedList<IFormLink<Eye>>? Eyes { get; set; }
        new Color? HairColor { get; set; }
        new FormLinkNullable<CombatStyle> CombatStyle { get; set; }
        new Byte[]? FaceGenGeometrySymmetric { get; set; }
        new Byte[]? FaceGenGeometryAsymmetric { get; set; }
        new Byte[]? FaceGenTextureSymmetric { get; set; }
        new Byte[]? Unknown { get; set; }
    }

    public partial interface INpcInternal :
        IANpcInternal,
        INpc,
        INpcGetter
    {
    }

    public partial interface INpcGetter :
        IANpcGetter,
        INamedGetter,
        IOwnerGetter,
        ILoquiObject<INpcGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Npc_Registration.Instance;
        String? Name { get; }
        IModelGetter? Model { get; }
        INpcConfigurationGetter? Configuration { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        IFormLinkNullableGetter<IAItemGetter> DeathItem { get; }
        IFormLinkNullableGetter<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLinkGetter<IASpellGetter>> Spells { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IReadOnlyList<IItemEntryGetter> Items { get; }
        IAIDataGetter? AIData { get; }
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; }
        IReadOnlyList<String>? Animations { get; }
        IFormLinkNullableGetter<IClassGetter> Class { get; }
        INpcDataGetter? Stats { get; }
        IFormLinkNullableGetter<IHairGetter> Hair { get; }
        Single? HairLength { get; }
        IReadOnlyList<IFormLinkGetter<IEyeGetter>>? Eyes { get; }
        Color? HairColor { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle { get; }
        ReadOnlyMemorySlice<Byte>? FaceGenGeometrySymmetric { get; }
        ReadOnlyMemorySlice<Byte>? FaceGenGeometryAsymmetric { get; }
        ReadOnlyMemorySlice<Byte>? FaceGenTextureSymmetric { get; }
        ReadOnlyMemorySlice<Byte>? Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcMixIn
    {
        public static void Clear(this INpcInternal item)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Npc.Mask<bool> GetEqualsMask(
            this INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this INpcGetter item,
            FileGeneration fg,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this INpcGetter item,
            Npc.Mask<bool?> checkMask)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Npc.Mask<bool> GetHasBeenSetMask(this INpcGetter item)
        {
            var ret = new Npc.Mask<bool>(false);
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this INpcGetter item,
            INpcGetter rhs)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INpcInternal item,
            XElement node,
            Npc.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this INpcInternal item,
            XElement node,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            string path,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            string path,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            Stream stream,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            Stream stream,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this INpcInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Npc.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this INpcInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this INpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Npc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Configuration = 7,
        Factions = 8,
        DeathItem = 9,
        Race = 10,
        Spells = 11,
        Script = 12,
        Items = 13,
        AIData = 14,
        AIPackages = 15,
        Animations = 16,
        Class = 17,
        Stats = 18,
        Hair = 19,
        HairLength = 20,
        Eyes = 21,
        HairColor = 22,
        CombatStyle = 23,
        FaceGenGeometrySymmetric = 24,
        FaceGenGeometryAsymmetric = 25,
        FaceGenTextureSymmetric = 26,
        Unknown = 27,
    }
    #endregion

    #region Registration
    public partial class Npc_Registration : ILoquiRegistration
    {
        public static readonly Npc_Registration Instance = new Npc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 84,
            version: 0);

        public const string GUID = "96396343-a32a-4165-b745-e038c5e06eeb";

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(Npc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Npc.ErrorMask);

        public static readonly Type ClassType = typeof(Npc);

        public static readonly Type GetterType = typeof(INpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpc);

        public static readonly Type? InternalSetterType = typeof(INpcInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Npc";

        public const string Name = "Npc";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Npc_FieldIndex.Name;
                case "MODEL":
                    return (ushort)Npc_FieldIndex.Model;
                case "CONFIGURATION":
                    return (ushort)Npc_FieldIndex.Configuration;
                case "FACTIONS":
                    return (ushort)Npc_FieldIndex.Factions;
                case "DEATHITEM":
                    return (ushort)Npc_FieldIndex.DeathItem;
                case "RACE":
                    return (ushort)Npc_FieldIndex.Race;
                case "SPELLS":
                    return (ushort)Npc_FieldIndex.Spells;
                case "SCRIPT":
                    return (ushort)Npc_FieldIndex.Script;
                case "ITEMS":
                    return (ushort)Npc_FieldIndex.Items;
                case "AIDATA":
                    return (ushort)Npc_FieldIndex.AIData;
                case "AIPACKAGES":
                    return (ushort)Npc_FieldIndex.AIPackages;
                case "ANIMATIONS":
                    return (ushort)Npc_FieldIndex.Animations;
                case "CLASS":
                    return (ushort)Npc_FieldIndex.Class;
                case "STATS":
                    return (ushort)Npc_FieldIndex.Stats;
                case "HAIR":
                    return (ushort)Npc_FieldIndex.Hair;
                case "HAIRLENGTH":
                    return (ushort)Npc_FieldIndex.HairLength;
                case "EYES":
                    return (ushort)Npc_FieldIndex.Eyes;
                case "HAIRCOLOR":
                    return (ushort)Npc_FieldIndex.HairColor;
                case "COMBATSTYLE":
                    return (ushort)Npc_FieldIndex.CombatStyle;
                case "FACEGENGEOMETRYSYMMETRIC":
                    return (ushort)Npc_FieldIndex.FaceGenGeometrySymmetric;
                case "FACEGENGEOMETRYASYMMETRIC":
                    return (ushort)Npc_FieldIndex.FaceGenGeometryAsymmetric;
                case "FACEGENTEXTURESYMMETRIC":
                    return (ushort)Npc_FieldIndex.FaceGenTextureSymmetric;
                case "UNKNOWN":
                    return (ushort)Npc_FieldIndex.Unknown;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Factions:
                case Npc_FieldIndex.Spells:
                case Npc_FieldIndex.Items:
                case Npc_FieldIndex.AIPackages:
                case Npc_FieldIndex.Animations:
                case Npc_FieldIndex.Eyes:
                    return true;
                case Npc_FieldIndex.Name:
                case Npc_FieldIndex.Model:
                case Npc_FieldIndex.Configuration:
                case Npc_FieldIndex.DeathItem:
                case Npc_FieldIndex.Race:
                case Npc_FieldIndex.Script:
                case Npc_FieldIndex.AIData:
                case Npc_FieldIndex.Class:
                case Npc_FieldIndex.Stats:
                case Npc_FieldIndex.Hair:
                case Npc_FieldIndex.HairLength:
                case Npc_FieldIndex.HairColor:
                case Npc_FieldIndex.CombatStyle:
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                case Npc_FieldIndex.Unknown:
                    return false;
                default:
                    return ANpc_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Model:
                case Npc_FieldIndex.Configuration:
                case Npc_FieldIndex.Factions:
                case Npc_FieldIndex.Items:
                case Npc_FieldIndex.AIData:
                case Npc_FieldIndex.Stats:
                    return true;
                case Npc_FieldIndex.Name:
                case Npc_FieldIndex.DeathItem:
                case Npc_FieldIndex.Race:
                case Npc_FieldIndex.Spells:
                case Npc_FieldIndex.Script:
                case Npc_FieldIndex.AIPackages:
                case Npc_FieldIndex.Animations:
                case Npc_FieldIndex.Class:
                case Npc_FieldIndex.Hair:
                case Npc_FieldIndex.HairLength:
                case Npc_FieldIndex.Eyes:
                case Npc_FieldIndex.HairColor:
                case Npc_FieldIndex.CombatStyle:
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                case Npc_FieldIndex.Unknown:
                    return false;
                default:
                    return ANpc_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Name:
                case Npc_FieldIndex.Model:
                case Npc_FieldIndex.Configuration:
                case Npc_FieldIndex.Factions:
                case Npc_FieldIndex.DeathItem:
                case Npc_FieldIndex.Race:
                case Npc_FieldIndex.Spells:
                case Npc_FieldIndex.Script:
                case Npc_FieldIndex.Items:
                case Npc_FieldIndex.AIData:
                case Npc_FieldIndex.AIPackages:
                case Npc_FieldIndex.Animations:
                case Npc_FieldIndex.Class:
                case Npc_FieldIndex.Stats:
                case Npc_FieldIndex.Hair:
                case Npc_FieldIndex.HairLength:
                case Npc_FieldIndex.Eyes:
                case Npc_FieldIndex.HairColor:
                case Npc_FieldIndex.CombatStyle:
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                case Npc_FieldIndex.Unknown:
                    return false;
                default:
                    return ANpc_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Name:
                    return "Name";
                case Npc_FieldIndex.Model:
                    return "Model";
                case Npc_FieldIndex.Configuration:
                    return "Configuration";
                case Npc_FieldIndex.Factions:
                    return "Factions";
                case Npc_FieldIndex.DeathItem:
                    return "DeathItem";
                case Npc_FieldIndex.Race:
                    return "Race";
                case Npc_FieldIndex.Spells:
                    return "Spells";
                case Npc_FieldIndex.Script:
                    return "Script";
                case Npc_FieldIndex.Items:
                    return "Items";
                case Npc_FieldIndex.AIData:
                    return "AIData";
                case Npc_FieldIndex.AIPackages:
                    return "AIPackages";
                case Npc_FieldIndex.Animations:
                    return "Animations";
                case Npc_FieldIndex.Class:
                    return "Class";
                case Npc_FieldIndex.Stats:
                    return "Stats";
                case Npc_FieldIndex.Hair:
                    return "Hair";
                case Npc_FieldIndex.HairLength:
                    return "HairLength";
                case Npc_FieldIndex.Eyes:
                    return "Eyes";
                case Npc_FieldIndex.HairColor:
                    return "HairColor";
                case Npc_FieldIndex.CombatStyle:
                    return "CombatStyle";
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                    return "FaceGenGeometrySymmetric";
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                    return "FaceGenGeometryAsymmetric";
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                    return "FaceGenTextureSymmetric";
                case Npc_FieldIndex.Unknown:
                    return "Unknown";
                default:
                    return ANpc_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Name:
                case Npc_FieldIndex.Model:
                case Npc_FieldIndex.Configuration:
                case Npc_FieldIndex.Factions:
                case Npc_FieldIndex.DeathItem:
                case Npc_FieldIndex.Race:
                case Npc_FieldIndex.Spells:
                case Npc_FieldIndex.Script:
                case Npc_FieldIndex.Items:
                case Npc_FieldIndex.AIData:
                case Npc_FieldIndex.AIPackages:
                case Npc_FieldIndex.Animations:
                case Npc_FieldIndex.Class:
                case Npc_FieldIndex.Stats:
                case Npc_FieldIndex.Hair:
                case Npc_FieldIndex.HairLength:
                case Npc_FieldIndex.Eyes:
                case Npc_FieldIndex.HairColor:
                case Npc_FieldIndex.CombatStyle:
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                case Npc_FieldIndex.Unknown:
                    return false;
                default:
                    return ANpc_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Name:
                case Npc_FieldIndex.Model:
                case Npc_FieldIndex.Configuration:
                case Npc_FieldIndex.Factions:
                case Npc_FieldIndex.DeathItem:
                case Npc_FieldIndex.Race:
                case Npc_FieldIndex.Spells:
                case Npc_FieldIndex.Script:
                case Npc_FieldIndex.Items:
                case Npc_FieldIndex.AIData:
                case Npc_FieldIndex.AIPackages:
                case Npc_FieldIndex.Animations:
                case Npc_FieldIndex.Class:
                case Npc_FieldIndex.Stats:
                case Npc_FieldIndex.Hair:
                case Npc_FieldIndex.HairLength:
                case Npc_FieldIndex.Eyes:
                case Npc_FieldIndex.HairColor:
                case Npc_FieldIndex.CombatStyle:
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                case Npc_FieldIndex.Unknown:
                    return false;
                default:
                    return ANpc_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Npc_FieldIndex enu = (Npc_FieldIndex)index;
            switch (enu)
            {
                case Npc_FieldIndex.Name:
                    return typeof(String);
                case Npc_FieldIndex.Model:
                    return typeof(Model);
                case Npc_FieldIndex.Configuration:
                    return typeof(NpcConfiguration);
                case Npc_FieldIndex.Factions:
                    return typeof(ExtendedList<RankPlacement>);
                case Npc_FieldIndex.DeathItem:
                    return typeof(FormLinkNullable<AItem>);
                case Npc_FieldIndex.Race:
                    return typeof(FormLinkNullable<Race>);
                case Npc_FieldIndex.Spells:
                    return typeof(ExtendedList<IFormLink<ASpell>>);
                case Npc_FieldIndex.Script:
                    return typeof(FormLinkNullable<Script>);
                case Npc_FieldIndex.Items:
                    return typeof(ExtendedList<ItemEntry>);
                case Npc_FieldIndex.AIData:
                    return typeof(AIData);
                case Npc_FieldIndex.AIPackages:
                    return typeof(ExtendedList<IFormLink<AIPackage>>);
                case Npc_FieldIndex.Animations:
                    return typeof(ExtendedList<String>);
                case Npc_FieldIndex.Class:
                    return typeof(FormLinkNullable<Class>);
                case Npc_FieldIndex.Stats:
                    return typeof(NpcData);
                case Npc_FieldIndex.Hair:
                    return typeof(FormLinkNullable<Hair>);
                case Npc_FieldIndex.HairLength:
                    return typeof(Single);
                case Npc_FieldIndex.Eyes:
                    return typeof(ExtendedList<IFormLink<Eye>>);
                case Npc_FieldIndex.HairColor:
                    return typeof(Color);
                case Npc_FieldIndex.CombatStyle:
                    return typeof(FormLinkNullable<CombatStyle>);
                case Npc_FieldIndex.FaceGenGeometrySymmetric:
                    return typeof(Byte[]);
                case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                    return typeof(Byte[]);
                case Npc_FieldIndex.FaceGenTextureSymmetric:
                    return typeof(Byte[]);
                case Npc_FieldIndex.Unknown:
                    return typeof(Byte[]);
                default:
                    return ANpc_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(NpcXmlWriteTranslation);
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ACBS_HEADER = new RecordType("ACBS");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType INAM_HEADER = new RecordType("INAM");
        public static readonly RecordType RNAM_HEADER = new RecordType("RNAM");
        public static readonly RecordType SPLO_HEADER = new RecordType("SPLO");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType CNTO_HEADER = new RecordType("CNTO");
        public static readonly RecordType AIDT_HEADER = new RecordType("AIDT");
        public static readonly RecordType PKID_HEADER = new RecordType("PKID");
        public static readonly RecordType KFFZ_HEADER = new RecordType("KFFZ");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType HNAM_HEADER = new RecordType("HNAM");
        public static readonly RecordType LNAM_HEADER = new RecordType("LNAM");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType HCLR_HEADER = new RecordType("HCLR");
        public static readonly RecordType ZNAM_HEADER = new RecordType("ZNAM");
        public static readonly RecordType FGGS_HEADER = new RecordType("FGGS");
        public static readonly RecordType FGGA_HEADER = new RecordType("FGGA");
        public static readonly RecordType FGTS_HEADER = new RecordType("FGTS");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType TriggeringRecordType = NPC__HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 23;
        public static readonly Type BinaryWriteTranslation = typeof(NpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class NpcSetterCommon : ANpcSetterCommon
    {
        public new static readonly NpcSetterCommon Instance = new NpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Configuration = null;
            item.Factions.Clear();
            item.DeathItem = null;
            item.Race = null;
            item.Spells.Clear();
            item.Script = null;
            item.Items.Clear();
            item.AIData = null;
            item.AIPackages.Clear();
            item.Animations = null;
            item.Class = null;
            item.Stats = null;
            item.Hair = null;
            item.HairLength = default;
            item.Eyes = null;
            item.HairColor = default;
            item.CombatStyle = null;
            item.FaceGenGeometrySymmetric = default;
            item.FaceGenGeometryAsymmetric = default;
            item.FaceGenTextureSymmetric = default;
            item.Unknown = default;
            base.Clear(item);
        }
        
        public override void Clear(IANpcInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IANpcSpawnInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            INpcInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    ANpcSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            INpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    NpcXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IANpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Npc)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IANpcSpawnInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Npc)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Npc)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Npc)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Npc_Registration.NPC__HEADER;
        protected static void FillBinaryStructs(
            INpcInternal item,
            MutagenFrame frame)
        {
            ANpcSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            INpcInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Model);
                }
                case 0x53424341: // ACBS
                {
                    item.Configuration = Mutagen.Bethesda.Oblivion.NpcConfiguration.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Configuration);
                }
                case 0x4D414E53: // SNAM
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Npc_Registration.SNAM_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out RankPlacement listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<RankPlacement>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.DeathItem);
                }
                case 0x4D414E52: // RNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Race);
                }
                case 0x4F4C5053: // SPLO
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<ASpell>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Npc_Registration.SPLO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Spells);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<ItemEntry>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Npc_Registration.CNTO_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out ItemEntry listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<ItemEntry>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Items);
                }
                case 0x54444941: // AIDT
                {
                    item.AIData = Mutagen.Bethesda.Oblivion.AIData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.AIData);
                }
                case 0x44494B50: // PKID
                {
                    item.AIPackages.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<AIPackage>>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: Npc_Registration.PKID_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Animations = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out String listSubItem) =>
                            {
                                return Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false);
                            })
                        .ToExtendedList<String>();
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Animations);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Class = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Class);
                }
                case 0x41544144: // DATA
                {
                    item.Stats = Mutagen.Bethesda.Oblivion.NpcData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Stats);
                }
                case 0x4D414E48: // HNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hair = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Hair);
                }
                case 0x4D414E4C: // LNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairLength = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.HairLength);
                }
                case 0x4D414E45: // ENAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Eyes = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLink<Eye>>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            recordTypeConverter: recordTypeConverter,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .ToExtendedList<IFormLink<Eye>>();
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Eyes);
                }
                case 0x524C4348: // HCLR
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.HairColor);
                }
                case 0x4D414E5A: // ZNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.CombatStyle);
                }
                case 0x53474746: // FGGS
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenGeometrySymmetric = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.FaceGenGeometrySymmetric);
                }
                case 0x41474746: // FGGA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenGeometryAsymmetric = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.FaceGenGeometryAsymmetric);
                }
                case 0x53544746: // FGTS
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenTextureSymmetric = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.FaceGenTextureSymmetric);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Unknown = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Unknown);
                }
                default:
                    return ANpcSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            INpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<INpcInternal>(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IANpcInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IANpcSpawnInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class NpcCommon : ANpcCommon
    {
        public new static readonly NpcCommon Instance = new NpcCommon();

        public Npc.Mask<bool> GetEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Npc.Mask<bool>(false);
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            Npc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Configuration = EqualsMaskHelper.EqualsHelper(
                item.Configuration,
                rhs.Configuration,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = object.Equals(item.DeathItem, rhs.DeathItem);
            ret.Race = object.Equals(item.Race, rhs.Race);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AIData = EqualsMaskHelper.EqualsHelper(
                item.AIData,
                rhs.AIData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.Class = object.Equals(item.Class, rhs.Class);
            ret.Stats = EqualsMaskHelper.EqualsHelper(
                item.Stats,
                rhs.Stats,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Hair = object.Equals(item.Hair, rhs.Hair);
            ret.HairLength = item.HairLength.EqualsWithin(rhs.HairLength);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor.ColorOnlyEquals(rhs.HairColor);
            ret.CombatStyle = object.Equals(item.CombatStyle, rhs.CombatStyle);
            ret.FaceGenGeometrySymmetric = MemorySliceExt.Equal(item.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric);
            ret.FaceGenGeometryAsymmetric = MemorySliceExt.Equal(item.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric);
            ret.FaceGenTextureSymmetric = MemorySliceExt.Equal(item.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric);
            ret.Unknown = MemorySliceExt.Equal(item.Unknown, rhs.Unknown);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            INpcGetter item,
            FileGeneration fg,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Npc =>");
            }
            else
            {
                fg.AppendLine($"{name} (Npc) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            INpcGetter item,
            FileGeneration fg,
            Npc.Mask<bool>? printMask = null)
        {
            ANpcCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Configuration?.Overall ?? true)
                && item.Configuration.TryGet(out var ConfigurationItem))
            {
                ConfigurationItem?.ToString(fg, "Configuration");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                fg.AppendLine("Factions =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Factions)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.DeathItem ?? true)
                && item.DeathItem.TryGet(out var DeathItemItem))
            {
                fg.AppendItem(DeathItemItem, "DeathItem");
            }
            if ((printMask?.Race ?? true)
                && item.Race.TryGet(out var RaceItem))
            {
                fg.AppendItem(RaceItem, "Race");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                fg.AppendLine("Spells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Spells)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.AIData?.Overall ?? true)
                && item.AIData.TryGet(out var AIDataItem))
            {
                AIDataItem?.ToString(fg, "AIData");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                fg.AppendLine("AIPackages =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.AIPackages)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Animations?.Overall ?? true)
                && item.Animations.TryGet(out var AnimationsItem))
            {
                fg.AppendLine("Animations =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in AnimationsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Class ?? true)
                && item.Class.TryGet(out var ClassItem))
            {
                fg.AppendItem(ClassItem, "Class");
            }
            if ((printMask?.Stats?.Overall ?? true)
                && item.Stats.TryGet(out var StatsItem))
            {
                StatsItem?.ToString(fg, "Stats");
            }
            if ((printMask?.Hair ?? true)
                && item.Hair.TryGet(out var HairItem))
            {
                fg.AppendItem(HairItem, "Hair");
            }
            if ((printMask?.HairLength ?? true)
                && item.HairLength.TryGet(out var HairLengthItem))
            {
                fg.AppendItem(HairLengthItem, "HairLength");
            }
            if ((printMask?.Eyes?.Overall ?? true)
                && item.Eyes.TryGet(out var EyesItem))
            {
                fg.AppendLine("Eyes =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in EyesItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.HairColor ?? true)
                && item.HairColor.TryGet(out var HairColorItem))
            {
                fg.AppendItem(HairColorItem, "HairColor");
            }
            if ((printMask?.CombatStyle ?? true)
                && item.CombatStyle.TryGet(out var CombatStyleItem))
            {
                fg.AppendItem(CombatStyleItem, "CombatStyle");
            }
            if ((printMask?.FaceGenGeometrySymmetric ?? true)
                && item.FaceGenGeometrySymmetric.TryGet(out var FaceGenGeometrySymmetricItem))
            {
                fg.AppendLine($"FaceGenGeometrySymmetric => {SpanExt.ToHexString(FaceGenGeometrySymmetricItem)}");
            }
            if ((printMask?.FaceGenGeometryAsymmetric ?? true)
                && item.FaceGenGeometryAsymmetric.TryGet(out var FaceGenGeometryAsymmetricItem))
            {
                fg.AppendLine($"FaceGenGeometryAsymmetric => {SpanExt.ToHexString(FaceGenGeometryAsymmetricItem)}");
            }
            if ((printMask?.FaceGenTextureSymmetric ?? true)
                && item.FaceGenTextureSymmetric.TryGet(out var FaceGenTextureSymmetricItem))
            {
                fg.AppendLine($"FaceGenTextureSymmetric => {SpanExt.ToHexString(FaceGenTextureSymmetricItem)}");
            }
            if ((printMask?.Unknown ?? true)
                && item.Unknown.TryGet(out var UnknownItem))
            {
                fg.AppendLine($"Unknown => {SpanExt.ToHexString(UnknownItem)}");
            }
        }
        
        public bool HasBeenSet(
            INpcGetter item,
            Npc.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Configuration?.Overall.HasValue ?? false && checkMask.Configuration.Overall.Value != (item.Configuration != null)) return false;
            if (checkMask.Configuration?.Specific != null && (item.Configuration == null || !item.Configuration.HasBeenSet(checkMask.Configuration.Specific))) return false;
            if (checkMask.DeathItem.HasValue && checkMask.DeathItem.Value != (item.DeathItem.FormKey != null)) return false;
            if (checkMask.Race.HasValue && checkMask.Race.Value != (item.Race.FormKey != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.AIData?.Overall.HasValue ?? false && checkMask.AIData.Overall.Value != (item.AIData != null)) return false;
            if (checkMask.AIData?.Specific != null && (item.AIData == null || !item.AIData.HasBeenSet(checkMask.AIData.Specific))) return false;
            if (checkMask.Animations?.Overall.HasValue ?? false && checkMask.Animations!.Overall.Value != (item.Animations != null)) return false;
            if (checkMask.Class.HasValue && checkMask.Class.Value != (item.Class.FormKey != null)) return false;
            if (checkMask.Stats?.Overall.HasValue ?? false && checkMask.Stats.Overall.Value != (item.Stats != null)) return false;
            if (checkMask.Stats?.Specific != null && (item.Stats == null || !item.Stats.HasBeenSet(checkMask.Stats.Specific))) return false;
            if (checkMask.Hair.HasValue && checkMask.Hair.Value != (item.Hair.FormKey != null)) return false;
            if (checkMask.HairLength.HasValue && checkMask.HairLength.Value != (item.HairLength != null)) return false;
            if (checkMask.Eyes?.Overall.HasValue ?? false && checkMask.Eyes!.Overall.Value != (item.Eyes != null)) return false;
            if (checkMask.HairColor.HasValue && checkMask.HairColor.Value != (item.HairColor != null)) return false;
            if (checkMask.CombatStyle.HasValue && checkMask.CombatStyle.Value != (item.CombatStyle.FormKey != null)) return false;
            if (checkMask.FaceGenGeometrySymmetric.HasValue && checkMask.FaceGenGeometrySymmetric.Value != (item.FaceGenGeometrySymmetric != null)) return false;
            if (checkMask.FaceGenGeometryAsymmetric.HasValue && checkMask.FaceGenGeometryAsymmetric.Value != (item.FaceGenGeometryAsymmetric != null)) return false;
            if (checkMask.FaceGenTextureSymmetric.HasValue && checkMask.FaceGenTextureSymmetric.Value != (item.FaceGenTextureSymmetric != null)) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != (item.Unknown != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            INpcGetter item,
            Npc.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            var itemConfiguration = item.Configuration;
            mask.Configuration = new MaskItem<bool, NpcConfiguration.Mask<bool>?>(itemConfiguration != null, itemConfiguration?.GetHasBeenSetMask());
            var FactionsItem = item.Factions;
            mask.Factions = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RankPlacement.Mask<bool>?>>?>(true, FactionsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RankPlacement.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.DeathItem = (item.DeathItem.FormKey != null);
            mask.Race = (item.Race.FormKey != null);
            mask.Spells = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Script = (item.Script.FormKey != null);
            var ItemsItem = item.Items;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ItemEntry.Mask<bool>?>>?>(true, ItemsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, ItemEntry.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            var itemAIData = item.AIData;
            mask.AIData = new MaskItem<bool, AIData.Mask<bool>?>(itemAIData != null, itemAIData?.GetHasBeenSetMask());
            mask.AIPackages = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>(true, default);
            mask.Animations = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Animations != null), default);
            mask.Class = (item.Class.FormKey != null);
            var itemStats = item.Stats;
            mask.Stats = new MaskItem<bool, NpcData.Mask<bool>?>(itemStats != null, itemStats?.GetHasBeenSetMask());
            mask.Hair = (item.Hair.FormKey != null);
            mask.HairLength = (item.HairLength != null);
            mask.Eyes = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.Eyes != null), default);
            mask.HairColor = (item.HairColor != null);
            mask.CombatStyle = (item.CombatStyle.FormKey != null);
            mask.FaceGenGeometrySymmetric = (item.FaceGenGeometrySymmetric != null);
            mask.FaceGenGeometryAsymmetric = (item.FaceGenGeometryAsymmetric != null);
            mask.FaceGenTextureSymmetric = (item.FaceGenTextureSymmetric != null);
            mask.Unknown = (item.Unknown != null);
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Npc_FieldIndex ConvertFieldIndex(ANpc_FieldIndex index)
        {
            switch (index)
            {
                case ANpc_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case ANpc_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case ANpc_FieldIndex.Version:
                    return (Npc_FieldIndex)((int)index);
                case ANpc_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case ANpc_FieldIndex.OblivionMajorRecordFlags:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(ANpcSpawn_FieldIndex index)
        {
            switch (index)
            {
                case ANpcSpawn_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.Version:
                    return (Npc_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case ANpcSpawn_FieldIndex.OblivionMajorRecordFlags:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcGetter? lhs,
            INpcGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!object.Equals(lhs.Configuration, rhs.Configuration)) return false;
            if (!lhs.Factions.SequenceEqual(rhs.Factions)) return false;
            if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            if (!lhs.Race.Equals(rhs.Race)) return false;
            if (!lhs.Spells.SequenceEqual(rhs.Spells)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            if (!object.Equals(lhs.AIData, rhs.AIData)) return false;
            if (!lhs.AIPackages.SequenceEqual(rhs.AIPackages)) return false;
            if (!lhs.Animations.SequenceEqual(rhs.Animations)) return false;
            if (!lhs.Class.Equals(rhs.Class)) return false;
            if (!object.Equals(lhs.Stats, rhs.Stats)) return false;
            if (!lhs.Hair.Equals(rhs.Hair)) return false;
            if (!lhs.HairLength.EqualsWithin(rhs.HairLength)) return false;
            if (!lhs.Eyes.SequenceEqual(rhs.Eyes)) return false;
            if (!lhs.HairColor.ColorOnlyEquals(rhs.HairColor)) return false;
            if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            if (!MemorySliceExt.Equal(lhs.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
            if (!MemorySliceExt.Equal(lhs.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
            if (!MemorySliceExt.Equal(lhs.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
            if (!MemorySliceExt.Equal(lhs.Unknown, rhs.Unknown)) return false;
            return true;
        }
        
        public override bool Equals(
            IANpcGetter? lhs,
            IANpcGetter? rhs)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter);
        }
        
        public override bool Equals(
            IANpcSpawnGetter? lhs,
            IANpcSpawnGetter? rhs)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter);
        }
        
        public virtual int GetHashCode(INpcGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Configuration.TryGet(out var Configurationitem))
            {
                hash.Add(Configurationitem);
            }
            hash.Add(item.Factions);
            if (item.DeathItem.TryGet(out var DeathItemitem))
            {
                hash.Add(DeathItemitem);
            }
            if (item.Race.TryGet(out var Raceitem))
            {
                hash.Add(Raceitem);
            }
            hash.Add(item.Spells);
            if (item.Script.TryGet(out var Scriptitem))
            {
                hash.Add(Scriptitem);
            }
            hash.Add(item.Items);
            if (item.AIData.TryGet(out var AIDataitem))
            {
                hash.Add(AIDataitem);
            }
            hash.Add(item.AIPackages);
            hash.Add(item.Animations);
            if (item.Class.TryGet(out var Classitem))
            {
                hash.Add(Classitem);
            }
            if (item.Stats.TryGet(out var Statsitem))
            {
                hash.Add(Statsitem);
            }
            if (item.Hair.TryGet(out var Hairitem))
            {
                hash.Add(Hairitem);
            }
            if (item.HairLength.TryGet(out var HairLengthitem))
            {
                hash.Add(HairLengthitem);
            }
            hash.Add(item.Eyes);
            if (item.HairColor.TryGet(out var HairColoritem))
            {
                hash.Add(HairColoritem);
            }
            if (item.CombatStyle.TryGet(out var CombatStyleitem))
            {
                hash.Add(CombatStyleitem);
            }
            if (item.FaceGenGeometrySymmetric.TryGet(out var FaceGenGeometrySymmetricItem))
            {
                hash.Add(FaceGenGeometrySymmetricItem);
            }
            if (item.FaceGenGeometryAsymmetric.TryGet(out var FaceGenGeometryAsymmetricItem))
            {
                hash.Add(FaceGenGeometryAsymmetricItem);
            }
            if (item.FaceGenTextureSymmetric.TryGet(out var FaceGenTextureSymmetricItem))
            {
                hash.Add(FaceGenTextureSymmetricItem);
            }
            if (item.Unknown.TryGet(out var UnknownItem))
            {
                hash.Add(UnknownItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IANpcGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IANpcSpawnGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Npc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(INpcGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Factions.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            if (obj.DeathItem.FormKey.TryGet(out var DeathItemKey))
            {
                yield return DeathItemKey;
            }
            if (obj.Race.FormKey.TryGet(out var RaceKey))
            {
                yield return RaceKey;
            }
            foreach (var item in obj.Spells.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.Script.FormKey.TryGet(out var ScriptKey))
            {
                yield return ScriptKey;
            }
            foreach (var item in obj.Items.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            foreach (var item in obj.AIPackages.Select(f => f.FormKey))
            {
                yield return item;
            }
            if (obj.Class.FormKey.TryGet(out var ClassKey))
            {
                yield return ClassKey;
            }
            if (obj.Hair.FormKey.TryGet(out var HairKey))
            {
                yield return HairKey;
            }
            if (obj.Eyes.TryGet(out var EyesItem))
            {
                foreach (var item in EyesItem.Select(f => f.FormKey))
                {
                    yield return item;
                }
            }
            if (obj.CombatStyle.FormKey.TryGet(out var CombatStyleKey))
            {
                yield return CombatStyleKey;
            }
            yield break;
        }
        
        public void RemapLinks(INpcGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Npc obj, Npc rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Npc(getNextFormKey());
            ret.DeepCopyIn((Npc)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Npc)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class NpcSetterTranslationCommon : ANpcSetterTranslationCommon
    {
        public new static readonly NpcSetterTranslationCommon Instance = new NpcSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            INpcInternal item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IANpc)item,
                (IANpcGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Configuration);
                try
                {
                    if(rhs.Configuration.TryGet(out var rhsConfiguration))
                    {
                        item.Configuration = rhsConfiguration.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration));
                    }
                    else
                    {
                        item.Configuration = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem = rhs.DeathItem.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                item.Race = rhs.Race.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                        .Select(r => (IFormLink<ASpell>)new FormLink<ASpell>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Script) ?? true))
            {
                item.Script = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AIData);
                try
                {
                    if(rhs.AIData.TryGet(out var rhsAIData))
                    {
                        item.AIData = rhsAIData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.AIData));
                    }
                    else
                    {
                        item.AIData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetTo(
                        rhs.AIPackages
                        .Select(r => (IFormLink<AIPackage>)new FormLink<AIPackage>(r.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Animations);
                try
                {
                    if ((rhs.Animations != null))
                    {
                        item.Animations = 
                            rhs.Animations
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Animations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                item.Class = rhs.Class.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Stats) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Stats);
                try
                {
                    if(rhs.Stats.TryGet(out var rhsStats))
                    {
                        item.Stats = rhsStats.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Stats));
                    }
                    else
                    {
                        item.Stats = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Hair) ?? true))
            {
                item.Hair = rhs.Hair.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairLength) ?? true))
            {
                item.HairLength = rhs.HairLength;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Eyes);
                try
                {
                    if ((rhs.Eyes != null))
                    {
                        item.Eyes = 
                            rhs.Eyes
                            .Select(r => (IFormLink<Eye>)new FormLink<Eye>(r.FormKey))
                            .ToExtendedList<IFormLink<Eye>>();
                    }
                    else
                    {
                        item.Eyes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                item.HairColor = rhs.HairColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle = rhs.CombatStyle.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                if(rhs.FaceGenGeometrySymmetric.TryGet(out var FaceGenGeometrySymmetricrhs))
                {
                    item.FaceGenGeometrySymmetric = FaceGenGeometrySymmetricrhs.ToArray();
                }
                else
                {
                    item.FaceGenGeometrySymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                if(rhs.FaceGenGeometryAsymmetric.TryGet(out var FaceGenGeometryAsymmetricrhs))
                {
                    item.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetricrhs.ToArray();
                }
                else
                {
                    item.FaceGenGeometryAsymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                if(rhs.FaceGenTextureSymmetric.TryGet(out var FaceGenTextureSymmetricrhs))
                {
                    item.FaceGenTextureSymmetric = FaceGenTextureSymmetricrhs.ToArray();
                }
                else
                {
                    item.FaceGenTextureSymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Unknown) ?? true))
            {
                if(rhs.Unknown.TryGet(out var Unknownrhs))
                {
                    item.Unknown = Unknownrhs.ToArray();
                }
                else
                {
                    item.Unknown = default;
                }
            }
        }
        
        public override void DeepCopyIn(
            IANpcInternal item,
            IANpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IANpc item,
            IANpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IANpcSpawnInternal item,
            IANpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IANpcSpawn item,
            IANpcSpawnGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Npc DeepCopy(
            INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Npc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static Npc_Registration Registration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NpcXmlWriteTranslation :
        ANpcXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static NpcXmlWriteTranslation Instance = new NpcXmlWriteTranslation();

        public static void WriteToNodeXml(
            INpcGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ANpcXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Npc_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Npc_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Model));
                }
            }
            if ((item.Configuration != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                if (item.Configuration.TryGet(out var ConfigurationItem))
                {
                    ((NpcConfigurationXmlWriteTranslation)((IXmlItem)ConfigurationItem).XmlWriteTranslator).Write(
                        item: ConfigurationItem,
                        node: node,
                        name: nameof(item.Configuration),
                        fieldIndex: (int)Npc_FieldIndex.Configuration,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                ListXmlTranslation<IRankPlacementGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Factions),
                    item: item.Factions,
                    fieldIndex: (int)Npc_FieldIndex.Factions,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Factions),
                    transl: (XElement subNode, IRankPlacementGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((RankPlacementXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.DeathItem.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.DeathItem),
                    item: item.DeathItem.FormKey.Value,
                    fieldIndex: (int)Npc_FieldIndex.DeathItem,
                    errorMask: errorMask);
            }
            if ((item.Race.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Race),
                    item: item.Race.FormKey.Value,
                    fieldIndex: (int)Npc_FieldIndex.Race,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Spells) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IASpellGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Spells),
                    item: item.Spells,
                    fieldIndex: (int)Npc_FieldIndex.Spells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Spells),
                    transl: (XElement subNode, IFormLinkGetter<IASpellGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey.Value,
                    fieldIndex: (int)Npc_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<IItemEntryGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)Npc_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Items),
                    transl: (XElement subNode, IItemEntryGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((ItemEntryXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.AIData != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                if (item.AIData.TryGet(out var AIDataItem))
                {
                    ((AIDataXmlWriteTranslation)((IXmlItem)AIDataItem).XmlWriteTranslator).Write(
                        item: AIDataItem,
                        node: node,
                        name: nameof(item.AIData),
                        fieldIndex: (int)Npc_FieldIndex.AIData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.AIData));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Npc_FieldIndex.AIPackages) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.AIPackages),
                    item: item.AIPackages,
                    fieldIndex: (int)Npc_FieldIndex.AIPackages,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.AIPackages),
                    transl: (XElement subNode, IFormLinkGetter<IAIPackageGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Animations != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Animations) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: node,
                    name: nameof(item.Animations),
                    item: item.Animations,
                    fieldIndex: (int)Npc_FieldIndex.Animations,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Animations),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Class.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Class),
                    item: item.Class.FormKey.Value,
                    fieldIndex: (int)Npc_FieldIndex.Class,
                    errorMask: errorMask);
            }
            if ((item.Stats != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Stats) ?? true))
            {
                if (item.Stats.TryGet(out var StatsItem))
                {
                    ((NpcDataXmlWriteTranslation)((IXmlItem)StatsItem).XmlWriteTranslator).Write(
                        item: StatsItem,
                        node: node,
                        name: nameof(item.Stats),
                        fieldIndex: (int)Npc_FieldIndex.Stats,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Stats));
                }
            }
            if ((item.Hair.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Hair) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Hair),
                    item: item.Hair.FormKey.Value,
                    fieldIndex: (int)Npc_FieldIndex.Hair,
                    errorMask: errorMask);
            }
            if ((item.HairLength != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.HairLength) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HairLength),
                    item: item.HairLength.Value,
                    fieldIndex: (int)Npc_FieldIndex.HairLength,
                    errorMask: errorMask);
            }
            if ((item.Eyes != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Eyes) ?? true))
            {
                ListXmlTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                    node: node,
                    name: nameof(item.Eyes),
                    item: item.Eyes,
                    fieldIndex: (int)Npc_FieldIndex.Eyes,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Eyes),
                    transl: (XElement subNode, IFormLinkGetter<IEyeGetter> subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        FormKeyXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem.FormKey,
                            errorMask: listSubMask);
                    });
            }
            if ((item.HairColor != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.HairColor),
                    item: item.HairColor.Value,
                    fieldIndex: (int)Npc_FieldIndex.HairColor,
                    errorMask: errorMask);
            }
            if ((item.CombatStyle.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CombatStyle),
                    item: item.CombatStyle.FormKey.Value,
                    fieldIndex: (int)Npc_FieldIndex.CombatStyle,
                    errorMask: errorMask);
            }
            if ((item.FaceGenGeometrySymmetric != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenGeometrySymmetric),
                    item: item.FaceGenGeometrySymmetric.Value,
                    fieldIndex: (int)Npc_FieldIndex.FaceGenGeometrySymmetric,
                    errorMask: errorMask);
            }
            if ((item.FaceGenGeometryAsymmetric != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenGeometryAsymmetric),
                    item: item.FaceGenGeometryAsymmetric.Value,
                    fieldIndex: (int)Npc_FieldIndex.FaceGenGeometryAsymmetric,
                    errorMask: errorMask);
            }
            if ((item.FaceGenTextureSymmetric != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FaceGenTextureSymmetric),
                    item: item.FaceGenTextureSymmetric.Value,
                    fieldIndex: (int)Npc_FieldIndex.FaceGenTextureSymmetric,
                    errorMask: errorMask);
            }
            if ((item.Unknown != null)
                && (translationMask?.GetShouldTranslate((int)Npc_FieldIndex.Unknown) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown.Value,
                    fieldIndex: (int)Npc_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Npc");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Npc");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IANpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IANpcSpawnGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (INpcGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class NpcXmlCreateTranslation : ANpcXmlCreateTranslation
    {
        public new readonly static NpcXmlCreateTranslation Instance = new NpcXmlCreateTranslation();

        public static void FillPublicXml(
            INpcInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    NpcXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            INpcInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Configuration":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Configuration);
                    try
                    {
                        item.Configuration = LoquiXmlTranslation<NpcConfiguration>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Factions":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Factions);
                    try
                    {
                        if (ListXmlTranslation<RankPlacement>.Instance.Parse(
                            node: node,
                            enumer: out var FactionsItem,
                            transl: LoquiXmlTranslation<RankPlacement>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Factions.SetTo(FactionsItem);
                        }
                        else
                        {
                            item.Factions.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DeathItem":
                    errorMask?.PushIndex((int)Npc_FieldIndex.DeathItem);
                    try
                    {
                        item.DeathItem = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Race":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Race);
                    try
                    {
                        item.Race = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Spells":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Spells);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<ASpell>>.Instance.Parse(
                            node: node,
                            enumer: out var SpellsItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Spells.SetTo(SpellsItem);
                        }
                        else
                        {
                            item.Spells.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Script);
                    try
                    {
                        item.Script = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Items);
                    try
                    {
                        if (ListXmlTranslation<ItemEntry>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<ItemEntry>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIData":
                    errorMask?.PushIndex((int)Npc_FieldIndex.AIData);
                    try
                    {
                        item.AIData = LoquiXmlTranslation<AIData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.AIData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "AIPackages":
                    errorMask?.PushIndex((int)Npc_FieldIndex.AIPackages);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<AIPackage>>.Instance.Parse(
                            node: node,
                            enumer: out var AIPackagesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.AIPackages.SetTo(AIPackagesItem);
                        }
                        else
                        {
                            item.AIPackages.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Animations":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Animations);
                    try
                    {
                        if (ListXmlTranslation<String>.Instance.Parse(
                            node: node,
                            enumer: out var AnimationsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Animations = AnimationsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Animations = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Class":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Class);
                    try
                    {
                        item.Class = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Stats":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Stats);
                    try
                    {
                        item.Stats = LoquiXmlTranslation<NpcData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Npc_FieldIndex.Stats));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Hair":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Hair);
                    try
                    {
                        item.Hair = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HairLength":
                    errorMask?.PushIndex((int)Npc_FieldIndex.HairLength);
                    try
                    {
                        item.HairLength = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Eyes":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Eyes);
                    try
                    {
                        if (ListXmlTranslation<IFormLink<Eye>>.Instance.Parse(
                            node: node,
                            enumer: out var EyesItem,
                            transl: FormKeyXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Eyes = EyesItem.ToExtendedList();
                        }
                        else
                        {
                            item.Eyes = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "HairColor":
                    errorMask?.PushIndex((int)Npc_FieldIndex.HairColor);
                    try
                    {
                        item.HairColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CombatStyle":
                    errorMask?.PushIndex((int)Npc_FieldIndex.CombatStyle);
                    try
                    {
                        item.CombatStyle = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenGeometrySymmetric":
                    errorMask?.PushIndex((int)Npc_FieldIndex.FaceGenGeometrySymmetric);
                    try
                    {
                        item.FaceGenGeometrySymmetric = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenGeometryAsymmetric":
                    errorMask?.PushIndex((int)Npc_FieldIndex.FaceGenGeometryAsymmetric);
                    try
                    {
                        item.FaceGenGeometryAsymmetric = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FaceGenTextureSymmetric":
                    errorMask?.PushIndex((int)Npc_FieldIndex.FaceGenTextureSymmetric);
                    try
                    {
                        item.FaceGenTextureSymmetric = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)Npc_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ANpcXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class NpcXmlTranslationMixIn
    {
        public static void WriteToXml(
            this INpcGetter item,
            XElement node,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this INpcGetter item,
            string path,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this INpcGetter item,
            Stream stream,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NpcBinaryWriteTranslation :
        ANpcBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static NpcBinaryWriteTranslation Instance = new NpcBinaryWriteTranslation();

        public static void WriteRecordTypes(
            INpcGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.Configuration.TryGet(out var ConfigurationItem))
            {
                ((NpcConfigurationBinaryWriteTranslation)((IBinaryItem)ConfigurationItem).BinaryWriteTranslator).Write(
                    item: ConfigurationItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.INAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.RNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IASpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IASpellGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Npc_Registration.SPLO_HEADER));
                });
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.SCRI_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IItemEntryGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((ItemEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            if (item.AIData.TryGet(out var AIDataItem))
            {
                ((AIDataBinaryWriteTranslation)((IBinaryItem)AIDataItem).BinaryWriteTranslator).Write(
                    item: AIDataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.AIPackages,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IAIPackageGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: recordTypeConverter.ConvertToCustom(Npc_Registration.PKID_HEADER));
                });
            Mutagen.Bethesda.Binary.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                recordType: recordTypeConverter.ConvertToCustom(Npc_Registration.KFFZ_HEADER),
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Class,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.CNAM_HEADER));
            if (item.Stats.TryGet(out var StatsItem))
            {
                ((NpcDataBinaryWriteTranslation)((IBinaryItem)StatsItem).BinaryWriteTranslator).Write(
                    item: StatsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Hair,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.HNAM_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairLength,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.LNAM_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: recordTypeConverter.ConvertToCustom(Npc_Registration.ENAM_HEADER),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyeGetter> subItem, RecordTypeConverter? conv) =>
                {
                    Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColor,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.HCLR_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.ZNAM_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenGeometrySymmetric,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.FGGS_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenGeometryAsymmetric,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.FGGA_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FaceGenTextureSymmetric,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.FGTS_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Unknown,
                header: recordTypeConverter.ConvertToCustom(Npc_Registration.FNAM_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            INpcGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Npc_Registration.NPC__HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IANpcSpawnGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class NpcBinaryCreateTranslation : ANpcBinaryCreateTranslation
    {
        public new readonly static NpcBinaryCreateTranslation Instance = new NpcBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class NpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class NpcBinaryOverlay :
        ANpcBinaryOverlay,
        INpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static Npc_Registration Registration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((INpcGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => NpcCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => NpcCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => NpcXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((NpcXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Configuration
        private RangeInt32? _ConfigurationLocation;
        public INpcConfigurationGetter? Configuration => _ConfigurationLocation.HasValue ? NpcConfigurationBinaryOverlay.NpcConfigurationFactory(new BinaryMemoryReadStream(_data.Slice(_ConfigurationLocation!.Value.Min)), _package) : default;
        public bool Configuration_IsSet => _ConfigurationLocation.HasValue;
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = ListExt.Empty<RankPlacementBinaryOverlay>();
        #region DeathItem
        private int? _DeathItemLocation;
        public bool DeathItem_IsSet => _DeathItemLocation.HasValue;
        public IFormLinkNullableGetter<IAItemGetter> DeathItem => _DeathItemLocation.HasValue ? new FormLinkNullable<IAItemGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _DeathItemLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IAItemGetter>.Null;
        #endregion
        #region Race
        private int? _RaceLocation;
        public bool Race_IsSet => _RaceLocation.HasValue;
        public IFormLinkNullableGetter<IRaceGetter> Race => _RaceLocation.HasValue ? new FormLinkNullable<IRaceGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _RaceLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IRaceGetter>.Null;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IASpellGetter>> Spells { get; private set; } = ListExt.Empty<IFormLinkGetter<IASpellGetter>>();
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IScriptGetter>.Null;
        #endregion
        public IReadOnlyList<IItemEntryGetter> Items { get; private set; } = ListExt.Empty<ItemEntryBinaryOverlay>();
        #region AIData
        private RangeInt32? _AIDataLocation;
        public IAIDataGetter? AIData => _AIDataLocation.HasValue ? AIDataBinaryOverlay.AIDataFactory(new BinaryMemoryReadStream(_data.Slice(_AIDataLocation!.Value.Min)), _package) : default;
        public bool AIData_IsSet => _AIDataLocation.HasValue;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; private set; } = ListExt.Empty<IFormLinkGetter<IAIPackageGetter>>();
        public IReadOnlyList<String>? Animations { get; private set; }
        #region Class
        private int? _ClassLocation;
        public bool Class_IsSet => _ClassLocation.HasValue;
        public IFormLinkNullableGetter<IClassGetter> Class => _ClassLocation.HasValue ? new FormLinkNullable<IClassGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClassLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IClassGetter>.Null;
        #endregion
        #region Stats
        private RangeInt32? _StatsLocation;
        public INpcDataGetter? Stats => _StatsLocation.HasValue ? NpcDataBinaryOverlay.NpcDataFactory(new BinaryMemoryReadStream(_data.Slice(_StatsLocation!.Value.Min)), _package) : default;
        public bool Stats_IsSet => _StatsLocation.HasValue;
        #endregion
        #region Hair
        private int? _HairLocation;
        public bool Hair_IsSet => _HairLocation.HasValue;
        public IFormLinkNullableGetter<IHairGetter> Hair => _HairLocation.HasValue ? new FormLinkNullable<IHairGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _HairLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<IHairGetter>.Null;
        #endregion
        #region HairLength
        private int? _HairLengthLocation;
        public Single? HairLength => _HairLengthLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _HairLengthLocation.Value, _package.MetaData.Constants)) : default(Single?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IEyeGetter>>? Eyes { get; private set; }
        #region HairColor
        private int? _HairColorLocation;
        public Color? HairColor => _HairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_data, _HairColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public bool CombatStyle_IsSet => _CombatStyleLocation.HasValue;
        public IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle => _CombatStyleLocation.HasValue ? new FormLinkNullable<ICombatStyleGetter>(FormKey.Factory(_package.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _CombatStyleLocation.Value, _package.MetaData.Constants)))) : FormLinkNullable<ICombatStyleGetter>.Null;
        #endregion
        #region FaceGenGeometrySymmetric
        private int? _FaceGenGeometrySymmetricLocation;
        public ReadOnlyMemorySlice<Byte>? FaceGenGeometrySymmetric => _FaceGenGeometrySymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenGeometrySymmetricLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FaceGenGeometryAsymmetric
        private int? _FaceGenGeometryAsymmetricLocation;
        public ReadOnlyMemorySlice<Byte>? FaceGenGeometryAsymmetric => _FaceGenGeometryAsymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenGeometryAsymmetricLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FaceGenTextureSymmetric
        private int? _FaceGenTextureSymmetricLocation;
        public ReadOnlyMemorySlice<Byte>? FaceGenTextureSymmetric => _FaceGenTextureSymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FaceGenTextureSymmetricLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public ReadOnlyMemorySlice<Byte>? Unknown => _UnknownLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected NpcBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static NpcBinaryOverlay NpcFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.MetaData.Constants);
            var ret = new NpcBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static NpcBinaryOverlay NpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return NpcFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Model);
                }
                case 0x53424341: // ACBS
                {
                    _ConfigurationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Configuration);
                }
                case 0x4D414E53: // SNAM
                {
                    this.Factions = BinaryOverlayList<RankPlacementBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Factions);
                }
                case 0x4D414E49: // INAM
                {
                    _DeathItemLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.DeathItem);
                }
                case 0x4D414E52: // RNAM
                {
                    _RaceLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Race);
                }
                case 0x4F4C5053: // SPLO
                {
                    this.Spells = BinaryOverlayList<IFormLinkGetter<IASpellGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IASpellGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Spells);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Script);
                }
                case 0x4F544E43: // CNTO
                {
                    this.Items = BinaryOverlayList<ItemEntryBinaryOverlay>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        recordTypeConverter: recordTypeConverter,
                        getter: (s, p, recConv) => ItemEntryBinaryOverlay.ItemEntryFactory(new BinaryMemoryReadStream(s), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            trigger: type,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Items);
                }
                case 0x54444941: // AIDT
                {
                    _AIDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.AIData);
                }
                case 0x44494B50: // PKID
                {
                    this.AIPackages = BinaryOverlayList<IFormLinkGetter<IAIPackageGetter>>.FactoryByArray(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new FormLink<IAIPackageGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))),
                        locs: ParseRecordLocations(
                            stream: stream,
                            finalPos: finalPos,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: type,
                            skipHeader: true,
                            recordTypeConverter: recordTypeConverter));
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.AIPackages);
                }
                case 0x5A46464B: // KFFZ
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Animations = BinaryOverlayList<String>.FactoryByLazyParse(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Animations);
                }
                case 0x4D414E43: // CNAM
                {
                    _ClassLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Class);
                }
                case 0x41544144: // DATA
                {
                    _StatsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Stats);
                }
                case 0x4D414E48: // HNAM
                {
                    _HairLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Hair);
                }
                case 0x4D414E4C: // LNAM
                {
                    _HairLengthLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.HairLength);
                }
                case 0x4D414E45: // ENAM
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Eyes = BinaryOverlayList<IFormLinkGetter<IEyeGetter>>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => new FormLink<IEyeGetter>(FormKey.Factory(p.MetaData.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(s))));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Eyes);
                }
                case 0x524C4348: // HCLR
                {
                    _HairColorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.HairColor);
                }
                case 0x4D414E5A: // ZNAM
                {
                    _CombatStyleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.CombatStyle);
                }
                case 0x53474746: // FGGS
                {
                    _FaceGenGeometrySymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.FaceGenGeometrySymmetric);
                }
                case 0x41474746: // FGGA
                {
                    _FaceGenGeometryAsymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.FaceGenGeometryAsymmetric);
                }
                case 0x53544746: // FGTS
                {
                    _FaceGenTextureSymmetricLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.FaceGenTextureSymmetric);
                }
                case 0x4D414E46: // FNAM
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Npc_FieldIndex.Unknown);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            NpcMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

