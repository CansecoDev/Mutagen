/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedObject :
        OblivionMajorRecord,
        IPlacedObjectInternal,
        ILoquiObjectSetter<PlacedObject>,
        IEquatable<PlacedObject>,
        IEqualsMask
    {
        #region Ctor
        protected PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<OblivionMajorRecord> _Base = new FormLinkNullable<OblivionMajorRecord>();
        public IFormLinkNullable<OblivionMajorRecord> Base => this._Base;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> IPlacedObjectGetter.Base => this.Base;
        #endregion
        #region XPCIFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _XPCIFluff;
        public Byte[]? XPCIFluff
        {
            get => this._XPCIFluff;
            set => this._XPCIFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XPCIFluff => this.XPCIFluff;
        #endregion
        #region FULLFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _FULLFluff;
        public Byte[]? FULLFluff
        {
            get => this._FULLFluff;
            set => this._FULLFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.FULLFluff => this.FULLFluff;
        #endregion
        #region TeleportDestination
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TeleportDestination? _TeleportDestination;
        public TeleportDestination? TeleportDestination
        {
            get => _TeleportDestination;
            set => _TeleportDestination = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITeleportDestinationGetter? IPlacedObjectGetter.TeleportDestination => this.TeleportDestination;
        #endregion
        #region Lock
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LockInformation? _Lock;
        public LockInformation? Lock
        {
            get => _Lock;
            set => _Lock = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILockInformationGetter? IPlacedObjectGetter.Lock => this.Lock;
        #endregion
        #region Owner
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<IOwner> _Owner = new FormLinkNullable<IOwner>();
        public IFormLinkNullable<IOwner> Owner => this._Owner;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOwner> IPlacedObjectGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _FactionRank;
        public Int32? FactionRank
        {
            get => this._FactionRank;
            set => this._FactionRank = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Global> _GlobalVariable = new FormLinkNullable<Global>();
        public IFormLinkNullable<Global> GlobalVariable => this._GlobalVariable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IPlacedObjectGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedObjectGetter.EnableParent => this.EnableParent;
        #endregion
        #region Target
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<IPlaced> _Target = new FormLinkNullable<IPlaced>();
        public IFormLinkNullable<IPlaced> Target => this._Target;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedGetter> IPlacedObjectGetter.Target => this.Target;
        #endregion
        #region SpeedTreeSeed
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte? _SpeedTreeSeed;
        public Byte? SpeedTreeSeed
        {
            get => this._SpeedTreeSeed;
            set => this._SpeedTreeSeed = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IPlacedObjectGetter.SpeedTreeSeed => this.SpeedTreeSeed;
        #endregion
        #region DistantLODData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DistantLODData? _DistantLODData;
        public DistantLODData? DistantLODData
        {
            get => _DistantLODData;
            set => _DistantLODData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter? IPlacedObjectGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region Charge
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _Charge;
        public Single? Charge
        {
            get => this._Charge;
            set => this._Charge = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Charge => this.Charge;
        #endregion
        #region Health
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _Health;
        public Int32? Health
        {
            get => this._Health;
            set => this._Health = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.Health => this.Health;
        #endregion
        #region LevelModifier
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _LevelModifier;
        public Int32? LevelModifier
        {
            get => this._LevelModifier;
            set => this._LevelModifier = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.LevelModifier => this.LevelModifier;
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<OblivionMajorRecord> _Unknown = new FormLinkNullable<OblivionMajorRecord>();
        public IFormLinkNullable<OblivionMajorRecord> Unknown => this._Unknown;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> IPlacedObjectGetter.Unknown => this.Unknown;
        #endregion
        #region ActionFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlacedObject.ActionFlag? _ActionFlags;
        public PlacedObject.ActionFlag? ActionFlags
        {
            get => this._ActionFlags;
            set => this._ActionFlags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PlacedObject.ActionFlag? IPlacedObjectGetter.ActionFlags => this.ActionFlags;
        #endregion
        #region Count
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32? _Count;
        public Int32? Count
        {
            get => this._Count;
            set => this._Count = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.Count => this.Count;
        #endregion
        #region MapMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MapMarker? _MapMarker;
        public MapMarker? MapMarker
        {
            get => _MapMarker;
            set => _MapMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapMarkerGetter? IPlacedObjectGetter.MapMarker => this.MapMarker;
        #endregion
        #region OpenByDefault
        public Boolean OpenByDefault { get; set; } = default;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _RagdollData;
        public Byte[]? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.RagdollData => this.RagdollData;
        #endregion
        #region Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single? _Scale;
        public Single? Scale
        {
            get => this._Scale;
            set => this._Scale = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Scale => this.Scale;
        #endregion
        #region ContainedSoul
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<SoulGem> _ContainedSoul = new FormLinkNullable<SoulGem>();
        public IFormLinkNullable<SoulGem> ContainedSoul => this._ContainedSoul;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoulGemGetter> IPlacedObjectGetter.ContainedSoul => this.ContainedSoul;
        #endregion
        #region Position
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P3Float _Position;
        public P3Float Position
        {
            get => this._Position;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Position = value;
            }
        }
        #endregion
        #region Rotation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P3Float _Rotation;
        public P3Float Rotation
        {
            get => this._Rotation;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Rotation = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public PlacedObject.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            PlacedObjectMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IPlacedObjectGetter rhs)) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(PlacedObject obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PlacedObjectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PlacedObjectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new PlacedObject CreateFromXml(
            XElement node,
            PlacedObject.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static PlacedObject CreateFromXml(
            XElement node,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static PlacedObject CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new PlacedObject();
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static PlacedObject CreateFromXml(
            string path,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            string path,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static PlacedObject CreateFromXml(
            Stream stream,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            Stream stream,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static PlacedObject CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Base = initialValue;
                this.XPCIFluff = initialValue;
                this.FULLFluff = initialValue;
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(initialValue, new TeleportDestination.Mask<TItem>(initialValue));
                this.Lock = new MaskItem<TItem, LockInformation.Mask<TItem>?>(initialValue, new LockInformation.Mask<TItem>(initialValue));
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Target = initialValue;
                this.SpeedTreeSeed = initialValue;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(initialValue, new DistantLODData.Mask<TItem>(initialValue));
                this.Charge = initialValue;
                this.Health = initialValue;
                this.LevelModifier = initialValue;
                this.Unknown = initialValue;
                this.ActionFlags = initialValue;
                this.Count = initialValue;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(initialValue, new MapMarker.Mask<TItem>(initialValue));
                this.OpenByDefault = initialValue;
                this.RagdollData = initialValue;
                this.Scale = initialValue;
                this.ContainedSoul = initialValue;
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Base,
                TItem XPCIFluff,
                TItem FULLFluff,
                TItem TeleportDestination,
                TItem Lock,
                TItem Owner,
                TItem FactionRank,
                TItem GlobalVariable,
                TItem EnableParent,
                TItem Target,
                TItem SpeedTreeSeed,
                TItem DistantLODData,
                TItem Charge,
                TItem Health,
                TItem LevelModifier,
                TItem Unknown,
                TItem ActionFlags,
                TItem Count,
                TItem MapMarker,
                TItem OpenByDefault,
                TItem RagdollData,
                TItem Scale,
                TItem ContainedSoul,
                TItem Position,
                TItem Rotation,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Base = Base;
                this.XPCIFluff = XPCIFluff;
                this.FULLFluff = FULLFluff;
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(TeleportDestination, new TeleportDestination.Mask<TItem>(TeleportDestination));
                this.Lock = new MaskItem<TItem, LockInformation.Mask<TItem>?>(Lock, new LockInformation.Mask<TItem>(Lock));
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Target = Target;
                this.SpeedTreeSeed = SpeedTreeSeed;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(DistantLODData, new DistantLODData.Mask<TItem>(DistantLODData));
                this.Charge = Charge;
                this.Health = Health;
                this.LevelModifier = LevelModifier;
                this.Unknown = Unknown;
                this.ActionFlags = ActionFlags;
                this.Count = Count;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(MapMarker, new MapMarker.Mask<TItem>(MapMarker));
                this.OpenByDefault = OpenByDefault;
                this.RagdollData = RagdollData;
                this.Scale = Scale;
                this.ContainedSoul = ContainedSoul;
                this.Position = Position;
                this.Rotation = Rotation;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Base;
            public TItem XPCIFluff;
            public TItem FULLFluff;
            public MaskItem<TItem, TeleportDestination.Mask<TItem>?>? TeleportDestination { get; set; }
            public MaskItem<TItem, LockInformation.Mask<TItem>?>? Lock { get; set; }
            public TItem Owner;
            public TItem FactionRank;
            public TItem GlobalVariable;
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem Target;
            public TItem SpeedTreeSeed;
            public MaskItem<TItem, DistantLODData.Mask<TItem>?>? DistantLODData { get; set; }
            public TItem Charge;
            public TItem Health;
            public TItem LevelModifier;
            public TItem Unknown;
            public TItem ActionFlags;
            public TItem Count;
            public MaskItem<TItem, MapMarker.Mask<TItem>?>? MapMarker { get; set; }
            public TItem OpenByDefault;
            public TItem RagdollData;
            public TItem Scale;
            public TItem ContainedSoul;
            public TItem Position;
            public TItem Rotation;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
                if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
                if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
                if (!object.Equals(this.Lock, rhs.Lock)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Target, rhs.Target)) return false;
                if (!object.Equals(this.SpeedTreeSeed, rhs.SpeedTreeSeed)) return false;
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
                if (!object.Equals(this.Charge, rhs.Charge)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.ActionFlags, rhs.ActionFlags)) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
                if (!object.Equals(this.OpenByDefault, rhs.OpenByDefault)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Base?.GetHashCode());
                ret = ret.CombineHashCode(this.XPCIFluff?.GetHashCode());
                ret = ret.CombineHashCode(this.FULLFluff?.GetHashCode());
                ret = ret.CombineHashCode(this.TeleportDestination?.GetHashCode());
                ret = ret.CombineHashCode(this.Lock?.GetHashCode());
                ret = ret.CombineHashCode(this.Owner?.GetHashCode());
                ret = ret.CombineHashCode(this.FactionRank?.GetHashCode());
                ret = ret.CombineHashCode(this.GlobalVariable?.GetHashCode());
                ret = ret.CombineHashCode(this.EnableParent?.GetHashCode());
                ret = ret.CombineHashCode(this.Target?.GetHashCode());
                ret = ret.CombineHashCode(this.SpeedTreeSeed?.GetHashCode());
                ret = ret.CombineHashCode(this.DistantLODData?.GetHashCode());
                ret = ret.CombineHashCode(this.Charge?.GetHashCode());
                ret = ret.CombineHashCode(this.Health?.GetHashCode());
                ret = ret.CombineHashCode(this.LevelModifier?.GetHashCode());
                ret = ret.CombineHashCode(this.Unknown?.GetHashCode());
                ret = ret.CombineHashCode(this.ActionFlags?.GetHashCode());
                ret = ret.CombineHashCode(this.Count?.GetHashCode());
                ret = ret.CombineHashCode(this.MapMarker?.GetHashCode());
                ret = ret.CombineHashCode(this.OpenByDefault?.GetHashCode());
                ret = ret.CombineHashCode(this.RagdollData?.GetHashCode());
                ret = ret.CombineHashCode(this.Scale?.GetHashCode());
                ret = ret.CombineHashCode(this.ContainedSoul?.GetHashCode());
                ret = ret.CombineHashCode(this.Position?.GetHashCode());
                ret = ret.CombineHashCode(this.Rotation?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Base)) return false;
                if (!eval(this.XPCIFluff)) return false;
                if (!eval(this.FULLFluff)) return false;
                if (TeleportDestination != null)
                {
                    if (!eval(this.TeleportDestination.Overall)) return false;
                    if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.All(eval)) return false;
                }
                if (Lock != null)
                {
                    if (!eval(this.Lock.Overall)) return false;
                    if (this.Lock.Specific != null && !this.Lock.Specific.All(eval)) return false;
                }
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.Target)) return false;
                if (!eval(this.SpeedTreeSeed)) return false;
                if (DistantLODData != null)
                {
                    if (!eval(this.DistantLODData.Overall)) return false;
                    if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.All(eval)) return false;
                }
                if (!eval(this.Charge)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.LevelModifier)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.ActionFlags)) return false;
                if (!eval(this.Count)) return false;
                if (MapMarker != null)
                {
                    if (!eval(this.MapMarker.Overall)) return false;
                    if (this.MapMarker.Specific != null && !this.MapMarker.Specific.All(eval)) return false;
                }
                if (!eval(this.OpenByDefault)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.ContainedSoul)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Base)) return true;
                if (eval(this.XPCIFluff)) return true;
                if (eval(this.FULLFluff)) return true;
                if (TeleportDestination != null)
                {
                    if (eval(this.TeleportDestination.Overall)) return true;
                    if (this.TeleportDestination.Specific != null && this.TeleportDestination.Specific.Any(eval)) return true;
                }
                if (Lock != null)
                {
                    if (eval(this.Lock.Overall)) return true;
                    if (this.Lock.Specific != null && this.Lock.Specific.Any(eval)) return true;
                }
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.GlobalVariable)) return true;
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.Target)) return true;
                if (eval(this.SpeedTreeSeed)) return true;
                if (DistantLODData != null)
                {
                    if (eval(this.DistantLODData.Overall)) return true;
                    if (this.DistantLODData.Specific != null && this.DistantLODData.Specific.Any(eval)) return true;
                }
                if (eval(this.Charge)) return true;
                if (eval(this.Health)) return true;
                if (eval(this.LevelModifier)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.ActionFlags)) return true;
                if (eval(this.Count)) return true;
                if (MapMarker != null)
                {
                    if (eval(this.MapMarker.Overall)) return true;
                    if (this.MapMarker.Specific != null && this.MapMarker.Specific.Any(eval)) return true;
                }
                if (eval(this.OpenByDefault)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.ContainedSoul)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Rotation)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Base = eval(this.Base);
                obj.XPCIFluff = eval(this.XPCIFluff);
                obj.FULLFluff = eval(this.FULLFluff);
                obj.TeleportDestination = this.TeleportDestination == null ? null : new MaskItem<R, TeleportDestination.Mask<R>?>(eval(this.TeleportDestination.Overall), this.TeleportDestination.Specific?.Translate(eval));
                obj.Lock = this.Lock == null ? null : new MaskItem<R, LockInformation.Mask<R>?>(eval(this.Lock.Overall), this.Lock.Specific?.Translate(eval));
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Target = eval(this.Target);
                obj.SpeedTreeSeed = eval(this.SpeedTreeSeed);
                obj.DistantLODData = this.DistantLODData == null ? null : new MaskItem<R, DistantLODData.Mask<R>?>(eval(this.DistantLODData.Overall), this.DistantLODData.Specific?.Translate(eval));
                obj.Charge = eval(this.Charge);
                obj.Health = eval(this.Health);
                obj.LevelModifier = eval(this.LevelModifier);
                obj.Unknown = eval(this.Unknown);
                obj.ActionFlags = eval(this.ActionFlags);
                obj.Count = eval(this.Count);
                obj.MapMarker = this.MapMarker == null ? null : new MaskItem<R, MapMarker.Mask<R>?>(eval(this.MapMarker.Overall), this.MapMarker.Specific?.Translate(eval));
                obj.OpenByDefault = eval(this.OpenByDefault);
                obj.RagdollData = eval(this.RagdollData);
                obj.Scale = eval(this.Scale);
                obj.ContainedSoul = eval(this.ContainedSoul);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(PlacedObject.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, PlacedObject.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(PlacedObject.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Base ?? true)
                    {
                        fg.AppendItem(Base, "Base");
                    }
                    if (printMask?.XPCIFluff ?? true)
                    {
                        fg.AppendItem(XPCIFluff, "XPCIFluff");
                    }
                    if (printMask?.FULLFluff ?? true)
                    {
                        fg.AppendItem(FULLFluff, "FULLFluff");
                    }
                    if (printMask?.TeleportDestination?.Overall ?? true)
                    {
                        TeleportDestination?.ToString(fg);
                    }
                    if (printMask?.Lock?.Overall ?? true)
                    {
                        Lock?.ToString(fg);
                    }
                    if (printMask?.Owner ?? true)
                    {
                        fg.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        fg.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        fg.AppendItem(GlobalVariable, "GlobalVariable");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.ToString(fg);
                    }
                    if (printMask?.Target ?? true)
                    {
                        fg.AppendItem(Target, "Target");
                    }
                    if (printMask?.SpeedTreeSeed ?? true)
                    {
                        fg.AppendItem(SpeedTreeSeed, "SpeedTreeSeed");
                    }
                    if (printMask?.DistantLODData?.Overall ?? true)
                    {
                        DistantLODData?.ToString(fg);
                    }
                    if (printMask?.Charge ?? true)
                    {
                        fg.AppendItem(Charge, "Charge");
                    }
                    if (printMask?.Health ?? true)
                    {
                        fg.AppendItem(Health, "Health");
                    }
                    if (printMask?.LevelModifier ?? true)
                    {
                        fg.AppendItem(LevelModifier, "LevelModifier");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        fg.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.ActionFlags ?? true)
                    {
                        fg.AppendItem(ActionFlags, "ActionFlags");
                    }
                    if (printMask?.Count ?? true)
                    {
                        fg.AppendItem(Count, "Count");
                    }
                    if (printMask?.MapMarker?.Overall ?? true)
                    {
                        MapMarker?.ToString(fg);
                    }
                    if (printMask?.OpenByDefault ?? true)
                    {
                        fg.AppendItem(OpenByDefault, "OpenByDefault");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        fg.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        fg.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.ContainedSoul ?? true)
                    {
                        fg.AppendItem(ContainedSoul, "ContainedSoul");
                    }
                    if (printMask?.Position ?? true)
                    {
                        fg.AppendItem(Position, "Position");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        fg.AppendItem(Rotation, "Rotation");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Base;
            public Exception? XPCIFluff;
            public Exception? FULLFluff;
            public MaskItem<Exception?, TeleportDestination.ErrorMask?>? TeleportDestination;
            public MaskItem<Exception?, LockInformation.ErrorMask?>? Lock;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? Target;
            public Exception? SpeedTreeSeed;
            public MaskItem<Exception?, DistantLODData.ErrorMask?>? DistantLODData;
            public Exception? Charge;
            public Exception? Health;
            public Exception? LevelModifier;
            public Exception? Unknown;
            public Exception? ActionFlags;
            public Exception? Count;
            public MaskItem<Exception?, MapMarker.ErrorMask?>? MapMarker;
            public Exception? OpenByDefault;
            public Exception? RagdollData;
            public Exception? Scale;
            public Exception? ContainedSoul;
            public Exception? Position;
            public Exception? Rotation;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.Base:
                        return Base;
                    case PlacedObject_FieldIndex.XPCIFluff:
                        return XPCIFluff;
                    case PlacedObject_FieldIndex.FULLFluff:
                        return FULLFluff;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        return TeleportDestination;
                    case PlacedObject_FieldIndex.Lock:
                        return Lock;
                    case PlacedObject_FieldIndex.Owner:
                        return Owner;
                    case PlacedObject_FieldIndex.FactionRank:
                        return FactionRank;
                    case PlacedObject_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case PlacedObject_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedObject_FieldIndex.Target:
                        return Target;
                    case PlacedObject_FieldIndex.SpeedTreeSeed:
                        return SpeedTreeSeed;
                    case PlacedObject_FieldIndex.DistantLODData:
                        return DistantLODData;
                    case PlacedObject_FieldIndex.Charge:
                        return Charge;
                    case PlacedObject_FieldIndex.Health:
                        return Health;
                    case PlacedObject_FieldIndex.LevelModifier:
                        return LevelModifier;
                    case PlacedObject_FieldIndex.Unknown:
                        return Unknown;
                    case PlacedObject_FieldIndex.ActionFlags:
                        return ActionFlags;
                    case PlacedObject_FieldIndex.Count:
                        return Count;
                    case PlacedObject_FieldIndex.MapMarker:
                        return MapMarker;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        return OpenByDefault;
                    case PlacedObject_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedObject_FieldIndex.Scale:
                        return Scale;
                    case PlacedObject_FieldIndex.ContainedSoul:
                        return ContainedSoul;
                    case PlacedObject_FieldIndex.Position:
                        return Position;
                    case PlacedObject_FieldIndex.Rotation:
                        return Rotation;
                    case PlacedObject_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedObject_FieldIndex.XPCIFluff:
                        this.XPCIFluff = ex;
                        break;
                    case PlacedObject_FieldIndex.FULLFluff:
                        this.FULLFluff = ex;
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = new MaskItem<Exception?, TeleportDestination.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = new MaskItem<Exception?, LockInformation.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case PlacedObject_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case PlacedObject_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Target:
                        this.Target = ex;
                        break;
                    case PlacedObject_FieldIndex.SpeedTreeSeed:
                        this.SpeedTreeSeed = ex;
                        break;
                    case PlacedObject_FieldIndex.DistantLODData:
                        this.DistantLODData = new MaskItem<Exception?, DistantLODData.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = ex;
                        break;
                    case PlacedObject_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = ex;
                        break;
                    case PlacedObject_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case PlacedObject_FieldIndex.ActionFlags:
                        this.ActionFlags = ex;
                        break;
                    case PlacedObject_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = new MaskItem<Exception?, MapMarker.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        this.OpenByDefault = ex;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedObject_FieldIndex.ContainedSoul:
                        this.ContainedSoul = ex;
                        break;
                    case PlacedObject_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case PlacedObject_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case PlacedObject_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XPCIFluff:
                        this.XPCIFluff = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FULLFluff:
                        this.FULLFluff = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = (MaskItem<Exception?, TeleportDestination.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = (MaskItem<Exception?, LockInformation.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Target:
                        this.Target = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.SpeedTreeSeed:
                        this.SpeedTreeSeed = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.DistantLODData:
                        this.DistantLODData = (MaskItem<Exception?, DistantLODData.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ActionFlags:
                        this.ActionFlags = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = (MaskItem<Exception?, MapMarker.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        this.OpenByDefault = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ContainedSoul:
                        this.ContainedSoul = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Rotation:
                        this.Rotation = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (XPCIFluff != null) return true;
                if (FULLFluff != null) return true;
                if (TeleportDestination != null) return true;
                if (Lock != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (EnableParent != null) return true;
                if (Target != null) return true;
                if (SpeedTreeSeed != null) return true;
                if (DistantLODData != null) return true;
                if (Charge != null) return true;
                if (Health != null) return true;
                if (LevelModifier != null) return true;
                if (Unknown != null) return true;
                if (ActionFlags != null) return true;
                if (Count != null) return true;
                if (MapMarker != null) return true;
                if (OpenByDefault != null) return true;
                if (RagdollData != null) return true;
                if (Scale != null) return true;
                if (ContainedSoul != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Base, "Base");
                fg.AppendItem(XPCIFluff, "XPCIFluff");
                fg.AppendItem(FULLFluff, "FULLFluff");
                TeleportDestination?.ToString(fg);
                Lock?.ToString(fg);
                fg.AppendItem(Owner, "Owner");
                fg.AppendItem(FactionRank, "FactionRank");
                fg.AppendItem(GlobalVariable, "GlobalVariable");
                EnableParent?.ToString(fg);
                fg.AppendItem(Target, "Target");
                fg.AppendItem(SpeedTreeSeed, "SpeedTreeSeed");
                DistantLODData?.ToString(fg);
                fg.AppendItem(Charge, "Charge");
                fg.AppendItem(Health, "Health");
                fg.AppendItem(LevelModifier, "LevelModifier");
                fg.AppendItem(Unknown, "Unknown");
                fg.AppendItem(ActionFlags, "ActionFlags");
                fg.AppendItem(Count, "Count");
                MapMarker?.ToString(fg);
                fg.AppendItem(OpenByDefault, "OpenByDefault");
                fg.AppendItem(RagdollData, "RagdollData");
                fg.AppendItem(Scale, "Scale");
                fg.AppendItem(ContainedSoul, "ContainedSoul");
                fg.AppendItem(Position, "Position");
                fg.AppendItem(Rotation, "Rotation");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base);
                ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
                ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
                ret.TeleportDestination = this.TeleportDestination.Combine(rhs.TeleportDestination, (l, r) => l.Combine(r));
                ret.Lock = this.Lock.Combine(rhs.Lock, (l, r) => l.Combine(r));
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Target = this.Target.Combine(rhs.Target);
                ret.SpeedTreeSeed = this.SpeedTreeSeed.Combine(rhs.SpeedTreeSeed);
                ret.DistantLODData = this.DistantLODData.Combine(rhs.DistantLODData, (l, r) => l.Combine(r));
                ret.Charge = this.Charge.Combine(rhs.Charge);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.ActionFlags = this.ActionFlags.Combine(rhs.ActionFlags);
                ret.Count = this.Count.Combine(rhs.Count);
                ret.MapMarker = this.MapMarker.Combine(rhs.MapMarker, (l, r) => l.Combine(r));
                ret.OpenByDefault = this.OpenByDefault.Combine(rhs.OpenByDefault);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Base;
            public bool XPCIFluff;
            public bool FULLFluff;
            public MaskItem<bool, TeleportDestination.TranslationMask?> TeleportDestination;
            public MaskItem<bool, LockInformation.TranslationMask?> Lock;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public MaskItem<bool, EnableParent.TranslationMask?> EnableParent;
            public bool Target;
            public bool SpeedTreeSeed;
            public MaskItem<bool, DistantLODData.TranslationMask?> DistantLODData;
            public bool Charge;
            public bool Health;
            public bool LevelModifier;
            public bool Unknown;
            public bool ActionFlags;
            public bool Count;
            public MaskItem<bool, MapMarker.TranslationMask?> MapMarker;
            public bool OpenByDefault;
            public bool RagdollData;
            public bool Scale;
            public bool ContainedSoul;
            public bool Position;
            public bool Rotation;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Base = defaultOn;
                this.XPCIFluff = defaultOn;
                this.FULLFluff = defaultOn;
                this.TeleportDestination = new MaskItem<bool, TeleportDestination.TranslationMask?>(defaultOn, null);
                this.Lock = new MaskItem<bool, LockInformation.TranslationMask?>(defaultOn, null);
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.EnableParent = new MaskItem<bool, EnableParent.TranslationMask?>(defaultOn, null);
                this.Target = defaultOn;
                this.SpeedTreeSeed = defaultOn;
                this.DistantLODData = new MaskItem<bool, DistantLODData.TranslationMask?>(defaultOn, null);
                this.Charge = defaultOn;
                this.Health = defaultOn;
                this.LevelModifier = defaultOn;
                this.Unknown = defaultOn;
                this.ActionFlags = defaultOn;
                this.Count = defaultOn;
                this.MapMarker = new MaskItem<bool, MapMarker.TranslationMask?>(defaultOn, null);
                this.OpenByDefault = defaultOn;
                this.RagdollData = defaultOn;
                this.Scale = defaultOn;
                this.ContainedSoul = defaultOn;
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Base, null));
                ret.Add((XPCIFluff, null));
                ret.Add((FULLFluff, null));
                ret.Add((TeleportDestination?.Overall ?? true, TeleportDestination?.Specific?.GetCrystal()));
                ret.Add((Lock?.Overall ?? true, Lock?.Specific?.GetCrystal()));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((EnableParent?.Overall ?? true, EnableParent?.Specific?.GetCrystal()));
                ret.Add((Target, null));
                ret.Add((SpeedTreeSeed, null));
                ret.Add((DistantLODData?.Overall ?? true, DistantLODData?.Specific?.GetCrystal()));
                ret.Add((Charge, null));
                ret.Add((Health, null));
                ret.Add((LevelModifier, null));
                ret.Add((Unknown, null));
                ret.Add((ActionFlags, null));
                ret.Add((Count, null));
                ret.Add((MapMarker?.Overall ?? true, MapMarker?.Specific?.GetCrystal()));
                ret.Add((OpenByDefault, null));
                ret.Add((RagdollData, null));
                ret.Add((Scale, null));
                ret.Add((ContainedSoul, null));
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = PlacedObject_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => PlacedObjectCommon.Instance.GetLinks(this);
        public PlacedObject(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedObject(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PlacedObject(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new PlacedObject CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new PlacedObject();
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedObjectGetter)rhs, include);

        void IClearable.Clear()
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedObject GetNew()
        {
            return new PlacedObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObject :
        IPlacedObjectGetter,
        IOblivionMajorRecord,
        IPlaced,
        ILoquiObjectSetter<IPlacedObjectInternal>
    {
        new IFormLinkNullable<OblivionMajorRecord> Base { get; }
        new Byte[]? XPCIFluff { get; set; }
        new Byte[]? FULLFluff { get; set; }
        new TeleportDestination? TeleportDestination { get; set; }
        new LockInformation? Lock { get; set; }
        new IFormLinkNullable<IOwner> Owner { get; }
        new Int32? FactionRank { get; set; }
        new IFormLinkNullable<Global> GlobalVariable { get; }
        new EnableParent? EnableParent { get; set; }
        new IFormLinkNullable<IPlaced> Target { get; }
        new Byte? SpeedTreeSeed { get; set; }
        new DistantLODData? DistantLODData { get; set; }
        new Single? Charge { get; set; }
        new Int32? Health { get; set; }
        new Int32? LevelModifier { get; set; }
        new IFormLinkNullable<OblivionMajorRecord> Unknown { get; }
        new PlacedObject.ActionFlag? ActionFlags { get; set; }
        new Int32? Count { get; set; }
        new MapMarker? MapMarker { get; set; }
        new Boolean OpenByDefault { get; set; }
        new Byte[]? RagdollData { get; set; }
        new Single? Scale { get; set; }
        new IFormLinkNullable<SoulGem> ContainedSoul { get; }
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new PlacedObject.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IPlacedObjectInternal :
        IOblivionMajorRecordInternal,
        IPlacedObject,
        IPlacedObjectGetter
    {
    }

    public partial interface IPlacedObjectGetter :
        IOblivionMajorRecordGetter,
        IPlacedGetter,
        ILoquiObject<IPlacedObjectGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> Base { get; }
        ReadOnlyMemorySlice<Byte>? XPCIFluff { get; }
        ReadOnlyMemorySlice<Byte>? FULLFluff { get; }
        ITeleportDestinationGetter? TeleportDestination { get; }
        ILockInformationGetter? Lock { get; }
        IFormLinkNullableGetter<IOwner> Owner { get; }
        Int32? FactionRank { get; }
        IFormLinkNullableGetter<IGlobalGetter> GlobalVariable { get; }
        IEnableParentGetter? EnableParent { get; }
        IFormLinkNullableGetter<IPlacedGetter> Target { get; }
        Byte? SpeedTreeSeed { get; }
        IDistantLODDataGetter? DistantLODData { get; }
        Single? Charge { get; }
        Int32? Health { get; }
        Int32? LevelModifier { get; }
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> Unknown { get; }
        PlacedObject.ActionFlag? ActionFlags { get; }
        Int32? Count { get; }
        IMapMarkerGetter? MapMarker { get; }
        Boolean OpenByDefault { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        Single? Scale { get; }
        IFormLinkNullableGetter<ISoulGemGetter> ContainedSoul { get; }
        P3Float Position { get; }
        P3Float Rotation { get; }
        PlacedObject.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectMixIn
    {
        public static void Clear(this IPlacedObjectInternal item)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObject.Mask<bool> GetEqualsMask(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IPlacedObjectGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IPlacedObjectGetter item,
            PlacedObject.Mask<bool?> checkMask)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static PlacedObject.Mask<bool> GetHasBeenSetMask(this IPlacedObjectGetter item)
        {
            var ret = new PlacedObject.Mask<bool>(false);
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            XElement node,
            PlacedObject.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            XElement node,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            string path,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            string path,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            Stream stream,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            Stream stream,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IPlacedObjectInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            PlacedObject.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IPlacedObjectInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IPlacedObjectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum PlacedObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        TeleportDestination = 8,
        Lock = 9,
        Owner = 10,
        FactionRank = 11,
        GlobalVariable = 12,
        EnableParent = 13,
        Target = 14,
        SpeedTreeSeed = 15,
        DistantLODData = 16,
        Charge = 17,
        Health = 18,
        LevelModifier = 19,
        Unknown = 20,
        ActionFlags = 21,
        Count = 22,
        MapMarker = 23,
        OpenByDefault = 24,
        RagdollData = 25,
        Scale = 26,
        ContainedSoul = 27,
        Position = 28,
        Rotation = 29,
        DATADataTypeState = 30,
    }
    #endregion

    #region Registration
    public partial class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 121,
            version: 0);

        public const string GUID = "7a559a46-7ef9-49e9-98c1-ec16c3df81f2";

        public const ushort AdditionalFieldCount = 26;

        public const ushort FieldCount = 31;

        public static readonly Type MaskType = typeof(PlacedObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type? InternalSetterType = typeof(IPlacedObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BASE":
                    return (ushort)PlacedObject_FieldIndex.Base;
                case "XPCIFLUFF":
                    return (ushort)PlacedObject_FieldIndex.XPCIFluff;
                case "FULLFLUFF":
                    return (ushort)PlacedObject_FieldIndex.FULLFluff;
                case "TELEPORTDESTINATION":
                    return (ushort)PlacedObject_FieldIndex.TeleportDestination;
                case "LOCK":
                    return (ushort)PlacedObject_FieldIndex.Lock;
                case "OWNER":
                    return (ushort)PlacedObject_FieldIndex.Owner;
                case "FACTIONRANK":
                    return (ushort)PlacedObject_FieldIndex.FactionRank;
                case "GLOBALVARIABLE":
                    return (ushort)PlacedObject_FieldIndex.GlobalVariable;
                case "ENABLEPARENT":
                    return (ushort)PlacedObject_FieldIndex.EnableParent;
                case "TARGET":
                    return (ushort)PlacedObject_FieldIndex.Target;
                case "SPEEDTREESEED":
                    return (ushort)PlacedObject_FieldIndex.SpeedTreeSeed;
                case "DISTANTLODDATA":
                    return (ushort)PlacedObject_FieldIndex.DistantLODData;
                case "CHARGE":
                    return (ushort)PlacedObject_FieldIndex.Charge;
                case "HEALTH":
                    return (ushort)PlacedObject_FieldIndex.Health;
                case "LEVELMODIFIER":
                    return (ushort)PlacedObject_FieldIndex.LevelModifier;
                case "UNKNOWN":
                    return (ushort)PlacedObject_FieldIndex.Unknown;
                case "ACTIONFLAGS":
                    return (ushort)PlacedObject_FieldIndex.ActionFlags;
                case "COUNT":
                    return (ushort)PlacedObject_FieldIndex.Count;
                case "MAPMARKER":
                    return (ushort)PlacedObject_FieldIndex.MapMarker;
                case "OPENBYDEFAULT":
                    return (ushort)PlacedObject_FieldIndex.OpenByDefault;
                case "RAGDOLLDATA":
                    return (ushort)PlacedObject_FieldIndex.RagdollData;
                case "SCALE":
                    return (ushort)PlacedObject_FieldIndex.Scale;
                case "CONTAINEDSOUL":
                    return (ushort)PlacedObject_FieldIndex.ContainedSoul;
                case "POSITION":
                    return (ushort)PlacedObject_FieldIndex.Position;
                case "ROTATION":
                    return (ushort)PlacedObject_FieldIndex.Rotation;
                case "DATADATATYPESTATE":
                    return (ushort)PlacedObject_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.MapMarker:
                    return true;
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return "Base";
                case PlacedObject_FieldIndex.XPCIFluff:
                    return "XPCIFluff";
                case PlacedObject_FieldIndex.FULLFluff:
                    return "FULLFluff";
                case PlacedObject_FieldIndex.TeleportDestination:
                    return "TeleportDestination";
                case PlacedObject_FieldIndex.Lock:
                    return "Lock";
                case PlacedObject_FieldIndex.Owner:
                    return "Owner";
                case PlacedObject_FieldIndex.FactionRank:
                    return "FactionRank";
                case PlacedObject_FieldIndex.GlobalVariable:
                    return "GlobalVariable";
                case PlacedObject_FieldIndex.EnableParent:
                    return "EnableParent";
                case PlacedObject_FieldIndex.Target:
                    return "Target";
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return "SpeedTreeSeed";
                case PlacedObject_FieldIndex.DistantLODData:
                    return "DistantLODData";
                case PlacedObject_FieldIndex.Charge:
                    return "Charge";
                case PlacedObject_FieldIndex.Health:
                    return "Health";
                case PlacedObject_FieldIndex.LevelModifier:
                    return "LevelModifier";
                case PlacedObject_FieldIndex.Unknown:
                    return "Unknown";
                case PlacedObject_FieldIndex.ActionFlags:
                    return "ActionFlags";
                case PlacedObject_FieldIndex.Count:
                    return "Count";
                case PlacedObject_FieldIndex.MapMarker:
                    return "MapMarker";
                case PlacedObject_FieldIndex.OpenByDefault:
                    return "OpenByDefault";
                case PlacedObject_FieldIndex.RagdollData:
                    return "RagdollData";
                case PlacedObject_FieldIndex.Scale:
                    return "Scale";
                case PlacedObject_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case PlacedObject_FieldIndex.Position:
                    return "Position";
                case PlacedObject_FieldIndex.Rotation:
                    return "Rotation";
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                case PlacedObject_FieldIndex.XPCIFluff:
                case PlacedObject_FieldIndex.FULLFluff:
                case PlacedObject_FieldIndex.TeleportDestination:
                case PlacedObject_FieldIndex.Lock:
                case PlacedObject_FieldIndex.Owner:
                case PlacedObject_FieldIndex.FactionRank:
                case PlacedObject_FieldIndex.GlobalVariable:
                case PlacedObject_FieldIndex.EnableParent:
                case PlacedObject_FieldIndex.Target:
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                case PlacedObject_FieldIndex.DistantLODData:
                case PlacedObject_FieldIndex.Charge:
                case PlacedObject_FieldIndex.Health:
                case PlacedObject_FieldIndex.LevelModifier:
                case PlacedObject_FieldIndex.Unknown:
                case PlacedObject_FieldIndex.ActionFlags:
                case PlacedObject_FieldIndex.Count:
                case PlacedObject_FieldIndex.MapMarker:
                case PlacedObject_FieldIndex.OpenByDefault:
                case PlacedObject_FieldIndex.RagdollData:
                case PlacedObject_FieldIndex.Scale:
                case PlacedObject_FieldIndex.ContainedSoul:
                case PlacedObject_FieldIndex.Position:
                case PlacedObject_FieldIndex.Rotation:
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
            switch (enu)
            {
                case PlacedObject_FieldIndex.Base:
                    return typeof(IFormLinkNullable<OblivionMajorRecord>);
                case PlacedObject_FieldIndex.XPCIFluff:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.FULLFluff:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.TeleportDestination:
                    return typeof(TeleportDestination);
                case PlacedObject_FieldIndex.Lock:
                    return typeof(LockInformation);
                case PlacedObject_FieldIndex.Owner:
                    return typeof(IFormLinkNullable<IOwner>);
                case PlacedObject_FieldIndex.FactionRank:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.GlobalVariable:
                    return typeof(IFormLinkNullable<Global>);
                case PlacedObject_FieldIndex.EnableParent:
                    return typeof(EnableParent);
                case PlacedObject_FieldIndex.Target:
                    return typeof(IFormLinkNullable<IPlaced>);
                case PlacedObject_FieldIndex.SpeedTreeSeed:
                    return typeof(Byte);
                case PlacedObject_FieldIndex.DistantLODData:
                    return typeof(DistantLODData);
                case PlacedObject_FieldIndex.Charge:
                    return typeof(Single);
                case PlacedObject_FieldIndex.Health:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.LevelModifier:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.Unknown:
                    return typeof(IFormLinkNullable<OblivionMajorRecord>);
                case PlacedObject_FieldIndex.ActionFlags:
                    return typeof(PlacedObject.ActionFlag);
                case PlacedObject_FieldIndex.Count:
                    return typeof(Int32);
                case PlacedObject_FieldIndex.MapMarker:
                    return typeof(MapMarker);
                case PlacedObject_FieldIndex.OpenByDefault:
                    return typeof(Boolean);
                case PlacedObject_FieldIndex.RagdollData:
                    return typeof(Byte[]);
                case PlacedObject_FieldIndex.Scale:
                    return typeof(Single);
                case PlacedObject_FieldIndex.ContainedSoul:
                    return typeof(IFormLinkNullable<SoulGem>);
                case PlacedObject_FieldIndex.Position:
                    return typeof(P3Float);
                case PlacedObject_FieldIndex.Rotation:
                    return typeof(P3Float);
                case PlacedObject_FieldIndex.DATADataTypeState:
                    return typeof(PlacedObject.DATADataType);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(PlacedObjectXmlWriteTranslation);
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType NAME_HEADER = new RecordType("NAME");
        public static readonly RecordType XPCI_HEADER = new RecordType("XPCI");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType XTEL_HEADER = new RecordType("XTEL");
        public static readonly RecordType XLOC_HEADER = new RecordType("XLOC");
        public static readonly RecordType XOWN_HEADER = new RecordType("XOWN");
        public static readonly RecordType XRNK_HEADER = new RecordType("XRNK");
        public static readonly RecordType XGLB_HEADER = new RecordType("XGLB");
        public static readonly RecordType XESP_HEADER = new RecordType("XESP");
        public static readonly RecordType XTRG_HEADER = new RecordType("XTRG");
        public static readonly RecordType XSED_HEADER = new RecordType("XSED");
        public static readonly RecordType XLOD_HEADER = new RecordType("XLOD");
        public static readonly RecordType XCHG_HEADER = new RecordType("XCHG");
        public static readonly RecordType XHLT_HEADER = new RecordType("XHLT");
        public static readonly RecordType XLCM_HEADER = new RecordType("XLCM");
        public static readonly RecordType XRTM_HEADER = new RecordType("XRTM");
        public static readonly RecordType XACT_HEADER = new RecordType("XACT");
        public static readonly RecordType XCNT_HEADER = new RecordType("XCNT");
        public static readonly RecordType XMRK_HEADER = new RecordType("XMRK");
        public static readonly RecordType ONAM_HEADER = new RecordType("ONAM");
        public static readonly RecordType XRGD_HEADER = new RecordType("XRGD");
        public static readonly RecordType XSCL_HEADER = new RecordType("XSCL");
        public static readonly RecordType XSOL_HEADER = new RecordType("XSOL");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = REFR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 23;
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class PlacedObjectSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedObjectSetterCommon Instance = new PlacedObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectInternal item)
        {
            ClearPartial();
            item.Base.FormKey = null;
            item.XPCIFluff = default;
            item.FULLFluff = default;
            item.TeleportDestination = null;
            item.Lock = null;
            item.Owner.FormKey = null;
            item.FactionRank = default;
            item.GlobalVariable.FormKey = null;
            item.EnableParent = null;
            item.Target.FormKey = null;
            item.SpeedTreeSeed = default;
            item.DistantLODData = null;
            item.Charge = default;
            item.Health = default;
            item.LevelModifier = default;
            item.Unknown.FormKey = null;
            item.ActionFlags = default;
            item.Count = default;
            item.MapMarker = null;
            item.OpenByDefault = default;
            item.RagdollData = default;
            item.Scale = default;
            item.ContainedSoul.FormKey = null;
            item.Position = default;
            item.Rotation = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IPlacedObjectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= PlacedObject.DATADataType.Has;
                    break;
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IPlacedObjectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    PlacedObjectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => PlacedObject_Registration.REFR_HEADER;
        protected static void FillBinaryStructs(
            IPlacedObjectInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Base.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.XPCIFluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FULLFluff = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FULLFluff);
                }
                case 0x4C455458: // XTEL
                {
                    item.TeleportDestination = Mutagen.Bethesda.Oblivion.TeleportDestination.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.TeleportDestination);
                }
                case 0x434F4C58: // XLOC
                {
                    item.Lock = Mutagen.Bethesda.Oblivion.LockInformation.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Lock);
                }
                case 0x4E574F58: // XOWN
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Owner.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.GlobalVariable.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.GlobalVariable);
                }
                case 0x50534558: // XESP
                {
                    item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.EnableParent);
                }
                case 0x47525458: // XTRG
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Target.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Target);
                }
                case 0x44455358: // XSED
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SpeedTreeSeed = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                }
                case 0x444F4C58: // XLOD
                {
                    item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.DistantLODData);
                }
                case 0x47484358: // XCHG
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Charge = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Charge);
                }
                case 0x544C4858: // XHLT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Health = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Health);
                }
                case 0x4D434C58: // XLCM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.LevelModifier = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.LevelModifier);
                }
                case 0x4D545258: // XRTM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Unknown.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Unknown);
                }
                case 0x54434158: // XACT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ActionFlags = EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ActionFlags);
                }
                case 0x544E4358: // XCNT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Count = frame.ReadInt32();
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Count);
                }
                case 0x4B524D58: // XMRK
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.MapMarker = Mutagen.Bethesda.Oblivion.MapMarker.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.MapMarker);
                }
                case 0x4D414E4F: // ONAM
                {
                    PlacedObjectBinaryCreateTranslation.FillBinaryOpenByDefaultCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.OpenByDefault);
                }
                case 0x44475258: // XRGD
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.RagdollData = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Scale = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Scale);
                }
                case 0x4C4F5358: // XSOL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ContainedSoul.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ContainedSoul);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = PlacedObject.DATADataType.Has;
                    }
                    item.Position = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    item.Rotation = Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Rotation);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IPlacedObjectInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class PlacedObjectCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedObjectCommon Instance = new PlacedObjectCommon();

        public PlacedObject.Mask<bool> GetEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObject.Mask<bool>(false);
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Base = object.Equals(item.Base, rhs.Base);
            ret.XPCIFluff = MemorySliceExt.Equal(item.XPCIFluff, rhs.XPCIFluff);
            ret.FULLFluff = MemorySliceExt.Equal(item.FULLFluff, rhs.FULLFluff);
            ret.TeleportDestination = EqualsMaskHelper.EqualsHelper(
                item.TeleportDestination,
                rhs.TeleportDestination,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Lock = EqualsMaskHelper.EqualsHelper(
                item.Lock,
                rhs.Lock,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Owner = object.Equals(item.Owner, rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = object.Equals(item.GlobalVariable, rhs.GlobalVariable);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Target = object.Equals(item.Target, rhs.Target);
            ret.SpeedTreeSeed = item.SpeedTreeSeed == rhs.SpeedTreeSeed;
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Charge = item.Charge.EqualsWithin(rhs.Charge);
            ret.Health = item.Health == rhs.Health;
            ret.LevelModifier = item.LevelModifier == rhs.LevelModifier;
            ret.Unknown = object.Equals(item.Unknown, rhs.Unknown);
            ret.ActionFlags = item.ActionFlags == rhs.ActionFlags;
            ret.Count = item.Count == rhs.Count;
            ret.MapMarker = EqualsMaskHelper.EqualsHelper(
                item.MapMarker,
                rhs.MapMarker,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OpenByDefault = item.OpenByDefault == rhs.OpenByDefault;
            ret.RagdollData = MemorySliceExt.Equal(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.ContainedSoul = object.Equals(item.ContainedSoul, rhs.ContainedSoul);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IPlacedObjectGetter item,
            FileGeneration fg,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"PlacedObject =>");
            }
            else
            {
                fg.AppendLine($"{name} (PlacedObject) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IPlacedObjectGetter item,
            FileGeneration fg,
            PlacedObject.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Base ?? true)
                && item.Base.TryGet(out var BaseItem))
            {
                fg.AppendItem(BaseItem, "Base");
            }
            if ((printMask?.XPCIFluff ?? true)
                && item.XPCIFluff.TryGet(out var XPCIFluffItem))
            {
                fg.AppendLine($"XPCIFluff => {SpanExt.ToHexString(XPCIFluffItem)}");
            }
            if ((printMask?.FULLFluff ?? true)
                && item.FULLFluff.TryGet(out var FULLFluffItem))
            {
                fg.AppendLine($"FULLFluff => {SpanExt.ToHexString(FULLFluffItem)}");
            }
            if ((printMask?.TeleportDestination?.Overall ?? true)
                && item.TeleportDestination.TryGet(out var TeleportDestinationItem))
            {
                TeleportDestinationItem?.ToString(fg, "TeleportDestination");
            }
            if ((printMask?.Lock?.Overall ?? true)
                && item.Lock.TryGet(out var LockItem))
            {
                LockItem?.ToString(fg, "Lock");
            }
            if ((printMask?.Owner ?? true)
                && item.Owner.TryGet(out var OwnerItem))
            {
                fg.AppendItem(OwnerItem, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank.TryGet(out var FactionRankItem))
            {
                fg.AppendItem(FactionRankItem, "FactionRank");
            }
            if ((printMask?.GlobalVariable ?? true)
                && item.GlobalVariable.TryGet(out var GlobalVariableItem))
            {
                fg.AppendItem(GlobalVariableItem, "GlobalVariable");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent.TryGet(out var EnableParentItem))
            {
                EnableParentItem?.ToString(fg, "EnableParent");
            }
            if ((printMask?.Target ?? true)
                && item.Target.TryGet(out var TargetItem))
            {
                fg.AppendItem(TargetItem, "Target");
            }
            if ((printMask?.SpeedTreeSeed ?? true)
                && item.SpeedTreeSeed.TryGet(out var SpeedTreeSeedItem))
            {
                fg.AppendItem(SpeedTreeSeedItem, "SpeedTreeSeed");
            }
            if ((printMask?.DistantLODData?.Overall ?? true)
                && item.DistantLODData.TryGet(out var DistantLODDataItem))
            {
                DistantLODDataItem?.ToString(fg, "DistantLODData");
            }
            if ((printMask?.Charge ?? true)
                && item.Charge.TryGet(out var ChargeItem))
            {
                fg.AppendItem(ChargeItem, "Charge");
            }
            if ((printMask?.Health ?? true)
                && item.Health.TryGet(out var HealthItem))
            {
                fg.AppendItem(HealthItem, "Health");
            }
            if ((printMask?.LevelModifier ?? true)
                && item.LevelModifier.TryGet(out var LevelModifierItem))
            {
                fg.AppendItem(LevelModifierItem, "LevelModifier");
            }
            if ((printMask?.Unknown ?? true)
                && item.Unknown.TryGet(out var UnknownItem))
            {
                fg.AppendItem(UnknownItem, "Unknown");
            }
            if ((printMask?.ActionFlags ?? true)
                && item.ActionFlags.TryGet(out var ActionFlagsItem))
            {
                fg.AppendItem(ActionFlagsItem, "ActionFlags");
            }
            if ((printMask?.Count ?? true)
                && item.Count.TryGet(out var CountItem))
            {
                fg.AppendItem(CountItem, "Count");
            }
            if ((printMask?.MapMarker?.Overall ?? true)
                && item.MapMarker.TryGet(out var MapMarkerItem))
            {
                MapMarkerItem?.ToString(fg, "MapMarker");
            }
            if (printMask?.OpenByDefault ?? true)
            {
                fg.AppendItem(item.OpenByDefault, "OpenByDefault");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData.TryGet(out var RagdollDataItem))
            {
                fg.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale.TryGet(out var ScaleItem))
            {
                fg.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.ContainedSoul ?? true)
                && item.ContainedSoul.TryGet(out var ContainedSoulItem))
            {
                fg.AppendItem(ContainedSoulItem, "ContainedSoul");
            }
            if (printMask?.Position ?? true)
            {
                fg.AppendItem(item.Position, "Position");
            }
            if (printMask?.Rotation ?? true)
            {
                fg.AppendItem(item.Rotation, "Rotation");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IPlacedObjectGetter item,
            PlacedObject.Mask<bool?> checkMask)
        {
            if (checkMask.Base.HasValue && checkMask.Base.Value != (item.Base.FormKey != null)) return false;
            if (checkMask.XPCIFluff.HasValue && checkMask.XPCIFluff.Value != (item.XPCIFluff != null)) return false;
            if (checkMask.FULLFluff.HasValue && checkMask.FULLFluff.Value != (item.FULLFluff != null)) return false;
            if (checkMask.TeleportDestination?.Overall.HasValue ?? false && checkMask.TeleportDestination.Overall.Value != (item.TeleportDestination != null)) return false;
            if (checkMask.TeleportDestination?.Specific != null && (item.TeleportDestination == null || !item.TeleportDestination.HasBeenSet(checkMask.TeleportDestination.Specific))) return false;
            if (checkMask.Lock?.Overall.HasValue ?? false && checkMask.Lock.Overall.Value != (item.Lock != null)) return false;
            if (checkMask.Lock?.Specific != null && (item.Lock == null || !item.Lock.HasBeenSet(checkMask.Lock.Specific))) return false;
            if (checkMask.Owner.HasValue && checkMask.Owner.Value != (item.Owner.FormKey != null)) return false;
            if (checkMask.FactionRank.HasValue && checkMask.FactionRank.Value != (item.FactionRank != null)) return false;
            if (checkMask.GlobalVariable.HasValue && checkMask.GlobalVariable.Value != (item.GlobalVariable.FormKey != null)) return false;
            if (checkMask.EnableParent?.Overall.HasValue ?? false && checkMask.EnableParent.Overall.Value != (item.EnableParent != null)) return false;
            if (checkMask.EnableParent?.Specific != null && (item.EnableParent == null || !item.EnableParent.HasBeenSet(checkMask.EnableParent.Specific))) return false;
            if (checkMask.Target.HasValue && checkMask.Target.Value != (item.Target.FormKey != null)) return false;
            if (checkMask.SpeedTreeSeed.HasValue && checkMask.SpeedTreeSeed.Value != (item.SpeedTreeSeed != null)) return false;
            if (checkMask.DistantLODData?.Overall.HasValue ?? false && checkMask.DistantLODData.Overall.Value != (item.DistantLODData != null)) return false;
            if (checkMask.DistantLODData?.Specific != null && (item.DistantLODData == null || !item.DistantLODData.HasBeenSet(checkMask.DistantLODData.Specific))) return false;
            if (checkMask.Charge.HasValue && checkMask.Charge.Value != (item.Charge != null)) return false;
            if (checkMask.Health.HasValue && checkMask.Health.Value != (item.Health != null)) return false;
            if (checkMask.LevelModifier.HasValue && checkMask.LevelModifier.Value != (item.LevelModifier != null)) return false;
            if (checkMask.Unknown.HasValue && checkMask.Unknown.Value != (item.Unknown.FormKey != null)) return false;
            if (checkMask.ActionFlags.HasValue && checkMask.ActionFlags.Value != (item.ActionFlags != null)) return false;
            if (checkMask.Count.HasValue && checkMask.Count.Value != (item.Count != null)) return false;
            if (checkMask.MapMarker?.Overall.HasValue ?? false && checkMask.MapMarker.Overall.Value != (item.MapMarker != null)) return false;
            if (checkMask.MapMarker?.Specific != null && (item.MapMarker == null || !item.MapMarker.HasBeenSet(checkMask.MapMarker.Specific))) return false;
            if (checkMask.RagdollData.HasValue && checkMask.RagdollData.Value != (item.RagdollData != null)) return false;
            if (checkMask.Scale.HasValue && checkMask.Scale.Value != (item.Scale != null)) return false;
            if (checkMask.ContainedSoul.HasValue && checkMask.ContainedSoul.Value != (item.ContainedSoul.FormKey != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IPlacedObjectGetter item,
            PlacedObject.Mask<bool> mask)
        {
            mask.Base = (item.Base.FormKey != null);
            mask.XPCIFluff = (item.XPCIFluff != null);
            mask.FULLFluff = (item.FULLFluff != null);
            var itemTeleportDestination = item.TeleportDestination;
            mask.TeleportDestination = new MaskItem<bool, TeleportDestination.Mask<bool>?>(itemTeleportDestination != null, itemTeleportDestination?.GetHasBeenSetMask());
            var itemLock = item.Lock;
            mask.Lock = new MaskItem<bool, LockInformation.Mask<bool>?>(itemLock != null, itemLock?.GetHasBeenSetMask());
            mask.Owner = (item.Owner.FormKey != null);
            mask.FactionRank = (item.FactionRank != null);
            mask.GlobalVariable = (item.GlobalVariable.FormKey != null);
            var itemEnableParent = item.EnableParent;
            mask.EnableParent = new MaskItem<bool, EnableParent.Mask<bool>?>(itemEnableParent != null, itemEnableParent?.GetHasBeenSetMask());
            mask.Target = (item.Target.FormKey != null);
            mask.SpeedTreeSeed = (item.SpeedTreeSeed != null);
            var itemDistantLODData = item.DistantLODData;
            mask.DistantLODData = new MaskItem<bool, DistantLODData.Mask<bool>?>(itemDistantLODData != null, itemDistantLODData?.GetHasBeenSetMask());
            mask.Charge = (item.Charge != null);
            mask.Health = (item.Health != null);
            mask.LevelModifier = (item.LevelModifier != null);
            mask.Unknown = (item.Unknown.FormKey != null);
            mask.ActionFlags = (item.ActionFlags != null);
            mask.Count = (item.Count != null);
            var itemMapMarker = item.MapMarker;
            mask.MapMarker = new MaskItem<bool, MapMarker.Mask<bool>?>(itemMapMarker != null, itemMapMarker?.GetHasBeenSetMask());
            mask.OpenByDefault = true;
            mask.RagdollData = (item.RagdollData != null);
            mask.Scale = (item.Scale != null);
            mask.ContainedSoul = (item.ContainedSoul.FormKey != null);
            mask.Position = true;
            mask.Rotation = true;
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static PlacedObject_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectGetter? lhs,
            IPlacedObjectGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!lhs.Base.Equals(rhs.Base)) return false;
            if (!MemorySliceExt.Equal(lhs.XPCIFluff, rhs.XPCIFluff)) return false;
            if (!MemorySliceExt.Equal(lhs.FULLFluff, rhs.FULLFluff)) return false;
            if (!object.Equals(lhs.TeleportDestination, rhs.TeleportDestination)) return false;
            if (!object.Equals(lhs.Lock, rhs.Lock)) return false;
            if (!lhs.Owner.Equals(rhs.Owner)) return false;
            if (lhs.FactionRank != rhs.FactionRank) return false;
            if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            if (!object.Equals(lhs.EnableParent, rhs.EnableParent)) return false;
            if (!lhs.Target.Equals(rhs.Target)) return false;
            if (lhs.SpeedTreeSeed != rhs.SpeedTreeSeed) return false;
            if (!object.Equals(lhs.DistantLODData, rhs.DistantLODData)) return false;
            if (!lhs.Charge.EqualsWithin(rhs.Charge)) return false;
            if (lhs.Health != rhs.Health) return false;
            if (lhs.LevelModifier != rhs.LevelModifier) return false;
            if (!lhs.Unknown.Equals(rhs.Unknown)) return false;
            if (lhs.ActionFlags != rhs.ActionFlags) return false;
            if (lhs.Count != rhs.Count) return false;
            if (!object.Equals(lhs.MapMarker, rhs.MapMarker)) return false;
            if (lhs.OpenByDefault != rhs.OpenByDefault) return false;
            if (!MemorySliceExt.Equal(lhs.RagdollData, rhs.RagdollData)) return false;
            if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            if (!lhs.ContainedSoul.Equals(rhs.ContainedSoul)) return false;
            if (!lhs.Position.Equals(rhs.Position)) return false;
            if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter);
        }
        
        public virtual int GetHashCode(IPlacedObjectGetter item)
        {
            int ret = 0;
            if (item.Base.TryGet(out var Baseitem))
            {
                ret = HashHelper.GetHashCode(Baseitem).CombineHashCode(ret);
            }
            if (item.XPCIFluff.TryGet(out var XPCIFluffItem))
            {
                ret = HashHelper.GetHashCode(XPCIFluffItem).CombineHashCode(ret);
            }
            if (item.FULLFluff.TryGet(out var FULLFluffItem))
            {
                ret = HashHelper.GetHashCode(FULLFluffItem).CombineHashCode(ret);
            }
            if (item.TeleportDestination.TryGet(out var TeleportDestinationitem))
            {
                ret = HashHelper.GetHashCode(TeleportDestinationitem).CombineHashCode(ret);
            }
            if (item.Lock.TryGet(out var Lockitem))
            {
                ret = HashHelper.GetHashCode(Lockitem).CombineHashCode(ret);
            }
            if (item.Owner.TryGet(out var Owneritem))
            {
                ret = HashHelper.GetHashCode(Owneritem).CombineHashCode(ret);
            }
            if (item.FactionRank.TryGet(out var FactionRankitem))
            {
                ret = HashHelper.GetHashCode(FactionRankitem).CombineHashCode(ret);
            }
            if (item.GlobalVariable.TryGet(out var GlobalVariableitem))
            {
                ret = HashHelper.GetHashCode(GlobalVariableitem).CombineHashCode(ret);
            }
            if (item.EnableParent.TryGet(out var EnableParentitem))
            {
                ret = HashHelper.GetHashCode(EnableParentitem).CombineHashCode(ret);
            }
            if (item.Target.TryGet(out var Targetitem))
            {
                ret = HashHelper.GetHashCode(Targetitem).CombineHashCode(ret);
            }
            if (item.SpeedTreeSeed.TryGet(out var SpeedTreeSeeditem))
            {
                ret = HashHelper.GetHashCode(SpeedTreeSeeditem).CombineHashCode(ret);
            }
            if (item.DistantLODData.TryGet(out var DistantLODDataitem))
            {
                ret = HashHelper.GetHashCode(DistantLODDataitem).CombineHashCode(ret);
            }
            if (item.Charge.TryGet(out var Chargeitem))
            {
                ret = HashHelper.GetHashCode(Chargeitem).CombineHashCode(ret);
            }
            if (item.Health.TryGet(out var Healthitem))
            {
                ret = HashHelper.GetHashCode(Healthitem).CombineHashCode(ret);
            }
            if (item.LevelModifier.TryGet(out var LevelModifieritem))
            {
                ret = HashHelper.GetHashCode(LevelModifieritem).CombineHashCode(ret);
            }
            if (item.Unknown.TryGet(out var Unknownitem))
            {
                ret = HashHelper.GetHashCode(Unknownitem).CombineHashCode(ret);
            }
            if (item.ActionFlags.TryGet(out var ActionFlagsitem))
            {
                ret = HashHelper.GetHashCode(ActionFlagsitem).CombineHashCode(ret);
            }
            if (item.Count.TryGet(out var Countitem))
            {
                ret = HashHelper.GetHashCode(Countitem).CombineHashCode(ret);
            }
            if (item.MapMarker.TryGet(out var MapMarkeritem))
            {
                ret = HashHelper.GetHashCode(MapMarkeritem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.OpenByDefault).CombineHashCode(ret);
            if (item.RagdollData.TryGet(out var RagdollDataItem))
            {
                ret = HashHelper.GetHashCode(RagdollDataItem).CombineHashCode(ret);
            }
            if (item.Scale.TryGet(out var Scaleitem))
            {
                ret = HashHelper.GetHashCode(Scaleitem).CombineHashCode(ret);
            }
            if (item.ContainedSoul.TryGet(out var ContainedSoulitem))
            {
                ret = HashHelper.GetHashCode(ContainedSoulitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Position).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Rotation).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IPlacedObjectGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Base;
            if (obj.TeleportDestination != null)
            {
                foreach (var item in obj.TeleportDestination.Links)
                {
                    yield return item;
                }
            }
            if (obj.Lock != null)
            {
                foreach (var item in obj.Lock.Links)
                {
                    yield return item;
                }
            }
            yield return obj.Owner;
            yield return obj.GlobalVariable;
            if (obj.EnableParent != null)
            {
                foreach (var item in obj.EnableParent.Links)
                {
                    yield return item;
                }
            }
            yield return obj.Target;
            yield return obj.Unknown;
            yield return obj.ContainedSoul;
            yield break;
        }
        
        partial void PostDuplicate(PlacedObject obj, PlacedObject rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new PlacedObject(getNextFormKey());
            ret.DeepCopyIn((PlacedObject)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (PlacedObject)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class PlacedObjectSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedObjectSetterTranslationCommon Instance = new PlacedObjectSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IPlacedObjectInternal item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                item.Base.FormKey = rhs.Base.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XPCIFluff) ?? true))
            {
                if(rhs.XPCIFluff.TryGet(out var XPCIFluffrhs))
                {
                    item.XPCIFluff = XPCIFluffrhs.ToArray();
                }
                else
                {
                    item.XPCIFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FULLFluff) ?? true))
            {
                if(rhs.FULLFluff.TryGet(out var FULLFluffrhs))
                {
                    item.FULLFluff = FULLFluffrhs.ToArray();
                }
                else
                {
                    item.FULLFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                try
                {
                    if(rhs.TeleportDestination.TryGet(out var rhsTeleportDestination))
                    {
                        item.TeleportDestination = rhsTeleportDestination.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
                    }
                    else
                    {
                        item.TeleportDestination = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                try
                {
                    if(rhs.Lock.TryGet(out var rhsLock))
                    {
                        item.Lock = rhsLock.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
                    }
                    else
                    {
                        item.Lock = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                item.Owner.FormKey = rhs.Owner.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable.FormKey = rhs.GlobalVariable.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent.TryGet(out var rhsEnableParent))
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Target) ?? true))
            {
                item.Target.FormKey = rhs.Target.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpeedTreeSeed) ?? true))
            {
                item.SpeedTreeSeed = rhs.SpeedTreeSeed;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLODData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                try
                {
                    if(rhs.DistantLODData.TryGet(out var rhsDistantLODData))
                    {
                        item.DistantLODData = rhsDistantLODData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData));
                    }
                    else
                    {
                        item.DistantLODData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                item.Charge = rhs.Charge;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                item.LevelModifier = rhs.LevelModifier;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                item.Unknown.FormKey = rhs.Unknown.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActionFlags) ?? true))
            {
                item.ActionFlags = rhs.ActionFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                try
                {
                    if(rhs.MapMarker.TryGet(out var rhsMapMarker))
                    {
                        item.MapMarker = rhsMapMarker.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
                    }
                    else
                    {
                        item.MapMarker = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                item.OpenByDefault = rhs.OpenByDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData.TryGet(out var RagdollDatarhs))
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ContainedSoul) ?? true))
            {
                item.ContainedSoul.FormKey = rhs.ContainedSoul.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedObjectXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static PlacedObjectXmlWriteTranslation Instance = new PlacedObjectXmlWriteTranslation();

        public static void WriteToNodeXml(
            IPlacedObjectGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Base.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Base),
                    item: item.Base.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Base,
                    errorMask: errorMask);
            }
            if ((item.XPCIFluff != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XPCIFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.XPCIFluff),
                    item: item.XPCIFluff.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.XPCIFluff,
                    errorMask: errorMask);
            }
            if ((item.FULLFluff != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FULLFluff) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FULLFluff),
                    item: item.FULLFluff.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.FULLFluff,
                    errorMask: errorMask);
            }
            if ((item.TeleportDestination != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                if (item.TeleportDestination.TryGet(out var TeleportDestinationItem))
                {
                    ((TeleportDestinationXmlWriteTranslation)((IXmlItem)TeleportDestinationItem).XmlWriteTranslator).Write(
                        item: TeleportDestinationItem,
                        node: node,
                        name: nameof(item.TeleportDestination),
                        fieldIndex: (int)PlacedObject_FieldIndex.TeleportDestination,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
                }
            }
            if ((item.Lock != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                if (item.Lock.TryGet(out var LockItem))
                {
                    ((LockInformationXmlWriteTranslation)((IXmlItem)LockItem).XmlWriteTranslator).Write(
                        item: LockItem,
                        node: node,
                        name: nameof(item.Lock),
                        fieldIndex: (int)PlacedObject_FieldIndex.Lock,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
                }
            }
            if ((item.Owner.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Owner),
                    item: item.Owner.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Owner,
                    errorMask: errorMask);
            }
            if ((item.FactionRank != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FactionRank),
                    item: item.FactionRank.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.FactionRank,
                    errorMask: errorMask);
            }
            if ((item.GlobalVariable.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.GlobalVariable) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.GlobalVariable),
                    item: item.GlobalVariable.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.GlobalVariable,
                    errorMask: errorMask);
            }
            if ((item.EnableParent != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                if (item.EnableParent.TryGet(out var EnableParentItem))
                {
                    ((EnableParentXmlWriteTranslation)((IXmlItem)EnableParentItem).XmlWriteTranslator).Write(
                        item: EnableParentItem,
                        node: node,
                        name: nameof(item.EnableParent),
                        fieldIndex: (int)PlacedObject_FieldIndex.EnableParent,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
                }
            }
            if ((item.Target.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Target) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Target),
                    item: item.Target.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Target,
                    errorMask: errorMask);
            }
            if ((item.SpeedTreeSeed != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpeedTreeSeed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedTreeSeed),
                    item: item.SpeedTreeSeed.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.SpeedTreeSeed,
                    errorMask: errorMask);
            }
            if ((item.DistantLODData != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLODData) ?? true))
            {
                if (item.DistantLODData.TryGet(out var DistantLODDataItem))
                {
                    ((DistantLODDataXmlWriteTranslation)((IXmlItem)DistantLODDataItem).XmlWriteTranslator).Write(
                        item: DistantLODDataItem,
                        node: node,
                        name: nameof(item.DistantLODData),
                        fieldIndex: (int)PlacedObject_FieldIndex.DistantLODData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData));
                }
            }
            if ((item.Charge != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Charge),
                    item: item.Charge.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.Charge,
                    errorMask: errorMask);
            }
            if ((item.Health != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Health) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Health),
                    item: item.Health.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.Health,
                    errorMask: errorMask);
            }
            if ((item.LevelModifier != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LevelModifier),
                    item: item.LevelModifier.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.LevelModifier,
                    errorMask: errorMask);
            }
            if ((item.Unknown.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unknown),
                    item: item.Unknown.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.Unknown,
                    errorMask: errorMask);
            }
            if ((item.ActionFlags != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActionFlags) ?? true))
            {
                EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.ActionFlags),
                    item: item.ActionFlags,
                    fieldIndex: (int)PlacedObject_FieldIndex.ActionFlags,
                    errorMask: errorMask);
            }
            if ((item.Count != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Count) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Count),
                    item: item.Count.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.Count,
                    errorMask: errorMask);
            }
            if ((item.MapMarker != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                if (item.MapMarker.TryGet(out var MapMarkerItem))
                {
                    ((MapMarkerXmlWriteTranslation)((IXmlItem)MapMarkerItem).XmlWriteTranslator).Write(
                        item: MapMarkerItem,
                        node: node,
                        name: nameof(item.MapMarker),
                        fieldIndex: (int)PlacedObject_FieldIndex.MapMarker,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OpenByDefault),
                    item: item.OpenByDefault,
                    fieldIndex: (int)PlacedObject_FieldIndex.OpenByDefault,
                    errorMask: errorMask);
            }
            if ((item.RagdollData != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.RagdollData),
                    item: item.RagdollData.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.RagdollData,
                    errorMask: errorMask);
            }
            if ((item.Scale != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Scale),
                    item: item.Scale.Value,
                    fieldIndex: (int)PlacedObject_FieldIndex.Scale,
                    errorMask: errorMask);
            }
            if ((item.ContainedSoul.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ContainedSoul) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ContainedSoul),
                    item: item.ContainedSoul.FormKey,
                    fieldIndex: (int)PlacedObject_FieldIndex.ContainedSoul,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(PlacedObject.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Position) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Position),
                        item: item.Position,
                        fieldIndex: (int)PlacedObject_FieldIndex.Position,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Rotation) ?? true))
                {
                    P3FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Rotation),
                        item: item.Rotation,
                        fieldIndex: (int)PlacedObject_FieldIndex.Rotation,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<PlacedObject.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)PlacedObject_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.PlacedObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.PlacedObject");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class PlacedObjectXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static PlacedObjectXmlCreateTranslation Instance = new PlacedObjectXmlCreateTranslation();

        public static void FillPublicXml(
            IPlacedObjectInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    PlacedObjectXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IPlacedObjectInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Base":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Base);
                    try
                    {
                        item.Base.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "XPCIFluff":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.XPCIFluff);
                    try
                    {
                        item.XPCIFluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FULLFluff":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.FULLFluff);
                    try
                    {
                        item.FULLFluff = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TeleportDestination":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                    try
                    {
                        item.TeleportDestination = LoquiXmlTranslation<TeleportDestination>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Lock":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                    try
                    {
                        item.Lock = LoquiXmlTranslation<LockInformation>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Owner":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Owner);
                    try
                    {
                        item.Owner.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FactionRank":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.FactionRank);
                    try
                    {
                        item.FactionRank = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GlobalVariable":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.GlobalVariable);
                    try
                    {
                        item.GlobalVariable.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EnableParent":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                    try
                    {
                        item.EnableParent = LoquiXmlTranslation<EnableParent>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Target":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Target);
                    try
                    {
                        item.Target.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeedTreeSeed":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                    try
                    {
                        item.SpeedTreeSeed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DistantLODData":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                    try
                    {
                        item.DistantLODData = LoquiXmlTranslation<DistantLODData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Charge":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Charge);
                    try
                    {
                        item.Charge = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Health":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Health);
                    try
                    {
                        item.Health = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LevelModifier":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.LevelModifier);
                    try
                    {
                        item.LevelModifier = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unknown":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Unknown);
                    try
                    {
                        item.Unknown.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ActionFlags":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActionFlags);
                    try
                    {
                        item.ActionFlags = EnumXmlTranslation<PlacedObject.ActionFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Count":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Count);
                    try
                    {
                        item.Count = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapMarker":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                    try
                    {
                        item.MapMarker = LoquiXmlTranslation<MapMarker>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OpenByDefault":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.OpenByDefault);
                    try
                    {
                        item.OpenByDefault = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RagdollData":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.RagdollData);
                    try
                    {
                        item.RagdollData = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Scale":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Scale);
                    try
                    {
                        item.Scale = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ContainedSoul":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.ContainedSoul);
                    try
                    {
                        item.ContainedSoul.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Position":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Position);
                    try
                    {
                        item.Position = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= PlacedObject.DATADataType.Has;
                    break;
                case "Rotation":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.Rotation);
                    try
                    {
                        item.Rotation = P3FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)PlacedObject_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<PlacedObject.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class PlacedObjectXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IPlacedObjectGetter item,
            XElement node,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IPlacedObjectGetter item,
            string path,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IPlacedObjectGetter item,
            Stream stream,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedObjectBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static PlacedObjectBinaryWriteTranslation Instance = new PlacedObjectBinaryWriteTranslation();

        static partial void WriteBinaryOpenByDefaultCustom(
            MutagenWriter writer,
            IPlacedObjectGetter item);

        public static void WriteBinaryOpenByDefault(
            MutagenWriter writer,
            IPlacedObjectGetter item)
        {
            WriteBinaryOpenByDefaultCustom(
                writer: writer,
                item: item);
        }

        public static void WriteEmbedded(
            IPlacedObjectGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IPlacedObjectGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.NAME_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.XPCIFluff,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XPCI_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FULLFluff,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.FULL_HEADER));
            if (item.TeleportDestination.TryGet(out var TeleportDestinationItem))
            {
                ((TeleportDestinationBinaryWriteTranslation)((IBinaryItem)TeleportDestinationItem).BinaryWriteTranslator).Write(
                    item: TeleportDestinationItem,
                    writer: writer);
            }
            if (item.Lock.TryGet(out var LockItem))
            {
                ((LockInformationBinaryWriteTranslation)((IBinaryItem)LockItem).BinaryWriteTranslator).Write(
                    item: LockItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XOWN_HEADER));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRNK_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XGLB_HEADER));
            if (item.EnableParent.TryGet(out var EnableParentItem))
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Target,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XTRG_HEADER));
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpeedTreeSeed,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSED_HEADER));
            if (item.DistantLODData.TryGet(out var DistantLODDataItem))
            {
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)DistantLODDataItem).BinaryWriteTranslator).Write(
                    item: DistantLODDataItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Charge,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCHG_HEADER));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Health,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XHLT_HEADER));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LevelModifier,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XLCM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Unknown,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRTM_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<PlacedObject.ActionFlag>.Instance.WriteNullable(
                writer,
                item.ActionFlags,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XACT_HEADER));
            Mutagen.Bethesda.Binary.Int32BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Count,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XCNT_HEADER));
            if (item.MapMarker.TryGet(out var MapMarkerItem))
            {
                using (HeaderExport.ExportHeader(writer, PlacedObject_Registration.XMRK_HEADER, ObjectType.Subrecord)) { }
                ((MapMarkerBinaryWriteTranslation)((IBinaryItem)MapMarkerItem).BinaryWriteTranslator).Write(
                    item: MapMarkerItem,
                    writer: writer);
            }
            PlacedObjectBinaryWriteTranslation.WriteBinaryOpenByDefault(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XRGD_HEADER));
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSCL_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ContainedSoul,
                header: recordTypeConverter.ConvertToCustom(PlacedObject_Registration.XSOL_HEADER));
            if (item.DATADataTypeState.HasFlag(PlacedObject.DATADataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(PlacedObject_Registration.DATA_HEADER)))
                {
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Position);
                    Mutagen.Bethesda.Binary.P3FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Rotation);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: PlacedObject_Registration.REFR_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class PlacedObjectBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static PlacedObjectBinaryCreateTranslation Instance = new PlacedObjectBinaryCreateTranslation();

        static partial void FillBinaryOpenByDefaultCustom(
            MutagenFrame frame,
            IPlacedObjectInternal item);

        public static void FillBinaryOpenByDefaultCustomPublic(
            MutagenFrame frame,
            IPlacedObjectInternal item)
        {
            FillBinaryOpenByDefaultCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class PlacedObjectBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPlacedObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static PlacedObject_Registration Registration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IPlacedObjectGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => PlacedObjectCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => PlacedObjectXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((PlacedObjectXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Base
        private int? _BaseLocation;
        public bool Base_IsSet => _BaseLocation.HasValue;
        public IFormLinkNullableGetter<IOblivionMajorRecordGetter> Base => _BaseLocation.HasValue ? new FormLinkNullable<IOblivionMajorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _BaseLocation.Value, _package.Meta)))) : FormLinkNullable<IOblivionMajorRecordGetter>.Empty;
        #endregion
        #region XPCIFluff
        private int? _XPCIFluffLocation;
        public ReadOnlyMemorySlice<Byte>? XPCIFluff => _XPCIFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _XPCIFluffLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FULLFluff
        private int? _FULLFluffLocation;
        public ReadOnlyMemorySlice<Byte>? FULLFluff => _FULLFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _FULLFluffLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region TeleportDestination
        private RangeInt32? _TeleportDestinationLocation;
        private bool _TeleportDestination_IsSet => _TeleportDestinationLocation.HasValue;
        public ITeleportDestinationGetter? TeleportDestination => _TeleportDestination_IsSet ? TeleportDestinationBinaryOverlay.TeleportDestinationFactory(new BinaryMemoryReadStream(_data.Slice(_TeleportDestinationLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool TeleportDestination_IsSet => _TeleportDestinationLocation.HasValue;
        #endregion
        #region Lock
        private RangeInt32? _LockLocation;
        private bool _Lock_IsSet => _LockLocation.HasValue;
        public ILockInformationGetter? Lock => _Lock_IsSet ? LockInformationBinaryOverlay.LockInformationFactory(new BinaryMemoryReadStream(_data.Slice(_LockLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Lock_IsSet => _LockLocation.HasValue;
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public bool Owner_IsSet => _OwnerLocation.HasValue;
        public IFormLinkNullableGetter<IOwner> Owner => _OwnerLocation.HasValue ? new FormLinkNullable<IOwner>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _OwnerLocation.Value, _package.Meta)))) : FormLinkNullable<IOwner>.Empty;
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _FactionRankLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public bool GlobalVariable_IsSet => _GlobalVariableLocation.HasValue;
        public IFormLinkNullableGetter<IGlobalGetter> GlobalVariable => _GlobalVariableLocation.HasValue ? new FormLinkNullable<IGlobalGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _GlobalVariableLocation.Value, _package.Meta)))) : FormLinkNullable<IGlobalGetter>.Empty;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        private bool _EnableParent_IsSet => _EnableParentLocation.HasValue;
        public IEnableParentGetter? EnableParent => _EnableParent_IsSet ? EnableParentBinaryOverlay.EnableParentFactory(new BinaryMemoryReadStream(_data.Slice(_EnableParentLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool EnableParent_IsSet => _EnableParentLocation.HasValue;
        #endregion
        #region Target
        private int? _TargetLocation;
        public bool Target_IsSet => _TargetLocation.HasValue;
        public IFormLinkNullableGetter<IPlacedGetter> Target => _TargetLocation.HasValue ? new FormLinkNullable<IPlacedGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _TargetLocation.Value, _package.Meta)))) : FormLinkNullable<IPlacedGetter>.Empty;
        #endregion
        #region SpeedTreeSeed
        private int? _SpeedTreeSeedLocation;
        public Byte? SpeedTreeSeed => _SpeedTreeSeedLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _SpeedTreeSeedLocation.Value, _package.Meta)[0] : default(Byte?);
        #endregion
        #region DistantLODData
        private RangeInt32? _DistantLODDataLocation;
        private bool _DistantLODData_IsSet => _DistantLODDataLocation.HasValue;
        public IDistantLODDataGetter? DistantLODData => _DistantLODData_IsSet ? DistantLODDataBinaryOverlay.DistantLODDataFactory(new BinaryMemoryReadStream(_data.Slice(_DistantLODDataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool DistantLODData_IsSet => _DistantLODDataLocation.HasValue;
        #endregion
        #region Charge
        private int? _ChargeLocation;
        public Single? Charge => _ChargeLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _ChargeLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region Health
        private int? _HealthLocation;
        public Int32? Health => _HealthLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _HealthLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region LevelModifier
        private int? _LevelModifierLocation;
        public Int32? LevelModifier => _LevelModifierLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _LevelModifierLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region Unknown
        private int? _UnknownLocation;
        public bool Unknown_IsSet => _UnknownLocation.HasValue;
        public IFormLinkNullableGetter<IOblivionMajorRecordGetter> Unknown => _UnknownLocation.HasValue ? new FormLinkNullable<IOblivionMajorRecordGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _UnknownLocation.Value, _package.Meta)))) : FormLinkNullable<IOblivionMajorRecordGetter>.Empty;
        #endregion
        #region ActionFlags
        private int? _ActionFlagsLocation;
        private bool ActionFlags_IsSet => _ActionFlagsLocation.HasValue;
        public PlacedObject.ActionFlag? ActionFlags => ActionFlags_IsSet ? (PlacedObject.ActionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ActionFlagsLocation!.Value, _package.Meta)) : default(PlacedObject.ActionFlag?);
        #endregion
        #region Count
        private int? _CountLocation;
        public Int32? Count => _CountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _CountLocation.Value, _package.Meta)) : default(Int32?);
        #endregion
        #region MapMarker
        public IMapMarkerGetter? MapMarker { get; private set; }
        public bool MapMarker_IsSet => MapMarker != null;
        #endregion
        #region OpenByDefault
        partial void OpenByDefaultCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public Boolean OpenByDefault => GetOpenByDefaultCustom();
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _RagdollDataLocation.Value, _package.Meta).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? SpanExt.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_data, _ScaleLocation.Value, _package.Meta)) : default(Single?);
        #endregion
        #region ContainedSoul
        private int? _ContainedSoulLocation;
        public bool ContainedSoul_IsSet => _ContainedSoulLocation.HasValue;
        public IFormLinkNullableGetter<ISoulGemGetter> ContainedSoul => _ContainedSoulLocation.HasValue ? new FormLinkNullable<ISoulGemGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ContainedSoulLocation.Value, _package.Meta)))) : FormLinkNullable<ISoulGemGetter>.Empty;
        #endregion
        private int? _DATALocation;
        public PlacedObject.DATADataType DATADataTypeState { get; private set; }
        #region Position
        private int _PositionLocation => _DATALocation!.Value + 0x0;
        private bool _Position_IsSet => _DATALocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation.Read(_data.Span.Slice(_PositionLocation, 12)) : default;
        #endregion
        #region Rotation
        private int _RotationLocation => _DATALocation!.Value + 0xC;
        private bool _Rotation_IsSet => _DATALocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation.Read(_data.Span.Slice(_RotationLocation, 12)) : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected PlacedObjectBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static PlacedObjectBinaryOverlay PlacedObjectFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new PlacedObjectBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x454D414E: // NAME
                {
                    _BaseLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Base);
                }
                case 0x49435058: // XPCI
                {
                    _XPCIFluffLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.XPCIFluff);
                }
                case 0x4C4C5546: // FULL
                {
                    _FULLFluffLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FULLFluff);
                }
                case 0x4C455458: // XTEL
                {
                    _TeleportDestinationLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.TeleportDestination);
                }
                case 0x434F4C58: // XLOC
                {
                    _LockLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Lock);
                }
                case 0x4E574F58: // XOWN
                {
                    _OwnerLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Owner);
                }
                case 0x4B4E5258: // XRNK
                {
                    _FactionRankLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.FactionRank);
                }
                case 0x424C4758: // XGLB
                {
                    _GlobalVariableLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.GlobalVariable);
                }
                case 0x50534558: // XESP
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.EnableParent);
                }
                case 0x47525458: // XTRG
                {
                    _TargetLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Target);
                }
                case 0x44455358: // XSED
                {
                    _SpeedTreeSeedLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.SpeedTreeSeed);
                }
                case 0x444F4C58: // XLOD
                {
                    _DistantLODDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.DistantLODData);
                }
                case 0x47484358: // XCHG
                {
                    _ChargeLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Charge);
                }
                case 0x544C4858: // XHLT
                {
                    _HealthLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Health);
                }
                case 0x4D434C58: // XLCM
                {
                    _LevelModifierLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.LevelModifier);
                }
                case 0x4D545258: // XRTM
                {
                    _UnknownLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Unknown);
                }
                case 0x54434158: // XACT
                {
                    _ActionFlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ActionFlags);
                }
                case 0x544E4358: // XCNT
                {
                    _CountLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Count);
                }
                case 0x4B524D58: // XMRK
                {
                    stream.Position += _package.Meta.SubConstants.HeaderLength; // Skip marker
                    this.MapMarker = MapMarkerBinaryOverlay.MapMarkerFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.MapMarker);
                }
                case 0x4D414E4F: // ONAM
                {
                    OpenByDefaultCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.OpenByDefault);
                }
                case 0x44475258: // XRGD
                {
                    _RagdollDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.RagdollData);
                }
                case 0x4C435358: // XSCL
                {
                    _ScaleLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Scale);
                }
                case 0x4C4F5358: // XSOL
                {
                    _ContainedSoulLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.ContainedSoul);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = PlacedObject.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)PlacedObject_FieldIndex.Rotation);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

