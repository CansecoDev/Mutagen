/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceData :
        IRaceData,
        ILoquiObjectSetter<RaceData>,
        IEquatable<RaceData>,
        IEqualsMask
    {
        #region Ctor
        public RaceData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SkillBoost0
        public SkillBoost SkillBoost0 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost0 => SkillBoost0;
        #endregion
        #region SkillBoost1
        public SkillBoost SkillBoost1 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost1 => SkillBoost1;
        #endregion
        #region SkillBoost2
        public SkillBoost SkillBoost2 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost2 => SkillBoost2;
        #endregion
        #region SkillBoost3
        public SkillBoost SkillBoost3 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost3 => SkillBoost3;
        #endregion
        #region SkillBoost4
        public SkillBoost SkillBoost4 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost4 => SkillBoost4;
        #endregion
        #region SkillBoost5
        public SkillBoost SkillBoost5 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost5 => SkillBoost5;
        #endregion
        #region SkillBoost6
        public SkillBoost SkillBoost6 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceDataGetter.SkillBoost6 => SkillBoost6;
        #endregion
        #region Unused
        public Int32 Unused { get; set; } = default;
        #endregion
        #region Height
        public GenderedItem<Single> Height { get; set; } = new GenderedItem<Single>(default, default);
        IGenderedItemGetter<Single> IRaceDataGetter.Height => this.Height;
        #endregion
        #region Weight
        public GenderedItem<Single> Weight { get; set; } = new GenderedItem<Single>(default, default);
        IGenderedItemGetter<Single> IRaceDataGetter.Weight => this.Weight;
        #endregion
        #region Flags
        public Race.Flag Flags { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRaceDataGetter rhs)) return false;
            return ((RaceDataCommon)((IRaceDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RaceData obj)
        {
            return ((RaceDataCommon)((IRaceDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceDataCommon)((IRaceDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RaceDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceData CreateFromXml(
            XElement node,
            RaceData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceData CreateFromXml(
            XElement node,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new RaceData();
            ((RaceDataSetterCommon)((IRaceDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RaceData CreateFromXml(
            string path,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            string path,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RaceData CreateFromXml(
            Stream stream,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            Stream stream,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SkillBoost0 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost1 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost2 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost3 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost4 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost5 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost6 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.Unused = initialValue;
                this.Height = new GenderedItem<TItem>(initialValue, initialValue);
                this.Weight = new GenderedItem<TItem>(initialValue, initialValue);
                this.Flags = initialValue;
            }

            public Mask(
                TItem SkillBoost0,
                TItem SkillBoost1,
                TItem SkillBoost2,
                TItem SkillBoost3,
                TItem SkillBoost4,
                TItem SkillBoost5,
                TItem SkillBoost6,
                TItem Unused,
                TItem Height,
                TItem Weight,
                TItem Flags)
            {
                this.SkillBoost0 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost0, new SkillBoost.Mask<TItem>(SkillBoost0));
                this.SkillBoost1 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost1, new SkillBoost.Mask<TItem>(SkillBoost1));
                this.SkillBoost2 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost2, new SkillBoost.Mask<TItem>(SkillBoost2));
                this.SkillBoost3 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost3, new SkillBoost.Mask<TItem>(SkillBoost3));
                this.SkillBoost4 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost4, new SkillBoost.Mask<TItem>(SkillBoost4));
                this.SkillBoost5 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost5, new SkillBoost.Mask<TItem>(SkillBoost5));
                this.SkillBoost6 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost6, new SkillBoost.Mask<TItem>(SkillBoost6));
                this.Unused = Unused;
                this.Height = new GenderedItem<TItem>(Height, Height);
                this.Weight = new GenderedItem<TItem>(Weight, Weight);
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost0 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost1 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost2 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost3 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost4 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost5 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost6 { get; set; }
            public TItem Unused;
            public GenderedItem<TItem> Height;
            public GenderedItem<TItem> Weight;
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SkillBoost0, rhs.SkillBoost0)) return false;
                if (!object.Equals(this.SkillBoost1, rhs.SkillBoost1)) return false;
                if (!object.Equals(this.SkillBoost2, rhs.SkillBoost2)) return false;
                if (!object.Equals(this.SkillBoost3, rhs.SkillBoost3)) return false;
                if (!object.Equals(this.SkillBoost4, rhs.SkillBoost4)) return false;
                if (!object.Equals(this.SkillBoost5, rhs.SkillBoost5)) return false;
                if (!object.Equals(this.SkillBoost6, rhs.SkillBoost6)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SkillBoost0);
                hash.Add(this.SkillBoost1);
                hash.Add(this.SkillBoost2);
                hash.Add(this.SkillBoost3);
                hash.Add(this.SkillBoost4);
                hash.Add(this.SkillBoost5);
                hash.Add(this.SkillBoost6);
                hash.Add(this.Unused);
                hash.Add(this.Height);
                hash.Add(this.Weight);
                hash.Add(this.Flags);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (SkillBoost0 != null)
                {
                    if (!eval(this.SkillBoost0.Overall)) return false;
                    if (this.SkillBoost0.Specific != null && !this.SkillBoost0.Specific.All(eval)) return false;
                }
                if (SkillBoost1 != null)
                {
                    if (!eval(this.SkillBoost1.Overall)) return false;
                    if (this.SkillBoost1.Specific != null && !this.SkillBoost1.Specific.All(eval)) return false;
                }
                if (SkillBoost2 != null)
                {
                    if (!eval(this.SkillBoost2.Overall)) return false;
                    if (this.SkillBoost2.Specific != null && !this.SkillBoost2.Specific.All(eval)) return false;
                }
                if (SkillBoost3 != null)
                {
                    if (!eval(this.SkillBoost3.Overall)) return false;
                    if (this.SkillBoost3.Specific != null && !this.SkillBoost3.Specific.All(eval)) return false;
                }
                if (SkillBoost4 != null)
                {
                    if (!eval(this.SkillBoost4.Overall)) return false;
                    if (this.SkillBoost4.Specific != null && !this.SkillBoost4.Specific.All(eval)) return false;
                }
                if (SkillBoost5 != null)
                {
                    if (!eval(this.SkillBoost5.Overall)) return false;
                    if (this.SkillBoost5.Specific != null && !this.SkillBoost5.Specific.All(eval)) return false;
                }
                if (SkillBoost6 != null)
                {
                    if (!eval(this.SkillBoost6.Overall)) return false;
                    if (this.SkillBoost6.Specific != null && !this.SkillBoost6.Specific.All(eval)) return false;
                }
                if (!eval(this.Unused)) return false;
                if (!eval(this.Height.Male) || !eval(this.Height.Female)) return false;
                if (!eval(this.Weight.Male) || !eval(this.Weight.Female)) return false;
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (SkillBoost0 != null)
                {
                    if (eval(this.SkillBoost0.Overall)) return true;
                    if (this.SkillBoost0.Specific != null && this.SkillBoost0.Specific.Any(eval)) return true;
                }
                if (SkillBoost1 != null)
                {
                    if (eval(this.SkillBoost1.Overall)) return true;
                    if (this.SkillBoost1.Specific != null && this.SkillBoost1.Specific.Any(eval)) return true;
                }
                if (SkillBoost2 != null)
                {
                    if (eval(this.SkillBoost2.Overall)) return true;
                    if (this.SkillBoost2.Specific != null && this.SkillBoost2.Specific.Any(eval)) return true;
                }
                if (SkillBoost3 != null)
                {
                    if (eval(this.SkillBoost3.Overall)) return true;
                    if (this.SkillBoost3.Specific != null && this.SkillBoost3.Specific.Any(eval)) return true;
                }
                if (SkillBoost4 != null)
                {
                    if (eval(this.SkillBoost4.Overall)) return true;
                    if (this.SkillBoost4.Specific != null && this.SkillBoost4.Specific.Any(eval)) return true;
                }
                if (SkillBoost5 != null)
                {
                    if (eval(this.SkillBoost5.Overall)) return true;
                    if (this.SkillBoost5.Specific != null && this.SkillBoost5.Specific.Any(eval)) return true;
                }
                if (SkillBoost6 != null)
                {
                    if (eval(this.SkillBoost6.Overall)) return true;
                    if (this.SkillBoost6.Specific != null && this.SkillBoost6.Specific.Any(eval)) return true;
                }
                if (eval(this.Unused)) return true;
                if (eval(this.Height.Male) || eval(this.Height.Female)) return true;
                if (eval(this.Weight.Male) || eval(this.Weight.Female)) return true;
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RaceData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SkillBoost0 = this.SkillBoost0 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost0.Overall), this.SkillBoost0.Specific?.Translate(eval));
                obj.SkillBoost1 = this.SkillBoost1 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost1.Overall), this.SkillBoost1.Specific?.Translate(eval));
                obj.SkillBoost2 = this.SkillBoost2 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost2.Overall), this.SkillBoost2.Specific?.Translate(eval));
                obj.SkillBoost3 = this.SkillBoost3 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost3.Overall), this.SkillBoost3.Specific?.Translate(eval));
                obj.SkillBoost4 = this.SkillBoost4 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost4.Overall), this.SkillBoost4.Specific?.Translate(eval));
                obj.SkillBoost5 = this.SkillBoost5 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost5.Overall), this.SkillBoost5.Specific?.Translate(eval));
                obj.SkillBoost6 = this.SkillBoost6 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost6.Overall), this.SkillBoost6.Specific?.Translate(eval));
                obj.Unused = eval(this.Unused);
                obj.Height = new GenderedItem<R>(
                    eval(this.Height.Male),
                    eval(this.Height.Female));
                obj.Weight = new GenderedItem<R>(
                    eval(this.Weight.Male),
                    eval(this.Weight.Female));
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RaceData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RaceData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RaceData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.SkillBoost0?.Overall ?? true)
                    {
                        SkillBoost0?.ToString(fg);
                    }
                    if (printMask?.SkillBoost1?.Overall ?? true)
                    {
                        SkillBoost1?.ToString(fg);
                    }
                    if (printMask?.SkillBoost2?.Overall ?? true)
                    {
                        SkillBoost2?.ToString(fg);
                    }
                    if (printMask?.SkillBoost3?.Overall ?? true)
                    {
                        SkillBoost3?.ToString(fg);
                    }
                    if (printMask?.SkillBoost4?.Overall ?? true)
                    {
                        SkillBoost4?.ToString(fg);
                    }
                    if (printMask?.SkillBoost5?.Overall ?? true)
                    {
                        SkillBoost5?.ToString(fg);
                    }
                    if (printMask?.SkillBoost6?.Overall ?? true)
                    {
                        SkillBoost6?.ToString(fg);
                    }
                    if (printMask?.Unused ?? true)
                    {
                        fg.AppendItem(Unused, "Unused");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Height => {Height}");
                    }
                    if ((true))
                    {
                        fg.AppendLine($"Weight => {Weight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost0;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost1;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost2;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost3;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost4;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost5;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost6;
            public Exception? Unused;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Height;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Weight;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
                switch (enu)
                {
                    case RaceData_FieldIndex.SkillBoost0:
                        return SkillBoost0;
                    case RaceData_FieldIndex.SkillBoost1:
                        return SkillBoost1;
                    case RaceData_FieldIndex.SkillBoost2:
                        return SkillBoost2;
                    case RaceData_FieldIndex.SkillBoost3:
                        return SkillBoost3;
                    case RaceData_FieldIndex.SkillBoost4:
                        return SkillBoost4;
                    case RaceData_FieldIndex.SkillBoost5:
                        return SkillBoost5;
                    case RaceData_FieldIndex.SkillBoost6:
                        return SkillBoost6;
                    case RaceData_FieldIndex.Unused:
                        return Unused;
                    case RaceData_FieldIndex.Height:
                        return Height;
                    case RaceData_FieldIndex.Weight:
                        return Weight;
                    case RaceData_FieldIndex.Flags:
                        return Flags;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
                switch (enu)
                {
                    case RaceData_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case RaceData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case RaceData_FieldIndex.Height:
                        this.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case RaceData_FieldIndex.Weight:
                        this.Weight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case RaceData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
                switch (enu)
                {
                    case RaceData_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case RaceData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case RaceData_FieldIndex.Height:
                        this.Height = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case RaceData_FieldIndex.Weight:
                        this.Weight = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case RaceData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SkillBoost0 != null) return true;
                if (SkillBoost1 != null) return true;
                if (SkillBoost2 != null) return true;
                if (SkillBoost3 != null) return true;
                if (SkillBoost4 != null) return true;
                if (SkillBoost5 != null) return true;
                if (SkillBoost6 != null) return true;
                if (Unused != null) return true;
                if (Height != null) return true;
                if (Weight != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                SkillBoost0?.ToString(fg);
                SkillBoost1?.ToString(fg);
                SkillBoost2?.ToString(fg);
                SkillBoost3?.ToString(fg);
                SkillBoost4?.ToString(fg);
                SkillBoost5?.ToString(fg);
                SkillBoost6?.ToString(fg);
                fg.AppendItem(Unused, "Unused");
                fg.AppendLine($"Height => {Height}");
                fg.AppendLine($"Weight => {Weight}");
                fg.AppendItem(Flags, "Flags");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SkillBoost0 = this.SkillBoost0.Combine(rhs.SkillBoost0, (l, r) => l.Combine(r));
                ret.SkillBoost1 = this.SkillBoost1.Combine(rhs.SkillBoost1, (l, r) => l.Combine(r));
                ret.SkillBoost2 = this.SkillBoost2.Combine(rhs.SkillBoost2, (l, r) => l.Combine(r));
                ret.SkillBoost3 = this.SkillBoost3.Combine(rhs.SkillBoost3, (l, r) => l.Combine(r));
                ret.SkillBoost4 = this.SkillBoost4.Combine(rhs.SkillBoost4, (l, r) => l.Combine(r));
                ret.SkillBoost5 = this.SkillBoost5.Combine(rhs.SkillBoost5, (l, r) => l.Combine(r));
                ret.SkillBoost6 = this.SkillBoost6.Combine(rhs.SkillBoost6, (l, r) => l.Combine(r));
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Height?.Overall, rhs.Height?.Overall), GenderedItem.Combine(this.Height?.Specific, rhs.Height?.Specific));
                ret.Weight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ExceptionExt.Combine(this.Weight?.Overall, rhs.Weight?.Overall), GenderedItem.Combine(this.Weight?.Specific, rhs.Weight?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost0;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost1;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost2;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost3;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost4;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost5;
            public MaskItem<bool, SkillBoost.TranslationMask?> SkillBoost6;
            public bool Unused;
            public MaskItem<bool, GenderedItem<bool>?> Height;
            public MaskItem<bool, GenderedItem<bool>?> Weight;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.SkillBoost0 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost1 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost2 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost3 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost4 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost5 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.SkillBoost6 = new MaskItem<bool, SkillBoost.TranslationMask?>(defaultOn, null);
                this.Unused = defaultOn;
                this.Height = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.Weight = new MaskItem<bool, GenderedItem<bool>?>(defaultOn, default);
                this.Flags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SkillBoost0?.Overall ?? true, SkillBoost0?.Specific?.GetCrystal()));
                ret.Add((SkillBoost1?.Overall ?? true, SkillBoost1?.Specific?.GetCrystal()));
                ret.Add((SkillBoost2?.Overall ?? true, SkillBoost2?.Specific?.GetCrystal()));
                ret.Add((SkillBoost3?.Overall ?? true, SkillBoost3?.Specific?.GetCrystal()));
                ret.Add((SkillBoost4?.Overall ?? true, SkillBoost4?.Specific?.GetCrystal()));
                ret.Add((SkillBoost5?.Overall ?? true, SkillBoost5?.Specific?.GetCrystal()));
                ret.Add((SkillBoost6?.Overall ?? true, SkillBoost6?.Specific?.GetCrystal()));
                ret.Add((Unused, null));
                ret.Add((Height?.Overall ?? true, null));
                ret.Add((Weight?.Overall ?? true, null));
                ret.Add((Flags, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = RaceData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static RaceData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceData();
            ((RaceDataSetterCommon)((IRaceDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RaceData GetNew()
        {
            return new RaceData();
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceData :
        IRaceDataGetter,
        ILoquiObjectSetter<IRaceData>
    {
        new SkillBoost SkillBoost0 { get; set; }
        new SkillBoost SkillBoost1 { get; set; }
        new SkillBoost SkillBoost2 { get; set; }
        new SkillBoost SkillBoost3 { get; set; }
        new SkillBoost SkillBoost4 { get; set; }
        new SkillBoost SkillBoost5 { get; set; }
        new SkillBoost SkillBoost6 { get; set; }
        new Int32 Unused { get; set; }
        new GenderedItem<Single> Height { get; set; }
        new GenderedItem<Single> Weight { get; set; }
        new Race.Flag Flags { get; set; }
    }

    public partial interface IRaceDataGetter :
        ILoquiObject,
        ILoquiObject<IRaceDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => RaceData_Registration.Instance;
        ISkillBoostGetter SkillBoost0 { get; }
        ISkillBoostGetter SkillBoost1 { get; }
        ISkillBoostGetter SkillBoost2 { get; }
        ISkillBoostGetter SkillBoost3 { get; }
        ISkillBoostGetter SkillBoost4 { get; }
        ISkillBoostGetter SkillBoost5 { get; }
        ISkillBoostGetter SkillBoost6 { get; }
        Int32 Unused { get; }
        IGenderedItemGetter<Single> Height { get; }
        IGenderedItemGetter<Single> Weight { get; }
        Race.Flag Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceDataMixIn
    {
        public static void Clear(this IRaceData item)
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RaceData.Mask<bool> GetEqualsMask(
            this IRaceDataGetter item,
            IRaceDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceDataGetter item,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceDataGetter item,
            FileGeneration fg,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceDataGetter item,
            RaceData.Mask<bool?> checkMask)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceData.Mask<bool> GetHasBeenSetMask(this IRaceDataGetter item)
        {
            var ret = new RaceData.Mask<bool>(false);
            ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceDataGetter item,
            IRaceDataGetter rhs)
        {
            return ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs)
        {
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs,
            RaceData.TranslationMask? copyMask = null)
        {
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceData lhs,
            IRaceDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceDataSetterTranslationCommon)((IRaceDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RaceData DeepCopy(
            this IRaceDataGetter item,
            RaceData.TranslationMask? copyMask = null)
        {
            return ((RaceDataSetterTranslationCommon)((IRaceDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RaceData DeepCopy(
            this IRaceDataGetter item,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? copyMask = null)
        {
            return ((RaceDataSetterTranslationCommon)((IRaceDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RaceData DeepCopy(
            this IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceDataSetterTranslationCommon)((IRaceDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceData item,
            XElement node,
            RaceData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceData item,
            XElement node,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            string path,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            string path,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            string path,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceData item,
            Stream stream,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            Stream stream,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RaceData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceDataSetterCommon)((IRaceDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceData_FieldIndex
    {
        SkillBoost0 = 0,
        SkillBoost1 = 1,
        SkillBoost2 = 2,
        SkillBoost3 = 3,
        SkillBoost4 = 4,
        SkillBoost5 = 5,
        SkillBoost6 = 6,
        Unused = 7,
        Height = 8,
        Weight = 9,
        Flags = 10,
    }
    #endregion

    #region Registration
    public partial class RaceData_Registration : ILoquiRegistration
    {
        public static readonly RaceData_Registration Instance = new RaceData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 205,
            version: 0);

        public const string GUID = "a601027e-c79b-4987-bfae-8c172c8b13e5";

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(RaceData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceData.ErrorMask);

        public static readonly Type ClassType = typeof(RaceData);

        public static readonly Type GetterType = typeof(IRaceDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceData";

        public const string Name = "RaceData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "SKILLBOOST0":
                    return (ushort)RaceData_FieldIndex.SkillBoost0;
                case "SKILLBOOST1":
                    return (ushort)RaceData_FieldIndex.SkillBoost1;
                case "SKILLBOOST2":
                    return (ushort)RaceData_FieldIndex.SkillBoost2;
                case "SKILLBOOST3":
                    return (ushort)RaceData_FieldIndex.SkillBoost3;
                case "SKILLBOOST4":
                    return (ushort)RaceData_FieldIndex.SkillBoost4;
                case "SKILLBOOST5":
                    return (ushort)RaceData_FieldIndex.SkillBoost5;
                case "SKILLBOOST6":
                    return (ushort)RaceData_FieldIndex.SkillBoost6;
                case "UNUSED":
                    return (ushort)RaceData_FieldIndex.Unused;
                case "HEIGHT":
                    return (ushort)RaceData_FieldIndex.Height;
                case "WEIGHT":
                    return (ushort)RaceData_FieldIndex.Weight;
                case "FLAGS":
                    return (ushort)RaceData_FieldIndex.Flags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unused:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                    return true;
                case RaceData_FieldIndex.Unused:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unused:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                    return "SkillBoost0";
                case RaceData_FieldIndex.SkillBoost1:
                    return "SkillBoost1";
                case RaceData_FieldIndex.SkillBoost2:
                    return "SkillBoost2";
                case RaceData_FieldIndex.SkillBoost3:
                    return "SkillBoost3";
                case RaceData_FieldIndex.SkillBoost4:
                    return "SkillBoost4";
                case RaceData_FieldIndex.SkillBoost5:
                    return "SkillBoost5";
                case RaceData_FieldIndex.SkillBoost6:
                    return "SkillBoost6";
                case RaceData_FieldIndex.Unused:
                    return "Unused";
                case RaceData_FieldIndex.Height:
                    return "Height";
                case RaceData_FieldIndex.Weight:
                    return "Weight";
                case RaceData_FieldIndex.Flags:
                    return "Flags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unused:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                case RaceData_FieldIndex.SkillBoost1:
                case RaceData_FieldIndex.SkillBoost2:
                case RaceData_FieldIndex.SkillBoost3:
                case RaceData_FieldIndex.SkillBoost4:
                case RaceData_FieldIndex.SkillBoost5:
                case RaceData_FieldIndex.SkillBoost6:
                case RaceData_FieldIndex.Unused:
                case RaceData_FieldIndex.Height:
                case RaceData_FieldIndex.Weight:
                case RaceData_FieldIndex.Flags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceData_FieldIndex enu = (RaceData_FieldIndex)index;
            switch (enu)
            {
                case RaceData_FieldIndex.SkillBoost0:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost1:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost2:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost3:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost4:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost5:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.SkillBoost6:
                    return typeof(SkillBoost);
                case RaceData_FieldIndex.Unused:
                    return typeof(Int32);
                case RaceData_FieldIndex.Height:
                    return typeof(GenderedItem<Single>);
                case RaceData_FieldIndex.Weight:
                    return typeof(GenderedItem<Single>);
                case RaceData_FieldIndex.Flags:
                    return typeof(Race.Flag);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 11;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RaceDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceDataSetterCommon
    {
        public static readonly RaceDataSetterCommon Instance = new RaceDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceData item)
        {
            ClearPartial();
            item.SkillBoost0.Clear();
            item.SkillBoost1.Clear();
            item.SkillBoost2.Clear();
            item.SkillBoost3.Clear();
            item.SkillBoost4.Clear();
            item.SkillBoost5.Clear();
            item.SkillBoost6.Clear();
            item.Unused = default;
            item.Height.Male = default;
            item.Height.Female = default;
            item.Weight.Male = default;
            item.Weight.Female = default;
            item.Flags = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IRaceData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(RaceData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RaceDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RaceDataCommon
    {
        public static readonly RaceDataCommon Instance = new RaceDataCommon();

        public RaceData.Mask<bool> GetEqualsMask(
            IRaceDataGetter item,
            IRaceDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceData.Mask<bool>(false);
            ((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceDataGetter item,
            IRaceDataGetter rhs,
            RaceData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.SkillBoost0 = MaskItemExt.Factory(item.SkillBoost0.GetEqualsMask(rhs.SkillBoost0, include), include);
            ret.SkillBoost1 = MaskItemExt.Factory(item.SkillBoost1.GetEqualsMask(rhs.SkillBoost1, include), include);
            ret.SkillBoost2 = MaskItemExt.Factory(item.SkillBoost2.GetEqualsMask(rhs.SkillBoost2, include), include);
            ret.SkillBoost3 = MaskItemExt.Factory(item.SkillBoost3.GetEqualsMask(rhs.SkillBoost3, include), include);
            ret.SkillBoost4 = MaskItemExt.Factory(item.SkillBoost4.GetEqualsMask(rhs.SkillBoost4, include), include);
            ret.SkillBoost5 = MaskItemExt.Factory(item.SkillBoost5.GetEqualsMask(rhs.SkillBoost5, include), include);
            ret.SkillBoost6 = MaskItemExt.Factory(item.SkillBoost6.GetEqualsMask(rhs.SkillBoost6, include), include);
            ret.Unused = item.Unused == rhs.Unused;
            ret.Height = new GenderedItem<bool>(
                male: item.Height.Male.EqualsWithin(rhs.Height.Male),
                female: item.Height.Female.EqualsWithin(rhs.Height.Female));
            ret.Weight = new GenderedItem<bool>(
                male: item.Weight.Male.EqualsWithin(rhs.Weight.Male),
                female: item.Weight.Female.EqualsWithin(rhs.Weight.Female));
            ret.Flags = item.Flags == rhs.Flags;
        }
        
        public string ToString(
            IRaceDataGetter item,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceDataGetter item,
            FileGeneration fg,
            string? name = null,
            RaceData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceData =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceDataGetter item,
            FileGeneration fg,
            RaceData.Mask<bool>? printMask = null)
        {
            if (printMask?.SkillBoost0?.Overall ?? true)
            {
                item.SkillBoost0?.ToString(fg, "SkillBoost0");
            }
            if (printMask?.SkillBoost1?.Overall ?? true)
            {
                item.SkillBoost1?.ToString(fg, "SkillBoost1");
            }
            if (printMask?.SkillBoost2?.Overall ?? true)
            {
                item.SkillBoost2?.ToString(fg, "SkillBoost2");
            }
            if (printMask?.SkillBoost3?.Overall ?? true)
            {
                item.SkillBoost3?.ToString(fg, "SkillBoost3");
            }
            if (printMask?.SkillBoost4?.Overall ?? true)
            {
                item.SkillBoost4?.ToString(fg, "SkillBoost4");
            }
            if (printMask?.SkillBoost5?.Overall ?? true)
            {
                item.SkillBoost5?.ToString(fg, "SkillBoost5");
            }
            if (printMask?.SkillBoost6?.Overall ?? true)
            {
                item.SkillBoost6?.ToString(fg, "SkillBoost6");
            }
            if (printMask?.Unused ?? true)
            {
                fg.AppendItem(item.Unused, "Unused");
            }
            if (true)
            {
                item.Height.ToString(fg, "Height");
            }
            if (true)
            {
                item.Weight.ToString(fg, "Weight");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
        }
        
        public bool HasBeenSet(
            IRaceDataGetter item,
            RaceData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRaceDataGetter item,
            RaceData.Mask<bool> mask)
        {
            mask.SkillBoost0 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost0?.GetHasBeenSetMask());
            mask.SkillBoost1 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost1?.GetHasBeenSetMask());
            mask.SkillBoost2 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost2?.GetHasBeenSetMask());
            mask.SkillBoost3 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost3?.GetHasBeenSetMask());
            mask.SkillBoost4 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost4?.GetHasBeenSetMask());
            mask.SkillBoost5 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost5?.GetHasBeenSetMask());
            mask.SkillBoost6 = new MaskItem<bool, SkillBoost.Mask<bool>?>(true, item.SkillBoost6?.GetHasBeenSetMask());
            mask.Unused = true;
            mask.Height = new GenderedItem<bool>(true, true);
            mask.Weight = new GenderedItem<bool>(true, true);
            mask.Flags = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceDataGetter? lhs,
            IRaceDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!object.Equals(lhs.SkillBoost0, rhs.SkillBoost0)) return false;
            if (!object.Equals(lhs.SkillBoost1, rhs.SkillBoost1)) return false;
            if (!object.Equals(lhs.SkillBoost2, rhs.SkillBoost2)) return false;
            if (!object.Equals(lhs.SkillBoost3, rhs.SkillBoost3)) return false;
            if (!object.Equals(lhs.SkillBoost4, rhs.SkillBoost4)) return false;
            if (!object.Equals(lhs.SkillBoost5, rhs.SkillBoost5)) return false;
            if (!object.Equals(lhs.SkillBoost6, rhs.SkillBoost6)) return false;
            if (lhs.Unused != rhs.Unused) return false;
            if (!Equals(lhs.Height, rhs.Height)) return false;
            if (!Equals(lhs.Weight, rhs.Weight)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRaceDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.SkillBoost0);
            hash.Add(item.SkillBoost1);
            hash.Add(item.SkillBoost2);
            hash.Add(item.SkillBoost3);
            hash.Add(item.SkillBoost4);
            hash.Add(item.SkillBoost5);
            hash.Add(item.SkillBoost6);
            hash.Add(item.Unused);
            hash.Add(HashCode.Combine(item.Height.Male, item.Height.Female));
            hash.Add(HashCode.Combine(item.Weight.Male, item.Weight.Female));
            hash.Add(item.Flags);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RaceData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRaceDataGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IRaceDataGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class RaceDataSetterTranslationCommon
    {
        public static readonly RaceDataSetterTranslationCommon Instance = new RaceDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceData item,
            IRaceDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost0) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost0);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost0) ?? true))
                    {
                        item.SkillBoost0 = rhs.SkillBoost0.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost0),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost1) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost1);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost1) ?? true))
                    {
                        item.SkillBoost1 = rhs.SkillBoost1.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost1),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost2) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost2);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost2) ?? true))
                    {
                        item.SkillBoost2 = rhs.SkillBoost2.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost2),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost3) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost3);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost3) ?? true))
                    {
                        item.SkillBoost3 = rhs.SkillBoost3.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost3),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost4) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost4);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost4) ?? true))
                    {
                        item.SkillBoost4 = rhs.SkillBoost4.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost4),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost5) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost5);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost5) ?? true))
                    {
                        item.SkillBoost5 = rhs.SkillBoost5.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost5),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost6) ?? true))
            {
                errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost6);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost6) ?? true))
                    {
                        item.SkillBoost6 = rhs.SkillBoost6.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost6),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            item.Height = new GenderedItem<Single>(
                male: rhs.Height.Male,
                female: rhs.Height.Female);
            item.Weight = new GenderedItem<Single>(
                male: rhs.Weight.Male,
                female: rhs.Weight.Female);
            if ((copyMask?.GetShouldTranslate((int)RaceData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
        }
        
        #endregion
        
        public RaceData DeepCopy(
            IRaceDataGetter item,
            RaceData.TranslationMask? copyMask = null)
        {
            RaceData ret = (RaceData)((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceData DeepCopy(
            IRaceDataGetter item,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? copyMask = null)
        {
            RaceData ret = (RaceData)((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceData DeepCopy(
            IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RaceData ret = (RaceData)((RaceDataCommon)((IRaceDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RaceData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceData_Registration.Instance;
        public static RaceData_Registration Registration => RaceData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RaceDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RaceDataXmlWriteTranslation Instance = new RaceDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost0) ?? true))
            {
                var SkillBoost0Item = item.SkillBoost0;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost0Item).XmlWriteTranslator).Write(
                    item: SkillBoost0Item,
                    node: node,
                    name: nameof(item.SkillBoost0),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost0,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost0));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost1) ?? true))
            {
                var SkillBoost1Item = item.SkillBoost1;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost1Item).XmlWriteTranslator).Write(
                    item: SkillBoost1Item,
                    node: node,
                    name: nameof(item.SkillBoost1),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost1,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost1));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost2) ?? true))
            {
                var SkillBoost2Item = item.SkillBoost2;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost2Item).XmlWriteTranslator).Write(
                    item: SkillBoost2Item,
                    node: node,
                    name: nameof(item.SkillBoost2),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost2,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost2));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost3) ?? true))
            {
                var SkillBoost3Item = item.SkillBoost3;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost3Item).XmlWriteTranslator).Write(
                    item: SkillBoost3Item,
                    node: node,
                    name: nameof(item.SkillBoost3),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost3,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost3));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost4) ?? true))
            {
                var SkillBoost4Item = item.SkillBoost4;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost4Item).XmlWriteTranslator).Write(
                    item: SkillBoost4Item,
                    node: node,
                    name: nameof(item.SkillBoost4),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost4,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost4));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost5) ?? true))
            {
                var SkillBoost5Item = item.SkillBoost5;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost5Item).XmlWriteTranslator).Write(
                    item: SkillBoost5Item,
                    node: node,
                    name: nameof(item.SkillBoost5),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost5,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost5));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.SkillBoost6) ?? true))
            {
                var SkillBoost6Item = item.SkillBoost6;
                ((SkillBoostXmlWriteTranslation)((IXmlItem)SkillBoost6Item).XmlWriteTranslator).Write(
                    item: SkillBoost6Item,
                    node: node,
                    name: nameof(item.SkillBoost6),
                    fieldIndex: (int)RaceData_FieldIndex.SkillBoost6,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost6));
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Unused) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Unused),
                    item: item.Unused,
                    fieldIndex: (int)RaceData_FieldIndex.Unused,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Height) ?? true))
            {
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Height),
                        item: item.Height.Male,
                        errorMask: errorMask);
                }
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Height),
                        item: item.Height.Female,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Weight) ?? true))
            {
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight.Male,
                        errorMask: errorMask);
                }
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight.Female,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)RaceData_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Race.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)RaceData_FieldIndex.Flags,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRaceDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IRaceDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RaceDataXmlCreateTranslation
    {
        public readonly static RaceDataXmlCreateTranslation Instance = new RaceDataXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "SkillBoost0":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost0);
                    try
                    {
                        item.SkillBoost0 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost0));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost1":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost1);
                    try
                    {
                        item.SkillBoost1 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost1));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost2":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost2);
                    try
                    {
                        item.SkillBoost2 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost2));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost3":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost3);
                    try
                    {
                        item.SkillBoost3 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost3));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost4":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost4);
                    try
                    {
                        item.SkillBoost4 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost4));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost5":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost5);
                    try
                    {
                        item.SkillBoost5 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost5));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SkillBoost6":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.SkillBoost6);
                    try
                    {
                        item.SkillBoost6 = LoquiXmlTranslation<SkillBoost>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)RaceData_FieldIndex.SkillBoost6));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Unused":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Unused);
                    try
                    {
                        item.Unused = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Height":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Height);
                    try
                    {
                        item.Height = new GenderedItem<Single>(
                            male: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask),
                            female: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Weight);
                    try
                    {
                        item.Weight = new GenderedItem<Single>(
                            male: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask),
                            female: FloatXmlTranslation.Instance.Parse(
                                node: node,
                                errorMask: errorMask));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)RaceData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Race.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RaceDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceDataGetter item,
            XElement node,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            string path,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            Stream stream,
            out RaceData.ErrorMask errorMask,
            RaceData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            XElement node,
            string? name = null,
            RaceData.TranslationMask? translationMask = null)
        {
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RaceDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceDataBinaryWriteTranslation Instance = new RaceDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRaceDataGetter item,
            MutagenWriter writer)
        {
            var SkillBoost0Item = item.SkillBoost0;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost0Item).BinaryWriteTranslator).Write(
                item: SkillBoost0Item,
                writer: writer);
            var SkillBoost1Item = item.SkillBoost1;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost1Item).BinaryWriteTranslator).Write(
                item: SkillBoost1Item,
                writer: writer);
            var SkillBoost2Item = item.SkillBoost2;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost2Item).BinaryWriteTranslator).Write(
                item: SkillBoost2Item,
                writer: writer);
            var SkillBoost3Item = item.SkillBoost3;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost3Item).BinaryWriteTranslator).Write(
                item: SkillBoost3Item,
                writer: writer);
            var SkillBoost4Item = item.SkillBoost4;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost4Item).BinaryWriteTranslator).Write(
                item: SkillBoost4Item,
                writer: writer);
            var SkillBoost5Item = item.SkillBoost5;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost5Item).BinaryWriteTranslator).Write(
                item: SkillBoost5Item,
                writer: writer);
            var SkillBoost6Item = item.SkillBoost6;
            ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost6Item).BinaryWriteTranslator).Write(
                item: SkillBoost6Item,
                writer: writer);
            writer.Write(item.Unused);
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Height,
                transl: FloatBinaryTranslation.Instance.Write);
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Weight,
                transl: FloatBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Race.Flag>.Instance.Write(
                writer,
                item.Flags,
                length: 2);
        }

        public void Write(
            MutagenWriter writer,
            IRaceDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(RaceData_Registration.DATA_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceDataBinaryCreateTranslation
    {
        public readonly static RaceDataBinaryCreateTranslation Instance = new RaceDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRaceData item,
            MutagenFrame frame)
        {
            item.SkillBoost0 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost1 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost2 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost3 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost4 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost5 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.SkillBoost6 = Mutagen.Bethesda.Oblivion.SkillBoost.CreateFromBinary(frame: frame);
            item.Unused = frame.ReadInt32();
            item.Height = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Single>(
                frame: frame,
                transl: FloatBinaryTranslation.Instance.Parse);
            item.Weight = Mutagen.Bethesda.Binary.GenderedItemBinaryTranslation.Parse<Single>(
                frame: frame,
                transl: FloatBinaryTranslation.Instance.Parse);
            item.Flags = EnumBinaryTranslation<Race.Flag>.Instance.Parse(frame: frame.SpawnWithLength(2));
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RaceDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceDataGetter item,
            MutagenWriter writer)
        {
            ((RaceDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceDataBinaryOverlay :
        BinaryOverlay,
        IRaceDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceData_Registration.Instance;
        public static RaceData_Registration Registration => RaceData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRaceDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRaceDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RaceDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ISkillBoostGetter SkillBoost0 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x0)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost1 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x2)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost2 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x4)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost3 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x6)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost4 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0x8)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost5 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0xA)), _package, default(RecordTypeConverter));
        public ISkillBoostGetter SkillBoost6 => SkillBoostBinaryOverlay.SkillBoostFactory(new BinaryMemoryReadStream(_data.Slice(0xC)), _package, default(RecordTypeConverter));
        public Int32 Unused => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0xE, 0x4));
        #region Height
        public IGenderedItemGetter<Single> Height
        {
            get
            {
                var data = _data.Span.Slice(0x12, 8);
                return new GenderedItem<Single>(
                    SpanExt.GetFloat(data),
                    SpanExt.GetFloat(data.Slice(4)));
            }
        }
        #endregion
        #region Weight
        public IGenderedItemGetter<Single> Weight
        {
            get
            {
                var data = _data.Span.Slice(0x1A, 8);
                return new GenderedItem<Single>(
                    SpanExt.GetFloat(data),
                    SpanExt.GetFloat(data.Slice(4)));
            }
        }
        #endregion
        public Race.Flag Flags => (Race.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_data.Span.Slice(0x22, 0x2));
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
            this.CustomCtor();
        }

        public static RaceDataBinaryOverlay RaceDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.SubConstants.TypeAndLengthLength;
            stream.Position += 0x24 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static RaceDataBinaryOverlay RaceDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RaceDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

