/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RaceStats :
        IRaceStats,
        ILoquiObjectSetter<RaceStats>,
        IEquatable<RaceStats>,
        IEqualsMask
    {
        #region Ctor
        public RaceStats()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Strength
        public Byte Strength { get; set; } = default;
        #endregion
        #region Intelligence
        public Byte Intelligence { get; set; } = default;
        #endregion
        #region Willpower
        public Byte Willpower { get; set; } = default;
        #endregion
        #region Agility
        public Byte Agility { get; set; } = default;
        #endregion
        #region Speed
        public Byte Speed { get; set; } = default;
        #endregion
        #region Endurance
        public Byte Endurance { get; set; } = default;
        #endregion
        #region Personality
        public Byte Personality { get; set; } = default;
        #endregion
        #region Luck
        public Byte Luck { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceStatsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRaceStatsGetter rhs)) return false;
            return ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RaceStats obj)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RaceStatsCommon)((IRaceStatsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RaceStatsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceStatsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RaceStats CreateFromXml(
            XElement node,
            RaceStats.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RaceStats CreateFromXml(
            XElement node,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceStats.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RaceStats CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new RaceStats();
            ((RaceStatsSetterCommon)((IRaceStatsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RaceStats CreateFromXml(
            string path,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            string path,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RaceStats CreateFromXml(
            Stream stream,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            Stream stream,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RaceStats CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Strength = initialValue;
                this.Intelligence = initialValue;
                this.Willpower = initialValue;
                this.Agility = initialValue;
                this.Speed = initialValue;
                this.Endurance = initialValue;
                this.Personality = initialValue;
                this.Luck = initialValue;
            }

            public Mask(
                TItem Strength,
                TItem Intelligence,
                TItem Willpower,
                TItem Agility,
                TItem Speed,
                TItem Endurance,
                TItem Personality,
                TItem Luck)
            {
                this.Strength = Strength;
                this.Intelligence = Intelligence;
                this.Willpower = Willpower;
                this.Agility = Agility;
                this.Speed = Speed;
                this.Endurance = Endurance;
                this.Personality = Personality;
                this.Luck = Luck;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Strength;
            public TItem Intelligence;
            public TItem Willpower;
            public TItem Agility;
            public TItem Speed;
            public TItem Endurance;
            public TItem Personality;
            public TItem Luck;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Strength, rhs.Strength)) return false;
                if (!object.Equals(this.Intelligence, rhs.Intelligence)) return false;
                if (!object.Equals(this.Willpower, rhs.Willpower)) return false;
                if (!object.Equals(this.Agility, rhs.Agility)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Endurance, rhs.Endurance)) return false;
                if (!object.Equals(this.Personality, rhs.Personality)) return false;
                if (!object.Equals(this.Luck, rhs.Luck)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Strength);
                hash.Add(this.Intelligence);
                hash.Add(this.Willpower);
                hash.Add(this.Agility);
                hash.Add(this.Speed);
                hash.Add(this.Endurance);
                hash.Add(this.Personality);
                hash.Add(this.Luck);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Strength)) return false;
                if (!eval(this.Intelligence)) return false;
                if (!eval(this.Willpower)) return false;
                if (!eval(this.Agility)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Endurance)) return false;
                if (!eval(this.Personality)) return false;
                if (!eval(this.Luck)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Strength)) return true;
                if (eval(this.Intelligence)) return true;
                if (eval(this.Willpower)) return true;
                if (eval(this.Agility)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Endurance)) return true;
                if (eval(this.Personality)) return true;
                if (eval(this.Luck)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RaceStats.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Strength = eval(this.Strength);
                obj.Intelligence = eval(this.Intelligence);
                obj.Willpower = eval(this.Willpower);
                obj.Agility = eval(this.Agility);
                obj.Speed = eval(this.Speed);
                obj.Endurance = eval(this.Endurance);
                obj.Personality = eval(this.Personality);
                obj.Luck = eval(this.Luck);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RaceStats.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RaceStats.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RaceStats.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Strength ?? true)
                    {
                        fg.AppendItem(Strength, "Strength");
                    }
                    if (printMask?.Intelligence ?? true)
                    {
                        fg.AppendItem(Intelligence, "Intelligence");
                    }
                    if (printMask?.Willpower ?? true)
                    {
                        fg.AppendItem(Willpower, "Willpower");
                    }
                    if (printMask?.Agility ?? true)
                    {
                        fg.AppendItem(Agility, "Agility");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        fg.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Endurance ?? true)
                    {
                        fg.AppendItem(Endurance, "Endurance");
                    }
                    if (printMask?.Personality ?? true)
                    {
                        fg.AppendItem(Personality, "Personality");
                    }
                    if (printMask?.Luck ?? true)
                    {
                        fg.AppendItem(Luck, "Luck");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Strength;
            public Exception? Intelligence;
            public Exception? Willpower;
            public Exception? Agility;
            public Exception? Speed;
            public Exception? Endurance;
            public Exception? Personality;
            public Exception? Luck;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
                switch (enu)
                {
                    case RaceStats_FieldIndex.Strength:
                        return Strength;
                    case RaceStats_FieldIndex.Intelligence:
                        return Intelligence;
                    case RaceStats_FieldIndex.Willpower:
                        return Willpower;
                    case RaceStats_FieldIndex.Agility:
                        return Agility;
                    case RaceStats_FieldIndex.Speed:
                        return Speed;
                    case RaceStats_FieldIndex.Endurance:
                        return Endurance;
                    case RaceStats_FieldIndex.Personality:
                        return Personality;
                    case RaceStats_FieldIndex.Luck:
                        return Luck;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
                switch (enu)
                {
                    case RaceStats_FieldIndex.Strength:
                        this.Strength = ex;
                        break;
                    case RaceStats_FieldIndex.Intelligence:
                        this.Intelligence = ex;
                        break;
                    case RaceStats_FieldIndex.Willpower:
                        this.Willpower = ex;
                        break;
                    case RaceStats_FieldIndex.Agility:
                        this.Agility = ex;
                        break;
                    case RaceStats_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case RaceStats_FieldIndex.Endurance:
                        this.Endurance = ex;
                        break;
                    case RaceStats_FieldIndex.Personality:
                        this.Personality = ex;
                        break;
                    case RaceStats_FieldIndex.Luck:
                        this.Luck = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
                switch (enu)
                {
                    case RaceStats_FieldIndex.Strength:
                        this.Strength = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Intelligence:
                        this.Intelligence = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Willpower:
                        this.Willpower = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Agility:
                        this.Agility = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Endurance:
                        this.Endurance = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Personality:
                        this.Personality = (Exception?)obj;
                        break;
                    case RaceStats_FieldIndex.Luck:
                        this.Luck = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Strength != null) return true;
                if (Intelligence != null) return true;
                if (Willpower != null) return true;
                if (Agility != null) return true;
                if (Speed != null) return true;
                if (Endurance != null) return true;
                if (Personality != null) return true;
                if (Luck != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Strength, "Strength");
                fg.AppendItem(Intelligence, "Intelligence");
                fg.AppendItem(Willpower, "Willpower");
                fg.AppendItem(Agility, "Agility");
                fg.AppendItem(Speed, "Speed");
                fg.AppendItem(Endurance, "Endurance");
                fg.AppendItem(Personality, "Personality");
                fg.AppendItem(Luck, "Luck");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Strength = this.Strength.Combine(rhs.Strength);
                ret.Intelligence = this.Intelligence.Combine(rhs.Intelligence);
                ret.Willpower = this.Willpower.Combine(rhs.Willpower);
                ret.Agility = this.Agility.Combine(rhs.Agility);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Endurance = this.Endurance.Combine(rhs.Endurance);
                ret.Personality = this.Personality.Combine(rhs.Personality);
                ret.Luck = this.Luck.Combine(rhs.Luck);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Strength;
            public bool Intelligence;
            public bool Willpower;
            public bool Agility;
            public bool Speed;
            public bool Endurance;
            public bool Personality;
            public bool Luck;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Strength = defaultOn;
                this.Intelligence = defaultOn;
                this.Willpower = defaultOn;
                this.Agility = defaultOn;
                this.Speed = defaultOn;
                this.Endurance = defaultOn;
                this.Personality = defaultOn;
                this.Luck = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Strength, null));
                ret.Add((Intelligence, null));
                ret.Add((Willpower, null));
                ret.Add((Agility, null));
                ret.Add((Speed, null));
                ret.Add((Endurance, null));
                ret.Add((Personality, null));
                ret.Add((Luck, null));
            }
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceStatsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceStatsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static RaceStats CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static RaceStats CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceStats();
            ((RaceStatsSetterCommon)((IRaceStatsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceStatsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RaceStats GetNew()
        {
            return new RaceStats();
        }

    }
    #endregion

    #region Interface
    public partial interface IRaceStats :
        IRaceStatsGetter,
        ILoquiObjectSetter<IRaceStats>
    {
        new Byte Strength { get; set; }
        new Byte Intelligence { get; set; }
        new Byte Willpower { get; set; }
        new Byte Agility { get; set; }
        new Byte Speed { get; set; }
        new Byte Endurance { get; set; }
        new Byte Personality { get; set; }
        new Byte Luck { get; set; }
    }

    public partial interface IRaceStatsGetter :
        ILoquiObject,
        ILoquiObject<IRaceStatsGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        Byte Strength { get; }
        Byte Intelligence { get; }
        Byte Willpower { get; }
        Byte Agility { get; }
        Byte Speed { get; }
        Byte Endurance { get; }
        Byte Personality { get; }
        Byte Luck { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceStatsMixIn
    {
        public static void Clear(this IRaceStats item)
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RaceStats.Mask<bool> GetEqualsMask(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRaceStatsGetter item,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRaceStatsGetter item,
            FileGeneration fg,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRaceStatsGetter item,
            RaceStats.Mask<bool?> checkMask)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RaceStats.Mask<bool> GetHasBeenSetMask(this IRaceStatsGetter item)
        {
            var ret = new RaceStats.Mask<bool>(false);
            ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRaceStatsGetter item,
            IRaceStatsGetter rhs)
        {
            return ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs,
            RaceStats.TranslationMask? copyMask = null)
        {
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RaceStats.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceStats lhs,
            IRaceStatsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RaceStats DeepCopy(
            this IRaceStatsGetter item,
            RaceStats.TranslationMask? copyMask = null)
        {
            return ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RaceStats DeepCopy(
            this IRaceStatsGetter item,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? copyMask = null)
        {
            return ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RaceStats DeepCopy(
            this IRaceStatsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceStatsSetterTranslationCommon)((IRaceStatsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceStats item,
            XElement node,
            RaceStats.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRaceStats item,
            XElement node,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceStats.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            string path,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            string path,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            string path,
            ErrorMaskBuilder? errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            Stream stream,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            Stream stream,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRaceStats item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RaceStats.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRaceStats item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRaceStats item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceStatsSetterCommon)((IRaceStatsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RaceStats_FieldIndex
    {
        Strength = 0,
        Intelligence = 1,
        Willpower = 2,
        Agility = 3,
        Speed = 4,
        Endurance = 5,
        Personality = 6,
        Luck = 7,
    }
    #endregion

    #region Registration
    public partial class RaceStats_Registration : ILoquiRegistration
    {
        public static readonly RaceStats_Registration Instance = new RaceStats_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 31,
            version: 0);

        public const string GUID = "3cbe1b09-d220-47e3-a57d-3d9a4feada8b";

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(RaceStats.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RaceStats.ErrorMask);

        public static readonly Type ClassType = typeof(RaceStats);

        public static readonly Type GetterType = typeof(IRaceStatsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRaceStats);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RaceStats";

        public const string Name = "RaceStats";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "STRENGTH":
                    return (ushort)RaceStats_FieldIndex.Strength;
                case "INTELLIGENCE":
                    return (ushort)RaceStats_FieldIndex.Intelligence;
                case "WILLPOWER":
                    return (ushort)RaceStats_FieldIndex.Willpower;
                case "AGILITY":
                    return (ushort)RaceStats_FieldIndex.Agility;
                case "SPEED":
                    return (ushort)RaceStats_FieldIndex.Speed;
                case "ENDURANCE":
                    return (ushort)RaceStats_FieldIndex.Endurance;
                case "PERSONALITY":
                    return (ushort)RaceStats_FieldIndex.Personality;
                case "LUCK":
                    return (ushort)RaceStats_FieldIndex.Luck;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return "Strength";
                case RaceStats_FieldIndex.Intelligence:
                    return "Intelligence";
                case RaceStats_FieldIndex.Willpower:
                    return "Willpower";
                case RaceStats_FieldIndex.Agility:
                    return "Agility";
                case RaceStats_FieldIndex.Speed:
                    return "Speed";
                case RaceStats_FieldIndex.Endurance:
                    return "Endurance";
                case RaceStats_FieldIndex.Personality:
                    return "Personality";
                case RaceStats_FieldIndex.Luck:
                    return "Luck";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                case RaceStats_FieldIndex.Intelligence:
                case RaceStats_FieldIndex.Willpower:
                case RaceStats_FieldIndex.Agility:
                case RaceStats_FieldIndex.Speed:
                case RaceStats_FieldIndex.Endurance:
                case RaceStats_FieldIndex.Personality:
                case RaceStats_FieldIndex.Luck:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RaceStats_FieldIndex enu = (RaceStats_FieldIndex)index;
            switch (enu)
            {
                case RaceStats_FieldIndex.Strength:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Intelligence:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Willpower:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Agility:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Speed:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Endurance:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Personality:
                    return typeof(Byte);
                case RaceStats_FieldIndex.Luck:
                    return typeof(Byte);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RaceStatsXmlWriteTranslation);
        public const int NumStructFields = 8;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RaceStatsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RaceStatsSetterCommon
    {
        public static readonly RaceStatsSetterCommon Instance = new RaceStatsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceStats item)
        {
            ClearPartial();
            item.Strength = default;
            item.Intelligence = default;
            item.Willpower = default;
            item.Agility = default;
            item.Speed = default;
            item.Endurance = default;
            item.Personality = default;
            item.Luck = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IRaceStats item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceStatsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRaceStats item,
            MutagenFrame frame)
        {
            item.Strength = frame.ReadUInt8();
            item.Intelligence = frame.ReadUInt8();
            item.Willpower = frame.ReadUInt8();
            item.Agility = frame.ReadUInt8();
            item.Speed = frame.ReadUInt8();
            item.Endurance = frame.ReadUInt8();
            item.Personality = frame.ReadUInt8();
            item.Luck = frame.ReadUInt8();
        }
        
        public virtual void CopyInFromBinary(
            IRaceStats item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.TypelessRecordParse(
                record: item,
                frame: frame,
                setFinal: false,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class RaceStatsCommon
    {
        public static readonly RaceStatsCommon Instance = new RaceStatsCommon();

        public RaceStats.Mask<bool> GetEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RaceStats.Mask<bool>(false);
            ((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceStatsGetter item,
            IRaceStatsGetter rhs,
            RaceStats.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Strength = item.Strength == rhs.Strength;
            ret.Intelligence = item.Intelligence == rhs.Intelligence;
            ret.Willpower = item.Willpower == rhs.Willpower;
            ret.Agility = item.Agility == rhs.Agility;
            ret.Speed = item.Speed == rhs.Speed;
            ret.Endurance = item.Endurance == rhs.Endurance;
            ret.Personality = item.Personality == rhs.Personality;
            ret.Luck = item.Luck == rhs.Luck;
        }
        
        public string ToString(
            IRaceStatsGetter item,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRaceStatsGetter item,
            FileGeneration fg,
            string? name = null,
            RaceStats.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RaceStats =>");
            }
            else
            {
                fg.AppendLine($"{name} (RaceStats) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRaceStatsGetter item,
            FileGeneration fg,
            RaceStats.Mask<bool>? printMask = null)
        {
            if (printMask?.Strength ?? true)
            {
                fg.AppendItem(item.Strength, "Strength");
            }
            if (printMask?.Intelligence ?? true)
            {
                fg.AppendItem(item.Intelligence, "Intelligence");
            }
            if (printMask?.Willpower ?? true)
            {
                fg.AppendItem(item.Willpower, "Willpower");
            }
            if (printMask?.Agility ?? true)
            {
                fg.AppendItem(item.Agility, "Agility");
            }
            if (printMask?.Speed ?? true)
            {
                fg.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Endurance ?? true)
            {
                fg.AppendItem(item.Endurance, "Endurance");
            }
            if (printMask?.Personality ?? true)
            {
                fg.AppendItem(item.Personality, "Personality");
            }
            if (printMask?.Luck ?? true)
            {
                fg.AppendItem(item.Luck, "Luck");
            }
        }
        
        public bool HasBeenSet(
            IRaceStatsGetter item,
            RaceStats.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRaceStatsGetter item,
            RaceStats.Mask<bool> mask)
        {
            mask.Strength = true;
            mask.Intelligence = true;
            mask.Willpower = true;
            mask.Agility = true;
            mask.Speed = true;
            mask.Endurance = true;
            mask.Personality = true;
            mask.Luck = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceStatsGetter? lhs,
            IRaceStatsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Strength != rhs.Strength) return false;
            if (lhs.Intelligence != rhs.Intelligence) return false;
            if (lhs.Willpower != rhs.Willpower) return false;
            if (lhs.Agility != rhs.Agility) return false;
            if (lhs.Speed != rhs.Speed) return false;
            if (lhs.Endurance != rhs.Endurance) return false;
            if (lhs.Personality != rhs.Personality) return false;
            if (lhs.Luck != rhs.Luck) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRaceStatsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Strength);
            hash.Add(item.Intelligence);
            hash.Add(item.Willpower);
            hash.Add(item.Agility);
            hash.Add(item.Speed);
            hash.Add(item.Endurance);
            hash.Add(item.Personality);
            hash.Add(item.Luck);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return RaceStats.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRaceStatsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RaceStatsSetterTranslationCommon
    {
        public static readonly RaceStatsSetterTranslationCommon Instance = new RaceStatsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRaceStats item,
            IRaceStatsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Strength) ?? true))
            {
                item.Strength = rhs.Strength;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Intelligence) ?? true))
            {
                item.Intelligence = rhs.Intelligence;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Willpower) ?? true))
            {
                item.Willpower = rhs.Willpower;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Agility) ?? true))
            {
                item.Agility = rhs.Agility;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Endurance) ?? true))
            {
                item.Endurance = rhs.Endurance;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Personality) ?? true))
            {
                item.Personality = rhs.Personality;
            }
            if ((copyMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Luck) ?? true))
            {
                item.Luck = rhs.Luck;
            }
        }
        
        #endregion
        
        public RaceStats DeepCopy(
            IRaceStatsGetter item,
            RaceStats.TranslationMask? copyMask = null)
        {
            RaceStats ret = (RaceStats)((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceStats DeepCopy(
            IRaceStatsGetter item,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? copyMask = null)
        {
            RaceStats ret = (RaceStats)((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RaceStats DeepCopy(
            IRaceStatsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RaceStats ret = (RaceStats)((RaceStatsCommon)((IRaceStatsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RaceStats
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static RaceStats_Registration Registration => RaceStats_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceStatsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return RaceStatsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceStatsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceStatsXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RaceStatsXmlWriteTranslation Instance = new RaceStatsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRaceStatsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Strength) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Strength),
                    item: item.Strength,
                    fieldIndex: (int)RaceStats_FieldIndex.Strength,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Intelligence) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Intelligence),
                    item: item.Intelligence,
                    fieldIndex: (int)RaceStats_FieldIndex.Intelligence,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Willpower) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Willpower),
                    item: item.Willpower,
                    fieldIndex: (int)RaceStats_FieldIndex.Willpower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Agility) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Agility),
                    item: item.Agility,
                    fieldIndex: (int)RaceStats_FieldIndex.Agility,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Speed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Speed),
                    item: item.Speed,
                    fieldIndex: (int)RaceStats_FieldIndex.Speed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Endurance) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Endurance),
                    item: item.Endurance,
                    fieldIndex: (int)RaceStats_FieldIndex.Endurance,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Personality) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Personality),
                    item: item.Personality,
                    fieldIndex: (int)RaceStats_FieldIndex.Personality,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)RaceStats_FieldIndex.Luck) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Luck),
                    item: item.Luck,
                    fieldIndex: (int)RaceStats_FieldIndex.Luck,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IRaceStatsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RaceStats");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RaceStats");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRaceStatsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRaceStatsGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IRaceStatsGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RaceStatsXmlCreateTranslation
    {
        public readonly static RaceStatsXmlCreateTranslation Instance = new RaceStatsXmlCreateTranslation();

        public static void FillPublicXml(
            IRaceStats item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RaceStatsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRaceStats item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Strength":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Strength);
                    try
                    {
                        item.Strength = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Intelligence":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Intelligence);
                    try
                    {
                        item.Intelligence = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Willpower":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Willpower);
                    try
                    {
                        item.Willpower = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Agility":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Agility);
                    try
                    {
                        item.Agility = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Speed":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Speed);
                    try
                    {
                        item.Speed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Endurance":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Endurance);
                    try
                    {
                        item.Endurance = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Personality":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Personality);
                    try
                    {
                        item.Personality = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Luck":
                    errorMask?.PushIndex((int)RaceStats_FieldIndex.Luck);
                    try
                    {
                        item.Luck = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RaceStatsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRaceStatsGetter item,
            XElement node,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RaceStats.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            string path,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            Stream stream,
            out RaceStats.ErrorMask errorMask,
            RaceStats.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            XElement node,
            string? name = null,
            RaceStats.TranslationMask? translationMask = null)
        {
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRaceStatsGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RaceStatsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceStatsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RaceStatsBinaryWriteTranslation Instance = new RaceStatsBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRaceStatsGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Strength);
            writer.Write(item.Intelligence);
            writer.Write(item.Willpower);
            writer.Write(item.Agility);
            writer.Write(item.Speed);
            writer.Write(item.Endurance);
            writer.Write(item.Personality);
            writer.Write(item.Luck);
        }

        public void Write(
            MutagenWriter writer,
            IRaceStatsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRaceStatsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RaceStatsBinaryCreateTranslation
    {
        public readonly static RaceStatsBinaryCreateTranslation Instance = new RaceStatsBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RaceStatsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRaceStatsGetter item,
            MutagenWriter writer)
        {
            ((RaceStatsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RaceStatsBinaryOverlay :
        BinaryOverlay,
        IRaceStatsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RaceStats_Registration.Instance;
        public static RaceStats_Registration Registration => RaceStats_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => RaceStatsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => RaceStatsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRaceStatsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRaceStatsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRaceStatsGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => RaceStatsXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RaceStatsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => RaceStatsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RaceStatsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte Strength => _data.Span[0];
        public Byte Intelligence => _data.Span[1];
        public Byte Willpower => _data.Span[2];
        public Byte Agility => _data.Span[3];
        public Byte Speed => _data.Span[4];
        public Byte Endurance => _data.Span[5];
        public Byte Personality => _data.Span[6];
        public Byte Luck => _data.Span[7];
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RaceStatsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RaceStatsBinaryOverlay RaceStatsFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RaceStatsBinaryOverlay(
                bytes: stream.RemainingMemory.Slice(0, 8),
                package: package);
            int offset = stream.Position;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RaceStatsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

