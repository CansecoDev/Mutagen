/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public abstract partial class RegionData :
        IRegionDataInternal,
        ILoquiObjectSetter<RegionData>,
        IEquatable<RegionData>,
        IEqualsMask
    {
        #region Ctor
        public RegionData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DataType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionData.RegionDataType _DataType;
        public RegionData.RegionDataType DataType
        {
            get => this._DataType;
            protected set
            {
                this.RDATDataTypeState |= RDATDataType.Has;
                this._DataType = value;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RegionData.RegionDataType IRegionDataInternal.DataType
        {
            get => this.DataType;
            set => this.DataType = value;
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RegionData.RegionDataFlag _Flags;
        public RegionData.RegionDataFlag Flags
        {
            get => this._Flags;
            set
            {
                this.RDATDataTypeState |= RDATDataType.Has;
                this._Flags = value;
            }
        }
        #endregion
        #region Priority
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte _Priority;
        public Byte Priority
        {
            get => this._Priority;
            set
            {
                this.RDATDataTypeState |= RDATDataType.Has;
                this._Priority = value;
            }
        }
        #endregion
        #region RDATDataTypeState
        public RegionData.RDATDataType RDATDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public virtual void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionDataGetter rhs)) return false;
            return ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RegionData obj)
        {
            return ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionDataCommon)((IRegionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object XmlWriteTranslator => RegionDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RegionDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static RegionData CreateFromXml(
            XElement node,
            RegionData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionData CreateFromXml(
            XElement node,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static RegionData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (!LoquiXmlTranslation.Instance.TryCreate<RegionData>(node, out var ret, errorMask, translationMask))
            {
                throw new ArgumentException($"Unknown RegionData subclass: {node.Name.LocalName}");
            }
            ((RegionDataSetterCommon)((IRegionDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RegionData CreateFromXml(
            string path,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            string path,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionData CreateFromXml(
            Stream stream,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            Stream stream,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.DataType = initialValue;
                this.Flags = initialValue;
                this.Priority = initialValue;
                this.RDATDataTypeState = initialValue;
            }

            public Mask(
                TItem DataType,
                TItem Flags,
                TItem Priority,
                TItem RDATDataTypeState)
            {
                this.DataType = DataType;
                this.Flags = Flags;
                this.Priority = Priority;
                this.RDATDataTypeState = RDATDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DataType;
            public TItem Flags;
            public TItem Priority;
            public TItem RDATDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.DataType, rhs.DataType)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.RDATDataTypeState, rhs.RDATDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.DataType?.GetHashCode());
                ret = ret.CombineHashCode(this.Flags?.GetHashCode());
                ret = ret.CombineHashCode(this.Priority?.GetHashCode());
                ret = ret.CombineHashCode(this.RDATDataTypeState?.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.DataType)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.RDATDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.DataType)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.RDATDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RegionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.DataType = eval(this.DataType);
                obj.Flags = eval(this.Flags);
                obj.Priority = eval(this.Priority);
                obj.RDATDataTypeState = eval(this.RDATDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RegionData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RegionData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RegionData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.DataType ?? true)
                    {
                        fg.AppendItem(DataType, "DataType");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        fg.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.RDATDataTypeState ?? true)
                    {
                        fg.AppendItem(RDATDataTypeState, "RDATDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? DataType;
            public Exception? Flags;
            public Exception? Priority;
            public Exception? RDATDataTypeState;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
                switch (enu)
                {
                    case RegionData_FieldIndex.DataType:
                        return DataType;
                    case RegionData_FieldIndex.Flags:
                        return Flags;
                    case RegionData_FieldIndex.Priority:
                        return Priority;
                    case RegionData_FieldIndex.RDATDataTypeState:
                        return RDATDataTypeState;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
                switch (enu)
                {
                    case RegionData_FieldIndex.DataType:
                        this.DataType = ex;
                        break;
                    case RegionData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case RegionData_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case RegionData_FieldIndex.RDATDataTypeState:
                        this.RDATDataTypeState = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
                switch (enu)
                {
                    case RegionData_FieldIndex.DataType:
                        this.DataType = (Exception?)obj;
                        break;
                    case RegionData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case RegionData_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case RegionData_FieldIndex.RDATDataTypeState:
                        this.RDATDataTypeState = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (DataType != null) return true;
                if (Flags != null) return true;
                if (Priority != null) return true;
                if (RDATDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public virtual void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected virtual void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(DataType, "DataType");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(Priority, "Priority");
                fg.AppendItem(RDATDataTypeState, "RDATDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DataType = this.DataType.Combine(rhs.DataType);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.RDATDataTypeState = this.RDATDataTypeState.Combine(rhs.RDATDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool DataType;
            public bool Flags;
            public bool Priority;
            public bool RDATDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.DataType = defaultOn;
                this.Flags = defaultOn;
                this.Priority = defaultOn;
                this.RDATDataTypeState = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((DataType, null));
                ret.Add((Flags, null));
                ret.Add((Priority, null));
                ret.Add((RDATDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = RegionData_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum RDATDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual IEnumerable<ILinkGetter> Links => RegionDataCommon.Instance.GetLinks(this);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => RegionDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static RegionData GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionData :
        IRegionDataGetter,
        ILoquiObjectSetter<IRegionDataInternal>
    {
        new RegionData.RegionDataFlag Flags { get; set; }
        new Byte Priority { get; set; }
        new RegionData.RDATDataType RDATDataTypeState { get; set; }
    }

    public partial interface IRegionDataInternal :
        IRegionData,
        IRegionDataGetter
    {
        new RegionData.RegionDataType DataType { get; set; }
    }

    public partial interface IRegionDataGetter :
        ILoquiObject,
        ILoquiObject<IRegionDataGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        RegionData.RegionDataType DataType { get; }
        RegionData.RegionDataFlag Flags { get; }
        Byte Priority { get; }
        RegionData.RDATDataType RDATDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class RegionDataMixIn
    {
        public static void Clear(this IRegionDataInternal item)
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RegionData.Mask<bool> GetEqualsMask(
            this IRegionDataGetter item,
            IRegionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionDataGetter item,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionDataGetter item,
            FileGeneration fg,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionDataGetter item,
            RegionData.Mask<bool?> checkMask)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionData.Mask<bool> GetHasBeenSetMask(this IRegionDataGetter item)
        {
            var ret = new RegionData.Mask<bool>(false);
            ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionDataGetter item,
            IRegionDataGetter rhs)
        {
            return ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRegionDataInternal lhs,
            IRegionDataGetter rhs,
            RegionData.TranslationMask? copyMask = null)
        {
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IRegionDataInternal lhs,
            IRegionDataGetter rhs,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RegionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRegionDataInternal lhs,
            IRegionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RegionDataSetterTranslationCommon)((IRegionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RegionData DeepCopy(
            this IRegionDataGetter item,
            RegionData.TranslationMask? copyMask = null)
        {
            return ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RegionData DeepCopy(
            this IRegionDataGetter item,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? copyMask = null)
        {
            return ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RegionData DeepCopy(
            this IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RegionDataSetterTranslationCommon)((IRegionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataInternal item,
            XElement node,
            RegionData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionDataInternal item,
            XElement node,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            string path,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            string path,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            Stream stream,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            Stream stream,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionDataInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RegionData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionDataInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRegionDataInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataSetterCommon)((IRegionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionData_FieldIndex
    {
        DataType = 0,
        Flags = 1,
        Priority = 2,
        RDATDataTypeState = 3,
    }
    #endregion

    #region Registration
    public partial class RegionData_Registration : ILoquiRegistration
    {
        public static readonly RegionData_Registration Instance = new RegionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 109,
            version: 0);

        public const string GUID = "46664e25-f4ef-428c-b13f-c81ff3127714";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(RegionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionData.ErrorMask);

        public static readonly Type ClassType = typeof(RegionData);

        public static readonly Type GetterType = typeof(IRegionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionData);

        public static readonly Type? InternalSetterType = typeof(IRegionDataInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionData";

        public const string Name = "RegionData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "DATATYPE":
                    return (ushort)RegionData_FieldIndex.DataType;
                case "FLAGS":
                    return (ushort)RegionData_FieldIndex.Flags;
                case "PRIORITY":
                    return (ushort)RegionData_FieldIndex.Priority;
                case "RDATDATATYPESTATE":
                    return (ushort)RegionData_FieldIndex.RDATDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return "DataType";
                case RegionData_FieldIndex.Flags:
                    return "Flags";
                case RegionData_FieldIndex.Priority:
                    return "Priority";
                case RegionData_FieldIndex.RDATDataTypeState:
                    return "RDATDataTypeState";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return true;
                case RegionData_FieldIndex.Flags:
                case RegionData_FieldIndex.Priority:
                case RegionData_FieldIndex.RDATDataTypeState:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionData_FieldIndex enu = (RegionData_FieldIndex)index;
            switch (enu)
            {
                case RegionData_FieldIndex.DataType:
                    return typeof(RegionData.RegionDataType);
                case RegionData_FieldIndex.Flags:
                    return typeof(RegionData.RegionDataFlag);
                case RegionData_FieldIndex.Priority:
                    return typeof(Byte);
                case RegionData_FieldIndex.RDATDataTypeState:
                    return typeof(RegionData.RDATDataType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionDataXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(RegionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionDataSetterCommon
    {
        public static readonly RegionDataSetterCommon Instance = new RegionDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IRegionDataInternal item)
        {
            ClearPartial();
            item.Flags = default;
            item.Priority = default;
            item.RDATDataTypeState = default;
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IRegionDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasRDATDataType":
                    item.RDATDataTypeState |= RegionData.RDATDataType.Has;
                    break;
                case "DataType":
                    errorMask?.PushIndex((int)RegionData_FieldIndex.DataType);
                    try
                    {
                        item.DataType = EnumXmlTranslation<RegionData.RegionDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.RDATDataTypeState |= RegionData.RDATDataType.Has;
                    break;
                default:
                    break;
            }
        }
        
        public void CopyInFromXml(
            IRegionDataInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IRegionDataInternal item,
            MutagenFrame frame)
        {
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IRegionDataInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54414452: // RDAT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.RDATDataTypeState = RegionData.RDATDataType.Has;
                    }
                    item.DataType = EnumBinaryTranslation<RegionData.RegionDataType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Flags = EnumBinaryTranslation<RegionData.RegionDataFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(1));
                    item.Priority = dataFrame.ReadUInt8();
                    dataFrame.SetPosition(dataFrame.Position + 2);
                    return TryGet<int?>.Succeed((int)RegionData_FieldIndex.Priority);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
        
        public void CopyInFromBinary(
            IRegionDataInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
        }
        
        #endregion
        
    }
    public partial class RegionDataCommon
    {
        public static readonly RegionDataCommon Instance = new RegionDataCommon();

        public RegionData.Mask<bool> GetEqualsMask(
            IRegionDataGetter item,
            IRegionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionData.Mask<bool>(false);
            ((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionDataGetter item,
            IRegionDataGetter rhs,
            RegionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.DataType = item.DataType == rhs.DataType;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
            ret.RDATDataTypeState = item.RDATDataTypeState == rhs.RDATDataTypeState;
        }
        
        public string ToString(
            IRegionDataGetter item,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionDataGetter item,
            FileGeneration fg,
            string? name = null,
            RegionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionData =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionDataGetter item,
            FileGeneration fg,
            RegionData.Mask<bool>? printMask = null)
        {
            if (printMask?.DataType ?? true)
            {
                fg.AppendItem(item.DataType, "DataType");
            }
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Priority ?? true)
            {
                fg.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.RDATDataTypeState ?? true)
            {
                fg.AppendItem(item.RDATDataTypeState, "RDATDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            IRegionDataGetter item,
            RegionData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IRegionDataGetter item,
            RegionData.Mask<bool> mask)
        {
            mask.DataType = true;
            mask.Flags = true;
            mask.Priority = true;
            mask.RDATDataTypeState = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionDataGetter? lhs,
            IRegionDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.DataType != rhs.DataType) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.Priority != rhs.Priority) return false;
            if (lhs.RDATDataTypeState != rhs.RDATDataTypeState) return false;
            return true;
        }
        
        public virtual int GetHashCode(IRegionDataGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.DataType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Priority).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.RDATDataTypeState).CombineHashCode(ret);
            return ret;
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return RegionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IRegionDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class RegionDataSetterTranslationCommon
    {
        public static readonly RegionDataSetterTranslationCommon Instance = new RegionDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public virtual void DeepCopyIn(
            IRegionDataInternal item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RegionData_FieldIndex.DataType) ?? true))
            {
                item.DataType = rhs.DataType;
            }
            DeepCopyIn(
                (IRegionData)item,
                (IRegionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public virtual void DeepCopyIn(
            IRegionData item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)RegionData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)RegionData_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)RegionData_FieldIndex.RDATDataTypeState) ?? true))
            {
                item.RDATDataTypeState = rhs.RDATDataTypeState;
            }
        }
        
        #endregion
        
        public RegionData DeepCopy(
            IRegionDataGetter item,
            RegionData.TranslationMask? copyMask = null)
        {
            RegionData ret = (RegionData)((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionData DeepCopy(
            IRegionDataGetter item,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? copyMask = null)
        {
            RegionData ret = (RegionData)((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionData DeepCopy(
            IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RegionData ret = (RegionData)((RegionDataCommon)((IRegionDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RegionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionData_Registration.Instance;
        public static RegionData_Registration Registration => RegionData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => RegionDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return RegionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => RegionDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static RegionDataXmlWriteTranslation Instance = new RegionDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if (item.RDATDataTypeState.HasFlag(RegionData.RDATDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.DataType) ?? true))
                {
                    EnumXmlTranslation<RegionData.RegionDataType>.Instance.Write(
                        node: node,
                        name: nameof(item.DataType),
                        item: item.DataType,
                        fieldIndex: (int)RegionData_FieldIndex.DataType,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.Flags) ?? true))
                {
                    EnumXmlTranslation<RegionData.RegionDataFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flags),
                        item: item.Flags,
                        fieldIndex: (int)RegionData_FieldIndex.Flags,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.Priority) ?? true))
                {
                    ByteXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Priority),
                        item: item.Priority,
                        fieldIndex: (int)RegionData_FieldIndex.Priority,
                        errorMask: errorMask);
                }
            }
            if ((translationMask?.GetShouldTranslate((int)RegionData_FieldIndex.RDATDataTypeState) ?? true))
            {
                EnumXmlTranslation<RegionData.RDATDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.RDATDataTypeState),
                    item: item.RDATDataTypeState,
                    fieldIndex: (int)RegionData_FieldIndex.RDATDataTypeState,
                    errorMask: errorMask);
            }
        }

        public virtual void Write(
            XElement node,
            IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public virtual void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRegionDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IRegionDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class RegionDataXmlCreateTranslation
    {
        public readonly static RegionDataXmlCreateTranslation Instance = new RegionDataXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionDataInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionDataInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Flags":
                    errorMask?.PushIndex((int)RegionData_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<RegionData.RegionDataFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Priority":
                    errorMask?.PushIndex((int)RegionData_FieldIndex.Priority);
                    try
                    {
                        item.Priority = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RDATDataTypeState":
                    errorMask?.PushIndex((int)RegionData_FieldIndex.RDATDataTypeState);
                    try
                    {
                        item.RDATDataTypeState = EnumXmlTranslation<RegionData.RDATDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionDataGetter item,
            XElement node,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            string path,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            Stream stream,
            out RegionData.ErrorMask errorMask,
            RegionData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            XElement node,
            string? name = null,
            RegionData.TranslationMask? translationMask = null)
        {
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((RegionDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static RegionDataBinaryWriteTranslation Instance = new RegionDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IRegionDataGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IRegionDataGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            if (item.RDATDataTypeState.HasFlag(RegionData.RDATDataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(RegionData_Registration.RDAT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataType>.Instance.Write(
                        writer,
                        item.DataType,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<RegionData.RegionDataFlag>.Instance.Write(
                        writer,
                        item.Flags,
                        length: 1);
                    writer.Write(item.Priority);
                    writer.WriteZeros(2);
                }
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            IRegionDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: RegionData_Registration.RDAT_HEADER,
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RegionDataBinaryCreateTranslation
    {
        public readonly static RegionDataBinaryCreateTranslation Instance = new RegionDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IRegionDataGetter item,
            MutagenWriter writer)
        {
            ((RegionDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionDataBinaryOverlay :
        BinaryOverlay,
        IRegionDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionData_Registration.Instance;
        public static RegionData_Registration Registration => RegionData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => RegionDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => RegionDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IRegionDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IRegionDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionDataGetter)rhs, include);

        public virtual IEnumerable<ILinkGetter> Links => RegionDataCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object XmlWriteTranslator => RegionDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RegionDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => RegionDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        private int? _RDATLocation;
        public RegionData.RDATDataType RDATDataTypeState { get; private set; }
        #region DataType
        private int _DataTypeLocation => _RDATLocation!.Value + 0x0;
        private bool _DataType_IsSet => _RDATLocation.HasValue;
        public RegionData.RegionDataType DataType => _DataType_IsSet ? (RegionData.RegionDataType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_DataTypeLocation, 4)) : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _RDATLocation!.Value + 0x4;
        private bool _Flags_IsSet => _RDATLocation.HasValue;
        public RegionData.RegionDataFlag Flags => _Flags_IsSet ? (RegionData.RegionDataFlag)_data.Span.Slice(_FlagsLocation, 1)[0] : default;
        #endregion
        #region Priority
        private int _PriorityLocation => _RDATLocation!.Value + 0x5;
        private bool _Priority_IsSet => _RDATLocation.HasValue;
        public Byte Priority => _Priority_IsSet ? _data.Span[_PriorityLocation] : default;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected RegionDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public virtual TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54414452: // RDAT
                {
                    _RDATLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.RDATDataTypeState = RegionData.RDATDataType.Has;
                    return TryGet<int?>.Succeed((int)RegionData_FieldIndex.Priority);
                }
                default:
                    return TryGet<int?>.Failure;
            }
        }
    }

}
#endregion

#endregion

