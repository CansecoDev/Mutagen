/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class RegionSounds :
        RegionData,
        IRegionSounds,
        ILoquiObjectSetter<RegionSounds>,
        IEquatable<RegionSounds>,
        IEqualsMask
    {
        #region Ctor
        public RegionSounds()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MusicType
        public MusicType? MusicType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MusicType? IRegionSoundsGetter.MusicType => this.MusicType;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RegionSound>? _Sounds;
        public ExtendedList<RegionSound>? Sounds
        {
            get => this._Sounds;
            set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRegionSoundGetter>? IRegionSoundsGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionSoundsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IRegionSoundsGetter rhs)) return false;
            return ((RegionSoundsCommon)((IRegionSoundsGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(RegionSounds obj)
        {
            return ((RegionSoundsCommon)((IRegionSoundsGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((RegionSoundsCommon)((IRegionSoundsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RegionSoundsXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RegionSoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new RegionSounds CreateFromXml(
            XElement node,
            RegionSounds.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static RegionSounds CreateFromXml(
            XElement node,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionSounds.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static RegionSounds CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new RegionSounds();
            ((RegionSoundsSetterCommon)((IRegionSoundsGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static RegionSounds CreateFromXml(
            string path,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RegionSounds CreateFromXml(
            string path,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionSounds CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static RegionSounds CreateFromXml(
            Stream stream,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static RegionSounds CreateFromXml(
            Stream stream,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static RegionSounds CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            RegionData.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.MusicType = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RegionSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RegionSound.Mask<TItem>?>>());
            }

            public Mask(
                TItem Header,
                TItem MusicType,
                TItem Sounds)
            : base(Header: Header)
            {
                this.MusicType = MusicType;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RegionSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, RegionSound.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MusicType;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RegionSound.Mask<TItem>?>>?>? Sounds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MusicType);
                hash.Add(this.Sounds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.MusicType)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.MusicType)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new RegionSounds.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.MusicType = eval(this.MusicType);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RegionSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, RegionSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RegionSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, RegionSound.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, RegionSound.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(RegionSounds.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, RegionSounds.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(RegionSounds.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.MusicType ?? true)
                    {
                        fg.AppendItem(MusicType, "MusicType");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds.TryGet(out var SoundsItem))
                    {
                        fg.AppendLine("Sounds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            RegionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? MusicType;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionSound.ErrorMask?>>?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
                switch (enu)
                {
                    case RegionSounds_FieldIndex.MusicType:
                        return MusicType;
                    case RegionSounds_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
                switch (enu)
                {
                    case RegionSounds_FieldIndex.MusicType:
                        this.MusicType = ex;
                        break;
                    case RegionSounds_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionSound.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
                switch (enu)
                {
                    case RegionSounds_FieldIndex.MusicType:
                        this.MusicType = (Exception?)obj;
                        break;
                    case RegionSounds_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionSound.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (MusicType != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(MusicType, "MusicType");
                if (Sounds.TryGet(out var SoundsItem))
                {
                    fg.AppendLine("Sounds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MusicType = this.MusicType.Combine(rhs.MusicType);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RegionSound.ErrorMask?>>?>(ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            RegionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool MusicType;
            public MaskItem<bool, RegionSound.TranslationMask?> Sounds;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.MusicType = defaultOn;
                this.Sounds = new MaskItem<bool, RegionSound.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((MusicType, null));
                ret.Add((Sounds?.Overall ?? true, Sounds?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = RegionSounds_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RegionSoundsCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RegionSoundsCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RegionSoundsCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RegionSoundsCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RegionSoundsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionSoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new RegionSounds CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static RegionSounds CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RegionSounds();
            ((RegionSoundsSetterCommon)((IRegionSoundsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionSoundsGetter)rhs, include);

        void IClearable.Clear()
        {
            ((RegionSoundsSetterCommon)((IRegionSoundsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new RegionSounds GetNew()
        {
            return new RegionSounds();
        }

    }
    #endregion

    #region Interface
    public partial interface IRegionSounds :
        IRegionSoundsGetter,
        IRegionData,
        ILoquiObjectSetter<IRegionSounds>
    {
        new MusicType? MusicType { get; set; }
        new ExtendedList<RegionSound>? Sounds { get; set; }
    }

    public partial interface IRegionSoundsGetter :
        IRegionDataGetter,
        ILoquiObject<IRegionSoundsGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => RegionSounds_Registration.Instance;
        MusicType? MusicType { get; }
        IReadOnlyList<IRegionSoundGetter>? Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RegionSoundsMixIn
    {
        public static void Clear(this IRegionSounds item)
        {
            ((RegionSoundsSetterCommon)((IRegionSoundsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static RegionSounds.Mask<bool> GetEqualsMask(
            this IRegionSoundsGetter item,
            IRegionSoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IRegionSoundsGetter item,
            string? name = null,
            RegionSounds.Mask<bool>? printMask = null)
        {
            return ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IRegionSoundsGetter item,
            FileGeneration fg,
            string? name = null,
            RegionSounds.Mask<bool>? printMask = null)
        {
            ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IRegionSoundsGetter item,
            RegionSounds.Mask<bool?> checkMask)
        {
            return ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static RegionSounds.Mask<bool> GetHasBeenSetMask(this IRegionSoundsGetter item)
        {
            var ret = new RegionSounds.Mask<bool>(false);
            ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IRegionSoundsGetter item,
            IRegionSoundsGetter rhs)
        {
            return ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IRegionSounds lhs,
            IRegionSoundsGetter rhs,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionSoundsSetterTranslationCommon)((IRegionSoundsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = RegionSounds.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRegionSounds lhs,
            IRegionSoundsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RegionSoundsSetterTranslationCommon)((IRegionSoundsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static RegionSounds DeepCopy(
            this IRegionSoundsGetter item,
            RegionSounds.TranslationMask? copyMask = null)
        {
            return ((RegionSoundsSetterTranslationCommon)((IRegionSoundsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static RegionSounds DeepCopy(
            this IRegionSoundsGetter item,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? copyMask = null)
        {
            return ((RegionSoundsSetterTranslationCommon)((IRegionSoundsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static RegionSounds DeepCopy(
            this IRegionSoundsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RegionSoundsSetterTranslationCommon)((IRegionSoundsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionSounds item,
            XElement node,
            RegionSounds.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IRegionSounds item,
            XElement node,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionSounds.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((RegionSoundsSetterCommon)((IRegionSoundsGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            string path,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            string path,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            string path,
            ErrorMaskBuilder? errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            Stream stream,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            Stream stream,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IRegionSounds item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            RegionSounds.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IRegionSounds item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IRegionSounds item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionSoundsSetterCommon)((IRegionSoundsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum RegionSounds_FieldIndex
    {
        Header = 0,
        MusicType = 1,
        Sounds = 2,
    }
    #endregion

    #region Registration
    public partial class RegionSounds_Registration : ILoquiRegistration
    {
        public static readonly RegionSounds_Registration Instance = new RegionSounds_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 114,
            version: 0);

        public const string GUID = "45ee0280-5f00-4126-9120-50ed00cc27c3";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(RegionSounds.Mask<>);

        public static readonly Type ErrorMaskType = typeof(RegionSounds.ErrorMask);

        public static readonly Type ClassType = typeof(RegionSounds);

        public static readonly Type GetterType = typeof(IRegionSoundsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRegionSounds);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.RegionSounds";

        public const string Name = "RegionSounds";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MUSICTYPE":
                    return (ushort)RegionSounds_FieldIndex.MusicType;
                case "SOUNDS":
                    return (ushort)RegionSounds_FieldIndex.Sounds;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.Sounds:
                    return true;
                case RegionSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.Sounds:
                    return true;
                case RegionSounds_FieldIndex.MusicType:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.MusicType:
                case RegionSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.MusicType:
                    return "MusicType";
                case RegionSounds_FieldIndex.Sounds:
                    return "Sounds";
                default:
                    return RegionData_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.MusicType:
                case RegionSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.MusicType:
                case RegionSounds_FieldIndex.Sounds:
                    return false;
                default:
                    return RegionData_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            RegionSounds_FieldIndex enu = (RegionSounds_FieldIndex)index;
            switch (enu)
            {
                case RegionSounds_FieldIndex.MusicType:
                    return typeof(MusicType);
                case RegionSounds_FieldIndex.Sounds:
                    return typeof(ExtendedList<RegionSound>);
                default:
                    return RegionData_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(RegionSoundsXmlWriteTranslation);
        public static readonly RecordType RDAT_HEADER = new RecordType("RDAT");
        public static readonly RecordType RDMD_HEADER = new RecordType("RDMD");
        public static readonly RecordType RDSD_HEADER = new RecordType("RDSD");
        public static readonly RecordType TriggeringRecordType = RDAT_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 2;
        public static readonly Type BinaryWriteTranslation = typeof(RegionSoundsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class RegionSoundsSetterCommon : RegionDataSetterCommon
    {
        public new static readonly RegionSoundsSetterCommon Instance = new RegionSoundsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRegionSounds item)
        {
            ClearPartial();
            item.MusicType = default;
            item.Sounds = null;
            base.Clear(item);
        }
        
        public override void Clear(IRegionData item)
        {
            Clear(item: (IRegionSounds)item);
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IRegionSounds item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionSoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IRegionData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (RegionSounds)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRegionSounds item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: RegionSoundsBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RegionSoundsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IRegionData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (RegionSounds)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class RegionSoundsCommon : RegionDataCommon
    {
        public new static readonly RegionSoundsCommon Instance = new RegionSoundsCommon();

        public RegionSounds.Mask<bool> GetEqualsMask(
            IRegionSoundsGetter item,
            IRegionSoundsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new RegionSounds.Mask<bool>(false);
            ((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRegionSoundsGetter item,
            IRegionSoundsGetter rhs,
            RegionSounds.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.MusicType = item.MusicType == rhs.MusicType;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IRegionSoundsGetter item,
            string? name = null,
            RegionSounds.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IRegionSoundsGetter item,
            FileGeneration fg,
            string? name = null,
            RegionSounds.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"RegionSounds =>");
            }
            else
            {
                fg.AppendLine($"{name} (RegionSounds) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IRegionSoundsGetter item,
            FileGeneration fg,
            RegionSounds.Mask<bool>? printMask = null)
        {
            RegionDataCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.MusicType ?? true)
                && item.MusicType.TryGet(out var MusicTypeItem))
            {
                fg.AppendItem(MusicTypeItem, "MusicType");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds.TryGet(out var SoundsItem))
            {
                fg.AppendLine("Sounds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SoundsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IRegionSoundsGetter item,
            RegionSounds.Mask<bool?> checkMask)
        {
            if (checkMask.MusicType.HasValue && checkMask.MusicType.Value != (item.MusicType != null)) return false;
            if (checkMask.Sounds?.Overall.HasValue ?? false && checkMask.Sounds!.Overall.Value != (item.Sounds != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IRegionSoundsGetter item,
            RegionSounds.Mask<bool> mask)
        {
            mask.MusicType = (item.MusicType != null);
            if (item.Sounds.TryGet(out var SoundsItem))
            {
                mask.Sounds = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, RegionSound.Mask<bool>?>>?>(true, SoundsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, RegionSound.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static RegionSounds_FieldIndex ConvertFieldIndex(RegionData_FieldIndex index)
        {
            switch (index)
            {
                case RegionData_FieldIndex.Header:
                    return (RegionSounds_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRegionSoundsGetter? lhs,
            IRegionSoundsGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.MusicType != rhs.MusicType) return false;
            if (!lhs.Sounds.SequenceEqual(rhs.Sounds)) return false;
            return true;
        }
        
        public override bool Equals(
            IRegionDataGetter? lhs,
            IRegionDataGetter? rhs)
        {
            return Equals(
                lhs: (IRegionSoundsGetter?)lhs,
                rhs: rhs as IRegionSoundsGetter);
        }
        
        public virtual int GetHashCode(IRegionSoundsGetter item)
        {
            var hash = new HashCode();
            if (item.MusicType.TryGet(out var MusicTypeitem))
            {
                hash.Add(MusicTypeitem);
            }
            hash.Add(item.Sounds);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IRegionDataGetter item)
        {
            return GetHashCode(item: (IRegionSoundsGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return RegionSounds.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IRegionSoundsGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Sounds.TryGet(out var SoundsItem))
            {
                foreach (var item in SoundsItem.SelectMany(f => f.LinkFormKeys))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IRegionSoundsGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class RegionSoundsSetterTranslationCommon : RegionDataSetterTranslationCommon
    {
        public new static readonly RegionSoundsSetterTranslationCommon Instance = new RegionSoundsSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IRegionSounds item,
            IRegionSoundsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IRegionData)item,
                (IRegionDataGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)RegionSounds_FieldIndex.MusicType) ?? true))
            {
                item.MusicType = rhs.MusicType;
            }
            if ((copyMask?.GetShouldTranslate((int)RegionSounds_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)RegionSounds_FieldIndex.Sounds);
                try
                {
                    if ((rhs.Sounds != null))
                    {
                        item.Sounds = 
                            rhs.Sounds
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<RegionSound>();
                    }
                    else
                    {
                        item.Sounds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        
        public override void DeepCopyIn(
            IRegionData item,
            IRegionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IRegionSounds)item,
                rhs: (IRegionSoundsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public RegionSounds DeepCopy(
            IRegionSoundsGetter item,
            RegionSounds.TranslationMask? copyMask = null)
        {
            RegionSounds ret = (RegionSounds)((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionSounds DeepCopy(
            IRegionSoundsGetter item,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? copyMask = null)
        {
            RegionSounds ret = (RegionSounds)((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public RegionSounds DeepCopy(
            IRegionSoundsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            RegionSounds ret = (RegionSounds)((RegionSoundsCommon)((IRegionSoundsGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class RegionSounds
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionSounds_Registration.Instance;
        public new static RegionSounds_Registration Registration => RegionSounds_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RegionSoundsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RegionSoundsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RegionSoundsSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionSoundsXmlWriteTranslation :
        RegionDataXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static RegionSoundsXmlWriteTranslation Instance = new RegionSoundsXmlWriteTranslation();

        public static void WriteToNodeXml(
            IRegionSoundsGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            RegionDataXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.MusicType != null)
                && (translationMask?.GetShouldTranslate((int)RegionSounds_FieldIndex.MusicType) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.MusicType),
                    item: item.MusicType,
                    fieldIndex: (int)RegionSounds_FieldIndex.MusicType,
                    errorMask: errorMask);
            }
            if ((item.Sounds != null)
                && (translationMask?.GetShouldTranslate((int)RegionSounds_FieldIndex.Sounds) ?? true))
            {
                ListXmlTranslation<IRegionSoundGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Sounds),
                    item: item.Sounds,
                    fieldIndex: (int)RegionSounds_FieldIndex.Sounds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)RegionSounds_FieldIndex.Sounds),
                    transl: (XElement subNode, IRegionSoundGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((RegionSoundXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
        }

        public void Write(
            XElement node,
            IRegionSoundsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.RegionSounds");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.RegionSounds");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRegionSoundsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IRegionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IRegionSoundsGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class RegionSoundsXmlCreateTranslation : RegionDataXmlCreateTranslation
    {
        public new readonly static RegionSoundsXmlCreateTranslation Instance = new RegionSoundsXmlCreateTranslation();

        public static void FillPublicXml(
            IRegionSounds item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    RegionSoundsXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IRegionSounds item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "MusicType":
                    errorMask?.PushIndex((int)RegionSounds_FieldIndex.MusicType);
                    try
                    {
                        item.MusicType = EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sounds":
                    errorMask?.PushIndex((int)RegionSounds_FieldIndex.Sounds);
                    try
                    {
                        if (ListXmlTranslation<RegionSound>.Instance.Parse(
                            node: node,
                            enumer: out var SoundsItem,
                            transl: LoquiXmlTranslation<RegionSound>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Sounds = SoundsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Sounds = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    RegionDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class RegionSoundsXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IRegionSoundsGetter item,
            XElement node,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((RegionSoundsXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = RegionSounds.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IRegionSoundsGetter item,
            string path,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IRegionSoundsGetter item,
            Stream stream,
            out RegionSounds.ErrorMask errorMask,
            RegionSounds.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionSoundsBinaryWriteTranslation :
        RegionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static RegionSoundsBinaryWriteTranslation Instance = new RegionSoundsBinaryWriteTranslation();

        public static void WriteRecordTypes(
            IRegionSoundsGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            RegionDataBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.WriteNullable(
                writer,
                item.MusicType,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(RegionSounds_Registration.RDMD_HEADER));
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IRegionSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                recordType: recordTypeConverter.ConvertToCustom(RegionSounds_Registration.RDSD_HEADER),
                transl: (MutagenWriter subWriter, IRegionSoundGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((RegionSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IRegionSoundsGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionSoundsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IRegionDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IRegionSoundsGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class RegionSoundsBinaryCreateTranslation : RegionDataBinaryCreateTranslation
    {
        public new readonly static RegionSoundsBinaryCreateTranslation Instance = new RegionSoundsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IRegionSounds item,
            MutagenFrame frame)
        {
        }

        public static TryGet<int?> FillBinaryRecordTypes(
            IRegionSounds item,
            MutagenFrame frame,
            int? lastParsed,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x444D4452: // RDMD
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MusicType = EnumBinaryTranslation<MusicType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)RegionSounds_FieldIndex.MusicType);
                }
                case 0x44534452: // RDSD
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sounds = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<RegionSound>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, out RegionSound listSubItem) =>
                            {
                                return LoquiBinaryTranslation<RegionSound>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!);
                            })
                        .ToExtendedList<RegionSound>();
                    return TryGet<int?>.Succeed((int)RegionSounds_FieldIndex.Sounds);
                }
                default:
                    return RegionDataBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RegionSoundsBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class RegionSoundsBinaryOverlay :
        RegionDataBinaryOverlay,
        IRegionSoundsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => RegionSounds_Registration.Instance;
        public new static RegionSounds_Registration Registration => RegionSounds_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RegionSoundsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RegionSoundsSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IRegionSoundsGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => RegionSoundsCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => RegionSoundsCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RegionSoundsCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RegionSoundsCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => RegionSoundsXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((RegionSoundsXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RegionSoundsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((RegionSoundsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region MusicType
        private int? _MusicTypeLocation;
        public MusicType? MusicType => _MusicTypeLocation.HasValue ? (MusicType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MusicTypeLocation!.Value, _package.MetaData.Constants)) : default(MusicType?);
        #endregion
        public IReadOnlyList<IRegionSoundGetter>? Sounds { get; private set; }
        partial void CustomFactoryEnd(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset);

        protected RegionSoundsBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static RegionSoundsBinaryOverlay RegionSoundsFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new RegionSoundsBinaryOverlay(
                bytes: stream.RemainingMemory,
                package: package);
            int offset = stream.Position;
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static RegionSoundsBinaryOverlay RegionSoundsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return RegionSoundsFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x444D4452: // RDMD
                {
                    _MusicTypeLocation = (stream.Position - offset);
                    return TryGet<int?>.Succeed((int)RegionSounds_FieldIndex.MusicType);
                }
                case 0x44534452: // RDSD
                {
                    var subMeta = _package.MetaData.Constants.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.Sounds = BinaryOverlayList<RegionSoundBinaryOverlay>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 12,
                        getter: (s, p) => RegionSoundBinaryOverlay.RegionSoundFactory(s, p));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)RegionSounds_FieldIndex.Sounds);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            RegionSoundsMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

