/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SkillData :
        ISkillData,
        ILoquiObjectSetter<SkillData>,
        IEquatable<SkillData>,
        IEqualsMask
    {
        #region Ctor
        public SkillData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Action
        public ActorValue Action { get; set; } = default;
        #endregion
        #region Attribute
        public ActorValue Attribute { get; set; } = default;
        #endregion
        #region Specialization
        public Specialization Specialization { get; set; } = default;
        #endregion
        #region UseValueFirst
        public Single UseValueFirst { get; set; } = default;
        #endregion
        #region UseValueSecond
        public Single UseValueSecond { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkillDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISkillDataGetter rhs)) return false;
            return ((SkillDataCommon)((ISkillDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SkillData obj)
        {
            return ((SkillDataCommon)((ISkillDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SkillDataCommon)((ISkillDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkillDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkillDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static SkillData CreateFromXml(
            XElement node,
            SkillData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SkillData CreateFromXml(
            XElement node,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static SkillData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SkillData();
            ((SkillDataSetterCommon)((ISkillDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SkillData CreateFromXml(
            string path,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkillData CreateFromXml(
            string path,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkillData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SkillData CreateFromXml(
            Stream stream,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SkillData CreateFromXml(
            Stream stream,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SkillData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Action = initialValue;
                this.Attribute = initialValue;
                this.Specialization = initialValue;
                this.UseValueFirst = initialValue;
                this.UseValueSecond = initialValue;
            }

            public Mask(
                TItem Action,
                TItem Attribute,
                TItem Specialization,
                TItem UseValueFirst,
                TItem UseValueSecond)
            {
                this.Action = Action;
                this.Attribute = Attribute;
                this.Specialization = Specialization;
                this.UseValueFirst = UseValueFirst;
                this.UseValueSecond = UseValueSecond;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Action;
            public TItem Attribute;
            public TItem Specialization;
            public TItem UseValueFirst;
            public TItem UseValueSecond;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Action, rhs.Action)) return false;
                if (!object.Equals(this.Attribute, rhs.Attribute)) return false;
                if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
                if (!object.Equals(this.UseValueFirst, rhs.UseValueFirst)) return false;
                if (!object.Equals(this.UseValueSecond, rhs.UseValueSecond)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Action);
                hash.Add(this.Attribute);
                hash.Add(this.Specialization);
                hash.Add(this.UseValueFirst);
                hash.Add(this.UseValueSecond);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Action)) return false;
                if (!eval(this.Attribute)) return false;
                if (!eval(this.Specialization)) return false;
                if (!eval(this.UseValueFirst)) return false;
                if (!eval(this.UseValueSecond)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Action)) return true;
                if (eval(this.Attribute)) return true;
                if (eval(this.Specialization)) return true;
                if (eval(this.UseValueFirst)) return true;
                if (eval(this.UseValueSecond)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkillData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Action = eval(this.Action);
                obj.Attribute = eval(this.Attribute);
                obj.Specialization = eval(this.Specialization);
                obj.UseValueFirst = eval(this.UseValueFirst);
                obj.UseValueSecond = eval(this.UseValueSecond);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SkillData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SkillData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SkillData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Action ?? true)
                    {
                        fg.AppendItem(Action, "Action");
                    }
                    if (printMask?.Attribute ?? true)
                    {
                        fg.AppendItem(Attribute, "Attribute");
                    }
                    if (printMask?.Specialization ?? true)
                    {
                        fg.AppendItem(Specialization, "Specialization");
                    }
                    if (printMask?.UseValueFirst ?? true)
                    {
                        fg.AppendItem(UseValueFirst, "UseValueFirst");
                    }
                    if (printMask?.UseValueSecond ?? true)
                    {
                        fg.AppendItem(UseValueSecond, "UseValueSecond");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Action;
            public Exception? Attribute;
            public Exception? Specialization;
            public Exception? UseValueFirst;
            public Exception? UseValueSecond;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
                switch (enu)
                {
                    case SkillData_FieldIndex.Action:
                        return Action;
                    case SkillData_FieldIndex.Attribute:
                        return Attribute;
                    case SkillData_FieldIndex.Specialization:
                        return Specialization;
                    case SkillData_FieldIndex.UseValueFirst:
                        return UseValueFirst;
                    case SkillData_FieldIndex.UseValueSecond:
                        return UseValueSecond;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
                switch (enu)
                {
                    case SkillData_FieldIndex.Action:
                        this.Action = ex;
                        break;
                    case SkillData_FieldIndex.Attribute:
                        this.Attribute = ex;
                        break;
                    case SkillData_FieldIndex.Specialization:
                        this.Specialization = ex;
                        break;
                    case SkillData_FieldIndex.UseValueFirst:
                        this.UseValueFirst = ex;
                        break;
                    case SkillData_FieldIndex.UseValueSecond:
                        this.UseValueSecond = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
                switch (enu)
                {
                    case SkillData_FieldIndex.Action:
                        this.Action = (Exception?)obj;
                        break;
                    case SkillData_FieldIndex.Attribute:
                        this.Attribute = (Exception?)obj;
                        break;
                    case SkillData_FieldIndex.Specialization:
                        this.Specialization = (Exception?)obj;
                        break;
                    case SkillData_FieldIndex.UseValueFirst:
                        this.UseValueFirst = (Exception?)obj;
                        break;
                    case SkillData_FieldIndex.UseValueSecond:
                        this.UseValueSecond = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Action != null) return true;
                if (Attribute != null) return true;
                if (Specialization != null) return true;
                if (UseValueFirst != null) return true;
                if (UseValueSecond != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Action, "Action");
                fg.AppendItem(Attribute, "Attribute");
                fg.AppendItem(Specialization, "Specialization");
                fg.AppendItem(UseValueFirst, "UseValueFirst");
                fg.AppendItem(UseValueSecond, "UseValueSecond");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Action = this.Action.Combine(rhs.Action);
                ret.Attribute = this.Attribute.Combine(rhs.Attribute);
                ret.Specialization = this.Specialization.Combine(rhs.Specialization);
                ret.UseValueFirst = this.UseValueFirst.Combine(rhs.UseValueFirst);
                ret.UseValueSecond = this.UseValueSecond.Combine(rhs.UseValueSecond);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Action;
            public bool Attribute;
            public bool Specialization;
            public bool UseValueFirst;
            public bool UseValueSecond;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Action = defaultOn;
                this.Attribute = defaultOn;
                this.Specialization = defaultOn;
                this.UseValueFirst = defaultOn;
                this.UseValueSecond = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Action, null));
                ret.Add((Attribute, null));
                ret.Add((Specialization, null));
                ret.Add((UseValueFirst, null));
                ret.Add((UseValueSecond, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = SkillData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SkillDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SkillDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static SkillData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static SkillData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SkillData();
            ((SkillDataSetterCommon)((ISkillDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkillDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SkillDataSetterCommon)((ISkillDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SkillData GetNew()
        {
            return new SkillData();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkillData :
        ISkillDataGetter,
        ILoquiObjectSetter<ISkillData>
    {
        new ActorValue Action { get; set; }
        new ActorValue Attribute { get; set; }
        new Specialization Specialization { get; set; }
        new Single UseValueFirst { get; set; }
        new Single UseValueSecond { get; set; }
    }

    public partial interface ISkillDataGetter :
        ILoquiObject,
        ILoquiObject<ISkillDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        ActorValue Action { get; }
        ActorValue Attribute { get; }
        Specialization Specialization { get; }
        Single UseValueFirst { get; }
        Single UseValueSecond { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SkillDataMixIn
    {
        public static void Clear(this ISkillData item)
        {
            ((SkillDataSetterCommon)((ISkillDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkillData.Mask<bool> GetEqualsMask(
            this ISkillDataGetter item,
            ISkillDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISkillDataGetter item,
            string? name = null,
            SkillData.Mask<bool>? printMask = null)
        {
            return ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISkillDataGetter item,
            FileGeneration fg,
            string? name = null,
            SkillData.Mask<bool>? printMask = null)
        {
            ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISkillDataGetter item,
            SkillData.Mask<bool?> checkMask)
        {
            return ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SkillData.Mask<bool> GetHasBeenSetMask(this ISkillDataGetter item)
        {
            var ret = new SkillData.Mask<bool>(false);
            ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISkillDataGetter item,
            ISkillDataGetter rhs)
        {
            return ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISkillData lhs,
            ISkillDataGetter rhs,
            SkillData.TranslationMask? copyMask = null)
        {
            ((SkillDataSetterTranslationCommon)((ISkillDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this ISkillData lhs,
            ISkillDataGetter rhs,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkillDataSetterTranslationCommon)((ISkillDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SkillData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkillData lhs,
            ISkillDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkillDataSetterTranslationCommon)((ISkillDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SkillData DeepCopy(
            this ISkillDataGetter item,
            SkillData.TranslationMask? copyMask = null)
        {
            return ((SkillDataSetterTranslationCommon)((ISkillDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkillData DeepCopy(
            this ISkillDataGetter item,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? copyMask = null)
        {
            return ((SkillDataSetterTranslationCommon)((ISkillDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkillData DeepCopy(
            this ISkillDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkillDataSetterTranslationCommon)((ISkillDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkillData item,
            XElement node,
            SkillData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISkillData item,
            XElement node,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISkillData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SkillDataSetterCommon)((ISkillDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillData item,
            string path,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillData item,
            string path,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillData item,
            string path,
            ErrorMaskBuilder? errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISkillData item,
            Stream stream,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillData item,
            Stream stream,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISkillData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SkillData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISkillData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISkillData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SkillDataSetterCommon)((ISkillDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SkillData_FieldIndex
    {
        Action = 0,
        Attribute = 1,
        Specialization = 2,
        UseValueFirst = 3,
        UseValueSecond = 4,
    }
    #endregion

    #region Registration
    public partial class SkillData_Registration : ILoquiRegistration
    {
        public static readonly SkillData_Registration Instance = new SkillData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 209,
            version: 0);

        public const string GUID = "7d77fda3-ca94-4126-b35e-52098fb45b40";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SkillData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkillData.ErrorMask);

        public static readonly Type ClassType = typeof(SkillData);

        public static readonly Type GetterType = typeof(ISkillDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkillData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.SkillData";

        public const string Name = "SkillData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ACTION":
                    return (ushort)SkillData_FieldIndex.Action;
                case "ATTRIBUTE":
                    return (ushort)SkillData_FieldIndex.Attribute;
                case "SPECIALIZATION":
                    return (ushort)SkillData_FieldIndex.Specialization;
                case "USEVALUEFIRST":
                    return (ushort)SkillData_FieldIndex.UseValueFirst;
                case "USEVALUESECOND":
                    return (ushort)SkillData_FieldIndex.UseValueSecond;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    return "Action";
                case SkillData_FieldIndex.Attribute:
                    return "Attribute";
                case SkillData_FieldIndex.Specialization:
                    return "Specialization";
                case SkillData_FieldIndex.UseValueFirst:
                    return "UseValueFirst";
                case SkillData_FieldIndex.UseValueSecond:
                    return "UseValueSecond";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                case SkillData_FieldIndex.Attribute:
                case SkillData_FieldIndex.Specialization:
                case SkillData_FieldIndex.UseValueFirst:
                case SkillData_FieldIndex.UseValueSecond:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            SkillData_FieldIndex enu = (SkillData_FieldIndex)index;
            switch (enu)
            {
                case SkillData_FieldIndex.Action:
                    return typeof(ActorValue);
                case SkillData_FieldIndex.Attribute:
                    return typeof(ActorValue);
                case SkillData_FieldIndex.Specialization:
                    return typeof(Specialization);
                case SkillData_FieldIndex.UseValueFirst:
                    return typeof(Single);
                case SkillData_FieldIndex.UseValueSecond:
                    return typeof(Single);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SkillDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 5;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(SkillDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SkillDataSetterCommon
    {
        public static readonly SkillDataSetterCommon Instance = new SkillDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkillData item)
        {
            ClearPartial();
            item.Action = default;
            item.Attribute = default;
            item.Specialization = default;
            item.UseValueFirst = default;
            item.UseValueSecond = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            ISkillData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkillDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            ISkillData item,
            MutagenFrame frame)
        {
            item.Action = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Attribute = EnumBinaryTranslation<ActorValue>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.Specialization = EnumBinaryTranslation<Specialization>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.UseValueFirst = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
            item.UseValueSecond = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: frame);
        }
        
        public virtual void CopyInFromBinary(
            ISkillData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(SkillData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class SkillDataCommon
    {
        public static readonly SkillDataCommon Instance = new SkillDataCommon();

        public SkillData.Mask<bool> GetEqualsMask(
            ISkillDataGetter item,
            ISkillDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkillData.Mask<bool>(false);
            ((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkillDataGetter item,
            ISkillDataGetter rhs,
            SkillData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Action = item.Action == rhs.Action;
            ret.Attribute = item.Attribute == rhs.Attribute;
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.UseValueFirst = item.UseValueFirst.EqualsWithin(rhs.UseValueFirst);
            ret.UseValueSecond = item.UseValueSecond.EqualsWithin(rhs.UseValueSecond);
        }
        
        public string ToString(
            ISkillDataGetter item,
            string? name = null,
            SkillData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISkillDataGetter item,
            FileGeneration fg,
            string? name = null,
            SkillData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SkillData =>");
            }
            else
            {
                fg.AppendLine($"{name} (SkillData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISkillDataGetter item,
            FileGeneration fg,
            SkillData.Mask<bool>? printMask = null)
        {
            if (printMask?.Action ?? true)
            {
                fg.AppendItem(item.Action, "Action");
            }
            if (printMask?.Attribute ?? true)
            {
                fg.AppendItem(item.Attribute, "Attribute");
            }
            if (printMask?.Specialization ?? true)
            {
                fg.AppendItem(item.Specialization, "Specialization");
            }
            if (printMask?.UseValueFirst ?? true)
            {
                fg.AppendItem(item.UseValueFirst, "UseValueFirst");
            }
            if (printMask?.UseValueSecond ?? true)
            {
                fg.AppendItem(item.UseValueSecond, "UseValueSecond");
            }
        }
        
        public bool HasBeenSet(
            ISkillDataGetter item,
            SkillData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            ISkillDataGetter item,
            SkillData.Mask<bool> mask)
        {
            mask.Action = true;
            mask.Attribute = true;
            mask.Specialization = true;
            mask.UseValueFirst = true;
            mask.UseValueSecond = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkillDataGetter? lhs,
            ISkillDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Action != rhs.Action) return false;
            if (lhs.Attribute != rhs.Attribute) return false;
            if (lhs.Specialization != rhs.Specialization) return false;
            if (!lhs.UseValueFirst.EqualsWithin(rhs.UseValueFirst)) return false;
            if (!lhs.UseValueSecond.EqualsWithin(rhs.UseValueSecond)) return false;
            return true;
        }
        
        public virtual int GetHashCode(ISkillDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Action);
            hash.Add(item.Attribute);
            hash.Add(item.Specialization);
            hash.Add(item.UseValueFirst);
            hash.Add(item.UseValueSecond);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SkillData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISkillDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class SkillDataSetterTranslationCommon
    {
        public static readonly SkillDataSetterTranslationCommon Instance = new SkillDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISkillData item,
            ISkillDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)SkillData_FieldIndex.Action) ?? true))
            {
                item.Action = rhs.Action;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillData_FieldIndex.Attribute) ?? true))
            {
                item.Attribute = rhs.Attribute;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillData_FieldIndex.Specialization) ?? true))
            {
                item.Specialization = rhs.Specialization;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillData_FieldIndex.UseValueFirst) ?? true))
            {
                item.UseValueFirst = rhs.UseValueFirst;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillData_FieldIndex.UseValueSecond) ?? true))
            {
                item.UseValueSecond = rhs.UseValueSecond;
            }
        }
        
        #endregion
        
        public SkillData DeepCopy(
            ISkillDataGetter item,
            SkillData.TranslationMask? copyMask = null)
        {
            SkillData ret = (SkillData)((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SkillData DeepCopy(
            ISkillDataGetter item,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? copyMask = null)
        {
            SkillData ret = (SkillData)((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SkillData DeepCopy(
            ISkillDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkillData ret = (SkillData)((SkillDataCommon)((ISkillDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SkillData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillData_Registration.Instance;
        public static SkillData_Registration Registration => SkillData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkillDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SkillDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkillDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkillDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISkillDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISkillDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SkillDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static SkillDataXmlWriteTranslation Instance = new SkillDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISkillDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)SkillData_FieldIndex.Action) ?? true))
            {
                EnumXmlTranslation<ActorValue>.Instance.Write(
                    node: node,
                    name: nameof(item.Action),
                    item: item.Action,
                    fieldIndex: (int)SkillData_FieldIndex.Action,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkillData_FieldIndex.Attribute) ?? true))
            {
                EnumXmlTranslation<ActorValue>.Instance.Write(
                    node: node,
                    name: nameof(item.Attribute),
                    item: item.Attribute,
                    fieldIndex: (int)SkillData_FieldIndex.Attribute,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkillData_FieldIndex.Specialization) ?? true))
            {
                EnumXmlTranslation<Specialization>.Instance.Write(
                    node: node,
                    name: nameof(item.Specialization),
                    item: item.Specialization,
                    fieldIndex: (int)SkillData_FieldIndex.Specialization,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkillData_FieldIndex.UseValueFirst) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UseValueFirst),
                    item: item.UseValueFirst,
                    fieldIndex: (int)SkillData_FieldIndex.UseValueFirst,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SkillData_FieldIndex.UseValueSecond) ?? true))
            {
                FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UseValueSecond),
                    item: item.UseValueSecond,
                    fieldIndex: (int)SkillData_FieldIndex.UseValueSecond,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISkillDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SkillData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SkillData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISkillDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            ISkillDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (ISkillDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class SkillDataXmlCreateTranslation
    {
        public readonly static SkillDataXmlCreateTranslation Instance = new SkillDataXmlCreateTranslation();

        public static void FillPublicXml(
            ISkillData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SkillDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISkillData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Action":
                    errorMask?.PushIndex((int)SkillData_FieldIndex.Action);
                    try
                    {
                        item.Action = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Attribute":
                    errorMask?.PushIndex((int)SkillData_FieldIndex.Attribute);
                    try
                    {
                        item.Attribute = EnumXmlTranslation<ActorValue>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Specialization":
                    errorMask?.PushIndex((int)SkillData_FieldIndex.Specialization);
                    try
                    {
                        item.Specialization = EnumXmlTranslation<Specialization>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UseValueFirst":
                    errorMask?.PushIndex((int)SkillData_FieldIndex.UseValueFirst);
                    try
                    {
                        item.UseValueFirst = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UseValueSecond":
                    errorMask?.PushIndex((int)SkillData_FieldIndex.UseValueSecond);
                    try
                    {
                        item.UseValueSecond = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SkillDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISkillDataGetter item,
            XElement node,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SkillDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SkillData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            string path,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            Stream stream,
            out SkillData.ErrorMask errorMask,
            SkillData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((SkillDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            XElement node,
            string? name = null,
            SkillData.TranslationMask? translationMask = null)
        {
            ((SkillDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkillDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISkillDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((SkillDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SkillDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static SkillDataBinaryWriteTranslation Instance = new SkillDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISkillDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                writer,
                item.Action,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ActorValue>.Instance.Write(
                writer,
                item.Attribute,
                length: 4);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Specialization>.Instance.Write(
                writer,
                item.Specialization,
                length: 4);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UseValueFirst);
            Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.UseValueSecond);
        }

        public void Write(
            MutagenWriter writer,
            ISkillDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(SkillData_Registration.DATA_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISkillDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SkillDataBinaryCreateTranslation
    {
        public readonly static SkillDataBinaryCreateTranslation Instance = new SkillDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SkillDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkillDataGetter item,
            MutagenWriter writer)
        {
            ((SkillDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SkillDataBinaryOverlay :
        BinaryOverlay,
        ISkillDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillData_Registration.Instance;
        public static SkillData_Registration Registration => SkillData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkillDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkillDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkillDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISkillDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISkillDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISkillDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => SkillDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SkillDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SkillDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SkillDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ActorValue Action => (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public ActorValue Attribute => (ActorValue)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public Specialization Specialization => (Specialization)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x8, 0x4));
        public Single UseValueFirst => SpanExt.GetFloat(_data.Slice(0xC, 0x4));
        public Single UseValueSecond => SpanExt.GetFloat(_data.Slice(0x10, 0x4));
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SkillDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SkillDataBinaryOverlay SkillDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SkillDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0x14 + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static SkillDataBinaryOverlay SkillDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return SkillDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SkillDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

