/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SoulGem :
        ItemAbstract,
        ISoulGemInternal,
        ILoquiObjectSetter<SoulGem>,
        INamed,
        IEquatable<SoulGem>,
        IEqualsMask
    {
        #region Ctor
        protected SoulGem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISoulGemGetter.Name => this.Name;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ISoulGemGetter.Model => this.Model;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISoulGemGetter.Icon => this.Icon;
        #endregion
        #region Script
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Script> _Script = new FormLinkNullable<Script>();
        public IFormLinkNullable<Script> Script => this._Script;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> ISoulGemGetter.Script => this.Script;
        #endregion
        #region Value
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Value;
        public UInt32 Value
        {
            get => this._Value;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Value = value;
            }
        }
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _Weight;
        public Single Weight
        {
            get => this._Weight;
            set
            {
                this.DATADataTypeState |= DATADataType.Has;
                this._Weight = value;
            }
        }
        #endregion
        #region ContainedSoul
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoulLevel? _ContainedSoul;
        public SoulLevel? ContainedSoul
        {
            get => this._ContainedSoul;
            set => this._ContainedSoul = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoulLevel? ISoulGemGetter.ContainedSoul => this.ContainedSoul;
        #endregion
        #region MaximumCapacity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoulLevel? _MaximumCapacity;
        public SoulLevel? MaximumCapacity
        {
            get => this._MaximumCapacity;
            set => this._MaximumCapacity = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoulLevel? ISoulGemGetter.MaximumCapacity => this.MaximumCapacity;
        #endregion
        #region DATADataTypeState
        public SoulGem.DATADataType DATADataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SoulGemMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISoulGemGetter rhs)) return false;
            return ((SoulGemCommon)((ISoulGemGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SoulGem obj)
        {
            return ((SoulGemCommon)((ISoulGemGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SoulGemCommon)((ISoulGemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SoulGemXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SoulGemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new SoulGem CreateFromXml(
            XElement node,
            SoulGem.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SoulGem CreateFromXml(
            XElement node,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SoulGem CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SoulGem();
            ((SoulGemSetterCommon)((ISoulGemGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SoulGem CreateFromXml(
            string path,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            string path,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SoulGem CreateFromXml(
            Stream stream,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            Stream stream,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SoulGem CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ItemAbstract.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icon = initialValue;
                this.Script = initialValue;
                this.Value = initialValue;
                this.Weight = initialValue;
                this.ContainedSoul = initialValue;
                this.MaximumCapacity = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Icon,
                TItem Script,
                TItem Value,
                TItem Weight,
                TItem ContainedSoul,
                TItem MaximumCapacity,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icon = Icon;
                this.Script = Script;
                this.Value = Value;
                this.Weight = Weight;
                this.ContainedSoul = ContainedSoul;
                this.MaximumCapacity = MaximumCapacity;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Icon;
            public TItem Script;
            public TItem Value;
            public TItem Weight;
            public TItem ContainedSoul;
            public TItem MaximumCapacity;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
                if (!object.Equals(this.MaximumCapacity, rhs.MaximumCapacity)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Name?.GetHashCode());
                ret = ret.CombineHashCode(this.Model?.GetHashCode());
                ret = ret.CombineHashCode(this.Icon?.GetHashCode());
                ret = ret.CombineHashCode(this.Script?.GetHashCode());
                ret = ret.CombineHashCode(this.Value?.GetHashCode());
                ret = ret.CombineHashCode(this.Weight?.GetHashCode());
                ret = ret.CombineHashCode(this.ContainedSoul?.GetHashCode());
                ret = ret.CombineHashCode(this.MaximumCapacity?.GetHashCode());
                ret = ret.CombineHashCode(this.DATADataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Icon)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.ContainedSoul)) return false;
                if (!eval(this.MaximumCapacity)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Icon)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.ContainedSoul)) return true;
                if (eval(this.MaximumCapacity)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoulGem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icon = eval(this.Icon);
                obj.Script = eval(this.Script);
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.ContainedSoul = eval(this.ContainedSoul);
                obj.MaximumCapacity = eval(this.MaximumCapacity);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SoulGem.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SoulGem.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SoulGem.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Script ?? true)
                    {
                        fg.AppendItem(Script, "Script");
                    }
                    if (printMask?.Value ?? true)
                    {
                        fg.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        fg.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.ContainedSoul ?? true)
                    {
                        fg.AppendItem(ContainedSoul, "ContainedSoul");
                    }
                    if (printMask?.MaximumCapacity ?? true)
                    {
                        fg.AppendItem(MaximumCapacity, "MaximumCapacity");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        fg.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            ItemAbstract.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Icon;
            public Exception? Script;
            public Exception? Value;
            public Exception? Weight;
            public Exception? ContainedSoul;
            public Exception? MaximumCapacity;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
                switch (enu)
                {
                    case SoulGem_FieldIndex.Name:
                        return Name;
                    case SoulGem_FieldIndex.Model:
                        return Model;
                    case SoulGem_FieldIndex.Icon:
                        return Icon;
                    case SoulGem_FieldIndex.Script:
                        return Script;
                    case SoulGem_FieldIndex.Value:
                        return Value;
                    case SoulGem_FieldIndex.Weight:
                        return Weight;
                    case SoulGem_FieldIndex.ContainedSoul:
                        return ContainedSoul;
                    case SoulGem_FieldIndex.MaximumCapacity:
                        return MaximumCapacity;
                    case SoulGem_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
                switch (enu)
                {
                    case SoulGem_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case SoulGem_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case SoulGem_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case SoulGem_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case SoulGem_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case SoulGem_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case SoulGem_FieldIndex.ContainedSoul:
                        this.ContainedSoul = ex;
                        break;
                    case SoulGem_FieldIndex.MaximumCapacity:
                        this.MaximumCapacity = ex;
                        break;
                    case SoulGem_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
                switch (enu)
                {
                    case SoulGem_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case SoulGem_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.ContainedSoul:
                        this.ContainedSoul = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.MaximumCapacity:
                        this.MaximumCapacity = (Exception?)obj;
                        break;
                    case SoulGem_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Icon != null) return true;
                if (Script != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (ContainedSoul != null) return true;
                if (MaximumCapacity != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                Model?.ToString(fg);
                fg.AppendItem(Icon, "Icon");
                fg.AppendItem(Script, "Script");
                fg.AppendItem(Value, "Value");
                fg.AppendItem(Weight, "Weight");
                fg.AppendItem(ContainedSoul, "ContainedSoul");
                fg.AppendItem(MaximumCapacity, "MaximumCapacity");
                fg.AppendItem(DATADataTypeState, "DATADataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
                ret.MaximumCapacity = this.MaximumCapacity.Combine(rhs.MaximumCapacity);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ItemAbstract.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Icon;
            public bool Script;
            public bool Value;
            public bool Weight;
            public bool ContainedSoul;
            public bool MaximumCapacity;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Icon = defaultOn;
                this.Script = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.ContainedSoul = defaultOn;
                this.MaximumCapacity = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Icon, null));
                ret.Add((Script, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((ContainedSoul, null));
                ret.Add((MaximumCapacity, null));
                ret.Add((DATADataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SoulGem_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum DATADataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => SoulGemCommon.Instance.GetLinks(this);
        public SoulGem(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SoulGem(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoulGemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SoulGemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new SoulGem CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            return CreateFromBinary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public new static SoulGem CreateFromBinary(
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            var ret = new SoulGem();
            ((SoulGemSetterCommon)((ISoulGemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoulGemGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoulGem GetNew()
        {
            return new SoulGem();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoulGem :
        ISoulGemGetter,
        IItemAbstract,
        ILoquiObjectSetter<ISoulGemInternal>
    {
        new String? Name { get; set; }
        new Model? Model { get; set; }
        new String? Icon { get; set; }
        new IFormLinkNullable<Script> Script { get; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new SoulLevel? ContainedSoul { get; set; }
        new SoulLevel? MaximumCapacity { get; set; }
        new SoulGem.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface ISoulGemInternal :
        IItemAbstractInternal,
        ISoulGem,
        ISoulGemGetter
    {
    }

    public partial interface ISoulGemGetter :
        IItemAbstractGetter,
        ILoquiObject<ISoulGemGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IModelGetter? Model { get; }
        String? Icon { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        SoulLevel? ContainedSoul { get; }
        SoulLevel? MaximumCapacity { get; }
        SoulGem.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static class SoulGemMixIn
    {
        public static void Clear(this ISoulGemInternal item)
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoulGem.Mask<bool> GetEqualsMask(
            this ISoulGemGetter item,
            ISoulGemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISoulGemGetter item,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISoulGemGetter item,
            FileGeneration fg,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISoulGemGetter item,
            SoulGem.Mask<bool?> checkMask)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SoulGem.Mask<bool> GetHasBeenSetMask(this ISoulGemGetter item)
        {
            var ret = new SoulGem.Mask<bool>(false);
            ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISoulGemGetter item,
            ISoulGemGetter rhs)
        {
            return ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISoulGemInternal lhs,
            ISoulGemGetter rhs,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoulGemSetterTranslationCommon)((ISoulGemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoulGemInternal lhs,
            ISoulGemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoulGemSetterTranslationCommon)((ISoulGemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SoulGem DeepCopy(
            this ISoulGemGetter item,
            SoulGem.TranslationMask? copyMask = null)
        {
            return ((SoulGemSetterTranslationCommon)((ISoulGemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoulGem DeepCopy(
            this ISoulGemGetter item,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? copyMask = null)
        {
            return ((SoulGemSetterTranslationCommon)((ISoulGemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoulGem DeepCopy(
            this ISoulGemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoulGemSetterTranslationCommon)((ISoulGemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoulGemInternal item,
            XElement node,
            SoulGem.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISoulGemInternal item,
            XElement node,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            string path,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            string path,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            Stream stream,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            Stream stream,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISoulGemInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SoulGem.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISoulGemInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISoulGemInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SoulGemSetterCommon)((ISoulGemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SoulGem_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Icon = 7,
        Script = 8,
        Value = 9,
        Weight = 10,
        ContainedSoul = 11,
        MaximumCapacity = 12,
        DATADataTypeState = 13,
    }
    #endregion

    #region Registration
    public partial class SoulGem_Registration : ILoquiRegistration
    {
        public static readonly SoulGem_Registration Instance = new SoulGem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 96,
            version: 0);

        public const string GUID = "89d80e87-52e9-4c7c-8a27-bb4303d77edf";

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(SoulGem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoulGem.ErrorMask);

        public static readonly Type ClassType = typeof(SoulGem);

        public static readonly Type GetterType = typeof(ISoulGemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoulGem);

        public static readonly Type? InternalSetterType = typeof(ISoulGemInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SoulGem";

        public const string Name = "SoulGem";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)SoulGem_FieldIndex.Name;
                case "MODEL":
                    return (ushort)SoulGem_FieldIndex.Model;
                case "ICON":
                    return (ushort)SoulGem_FieldIndex.Icon;
                case "SCRIPT":
                    return (ushort)SoulGem_FieldIndex.Script;
                case "VALUE":
                    return (ushort)SoulGem_FieldIndex.Value;
                case "WEIGHT":
                    return (ushort)SoulGem_FieldIndex.Weight;
                case "CONTAINEDSOUL":
                    return (ushort)SoulGem_FieldIndex.ContainedSoul;
                case "MAXIMUMCAPACITY":
                    return (ushort)SoulGem_FieldIndex.MaximumCapacity;
                case "DATADATATYPESTATE":
                    return (ushort)SoulGem_FieldIndex.DATADataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Model:
                    return true;
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    return "Name";
                case SoulGem_FieldIndex.Model:
                    return "Model";
                case SoulGem_FieldIndex.Icon:
                    return "Icon";
                case SoulGem_FieldIndex.Script:
                    return "Script";
                case SoulGem_FieldIndex.Value:
                    return "Value";
                case SoulGem_FieldIndex.Weight:
                    return "Weight";
                case SoulGem_FieldIndex.ContainedSoul:
                    return "ContainedSoul";
                case SoulGem_FieldIndex.MaximumCapacity:
                    return "MaximumCapacity";
                case SoulGem_FieldIndex.DATADataTypeState:
                    return "DATADataTypeState";
                default:
                    return ItemAbstract_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                case SoulGem_FieldIndex.Model:
                case SoulGem_FieldIndex.Icon:
                case SoulGem_FieldIndex.Script:
                case SoulGem_FieldIndex.Value:
                case SoulGem_FieldIndex.Weight:
                case SoulGem_FieldIndex.ContainedSoul:
                case SoulGem_FieldIndex.MaximumCapacity:
                case SoulGem_FieldIndex.DATADataTypeState:
                    return false;
                default:
                    return ItemAbstract_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SoulGem_FieldIndex enu = (SoulGem_FieldIndex)index;
            switch (enu)
            {
                case SoulGem_FieldIndex.Name:
                    return typeof(String);
                case SoulGem_FieldIndex.Model:
                    return typeof(Model);
                case SoulGem_FieldIndex.Icon:
                    return typeof(String);
                case SoulGem_FieldIndex.Script:
                    return typeof(IFormLinkNullable<Script>);
                case SoulGem_FieldIndex.Value:
                    return typeof(UInt32);
                case SoulGem_FieldIndex.Weight:
                    return typeof(Single);
                case SoulGem_FieldIndex.ContainedSoul:
                    return typeof(SoulLevel);
                case SoulGem_FieldIndex.MaximumCapacity:
                    return typeof(SoulLevel);
                case SoulGem_FieldIndex.DATADataTypeState:
                    return typeof(SoulGem.DATADataType);
                default:
                    return ItemAbstract_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SoulGemXmlWriteTranslation);
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType SOUL_HEADER = new RecordType("SOUL");
        public static readonly RecordType SLCP_HEADER = new RecordType("SLCP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SLGM_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 6;
        public static readonly Type BinaryWriteTranslation = typeof(SoulGemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SoulGemSetterCommon : ItemAbstractSetterCommon
    {
        public new static readonly SoulGemSetterCommon Instance = new SoulGemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoulGemInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Icon = default;
            item.Script.FormKey = null;
            item.Value = default;
            item.Weight = default;
            item.ContainedSoul = default;
            item.MaximumCapacity = default;
            item.DATADataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(IItemAbstractInternal item)
        {
            Clear(item: (ISoulGemInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISoulGemInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoulGemInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISoulGemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasDATADataType":
                    item.DATADataTypeState |= SoulGem.DATADataType.Has;
                    break;
                default:
                    ItemAbstractSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ISoulGemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SoulGemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => SoulGem_Registration.SLGM_HEADER;
        protected static void FillBinaryStructs(
            ISoulGemInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences)
        {
            ItemAbstractSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame,
                masterReferences: masterReferences);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ISoulGemInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        recordTypeConverter: null,
                        masterReferences: masterReferences);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        parseWhole: true);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Script.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        masterReferences: masterReferences,
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Script);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.DATADataTypeState = SoulGem.DATADataType.Has;
                    }
                    item.Value = dataFrame.ReadUInt32();
                    item.Weight = Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Parse(frame: dataFrame);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Weight);
                }
                case 0x4C554F53: // SOUL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ContainedSoul = EnumBinaryTranslation<SoulLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.ContainedSoul);
                }
                case 0x50434C53: // SLCP
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaximumCapacity = EnumBinaryTranslation<SoulLevel>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.MaximumCapacity);
                }
                default:
                    return ItemAbstractSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter,
                        masterReferences: masterReferences);
            }
        }
        
        public void CopyInFromBinary(
            ISoulGemInternal item,
            MutagenFrame frame,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            UtilityTranslation.MajorRecordParse<ISoulGemInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SoulGemCommon : ItemAbstractCommon
    {
        public new static readonly SoulGemCommon Instance = new SoulGemCommon();

        public SoulGem.Mask<bool> GetEqualsMask(
            ISoulGemGetter item,
            ISoulGemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoulGem.Mask<bool>(false);
            ((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoulGemGetter item,
            ISoulGemGetter rhs,
            SoulGem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Script = object.Equals(item.Script, rhs.Script);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.ContainedSoul = item.ContainedSoul == rhs.ContainedSoul;
            ret.MaximumCapacity = item.MaximumCapacity == rhs.MaximumCapacity;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISoulGemGetter item,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISoulGemGetter item,
            FileGeneration fg,
            string? name = null,
            SoulGem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SoulGem =>");
            }
            else
            {
                fg.AppendLine($"{name} (SoulGem) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISoulGemGetter item,
            FileGeneration fg,
            SoulGem.Mask<bool>? printMask = null)
        {
            ItemAbstractCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.Script ?? true)
                && item.Script.TryGet(out var ScriptItem))
            {
                fg.AppendItem(ScriptItem, "Script");
            }
            if (printMask?.Value ?? true)
            {
                fg.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                fg.AppendItem(item.Weight, "Weight");
            }
            if ((printMask?.ContainedSoul ?? true)
                && item.ContainedSoul.TryGet(out var ContainedSoulItem))
            {
                fg.AppendItem(ContainedSoulItem, "ContainedSoul");
            }
            if ((printMask?.MaximumCapacity ?? true)
                && item.MaximumCapacity.TryGet(out var MaximumCapacityItem))
            {
                fg.AppendItem(MaximumCapacityItem, "MaximumCapacity");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                fg.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public bool HasBeenSet(
            ISoulGemGetter item,
            SoulGem.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.Script.HasValue && checkMask.Script.Value != (item.Script.FormKey != null)) return false;
            if (checkMask.ContainedSoul.HasValue && checkMask.ContainedSoul.Value != (item.ContainedSoul != null)) return false;
            if (checkMask.MaximumCapacity.HasValue && checkMask.MaximumCapacity.Value != (item.MaximumCapacity != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISoulGemGetter item,
            SoulGem.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Icon = (item.Icon != null);
            mask.Script = (item.Script.FormKey != null);
            mask.Value = true;
            mask.Weight = true;
            mask.ContainedSoul = (item.ContainedSoul != null);
            mask.MaximumCapacity = (item.MaximumCapacity != null);
            mask.DATADataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SoulGem_FieldIndex ConvertFieldIndex(ItemAbstract_FieldIndex index)
        {
            switch (index)
            {
                case ItemAbstract_FieldIndex.MajorRecordFlagsRaw:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                case ItemAbstract_FieldIndex.OblivionMajorRecordFlags:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SoulGem_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoulGem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SoulGem_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SoulGem_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoulGem_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoulGemGetter? lhs,
            ISoulGemGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!lhs.Script.Equals(rhs.Script)) return false;
            if (lhs.Value != rhs.Value) return false;
            if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            if (lhs.ContainedSoul != rhs.ContainedSoul) return false;
            if (lhs.MaximumCapacity != rhs.MaximumCapacity) return false;
            if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            IItemAbstractGetter? lhs,
            IItemAbstractGetter? rhs)
        {
            return Equals(
                lhs: (ISoulGemGetter?)lhs,
                rhs: rhs as ISoulGemGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoulGemGetter?)lhs,
                rhs: rhs as ISoulGemGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISoulGemGetter?)lhs,
                rhs: rhs as ISoulGemGetter);
        }
        
        public virtual int GetHashCode(ISoulGemGetter item)
        {
            int ret = 0;
            if (item.Name.TryGet(out var Nameitem))
            {
                ret = HashHelper.GetHashCode(Nameitem).CombineHashCode(ret);
            }
            if (item.Model.TryGet(out var Modelitem))
            {
                ret = HashHelper.GetHashCode(Modelitem).CombineHashCode(ret);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                ret = HashHelper.GetHashCode(Iconitem).CombineHashCode(ret);
            }
            if (item.Script.TryGet(out var Scriptitem))
            {
                ret = HashHelper.GetHashCode(Scriptitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.Value).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Weight).CombineHashCode(ret);
            if (item.ContainedSoul.TryGet(out var ContainedSoulitem))
            {
                ret = HashHelper.GetHashCode(ContainedSoulitem).CombineHashCode(ret);
            }
            if (item.MaximumCapacity.TryGet(out var MaximumCapacityitem))
            {
                ret = HashHelper.GetHashCode(MaximumCapacityitem).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(item.DATADataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(IItemAbstractGetter item)
        {
            return GetHashCode(item: (ISoulGemGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoulGemGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoulGemGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoulGem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISoulGemGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Script;
            yield break;
        }
        
        partial void PostDuplicate(SoulGem obj, SoulGem rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new SoulGem(getNextFormKey());
            ret.DeepCopyIn((SoulGem)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (SoulGem)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class SoulGemSetterTranslationCommon : ItemAbstractSetterTranslationCommon
    {
        public new static readonly SoulGemSetterTranslationCommon Instance = new SoulGemSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISoulGemInternal item,
            ISoulGemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ISoulGem item,
            ISoulGemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Script) ?? true))
            {
                item.Script.FormKey = rhs.Script.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ContainedSoul) ?? true))
            {
                item.ContainedSoul = rhs.ContainedSoul;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.MaximumCapacity) ?? true))
            {
                item.MaximumCapacity = rhs.MaximumCapacity;
            }
            if ((copyMask?.GetShouldTranslate((int)SoulGem_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            IItemAbstractInternal item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGemInternal)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IItemAbstract item,
            IItemAbstractGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGem)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGemInternal)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGem)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGemInternal)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISoulGem)item,
                rhs: (ISoulGemGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public SoulGem DeepCopy(
            ISoulGemGetter item,
            SoulGem.TranslationMask? copyMask = null)
        {
            SoulGem ret = (SoulGem)((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SoulGem DeepCopy(
            ISoulGemGetter item,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? copyMask = null)
        {
            SoulGem ret = (SoulGem)((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SoulGem DeepCopy(
            ISoulGemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoulGem ret = (SoulGem)((SoulGemCommon)((ISoulGemGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SoulGem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoulGem_Registration.Instance;
        public new static SoulGem_Registration Registration => SoulGem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoulGemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoulGemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoulGemSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoulGemXmlWriteTranslation :
        ItemAbstractXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SoulGemXmlWriteTranslation Instance = new SoulGemXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISoulGemGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ItemAbstractXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)SoulGem_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)SoulGem_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
                }
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)SoulGem_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.Script.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Script) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Script),
                    item: item.Script.FormKey,
                    fieldIndex: (int)SoulGem_FieldIndex.Script,
                    errorMask: errorMask);
            }
            if (item.DATADataTypeState.HasFlag(SoulGem.DATADataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Value) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Value),
                        item: item.Value,
                        fieldIndex: (int)SoulGem_FieldIndex.Value,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.Weight) ?? true))
                {
                    FloatXmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Weight),
                        item: item.Weight,
                        fieldIndex: (int)SoulGem_FieldIndex.Weight,
                        errorMask: errorMask);
                }
            }
            if ((item.ContainedSoul != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.ContainedSoul) ?? true))
            {
                EnumXmlTranslation<SoulLevel>.Instance.Write(
                    node: node,
                    name: nameof(item.ContainedSoul),
                    item: item.ContainedSoul,
                    fieldIndex: (int)SoulGem_FieldIndex.ContainedSoul,
                    errorMask: errorMask);
            }
            if ((item.MaximumCapacity != null)
                && (translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.MaximumCapacity) ?? true))
            {
                EnumXmlTranslation<SoulLevel>.Instance.Write(
                    node: node,
                    name: nameof(item.MaximumCapacity),
                    item: item.MaximumCapacity,
                    fieldIndex: (int)SoulGem_FieldIndex.MaximumCapacity,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)SoulGem_FieldIndex.DATADataTypeState) ?? true))
            {
                EnumXmlTranslation<SoulGem.DATADataType>.Instance.Write(
                    node: node,
                    name: nameof(item.DATADataTypeState),
                    item: item.DATADataTypeState,
                    fieldIndex: (int)SoulGem_FieldIndex.DATADataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISoulGemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SoulGem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SoulGem");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IItemAbstractGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISoulGemGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SoulGemXmlCreateTranslation : ItemAbstractXmlCreateTranslation
    {
        public new readonly static SoulGemXmlCreateTranslation Instance = new SoulGemXmlCreateTranslation();

        public static void FillPublicXml(
            ISoulGemInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SoulGemXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISoulGemInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Model":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)SoulGem_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Script":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Script);
                    try
                    {
                        item.Script.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Value":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Value);
                    try
                    {
                        item.Value = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.DATADataTypeState |= SoulGem.DATADataType.Has;
                    break;
                case "Weight":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.Weight);
                    try
                    {
                        item.Weight = FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ContainedSoul":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.ContainedSoul);
                    try
                    {
                        item.ContainedSoul = EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaximumCapacity":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.MaximumCapacity);
                    try
                    {
                        item.MaximumCapacity = EnumXmlTranslation<SoulLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "DATADataTypeState":
                    errorMask?.PushIndex((int)SoulGem_FieldIndex.DATADataTypeState);
                    try
                    {
                        item.DATADataTypeState = EnumXmlTranslation<SoulGem.DATADataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    ItemAbstractXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SoulGemXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISoulGemGetter item,
            XElement node,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SoulGemXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SoulGem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISoulGemGetter item,
            string path,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISoulGemGetter item,
            Stream stream,
            out SoulGem.ErrorMask errorMask,
            SoulGem.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoulGemBinaryWriteTranslation :
        ItemAbstractBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SoulGemBinaryWriteTranslation Instance = new SoulGemBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISoulGemGetter item,
            MutagenWriter writer,
            MasterReferenceReader masterReferences)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer,
                masterReferences: masterReferences);
        }

        public static void WriteRecordTypes(
            ISoulGemGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter,
            MasterReferenceReader masterReferences)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                masterReferences: masterReferences);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    masterReferences: masterReferences,
                    recordTypeConverter: null);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.SCRI_HEADER),
                masterReferences: masterReferences);
            if (item.DATADataTypeState.HasFlag(SoulGem.DATADataType.Has))
            {
                using (HeaderExport.ExportSubRecordHeader(writer, recordTypeConverter.ConvertToCustom(SoulGem_Registration.DATA_HEADER)))
                {
                    writer.Write(item.Value);
                    Mutagen.Bethesda.Binary.FloatBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.Weight);
                }
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.WriteNullable(
                writer,
                item.ContainedSoul,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.SOUL_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<SoulLevel>.Instance.WriteNullable(
                writer,
                item.MaximumCapacity,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(SoulGem_Registration.SLCP_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            ISoulGemGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SoulGem_Registration.SLGM_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer,
                    masterReferences: masterReferences);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    masterReferences: masterReferences);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISoulGemGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IItemAbstractGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISoulGemGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISoulGemGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            Write(
                item: (ISoulGemGetter)item,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SoulGemBinaryCreateTranslation : ItemAbstractBinaryCreateTranslation
    {
        public new readonly static SoulGemBinaryCreateTranslation Instance = new SoulGemBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SoulGemBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SoulGemBinaryOverlay :
        ItemAbstractBinaryOverlay,
        ISoulGemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoulGem_Registration.Instance;
        public new static SoulGem_Registration Registration => SoulGem_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoulGemCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoulGemSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISoulGemGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => SoulGemCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SoulGemXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SoulGemXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoulGemBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            MasterReferenceReader masterReferences,
            RecordTypeConverter? recordTypeConverter)
        {
            ((SoulGemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public bool Script_IsSet => _ScriptLocation.HasValue;
        public IFormLinkNullableGetter<IScriptGetter> Script => _ScriptLocation.HasValue ? new FormLinkNullable<IScriptGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ScriptLocation.Value, _package.Meta)))) : FormLinkNullable<IScriptGetter>.Empty;
        #endregion
        private int? _DATALocation;
        public SoulGem.DATADataType DATADataTypeState { get; private set; }
        #region Value
        private int _ValueLocation => _DATALocation!.Value + 0x0;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_ValueLocation, 4)) : default;
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? SpanExt.GetFloat(_data.Span.Slice(_WeightLocation, 4)) : default;
        #endregion
        #region ContainedSoul
        private int? _ContainedSoulLocation;
        private bool ContainedSoul_IsSet => _ContainedSoulLocation.HasValue;
        public SoulLevel? ContainedSoul => ContainedSoul_IsSet ? (SoulLevel)HeaderTranslation.ExtractSubrecordSpan(_data, _ContainedSoulLocation!.Value, _package.Meta)[0] : default(SoulLevel?);
        #endregion
        #region MaximumCapacity
        private int? _MaximumCapacityLocation;
        private bool MaximumCapacity_IsSet => _MaximumCapacityLocation.HasValue;
        public SoulLevel? MaximumCapacity => MaximumCapacity_IsSet ? (SoulLevel)HeaderTranslation.ExtractSubrecordSpan(_data, _MaximumCapacityLocation!.Value, _package.Meta)[0] : default(SoulLevel?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SoulGemBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SoulGemBinaryOverlay SoulGemFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new SoulGemBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Name);
                }
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: null);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Icon);
                }
                case 0x49524353: // SCRI
                {
                    _ScriptLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Script);
                }
                case 0x41544144: // DATA
                {
                    _DATALocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.DATADataTypeState = SoulGem.DATADataType.Has;
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.Weight);
                }
                case 0x4C554F53: // SOUL
                {
                    _ContainedSoulLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.ContainedSoul);
                }
                case 0x50434C53: // SLCP
                {
                    _MaximumCapacityLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)SoulGem_FieldIndex.MaximumCapacity);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

