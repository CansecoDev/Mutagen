/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SpellUnleveled :
        Spell,
        ISpellUnleveledInternal,
        ILoquiObjectSetter<SpellUnleveled>,
        IEquatable<SpellUnleveled>,
        IEqualsMask
    {
        #region Ctor
        protected SpellUnleveled()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Spell.SpellType _Type;
        public Spell.SpellType Type
        {
            get => this._Type;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this._Type = value;
            }
        }
        #endregion
        #region Cost
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _Cost;
        public UInt32 Cost
        {
            get => this._Cost;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this._Cost = value;
            }
        }
        #endregion
        #region Level
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Spell.SpellLevel _Level;
        public Spell.SpellLevel Level
        {
            get => this._Level;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this._Level = value;
            }
        }
        #endregion
        #region Flag
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Spell.SpellFlag _Flag;
        public Spell.SpellFlag Flag
        {
            get => this._Flag;
            set
            {
                this.SPITDataTypeState |= SPITDataType.Has;
                this._Flag = value;
            }
        }
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect>? _Effects;
        public ExtendedList<Effect>? Effects
        {
            get => this._Effects;
            set => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter>? ISpellUnleveledGetter.Effects => _Effects;
        #endregion

        #endregion
        #region SPITDataTypeState
        public SpellUnleveled.SPITDataType SPITDataTypeState { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            SpellUnleveledMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ISpellUnleveledGetter rhs)) return false;
            return ((SpellUnleveledCommon)((ISpellUnleveledGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(SpellUnleveled obj)
        {
            return ((SpellUnleveledCommon)((ISpellUnleveledGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((SpellUnleveledCommon)((ISpellUnleveledGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SpellUnleveledXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SpellUnleveledXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new SpellUnleveled CreateFromXml(
            XElement node,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static SpellUnleveled CreateFromXml(
            XElement node,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static SpellUnleveled CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new SpellUnleveled();
            ((SpellUnleveledSetterCommon)((ISpellUnleveledGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static SpellUnleveled CreateFromXml(
            string path,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SpellUnleveled CreateFromXml(
            string path,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpellUnleveled CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static SpellUnleveled CreateFromXml(
            Stream stream,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static SpellUnleveled CreateFromXml(
            Stream stream,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static SpellUnleveled CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Spell.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Type = initialValue;
                this.Cost = initialValue;
                this.Level = initialValue;
                this.Flag = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.SPITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Type,
                TItem Cost,
                TItem Level,
                TItem Flag,
                TItem Effects,
                TItem SPITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags,
                Name: Name)
            {
                this.Type = Type;
                this.Cost = Cost;
                this.Level = Level;
                this.Flag = Flag;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.SPITDataTypeState = SPITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Type;
            public TItem Cost;
            public TItem Level;
            public TItem Flag;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem SPITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Cost, rhs.Cost)) return false;
                if (!object.Equals(this.Level, rhs.Level)) return false;
                if (!object.Equals(this.Flag, rhs.Flag)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.SPITDataTypeState, rhs.SPITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                int ret = 0;
                ret = ret.CombineHashCode(this.Type?.GetHashCode());
                ret = ret.CombineHashCode(this.Cost?.GetHashCode());
                ret = ret.CombineHashCode(this.Level?.GetHashCode());
                ret = ret.CombineHashCode(this.Flag?.GetHashCode());
                ret = ret.CombineHashCode(this.Effects?.GetHashCode());
                ret = ret.CombineHashCode(this.SPITDataTypeState?.GetHashCode());
                ret = ret.CombineHashCode(base.GetHashCode());
                return ret;
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Cost)) return false;
                if (!eval(this.Level)) return false;
                if (!eval(this.Flag)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SPITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Cost)) return true;
                if (eval(this.Level)) return true;
                if (eval(this.Flag)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SPITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SpellUnleveled.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Type = eval(this.Type);
                obj.Cost = eval(this.Cost);
                obj.Level = eval(this.Level);
                obj.Flag = eval(this.Flag);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SPITDataTypeState = eval(this.SPITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(SpellUnleveled.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, SpellUnleveled.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(SpellUnleveled.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Type ?? true)
                    {
                        fg.AppendItem(Type, "Type");
                    }
                    if (printMask?.Cost ?? true)
                    {
                        fg.AppendItem(Cost, "Cost");
                    }
                    if (printMask?.Level ?? true)
                    {
                        fg.AppendItem(Level, "Level");
                    }
                    if (printMask?.Flag ?? true)
                    {
                        fg.AppendItem(Flag, "Flag");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects.TryGet(out var EffectsItem))
                    {
                        fg.AppendLine("Effects =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.SPITDataTypeState ?? true)
                    {
                        fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Spell.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Type;
            public Exception? Cost;
            public Exception? Level;
            public Exception? Flag;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? SPITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
                switch (enu)
                {
                    case SpellUnleveled_FieldIndex.Type:
                        return Type;
                    case SpellUnleveled_FieldIndex.Cost:
                        return Cost;
                    case SpellUnleveled_FieldIndex.Level:
                        return Level;
                    case SpellUnleveled_FieldIndex.Flag:
                        return Flag;
                    case SpellUnleveled_FieldIndex.Effects:
                        return Effects;
                    case SpellUnleveled_FieldIndex.SPITDataTypeState:
                        return SPITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
                switch (enu)
                {
                    case SpellUnleveled_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case SpellUnleveled_FieldIndex.Cost:
                        this.Cost = ex;
                        break;
                    case SpellUnleveled_FieldIndex.Level:
                        this.Level = ex;
                        break;
                    case SpellUnleveled_FieldIndex.Flag:
                        this.Flag = ex;
                        break;
                    case SpellUnleveled_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case SpellUnleveled_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
                switch (enu)
                {
                    case SpellUnleveled_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case SpellUnleveled_FieldIndex.Cost:
                        this.Cost = (Exception?)obj;
                        break;
                    case SpellUnleveled_FieldIndex.Level:
                        this.Level = (Exception?)obj;
                        break;
                    case SpellUnleveled_FieldIndex.Flag:
                        this.Flag = (Exception?)obj;
                        break;
                    case SpellUnleveled_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case SpellUnleveled_FieldIndex.SPITDataTypeState:
                        this.SPITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Type != null) return true;
                if (Cost != null) return true;
                if (Level != null) return true;
                if (Flag != null) return true;
                if (Effects != null) return true;
                if (SPITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Type, "Type");
                fg.AppendItem(Cost, "Cost");
                fg.AppendItem(Level, "Level");
                fg.AppendItem(Flag, "Flag");
                if (Effects.TryGet(out var EffectsItem))
                {
                    fg.AppendLine("Effects =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(SPITDataTypeState, "SPITDataTypeState");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Cost = this.Cost.Combine(rhs.Cost);
                ret.Level = this.Level.Combine(rhs.Level);
                ret.Flag = this.Flag.Combine(rhs.Flag);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.SPITDataTypeState = this.SPITDataTypeState.Combine(rhs.SPITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Spell.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Type;
            public bool Cost;
            public bool Level;
            public bool Flag;
            public MaskItem<bool, Effect.TranslationMask?> Effects;
            public bool SPITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Type = defaultOn;
                this.Cost = defaultOn;
                this.Level = defaultOn;
                this.Flag = defaultOn;
                this.Effects = new MaskItem<bool, Effect.TranslationMask?>(defaultOn, null);
                this.SPITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Type, null));
                ret.Add((Cost, null));
                ret.Add((Level, null));
                ret.Add((Flag, null));
                ret.Add((Effects?.Overall ?? true, Effects?.Specific?.GetCrystal()));
                ret.Add((SPITDataTypeState, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GRUP_RECORD_TYPE = SpellUnleveled_Registration.TRIGGERING_RECORD_TYPE;
        [Flags]
        public enum SPITDataType
        {
            Has = 1
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => SpellUnleveledCommon.Instance.GetLinks(this);
        public SpellUnleveled(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SpellUnleveled(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public SpellUnleveled(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpellUnleveledBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellUnleveledBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new SpellUnleveled CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static SpellUnleveled CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new SpellUnleveled();
            ((SpellUnleveledSetterCommon)((ISpellUnleveledGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISpellUnleveledGetter)rhs, include);

        void IClearable.Clear()
        {
            ((SpellUnleveledSetterCommon)((ISpellUnleveledGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SpellUnleveled GetNew()
        {
            return new SpellUnleveled();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpellUnleveled :
        ISpellUnleveledGetter,
        ISpell,
        ILoquiObjectSetter<ISpellUnleveledInternal>
    {
        new Spell.SpellType Type { get; set; }
        new UInt32 Cost { get; set; }
        new Spell.SpellLevel Level { get; set; }
        new Spell.SpellFlag Flag { get; set; }
        new ExtendedList<Effect>? Effects { get; set; }
        new SpellUnleveled.SPITDataType SPITDataTypeState { get; set; }
    }

    public partial interface ISpellUnleveledInternal :
        ISpellInternal,
        ISpellUnleveled,
        ISpellUnleveledGetter
    {
    }

    public partial interface ISpellUnleveledGetter :
        ISpellGetter,
        ILoquiObject<ISpellUnleveledGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        Spell.SpellType Type { get; }
        UInt32 Cost { get; }
        Spell.SpellLevel Level { get; }
        Spell.SpellFlag Flag { get; }
        IReadOnlyList<IEffectGetter>? Effects { get; }
        SpellUnleveled.SPITDataType SPITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpellUnleveledMixIn
    {
        public static void Clear(this ISpellUnleveledInternal item)
        {
            ((SpellUnleveledSetterCommon)((ISpellUnleveledGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SpellUnleveled.Mask<bool> GetEqualsMask(
            this ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ISpellUnleveledGetter item,
            string? name = null,
            SpellUnleveled.Mask<bool>? printMask = null)
        {
            return ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ISpellUnleveledGetter item,
            FileGeneration fg,
            string? name = null,
            SpellUnleveled.Mask<bool>? printMask = null)
        {
            ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ISpellUnleveledGetter item,
            SpellUnleveled.Mask<bool?> checkMask)
        {
            return ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static SpellUnleveled.Mask<bool> GetHasBeenSetMask(this ISpellUnleveledGetter item)
        {
            var ret = new SpellUnleveled.Mask<bool>(false);
            ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs)
        {
            return ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ISpellUnleveledInternal lhs,
            ISpellUnleveledGetter rhs,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpellUnleveledSetterTranslationCommon)((ISpellUnleveledGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = SpellUnleveled.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpellUnleveledInternal lhs,
            ISpellUnleveledGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpellUnleveledSetterTranslationCommon)((ISpellUnleveledGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static SpellUnleveled DeepCopy(
            this ISpellUnleveledGetter item,
            SpellUnleveled.TranslationMask? copyMask = null)
        {
            return ((SpellUnleveledSetterTranslationCommon)((ISpellUnleveledGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SpellUnleveled DeepCopy(
            this ISpellUnleveledGetter item,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? copyMask = null)
        {
            return ((SpellUnleveledSetterTranslationCommon)((ISpellUnleveledGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SpellUnleveled DeepCopy(
            this ISpellUnleveledGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpellUnleveledSetterTranslationCommon)((ISpellUnleveledGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            XElement node,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            XElement node,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((SpellUnleveledSetterCommon)((ISpellUnleveledGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            string path,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            string path,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            Stream stream,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            Stream stream,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ISpellUnleveledInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            SpellUnleveled.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ISpellUnleveledInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ISpellUnleveledInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellUnleveledSetterCommon)((ISpellUnleveledGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum SpellUnleveled_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Type = 6,
        Cost = 7,
        Level = 8,
        Flag = 9,
        Effects = 10,
        SPITDataTypeState = 11,
    }
    #endregion

    #region Registration
    public partial class SpellUnleveled_Registration : ILoquiRegistration
    {
        public static readonly SpellUnleveled_Registration Instance = new SpellUnleveled_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 28,
            version: 0);

        public const string GUID = "6e7673df-39d3-4704-b1ef-ac774f9d01c3";

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(SpellUnleveled.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SpellUnleveled.ErrorMask);

        public static readonly Type ClassType = typeof(SpellUnleveled);

        public static readonly Type GetterType = typeof(ISpellUnleveledGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpellUnleveled);

        public static readonly Type? InternalSetterType = typeof(ISpellUnleveledInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SpellUnleveled";

        public const string Name = "SpellUnleveled";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TYPE":
                    return (ushort)SpellUnleveled_FieldIndex.Type;
                case "COST":
                    return (ushort)SpellUnleveled_FieldIndex.Cost;
                case "LEVEL":
                    return (ushort)SpellUnleveled_FieldIndex.Level;
                case "FLAG":
                    return (ushort)SpellUnleveled_FieldIndex.Flag;
                case "EFFECTS":
                    return (ushort)SpellUnleveled_FieldIndex.Effects;
                case "SPITDATATYPESTATE":
                    return (ushort)SpellUnleveled_FieldIndex.SPITDataTypeState;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return true;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return Spell_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Effects:
                    return true;
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return Spell_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return Spell_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return "Type";
                case SpellUnleveled_FieldIndex.Cost:
                    return "Cost";
                case SpellUnleveled_FieldIndex.Level:
                    return "Level";
                case SpellUnleveled_FieldIndex.Flag:
                    return "Flag";
                case SpellUnleveled_FieldIndex.Effects:
                    return "Effects";
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return "SPITDataTypeState";
                default:
                    return Spell_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return Spell_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                case SpellUnleveled_FieldIndex.Cost:
                case SpellUnleveled_FieldIndex.Level:
                case SpellUnleveled_FieldIndex.Flag:
                case SpellUnleveled_FieldIndex.Effects:
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return false;
                default:
                    return Spell_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            SpellUnleveled_FieldIndex enu = (SpellUnleveled_FieldIndex)index;
            switch (enu)
            {
                case SpellUnleveled_FieldIndex.Type:
                    return typeof(Spell.SpellType);
                case SpellUnleveled_FieldIndex.Cost:
                    return typeof(UInt32);
                case SpellUnleveled_FieldIndex.Level:
                    return typeof(Spell.SpellLevel);
                case SpellUnleveled_FieldIndex.Flag:
                    return typeof(Spell.SpellFlag);
                case SpellUnleveled_FieldIndex.Effects:
                    return typeof(ExtendedList<Effect>);
                case SpellUnleveled_FieldIndex.SPITDataTypeState:
                    return typeof(SpellUnleveled.SPITDataType);
                default:
                    return Spell_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(SpellUnleveledXmlWriteTranslation);
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType SPIT_HEADER = new RecordType("SPIT");
        public static readonly RecordType EFID_HEADER = new RecordType("EFID");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = SPEL_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(SpellUnleveledBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class SpellUnleveledSetterCommon : SpellSetterCommon
    {
        public new static readonly SpellUnleveledSetterCommon Instance = new SpellUnleveledSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpellUnleveledInternal item)
        {
            ClearPartial();
            item.Type = default;
            item.Cost = default;
            item.Level = default;
            item.Flag = default;
            item.Effects = null;
            item.SPITDataTypeState = default;
            base.Clear(item);
        }
        
        public override void Clear(ISpellInternal item)
        {
            Clear(item: (ISpellUnleveledInternal)item);
        }
        
        public override void Clear(IASpellInternal item)
        {
            Clear(item: (ISpellUnleveledInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISpellUnleveledInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISpellUnleveledInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ISpellUnleveledInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "HasSPITDataType":
                    item.SPITDataTypeState |= SpellUnleveled.SPITDataType.Has;
                    break;
                default:
                    SpellSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            ISpellUnleveledInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    SpellUnleveledXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => SpellUnleveled_Registration.SPEL_HEADER;
        protected static void FillBinaryStructs(
            ISpellUnleveledInternal item,
            MutagenFrame frame)
        {
            SpellSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ISpellUnleveledInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x54495053: // SPIT
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (!dataFrame.Complete)
                    {
                        item.SPITDataTypeState = SpellUnleveled.SPITDataType.Has;
                    }
                    item.Type = EnumBinaryTranslation<Spell.SpellType>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Cost = dataFrame.ReadUInt32();
                    item.Level = EnumBinaryTranslation<Spell.SpellLevel>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    item.Flag = EnumBinaryTranslation<Spell.SpellFlag>.Instance.Parse(frame: dataFrame.SpawnWithLength(4));
                    return TryGet<int?>.Succeed((int)SpellUnleveled_FieldIndex.Flag);
                }
                case 0x44494645: // EFID
                {
                    item.Effects = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Effect>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: SpellUnleveled_Registration.EFID_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Effect listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Effect>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            })
                        .ToExtendedList<Effect>();
                    return TryGet<int?>.Succeed((int)SpellUnleveled_FieldIndex.Effects);
                }
                default:
                    return SpellSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public void CopyInFromBinary(
            ISpellUnleveledInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ISpellUnleveledInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class SpellUnleveledCommon : SpellCommon
    {
        public new static readonly SpellUnleveledCommon Instance = new SpellUnleveledCommon();

        public SpellUnleveled.Mask<bool> GetEqualsMask(
            ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SpellUnleveled.Mask<bool>(false);
            ((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpellUnleveledGetter item,
            ISpellUnleveledGetter rhs,
            SpellUnleveled.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Type = item.Type == rhs.Type;
            ret.Cost = item.Cost == rhs.Cost;
            ret.Level = item.Level == rhs.Level;
            ret.Flag = item.Flag == rhs.Flag;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SPITDataTypeState = item.SPITDataTypeState == rhs.SPITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ISpellUnleveledGetter item,
            string? name = null,
            SpellUnleveled.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ISpellUnleveledGetter item,
            FileGeneration fg,
            string? name = null,
            SpellUnleveled.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"SpellUnleveled =>");
            }
            else
            {
                fg.AppendLine($"{name} (SpellUnleveled) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ISpellUnleveledGetter item,
            FileGeneration fg,
            SpellUnleveled.Mask<bool>? printMask = null)
        {
            SpellCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if (printMask?.Type ?? true)
            {
                fg.AppendItem(item.Type, "Type");
            }
            if (printMask?.Cost ?? true)
            {
                fg.AppendItem(item.Cost, "Cost");
            }
            if (printMask?.Level ?? true)
            {
                fg.AppendItem(item.Level, "Level");
            }
            if (printMask?.Flag ?? true)
            {
                fg.AppendItem(item.Flag, "Flag");
            }
            if ((printMask?.Effects?.Overall ?? true)
                && item.Effects.TryGet(out var EffectsItem))
            {
                fg.AppendLine("Effects =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in EffectsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.SPITDataTypeState ?? true)
            {
                fg.AppendItem(item.SPITDataTypeState, "SPITDataTypeState");
            }
        }
        
        public bool HasBeenSet(
            ISpellUnleveledGetter item,
            SpellUnleveled.Mask<bool?> checkMask)
        {
            if (checkMask.Effects?.Overall.HasValue ?? false && checkMask.Effects!.Overall.Value != (item.Effects != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ISpellUnleveledGetter item,
            SpellUnleveled.Mask<bool> mask)
        {
            mask.Type = true;
            mask.Cost = true;
            mask.Level = true;
            mask.Flag = true;
            if (item.Effects.TryGet(out var EffectsItem))
            {
                mask.Effects = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Effect.Mask<bool>?>>?>(true, EffectsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Effect.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.SPITDataTypeState = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static SpellUnleveled_FieldIndex ConvertFieldIndex(Spell_FieldIndex index)
        {
            switch (index)
            {
                case Spell_FieldIndex.MajorRecordFlagsRaw:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.OblivionMajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case Spell_FieldIndex.Name:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SpellUnleveled_FieldIndex ConvertFieldIndex(ASpell_FieldIndex index)
        {
            switch (index)
            {
                case ASpell_FieldIndex.MajorRecordFlagsRaw:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case ASpell_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case ASpell_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case ASpell_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case ASpell_FieldIndex.OblivionMajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SpellUnleveled_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new SpellUnleveled_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (SpellUnleveled_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SpellUnleveled_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpellUnleveledGetter? lhs,
            ISpellUnleveledGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (lhs.Type != rhs.Type) return false;
            if (lhs.Cost != rhs.Cost) return false;
            if (lhs.Level != rhs.Level) return false;
            if (lhs.Flag != rhs.Flag) return false;
            if (!lhs.Effects.SequenceEqual(rhs.Effects)) return false;
            if (lhs.SPITDataTypeState != rhs.SPITDataTypeState) return false;
            return true;
        }
        
        public override bool Equals(
            ISpellGetter? lhs,
            ISpellGetter? rhs)
        {
            return Equals(
                lhs: (ISpellUnleveledGetter?)lhs,
                rhs: rhs as ISpellUnleveledGetter);
        }
        
        public override bool Equals(
            IASpellGetter? lhs,
            IASpellGetter? rhs)
        {
            return Equals(
                lhs: (ISpellUnleveledGetter?)lhs,
                rhs: rhs as ISpellUnleveledGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISpellUnleveledGetter?)lhs,
                rhs: rhs as ISpellUnleveledGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ISpellUnleveledGetter?)lhs,
                rhs: rhs as ISpellUnleveledGetter);
        }
        
        public virtual int GetHashCode(ISpellUnleveledGetter item)
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(item.Type).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Cost).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Level).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Flag).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.Effects).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(item.SPITDataTypeState).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }
        
        public override int GetHashCode(ISpellGetter item)
        {
            return GetHashCode(item: (ISpellUnleveledGetter)item);
        }
        
        public override int GetHashCode(IASpellGetter item)
        {
            return GetHashCode(item: (ISpellUnleveledGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpellUnleveledGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpellUnleveledGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SpellUnleveled.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ISpellUnleveledGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            if (obj.Effects != null)
            {
                foreach (var item in obj.Effects.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(SpellUnleveled obj, SpellUnleveled rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new SpellUnleveled(getNextFormKey());
            ret.DeepCopyIn((SpellUnleveled)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (SpellUnleveled)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class SpellUnleveledSetterTranslationCommon : SpellSetterTranslationCommon
    {
        public new static readonly SpellUnleveledSetterTranslationCommon Instance = new SpellUnleveledSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ISpellUnleveledInternal item,
            ISpellUnleveledGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ISpellUnleveled item,
            ISpellUnleveledGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Cost) ?? true))
            {
                item.Cost = rhs.Cost;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Level) ?? true))
            {
                item.Level = rhs.Level;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Flag) ?? true))
            {
                item.Flag = rhs.Flag;
            }
            if ((copyMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Effects);
                try
                {
                    if ((rhs.Effects != null))
                    {
                        item.Effects = 
                            rhs.Effects
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Effect>();
                    }
                    else
                    {
                        item.Effects = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.SPITDataTypeState) ?? true))
            {
                item.SPITDataTypeState = rhs.SPITDataTypeState;
            }
        }
        
        public override void DeepCopyIn(
            ISpellInternal item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveledInternal)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            ISpell item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveled)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IASpellInternal item,
            IASpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveledInternal)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IASpell item,
            IASpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveled)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveledInternal)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveled)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveledInternal)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ISpellUnleveled)item,
                rhs: (ISpellUnleveledGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public SpellUnleveled DeepCopy(
            ISpellUnleveledGetter item,
            SpellUnleveled.TranslationMask? copyMask = null)
        {
            SpellUnleveled ret = (SpellUnleveled)((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public SpellUnleveled DeepCopy(
            ISpellUnleveledGetter item,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? copyMask = null)
        {
            SpellUnleveled ret = (SpellUnleveled)((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public SpellUnleveled DeepCopy(
            ISpellUnleveledGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SpellUnleveled ret = (SpellUnleveled)((SpellUnleveledCommon)((ISpellUnleveledGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SpellUnleveled
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpellUnleveled_Registration.Instance;
        public new static SpellUnleveled_Registration Registration => SpellUnleveled_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpellUnleveledCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SpellUnleveledSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpellUnleveledSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SpellUnleveledXmlWriteTranslation :
        SpellXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static SpellUnleveledXmlWriteTranslation Instance = new SpellUnleveledXmlWriteTranslation();

        public static void WriteToNodeXml(
            ISpellUnleveledGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            SpellXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if (item.SPITDataTypeState.HasFlag(SpellUnleveled.SPITDataType.Has))
            {
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Type) ?? true))
                {
                    EnumXmlTranslation<Spell.SpellType>.Instance.Write(
                        node: node,
                        name: nameof(item.Type),
                        item: item.Type,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Type,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Cost) ?? true))
                {
                    UInt32XmlTranslation.Instance.Write(
                        node: node,
                        name: nameof(item.Cost),
                        item: item.Cost,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Cost,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Level) ?? true))
                {
                    EnumXmlTranslation<Spell.SpellLevel>.Instance.Write(
                        node: node,
                        name: nameof(item.Level),
                        item: item.Level,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Level,
                        errorMask: errorMask);
                }
                if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Flag) ?? true))
                {
                    EnumXmlTranslation<Spell.SpellFlag>.Instance.Write(
                        node: node,
                        name: nameof(item.Flag),
                        item: item.Flag,
                        fieldIndex: (int)SpellUnleveled_FieldIndex.Flag,
                        errorMask: errorMask);
                }
            }
            if ((item.Effects != null)
                && (translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.Effects) ?? true))
            {
                ListXmlTranslation<IEffectGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Effects),
                    item: item.Effects,
                    fieldIndex: (int)SpellUnleveled_FieldIndex.Effects,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)SpellUnleveled_FieldIndex.Effects),
                    transl: (XElement subNode, IEffectGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((EffectXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)SpellUnleveled_FieldIndex.SPITDataTypeState) ?? true))
            {
                EnumXmlTranslation<SpellUnleveled.SPITDataType>.Instance.Write(
                    node: node,
                    name: nameof(item.SPITDataTypeState),
                    item: item.SPITDataTypeState,
                    fieldIndex: (int)SpellUnleveled_FieldIndex.SPITDataTypeState,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            ISpellUnleveledGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.SpellUnleveled");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.SpellUnleveled");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            ISpellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IASpellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class SpellUnleveledXmlCreateTranslation : SpellXmlCreateTranslation
    {
        public new readonly static SpellUnleveledXmlCreateTranslation Instance = new SpellUnleveledXmlCreateTranslation();

        public static void FillPublicXml(
            ISpellUnleveledInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    SpellUnleveledXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ISpellUnleveledInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Type":
                    errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Type);
                    try
                    {
                        item.Type = EnumXmlTranslation<Spell.SpellType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    item.SPITDataTypeState |= SpellUnleveled.SPITDataType.Has;
                    break;
                case "Cost":
                    errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Cost);
                    try
                    {
                        item.Cost = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Level":
                    errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Level);
                    try
                    {
                        item.Level = EnumXmlTranslation<Spell.SpellLevel>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flag":
                    errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Flag);
                    try
                    {
                        item.Flag = EnumXmlTranslation<Spell.SpellFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Effects":
                    errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.Effects);
                    try
                    {
                        if (ListXmlTranslation<Effect>.Instance.Parse(
                            node: node,
                            enumer: out var EffectsItem,
                            transl: LoquiXmlTranslation<Effect>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Effects = EffectsItem.ToExtendedList();
                        }
                        else
                        {
                            item.Effects = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SPITDataTypeState":
                    errorMask?.PushIndex((int)SpellUnleveled_FieldIndex.SPITDataTypeState);
                    try
                    {
                        item.SPITDataTypeState = EnumXmlTranslation<SpellUnleveled.SPITDataType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    SpellXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class SpellUnleveledXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ISpellUnleveledGetter item,
            XElement node,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((SpellUnleveledXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = SpellUnleveled.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ISpellUnleveledGetter item,
            string path,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ISpellUnleveledGetter item,
            Stream stream,
            out SpellUnleveled.ErrorMask errorMask,
            SpellUnleveled.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SpellUnleveledBinaryWriteTranslation :
        SpellBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static SpellUnleveledBinaryWriteTranslation Instance = new SpellUnleveledBinaryWriteTranslation();

        public static void WriteEmbedded(
            ISpellUnleveledGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ISpellUnleveledGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            SpellBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.SPITDataTypeState.HasFlag(SpellUnleveled.SPITDataType.Has))
            {
                using (HeaderExport.ExportSubrecordHeader(writer, recordTypeConverter.ConvertToCustom(SpellUnleveled_Registration.SPIT_HEADER)))
                {
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellType>.Instance.Write(
                        writer,
                        item.Type,
                        length: 4);
                    writer.Write(item.Cost);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellLevel>.Instance.Write(
                        writer,
                        item.Level,
                        length: 4);
                    Mutagen.Bethesda.Binary.EnumBinaryTranslation<Spell.SpellFlag>.Instance.Write(
                        writer,
                        item.Flag,
                        length: 4);
                }
            }
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            ISpellUnleveledGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: SpellUnleveled_Registration.SPEL_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            ISpellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IASpellGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ISpellUnleveledGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class SpellUnleveledBinaryCreateTranslation : SpellBinaryCreateTranslation
    {
        public new readonly static SpellUnleveledBinaryCreateTranslation Instance = new SpellUnleveledBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SpellUnleveledBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class SpellUnleveledBinaryOverlay :
        SpellBinaryOverlay,
        ISpellUnleveledGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SpellUnleveled_Registration.Instance;
        public new static SpellUnleveled_Registration Registration => SpellUnleveled_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpellUnleveledCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpellUnleveledSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ISpellUnleveledGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => SpellUnleveledCommon.Instance.GetLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => SpellUnleveledXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((SpellUnleveledXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpellUnleveledBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((SpellUnleveledBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        private int? _SPITLocation;
        public SpellUnleveled.SPITDataType SPITDataTypeState { get; private set; }
        #region Type
        private int _TypeLocation => _SPITLocation!.Value + 0x0;
        private bool _Type_IsSet => _SPITLocation.HasValue;
        public Spell.SpellType Type => _Type_IsSet ? (Spell.SpellType)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_TypeLocation, 4)) : default;
        #endregion
        #region Cost
        private int _CostLocation => _SPITLocation!.Value + 0x4;
        private bool _Cost_IsSet => _SPITLocation.HasValue;
        public UInt32 Cost => _Cost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_data.Span.Slice(_CostLocation, 4)) : default;
        #endregion
        #region Level
        private int _LevelLocation => _SPITLocation!.Value + 0x8;
        private bool _Level_IsSet => _SPITLocation.HasValue;
        public Spell.SpellLevel Level => _Level_IsSet ? (Spell.SpellLevel)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_LevelLocation, 4)) : default;
        #endregion
        #region Flag
        private int _FlagLocation => _SPITLocation!.Value + 0xC;
        private bool _Flag_IsSet => _SPITLocation.HasValue;
        public Spell.SpellFlag Flag => _Flag_IsSet ? (Spell.SpellFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(_FlagLocation, 4)) : default;
        #endregion
        public IReadOnlyList<IEffectGetter>? Effects { get; private set; }
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected SpellUnleveledBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static SpellUnleveledBinaryOverlay SpellUnleveledFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new SpellUnleveledBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x54495053: // SPIT
                {
                    _SPITLocation = (ushort)(stream.Position - offset) + _package.Meta.SubConstants.TypeAndLengthLength;
                    this.SPITDataTypeState = SpellUnleveled.SPITDataType.Has;
                    return TryGet<int?>.Succeed((int)SpellUnleveled_FieldIndex.Flag);
                }
                case 0x44494645: // EFID
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<EffectBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: null,
                        trigger: SpellUnleveled_Registration.EFID_HEADER,
                        factory:  EffectBinaryOverlay.EffectFactory);
                    return TryGet<int?>.Succeed((int)SpellUnleveled_FieldIndex.Effects);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

