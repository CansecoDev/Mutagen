/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Tree :
        OblivionMajorRecord,
        ITreeInternal,
        ILoquiObjectSetter<Tree>,
        IEquatable<Tree>,
        IEqualsMask
    {
        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITreeGetter.Model => this.Model;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITreeGetter.Icon => this.Icon;
        #endregion
        #region SpeedTreeSeeds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<UInt32>? _SpeedTreeSeeds;
        public ExtendedList<UInt32>? SpeedTreeSeeds
        {
            get => this._SpeedTreeSeeds;
            set => this._SpeedTreeSeeds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<UInt32>? ITreeGetter.SpeedTreeSeeds => _SpeedTreeSeeds;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TreeData? _Data;
        public TreeData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITreeDataGetter? ITreeGetter.Data => this.Data;
        #endregion
        #region BillboardDimensions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Dimensions? _BillboardDimensions;
        public Dimensions? BillboardDimensions
        {
            get => _BillboardDimensions;
            set => _BillboardDimensions = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDimensionsGetter? ITreeGetter.BillboardDimensions => this.BillboardDimensions;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is ITreeGetter rhs)) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Tree obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Tree CreateFromXml(
            XElement node,
            Tree.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Tree CreateFromXml(
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Tree CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Tree CreateFromXml(
            string path,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Tree CreateFromXml(
            Stream stream,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Tree CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Icon = initialValue;
                this.SpeedTreeSeeds = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, TreeData.Mask<TItem>?>(initialValue, new TreeData.Mask<TItem>(initialValue));
                this.BillboardDimensions = new MaskItem<TItem, Dimensions.Mask<TItem>?>(initialValue, new Dimensions.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Model,
                TItem Icon,
                TItem SpeedTreeSeeds,
                TItem Data,
                TItem BillboardDimensions)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Icon = Icon;
                this.SpeedTreeSeeds = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SpeedTreeSeeds, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, TreeData.Mask<TItem>?>(Data, new TreeData.Mask<TItem>(Data));
                this.BillboardDimensions = new MaskItem<TItem, Dimensions.Mask<TItem>?>(BillboardDimensions, new Dimensions.Mask<TItem>(BillboardDimensions));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Icon;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SpeedTreeSeeds;
            public MaskItem<TItem, TreeData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, Dimensions.Mask<TItem>?>? BillboardDimensions { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.SpeedTreeSeeds, rhs.SpeedTreeSeeds)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.BillboardDimensions, rhs.BillboardDimensions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Model);
                hash.Add(this.Icon);
                hash.Add(this.SpeedTreeSeeds);
                hash.Add(this.Data);
                hash.Add(this.BillboardDimensions);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Icon)) return false;
                if (this.SpeedTreeSeeds != null)
                {
                    if (!eval(this.SpeedTreeSeeds.Overall)) return false;
                    if (this.SpeedTreeSeeds.Specific != null)
                    {
                        foreach (var item in this.SpeedTreeSeeds.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (BillboardDimensions != null)
                {
                    if (!eval(this.BillboardDimensions.Overall)) return false;
                    if (this.BillboardDimensions.Specific != null && !this.BillboardDimensions.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Icon)) return true;
                if (this.SpeedTreeSeeds != null)
                {
                    if (eval(this.SpeedTreeSeeds.Overall)) return true;
                    if (this.SpeedTreeSeeds.Specific != null)
                    {
                        foreach (var item in this.SpeedTreeSeeds.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (BillboardDimensions != null)
                {
                    if (eval(this.BillboardDimensions.Overall)) return true;
                    if (this.BillboardDimensions.Specific != null && this.BillboardDimensions.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Tree.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Icon = eval(this.Icon);
                if (SpeedTreeSeeds != null)
                {
                    obj.SpeedTreeSeeds = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SpeedTreeSeeds.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SpeedTreeSeeds.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SpeedTreeSeeds.Specific = l;
                        foreach (var item in SpeedTreeSeeds.Specific.WithIndex())
                        {
                            R mask = eval(item.Item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, TreeData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.BillboardDimensions = this.BillboardDimensions == null ? null : new MaskItem<R, Dimensions.Mask<R>?>(eval(this.BillboardDimensions.Overall), this.BillboardDimensions.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Tree.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Tree.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Tree.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.ToString(fg);
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if ((printMask?.SpeedTreeSeeds?.Overall ?? true)
                        && SpeedTreeSeeds.TryGet(out var SpeedTreeSeedsItem))
                    {
                        fg.AppendLine("SpeedTreeSeeds =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SpeedTreeSeedsItem.Overall);
                            if (SpeedTreeSeedsItem.Specific != null)
                            {
                                foreach (var subItem in SpeedTreeSeedsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendItem(subItem);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.BillboardDimensions?.Overall ?? true)
                    {
                        BillboardDimensions?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Icon;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SpeedTreeSeeds;
            public MaskItem<Exception?, TreeData.ErrorMask?>? Data;
            public MaskItem<Exception?, Dimensions.ErrorMask?>? BillboardDimensions;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.Model:
                        return Model;
                    case Tree_FieldIndex.Icon:
                        return Icon;
                    case Tree_FieldIndex.SpeedTreeSeeds:
                        return SpeedTreeSeeds;
                    case Tree_FieldIndex.Data:
                        return Data;
                    case Tree_FieldIndex.BillboardDimensions:
                        return BillboardDimensions;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Tree_FieldIndex.SpeedTreeSeeds:
                        this.SpeedTreeSeeds = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Tree_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, TreeData.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.BillboardDimensions:
                        this.BillboardDimensions = new MaskItem<Exception?, Dimensions.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.SpeedTreeSeeds:
                        this.SpeedTreeSeeds = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Tree_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, TreeData.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.BillboardDimensions:
                        this.BillboardDimensions = (MaskItem<Exception?, Dimensions.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (Icon != null) return true;
                if (SpeedTreeSeeds != null) return true;
                if (Data != null) return true;
                if (BillboardDimensions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                Model?.ToString(fg);
                fg.AppendItem(Icon, "Icon");
                if (SpeedTreeSeeds.TryGet(out var SpeedTreeSeedsItem))
                {
                    fg.AppendLine("SpeedTreeSeeds =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SpeedTreeSeedsItem.Overall);
                        if (SpeedTreeSeedsItem.Specific != null)
                        {
                            foreach (var subItem in SpeedTreeSeedsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendItem(subItem);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                Data?.ToString(fg);
                BillboardDimensions?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.SpeedTreeSeeds = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ExceptionExt.Combine(this.SpeedTreeSeeds?.Overall, rhs.SpeedTreeSeeds?.Overall), ExceptionExt.Combine(this.SpeedTreeSeeds?.Specific, rhs.SpeedTreeSeeds?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.BillboardDimensions = this.BillboardDimensions.Combine(rhs.BillboardDimensions, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public MaskItem<bool, Model.TranslationMask?> Model;
            public bool Icon;
            public bool SpeedTreeSeeds;
            public MaskItem<bool, TreeData.TranslationMask?> Data;
            public MaskItem<bool, Dimensions.TranslationMask?> BillboardDimensions;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Model = new MaskItem<bool, Model.TranslationMask?>(defaultOn, null);
                this.Icon = defaultOn;
                this.SpeedTreeSeeds = defaultOn;
                this.Data = new MaskItem<bool, TreeData.TranslationMask?>(defaultOn, null);
                this.BillboardDimensions = new MaskItem<bool, Dimensions.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model?.Overall ?? true, Model?.Specific?.GetCrystal()));
                ret.Add((Icon, null));
                ret.Add((SpeedTreeSeeds, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((BillboardDimensions?.Overall ?? true, BillboardDimensions?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Tree_Registration.TriggeringRecordType;
        public Tree(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Tree(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Tree(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Tree CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Tree CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeGetter)rhs, include);

        void IClearable.Clear()
        {
            ((TreeSetterCommon)((ITreeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Tree GetNew()
        {
            return new Tree();
        }

    }
    #endregion

    #region Interface
    public partial interface ITree :
        ITreeGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<ITreeInternal>
    {
        new Model? Model { get; set; }
        new String? Icon { get; set; }
        new ExtendedList<UInt32>? SpeedTreeSeeds { get; set; }
        new TreeData? Data { get; set; }
        new Dimensions? BillboardDimensions { get; set; }
    }

    public partial interface ITreeInternal :
        IOblivionMajorRecordInternal,
        ITree,
        ITreeGetter
    {
    }

    public partial interface ITreeGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<ITreeGetter>,
        IXmlItem,
        IBinaryItem
    {
        IModelGetter? Model { get; }
        String? Icon { get; }
        IReadOnlyList<UInt32>? SpeedTreeSeeds { get; }
        ITreeDataGetter? Data { get; }
        IDimensionsGetter? BillboardDimensions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TreeMixIn
    {
        public static void Clear(this ITreeInternal item)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Tree.Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this ITreeGetter item,
            Tree.Mask<bool?> checkMask)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Tree.Mask<bool> GetHasBeenSetMask(this ITreeGetter item)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this ITreeGetter item,
            ITreeGetter rhs)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            Tree.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this ITreeInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Tree.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Tree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Model = 5,
        Icon = 6,
        SpeedTreeSeeds = 7,
        Data = 8,
        BillboardDimensions = 9,
    }
    #endregion

    #region Registration
    public partial class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 79,
            version: 0);

        public const string GUID = "82606775-b1a1-4c44-9052-b021c5ccc13a";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Tree.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree.ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type? InternalSetterType = typeof(ITreeInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MODEL":
                    return (ushort)Tree_FieldIndex.Model;
                case "ICON":
                    return (ushort)Tree_FieldIndex.Icon;
                case "SPEEDTREESEEDS":
                    return (ushort)Tree_FieldIndex.SpeedTreeSeeds;
                case "DATA":
                    return (ushort)Tree_FieldIndex.Data;
                case "BILLBOARDDIMENSIONS":
                    return (ushort)Tree_FieldIndex.BillboardDimensions;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return true;
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.Data:
                case Tree_FieldIndex.BillboardDimensions:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Data:
                case Tree_FieldIndex.BillboardDimensions:
                    return true;
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.Data:
                case Tree_FieldIndex.BillboardDimensions:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return "Model";
                case Tree_FieldIndex.Icon:
                    return "Icon";
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return "SpeedTreeSeeds";
                case Tree_FieldIndex.Data:
                    return "Data";
                case Tree_FieldIndex.BillboardDimensions:
                    return "BillboardDimensions";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.Data:
                case Tree_FieldIndex.BillboardDimensions:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                case Tree_FieldIndex.Icon:
                case Tree_FieldIndex.SpeedTreeSeeds:
                case Tree_FieldIndex.Data:
                case Tree_FieldIndex.BillboardDimensions:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Tree_FieldIndex enu = (Tree_FieldIndex)index;
            switch (enu)
            {
                case Tree_FieldIndex.Model:
                    return typeof(Model);
                case Tree_FieldIndex.Icon:
                    return typeof(String);
                case Tree_FieldIndex.SpeedTreeSeeds:
                    return typeof(ExtendedList<UInt32>);
                case Tree_FieldIndex.Data:
                    return typeof(TreeData);
                case Tree_FieldIndex.BillboardDimensions:
                    return typeof(Dimensions);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(TreeXmlWriteTranslation);
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType MODL_HEADER = new RecordType("MODL");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType BNAM_HEADER = new RecordType("BNAM");
        public static readonly RecordType TriggeringRecordType = TREE_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 5;
        public static readonly Type BinaryWriteTranslation = typeof(TreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class TreeSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly TreeSetterCommon Instance = new TreeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.Icon = default;
            item.SpeedTreeSeeds = null;
            item.Data = null;
            item.BillboardDimensions = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Tree)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Tree)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Tree_Registration.TREE_HEADER;
        protected static void FillBinaryStructs(
            ITreeInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            ITreeInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.SpeedTreeSeeds = 
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            transl: UInt32BinaryTranslation.Instance.Parse)
                        .ToExtendedList<UInt32>();
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    item.Data = Mutagen.Bethesda.Oblivion.TreeData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Data);
                }
                case 0x4D414E42: // BNAM
                {
                    item.BillboardDimensions = Mutagen.Bethesda.Oblivion.Dimensions.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardDimensions);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            ITreeInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<ITreeInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class TreeCommon : OblivionMajorRecordCommon
    {
        public new static readonly TreeCommon Instance = new TreeCommon();

        public Tree.Mask<bool> GetEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.SpeedTreeSeeds = item.SpeedTreeSeeds.CollectionEqualsHelper(
                rhs.SpeedTreeSeeds,
                (l, r) => l == r,
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.BillboardDimensions = EqualsMaskHelper.EqualsHelper(
                item.BillboardDimensions,
                rhs.BillboardDimensions,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            ITreeGetter item,
            FileGeneration fg,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Tree =>");
            }
            else
            {
                fg.AppendLine($"{name} (Tree) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            ITreeGetter item,
            FileGeneration fg,
            Tree.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model.TryGet(out var ModelItem))
            {
                ModelItem?.ToString(fg, "Model");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.SpeedTreeSeeds?.Overall ?? true)
                && item.SpeedTreeSeeds.TryGet(out var SpeedTreeSeedsItem))
            {
                fg.AppendLine("SpeedTreeSeeds =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SpeedTreeSeedsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(subItem);
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.BillboardDimensions?.Overall ?? true)
                && item.BillboardDimensions.TryGet(out var BillboardDimensionsItem))
            {
                BillboardDimensionsItem?.ToString(fg, "BillboardDimensions");
            }
        }
        
        public bool HasBeenSet(
            ITreeGetter item,
            Tree.Mask<bool?> checkMask)
        {
            if (checkMask.Model?.Overall.HasValue ?? false && checkMask.Model.Overall.Value != (item.Model != null)) return false;
            if (checkMask.Model?.Specific != null && (item.Model == null || !item.Model.HasBeenSet(checkMask.Model.Specific))) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.SpeedTreeSeeds?.Overall.HasValue ?? false && checkMask.SpeedTreeSeeds!.Overall.Value != (item.SpeedTreeSeeds != null)) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.BillboardDimensions?.Overall.HasValue ?? false && checkMask.BillboardDimensions.Overall.Value != (item.BillboardDimensions != null)) return false;
            if (checkMask.BillboardDimensions?.Specific != null && (item.BillboardDimensions == null || !item.BillboardDimensions.HasBeenSet(checkMask.BillboardDimensions.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            ITreeGetter item,
            Tree.Mask<bool> mask)
        {
            var itemModel = item.Model;
            mask.Model = new MaskItem<bool, Model.Mask<bool>?>(itemModel != null, itemModel?.GetHasBeenSetMask());
            mask.Icon = (item.Icon != null);
            mask.SpeedTreeSeeds = new MaskItem<bool, IEnumerable<(int Index, bool Value)>?>((item.SpeedTreeSeeds != null), default);
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, TreeData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            var itemBillboardDimensions = item.BillboardDimensions;
            mask.BillboardDimensions = new MaskItem<bool, Dimensions.Mask<bool>?>(itemBillboardDimensions != null, itemBillboardDimensions?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Tree_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeGetter? lhs,
            ITreeGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(lhs.Model, rhs.Model)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!lhs.SpeedTreeSeeds.SequenceEqual(rhs.SpeedTreeSeeds)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!object.Equals(lhs.BillboardDimensions, rhs.BillboardDimensions)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter);
        }
        
        public virtual int GetHashCode(ITreeGetter item)
        {
            var hash = new HashCode();
            if (item.Model.TryGet(out var Modelitem))
            {
                hash.Add(Modelitem);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                hash.Add(Iconitem);
            }
            hash.Add(item.SpeedTreeSeeds);
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.BillboardDimensions.TryGet(out var BillboardDimensionsitem))
            {
                hash.Add(BillboardDimensionsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Tree.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(ITreeGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        partial void PostDuplicate(Tree obj, Tree rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Tree(getNextFormKey());
            ret.DeepCopyIn((Tree)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Tree)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class TreeSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly TreeSetterTranslationCommon Instance = new TreeSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            ITreeInternal item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            ITree item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if(rhs.Model.TryGet(out var rhsModel))
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.SpeedTreeSeeds) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                try
                {
                    if ((rhs.SpeedTreeSeeds != null))
                    {
                        item.SpeedTreeSeeds = 
                            rhs.SpeedTreeSeeds
                            .ToExtendedList<UInt32>();
                    }
                    else
                    {
                        item.SpeedTreeSeeds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardDimensions) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.BillboardDimensions);
                try
                {
                    if(rhs.BillboardDimensions.TryGet(out var rhsBillboardDimensions))
                    {
                        item.BillboardDimensions = rhsBillboardDimensions.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.BillboardDimensions));
                    }
                    else
                    {
                        item.BillboardDimensions = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Tree DeepCopy(
            ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Tree
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TreeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static TreeXmlWriteTranslation Instance = new TreeXmlWriteTranslation();

        public static void WriteToNodeXml(
            ITreeGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Model != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                if (item.Model.TryGet(out var ModelItem))
                {
                    ((ModelXmlWriteTranslation)((IXmlItem)ModelItem).XmlWriteTranslator).Write(
                        item: ModelItem,
                        node: node,
                        name: nameof(item.Model),
                        fieldIndex: (int)Tree_FieldIndex.Model,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                }
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Tree_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.SpeedTreeSeeds != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.SpeedTreeSeeds) ?? true))
            {
                ListXmlTranslation<UInt32>.Instance.Write(
                    node: node,
                    name: nameof(item.SpeedTreeSeeds),
                    item: item.SpeedTreeSeeds,
                    fieldIndex: (int)Tree_FieldIndex.SpeedTreeSeeds,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.SpeedTreeSeeds),
                    transl: (XElement subNode, UInt32 subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        UInt32XmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    });
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((TreeDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)Tree_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Data));
                }
            }
            if ((item.BillboardDimensions != null)
                && (translationMask?.GetShouldTranslate((int)Tree_FieldIndex.BillboardDimensions) ?? true))
            {
                if (item.BillboardDimensions.TryGet(out var BillboardDimensionsItem))
                {
                    ((DimensionsXmlWriteTranslation)((IXmlItem)BillboardDimensionsItem).XmlWriteTranslator).Write(
                        item: BillboardDimensionsItem,
                        node: node,
                        name: nameof(item.BillboardDimensions),
                        fieldIndex: (int)Tree_FieldIndex.BillboardDimensions,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.BillboardDimensions));
                }
            }
        }

        public void Write(
            XElement node,
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Tree");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Tree");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (ITreeGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class TreeXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static TreeXmlCreateTranslation Instance = new TreeXmlCreateTranslation();

        public static void FillPublicXml(
            ITreeInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TreeXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            ITreeInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Model":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                    try
                    {
                        item.Model = LoquiXmlTranslation<Model>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpeedTreeSeeds":
                    errorMask?.PushIndex((int)Tree_FieldIndex.SpeedTreeSeeds);
                    try
                    {
                        if (ListXmlTranslation<UInt32>.Instance.Parse(
                            node: node,
                            enumer: out var SpeedTreeSeedsItem,
                            transl: UInt32XmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SpeedTreeSeeds = SpeedTreeSeedsItem.ToExtendedList();
                        }
                        else
                        {
                            item.SpeedTreeSeeds = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Tree_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<TreeData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BillboardDimensions":
                    errorMask?.PushIndex((int)Tree_FieldIndex.BillboardDimensions);
                    try
                    {
                        item.BillboardDimensions = LoquiXmlTranslation<Dimensions>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Tree_FieldIndex.BillboardDimensions));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class TreeXmlTranslationMixIn
    {
        public static void WriteToXml(
            this ITreeGetter item,
            XElement node,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this ITreeGetter item,
            string path,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this ITreeGetter item,
            Stream stream,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static TreeBinaryWriteTranslation Instance = new TreeBinaryWriteTranslation();

        public static void WriteRecordTypes(
            ITreeGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            if (item.Model.TryGet(out var ModelItem))
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Tree_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<UInt32>.Instance.Write(
                writer: writer,
                items: item.SpeedTreeSeeds,
                recordType: Tree_Registration.SNAM_HEADER,
                transl: UInt32BinaryTranslation.Instance.Write);
            if (item.Data.TryGet(out var DataItem))
            {
                ((TreeDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            if (item.BillboardDimensions.TryGet(out var BillboardDimensionsItem))
            {
                ((DimensionsBinaryWriteTranslation)((IBinaryItem)BillboardDimensionsItem).BinaryWriteTranslator).Write(
                    item: BillboardDimensionsItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITreeGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Tree_Registration.TREE_HEADER),
                type: ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class TreeBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static TreeBinaryCreateTranslation Instance = new TreeBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class TreeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class TreeBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ITreeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static Tree_Registration Registration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((ITreeGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => TreeXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((TreeXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Model
        public IModelGetter? Model { get; private set; }
        public bool Model_IsSet => Model != null;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        public IReadOnlyList<UInt32>? SpeedTreeSeeds { get; private set; }
        #region Data
        private RangeInt32? _DataLocation;
        private bool _Data_IsSet => _DataLocation.HasValue;
        public ITreeDataGetter? Data => _Data_IsSet ? TreeDataBinaryOverlay.TreeDataFactory(new BinaryMemoryReadStream(_data.Slice(_DataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool Data_IsSet => _DataLocation.HasValue;
        #endregion
        #region BillboardDimensions
        private RangeInt32? _BillboardDimensionsLocation;
        private bool _BillboardDimensions_IsSet => _BillboardDimensionsLocation.HasValue;
        public IDimensionsGetter? BillboardDimensions => _BillboardDimensions_IsSet ? DimensionsBinaryOverlay.DimensionsFactory(new BinaryMemoryReadStream(_data.Slice(_BillboardDimensionsLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool BillboardDimensions_IsSet => _BillboardDimensionsLocation.HasValue;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected TreeBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static TreeBinaryOverlay TreeFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new TreeBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static TreeBinaryOverlay TreeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return TreeFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C444F4D: // MODL
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        recordTypeConverter: recordTypeConverter);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Model);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Icon);
                }
                case 0x4D414E53: // SNAM
                {
                    var subMeta = _package.Meta.ReadSubrecord(stream);
                    var subLen = subMeta.ContentLength;
                    this.SpeedTreeSeeds = BinaryOverlaySetList<UInt32>.FactoryByStartIndex(
                        mem: stream.RemainingMemory.Slice(0, subLen),
                        package: _package,
                        itemLength: 4,
                        getter: (s, p) => BinaryPrimitives.ReadUInt32LittleEndian(s));
                    stream.Position += subLen;
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.SpeedTreeSeeds);
                }
                case 0x4D414E43: // CNAM
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.Data);
                }
                case 0x4D414E42: // BNAM
                {
                    _BillboardDimensionsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Tree_FieldIndex.BillboardDimensions);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            TreeMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

