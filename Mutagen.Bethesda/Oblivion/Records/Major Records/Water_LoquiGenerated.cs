/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Water :
        OblivionMajorRecord,
        IWaterInternal,
        ILoquiObjectSetter<Water>,
        IEquatable<Water>,
        IEqualsMask
    {
        #region Ctor
        protected Water()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Texture;
        public String? Texture
        {
            get => this._Texture;
            set => this._Texture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.Texture => this.Texture;
        #endregion
        #region Opacity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte? _Opacity;
        public Byte? Opacity
        {
            get => this._Opacity;
            set => this._Opacity = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IWaterGetter.Opacity => this.Opacity;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Water.Flag? _Flags;
        public Water.Flag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Water.Flag? IWaterGetter.Flags => this.Flags;
        #endregion
        #region MaterialID
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _MaterialID;
        public String? MaterialID
        {
            get => this._MaterialID;
            set => this._MaterialID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.MaterialID => this.MaterialID;
        #endregion
        #region Sound
        public FormLinkNullable<Sound> Sound { get; set; } = new FormLinkNullable<Sound>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IWaterGetter.Sound => this.Sound;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WaterData? _Data;
        public WaterData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWaterDataGetter? IWaterGetter.Data => this.Data;
        #endregion
        #region RelatedWaters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RelatedWaters? _RelatedWaters;
        public RelatedWaters? RelatedWaters
        {
            get => _RelatedWaters;
            set => _RelatedWaters = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRelatedWatersGetter? IWaterGetter.RelatedWaters => this.RelatedWaters;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WaterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWaterGetter rhs)) return false;
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Water obj)
        {
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WaterCommon)((IWaterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WaterXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WaterXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Water CreateFromXml(
            XElement node,
            Water.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Water CreateFromXml(
            XElement node,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Water CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Water();
            ((WaterSetterCommon)((IWaterGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Water CreateFromXml(
            string path,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            string path,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Water CreateFromXml(
            Stream stream,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            Stream stream,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Water CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Texture = initialValue;
                this.Opacity = initialValue;
                this.Flags = initialValue;
                this.MaterialID = initialValue;
                this.Sound = initialValue;
                this.Data = new MaskItem<TItem, WaterData.Mask<TItem>?>(initialValue, new WaterData.Mask<TItem>(initialValue));
                this.RelatedWaters = new MaskItem<TItem, RelatedWaters.Mask<TItem>?>(initialValue, new RelatedWaters.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Texture,
                TItem Opacity,
                TItem Flags,
                TItem MaterialID,
                TItem Sound,
                TItem Data,
                TItem RelatedWaters)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Texture = Texture;
                this.Opacity = Opacity;
                this.Flags = Flags;
                this.MaterialID = MaterialID;
                this.Sound = Sound;
                this.Data = new MaskItem<TItem, WaterData.Mask<TItem>?>(Data, new WaterData.Mask<TItem>(Data));
                this.RelatedWaters = new MaskItem<TItem, RelatedWaters.Mask<TItem>?>(RelatedWaters, new RelatedWaters.Mask<TItem>(RelatedWaters));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Texture;
            public TItem Opacity;
            public TItem Flags;
            public TItem MaterialID;
            public TItem Sound;
            public MaskItem<TItem, WaterData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, RelatedWaters.Mask<TItem>?>? RelatedWaters { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
                if (!object.Equals(this.Opacity, rhs.Opacity)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaterialID, rhs.MaterialID)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.RelatedWaters, rhs.RelatedWaters)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Texture);
                hash.Add(this.Opacity);
                hash.Add(this.Flags);
                hash.Add(this.MaterialID);
                hash.Add(this.Sound);
                hash.Add(this.Data);
                hash.Add(this.RelatedWaters);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Texture)) return false;
                if (!eval(this.Opacity)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MaterialID)) return false;
                if (!eval(this.Sound)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (RelatedWaters != null)
                {
                    if (!eval(this.RelatedWaters.Overall)) return false;
                    if (this.RelatedWaters.Specific != null && !this.RelatedWaters.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Texture)) return true;
                if (eval(this.Opacity)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MaterialID)) return true;
                if (eval(this.Sound)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (RelatedWaters != null)
                {
                    if (eval(this.RelatedWaters.Overall)) return true;
                    if (this.RelatedWaters.Specific != null && this.RelatedWaters.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Water.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Texture = eval(this.Texture);
                obj.Opacity = eval(this.Opacity);
                obj.Flags = eval(this.Flags);
                obj.MaterialID = eval(this.MaterialID);
                obj.Sound = eval(this.Sound);
                obj.Data = this.Data == null ? null : new MaskItem<R, WaterData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.RelatedWaters = this.RelatedWaters == null ? null : new MaskItem<R, RelatedWaters.Mask<R>?>(eval(this.RelatedWaters.Overall), this.RelatedWaters.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Water.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Water.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Water.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Texture ?? true)
                    {
                        fg.AppendItem(Texture, "Texture");
                    }
                    if (printMask?.Opacity ?? true)
                    {
                        fg.AppendItem(Opacity, "Opacity");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MaterialID ?? true)
                    {
                        fg.AppendItem(MaterialID, "MaterialID");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        fg.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.ToString(fg);
                    }
                    if (printMask?.RelatedWaters?.Overall ?? true)
                    {
                        RelatedWaters?.ToString(fg);
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Texture;
            public Exception? Opacity;
            public Exception? Flags;
            public Exception? MaterialID;
            public Exception? Sound;
            public MaskItem<Exception?, WaterData.ErrorMask?>? Data;
            public MaskItem<Exception?, RelatedWaters.ErrorMask?>? RelatedWaters;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Texture:
                        return Texture;
                    case Water_FieldIndex.Opacity:
                        return Opacity;
                    case Water_FieldIndex.Flags:
                        return Flags;
                    case Water_FieldIndex.MaterialID:
                        return MaterialID;
                    case Water_FieldIndex.Sound:
                        return Sound;
                    case Water_FieldIndex.Data:
                        return Data;
                    case Water_FieldIndex.RelatedWaters:
                        return RelatedWaters;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Texture:
                        this.Texture = ex;
                        break;
                    case Water_FieldIndex.Opacity:
                        this.Opacity = ex;
                        break;
                    case Water_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Water_FieldIndex.MaterialID:
                        this.MaterialID = ex;
                        break;
                    case Water_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Water_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, WaterData.ErrorMask?>(ex, null);
                        break;
                    case Water_FieldIndex.RelatedWaters:
                        this.RelatedWaters = new MaskItem<Exception?, RelatedWaters.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Texture:
                        this.Texture = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Opacity:
                        this.Opacity = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Water_FieldIndex.MaterialID:
                        this.MaterialID = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, WaterData.ErrorMask?>?)obj;
                        break;
                    case Water_FieldIndex.RelatedWaters:
                        this.RelatedWaters = (MaskItem<Exception?, RelatedWaters.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Texture != null) return true;
                if (Opacity != null) return true;
                if (Flags != null) return true;
                if (MaterialID != null) return true;
                if (Sound != null) return true;
                if (Data != null) return true;
                if (RelatedWaters != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Texture, "Texture");
                fg.AppendItem(Opacity, "Opacity");
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(MaterialID, "MaterialID");
                fg.AppendItem(Sound, "Sound");
                Data?.ToString(fg);
                RelatedWaters?.ToString(fg);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Texture = this.Texture.Combine(rhs.Texture);
                ret.Opacity = this.Opacity.Combine(rhs.Opacity);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaterialID = this.MaterialID.Combine(rhs.MaterialID);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.RelatedWaters = this.RelatedWaters.Combine(rhs.RelatedWaters, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Texture;
            public bool Opacity;
            public bool Flags;
            public bool MaterialID;
            public bool Sound;
            public MaskItem<bool, WaterData.TranslationMask?> Data;
            public MaskItem<bool, RelatedWaters.TranslationMask?> RelatedWaters;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Texture = defaultOn;
                this.Opacity = defaultOn;
                this.Flags = defaultOn;
                this.MaterialID = defaultOn;
                this.Sound = defaultOn;
                this.Data = new MaskItem<bool, WaterData.TranslationMask?>(defaultOn, null);
                this.RelatedWaters = new MaskItem<bool, RelatedWaters.TranslationMask?>(defaultOn, null);
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Texture, null));
                ret.Add((Opacity, null));
                ret.Add((Flags, null));
                ret.Add((MaterialID, null));
                ret.Add((Sound, null));
                ret.Add((Data?.Overall ?? true, Data?.Specific?.GetCrystal()));
                ret.Add((RelatedWaters?.Overall ?? true, RelatedWaters?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Water_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => WaterCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WaterCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WaterCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WaterCommon.Instance.RemapLinks(this, mapping);
        public Water(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Water(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Water(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new Water CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public new static Water CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Water();
            ((WaterSetterCommon)((IWaterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWaterGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WaterSetterCommon)((IWaterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Water GetNew()
        {
            return new Water();
        }

    }
    #endregion

    #region Interface
    public partial interface IWater :
        IWaterGetter,
        IOblivionMajorRecord,
        ILoquiObjectSetter<IWaterInternal>
    {
        new String? Texture { get; set; }
        new Byte? Opacity { get; set; }
        new Water.Flag? Flags { get; set; }
        new String? MaterialID { get; set; }
        new FormLinkNullable<Sound> Sound { get; set; }
        new WaterData? Data { get; set; }
        new RelatedWaters? RelatedWaters { get; set; }
    }

    public partial interface IWaterInternal :
        IOblivionMajorRecordInternal,
        IWater,
        IWaterGetter
    {
    }

    public partial interface IWaterGetter :
        IOblivionMajorRecordGetter,
        ILoquiObject<IWaterGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        static ILoquiRegistration Registration => Water_Registration.Instance;
        String? Texture { get; }
        Byte? Opacity { get; }
        Water.Flag? Flags { get; }
        String? MaterialID { get; }
        IFormLinkNullableGetter<ISoundGetter> Sound { get; }
        IWaterDataGetter? Data { get; }
        IRelatedWatersGetter? RelatedWaters { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WaterMixIn
    {
        public static void Clear(this IWaterInternal item)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Water.Mask<bool> GetEqualsMask(
            this IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWaterGetter item,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWaterGetter item,
            FileGeneration fg,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWaterGetter item,
            Water.Mask<bool?> checkMask)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Water.Mask<bool> GetHasBeenSetMask(this IWaterGetter item)
        {
            var ret = new Water.Mask<bool>(false);
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWaterGetter item,
            IWaterGetter rhs)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWaterInternal lhs,
            IWaterGetter rhs,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WaterSetterTranslationCommon)((IWaterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWaterInternal lhs,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WaterSetterTranslationCommon)((IWaterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWaterInternal item,
            XElement node,
            Water.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWaterInternal item,
            XElement node,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            string path,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            string path,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            Stream stream,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            Stream stream,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWaterInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Water.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWaterInternal item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWaterInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Water_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Texture = 5,
        Opacity = 6,
        Flags = 7,
        MaterialID = 8,
        Sound = 9,
        Data = 10,
        RelatedWaters = 11,
    }
    #endregion

    #region Registration
    public partial class Water_Registration : ILoquiRegistration
    {
        public static readonly Water_Registration Instance = new Water_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 127,
            version: 0);

        public const string GUID = "31d50641-f6df-4533-89c3-e764dc35a702";

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(Water.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Water.ErrorMask);

        public static readonly Type ClassType = typeof(Water);

        public static readonly Type GetterType = typeof(IWaterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWater);

        public static readonly Type? InternalSetterType = typeof(IWaterInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Water";

        public const string Name = "Water";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TEXTURE":
                    return (ushort)Water_FieldIndex.Texture;
                case "OPACITY":
                    return (ushort)Water_FieldIndex.Opacity;
                case "FLAGS":
                    return (ushort)Water_FieldIndex.Flags;
                case "MATERIALID":
                    return (ushort)Water_FieldIndex.MaterialID;
                case "SOUND":
                    return (ushort)Water_FieldIndex.Sound;
                case "DATA":
                    return (ushort)Water_FieldIndex.Data;
                case "RELATEDWATERS":
                    return (ushort)Water_FieldIndex.RelatedWaters;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.Data:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Data:
                case Water_FieldIndex.RelatedWaters:
                    return true;
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.Data:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return "Texture";
                case Water_FieldIndex.Opacity:
                    return "Opacity";
                case Water_FieldIndex.Flags:
                    return "Flags";
                case Water_FieldIndex.MaterialID:
                    return "MaterialID";
                case Water_FieldIndex.Sound:
                    return "Sound";
                case Water_FieldIndex.Data:
                    return "Data";
                case Water_FieldIndex.RelatedWaters:
                    return "RelatedWaters";
                default:
                    return OblivionMajorRecord_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.Data:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                case Water_FieldIndex.Opacity:
                case Water_FieldIndex.Flags:
                case Water_FieldIndex.MaterialID:
                case Water_FieldIndex.Sound:
                case Water_FieldIndex.Data:
                case Water_FieldIndex.RelatedWaters:
                    return false;
                default:
                    return OblivionMajorRecord_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Water_FieldIndex enu = (Water_FieldIndex)index;
            switch (enu)
            {
                case Water_FieldIndex.Texture:
                    return typeof(String);
                case Water_FieldIndex.Opacity:
                    return typeof(Byte);
                case Water_FieldIndex.Flags:
                    return typeof(Water.Flag);
                case Water_FieldIndex.MaterialID:
                    return typeof(String);
                case Water_FieldIndex.Sound:
                    return typeof(FormLinkNullable<Sound>);
                case Water_FieldIndex.Data:
                    return typeof(WaterData);
                case Water_FieldIndex.RelatedWaters:
                    return typeof(RelatedWaters);
                default:
                    return OblivionMajorRecord_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WaterXmlWriteTranslation);
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType TNAM_HEADER = new RecordType("TNAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType FNAM_HEADER = new RecordType("FNAM");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType GNAM_HEADER = new RecordType("GNAM");
        public static readonly RecordType TriggeringRecordType = WATR_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(WaterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WaterSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly WaterSetterCommon Instance = new WaterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWaterInternal item)
        {
            ClearPartial();
            item.Texture = default;
            item.Opacity = default;
            item.Flags = default;
            item.MaterialID = default;
            item.Sound = null;
            item.Data = null;
            item.RelatedWaters = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IWaterInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    OblivionMajorRecordSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public virtual void CopyInFromXml(
            IWaterInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WaterXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        public override void CopyInFromXml(
            IOblivionMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Water)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        public override void CopyInFromXml(
            IMajorRecordInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            CopyInFromXml(
                item: (Water)item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Water_Registration.WATR_HEADER;
        protected static void FillBinaryStructs(
            IWaterInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IWaterInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4D414E54: // TNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Texture = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Texture);
                }
                case 0x4D414E41: // ANAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Opacity = frame.ReadUInt8();
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Opacity);
                }
                case 0x4D414E46: // FNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Water.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Flags);
                }
                case 0x4D414E4D: // MNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.MaterialID = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.MaterialID);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Sound = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Sound);
                }
                case 0x41544144: // DATA
                {
                    WaterBinaryCreateTranslation.FillBinaryDataCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Data);
                }
                case 0x4D414E47: // GNAM
                {
                    item.RelatedWaters = Mutagen.Bethesda.Oblivion.RelatedWaters.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.RelatedWaters);
                }
                default:
                    return OblivionMajorRecordSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public virtual void CopyInFromBinary(
            IWaterInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.MajorRecordParse<IWaterInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Water)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            CopyInFromBinary(
                item: (Water)item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }
        
        #endregion
        
    }
    public partial class WaterCommon : OblivionMajorRecordCommon
    {
        public new static readonly WaterCommon Instance = new WaterCommon();

        public Water.Mask<bool> GetEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Water.Mask<bool>(false);
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            Water.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Texture = string.Equals(item.Texture, rhs.Texture);
            ret.Opacity = item.Opacity == rhs.Opacity;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaterialID = string.Equals(item.MaterialID, rhs.MaterialID);
            ret.Sound = object.Equals(item.Sound, rhs.Sound);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RelatedWaters = EqualsMaskHelper.EqualsHelper(
                item.RelatedWaters,
                rhs.RelatedWaters,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWaterGetter item,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWaterGetter item,
            FileGeneration fg,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Water =>");
            }
            else
            {
                fg.AppendLine($"{name} (Water) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWaterGetter item,
            FileGeneration fg,
            Water.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Texture ?? true)
                && item.Texture.TryGet(out var TextureItem))
            {
                fg.AppendItem(TextureItem, "Texture");
            }
            if ((printMask?.Opacity ?? true)
                && item.Opacity.TryGet(out var OpacityItem))
            {
                fg.AppendItem(OpacityItem, "Opacity");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.MaterialID ?? true)
                && item.MaterialID.TryGet(out var MaterialIDItem))
            {
                fg.AppendItem(MaterialIDItem, "MaterialID");
            }
            if ((printMask?.Sound ?? true)
                && item.Sound.TryGet(out var SoundItem))
            {
                fg.AppendItem(SoundItem, "Sound");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data.TryGet(out var DataItem))
            {
                DataItem?.ToString(fg, "Data");
            }
            if ((printMask?.RelatedWaters?.Overall ?? true)
                && item.RelatedWaters.TryGet(out var RelatedWatersItem))
            {
                RelatedWatersItem?.ToString(fg, "RelatedWaters");
            }
        }
        
        public bool HasBeenSet(
            IWaterGetter item,
            Water.Mask<bool?> checkMask)
        {
            if (checkMask.Texture.HasValue && checkMask.Texture.Value != (item.Texture != null)) return false;
            if (checkMask.Opacity.HasValue && checkMask.Opacity.Value != (item.Opacity != null)) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.MaterialID.HasValue && checkMask.MaterialID.Value != (item.MaterialID != null)) return false;
            if (checkMask.Sound.HasValue && checkMask.Sound.Value != (item.Sound.FormKey != null)) return false;
            if (checkMask.Data?.Overall.HasValue ?? false && checkMask.Data.Overall.Value != (item.Data != null)) return false;
            if (checkMask.Data?.Specific != null && (item.Data == null || !item.Data.HasBeenSet(checkMask.Data.Specific))) return false;
            if (checkMask.RelatedWaters?.Overall.HasValue ?? false && checkMask.RelatedWaters.Overall.Value != (item.RelatedWaters != null)) return false;
            if (checkMask.RelatedWaters?.Specific != null && (item.RelatedWaters == null || !item.RelatedWaters.HasBeenSet(checkMask.RelatedWaters.Specific))) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWaterGetter item,
            Water.Mask<bool> mask)
        {
            mask.Texture = (item.Texture != null);
            mask.Opacity = (item.Opacity != null);
            mask.Flags = (item.Flags != null);
            mask.MaterialID = (item.MaterialID != null);
            mask.Sound = (item.Sound.FormKey != null);
            var itemData = item.Data;
            mask.Data = new MaskItem<bool, WaterData.Mask<bool>?>(itemData != null, itemData?.GetHasBeenSetMask());
            var itemRelatedWaters = item.RelatedWaters;
            mask.RelatedWaters = new MaskItem<bool, RelatedWaters.Mask<bool>?>(itemRelatedWaters != null, itemRelatedWaters?.GetHasBeenSetMask());
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Water_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Water_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWaterGetter? lhs,
            IWaterGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Texture, rhs.Texture)) return false;
            if (lhs.Opacity != rhs.Opacity) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!string.Equals(lhs.MaterialID, rhs.MaterialID)) return false;
            if (!lhs.Sound.Equals(rhs.Sound)) return false;
            if (!object.Equals(lhs.Data, rhs.Data)) return false;
            if (!object.Equals(lhs.RelatedWaters, rhs.RelatedWaters)) return false;
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWaterGetter?)lhs,
                rhs: rhs as IWaterGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWaterGetter?)lhs,
                rhs: rhs as IWaterGetter);
        }
        
        public virtual int GetHashCode(IWaterGetter item)
        {
            var hash = new HashCode();
            if (item.Texture.TryGet(out var Textureitem))
            {
                hash.Add(Textureitem);
            }
            if (item.Opacity.TryGet(out var Opacityitem))
            {
                hash.Add(Opacityitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.MaterialID.TryGet(out var MaterialIDitem))
            {
                hash.Add(MaterialIDitem);
            }
            if (item.Sound.TryGet(out var Sounditem))
            {
                hash.Add(Sounditem);
            }
            if (item.Data.TryGet(out var Dataitem))
            {
                hash.Add(Dataitem);
            }
            if (item.RelatedWaters.TryGet(out var RelatedWatersitem))
            {
                hash.Add(RelatedWatersitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Water.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWaterGetter obj)
        {
            foreach (var item in base.GetLinkFormKeys(obj))
            {
                yield return item;
            }
            if (obj.Sound.FormKey.TryGet(out var SoundKey))
            {
                yield return SoundKey;
            }
            if (obj.RelatedWaters.TryGet(out var RelatedWatersItems))
            {
                foreach (var item in RelatedWatersItems.LinkFormKeys)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapLinks(IWaterGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        partial void PostDuplicate(Water obj, Water rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Water(getNextFormKey());
            ret.DeepCopyIn((Water)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Water)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        #endregion
        
    }
    public partial class WaterSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly WaterSetterTranslationCommon Instance = new WaterSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWaterInternal item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IWater item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Texture) ?? true))
            {
                item.Texture = rhs.Texture;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                item.Opacity = rhs.Opacity;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.MaterialID) ?? true))
            {
                item.MaterialID = rhs.MaterialID;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Sound) ?? true))
            {
                item.Sound = rhs.Sound.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Data);
                try
                {
                    if(rhs.Data.TryGet(out var rhsData))
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Water_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.RelatedWaters) ?? true))
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                try
                {
                    if(rhs.RelatedWaters.TryGet(out var rhsRelatedWaters))
                    {
                        item.RelatedWaters = rhsRelatedWaters.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters));
                    }
                    else
                    {
                        item.RelatedWaters = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWaterInternal)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWater)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWaterInternal)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWater)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Water DeepCopy(
            IWaterGetter item,
            Water.TranslationMask? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Water DeepCopy(
            IWaterGetter item,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Water DeepCopy(
            IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Water
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static Water_Registration Registration => Water_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WaterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WaterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WaterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterXmlWriteTranslation :
        OblivionMajorRecordXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WaterXmlWriteTranslation Instance = new WaterXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWaterGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            OblivionMajorRecordXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Texture != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Texture) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Texture),
                    item: item.Texture,
                    fieldIndex: (int)Water_FieldIndex.Texture,
                    errorMask: errorMask);
            }
            if ((item.Opacity != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Opacity),
                    item: item.Opacity.Value,
                    fieldIndex: (int)Water_FieldIndex.Opacity,
                    errorMask: errorMask);
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Water.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Water_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.MaterialID != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.MaterialID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.MaterialID),
                    item: item.MaterialID,
                    fieldIndex: (int)Water_FieldIndex.MaterialID,
                    errorMask: errorMask);
            }
            if ((item.Sound.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Sound) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Sound),
                    item: item.Sound.FormKey.Value,
                    fieldIndex: (int)Water_FieldIndex.Sound,
                    errorMask: errorMask);
            }
            if ((item.Data != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.Data) ?? true))
            {
                if (item.Data.TryGet(out var DataItem))
                {
                    ((WaterDataXmlWriteTranslation)((IXmlItem)DataItem).XmlWriteTranslator).Write(
                        item: DataItem,
                        node: node,
                        name: nameof(item.Data),
                        fieldIndex: (int)Water_FieldIndex.Data,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.Data));
                }
            }
            if ((item.RelatedWaters != null)
                && (translationMask?.GetShouldTranslate((int)Water_FieldIndex.RelatedWaters) ?? true))
            {
                if (item.RelatedWaters.TryGet(out var RelatedWatersItem))
                {
                    ((RelatedWatersXmlWriteTranslation)((IXmlItem)RelatedWatersItem).XmlWriteTranslator).Write(
                        item: RelatedWatersItem,
                        node: node,
                        name: nameof(item.RelatedWaters),
                        fieldIndex: (int)Water_FieldIndex.RelatedWaters,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters));
                }
            }
        }

        public void Write(
            XElement node,
            IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Water");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Water");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWaterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWaterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWaterGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WaterXmlCreateTranslation : OblivionMajorRecordXmlCreateTranslation
    {
        public new readonly static WaterXmlCreateTranslation Instance = new WaterXmlCreateTranslation();

        public static void FillPublicXml(
            IWaterInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WaterXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWaterInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Texture":
                    errorMask?.PushIndex((int)Water_FieldIndex.Texture);
                    try
                    {
                        item.Texture = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Opacity":
                    errorMask?.PushIndex((int)Water_FieldIndex.Opacity);
                    try
                    {
                        item.Opacity = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Water_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Water.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MaterialID":
                    errorMask?.PushIndex((int)Water_FieldIndex.MaterialID);
                    try
                    {
                        item.MaterialID = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Sound":
                    errorMask?.PushIndex((int)Water_FieldIndex.Sound);
                    try
                    {
                        item.Sound = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Data":
                    errorMask?.PushIndex((int)Water_FieldIndex.Data);
                    try
                    {
                        item.Data = LoquiXmlTranslation<WaterData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.Data));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "RelatedWaters":
                    errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                    try
                    {
                        item.RelatedWaters = LoquiXmlTranslation<RelatedWaters>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    OblivionMajorRecordXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WaterXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWaterGetter item,
            XElement node,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WaterXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWaterGetter item,
            string path,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWaterGetter item,
            Stream stream,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WaterBinaryWriteTranslation Instance = new WaterBinaryWriteTranslation();

        static partial void WriteBinaryDataCustom(
            MutagenWriter writer,
            IWaterGetter item);

        public static void WriteBinaryData(
            MutagenWriter writer,
            IWaterGetter item)
        {
            WriteBinaryDataCustom(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IWaterGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Texture,
                header: recordTypeConverter.ConvertToCustom(Water_Registration.TNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ByteBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Opacity,
                header: recordTypeConverter.ConvertToCustom(Water_Registration.ANAM_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Water.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(Water_Registration.FNAM_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaterialID,
                header: recordTypeConverter.ConvertToCustom(Water_Registration.MNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound,
                header: recordTypeConverter.ConvertToCustom(Water_Registration.SNAM_HEADER));
            WaterBinaryWriteTranslation.WriteBinaryData(
                writer: writer,
                item: item);
            if (item.RelatedWaters.TryGet(out var RelatedWatersItem))
            {
                ((RelatedWatersBinaryWriteTranslation)((IBinaryItem)RelatedWatersItem).BinaryWriteTranslator).Write(
                    item: RelatedWatersItem,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            IWaterGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(Water_Registration.WATR_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WaterBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new readonly static WaterBinaryCreateTranslation Instance = new WaterBinaryCreateTranslation();

        static partial void FillBinaryDataCustom(
            MutagenFrame frame,
            IWaterInternal item);

        public static void FillBinaryDataCustomPublic(
            MutagenFrame frame,
            IWaterInternal item)
        {
            FillBinaryDataCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WaterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WaterBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IWaterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static Water_Registration Registration => Water_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WaterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WaterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWaterGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override IEnumerable<FormKey> LinkFormKeys => WaterCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WaterCommon.Instance.GetLinkFormKeys(this);
        protected override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WaterCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WaterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WaterXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WaterXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        #region Texture
        private int? _TextureLocation;
        public String? Texture => _TextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _TextureLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Opacity
        private int? _OpacityLocation;
        public Byte? Opacity => _OpacityLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _OpacityLocation.Value, _package.Meta)[0] : default(Byte?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Water.Flag? Flags => _FlagsLocation.HasValue ? (Water.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(Water.Flag?);
        #endregion
        #region MaterialID
        private int? _MaterialIDLocation;
        public String? MaterialID => _MaterialIDLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _MaterialIDLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Sound
        private int? _SoundLocation;
        public bool Sound_IsSet => _SoundLocation.HasValue;
        public IFormLinkNullableGetter<ISoundGetter> Sound => _SoundLocation.HasValue ? new FormLinkNullable<ISoundGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _SoundLocation.Value, _package.Meta)))) : FormLinkNullable<ISoundGetter>.Null;
        #endregion
        #region Data
        partial void DataCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public IWaterDataGetter? Data => GetDataCustom();
        #endregion
        #region RelatedWaters
        private RangeInt32? _RelatedWatersLocation;
        public IRelatedWatersGetter? RelatedWaters => _RelatedWatersLocation.HasValue ? RelatedWatersBinaryOverlay.RelatedWatersFactory(new BinaryMemoryReadStream(_data.Slice(_RelatedWatersLocation!.Value.Min)), _package) : default;
        public bool RelatedWaters_IsSet => _RelatedWatersLocation.HasValue;
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected WaterBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WaterBinaryOverlay WaterFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new WaterBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static WaterBinaryOverlay WaterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WaterFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4D414E54: // TNAM
                {
                    _TextureLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Texture);
                }
                case 0x4D414E41: // ANAM
                {
                    _OpacityLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Opacity);
                }
                case 0x4D414E46: // FNAM
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Flags);
                }
                case 0x4D414E4D: // MNAM
                {
                    _MaterialIDLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.MaterialID);
                }
                case 0x4D414E53: // SNAM
                {
                    _SoundLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Sound);
                }
                case 0x41544144: // DATA
                {
                    DataCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.Data);
                }
                case 0x4D414E47: // GNAM
                {
                    _RelatedWatersLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Water_FieldIndex.RelatedWaters);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WaterMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

