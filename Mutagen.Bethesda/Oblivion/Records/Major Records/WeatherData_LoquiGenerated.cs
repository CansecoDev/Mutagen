/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Drawing;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WeatherData :
        IWeatherData,
        ILoquiObjectSetter<WeatherData>,
        IEquatable<WeatherData>,
        IEqualsMask
    {
        #region Ctor
        public WeatherData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region WindSpeed
        public Byte WindSpeed { get; set; } = default;
        #endregion
        #region CloudSpeedLower
        public Byte CloudSpeedLower { get; set; } = default;
        #endregion
        #region CloudSpeedUpper
        public Byte CloudSpeedUpper { get; set; } = default;
        #endregion
        #region TransDelta
        public Byte TransDelta { get; set; } = default;
        #endregion
        #region SunGlare
        public Byte SunGlare { get; set; } = default;
        #endregion
        #region SunDamage
        public Byte SunDamage { get; set; } = default;
        #endregion
        #region PrecipitationBeginFadeIn
        public Byte PrecipitationBeginFadeIn { get; set; } = default;
        #endregion
        #region PrecipitationEndFadeOut
        public Byte PrecipitationEndFadeOut { get; set; } = default;
        #endregion
        #region ThunderLightningBeginFadeIn
        public Byte ThunderLightningBeginFadeIn { get; set; } = default;
        #endregion
        #region ThunderLightningEndFadeOut
        public Byte ThunderLightningEndFadeOut { get; set; } = default;
        #endregion
        #region ThunderLightningFrequency
        public Byte ThunderLightningFrequency { get; set; } = default;
        #endregion
        #region Classification
        public Weather.WeatherClassification Classification { get; set; } = default;
        #endregion
        #region LightningColor
        public Color LightningColor { get; set; } = default;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWeatherDataGetter rhs)) return false;
            return ((WeatherDataCommon)((IWeatherDataGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(WeatherData obj)
        {
            return ((WeatherDataCommon)((IWeatherDataGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WeatherDataCommon)((IWeatherDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WeatherDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static WeatherData CreateFromXml(
            XElement node,
            WeatherData.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WeatherData CreateFromXml(
            XElement node,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WeatherData CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new WeatherData();
            ((WeatherDataSetterCommon)((IWeatherDataGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static WeatherData CreateFromXml(
            string path,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WeatherData CreateFromXml(
            string path,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherData CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WeatherData CreateFromXml(
            Stream stream,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WeatherData CreateFromXml(
            Stream stream,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WeatherData CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.WindSpeed = initialValue;
                this.CloudSpeedLower = initialValue;
                this.CloudSpeedUpper = initialValue;
                this.TransDelta = initialValue;
                this.SunGlare = initialValue;
                this.SunDamage = initialValue;
                this.PrecipitationBeginFadeIn = initialValue;
                this.PrecipitationEndFadeOut = initialValue;
                this.ThunderLightningBeginFadeIn = initialValue;
                this.ThunderLightningEndFadeOut = initialValue;
                this.ThunderLightningFrequency = initialValue;
                this.Classification = initialValue;
                this.LightningColor = initialValue;
            }

            public Mask(
                TItem WindSpeed,
                TItem CloudSpeedLower,
                TItem CloudSpeedUpper,
                TItem TransDelta,
                TItem SunGlare,
                TItem SunDamage,
                TItem PrecipitationBeginFadeIn,
                TItem PrecipitationEndFadeOut,
                TItem ThunderLightningBeginFadeIn,
                TItem ThunderLightningEndFadeOut,
                TItem ThunderLightningFrequency,
                TItem Classification,
                TItem LightningColor)
            {
                this.WindSpeed = WindSpeed;
                this.CloudSpeedLower = CloudSpeedLower;
                this.CloudSpeedUpper = CloudSpeedUpper;
                this.TransDelta = TransDelta;
                this.SunGlare = SunGlare;
                this.SunDamage = SunDamage;
                this.PrecipitationBeginFadeIn = PrecipitationBeginFadeIn;
                this.PrecipitationEndFadeOut = PrecipitationEndFadeOut;
                this.ThunderLightningBeginFadeIn = ThunderLightningBeginFadeIn;
                this.ThunderLightningEndFadeOut = ThunderLightningEndFadeOut;
                this.ThunderLightningFrequency = ThunderLightningFrequency;
                this.Classification = Classification;
                this.LightningColor = LightningColor;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem WindSpeed;
            public TItem CloudSpeedLower;
            public TItem CloudSpeedUpper;
            public TItem TransDelta;
            public TItem SunGlare;
            public TItem SunDamage;
            public TItem PrecipitationBeginFadeIn;
            public TItem PrecipitationEndFadeOut;
            public TItem ThunderLightningBeginFadeIn;
            public TItem ThunderLightningEndFadeOut;
            public TItem ThunderLightningFrequency;
            public TItem Classification;
            public TItem LightningColor;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.WindSpeed, rhs.WindSpeed)) return false;
                if (!object.Equals(this.CloudSpeedLower, rhs.CloudSpeedLower)) return false;
                if (!object.Equals(this.CloudSpeedUpper, rhs.CloudSpeedUpper)) return false;
                if (!object.Equals(this.TransDelta, rhs.TransDelta)) return false;
                if (!object.Equals(this.SunGlare, rhs.SunGlare)) return false;
                if (!object.Equals(this.SunDamage, rhs.SunDamage)) return false;
                if (!object.Equals(this.PrecipitationBeginFadeIn, rhs.PrecipitationBeginFadeIn)) return false;
                if (!object.Equals(this.PrecipitationEndFadeOut, rhs.PrecipitationEndFadeOut)) return false;
                if (!object.Equals(this.ThunderLightningBeginFadeIn, rhs.ThunderLightningBeginFadeIn)) return false;
                if (!object.Equals(this.ThunderLightningEndFadeOut, rhs.ThunderLightningEndFadeOut)) return false;
                if (!object.Equals(this.ThunderLightningFrequency, rhs.ThunderLightningFrequency)) return false;
                if (!object.Equals(this.Classification, rhs.Classification)) return false;
                if (!object.Equals(this.LightningColor, rhs.LightningColor)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.WindSpeed);
                hash.Add(this.CloudSpeedLower);
                hash.Add(this.CloudSpeedUpper);
                hash.Add(this.TransDelta);
                hash.Add(this.SunGlare);
                hash.Add(this.SunDamage);
                hash.Add(this.PrecipitationBeginFadeIn);
                hash.Add(this.PrecipitationEndFadeOut);
                hash.Add(this.ThunderLightningBeginFadeIn);
                hash.Add(this.ThunderLightningEndFadeOut);
                hash.Add(this.ThunderLightningFrequency);
                hash.Add(this.Classification);
                hash.Add(this.LightningColor);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.WindSpeed)) return false;
                if (!eval(this.CloudSpeedLower)) return false;
                if (!eval(this.CloudSpeedUpper)) return false;
                if (!eval(this.TransDelta)) return false;
                if (!eval(this.SunGlare)) return false;
                if (!eval(this.SunDamage)) return false;
                if (!eval(this.PrecipitationBeginFadeIn)) return false;
                if (!eval(this.PrecipitationEndFadeOut)) return false;
                if (!eval(this.ThunderLightningBeginFadeIn)) return false;
                if (!eval(this.ThunderLightningEndFadeOut)) return false;
                if (!eval(this.ThunderLightningFrequency)) return false;
                if (!eval(this.Classification)) return false;
                if (!eval(this.LightningColor)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.WindSpeed)) return true;
                if (eval(this.CloudSpeedLower)) return true;
                if (eval(this.CloudSpeedUpper)) return true;
                if (eval(this.TransDelta)) return true;
                if (eval(this.SunGlare)) return true;
                if (eval(this.SunDamage)) return true;
                if (eval(this.PrecipitationBeginFadeIn)) return true;
                if (eval(this.PrecipitationEndFadeOut)) return true;
                if (eval(this.ThunderLightningBeginFadeIn)) return true;
                if (eval(this.ThunderLightningEndFadeOut)) return true;
                if (eval(this.ThunderLightningFrequency)) return true;
                if (eval(this.Classification)) return true;
                if (eval(this.LightningColor)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeatherData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.WindSpeed = eval(this.WindSpeed);
                obj.CloudSpeedLower = eval(this.CloudSpeedLower);
                obj.CloudSpeedUpper = eval(this.CloudSpeedUpper);
                obj.TransDelta = eval(this.TransDelta);
                obj.SunGlare = eval(this.SunGlare);
                obj.SunDamage = eval(this.SunDamage);
                obj.PrecipitationBeginFadeIn = eval(this.PrecipitationBeginFadeIn);
                obj.PrecipitationEndFadeOut = eval(this.PrecipitationEndFadeOut);
                obj.ThunderLightningBeginFadeIn = eval(this.ThunderLightningBeginFadeIn);
                obj.ThunderLightningEndFadeOut = eval(this.ThunderLightningEndFadeOut);
                obj.ThunderLightningFrequency = eval(this.ThunderLightningFrequency);
                obj.Classification = eval(this.Classification);
                obj.LightningColor = eval(this.LightningColor);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WeatherData.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WeatherData.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WeatherData.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.WindSpeed ?? true)
                    {
                        fg.AppendItem(WindSpeed, "WindSpeed");
                    }
                    if (printMask?.CloudSpeedLower ?? true)
                    {
                        fg.AppendItem(CloudSpeedLower, "CloudSpeedLower");
                    }
                    if (printMask?.CloudSpeedUpper ?? true)
                    {
                        fg.AppendItem(CloudSpeedUpper, "CloudSpeedUpper");
                    }
                    if (printMask?.TransDelta ?? true)
                    {
                        fg.AppendItem(TransDelta, "TransDelta");
                    }
                    if (printMask?.SunGlare ?? true)
                    {
                        fg.AppendItem(SunGlare, "SunGlare");
                    }
                    if (printMask?.SunDamage ?? true)
                    {
                        fg.AppendItem(SunDamage, "SunDamage");
                    }
                    if (printMask?.PrecipitationBeginFadeIn ?? true)
                    {
                        fg.AppendItem(PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
                    }
                    if (printMask?.PrecipitationEndFadeOut ?? true)
                    {
                        fg.AppendItem(PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
                    }
                    if (printMask?.ThunderLightningBeginFadeIn ?? true)
                    {
                        fg.AppendItem(ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
                    }
                    if (printMask?.ThunderLightningEndFadeOut ?? true)
                    {
                        fg.AppendItem(ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
                    }
                    if (printMask?.ThunderLightningFrequency ?? true)
                    {
                        fg.AppendItem(ThunderLightningFrequency, "ThunderLightningFrequency");
                    }
                    if (printMask?.Classification ?? true)
                    {
                        fg.AppendItem(Classification, "Classification");
                    }
                    if (printMask?.LightningColor ?? true)
                    {
                        fg.AppendItem(LightningColor, "LightningColor");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? WindSpeed;
            public Exception? CloudSpeedLower;
            public Exception? CloudSpeedUpper;
            public Exception? TransDelta;
            public Exception? SunGlare;
            public Exception? SunDamage;
            public Exception? PrecipitationBeginFadeIn;
            public Exception? PrecipitationEndFadeOut;
            public Exception? ThunderLightningBeginFadeIn;
            public Exception? ThunderLightningEndFadeOut;
            public Exception? ThunderLightningFrequency;
            public Exception? Classification;
            public Exception? LightningColor;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
                switch (enu)
                {
                    case WeatherData_FieldIndex.WindSpeed:
                        return WindSpeed;
                    case WeatherData_FieldIndex.CloudSpeedLower:
                        return CloudSpeedLower;
                    case WeatherData_FieldIndex.CloudSpeedUpper:
                        return CloudSpeedUpper;
                    case WeatherData_FieldIndex.TransDelta:
                        return TransDelta;
                    case WeatherData_FieldIndex.SunGlare:
                        return SunGlare;
                    case WeatherData_FieldIndex.SunDamage:
                        return SunDamage;
                    case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                        return PrecipitationBeginFadeIn;
                    case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                        return PrecipitationEndFadeOut;
                    case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                        return ThunderLightningBeginFadeIn;
                    case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                        return ThunderLightningEndFadeOut;
                    case WeatherData_FieldIndex.ThunderLightningFrequency:
                        return ThunderLightningFrequency;
                    case WeatherData_FieldIndex.Classification:
                        return Classification;
                    case WeatherData_FieldIndex.LightningColor:
                        return LightningColor;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
                switch (enu)
                {
                    case WeatherData_FieldIndex.WindSpeed:
                        this.WindSpeed = ex;
                        break;
                    case WeatherData_FieldIndex.CloudSpeedLower:
                        this.CloudSpeedLower = ex;
                        break;
                    case WeatherData_FieldIndex.CloudSpeedUpper:
                        this.CloudSpeedUpper = ex;
                        break;
                    case WeatherData_FieldIndex.TransDelta:
                        this.TransDelta = ex;
                        break;
                    case WeatherData_FieldIndex.SunGlare:
                        this.SunGlare = ex;
                        break;
                    case WeatherData_FieldIndex.SunDamage:
                        this.SunDamage = ex;
                        break;
                    case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                        this.PrecipitationBeginFadeIn = ex;
                        break;
                    case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                        this.PrecipitationEndFadeOut = ex;
                        break;
                    case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                        this.ThunderLightningBeginFadeIn = ex;
                        break;
                    case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                        this.ThunderLightningEndFadeOut = ex;
                        break;
                    case WeatherData_FieldIndex.ThunderLightningFrequency:
                        this.ThunderLightningFrequency = ex;
                        break;
                    case WeatherData_FieldIndex.Classification:
                        this.Classification = ex;
                        break;
                    case WeatherData_FieldIndex.LightningColor:
                        this.LightningColor = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
                switch (enu)
                {
                    case WeatherData_FieldIndex.WindSpeed:
                        this.WindSpeed = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.CloudSpeedLower:
                        this.CloudSpeedLower = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.CloudSpeedUpper:
                        this.CloudSpeedUpper = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.TransDelta:
                        this.TransDelta = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.SunGlare:
                        this.SunGlare = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.SunDamage:
                        this.SunDamage = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                        this.PrecipitationBeginFadeIn = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                        this.PrecipitationEndFadeOut = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                        this.ThunderLightningBeginFadeIn = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                        this.ThunderLightningEndFadeOut = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.ThunderLightningFrequency:
                        this.ThunderLightningFrequency = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.Classification:
                        this.Classification = (Exception?)obj;
                        break;
                    case WeatherData_FieldIndex.LightningColor:
                        this.LightningColor = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (WindSpeed != null) return true;
                if (CloudSpeedLower != null) return true;
                if (CloudSpeedUpper != null) return true;
                if (TransDelta != null) return true;
                if (SunGlare != null) return true;
                if (SunDamage != null) return true;
                if (PrecipitationBeginFadeIn != null) return true;
                if (PrecipitationEndFadeOut != null) return true;
                if (ThunderLightningBeginFadeIn != null) return true;
                if (ThunderLightningEndFadeOut != null) return true;
                if (ThunderLightningFrequency != null) return true;
                if (Classification != null) return true;
                if (LightningColor != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(WindSpeed, "WindSpeed");
                fg.AppendItem(CloudSpeedLower, "CloudSpeedLower");
                fg.AppendItem(CloudSpeedUpper, "CloudSpeedUpper");
                fg.AppendItem(TransDelta, "TransDelta");
                fg.AppendItem(SunGlare, "SunGlare");
                fg.AppendItem(SunDamage, "SunDamage");
                fg.AppendItem(PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
                fg.AppendItem(PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
                fg.AppendItem(ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
                fg.AppendItem(ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
                fg.AppendItem(ThunderLightningFrequency, "ThunderLightningFrequency");
                fg.AppendItem(Classification, "Classification");
                fg.AppendItem(LightningColor, "LightningColor");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.WindSpeed = this.WindSpeed.Combine(rhs.WindSpeed);
                ret.CloudSpeedLower = this.CloudSpeedLower.Combine(rhs.CloudSpeedLower);
                ret.CloudSpeedUpper = this.CloudSpeedUpper.Combine(rhs.CloudSpeedUpper);
                ret.TransDelta = this.TransDelta.Combine(rhs.TransDelta);
                ret.SunGlare = this.SunGlare.Combine(rhs.SunGlare);
                ret.SunDamage = this.SunDamage.Combine(rhs.SunDamage);
                ret.PrecipitationBeginFadeIn = this.PrecipitationBeginFadeIn.Combine(rhs.PrecipitationBeginFadeIn);
                ret.PrecipitationEndFadeOut = this.PrecipitationEndFadeOut.Combine(rhs.PrecipitationEndFadeOut);
                ret.ThunderLightningBeginFadeIn = this.ThunderLightningBeginFadeIn.Combine(rhs.ThunderLightningBeginFadeIn);
                ret.ThunderLightningEndFadeOut = this.ThunderLightningEndFadeOut.Combine(rhs.ThunderLightningEndFadeOut);
                ret.ThunderLightningFrequency = this.ThunderLightningFrequency.Combine(rhs.ThunderLightningFrequency);
                ret.Classification = this.Classification.Combine(rhs.Classification);
                ret.LightningColor = this.LightningColor.Combine(rhs.LightningColor);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool WindSpeed;
            public bool CloudSpeedLower;
            public bool CloudSpeedUpper;
            public bool TransDelta;
            public bool SunGlare;
            public bool SunDamage;
            public bool PrecipitationBeginFadeIn;
            public bool PrecipitationEndFadeOut;
            public bool ThunderLightningBeginFadeIn;
            public bool ThunderLightningEndFadeOut;
            public bool ThunderLightningFrequency;
            public bool Classification;
            public bool LightningColor;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.WindSpeed = defaultOn;
                this.CloudSpeedLower = defaultOn;
                this.CloudSpeedUpper = defaultOn;
                this.TransDelta = defaultOn;
                this.SunGlare = defaultOn;
                this.SunDamage = defaultOn;
                this.PrecipitationBeginFadeIn = defaultOn;
                this.PrecipitationEndFadeOut = defaultOn;
                this.ThunderLightningBeginFadeIn = defaultOn;
                this.ThunderLightningEndFadeOut = defaultOn;
                this.ThunderLightningFrequency = defaultOn;
                this.Classification = defaultOn;
                this.LightningColor = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((WindSpeed, null));
                ret.Add((CloudSpeedLower, null));
                ret.Add((CloudSpeedUpper, null));
                ret.Add((TransDelta, null));
                ret.Add((SunGlare, null));
                ret.Add((SunDamage, null));
                ret.Add((PrecipitationBeginFadeIn, null));
                ret.Add((PrecipitationEndFadeOut, null));
                ret.Add((ThunderLightningBeginFadeIn, null));
                ret.Add((ThunderLightningEndFadeOut, null));
                ret.Add((ThunderLightningFrequency, null));
                ret.Add((Classification, null));
                ret.Add((LightningColor, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = WeatherData_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static WeatherData CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static WeatherData CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WeatherData();
            ((WeatherDataSetterCommon)((IWeatherDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherDataGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WeatherDataSetterCommon)((IWeatherDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WeatherData GetNew()
        {
            return new WeatherData();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeatherData :
        IWeatherDataGetter,
        ILoquiObjectSetter<IWeatherData>
    {
        new Byte WindSpeed { get; set; }
        new Byte CloudSpeedLower { get; set; }
        new Byte CloudSpeedUpper { get; set; }
        new Byte TransDelta { get; set; }
        new Byte SunGlare { get; set; }
        new Byte SunDamage { get; set; }
        new Byte PrecipitationBeginFadeIn { get; set; }
        new Byte PrecipitationEndFadeOut { get; set; }
        new Byte ThunderLightningBeginFadeIn { get; set; }
        new Byte ThunderLightningEndFadeOut { get; set; }
        new Byte ThunderLightningFrequency { get; set; }
        new Weather.WeatherClassification Classification { get; set; }
        new Color LightningColor { get; set; }
    }

    public partial interface IWeatherDataGetter :
        ILoquiObject,
        ILoquiObject<IWeatherDataGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => WeatherData_Registration.Instance;
        Byte WindSpeed { get; }
        Byte CloudSpeedLower { get; }
        Byte CloudSpeedUpper { get; }
        Byte TransDelta { get; }
        Byte SunGlare { get; }
        Byte SunDamage { get; }
        Byte PrecipitationBeginFadeIn { get; }
        Byte PrecipitationEndFadeOut { get; }
        Byte ThunderLightningBeginFadeIn { get; }
        Byte ThunderLightningEndFadeOut { get; }
        Byte ThunderLightningFrequency { get; }
        Weather.WeatherClassification Classification { get; }
        Color LightningColor { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherDataMixIn
    {
        public static void Clear(this IWeatherData item)
        {
            ((WeatherDataSetterCommon)((IWeatherDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeatherData.Mask<bool> GetEqualsMask(
            this IWeatherDataGetter item,
            IWeatherDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWeatherDataGetter item,
            string? name = null,
            WeatherData.Mask<bool>? printMask = null)
        {
            return ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWeatherDataGetter item,
            FileGeneration fg,
            string? name = null,
            WeatherData.Mask<bool>? printMask = null)
        {
            ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWeatherDataGetter item,
            WeatherData.Mask<bool?> checkMask)
        {
            return ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static WeatherData.Mask<bool> GetHasBeenSetMask(this IWeatherDataGetter item)
        {
            var ret = new WeatherData.Mask<bool>(false);
            ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWeatherDataGetter item,
            IWeatherDataGetter rhs)
        {
            return ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWeatherData lhs,
            IWeatherDataGetter rhs)
        {
            ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IWeatherData lhs,
            IWeatherDataGetter rhs,
            WeatherData.TranslationMask? copyMask = null)
        {
            ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeatherData lhs,
            IWeatherDataGetter rhs,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = WeatherData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherData lhs,
            IWeatherDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static WeatherData DeepCopy(
            this IWeatherDataGetter item,
            WeatherData.TranslationMask? copyMask = null)
        {
            return ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeatherData DeepCopy(
            this IWeatherDataGetter item,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? copyMask = null)
        {
            return ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeatherData DeepCopy(
            this IWeatherDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherDataSetterTranslationCommon)((IWeatherDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherData item,
            XElement node,
            WeatherData.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWeatherData item,
            XElement node,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WeatherDataSetterCommon)((IWeatherDataGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            string path,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            string path,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            string path,
            ErrorMaskBuilder? errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            Stream stream,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            Stream stream,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWeatherData item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WeatherData.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWeatherData item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWeatherData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherDataSetterCommon)((IWeatherDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WeatherData_FieldIndex
    {
        WindSpeed = 0,
        CloudSpeedLower = 1,
        CloudSpeedUpper = 2,
        TransDelta = 3,
        SunGlare = 4,
        SunDamage = 5,
        PrecipitationBeginFadeIn = 6,
        PrecipitationEndFadeOut = 7,
        ThunderLightningBeginFadeIn = 8,
        ThunderLightningEndFadeOut = 9,
        ThunderLightningFrequency = 10,
        Classification = 11,
        LightningColor = 12,
    }
    #endregion

    #region Registration
    public partial class WeatherData_Registration : ILoquiRegistration
    {
        public static readonly WeatherData_Registration Instance = new WeatherData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 218,
            version: 0);

        public const string GUID = "9215f24a-1537-4910-9666-c059ba5560f2";

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(WeatherData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeatherData.ErrorMask);

        public static readonly Type ClassType = typeof(WeatherData);

        public static readonly Type GetterType = typeof(IWeatherDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeatherData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.WeatherData";

        public const string Name = "WeatherData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "WINDSPEED":
                    return (ushort)WeatherData_FieldIndex.WindSpeed;
                case "CLOUDSPEEDLOWER":
                    return (ushort)WeatherData_FieldIndex.CloudSpeedLower;
                case "CLOUDSPEEDUPPER":
                    return (ushort)WeatherData_FieldIndex.CloudSpeedUpper;
                case "TRANSDELTA":
                    return (ushort)WeatherData_FieldIndex.TransDelta;
                case "SUNGLARE":
                    return (ushort)WeatherData_FieldIndex.SunGlare;
                case "SUNDAMAGE":
                    return (ushort)WeatherData_FieldIndex.SunDamage;
                case "PRECIPITATIONBEGINFADEIN":
                    return (ushort)WeatherData_FieldIndex.PrecipitationBeginFadeIn;
                case "PRECIPITATIONENDFADEOUT":
                    return (ushort)WeatherData_FieldIndex.PrecipitationEndFadeOut;
                case "THUNDERLIGHTNINGBEGINFADEIN":
                    return (ushort)WeatherData_FieldIndex.ThunderLightningBeginFadeIn;
                case "THUNDERLIGHTNINGENDFADEOUT":
                    return (ushort)WeatherData_FieldIndex.ThunderLightningEndFadeOut;
                case "THUNDERLIGHTNINGFREQUENCY":
                    return (ushort)WeatherData_FieldIndex.ThunderLightningFrequency;
                case "CLASSIFICATION":
                    return (ushort)WeatherData_FieldIndex.Classification;
                case "LIGHTNINGCOLOR":
                    return (ushort)WeatherData_FieldIndex.LightningColor;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                case WeatherData_FieldIndex.CloudSpeedLower:
                case WeatherData_FieldIndex.CloudSpeedUpper:
                case WeatherData_FieldIndex.TransDelta:
                case WeatherData_FieldIndex.SunGlare:
                case WeatherData_FieldIndex.SunDamage:
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                case WeatherData_FieldIndex.Classification:
                case WeatherData_FieldIndex.LightningColor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                case WeatherData_FieldIndex.CloudSpeedLower:
                case WeatherData_FieldIndex.CloudSpeedUpper:
                case WeatherData_FieldIndex.TransDelta:
                case WeatherData_FieldIndex.SunGlare:
                case WeatherData_FieldIndex.SunDamage:
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                case WeatherData_FieldIndex.Classification:
                case WeatherData_FieldIndex.LightningColor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                case WeatherData_FieldIndex.CloudSpeedLower:
                case WeatherData_FieldIndex.CloudSpeedUpper:
                case WeatherData_FieldIndex.TransDelta:
                case WeatherData_FieldIndex.SunGlare:
                case WeatherData_FieldIndex.SunDamage:
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                case WeatherData_FieldIndex.Classification:
                case WeatherData_FieldIndex.LightningColor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                    return "WindSpeed";
                case WeatherData_FieldIndex.CloudSpeedLower:
                    return "CloudSpeedLower";
                case WeatherData_FieldIndex.CloudSpeedUpper:
                    return "CloudSpeedUpper";
                case WeatherData_FieldIndex.TransDelta:
                    return "TransDelta";
                case WeatherData_FieldIndex.SunGlare:
                    return "SunGlare";
                case WeatherData_FieldIndex.SunDamage:
                    return "SunDamage";
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                    return "PrecipitationBeginFadeIn";
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                    return "PrecipitationEndFadeOut";
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                    return "ThunderLightningBeginFadeIn";
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                    return "ThunderLightningEndFadeOut";
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                    return "ThunderLightningFrequency";
                case WeatherData_FieldIndex.Classification:
                    return "Classification";
                case WeatherData_FieldIndex.LightningColor:
                    return "LightningColor";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                case WeatherData_FieldIndex.CloudSpeedLower:
                case WeatherData_FieldIndex.CloudSpeedUpper:
                case WeatherData_FieldIndex.TransDelta:
                case WeatherData_FieldIndex.SunGlare:
                case WeatherData_FieldIndex.SunDamage:
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                case WeatherData_FieldIndex.Classification:
                case WeatherData_FieldIndex.LightningColor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                case WeatherData_FieldIndex.CloudSpeedLower:
                case WeatherData_FieldIndex.CloudSpeedUpper:
                case WeatherData_FieldIndex.TransDelta:
                case WeatherData_FieldIndex.SunGlare:
                case WeatherData_FieldIndex.SunDamage:
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                case WeatherData_FieldIndex.Classification:
                case WeatherData_FieldIndex.LightningColor:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WeatherData_FieldIndex enu = (WeatherData_FieldIndex)index;
            switch (enu)
            {
                case WeatherData_FieldIndex.WindSpeed:
                    return typeof(Byte);
                case WeatherData_FieldIndex.CloudSpeedLower:
                    return typeof(Byte);
                case WeatherData_FieldIndex.CloudSpeedUpper:
                    return typeof(Byte);
                case WeatherData_FieldIndex.TransDelta:
                    return typeof(Byte);
                case WeatherData_FieldIndex.SunGlare:
                    return typeof(Byte);
                case WeatherData_FieldIndex.SunDamage:
                    return typeof(Byte);
                case WeatherData_FieldIndex.PrecipitationBeginFadeIn:
                    return typeof(Byte);
                case WeatherData_FieldIndex.PrecipitationEndFadeOut:
                    return typeof(Byte);
                case WeatherData_FieldIndex.ThunderLightningBeginFadeIn:
                    return typeof(Byte);
                case WeatherData_FieldIndex.ThunderLightningEndFadeOut:
                    return typeof(Byte);
                case WeatherData_FieldIndex.ThunderLightningFrequency:
                    return typeof(Byte);
                case WeatherData_FieldIndex.Classification:
                    return typeof(Weather.WeatherClassification);
                case WeatherData_FieldIndex.LightningColor:
                    return typeof(Color);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WeatherDataXmlWriteTranslation);
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = DATA_HEADER;
        public const int NumStructFields = 13;
        public const int NumTypedFields = 0;
        public static readonly Type BinaryWriteTranslation = typeof(WeatherDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WeatherDataSetterCommon
    {
        public static readonly WeatherDataSetterCommon Instance = new WeatherDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherData item)
        {
            ClearPartial();
            item.WindSpeed = default;
            item.CloudSpeedLower = default;
            item.CloudSpeedUpper = default;
            item.TransDelta = default;
            item.SunGlare = default;
            item.SunDamage = default;
            item.PrecipitationBeginFadeIn = default;
            item.PrecipitationEndFadeOut = default;
            item.ThunderLightningBeginFadeIn = default;
            item.ThunderLightningEndFadeOut = default;
            item.ThunderLightningFrequency = default;
            item.Classification = default;
            item.LightningColor = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IWeatherData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IWeatherData item,
            MutagenFrame frame)
        {
            item.WindSpeed = frame.ReadUInt8();
            item.CloudSpeedLower = frame.ReadUInt8();
            item.CloudSpeedUpper = frame.ReadUInt8();
            item.TransDelta = frame.ReadUInt8();
            item.SunGlare = frame.ReadUInt8();
            item.SunDamage = frame.ReadUInt8();
            item.PrecipitationBeginFadeIn = frame.ReadUInt8();
            item.PrecipitationEndFadeOut = frame.ReadUInt8();
            item.ThunderLightningBeginFadeIn = frame.ReadUInt8();
            item.ThunderLightningEndFadeOut = frame.ReadUInt8();
            item.ThunderLightningFrequency = frame.ReadUInt8();
            item.Classification = EnumBinaryTranslation<Weather.WeatherClassification>.Instance.Parse(frame: frame.SpawnWithLength(1));
            item.LightningColor = frame.ReadColor(ColorBinaryType.NoAlpha);
        }
        
        public virtual void CopyInFromBinary(
            IWeatherData item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(WeatherData_Registration.DATA_HEADER)));
            UtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs);
        }
        
        #endregion
        
    }
    public partial class WeatherDataCommon
    {
        public static readonly WeatherDataCommon Instance = new WeatherDataCommon();

        public WeatherData.Mask<bool> GetEqualsMask(
            IWeatherDataGetter item,
            IWeatherDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeatherData.Mask<bool>(false);
            ((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherDataGetter item,
            IWeatherDataGetter rhs,
            WeatherData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.WindSpeed = item.WindSpeed == rhs.WindSpeed;
            ret.CloudSpeedLower = item.CloudSpeedLower == rhs.CloudSpeedLower;
            ret.CloudSpeedUpper = item.CloudSpeedUpper == rhs.CloudSpeedUpper;
            ret.TransDelta = item.TransDelta == rhs.TransDelta;
            ret.SunGlare = item.SunGlare == rhs.SunGlare;
            ret.SunDamage = item.SunDamage == rhs.SunDamage;
            ret.PrecipitationBeginFadeIn = item.PrecipitationBeginFadeIn == rhs.PrecipitationBeginFadeIn;
            ret.PrecipitationEndFadeOut = item.PrecipitationEndFadeOut == rhs.PrecipitationEndFadeOut;
            ret.ThunderLightningBeginFadeIn = item.ThunderLightningBeginFadeIn == rhs.ThunderLightningBeginFadeIn;
            ret.ThunderLightningEndFadeOut = item.ThunderLightningEndFadeOut == rhs.ThunderLightningEndFadeOut;
            ret.ThunderLightningFrequency = item.ThunderLightningFrequency == rhs.ThunderLightningFrequency;
            ret.Classification = item.Classification == rhs.Classification;
            ret.LightningColor = item.LightningColor.ColorOnlyEquals(rhs.LightningColor);
        }
        
        public string ToString(
            IWeatherDataGetter item,
            string? name = null,
            WeatherData.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWeatherDataGetter item,
            FileGeneration fg,
            string? name = null,
            WeatherData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WeatherData =>");
            }
            else
            {
                fg.AppendLine($"{name} (WeatherData) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWeatherDataGetter item,
            FileGeneration fg,
            WeatherData.Mask<bool>? printMask = null)
        {
            if (printMask?.WindSpeed ?? true)
            {
                fg.AppendItem(item.WindSpeed, "WindSpeed");
            }
            if (printMask?.CloudSpeedLower ?? true)
            {
                fg.AppendItem(item.CloudSpeedLower, "CloudSpeedLower");
            }
            if (printMask?.CloudSpeedUpper ?? true)
            {
                fg.AppendItem(item.CloudSpeedUpper, "CloudSpeedUpper");
            }
            if (printMask?.TransDelta ?? true)
            {
                fg.AppendItem(item.TransDelta, "TransDelta");
            }
            if (printMask?.SunGlare ?? true)
            {
                fg.AppendItem(item.SunGlare, "SunGlare");
            }
            if (printMask?.SunDamage ?? true)
            {
                fg.AppendItem(item.SunDamage, "SunDamage");
            }
            if (printMask?.PrecipitationBeginFadeIn ?? true)
            {
                fg.AppendItem(item.PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
            }
            if (printMask?.PrecipitationEndFadeOut ?? true)
            {
                fg.AppendItem(item.PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
            }
            if (printMask?.ThunderLightningBeginFadeIn ?? true)
            {
                fg.AppendItem(item.ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
            }
            if (printMask?.ThunderLightningEndFadeOut ?? true)
            {
                fg.AppendItem(item.ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
            }
            if (printMask?.ThunderLightningFrequency ?? true)
            {
                fg.AppendItem(item.ThunderLightningFrequency, "ThunderLightningFrequency");
            }
            if (printMask?.Classification ?? true)
            {
                fg.AppendItem(item.Classification, "Classification");
            }
            if (printMask?.LightningColor ?? true)
            {
                fg.AppendItem(item.LightningColor, "LightningColor");
            }
        }
        
        public bool HasBeenSet(
            IWeatherDataGetter item,
            WeatherData.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IWeatherDataGetter item,
            WeatherData.Mask<bool> mask)
        {
            mask.WindSpeed = true;
            mask.CloudSpeedLower = true;
            mask.CloudSpeedUpper = true;
            mask.TransDelta = true;
            mask.SunGlare = true;
            mask.SunDamage = true;
            mask.PrecipitationBeginFadeIn = true;
            mask.PrecipitationEndFadeOut = true;
            mask.ThunderLightningBeginFadeIn = true;
            mask.ThunderLightningEndFadeOut = true;
            mask.ThunderLightningFrequency = true;
            mask.Classification = true;
            mask.LightningColor = true;
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherDataGetter? lhs,
            IWeatherDataGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.WindSpeed != rhs.WindSpeed) return false;
            if (lhs.CloudSpeedLower != rhs.CloudSpeedLower) return false;
            if (lhs.CloudSpeedUpper != rhs.CloudSpeedUpper) return false;
            if (lhs.TransDelta != rhs.TransDelta) return false;
            if (lhs.SunGlare != rhs.SunGlare) return false;
            if (lhs.SunDamage != rhs.SunDamage) return false;
            if (lhs.PrecipitationBeginFadeIn != rhs.PrecipitationBeginFadeIn) return false;
            if (lhs.PrecipitationEndFadeOut != rhs.PrecipitationEndFadeOut) return false;
            if (lhs.ThunderLightningBeginFadeIn != rhs.ThunderLightningBeginFadeIn) return false;
            if (lhs.ThunderLightningEndFadeOut != rhs.ThunderLightningEndFadeOut) return false;
            if (lhs.ThunderLightningFrequency != rhs.ThunderLightningFrequency) return false;
            if (lhs.Classification != rhs.Classification) return false;
            if (!lhs.LightningColor.ColorOnlyEquals(rhs.LightningColor)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWeatherDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.WindSpeed);
            hash.Add(item.CloudSpeedLower);
            hash.Add(item.CloudSpeedUpper);
            hash.Add(item.TransDelta);
            hash.Add(item.SunGlare);
            hash.Add(item.SunDamage);
            hash.Add(item.PrecipitationBeginFadeIn);
            hash.Add(item.PrecipitationEndFadeOut);
            hash.Add(item.ThunderLightningBeginFadeIn);
            hash.Add(item.ThunderLightningEndFadeOut);
            hash.Add(item.ThunderLightningFrequency);
            hash.Add(item.Classification);
            hash.Add(item.LightningColor);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WeatherData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IWeatherDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    public partial class WeatherDataSetterTranslationCommon
    {
        public static readonly WeatherDataSetterTranslationCommon Instance = new WeatherDataSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWeatherData item,
            IWeatherDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.WindSpeed) ?? true))
            {
                item.WindSpeed = rhs.WindSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.CloudSpeedLower) ?? true))
            {
                item.CloudSpeedLower = rhs.CloudSpeedLower;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.CloudSpeedUpper) ?? true))
            {
                item.CloudSpeedUpper = rhs.CloudSpeedUpper;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.TransDelta) ?? true))
            {
                item.TransDelta = rhs.TransDelta;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.SunGlare) ?? true))
            {
                item.SunGlare = rhs.SunGlare;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.SunDamage) ?? true))
            {
                item.SunDamage = rhs.SunDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                item.PrecipitationBeginFadeIn = rhs.PrecipitationBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                item.PrecipitationEndFadeOut = rhs.PrecipitationEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                item.ThunderLightningBeginFadeIn = rhs.ThunderLightningBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                item.ThunderLightningEndFadeOut = rhs.ThunderLightningEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                item.ThunderLightningFrequency = rhs.ThunderLightningFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.Classification) ?? true))
            {
                item.Classification = rhs.Classification;
            }
            if ((copyMask?.GetShouldTranslate((int)WeatherData_FieldIndex.LightningColor) ?? true))
            {
                item.LightningColor = rhs.LightningColor;
            }
        }
        
        #endregion
        
        public WeatherData DeepCopy(
            IWeatherDataGetter item,
            WeatherData.TranslationMask? copyMask = null)
        {
            WeatherData ret = (WeatherData)((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public WeatherData DeepCopy(
            IWeatherDataGetter item,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? copyMask = null)
        {
            WeatherData ret = (WeatherData)((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public WeatherData DeepCopy(
            IWeatherDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeatherData ret = (WeatherData)((WeatherDataCommon)((IWeatherDataGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class WeatherData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherData_Registration.Instance;
        public static WeatherData_Registration Registration => WeatherData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WeatherDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWeatherDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWeatherDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherDataXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static WeatherDataXmlWriteTranslation Instance = new WeatherDataXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWeatherDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.WindSpeed) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.WindSpeed),
                    item: item.WindSpeed,
                    fieldIndex: (int)WeatherData_FieldIndex.WindSpeed,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.CloudSpeedLower) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloudSpeedLower),
                    item: item.CloudSpeedLower,
                    fieldIndex: (int)WeatherData_FieldIndex.CloudSpeedLower,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.CloudSpeedUpper) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.CloudSpeedUpper),
                    item: item.CloudSpeedUpper,
                    fieldIndex: (int)WeatherData_FieldIndex.CloudSpeedUpper,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.TransDelta) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TransDelta),
                    item: item.TransDelta,
                    fieldIndex: (int)WeatherData_FieldIndex.TransDelta,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.SunGlare) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunGlare),
                    item: item.SunGlare,
                    fieldIndex: (int)WeatherData_FieldIndex.SunGlare,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.SunDamage) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SunDamage),
                    item: item.SunDamage,
                    fieldIndex: (int)WeatherData_FieldIndex.SunDamage,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PrecipitationBeginFadeIn),
                    item: item.PrecipitationBeginFadeIn,
                    fieldIndex: (int)WeatherData_FieldIndex.PrecipitationBeginFadeIn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.PrecipitationEndFadeOut),
                    item: item.PrecipitationEndFadeOut,
                    fieldIndex: (int)WeatherData_FieldIndex.PrecipitationEndFadeOut,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThunderLightningBeginFadeIn),
                    item: item.ThunderLightningBeginFadeIn,
                    fieldIndex: (int)WeatherData_FieldIndex.ThunderLightningBeginFadeIn,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThunderLightningEndFadeOut),
                    item: item.ThunderLightningEndFadeOut,
                    fieldIndex: (int)WeatherData_FieldIndex.ThunderLightningEndFadeOut,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                ByteXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ThunderLightningFrequency),
                    item: item.ThunderLightningFrequency,
                    fieldIndex: (int)WeatherData_FieldIndex.ThunderLightningFrequency,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.Classification) ?? true))
            {
                EnumXmlTranslation<Weather.WeatherClassification>.Instance.Write(
                    node: node,
                    name: nameof(item.Classification),
                    item: item.Classification,
                    fieldIndex: (int)WeatherData_FieldIndex.Classification,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WeatherData_FieldIndex.LightningColor) ?? true))
            {
                ColorXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LightningColor),
                    item: item.LightningColor,
                    fieldIndex: (int)WeatherData_FieldIndex.LightningColor,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWeatherDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.WeatherData");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.WeatherData");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWeatherDataGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IWeatherDataGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IWeatherDataGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class WeatherDataXmlCreateTranslation
    {
        public readonly static WeatherDataXmlCreateTranslation Instance = new WeatherDataXmlCreateTranslation();

        public static void FillPublicXml(
            IWeatherData item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WeatherDataXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWeatherData item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "WindSpeed":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.WindSpeed);
                    try
                    {
                        item.WindSpeed = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudSpeedLower":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.CloudSpeedLower);
                    try
                    {
                        item.CloudSpeedLower = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "CloudSpeedUpper":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.CloudSpeedUpper);
                    try
                    {
                        item.CloudSpeedUpper = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TransDelta":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.TransDelta);
                    try
                    {
                        item.TransDelta = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunGlare":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.SunGlare);
                    try
                    {
                        item.SunGlare = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SunDamage":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.SunDamage);
                    try
                    {
                        item.SunDamage = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationBeginFadeIn":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.PrecipitationBeginFadeIn);
                    try
                    {
                        item.PrecipitationBeginFadeIn = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "PrecipitationEndFadeOut":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.PrecipitationEndFadeOut);
                    try
                    {
                        item.PrecipitationEndFadeOut = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningBeginFadeIn":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.ThunderLightningBeginFadeIn);
                    try
                    {
                        item.ThunderLightningBeginFadeIn = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningEndFadeOut":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.ThunderLightningEndFadeOut);
                    try
                    {
                        item.ThunderLightningEndFadeOut = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ThunderLightningFrequency":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.ThunderLightningFrequency);
                    try
                    {
                        item.ThunderLightningFrequency = ByteXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Classification":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.Classification);
                    try
                    {
                        item.Classification = EnumXmlTranslation<Weather.WeatherClassification>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LightningColor":
                    errorMask?.PushIndex((int)WeatherData_FieldIndex.LightningColor);
                    try
                    {
                        item.LightningColor = ColorXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WeatherDataXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWeatherDataGetter item,
            XElement node,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WeatherData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            string path,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            Stream stream,
            out WeatherData.ErrorMask errorMask,
            WeatherData.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((WeatherDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            XElement node,
            string? name = null,
            WeatherData.TranslationMask? translationMask = null)
        {
            ((WeatherDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WeatherDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWeatherDataGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WeatherDataXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WeatherDataBinaryWriteTranslation Instance = new WeatherDataBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWeatherDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.WindSpeed);
            writer.Write(item.CloudSpeedLower);
            writer.Write(item.CloudSpeedUpper);
            writer.Write(item.TransDelta);
            writer.Write(item.SunGlare);
            writer.Write(item.SunDamage);
            writer.Write(item.PrecipitationBeginFadeIn);
            writer.Write(item.PrecipitationEndFadeOut);
            writer.Write(item.ThunderLightningBeginFadeIn);
            writer.Write(item.ThunderLightningEndFadeOut);
            writer.Write(item.ThunderLightningFrequency);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Weather.WeatherClassification>.Instance.Write(
                writer,
                item.Classification,
                length: 1);
            Mutagen.Bethesda.Binary.ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LightningColor,
                binaryType: ColorBinaryType.NoAlpha);
        }

        public void Write(
            MutagenWriter writer,
            IWeatherDataGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(WeatherData_Registration.DATA_HEADER),
                type: ObjectType.Subrecord))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWeatherDataGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WeatherDataBinaryCreateTranslation
    {
        public readonly static WeatherDataBinaryCreateTranslation Instance = new WeatherDataBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WeatherDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWeatherDataGetter item,
            MutagenWriter writer)
        {
            ((WeatherDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WeatherDataBinaryOverlay :
        BinaryOverlay,
        IWeatherDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeatherData_Registration.Instance;
        public static WeatherData_Registration Registration => WeatherData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WeatherDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WeatherDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWeatherDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWeatherDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWeatherDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWeatherDataGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WeatherDataXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WeatherDataXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WeatherDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WeatherDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Byte WindSpeed => _data.Span[0x0];
        public Byte CloudSpeedLower => _data.Span[0x1];
        public Byte CloudSpeedUpper => _data.Span[0x2];
        public Byte TransDelta => _data.Span[0x3];
        public Byte SunGlare => _data.Span[0x4];
        public Byte SunDamage => _data.Span[0x5];
        public Byte PrecipitationBeginFadeIn => _data.Span[0x6];
        public Byte PrecipitationEndFadeOut => _data.Span[0x7];
        public Byte ThunderLightningBeginFadeIn => _data.Span[0x8];
        public Byte ThunderLightningEndFadeOut => _data.Span[0x9];
        public Byte ThunderLightningFrequency => _data.Span[0xA];
        public Weather.WeatherClassification Classification => (Weather.WeatherClassification)_data.Span.Slice(0xB, 0x1)[0];
        public Color LightningColor => _data.Slice(0xC, 0x3).ReadColor(ColorBinaryType.NoAlpha);
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected WeatherDataBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WeatherDataBinaryOverlay WeatherDataFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WeatherDataBinaryOverlay(
                bytes: HeaderTranslation.ExtractSubrecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Subrecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.SubConstants.TypeAndLengthLength;
            stream.Position += 0xF + package.Meta.SubConstants.HeaderLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static WeatherDataBinaryOverlay WeatherDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WeatherDataFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WeatherDataMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

