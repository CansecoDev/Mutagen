/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
using Mutagen.Bethesda.Internals;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class WorldspaceSubBlock :
        IWorldspaceSubBlock,
        ILoquiObjectSetter<WorldspaceSubBlock>,
        IEquatable<WorldspaceSubBlock>,
        IEqualsMask
    {
        #region Ctor
        public WorldspaceSubBlock()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BlockNumberY
        public Int16 BlockNumberY { get; set; } = default;
        #endregion
        #region BlockNumberX
        public Int16 BlockNumberX { get; set; } = default;
        #endregion
        #region GroupType
        public GroupTypeEnum GroupType { get; set; } = default;
        #endregion
        #region LastModified
        public Int32 LastModified { get; set; } = default;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Cell> _Items = new ExtendedList<Cell>();
        public ExtendedList<Cell> Items
        {
            get => this._Items;
            protected set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICellGetter> IWorldspaceSubBlockGetter.Items => _Items;
        #endregion

        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceSubBlockMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWorldspaceSubBlockGetter rhs)) return false;
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(WorldspaceSubBlock obj)
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WorldspaceSubBlockXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceSubBlockXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static WorldspaceSubBlock CreateFromXml(
            XElement node,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static WorldspaceSubBlock CreateFromXml(
            XElement node,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceSubBlock.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static WorldspaceSubBlock CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new WorldspaceSubBlock();
            ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static WorldspaceSubBlock CreateFromXml(
            string path,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WorldspaceSubBlock CreateFromXml(
            string path,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WorldspaceSubBlock CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static WorldspaceSubBlock CreateFromXml(
            Stream stream,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static WorldspaceSubBlock CreateFromXml(
            Stream stream,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static WorldspaceSubBlock CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.BlockNumberY = initialValue;
                this.BlockNumberX = initialValue;
                this.GroupType = initialValue;
                this.LastModified = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Cell.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Cell.Mask<TItem>?>>());
            }

            public Mask(
                TItem BlockNumberY,
                TItem BlockNumberX,
                TItem GroupType,
                TItem LastModified,
                TItem Items)
            {
                this.BlockNumberY = BlockNumberY;
                this.BlockNumberX = BlockNumberX;
                this.GroupType = GroupType;
                this.LastModified = LastModified;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Cell.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, Cell.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem BlockNumberY;
            public TItem BlockNumberX;
            public TItem GroupType;
            public TItem LastModified;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Cell.Mask<TItem>?>>?>? Items;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.BlockNumberY, rhs.BlockNumberY)) return false;
                if (!object.Equals(this.BlockNumberX, rhs.BlockNumberX)) return false;
                if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
                if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BlockNumberY);
                hash.Add(this.BlockNumberX);
                hash.Add(this.GroupType);
                hash.Add(this.LastModified);
                hash.Add(this.Items);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.BlockNumberY)) return false;
                if (!eval(this.BlockNumberX)) return false;
                if (!eval(this.GroupType)) return false;
                if (!eval(this.LastModified)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.BlockNumberY)) return true;
                if (eval(this.BlockNumberX)) return true;
                if (eval(this.GroupType)) return true;
                if (eval(this.LastModified)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WorldspaceSubBlock.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.BlockNumberY = eval(this.BlockNumberY);
                obj.BlockNumberX = eval(this.BlockNumberX);
                obj.GroupType = eval(this.GroupType);
                obj.LastModified = eval(this.LastModified);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Cell.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, Cell.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Cell.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, Cell.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, Cell.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(WorldspaceSubBlock.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, WorldspaceSubBlock.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(WorldspaceSubBlock.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.BlockNumberY ?? true)
                    {
                        fg.AppendItem(BlockNumberY, "BlockNumberY");
                    }
                    if (printMask?.BlockNumberX ?? true)
                    {
                        fg.AppendItem(BlockNumberX, "BlockNumberX");
                    }
                    if (printMask?.GroupType ?? true)
                    {
                        fg.AppendItem(GroupType, "GroupType");
                    }
                    if (printMask?.LastModified ?? true)
                    {
                        fg.AppendItem(LastModified, "LastModified");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items.TryGet(out var ItemsItem))
                    {
                        fg.AppendLine("Items =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? BlockNumberY;
            public Exception? BlockNumberX;
            public Exception? GroupType;
            public Exception? LastModified;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Cell.ErrorMask?>>?>? Items;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                        return BlockNumberY;
                    case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                        return BlockNumberX;
                    case WorldspaceSubBlock_FieldIndex.GroupType:
                        return GroupType;
                    case WorldspaceSubBlock_FieldIndex.LastModified:
                        return LastModified;
                    case WorldspaceSubBlock_FieldIndex.Items:
                        return Items;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                        this.BlockNumberY = ex;
                        break;
                    case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                        this.BlockNumberX = ex;
                        break;
                    case WorldspaceSubBlock_FieldIndex.GroupType:
                        this.GroupType = ex;
                        break;
                    case WorldspaceSubBlock_FieldIndex.LastModified:
                        this.LastModified = ex;
                        break;
                    case WorldspaceSubBlock_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Cell.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
                switch (enu)
                {
                    case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                        this.BlockNumberY = (Exception?)obj;
                        break;
                    case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                        this.BlockNumberX = (Exception?)obj;
                        break;
                    case WorldspaceSubBlock_FieldIndex.GroupType:
                        this.GroupType = (Exception?)obj;
                        break;
                    case WorldspaceSubBlock_FieldIndex.LastModified:
                        this.LastModified = (Exception?)obj;
                        break;
                    case WorldspaceSubBlock_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Cell.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (BlockNumberY != null) return true;
                if (BlockNumberX != null) return true;
                if (GroupType != null) return true;
                if (LastModified != null) return true;
                if (Items != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(BlockNumberY, "BlockNumberY");
                fg.AppendItem(BlockNumberX, "BlockNumberX");
                fg.AppendItem(GroupType, "GroupType");
                fg.AppendItem(LastModified, "LastModified");
                if (Items.TryGet(out var ItemsItem))
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BlockNumberY = this.BlockNumberY.Combine(rhs.BlockNumberY);
                ret.BlockNumberX = this.BlockNumberX.Combine(rhs.BlockNumberX);
                ret.GroupType = this.GroupType.Combine(rhs.GroupType);
                ret.LastModified = this.LastModified.Combine(rhs.LastModified);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Cell.ErrorMask?>>?>(ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool BlockNumberY;
            public bool BlockNumberX;
            public bool GroupType;
            public bool LastModified;
            public MaskItem<bool, Cell.TranslationMask?> Items;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.BlockNumberY = defaultOn;
                this.BlockNumberX = defaultOn;
                this.GroupType = defaultOn;
                this.LastModified = defaultOn;
                this.Items = new MaskItem<bool, Cell.TranslationMask?>(defaultOn, null);
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((BlockNumberY, null));
                ret.Add((BlockNumberX, null));
                ret.Add((GroupType, null));
                ret.Add((LastModified, null));
                ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
            }
        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = (RecordType)Cell.GrupRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => WorldspaceSubBlockCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WorldspaceSubBlockCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceSubBlockCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceSubBlockCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldspaceSubBlockBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceSubBlockBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static WorldspaceSubBlock CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static WorldspaceSubBlock CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WorldspaceSubBlock();
            ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceSubBlockGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static WorldspaceSubBlock GetNew()
        {
            return new WorldspaceSubBlock();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspaceSubBlock :
        IWorldspaceSubBlockGetter,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IWorldspaceSubBlock>
    {
        new Int16 BlockNumberY { get; set; }
        new Int16 BlockNumberX { get; set; }
        new GroupTypeEnum GroupType { get; set; }
        new Int32 LastModified { get; set; }
        new ExtendedList<Cell> Items { get; }
    }

    public partial interface IWorldspaceSubBlockGetter :
        ILoquiObject,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IWorldspaceSubBlockGetter>,
        IXmlItem,
        ILinkedFormKeyContainer,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => WorldspaceSubBlock_Registration.Instance;
        Int16 BlockNumberY { get; }
        Int16 BlockNumberX { get; }
        GroupTypeEnum GroupType { get; }
        Int32 LastModified { get; }
        IReadOnlyList<ICellGetter> Items { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceSubBlockMixIn
    {
        public static void Clear(this IWorldspaceSubBlock item)
        {
            ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WorldspaceSubBlock.Mask<bool> GetEqualsMask(
            this IWorldspaceSubBlockGetter item,
            IWorldspaceSubBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceSubBlockGetter item,
            string? name = null,
            WorldspaceSubBlock.Mask<bool>? printMask = null)
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceSubBlockGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceSubBlock.Mask<bool>? printMask = null)
        {
            ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWorldspaceSubBlockGetter item,
            WorldspaceSubBlock.Mask<bool?> checkMask)
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static WorldspaceSubBlock.Mask<bool> GetHasBeenSetMask(this IWorldspaceSubBlockGetter item)
        {
            var ret = new WorldspaceSubBlock.Mask<bool>(false);
            ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWorldspaceSubBlockGetter item,
            IWorldspaceSubBlockGetter rhs)
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWorldspaceSubBlock lhs,
            IWorldspaceSubBlockGetter rhs)
        {
            ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IWorldspaceSubBlock lhs,
            IWorldspaceSubBlockGetter rhs,
            WorldspaceSubBlock.TranslationMask? copyMask = null)
        {
            ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWorldspaceSubBlock lhs,
            IWorldspaceSubBlockGetter rhs,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = WorldspaceSubBlock.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceSubBlock lhs,
            IWorldspaceSubBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static WorldspaceSubBlock DeepCopy(
            this IWorldspaceSubBlockGetter item,
            WorldspaceSubBlock.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WorldspaceSubBlock DeepCopy(
            this IWorldspaceSubBlockGetter item,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WorldspaceSubBlock DeepCopy(
            this IWorldspaceSubBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceSubBlockSetterTranslationCommon)((IWorldspaceSubBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            XElement node,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            XElement node,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceSubBlock.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            string path,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            string path,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            string path,
            ErrorMaskBuilder? errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            Stream stream,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            Stream stream,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceSubBlock item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IWorldspaceSubBlockGetter obj)
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IWorldspaceSubBlockGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IWorldspaceSubBlock obj)
        {
            return ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IWorldspaceSubBlock obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IWorldspaceSubBlock item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IWorldspaceSubBlock item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceSubBlockSetterCommon)((IWorldspaceSubBlockGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum WorldspaceSubBlock_FieldIndex
    {
        BlockNumberY = 0,
        BlockNumberX = 1,
        GroupType = 2,
        LastModified = 3,
        Items = 4,
    }
    #endregion

    #region Registration
    public partial class WorldspaceSubBlock_Registration : ILoquiRegistration
    {
        public static readonly WorldspaceSubBlock_Registration Instance = new WorldspaceSubBlock_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 141,
            version: 0);

        public const string GUID = "33d37c53-7561-4ea0-aef8-a9b9475eb68f";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(WorldspaceSubBlock.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WorldspaceSubBlock.ErrorMask);

        public static readonly Type ClassType = typeof(WorldspaceSubBlock);

        public static readonly Type GetterType = typeof(IWorldspaceSubBlockGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspaceSubBlock);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.WorldspaceSubBlock";

        public const string Name = "WorldspaceSubBlock";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BLOCKNUMBERY":
                    return (ushort)WorldspaceSubBlock_FieldIndex.BlockNumberY;
                case "BLOCKNUMBERX":
                    return (ushort)WorldspaceSubBlock_FieldIndex.BlockNumberX;
                case "GROUPTYPE":
                    return (ushort)WorldspaceSubBlock_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)WorldspaceSubBlock_FieldIndex.LastModified;
                case "ITEMS":
                    return (ushort)WorldspaceSubBlock_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.Items:
                    return true;
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                case WorldspaceSubBlock_FieldIndex.GroupType:
                case WorldspaceSubBlock_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.Items:
                    return true;
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                case WorldspaceSubBlock_FieldIndex.GroupType:
                case WorldspaceSubBlock_FieldIndex.LastModified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                case WorldspaceSubBlock_FieldIndex.GroupType:
                case WorldspaceSubBlock_FieldIndex.LastModified:
                case WorldspaceSubBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                    return "BlockNumberY";
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                    return "BlockNumberX";
                case WorldspaceSubBlock_FieldIndex.GroupType:
                    return "GroupType";
                case WorldspaceSubBlock_FieldIndex.LastModified:
                    return "LastModified";
                case WorldspaceSubBlock_FieldIndex.Items:
                    return "Items";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                case WorldspaceSubBlock_FieldIndex.GroupType:
                case WorldspaceSubBlock_FieldIndex.LastModified:
                case WorldspaceSubBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                case WorldspaceSubBlock_FieldIndex.GroupType:
                case WorldspaceSubBlock_FieldIndex.LastModified:
                case WorldspaceSubBlock_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            WorldspaceSubBlock_FieldIndex enu = (WorldspaceSubBlock_FieldIndex)index;
            switch (enu)
            {
                case WorldspaceSubBlock_FieldIndex.BlockNumberY:
                    return typeof(Int16);
                case WorldspaceSubBlock_FieldIndex.BlockNumberX:
                    return typeof(Int16);
                case WorldspaceSubBlock_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case WorldspaceSubBlock_FieldIndex.LastModified:
                    return typeof(Int32);
                case WorldspaceSubBlock_FieldIndex.Items:
                    return typeof(ExtendedList<Cell>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WorldspaceSubBlockXmlWriteTranslation);
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType TriggeringRecordType = GRUP_HEADER;
        public const int NumStructFields = 4;
        public const int NumTypedFields = 1;
        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceSubBlockBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceSubBlockSetterCommon
    {
        public static readonly WorldspaceSubBlockSetterCommon Instance = new WorldspaceSubBlockSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceSubBlock item)
        {
            ClearPartial();
            item.BlockNumberY = default;
            item.BlockNumberX = default;
            item.GroupType = default;
            item.LastModified = default;
            item.Items.Clear();
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IWorldspaceSubBlock item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceSubBlockXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IWorldspaceSubBlock obj)
        {
            foreach (var item in WorldspaceSubBlockCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IWorldspaceSubBlock obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in WorldspaceSubBlockCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IWorldspaceSubBlock item,
            MutagenFrame frame)
        {
            item.BlockNumberY = frame.ReadInt16();
            item.BlockNumberX = frame.ReadInt16();
            item.GroupType = EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.LastModified = frame.ReadInt32();
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IWorldspaceSubBlock item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C4543: // CELL
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<Cell>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: WorldspaceSubBlock_Registration.CELL_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out Cell listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<Cell>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)WorldspaceSubBlock_FieldIndex.Items);
                }
                default:
                    frame.Position += contentLength + frame.MetaData.MajorConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public virtual void CopyInFromBinary(
            IWorldspaceSubBlock item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            UtilityTranslation.GroupParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class WorldspaceSubBlockCommon
    {
        public static readonly WorldspaceSubBlockCommon Instance = new WorldspaceSubBlockCommon();

        public WorldspaceSubBlock.Mask<bool> GetEqualsMask(
            IWorldspaceSubBlockGetter item,
            IWorldspaceSubBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WorldspaceSubBlock.Mask<bool>(false);
            ((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceSubBlockGetter item,
            IWorldspaceSubBlockGetter rhs,
            WorldspaceSubBlock.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.BlockNumberY = item.BlockNumberY == rhs.BlockNumberY;
            ret.BlockNumberX = item.BlockNumberX == rhs.BlockNumberX;
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified == rhs.LastModified;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string ToString(
            IWorldspaceSubBlockGetter item,
            string? name = null,
            WorldspaceSubBlock.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceSubBlockGetter item,
            FileGeneration fg,
            string? name = null,
            WorldspaceSubBlock.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"WorldspaceSubBlock =>");
            }
            else
            {
                fg.AppendLine($"{name} (WorldspaceSubBlock) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceSubBlockGetter item,
            FileGeneration fg,
            WorldspaceSubBlock.Mask<bool>? printMask = null)
        {
            if (printMask?.BlockNumberY ?? true)
            {
                fg.AppendItem(item.BlockNumberY, "BlockNumberY");
            }
            if (printMask?.BlockNumberX ?? true)
            {
                fg.AppendItem(item.BlockNumberX, "BlockNumberX");
            }
            if (printMask?.GroupType ?? true)
            {
                fg.AppendItem(item.GroupType, "GroupType");
            }
            if (printMask?.LastModified ?? true)
            {
                fg.AppendItem(item.LastModified, "LastModified");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                fg.AppendLine("Items =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.Items)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
        }
        
        public bool HasBeenSet(
            IWorldspaceSubBlockGetter item,
            WorldspaceSubBlock.Mask<bool?> checkMask)
        {
            return true;
        }
        
        public void FillHasBeenSetMask(
            IWorldspaceSubBlockGetter item,
            WorldspaceSubBlock.Mask<bool> mask)
        {
            mask.BlockNumberY = true;
            mask.BlockNumberX = true;
            mask.GroupType = true;
            mask.LastModified = true;
            var ItemsItem = item.Items;
            mask.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, Cell.Mask<bool>?>>?>(true, ItemsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, Cell.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceSubBlockGetter? lhs,
            IWorldspaceSubBlockGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.BlockNumberY != rhs.BlockNumberY) return false;
            if (lhs.BlockNumberX != rhs.BlockNumberX) return false;
            if (lhs.GroupType != rhs.GroupType) return false;
            if (lhs.LastModified != rhs.LastModified) return false;
            if (!lhs.Items.SequenceEqual(rhs.Items)) return false;
            return true;
        }
        
        public virtual int GetHashCode(IWorldspaceSubBlockGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.BlockNumberY);
            hash.Add(item.BlockNumberX);
            hash.Add(item.GroupType);
            hash.Add(item.LastModified);
            hash.Add(item.Items);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return WorldspaceSubBlock.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IWorldspaceSubBlockGetter obj)
        {
            foreach (var item in obj.Items.SelectMany(f => f.LinkFormKeys))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapLinks(IWorldspaceSubBlockGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IWorldspaceSubBlockGetter obj)
        {
            foreach (var subItem in obj.Items)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IWorldspaceSubBlockGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "IOblivionMajorRecordGetter":
                case "OblivionMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var subItem in obj.Items)
                    {
                        yield return (subItem as TMajor)!;
                        foreach (var item in subItem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class WorldspaceSubBlockSetterTranslationCommon
    {
        public static readonly WorldspaceSubBlockSetterTranslationCommon Instance = new WorldspaceSubBlockSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWorldspaceSubBlock item,
            IWorldspaceSubBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.BlockNumberY) ?? true))
            {
                item.BlockNumberY = rhs.BlockNumberY;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.BlockNumberX) ?? true))
            {
                item.BlockNumberX = rhs.BlockNumberX;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.GroupType) ?? true))
            {
                item.GroupType = rhs.GroupType;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.LastModified) ?? true))
            {
                item.LastModified = rhs.LastModified;
            }
            if ((copyMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)WorldspaceSubBlock_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            var copyRet = new Cell(r.FormKey);
                            copyRet.DeepCopyIn(
                                rhs: r,
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                            return copyRet;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        
        #endregion
        
        public WorldspaceSubBlock DeepCopy(
            IWorldspaceSubBlockGetter item,
            WorldspaceSubBlock.TranslationMask? copyMask = null)
        {
            WorldspaceSubBlock ret = (WorldspaceSubBlock)((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public WorldspaceSubBlock DeepCopy(
            IWorldspaceSubBlockGetter item,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? copyMask = null)
        {
            WorldspaceSubBlock ret = (WorldspaceSubBlock)((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public WorldspaceSubBlock DeepCopy(
            IWorldspaceSubBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WorldspaceSubBlock ret = (WorldspaceSubBlock)((WorldspaceSubBlockCommon)((IWorldspaceSubBlockGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class WorldspaceSubBlock
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceSubBlock_Registration.Instance;
        public static WorldspaceSubBlock_Registration Registration => WorldspaceSubBlock_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldspaceSubBlockCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return WorldspaceSubBlockSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldspaceSubBlockSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldspaceSubBlockGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IWorldspaceSubBlockGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IWorldspaceSubBlockGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceSubBlockXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static WorldspaceSubBlockXmlWriteTranslation Instance = new WorldspaceSubBlockXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWorldspaceSubBlockGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.BlockNumberY) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockNumberY),
                    item: item.BlockNumberY,
                    fieldIndex: (int)WorldspaceSubBlock_FieldIndex.BlockNumberY,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.BlockNumberX) ?? true))
            {
                Int16XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.BlockNumberX),
                    item: item.BlockNumberX,
                    fieldIndex: (int)WorldspaceSubBlock_FieldIndex.BlockNumberX,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.GroupType) ?? true))
            {
                EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupType),
                    item: item.GroupType,
                    fieldIndex: (int)WorldspaceSubBlock_FieldIndex.GroupType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.LastModified) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastModified),
                    item: item.LastModified,
                    fieldIndex: (int)WorldspaceSubBlock_FieldIndex.LastModified,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)WorldspaceSubBlock_FieldIndex.Items) ?? true))
            {
                ListXmlTranslation<ICellGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.Items),
                    item: item.Items,
                    fieldIndex: (int)WorldspaceSubBlock_FieldIndex.Items,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)WorldspaceSubBlock_FieldIndex.Items),
                    transl: (XElement subNode, ICellGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((CellXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
        }

        public void Write(
            XElement node,
            IWorldspaceSubBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.WorldspaceSubBlock");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.WorldspaceSubBlock");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceSubBlockGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IWorldspaceSubBlockGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IWorldspaceSubBlockGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class WorldspaceSubBlockXmlCreateTranslation
    {
        public readonly static WorldspaceSubBlockXmlCreateTranslation Instance = new WorldspaceSubBlockXmlCreateTranslation();

        public static void FillPublicXml(
            IWorldspaceSubBlock item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceSubBlockXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWorldspaceSubBlock item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "BlockNumberY":
                    errorMask?.PushIndex((int)WorldspaceSubBlock_FieldIndex.BlockNumberY);
                    try
                    {
                        item.BlockNumberY = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "BlockNumberX":
                    errorMask?.PushIndex((int)WorldspaceSubBlock_FieldIndex.BlockNumberX);
                    try
                    {
                        item.BlockNumberX = Int16XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "GroupType":
                    errorMask?.PushIndex((int)WorldspaceSubBlock_FieldIndex.GroupType);
                    try
                    {
                        item.GroupType = EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    errorMask?.PushIndex((int)WorldspaceSubBlock_FieldIndex.LastModified);
                    try
                    {
                        item.LastModified = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    errorMask?.PushIndex((int)WorldspaceSubBlock_FieldIndex.Items);
                    try
                    {
                        if (ListXmlTranslation<Cell>.Instance.Parse(
                            node: node,
                            enumer: out var ItemsItem,
                            transl: LoquiXmlTranslation<Cell>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Items.SetTo(ItemsItem);
                        }
                        else
                        {
                            item.Items.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WorldspaceSubBlockXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            XElement node,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceSubBlockXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = WorldspaceSubBlock.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            string path,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            Stream stream,
            out WorldspaceSubBlock.ErrorMask errorMask,
            WorldspaceSubBlock.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((WorldspaceSubBlockXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            XElement node,
            string? name = null,
            WorldspaceSubBlock.TranslationMask? translationMask = null)
        {
            ((WorldspaceSubBlockXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WorldspaceSubBlockXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceSubBlockGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((WorldspaceSubBlockXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceSubBlockBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static WorldspaceSubBlockBinaryWriteTranslation Instance = new WorldspaceSubBlockBinaryWriteTranslation();

        public static void WriteEmbedded(
            IWorldspaceSubBlockGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.BlockNumberY);
            writer.Write(item.BlockNumberX);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4);
            writer.Write(item.LastModified);
        }

        public static void WriteRecordTypes(
            IWorldspaceSubBlockGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<ICellGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, ICellGetter subItem, RecordTypeConverter? conv) =>
                {
                    if (subItem.TryGet(out var Item))
                    {
                        ((CellBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            recordTypeConverter: conv);
                    }
                });
        }

        public void Write(
            MutagenWriter writer,
            IWorldspaceSubBlockGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(WorldspaceSubBlock_Registration.GRUP_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Group))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceSubBlockGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WorldspaceSubBlockBinaryCreateTranslation
    {
        public readonly static WorldspaceSubBlockBinaryCreateTranslation Instance = new WorldspaceSubBlockBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WorldspaceSubBlockBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IWorldspaceSubBlockGetter item,
            MutagenWriter writer)
        {
            ((WorldspaceSubBlockBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceSubBlockBinaryOverlay :
        BinaryOverlay,
        IWorldspaceSubBlockGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WorldspaceSubBlock_Registration.Instance;
        public static WorldspaceSubBlock_Registration Registration => WorldspaceSubBlock_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => WorldspaceSubBlockCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => WorldspaceSubBlockSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IWorldspaceSubBlockGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IWorldspaceSubBlockGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IWorldspaceSubBlockGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceSubBlockGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IEnumerable<FormKey> LinkFormKeys => WorldspaceSubBlockCommon.Instance.GetLinkFormKeys(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnumerable<FormKey> ILinkedFormKeyContainer.LinkFormKeys => WorldspaceSubBlockCommon.Instance.GetLinkFormKeys(this);
        protected void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceSubBlockCommon.Instance.RemapLinks(this, mapping);
        void ILinkedFormKeyContainer.RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WorldspaceSubBlockCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => WorldspaceSubBlockXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceSubBlockXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => WorldspaceSubBlockBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceSubBlockBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public Int16 BlockNumberY => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x0, 0x2));
        public Int16 BlockNumberX => BinaryPrimitives.ReadInt16LittleEndian(_data.Slice(0x2, 0x2));
        public GroupTypeEnum GroupType => (GroupTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x4, 0x4));
        public Int32 LastModified => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        #region Items
        partial void ItemsCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            int? lastParsed);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected WorldspaceSubBlockBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WorldspaceSubBlockBinaryOverlay WorldspaceSubBlockFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new WorldspaceSubBlockBinaryOverlay(
                bytes: HeaderTranslation.ExtractGroupMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.Group(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.GroupConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.GroupConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillMajorRecords(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static WorldspaceSubBlockBinaryOverlay WorldspaceSubBlockFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return WorldspaceSubBlockFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C4543: // CELL
                {
                    ItemsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return TryGet<int?>.Succeed((int)WorldspaceSubBlock_FieldIndex.Items);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceSubBlockMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

