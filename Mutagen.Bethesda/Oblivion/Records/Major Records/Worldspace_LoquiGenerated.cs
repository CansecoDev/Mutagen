/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Worldspace :
        Place,
        IWorldspaceInternal,
        ILoquiObjectSetter<Worldspace>,
        INamed,
        IPlace,
        IEquatable<Worldspace>,
        IEqualsMask
    {
        #region Ctor
        protected Worldspace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Name;
        public String? Name
        {
            get => this._Name;
            set => this._Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.Name => this.Name;
        #endregion
        #region Parent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Worldspace> _Parent = new FormLinkNullable<Worldspace>();
        public IFormLinkNullable<Worldspace> Parent => this._Parent;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWorldspaceGetter> IWorldspaceGetter.Parent => this.Parent;
        #endregion
        #region Climate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Climate> _Climate = new FormLinkNullable<Climate>();
        public IFormLinkNullable<Climate> Climate => this._Climate;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClimateGetter> IWorldspaceGetter.Climate => this.Climate;
        #endregion
        #region Water
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected IFormLinkNullable<Water> _Water = new FormLinkNullable<Water>();
        public IFormLinkNullable<Water> Water => this._Water;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> IWorldspaceGetter.Water => this.Water;
        #endregion
        #region Icon
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private String? _Icon;
        public String? Icon
        {
            get => this._Icon;
            set => this._Icon = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWorldspaceGetter.Icon => this.Icon;
        #endregion
        #region MapData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MapData? _MapData;
        public MapData? MapData
        {
            get => _MapData;
            set => _MapData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapDataGetter? IWorldspaceGetter.MapData => this.MapData;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Worldspace.Flag? _Flags;
        public Worldspace.Flag? Flags
        {
            get => this._Flags;
            set => this._Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Worldspace.Flag? IWorldspaceGetter.Flags => this.Flags;
        #endregion
        #region ObjectBoundsMin
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P2Float? _ObjectBoundsMin;
        public P2Float? ObjectBoundsMin
        {
            get => this._ObjectBoundsMin;
            set => this._ObjectBoundsMin = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Float? IWorldspaceGetter.ObjectBoundsMin => this.ObjectBoundsMin;
        #endregion
        #region ObjectBoundsMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private P2Float? _ObjectBoundsMax;
        public P2Float? ObjectBoundsMax
        {
            get => this._ObjectBoundsMax;
            set => this._ObjectBoundsMax = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Float? IWorldspaceGetter.ObjectBoundsMax => this.ObjectBoundsMax;
        #endregion
        #region Music
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MusicType? _Music;
        public MusicType? Music
        {
            get => this._Music;
            set => this._Music = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MusicType? IWorldspaceGetter.Music => this.Music;
        #endregion
        #region OffsetData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _OffsetData;
        public Byte[]? OffsetData
        {
            get => this._OffsetData;
            set => this._OffsetData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWorldspaceGetter.OffsetData => this.OffsetData;
        #endregion
        #region Road
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Road? _Road;
        public Road? Road
        {
            get => _Road;
            set => _Road = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRoadGetter? IWorldspaceGetter.Road => this.Road;
        #endregion
        #region TopCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Cell? _TopCell;
        public Cell? TopCell
        {
            get => _TopCell;
            set => _TopCell = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellGetter? IWorldspaceGetter.TopCell => this.TopCell;
        #endregion
        #region SubCellsTimestamp
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Byte[] _SubCellsTimestamp = new byte[4];
        public Byte[] SubCellsTimestamp
        {
            get => _SubCellsTimestamp;
            set => this._SubCellsTimestamp = value ?? new byte[4];
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IWorldspaceGetter.SubCellsTimestamp => this.SubCellsTimestamp;
        #endregion
        #region SubCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WorldspaceBlock>? _SubCells;
        public ExtendedList<WorldspaceBlock>? SubCells
        {
            get => this._SubCells;
            set => this._SubCells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWorldspaceBlockGetter>? IWorldspaceGetter.SubCells => _SubCells;
        #endregion

        #endregion
        #region UsingOffsetLength
        public Boolean UsingOffsetLength { get; set; } = default;
        #endregion

        #region To String

        public override void ToString(
            FileGeneration fg,
            string? name = null)
        {
            WorldspaceMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IWorldspaceGetter rhs)) return false;
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(Worldspace obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((WorldspaceCommon)((IWorldspaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WorldspaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static new Worldspace CreateFromXml(
            XElement node,
            Worldspace.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Worldspace CreateFromXml(
            XElement node,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public new static Worldspace CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new Worldspace();
            ((WorldspaceSetterCommon)((IWorldspaceGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static Worldspace CreateFromXml(
            string path,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Worldspace CreateFromXml(
            string path,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Worldspace CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Worldspace CreateFromXml(
            Stream stream,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static Worldspace CreateFromXml(
            Stream stream,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Worldspace CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Place.Mask<TItem>,
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Parent = initialValue;
                this.Climate = initialValue;
                this.Water = initialValue;
                this.Icon = initialValue;
                this.MapData = new MaskItem<TItem, MapData.Mask<TItem>?>(initialValue, new MapData.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.ObjectBoundsMin = initialValue;
                this.ObjectBoundsMax = initialValue;
                this.Music = initialValue;
                this.OffsetData = initialValue;
                this.Road = new MaskItem<TItem, Road.Mask<TItem>?>(initialValue, new Road.Mask<TItem>(initialValue));
                this.TopCell = new MaskItem<TItem, Cell.Mask<TItem>?>(initialValue, new Cell.Mask<TItem>(initialValue));
                this.SubCellsTimestamp = initialValue;
                this.SubCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>());
                this.UsingOffsetLength = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem Version,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Parent,
                TItem Climate,
                TItem Water,
                TItem Icon,
                TItem MapData,
                TItem Flags,
                TItem ObjectBoundsMin,
                TItem ObjectBoundsMax,
                TItem Music,
                TItem OffsetData,
                TItem Road,
                TItem TopCell,
                TItem SubCellsTimestamp,
                TItem SubCells,
                TItem UsingOffsetLength)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                Version: Version,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Parent = Parent;
                this.Climate = Climate;
                this.Water = Water;
                this.Icon = Icon;
                this.MapData = new MaskItem<TItem, MapData.Mask<TItem>?>(MapData, new MapData.Mask<TItem>(MapData));
                this.Flags = Flags;
                this.ObjectBoundsMin = ObjectBoundsMin;
                this.ObjectBoundsMax = ObjectBoundsMax;
                this.Music = Music;
                this.OffsetData = OffsetData;
                this.Road = new MaskItem<TItem, Road.Mask<TItem>?>(Road, new Road.Mask<TItem>(Road));
                this.TopCell = new MaskItem<TItem, Cell.Mask<TItem>?>(TopCell, new Cell.Mask<TItem>(TopCell));
                this.SubCellsTimestamp = SubCellsTimestamp;
                this.SubCells = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>(SubCells, Enumerable.Empty<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>());
                this.UsingOffsetLength = UsingOffsetLength;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Parent;
            public TItem Climate;
            public TItem Water;
            public TItem Icon;
            public MaskItem<TItem, MapData.Mask<TItem>?>? MapData { get; set; }
            public TItem Flags;
            public TItem ObjectBoundsMin;
            public TItem ObjectBoundsMax;
            public TItem Music;
            public TItem OffsetData;
            public MaskItem<TItem, Road.Mask<TItem>?>? Road { get; set; }
            public MaskItem<TItem, Cell.Mask<TItem>?>? TopCell { get; set; }
            public TItem SubCellsTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WorldspaceBlock.Mask<TItem>?>>?>? SubCells;
            public TItem UsingOffsetLength;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.MapData, rhs.MapData)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ObjectBoundsMin, rhs.ObjectBoundsMin)) return false;
                if (!object.Equals(this.ObjectBoundsMax, rhs.ObjectBoundsMax)) return false;
                if (!object.Equals(this.Music, rhs.Music)) return false;
                if (!object.Equals(this.OffsetData, rhs.OffsetData)) return false;
                if (!object.Equals(this.Road, rhs.Road)) return false;
                if (!object.Equals(this.TopCell, rhs.TopCell)) return false;
                if (!object.Equals(this.SubCellsTimestamp, rhs.SubCellsTimestamp)) return false;
                if (!object.Equals(this.SubCells, rhs.SubCells)) return false;
                if (!object.Equals(this.UsingOffsetLength, rhs.UsingOffsetLength)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Parent);
                hash.Add(this.Climate);
                hash.Add(this.Water);
                hash.Add(this.Icon);
                hash.Add(this.MapData);
                hash.Add(this.Flags);
                hash.Add(this.ObjectBoundsMin);
                hash.Add(this.ObjectBoundsMax);
                hash.Add(this.Music);
                hash.Add(this.OffsetData);
                hash.Add(this.Road);
                hash.Add(this.TopCell);
                hash.Add(this.SubCellsTimestamp);
                hash.Add(this.SubCells);
                hash.Add(this.UsingOffsetLength);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.Climate)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.Icon)) return false;
                if (MapData != null)
                {
                    if (!eval(this.MapData.Overall)) return false;
                    if (this.MapData.Specific != null && !this.MapData.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ObjectBoundsMin)) return false;
                if (!eval(this.ObjectBoundsMax)) return false;
                if (!eval(this.Music)) return false;
                if (!eval(this.OffsetData)) return false;
                if (Road != null)
                {
                    if (!eval(this.Road.Overall)) return false;
                    if (this.Road.Specific != null && !this.Road.Specific.All(eval)) return false;
                }
                if (TopCell != null)
                {
                    if (!eval(this.TopCell.Overall)) return false;
                    if (this.TopCell.Specific != null && !this.TopCell.Specific.All(eval)) return false;
                }
                if (!eval(this.SubCellsTimestamp)) return false;
                if (this.SubCells != null)
                {
                    if (!eval(this.SubCells.Overall)) return false;
                    if (this.SubCells.Specific != null)
                    {
                        foreach (var item in this.SubCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.UsingOffsetLength)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.Climate)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.Icon)) return true;
                if (MapData != null)
                {
                    if (eval(this.MapData.Overall)) return true;
                    if (this.MapData.Specific != null && this.MapData.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ObjectBoundsMin)) return true;
                if (eval(this.ObjectBoundsMax)) return true;
                if (eval(this.Music)) return true;
                if (eval(this.OffsetData)) return true;
                if (Road != null)
                {
                    if (eval(this.Road.Overall)) return true;
                    if (this.Road.Specific != null && this.Road.Specific.Any(eval)) return true;
                }
                if (TopCell != null)
                {
                    if (eval(this.TopCell.Overall)) return true;
                    if (this.TopCell.Specific != null && this.TopCell.Specific.Any(eval)) return true;
                }
                if (eval(this.SubCellsTimestamp)) return true;
                if (this.SubCells != null)
                {
                    if (eval(this.SubCells.Overall)) return true;
                    if (this.SubCells.Specific != null)
                    {
                        foreach (var item in this.SubCells.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.UsingOffsetLength)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Worldspace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Parent = eval(this.Parent);
                obj.Climate = eval(this.Climate);
                obj.Water = eval(this.Water);
                obj.Icon = eval(this.Icon);
                obj.MapData = this.MapData == null ? null : new MaskItem<R, MapData.Mask<R>?>(eval(this.MapData.Overall), this.MapData.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.ObjectBoundsMin = eval(this.ObjectBoundsMin);
                obj.ObjectBoundsMax = eval(this.ObjectBoundsMax);
                obj.Music = eval(this.Music);
                obj.OffsetData = eval(this.OffsetData);
                obj.Road = this.Road == null ? null : new MaskItem<R, Road.Mask<R>?>(eval(this.Road.Overall), this.Road.Specific?.Translate(eval));
                obj.TopCell = this.TopCell == null ? null : new MaskItem<R, Cell.Mask<R>?>(eval(this.TopCell.Overall), this.TopCell.Specific?.Translate(eval));
                obj.SubCellsTimestamp = eval(this.SubCellsTimestamp);
                if (SubCells != null)
                {
                    obj.SubCells = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>?>(eval(this.SubCells.Overall), Enumerable.Empty<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>());
                    if (SubCells.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>>();
                        obj.SubCells.Specific = l;
                        foreach (var item in SubCells.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, WorldspaceBlock.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.UsingOffsetLength = eval(this.UsingOffsetLength);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(Worldspace.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, Worldspace.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(Worldspace.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Name ?? true)
                    {
                        fg.AppendItem(Name, "Name");
                    }
                    if (printMask?.Parent ?? true)
                    {
                        fg.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.Climate ?? true)
                    {
                        fg.AppendItem(Climate, "Climate");
                    }
                    if (printMask?.Water ?? true)
                    {
                        fg.AppendItem(Water, "Water");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        fg.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.MapData?.Overall ?? true)
                    {
                        MapData?.ToString(fg);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ObjectBoundsMin ?? true)
                    {
                        fg.AppendItem(ObjectBoundsMin, "ObjectBoundsMin");
                    }
                    if (printMask?.ObjectBoundsMax ?? true)
                    {
                        fg.AppendItem(ObjectBoundsMax, "ObjectBoundsMax");
                    }
                    if (printMask?.Music ?? true)
                    {
                        fg.AppendItem(Music, "Music");
                    }
                    if (printMask?.OffsetData ?? true)
                    {
                        fg.AppendItem(OffsetData, "OffsetData");
                    }
                    if (printMask?.Road?.Overall ?? true)
                    {
                        Road?.ToString(fg);
                    }
                    if (printMask?.TopCell?.Overall ?? true)
                    {
                        TopCell?.ToString(fg);
                    }
                    if (printMask?.SubCellsTimestamp ?? true)
                    {
                        fg.AppendItem(SubCellsTimestamp, "SubCellsTimestamp");
                    }
                    if ((printMask?.SubCells?.Overall ?? true)
                        && SubCells.TryGet(out var SubCellsItem))
                    {
                        fg.AppendLine("SubCells =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(SubCellsItem.Overall);
                            if (SubCellsItem.Specific != null)
                            {
                                foreach (var subItem in SubCellsItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.UsingOffsetLength ?? true)
                    {
                        fg.AppendItem(UsingOffsetLength, "UsingOffsetLength");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public new class ErrorMask :
            Place.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Parent;
            public Exception? Climate;
            public Exception? Water;
            public Exception? Icon;
            public MaskItem<Exception?, MapData.ErrorMask?>? MapData;
            public Exception? Flags;
            public Exception? ObjectBoundsMin;
            public Exception? ObjectBoundsMax;
            public Exception? Music;
            public Exception? OffsetData;
            public MaskItem<Exception?, Road.ErrorMask?>? Road;
            public MaskItem<Exception?, Cell.ErrorMask?>? TopCell;
            public Exception? SubCellsTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>? SubCells;
            public Exception? UsingOffsetLength;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.Name:
                        return Name;
                    case Worldspace_FieldIndex.Parent:
                        return Parent;
                    case Worldspace_FieldIndex.Climate:
                        return Climate;
                    case Worldspace_FieldIndex.Water:
                        return Water;
                    case Worldspace_FieldIndex.Icon:
                        return Icon;
                    case Worldspace_FieldIndex.MapData:
                        return MapData;
                    case Worldspace_FieldIndex.Flags:
                        return Flags;
                    case Worldspace_FieldIndex.ObjectBoundsMin:
                        return ObjectBoundsMin;
                    case Worldspace_FieldIndex.ObjectBoundsMax:
                        return ObjectBoundsMax;
                    case Worldspace_FieldIndex.Music:
                        return Music;
                    case Worldspace_FieldIndex.OffsetData:
                        return OffsetData;
                    case Worldspace_FieldIndex.Road:
                        return Road;
                    case Worldspace_FieldIndex.TopCell:
                        return TopCell;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        return SubCellsTimestamp;
                    case Worldspace_FieldIndex.SubCells:
                        return SubCells;
                    case Worldspace_FieldIndex.UsingOffsetLength:
                        return UsingOffsetLength;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Worldspace_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case Worldspace_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Worldspace_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Worldspace_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Worldspace_FieldIndex.MapData:
                        this.MapData = new MaskItem<Exception?, MapData.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMin:
                        this.ObjectBoundsMin = ex;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMax:
                        this.ObjectBoundsMax = ex;
                        break;
                    case Worldspace_FieldIndex.Music:
                        this.Music = ex;
                        break;
                    case Worldspace_FieldIndex.OffsetData:
                        this.OffsetData = ex;
                        break;
                    case Worldspace_FieldIndex.Road:
                        this.Road = new MaskItem<Exception?, Road.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.TopCell:
                        this.TopCell = new MaskItem<Exception?, Cell.ErrorMask?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        this.SubCellsTimestamp = ex;
                        break;
                    case Worldspace_FieldIndex.SubCells:
                        this.SubCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>(ex, null);
                        break;
                    case Worldspace_FieldIndex.UsingOffsetLength:
                        this.UsingOffsetLength = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
                switch (enu)
                {
                    case Worldspace_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Climate:
                        this.Climate = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.MapData:
                        this.MapData = (MaskItem<Exception?, MapData.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMin:
                        this.ObjectBoundsMin = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.ObjectBoundsMax:
                        this.ObjectBoundsMax = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Music:
                        this.Music = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.OffsetData:
                        this.OffsetData = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.Road:
                        this.Road = (MaskItem<Exception?, Road.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.TopCell:
                        this.TopCell = (MaskItem<Exception?, Cell.ErrorMask?>?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCellsTimestamp:
                        this.SubCellsTimestamp = (Exception?)obj;
                        break;
                    case Worldspace_FieldIndex.SubCells:
                        this.SubCells = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>)obj;
                        break;
                    case Worldspace_FieldIndex.UsingOffsetLength:
                        this.UsingOffsetLength = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Parent != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (Icon != null) return true;
                if (MapData != null) return true;
                if (Flags != null) return true;
                if (ObjectBoundsMin != null) return true;
                if (ObjectBoundsMax != null) return true;
                if (Music != null) return true;
                if (OffsetData != null) return true;
                if (Road != null) return true;
                if (TopCell != null) return true;
                if (SubCellsTimestamp != null) return true;
                if (SubCells != null) return true;
                if (UsingOffsetLength != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public override void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected override void ToString_FillInternal(FileGeneration fg)
            {
                base.ToString_FillInternal(fg);
                fg.AppendItem(Name, "Name");
                fg.AppendItem(Parent, "Parent");
                fg.AppendItem(Climate, "Climate");
                fg.AppendItem(Water, "Water");
                fg.AppendItem(Icon, "Icon");
                MapData?.ToString(fg);
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(ObjectBoundsMin, "ObjectBoundsMin");
                fg.AppendItem(ObjectBoundsMax, "ObjectBoundsMax");
                fg.AppendItem(Music, "Music");
                fg.AppendItem(OffsetData, "OffsetData");
                Road?.ToString(fg);
                TopCell?.ToString(fg);
                fg.AppendItem(SubCellsTimestamp, "SubCellsTimestamp");
                if (SubCells.TryGet(out var SubCellsItem))
                {
                    fg.AppendLine("SubCells =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(SubCellsItem.Overall);
                        if (SubCellsItem.Specific != null)
                        {
                            foreach (var subItem in SubCellsItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(UsingOffsetLength, "UsingOffsetLength");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.MapData = this.MapData.Combine(rhs.MapData, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ObjectBoundsMin = this.ObjectBoundsMin.Combine(rhs.ObjectBoundsMin);
                ret.ObjectBoundsMax = this.ObjectBoundsMax.Combine(rhs.ObjectBoundsMax);
                ret.Music = this.Music.Combine(rhs.Music);
                ret.OffsetData = this.OffsetData.Combine(rhs.OffsetData);
                ret.Road = this.Road.Combine(rhs.Road, (l, r) => l.Combine(r));
                ret.TopCell = this.TopCell.Combine(rhs.TopCell, (l, r) => l.Combine(r));
                ret.SubCellsTimestamp = this.SubCellsTimestamp.Combine(rhs.SubCellsTimestamp);
                ret.SubCells = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WorldspaceBlock.ErrorMask?>>?>(ExceptionExt.Combine(this.SubCells?.Overall, rhs.SubCells?.Overall), ExceptionExt.Combine(this.SubCells?.Specific, rhs.SubCells?.Specific));
                ret.UsingOffsetLength = this.UsingOffsetLength.Combine(rhs.UsingOffsetLength);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Place.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Parent;
            public bool Climate;
            public bool Water;
            public bool Icon;
            public MaskItem<bool, MapData.TranslationMask?> MapData;
            public bool Flags;
            public bool ObjectBoundsMin;
            public bool ObjectBoundsMax;
            public bool Music;
            public bool OffsetData;
            public MaskItem<bool, Road.TranslationMask?> Road;
            public MaskItem<bool, Cell.TranslationMask?> TopCell;
            public bool SubCellsTimestamp;
            public MaskItem<bool, WorldspaceBlock.TranslationMask?> SubCells;
            public bool UsingOffsetLength;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
                : base(defaultOn)
            {
                this.Name = defaultOn;
                this.Parent = defaultOn;
                this.Climate = defaultOn;
                this.Water = defaultOn;
                this.Icon = defaultOn;
                this.MapData = new MaskItem<bool, MapData.TranslationMask?>(defaultOn, null);
                this.Flags = defaultOn;
                this.ObjectBoundsMin = defaultOn;
                this.ObjectBoundsMax = defaultOn;
                this.Music = defaultOn;
                this.OffsetData = defaultOn;
                this.Road = new MaskItem<bool, Road.TranslationMask?>(defaultOn, null);
                this.TopCell = new MaskItem<bool, Cell.TranslationMask?>(defaultOn, null);
                this.SubCellsTimestamp = defaultOn;
                this.SubCells = new MaskItem<bool, WorldspaceBlock.TranslationMask?>(defaultOn, null);
                this.UsingOffsetLength = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Parent, null));
                ret.Add((Climate, null));
                ret.Add((Water, null));
                ret.Add((Icon, null));
                ret.Add((MapData?.Overall ?? true, MapData?.Specific?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((ObjectBoundsMin, null));
                ret.Add((ObjectBoundsMax, null));
                ret.Add((Music, null));
                ret.Add((OffsetData, null));
                ret.Add((Road?.Overall ?? true, Road?.Specific?.GetCrystal()));
                ret.Add((TopCell?.Overall ?? true, TopCell?.Specific?.GetCrystal()));
                ret.Add((SubCellsTimestamp, null));
                ret.Add((SubCells?.Overall ?? true, SubCells?.Specific?.GetCrystal()));
                ret.Add((UsingOffsetLength, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = Worldspace_Registration.TriggeringRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IEnumerable<ILinkGetter> Links => WorldspaceCommon.Instance.GetLinks(this);
        public Worldspace(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Worldspace(IMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Worldspace(IMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommon> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static new async Task<Worldspace> CreateFromBinary(MutagenFrame frame)
        {
            return await CreateFromBinary(
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public new static async Task<Worldspace> CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new Worldspace();
            await ((WorldspaceSetterCommon)((IWorldspaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceGetter)rhs, include);

        void IClearable.Clear()
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Worldspace GetNew()
        {
            return new Worldspace();
        }

    }
    #endregion

    #region Interface
    public partial interface IWorldspace :
        IWorldspaceGetter,
        IPlace,
        IMajorRecordEnumerable,
        ILoquiObjectSetter<IWorldspaceInternal>
    {
        new String? Name { get; set; }
        new IFormLinkNullable<Worldspace> Parent { get; }
        new IFormLinkNullable<Climate> Climate { get; }
        new IFormLinkNullable<Water> Water { get; }
        new String? Icon { get; set; }
        new MapData? MapData { get; set; }
        new Worldspace.Flag? Flags { get; set; }
        new P2Float? ObjectBoundsMin { get; set; }
        new P2Float? ObjectBoundsMax { get; set; }
        new MusicType? Music { get; set; }
        new Byte[]? OffsetData { get; set; }
        new Road? Road { get; set; }
        new Cell? TopCell { get; set; }
        new Byte[] SubCellsTimestamp { get; set; }
        new ExtendedList<WorldspaceBlock>? SubCells { get; set; }
        new Boolean UsingOffsetLength { get; set; }
    }

    public partial interface IWorldspaceInternal :
        IPlaceInternal,
        IWorldspace,
        IWorldspaceGetter
    {
    }

    public partial interface IWorldspaceGetter :
        IPlaceGetter,
        IMajorRecordGetterEnumerable,
        ILoquiObject<IWorldspaceGetter>,
        IXmlItem,
        ILinkContainer,
        IBinaryItem
    {
        String? Name { get; }
        IFormLinkNullableGetter<IWorldspaceGetter> Parent { get; }
        IFormLinkNullableGetter<IClimateGetter> Climate { get; }
        IFormLinkNullableGetter<IWaterGetter> Water { get; }
        String? Icon { get; }
        IMapDataGetter? MapData { get; }
        Worldspace.Flag? Flags { get; }
        P2Float? ObjectBoundsMin { get; }
        P2Float? ObjectBoundsMax { get; }
        MusicType? Music { get; }
        ReadOnlyMemorySlice<Byte>? OffsetData { get; }
        IRoadGetter? Road { get; }
        ICellGetter? TopCell { get; }
        ReadOnlyMemorySlice<Byte> SubCellsTimestamp { get; }
        IReadOnlyList<IWorldspaceBlockGetter>? SubCells { get; }
        Boolean UsingOffsetLength { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WorldspaceMixIn
    {
        public static void Clear(this IWorldspaceInternal item)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Worldspace.Mask<bool> GetEqualsMask(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IWorldspaceGetter item,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IWorldspaceGetter item,
            FileGeneration fg,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IWorldspaceGetter item,
            Worldspace.Mask<bool?> checkMask)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static Worldspace.Mask<bool> GetHasBeenSetMask(this IWorldspaceGetter item)
        {
            var ret = new Worldspace.Mask<bool>(false);
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IWorldspaceGetter item,
            IWorldspaceGetter rhs)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IWorldspaceInternal lhs,
            IWorldspaceGetter rhs,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWorldspaceInternal lhs,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Worldspace DeepCopy(
            this IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WorldspaceSetterTranslationCommon)((IWorldspaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            XElement node,
            Worldspace.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            XElement node,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            string path,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            string path,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            string path,
            ErrorMaskBuilder? errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            Stream stream,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            Stream stream,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IWorldspaceInternal item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            Worldspace.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(this IWorldspaceGetter obj)
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IWorldspaceGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            return ((WorldspaceCommon)((IWorldspaceGetter)obj).CommonInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(this IWorldspaceInternal obj)
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IWorldspaceInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            return ((WorldspaceSetterCommon)((IWorldspaceGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords<TMajor>(obj: obj);
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static async Task CopyInFromBinary(
            this IWorldspaceInternal item,
            MutagenFrame frame)
        {
            await CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null).ConfigureAwait(false);
        }

        public static async Task CopyInFromBinary(
            this IWorldspaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            await ((WorldspaceSetterCommon)((IWorldspaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum Worldspace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        Version = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Parent = 6,
        Climate = 7,
        Water = 8,
        Icon = 9,
        MapData = 10,
        Flags = 11,
        ObjectBoundsMin = 12,
        ObjectBoundsMax = 13,
        Music = 14,
        OffsetData = 15,
        Road = 16,
        TopCell = 17,
        SubCellsTimestamp = 18,
        SubCells = 19,
        UsingOffsetLength = 20,
    }
    #endregion

    #region Registration
    public partial class Worldspace_Registration : ILoquiRegistration
    {
        public static readonly Worldspace_Registration Instance = new Worldspace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 75,
            version: 0);

        public const string GUID = "d95e86a2-5fdd-4bb1-a2b9-c16161ef2f62";

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(Worldspace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Worldspace.ErrorMask);

        public static readonly Type ClassType = typeof(Worldspace);

        public static readonly Type GetterType = typeof(IWorldspaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWorldspace);

        public static readonly Type? InternalSetterType = typeof(IWorldspaceInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Worldspace";

        public const string Name = "Worldspace";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Worldspace_FieldIndex.Name;
                case "PARENT":
                    return (ushort)Worldspace_FieldIndex.Parent;
                case "CLIMATE":
                    return (ushort)Worldspace_FieldIndex.Climate;
                case "WATER":
                    return (ushort)Worldspace_FieldIndex.Water;
                case "ICON":
                    return (ushort)Worldspace_FieldIndex.Icon;
                case "MAPDATA":
                    return (ushort)Worldspace_FieldIndex.MapData;
                case "FLAGS":
                    return (ushort)Worldspace_FieldIndex.Flags;
                case "OBJECTBOUNDSMIN":
                    return (ushort)Worldspace_FieldIndex.ObjectBoundsMin;
                case "OBJECTBOUNDSMAX":
                    return (ushort)Worldspace_FieldIndex.ObjectBoundsMax;
                case "MUSIC":
                    return (ushort)Worldspace_FieldIndex.Music;
                case "OFFSETDATA":
                    return (ushort)Worldspace_FieldIndex.OffsetData;
                case "ROAD":
                    return (ushort)Worldspace_FieldIndex.Road;
                case "TOPCELL":
                    return (ushort)Worldspace_FieldIndex.TopCell;
                case "SUBCELLSTIMESTAMP":
                    return (ushort)Worldspace_FieldIndex.SubCellsTimestamp;
                case "SUBCELLS":
                    return (ushort)Worldspace_FieldIndex.SubCells;
                case "USINGOFFSETLENGTH":
                    return (ushort)Worldspace_FieldIndex.UsingOffsetLength;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.SubCells:
                    return true;
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return false;
                default:
                    return Place_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCells:
                    return true;
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return false;
                default:
                    return Place_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.SubCells:
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return false;
                default:
                    return Place_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    return "Name";
                case Worldspace_FieldIndex.Parent:
                    return "Parent";
                case Worldspace_FieldIndex.Climate:
                    return "Climate";
                case Worldspace_FieldIndex.Water:
                    return "Water";
                case Worldspace_FieldIndex.Icon:
                    return "Icon";
                case Worldspace_FieldIndex.MapData:
                    return "MapData";
                case Worldspace_FieldIndex.Flags:
                    return "Flags";
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return "ObjectBoundsMin";
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return "ObjectBoundsMax";
                case Worldspace_FieldIndex.Music:
                    return "Music";
                case Worldspace_FieldIndex.OffsetData:
                    return "OffsetData";
                case Worldspace_FieldIndex.Road:
                    return "Road";
                case Worldspace_FieldIndex.TopCell:
                    return "TopCell";
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return "SubCellsTimestamp";
                case Worldspace_FieldIndex.SubCells:
                    return "SubCells";
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return "UsingOffsetLength";
                default:
                    return Place_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.SubCells:
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return false;
                default:
                    return Place_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                case Worldspace_FieldIndex.Parent:
                case Worldspace_FieldIndex.Climate:
                case Worldspace_FieldIndex.Water:
                case Worldspace_FieldIndex.Icon:
                case Worldspace_FieldIndex.MapData:
                case Worldspace_FieldIndex.Flags:
                case Worldspace_FieldIndex.ObjectBoundsMin:
                case Worldspace_FieldIndex.ObjectBoundsMax:
                case Worldspace_FieldIndex.Music:
                case Worldspace_FieldIndex.OffsetData:
                case Worldspace_FieldIndex.Road:
                case Worldspace_FieldIndex.TopCell:
                case Worldspace_FieldIndex.SubCellsTimestamp:
                case Worldspace_FieldIndex.SubCells:
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return false;
                default:
                    return Place_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            Worldspace_FieldIndex enu = (Worldspace_FieldIndex)index;
            switch (enu)
            {
                case Worldspace_FieldIndex.Name:
                    return typeof(String);
                case Worldspace_FieldIndex.Parent:
                    return typeof(IFormLinkNullable<Worldspace>);
                case Worldspace_FieldIndex.Climate:
                    return typeof(IFormLinkNullable<Climate>);
                case Worldspace_FieldIndex.Water:
                    return typeof(IFormLinkNullable<Water>);
                case Worldspace_FieldIndex.Icon:
                    return typeof(String);
                case Worldspace_FieldIndex.MapData:
                    return typeof(MapData);
                case Worldspace_FieldIndex.Flags:
                    return typeof(Worldspace.Flag);
                case Worldspace_FieldIndex.ObjectBoundsMin:
                    return typeof(P2Float);
                case Worldspace_FieldIndex.ObjectBoundsMax:
                    return typeof(P2Float);
                case Worldspace_FieldIndex.Music:
                    return typeof(MusicType);
                case Worldspace_FieldIndex.OffsetData:
                    return typeof(Byte[]);
                case Worldspace_FieldIndex.Road:
                    return typeof(Road);
                case Worldspace_FieldIndex.TopCell:
                    return typeof(Cell);
                case Worldspace_FieldIndex.SubCellsTimestamp:
                    return typeof(Byte[]);
                case Worldspace_FieldIndex.SubCells:
                    return typeof(ExtendedList<WorldspaceBlock>);
                case Worldspace_FieldIndex.UsingOffsetLength:
                    return typeof(Boolean);
                default:
                    return Place_Registration.GetNthType(index);
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(WorldspaceXmlWriteTranslation);
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType WNAM_HEADER = new RecordType("WNAM");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType NAM2_HEADER = new RecordType("NAM2");
        public static readonly RecordType ICON_HEADER = new RecordType("ICON");
        public static readonly RecordType MNAM_HEADER = new RecordType("MNAM");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType NAM0_HEADER = new RecordType("NAM0");
        public static readonly RecordType NAM9_HEADER = new RecordType("NAM9");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType XXXX_HEADER = new RecordType("XXXX");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TriggeringRecordType = WRLD_HEADER;
        public const int NumStructFields = 0;
        public const int NumTypedFields = 14;
        public static readonly Type BinaryWriteTranslation = typeof(WorldspaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class WorldspaceSetterCommon : PlaceSetterCommon
    {
        public new static readonly WorldspaceSetterCommon Instance = new WorldspaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWorldspaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Parent.FormKey = null;
            item.Climate.FormKey = null;
            item.Water.FormKey = null;
            item.Icon = default;
            item.MapData = null;
            item.Flags = default;
            item.ObjectBoundsMin = default;
            item.ObjectBoundsMax = default;
            item.Music = default;
            item.OffsetData = default;
            item.Road = null;
            item.TopCell = null;
            item.SubCellsTimestamp = new byte[4];
            item.SubCells = null;
            item.UsingOffsetLength = default;
            base.Clear(item);
        }
        
        public override void Clear(IPlaceInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWorldspaceInternal)item);
        }
        
        #region Xml Translation
        protected static void FillPrivateElementXml(
            IWorldspaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                default:
                    PlaceSetterCommon.FillPrivateElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }
        
        public void CopyInFromXml(
            IWorldspaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    WorldspaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Mutagen
        public IEnumerable<IMajorRecordCommon> EnumerateMajorRecords(IWorldspaceInternal obj)
        {
            foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecordCommon)!;
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IWorldspaceInternal obj)
            where TMajor : class, IMajorRecordCommon
        {
            foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecords<TMajor>(obj))
            {
                yield return (item as TMajor)!;
            }
        }
        
        #endregion
        
        #region Binary Translation
        public override RecordType RecordType => Worldspace_Registration.WRLD_HEADER;
        protected static void FillBinaryStructs(
            IWorldspaceInternal item,
            MutagenFrame frame)
        {
            PlaceSetterCommon.FillBinaryStructs(
                item: item,
                frame: frame);
        }
        
        protected static async Task<TryGet<int?>> FillBinaryRecordTypes(
            IWorldspaceInternal item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Name = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Name);
                }
                case 0x4D414E57: // WNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Parent.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Parent);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Climate.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Climate);
                }
                case 0x324D414E: // NAM2
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Water.FormKey = Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        defaultVal: FormKey.Null);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Water);
                }
                case 0x4E4F4349: // ICON
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Icon = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Icon);
                }
                case 0x4D414E4D: // MNAM
                {
                    item.MapData = Mutagen.Bethesda.Oblivion.MapData.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.MapData);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Worldspace.Flag>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Flags);
                }
                case 0x304D414E: // NAM0
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ObjectBoundsMin = Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.ObjectBoundsMin);
                }
                case 0x394D414E: // NAM9
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.ObjectBoundsMax = Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.ObjectBoundsMax);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.SubConstants.HeaderLength;
                    item.Music = EnumBinaryTranslation<MusicType>.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Music);
                }
                case 0x58585858: // XXXX
                {
                    WorldspaceBinaryCreateTranslation.FillBinaryOffsetLengthCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x5453464F: // OFST
                {
                    WorldspaceBinaryCreateTranslation.FillBinaryOffsetDataCustomPublic(
                        frame: frame.SpawnWithLength(frame.MetaData.SubConstants.HeaderLength + contentLength),
                        item: item);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.OffsetData);
                }
                default:
                    return PlaceSetterCommon.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        recordTypeConverter: recordTypeConverter);
            }
        }
        
        public async Task CopyInFromBinary(
            IWorldspaceInternal item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            await UtilityAsyncTranslation.MajorRecordParse<IWorldspaceInternal>(
                record: item,
                frame: frame,
                recType: RecordType,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
            await WorldspaceBinaryCreateTranslation.CustomBinaryEndImport(
                frame: frame,
                obj: item);
        }
        
        #endregion
        
    }
    public partial class WorldspaceCommon : PlaceCommon
    {
        public new static readonly WorldspaceCommon Instance = new WorldspaceCommon();

        public Worldspace.Mask<bool> GetEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Worldspace.Mask<bool>(false);
            ((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWorldspaceGetter item,
            IWorldspaceGetter rhs,
            Worldspace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Parent = object.Equals(item.Parent, rhs.Parent);
            ret.Climate = object.Equals(item.Climate, rhs.Climate);
            ret.Water = object.Equals(item.Water, rhs.Water);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.MapData = EqualsMaskHelper.EqualsHelper(
                item.MapData,
                rhs.MapData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ObjectBoundsMin = item.ObjectBoundsMin.Equals(rhs.ObjectBoundsMin);
            ret.ObjectBoundsMax = item.ObjectBoundsMax.Equals(rhs.ObjectBoundsMax);
            ret.Music = item.Music == rhs.Music;
            ret.OffsetData = MemorySliceExt.Equal(item.OffsetData, rhs.OffsetData);
            ret.Road = EqualsMaskHelper.EqualsHelper(
                item.Road,
                rhs.Road,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TopCell = EqualsMaskHelper.EqualsHelper(
                item.TopCell,
                rhs.TopCell,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SubCellsTimestamp = MemoryExtensions.SequenceEqual(item.SubCellsTimestamp.Span, rhs.SubCellsTimestamp.Span);
            ret.SubCells = item.SubCells.CollectionEqualsHelper(
                rhs.SubCells,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UsingOffsetLength = item.UsingOffsetLength == rhs.UsingOffsetLength;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string ToString(
            IWorldspaceGetter item,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IWorldspaceGetter item,
            FileGeneration fg,
            string? name = null,
            Worldspace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"Worldspace =>");
            }
            else
            {
                fg.AppendLine($"{name} (Worldspace) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IWorldspaceGetter item,
            FileGeneration fg,
            Worldspace.Mask<bool>? printMask = null)
        {
            PlaceCommon.ToStringFields(
                item: item,
                fg: fg,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name.TryGet(out var NameItem))
            {
                fg.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Parent ?? true)
                && item.Parent.TryGet(out var ParentItem))
            {
                fg.AppendItem(ParentItem, "Parent");
            }
            if ((printMask?.Climate ?? true)
                && item.Climate.TryGet(out var ClimateItem))
            {
                fg.AppendItem(ClimateItem, "Climate");
            }
            if ((printMask?.Water ?? true)
                && item.Water.TryGet(out var WaterItem))
            {
                fg.AppendItem(WaterItem, "Water");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon.TryGet(out var IconItem))
            {
                fg.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.MapData?.Overall ?? true)
                && item.MapData.TryGet(out var MapDataItem))
            {
                MapDataItem?.ToString(fg, "MapData");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags.TryGet(out var FlagsItem))
            {
                fg.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.ObjectBoundsMin ?? true)
                && item.ObjectBoundsMin.TryGet(out var ObjectBoundsMinItem))
            {
                fg.AppendItem(ObjectBoundsMinItem, "ObjectBoundsMin");
            }
            if ((printMask?.ObjectBoundsMax ?? true)
                && item.ObjectBoundsMax.TryGet(out var ObjectBoundsMaxItem))
            {
                fg.AppendItem(ObjectBoundsMaxItem, "ObjectBoundsMax");
            }
            if ((printMask?.Music ?? true)
                && item.Music.TryGet(out var MusicItem))
            {
                fg.AppendItem(MusicItem, "Music");
            }
            if ((printMask?.OffsetData ?? true)
                && item.OffsetData.TryGet(out var OffsetDataItem))
            {
                fg.AppendLine($"OffsetData => {SpanExt.ToHexString(OffsetDataItem)}");
            }
            if ((printMask?.Road?.Overall ?? true)
                && item.Road.TryGet(out var RoadItem))
            {
                RoadItem?.ToString(fg, "Road");
            }
            if ((printMask?.TopCell?.Overall ?? true)
                && item.TopCell.TryGet(out var TopCellItem))
            {
                TopCellItem?.ToString(fg, "TopCell");
            }
            if (printMask?.SubCellsTimestamp ?? true)
            {
                fg.AppendLine($"SubCellsTimestamp => {SpanExt.ToHexString(item.SubCellsTimestamp)}");
            }
            if ((printMask?.SubCells?.Overall ?? true)
                && item.SubCells.TryGet(out var SubCellsItem))
            {
                fg.AppendLine("SubCells =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in SubCellsItem)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if (printMask?.UsingOffsetLength ?? true)
            {
                fg.AppendItem(item.UsingOffsetLength, "UsingOffsetLength");
            }
        }
        
        public bool HasBeenSet(
            IWorldspaceGetter item,
            Worldspace.Mask<bool?> checkMask)
        {
            if (checkMask.Name.HasValue && checkMask.Name.Value != (item.Name != null)) return false;
            if (checkMask.Parent.HasValue && checkMask.Parent.Value != (item.Parent.FormKey != null)) return false;
            if (checkMask.Climate.HasValue && checkMask.Climate.Value != (item.Climate.FormKey != null)) return false;
            if (checkMask.Water.HasValue && checkMask.Water.Value != (item.Water.FormKey != null)) return false;
            if (checkMask.Icon.HasValue && checkMask.Icon.Value != (item.Icon != null)) return false;
            if (checkMask.MapData?.Overall.HasValue ?? false && checkMask.MapData.Overall.Value != (item.MapData != null)) return false;
            if (checkMask.MapData?.Specific != null && (item.MapData == null || !item.MapData.HasBeenSet(checkMask.MapData.Specific))) return false;
            if (checkMask.Flags.HasValue && checkMask.Flags.Value != (item.Flags != null)) return false;
            if (checkMask.ObjectBoundsMin.HasValue && checkMask.ObjectBoundsMin.Value != (item.ObjectBoundsMin != null)) return false;
            if (checkMask.ObjectBoundsMax.HasValue && checkMask.ObjectBoundsMax.Value != (item.ObjectBoundsMax != null)) return false;
            if (checkMask.Music.HasValue && checkMask.Music.Value != (item.Music != null)) return false;
            if (checkMask.OffsetData.HasValue && checkMask.OffsetData.Value != (item.OffsetData != null)) return false;
            if (checkMask.Road?.Overall.HasValue ?? false && checkMask.Road.Overall.Value != (item.Road != null)) return false;
            if (checkMask.Road?.Specific != null && (item.Road == null || !item.Road.HasBeenSet(checkMask.Road.Specific))) return false;
            if (checkMask.TopCell?.Overall.HasValue ?? false && checkMask.TopCell.Overall.Value != (item.TopCell != null)) return false;
            if (checkMask.TopCell?.Specific != null && (item.TopCell == null || !item.TopCell.HasBeenSet(checkMask.TopCell.Specific))) return false;
            if (checkMask.SubCells?.Overall.HasValue ?? false && checkMask.SubCells!.Overall.Value != (item.SubCells != null)) return false;
            return base.HasBeenSet(
                item: item,
                checkMask: checkMask);
        }
        
        public void FillHasBeenSetMask(
            IWorldspaceGetter item,
            Worldspace.Mask<bool> mask)
        {
            mask.Name = (item.Name != null);
            mask.Parent = (item.Parent.FormKey != null);
            mask.Climate = (item.Climate.FormKey != null);
            mask.Water = (item.Water.FormKey != null);
            mask.Icon = (item.Icon != null);
            var itemMapData = item.MapData;
            mask.MapData = new MaskItem<bool, MapData.Mask<bool>?>(itemMapData != null, itemMapData?.GetHasBeenSetMask());
            mask.Flags = (item.Flags != null);
            mask.ObjectBoundsMin = (item.ObjectBoundsMin != null);
            mask.ObjectBoundsMax = (item.ObjectBoundsMax != null);
            mask.Music = (item.Music != null);
            mask.OffsetData = (item.OffsetData != null);
            var itemRoad = item.Road;
            mask.Road = new MaskItem<bool, Road.Mask<bool>?>(itemRoad != null, itemRoad?.GetHasBeenSetMask());
            var itemTopCell = item.TopCell;
            mask.TopCell = new MaskItem<bool, Cell.Mask<bool>?>(itemTopCell != null, itemTopCell?.GetHasBeenSetMask());
            mask.SubCellsTimestamp = true;
            if (item.SubCells.TryGet(out var SubCellsItem))
            {
                mask.SubCells = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, WorldspaceBlock.Mask<bool>?>>?>(true, SubCellsItem.WithIndex().Select((i) => new MaskItemIndexed<bool, WorldspaceBlock.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            }
            mask.UsingOffsetLength = true;
            base.FillHasBeenSetMask(
                item: item,
                mask: mask);
        }
        
        public static Worldspace_FieldIndex ConvertFieldIndex(Place_FieldIndex index)
        {
            switch (index)
            {
                case Place_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case Place_FieldIndex.OblivionMajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Worldspace_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        public static new Worldspace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.Version:
                    return (Worldspace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Worldspace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWorldspaceGetter? lhs,
            IWorldspaceGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!string.Equals(lhs.Name, rhs.Name)) return false;
            if (!lhs.Parent.Equals(rhs.Parent)) return false;
            if (!lhs.Climate.Equals(rhs.Climate)) return false;
            if (!lhs.Water.Equals(rhs.Water)) return false;
            if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            if (!object.Equals(lhs.MapData, rhs.MapData)) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (!lhs.ObjectBoundsMin.Equals(rhs.ObjectBoundsMin)) return false;
            if (!lhs.ObjectBoundsMax.Equals(rhs.ObjectBoundsMax)) return false;
            if (lhs.Music != rhs.Music) return false;
            if (!MemorySliceExt.Equal(lhs.OffsetData, rhs.OffsetData)) return false;
            if (!object.Equals(lhs.Road, rhs.Road)) return false;
            if (!object.Equals(lhs.TopCell, rhs.TopCell)) return false;
            if (!MemoryExtensions.SequenceEqual(lhs.SubCellsTimestamp.Span, rhs.SubCellsTimestamp.Span)) return false;
            if (!lhs.SubCells.SequenceEqual(rhs.SubCells)) return false;
            if (lhs.UsingOffsetLength != rhs.UsingOffsetLength) return false;
            return true;
        }
        
        public override bool Equals(
            IPlaceGetter? lhs,
            IPlaceGetter? rhs)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter);
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs)
        {
            return Equals(
                lhs: (IWorldspaceGetter?)lhs,
                rhs: rhs as IWorldspaceGetter);
        }
        
        public virtual int GetHashCode(IWorldspaceGetter item)
        {
            var hash = new HashCode();
            if (item.Name.TryGet(out var Nameitem))
            {
                hash.Add(Nameitem);
            }
            if (item.Parent.TryGet(out var Parentitem))
            {
                hash.Add(Parentitem);
            }
            if (item.Climate.TryGet(out var Climateitem))
            {
                hash.Add(Climateitem);
            }
            if (item.Water.TryGet(out var Wateritem))
            {
                hash.Add(Wateritem);
            }
            if (item.Icon.TryGet(out var Iconitem))
            {
                hash.Add(Iconitem);
            }
            if (item.MapData.TryGet(out var MapDataitem))
            {
                hash.Add(MapDataitem);
            }
            if (item.Flags.TryGet(out var Flagsitem))
            {
                hash.Add(Flagsitem);
            }
            if (item.ObjectBoundsMin.TryGet(out var ObjectBoundsMinitem))
            {
                hash.Add(ObjectBoundsMinitem);
            }
            if (item.ObjectBoundsMax.TryGet(out var ObjectBoundsMaxitem))
            {
                hash.Add(ObjectBoundsMaxitem);
            }
            if (item.Music.TryGet(out var Musicitem))
            {
                hash.Add(Musicitem);
            }
            if (item.OffsetData.TryGet(out var OffsetDataItem))
            {
                hash.Add(OffsetDataItem);
            }
            if (item.Road.TryGet(out var Roaditem))
            {
                hash.Add(Roaditem);
            }
            if (item.TopCell.TryGet(out var TopCellitem))
            {
                hash.Add(TopCellitem);
            }
            hash.Add(item.SubCellsTimestamp);
            hash.Add(item.SubCells);
            hash.Add(item.UsingOffsetLength);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IPlaceGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWorldspaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Worldspace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<ILinkGetter> GetLinks(IWorldspaceGetter obj)
        {
            foreach (var item in base.GetLinks(obj))
            {
                yield return item;
            }
            yield return obj.Parent;
            yield return obj.Climate;
            yield return obj.Water;
            if (obj.TopCell != null)
            {
                foreach (var item in obj.TopCell.Links)
                {
                    yield return item;
                }
            }
            if (obj.SubCells != null)
            {
                foreach (var item in obj.SubCells.SelectMany(f => f.Links))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        partial void PostDuplicate(Worldspace obj, Worldspace rhs, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords);
        
        public override IMajorRecordCommon Duplicate(IMajorRecordCommonGetter item, Func<FormKey> getNextFormKey, IList<(IMajorRecordCommon Record, FormKey OriginalFormKey)>? duplicatedRecords)
        {
            var ret = new Worldspace(getNextFormKey());
            ret.DeepCopyIn((Worldspace)item);
            duplicatedRecords?.Add((ret, item.FormKey));
            PostDuplicate(ret, (Worldspace)item, getNextFormKey, duplicatedRecords);
            return ret;
        }
        
        public IEnumerable<IMajorRecordCommonGetter> EnumerateMajorRecords(IWorldspaceGetter obj)
        {
            if ((obj.MapData != null))
            {
            }
            if ((obj.Road != null))
            {
                if (obj.Road.TryGet(out var Roaditem))
                {
                    yield return Roaditem;
                    foreach (var item in Roaditem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            if ((obj.TopCell != null))
            {
                if (obj.TopCell.TryGet(out var TopCellitem))
                {
                    yield return TopCellitem;
                    foreach (var item in TopCellitem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            if ((obj.SubCells != null))
            {
                foreach (var subItem in obj.SubCells.TryIterate())
                {
                    foreach (var item in subItem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
        }
        
        public IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(IWorldspaceGetter obj)
            where TMajor : class, IMajorRecordCommonGetter
        {
            switch (typeof(TMajor).Name)
            {
                case "IMajorRecordCommon":
                case "IMajorRecordCommonGetter":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "IOblivionMajorRecordGetter":
                case "OblivionMajorRecord":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return (item as TMajor)!;
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    if (obj.Road.TryGet(out var Roaditem))
                    {
                        yield return (Roaditem as TMajor)!;
                        foreach (var item in Roaditem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    if (obj.TopCell.TryGet(out var TopCellitem))
                    {
                        yield return (TopCellitem as TMajor)!;
                        foreach (var item in TopCellitem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                case "WorldspaceBlock":
                case "IWorldspaceBlockGetter":
                case "IWorldspaceBlock":
                    foreach (var subItem in obj.SubCells.TryIterate())
                    {
                        foreach (var item in subItem.EnumerateMajorRecords<TMajor>())
                        {
                            yield return (item as TMajor)!;
                        }
                    }
                    yield break;
                default:
                    throw new ArgumentException();
            }
        }
        
        #endregion
        
    }
    public partial class WorldspaceSetterTranslationCommon : PlaceSetterTranslationCommon
    {
        public new static readonly WorldspaceSetterTranslationCommon Instance = new WorldspaceSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IWorldspaceInternal item,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
        }
        
        public void DeepCopyIn(
            IWorldspace item,
            IWorldspaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask);
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Parent) ?? true))
            {
                item.Parent.FormKey = rhs.Parent.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Climate) ?? true))
            {
                item.Climate.FormKey = rhs.Climate.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Water) ?? true))
            {
                item.Water.FormKey = rhs.Water.FormKey;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapData) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                try
                {
                    if(rhs.MapData.TryGet(out var rhsMapData))
                    {
                        item.MapData = rhsMapData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData));
                    }
                    else
                    {
                        item.MapData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMin) ?? true))
            {
                item.ObjectBoundsMin = rhs.ObjectBoundsMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMax) ?? true))
            {
                item.ObjectBoundsMax = rhs.ObjectBoundsMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Music) ?? true))
            {
                item.Music = rhs.Music;
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.OffsetData) ?? true))
            {
                if(rhs.OffsetData.TryGet(out var OffsetDatarhs))
                {
                    item.OffsetData = OffsetDatarhs.ToArray();
                }
                else
                {
                    item.OffsetData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Road) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.Road);
                try
                {
                    if(rhs.Road.TryGet(out var rhsRoad))
                    {
                        var copyRet = new Road(rhsRoad.FormKey);
                        copyRet.DeepCopyIn(
                            rhs: rhsRoad,
                            copyMask: copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.Road),
                            errorMask: errorMask);
                        item.Road = copyRet;
                    }
                    else
                    {
                        item.Road = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.TopCell) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.TopCell);
                try
                {
                    if(rhs.TopCell.TryGet(out var rhsTopCell))
                    {
                        var copyRet = new Cell(rhsTopCell.FormKey);
                        copyRet.DeepCopyIn(
                            rhs: rhsTopCell,
                            copyMask: copyMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell),
                            errorMask: errorMask);
                        item.TopCell = copyRet;
                    }
                    else
                    {
                        item.TopCell = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsTimestamp) ?? true))
            {
                item.SubCellsTimestamp = rhs.SubCellsTimestamp.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCells) ?? true))
            {
                errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCells);
                try
                {
                    if ((rhs.SubCells != null))
                    {
                        item.SubCells = 
                            rhs.SubCells
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WorldspaceBlock>();
                    }
                    else
                    {
                        item.SubCells = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Worldspace_FieldIndex.UsingOffsetLength) ?? true))
            {
                item.UsingOffsetLength = rhs.UsingOffsetLength;
            }
        }
        
        public override void DeepCopyIn(
            IPlaceInternal item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IPlace item,
            IPlaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWorldspaceInternal)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            this.DeepCopyIn(
                item: (IWorldspace)item,
                rhs: (IWorldspaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }
        
        #endregion
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            Worldspace.TranslationMask? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public Worldspace DeepCopy(
            IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Worldspace ret = (Worldspace)((WorldspaceCommon)((IWorldspaceGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Worldspace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration Registration => Worldspace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WorldspaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceXmlWriteTranslation :
        PlaceXmlWriteTranslation,
        IXmlWriteTranslator
    {
        public new readonly static WorldspaceXmlWriteTranslation Instance = new WorldspaceXmlWriteTranslation();

        public static void WriteToNodeXml(
            IWorldspaceGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            PlaceXmlWriteTranslation.WriteToNodeXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((item.Name != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Worldspace_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((item.Parent.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Parent) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Parent),
                    item: item.Parent.FormKey,
                    fieldIndex: (int)Worldspace_FieldIndex.Parent,
                    errorMask: errorMask);
            }
            if ((item.Climate.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Climate) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Climate),
                    item: item.Climate.FormKey,
                    fieldIndex: (int)Worldspace_FieldIndex.Climate,
                    errorMask: errorMask);
            }
            if ((item.Water.FormKey != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Water) ?? true))
            {
                FormKeyXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Water),
                    item: item.Water.FormKey,
                    fieldIndex: (int)Worldspace_FieldIndex.Water,
                    errorMask: errorMask);
            }
            if ((item.Icon != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Icon) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Icon),
                    item: item.Icon,
                    fieldIndex: (int)Worldspace_FieldIndex.Icon,
                    errorMask: errorMask);
            }
            if ((item.MapData != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.MapData) ?? true))
            {
                if (item.MapData.TryGet(out var MapDataItem))
                {
                    ((MapDataXmlWriteTranslation)((IXmlItem)MapDataItem).XmlWriteTranslator).Write(
                        item: MapDataItem,
                        node: node,
                        name: nameof(item.MapData),
                        fieldIndex: (int)Worldspace_FieldIndex.MapData,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData));
                }
            }
            if ((item.Flags != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<Worldspace.Flag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)Worldspace_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((item.ObjectBoundsMin != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMin) ?? true))
            {
                P2FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ObjectBoundsMin),
                    item: item.ObjectBoundsMin.Value,
                    fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMin,
                    errorMask: errorMask);
            }
            if ((item.ObjectBoundsMax != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.ObjectBoundsMax) ?? true))
            {
                P2FloatXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.ObjectBoundsMax),
                    item: item.ObjectBoundsMax.Value,
                    fieldIndex: (int)Worldspace_FieldIndex.ObjectBoundsMax,
                    errorMask: errorMask);
            }
            if ((item.Music != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Music) ?? true))
            {
                EnumXmlTranslation<MusicType>.Instance.Write(
                    node: node,
                    name: nameof(item.Music),
                    item: item.Music,
                    fieldIndex: (int)Worldspace_FieldIndex.Music,
                    errorMask: errorMask);
            }
            if ((item.OffsetData != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.OffsetData) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.OffsetData),
                    item: item.OffsetData.Value,
                    fieldIndex: (int)Worldspace_FieldIndex.OffsetData,
                    errorMask: errorMask);
            }
            if ((item.Road != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.Road) ?? true))
            {
                if (item.Road.TryGet(out var RoadItem))
                {
                    ((RoadXmlWriteTranslation)((IXmlItem)RoadItem).XmlWriteTranslator).Write(
                        item: RoadItem,
                        node: node,
                        name: nameof(item.Road),
                        fieldIndex: (int)Worldspace_FieldIndex.Road,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.Road));
                }
            }
            if ((item.TopCell != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.TopCell) ?? true))
            {
                if (item.TopCell.TryGet(out var TopCellItem))
                {
                    ((CellXmlWriteTranslation)((IXmlItem)TopCellItem).XmlWriteTranslator).Write(
                        item: TopCellItem,
                        node: node,
                        name: nameof(item.TopCell),
                        fieldIndex: (int)Worldspace_FieldIndex.TopCell,
                        errorMask: errorMask,
                        translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell));
                }
            }
            if ((translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCellsTimestamp) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SubCellsTimestamp),
                    item: item.SubCellsTimestamp,
                    fieldIndex: (int)Worldspace_FieldIndex.SubCellsTimestamp,
                    errorMask: errorMask);
            }
            if ((item.SubCells != null)
                && (translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.SubCells) ?? true))
            {
                ListXmlTranslation<IWorldspaceBlockGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.SubCells),
                    item: item.SubCells,
                    fieldIndex: (int)Worldspace_FieldIndex.SubCells,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.SubCells),
                    transl: (XElement subNode, IWorldspaceBlockGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        if (subItem.TryGet(out var Item))
                        {
                            ((WorldspaceBlockXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                                item: Item,
                                node: subNode,
                                name: null,
                                errorMask: listSubMask,
                                translationMask: listTranslMask);
                        }
                    });
            }
            if ((translationMask?.GetShouldTranslate((int)Worldspace_FieldIndex.UsingOffsetLength) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.UsingOffsetLength),
                    item: item.UsingOffsetLength,
                    fieldIndex: (int)Worldspace_FieldIndex.UsingOffsetLength,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IWorldspaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.Worldspace");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.Worldspace");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IPlaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IOblivionMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public override void Write(
            XElement node,
            IMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

    }

    public partial class WorldspaceXmlCreateTranslation : PlaceXmlCreateTranslation
    {
        public new readonly static WorldspaceXmlCreateTranslation Instance = new WorldspaceXmlCreateTranslation();

        public static void FillPublicXml(
            IWorldspaceInternal item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    WorldspaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IWorldspaceInternal item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Name":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Name);
                    try
                    {
                        item.Name = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Parent":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Parent);
                    try
                    {
                        item.Parent.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Climate":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Climate);
                    try
                    {
                        item.Climate.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Water":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Water);
                    try
                    {
                        item.Water.FormKey = FormKeyXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Icon":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Icon);
                    try
                    {
                        item.Icon = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MapData":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.MapData);
                    try
                    {
                        item.MapData = LoquiXmlTranslation<MapData>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.MapData));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Flags":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<Worldspace.Flag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBoundsMin":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMin);
                    try
                    {
                        item.ObjectBoundsMin = P2FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "ObjectBoundsMax":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.ObjectBoundsMax);
                    try
                    {
                        item.ObjectBoundsMax = P2FloatXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Music":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Music);
                    try
                    {
                        item.Music = EnumXmlTranslation<MusicType>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "OffsetData":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.OffsetData);
                    try
                    {
                        item.OffsetData = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Road":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.Road);
                    try
                    {
                        item.Road = LoquiXmlTranslation<Road>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.Road));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TopCell":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.TopCell);
                    try
                    {
                        item.TopCell = LoquiXmlTranslation<Cell>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)Worldspace_FieldIndex.TopCell));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubCellsTimestamp":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCellsTimestamp);
                    try
                    {
                        item.SubCellsTimestamp = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            fallbackLength: 4,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SubCells":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.SubCells);
                    try
                    {
                        if (ListXmlTranslation<WorldspaceBlock>.Instance.Parse(
                            node: node,
                            enumer: out var SubCellsItem,
                            transl: LoquiXmlTranslation<WorldspaceBlock>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.SubCells = SubCellsItem.ToExtendedList();
                        }
                        else
                        {
                            item.SubCells = null;
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "UsingOffsetLength":
                    errorMask?.PushIndex((int)Worldspace_FieldIndex.UsingOffsetLength);
                    try
                    {
                        item.UsingOffsetLength = BooleanXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    PlaceXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class WorldspaceXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IWorldspaceGetter item,
            XElement node,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((WorldspaceXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Worldspace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IWorldspaceGetter item,
            string path,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IWorldspaceGetter item,
            Stream stream,
            out Worldspace.ErrorMask errorMask,
            Worldspace.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceBinaryWriteTranslation :
        PlaceBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new readonly static WorldspaceBinaryWriteTranslation Instance = new WorldspaceBinaryWriteTranslation();

        static partial void WriteBinaryOffsetLengthCustom(
            MutagenWriter writer,
            IWorldspaceGetter item);

        public static void WriteBinaryOffsetLength(
            MutagenWriter writer,
            IWorldspaceGetter item)
        {
            WriteBinaryOffsetLengthCustom(
                writer: writer,
                item: item);
        }

        static partial void WriteBinaryOffsetDataCustom(
            MutagenWriter writer,
            IWorldspaceGetter item);

        public static void WriteBinaryOffsetData(
            MutagenWriter writer,
            IWorldspaceGetter item)
        {
            WriteBinaryOffsetDataCustom(
                writer: writer,
                item: item);
        }

        static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IWorldspaceGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IWorldspaceGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public static void WriteEmbedded(
            IWorldspaceGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IWorldspaceGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.FULL_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.WNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.CNAM_HEADER));
            Mutagen.Bethesda.Binary.FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM2_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.ICON_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            if (item.MapData.TryGet(out var MapDataItem))
            {
                ((MapDataBinaryWriteTranslation)((IBinaryItem)MapDataItem).BinaryWriteTranslator).Write(
                    item: MapDataItem,
                    writer: writer);
            }
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<Worldspace.Flag>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.DATA_HEADER));
            Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectBoundsMin,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM0_HEADER));
            Mutagen.Bethesda.Binary.P2FloatBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectBoundsMax,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.NAM9_HEADER));
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MusicType>.Instance.WriteNullable(
                writer,
                item.Music,
                length: 4,
                header: recordTypeConverter.ConvertToCustom(Worldspace_Registration.SNAM_HEADER));
            WorldspaceBinaryWriteTranslation.WriteBinaryOffsetLength(
                writer: writer,
                item: item);
            WorldspaceBinaryWriteTranslation.WriteBinaryOffsetData(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IWorldspaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Worldspace_Registration.WRLD_HEADER,
                type: ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IPlaceGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IWorldspaceGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class WorldspaceBinaryCreateTranslation : PlaceBinaryCreateTranslation
    {
        public new readonly static WorldspaceBinaryCreateTranslation Instance = new WorldspaceBinaryCreateTranslation();

        static partial void FillBinaryOffsetLengthCustom(
            MutagenFrame frame,
            IWorldspaceInternal item);

        public static void FillBinaryOffsetLengthCustomPublic(
            MutagenFrame frame,
            IWorldspaceInternal item)
        {
            FillBinaryOffsetLengthCustom(
                frame: frame,
                item: item);
        }

        static partial void FillBinaryOffsetDataCustom(
            MutagenFrame frame,
            IWorldspaceInternal item);

        public static void FillBinaryOffsetDataCustomPublic(
            MutagenFrame frame,
            IWorldspaceInternal item)
        {
            FillBinaryOffsetDataCustom(
                frame: frame,
                item: item);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WorldspaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class WorldspaceBinaryOverlay :
        PlaceBinaryOverlay,
        IWorldspaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Worldspace_Registration.Instance;
        public new static Worldspace_Registration Registration => Worldspace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WorldspaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WorldspaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IWorldspaceGetter)rhs, include);

        public override IEnumerable<ILinkGetter> Links => WorldspaceCommon.Instance.GetLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordCommonGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>() => this.EnumerateMajorRecords<TMajor>();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object XmlWriteTranslator => WorldspaceXmlWriteTranslation.Instance;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((WorldspaceXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WorldspaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((WorldspaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: null);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _NameLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region Parent
        private int? _ParentLocation;
        public bool Parent_IsSet => _ParentLocation.HasValue;
        public IFormLinkNullableGetter<IWorldspaceGetter> Parent => _ParentLocation.HasValue ? new FormLinkNullable<IWorldspaceGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ParentLocation.Value, _package.Meta)))) : FormLinkNullable<IWorldspaceGetter>.Empty;
        #endregion
        #region Climate
        private int? _ClimateLocation;
        public bool Climate_IsSet => _ClimateLocation.HasValue;
        public IFormLinkNullableGetter<IClimateGetter> Climate => _ClimateLocation.HasValue ? new FormLinkNullable<IClimateGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _ClimateLocation.Value, _package.Meta)))) : FormLinkNullable<IClimateGetter>.Empty;
        #endregion
        #region Water
        private int? _WaterLocation;
        public bool Water_IsSet => _WaterLocation.HasValue;
        public IFormLinkNullableGetter<IWaterGetter> Water => _WaterLocation.HasValue ? new FormLinkNullable<IWaterGetter>(FormKey.Factory(_package.MasterReferences!, BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _WaterLocation.Value, _package.Meta)))) : FormLinkNullable<IWaterGetter>.Empty;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _IconLocation.Value, _package.Meta)) : default(string?);
        #endregion
        #region MapData
        private RangeInt32? _MapDataLocation;
        private bool _MapData_IsSet => _MapDataLocation.HasValue;
        public IMapDataGetter? MapData => _MapData_IsSet ? MapDataBinaryOverlay.MapDataFactory(new BinaryMemoryReadStream(_data.Slice(_MapDataLocation!.Value.Min)), _package, default(RecordTypeConverter)) : default;
        public bool MapData_IsSet => _MapDataLocation.HasValue;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        private bool Flags_IsSet => _FlagsLocation.HasValue;
        public Worldspace.Flag? Flags => Flags_IsSet ? (Worldspace.Flag)HeaderTranslation.ExtractSubrecordSpan(_data, _FlagsLocation!.Value, _package.Meta)[0] : default(Worldspace.Flag?);
        #endregion
        #region ObjectBoundsMin
        private int? _ObjectBoundsMinLocation;
        public P2Float? ObjectBoundsMin => _ObjectBoundsMinLocation.HasValue ? P2FloatBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectBoundsMinLocation.Value, _package.Meta)) : default(P2Float?);
        #endregion
        #region ObjectBoundsMax
        private int? _ObjectBoundsMaxLocation;
        public P2Float? ObjectBoundsMax => _ObjectBoundsMaxLocation.HasValue ? P2FloatBinaryTranslation.Read(HeaderTranslation.ExtractSubrecordMemory(_data, _ObjectBoundsMaxLocation.Value, _package.Meta)) : default(P2Float?);
        #endregion
        #region Music
        private int? _MusicLocation;
        private bool Music_IsSet => _MusicLocation.HasValue;
        public MusicType? Music => Music_IsSet ? (MusicType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordSpan(_data, _MusicLocation!.Value, _package.Meta)) : default(MusicType?);
        #endregion
        #region OffsetLength
        partial void OffsetLengthCustomParse(
            BinaryMemoryReadStream stream,
            int offset);
        #endregion
        #region OffsetData
        partial void OffsetDataCustomParse(
            BinaryMemoryReadStream stream,
            long finalPos,
            int offset);
        public ReadOnlyMemorySlice<Byte>? OffsetData => GetOffsetDataCustom();
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected WorldspaceBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static WorldspaceBinaryOverlay WorldspaceFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            stream = UtilityTranslation.DecompressStream(stream, package.Meta);
            var ret = new WorldspaceBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.Meta),
                package: package);
            var finalPos = checked((int)(stream.Position + package.Meta.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.Meta.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.Meta.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public override TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x4C4C5546: // FULL
                {
                    _NameLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Name);
                }
                case 0x4D414E57: // WNAM
                {
                    _ParentLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Parent);
                }
                case 0x4D414E43: // CNAM
                {
                    _ClimateLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Climate);
                }
                case 0x324D414E: // NAM2
                {
                    _WaterLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Water);
                }
                case 0x4E4F4349: // ICON
                {
                    _IconLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Icon);
                }
                case 0x4D414E4D: // MNAM
                {
                    _MapDataLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.MapData);
                }
                case 0x41544144: // DATA
                {
                    _FlagsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Flags);
                }
                case 0x304D414E: // NAM0
                {
                    _ObjectBoundsMinLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.ObjectBoundsMin);
                }
                case 0x394D414E: // NAM9
                {
                    _ObjectBoundsMaxLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.ObjectBoundsMax);
                }
                case 0x4D414E53: // SNAM
                {
                    _MusicLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.Music);
                }
                case 0x58585858: // XXXX
                {
                    OffsetLengthCustomParse(
                        stream,
                        offset);
                    return TryGet<int?>.Succeed(null);
                }
                case 0x5453464F: // OFST
                {
                    OffsetDataCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return TryGet<int?>.Succeed((int)Worldspace_FieldIndex.OffsetData);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordTypeConverter: recordTypeConverter);
            }
        }
    }

}
#endregion

#endregion

