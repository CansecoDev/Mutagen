/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Loqui.Internal;
using Noggog;
using Mutagen.Bethesda.Oblivion.Internals;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Mutagen.Bethesda.Xml;
using Mutagen.Bethesda.Binary;
using System.Buffers.Binary;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ModHeader :
        IModHeader,
        ILoquiObjectSetter<ModHeader>,
        IEquatable<ModHeader>,
        IEqualsMask
    {
        #region Ctor
        public ModHeader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public ModHeader.HeaderFlag Flags { get; set; } = default;
        #endregion
        #region FormID
        public UInt32 FormID { get; set; } = default;
        #endregion
        #region Version
        public Int32 Version { get; set; } = default;
        #endregion
        #region Stats
        public ModStats Stats { get; set; } = new ModStats();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModStatsGetter IModHeaderGetter.Stats => Stats;
        #endregion
        #region TypeOffsets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _TypeOffsets;
        public Byte[]? TypeOffsets
        {
            get => this._TypeOffsets;
            set => this._TypeOffsets = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IModHeaderGetter.TypeOffsets => this.TypeOffsets;
        #endregion
        #region Deleted
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected Byte[]? _Deleted;
        public Byte[]? Deleted
        {
            get => this._Deleted;
            set => this._Deleted = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IModHeaderGetter.Deleted => this.Deleted;
        #endregion
        #region Author
        public String? Author { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IModHeaderGetter.Author => this.Author;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IModHeaderGetter.Description => this.Description;
        #endregion
        #region MasterReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MasterReference> _MasterReferences = new ExtendedList<MasterReference>();
        public ExtendedList<MasterReference> MasterReferences
        {
            get => this._MasterReferences;
            protected set => this._MasterReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModHeaderGetter.MasterReferences => _MasterReferences;
        #endregion

        #endregion
        #region VestigialData
        public UInt64? VestigialData { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64? IModHeaderGetter.VestigialData => this.VestigialData;
        #endregion

        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ModHeaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (!(obj is IModHeaderGetter rhs)) return false;
            return ((ModHeaderCommon)((IModHeaderGetter)this).CommonInstance()!).Equals(this, rhs);
        }

        public bool Equals(ModHeader obj)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)this).CommonInstance()!).Equals(this, obj);
        }

        public override int GetHashCode() => ((ModHeaderCommon)((IModHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Xml Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModHeaderXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ModHeaderXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #region Xml Create
        [DebuggerStepThrough]
        public static ModHeader CreateFromXml(
            XElement node,
            ModHeader.TranslationMask? translationMask = null)
        {
            return CreateFromXml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ModHeader CreateFromXml(
            XElement node,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            var ret = CreateFromXml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModHeader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ModHeader CreateFromXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            var ret = new ModHeader();
            ((ModHeaderSetterCommon)((IModHeaderGetter)ret).CommonSetterInstance()!).CopyInFromXml(
                item: ret,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            return ret;
        }

        public static ModHeader CreateFromXml(
            string path,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            string path,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            string path,
            ErrorMaskBuilder? errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ModHeader CreateFromXml(
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return CreateFromXml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #endregion

        #region Mask
        public class Mask<TItem> :
            IMask<TItem>,
            IEquatable<Mask<TItem>>
            where TItem : notnull
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.FormID = initialValue;
                this.Version = initialValue;
                this.Stats = new MaskItem<TItem, ModStats.Mask<TItem>?>(initialValue, new ModStats.Mask<TItem>(initialValue));
                this.TypeOffsets = initialValue;
                this.Deleted = initialValue;
                this.Author = initialValue;
                this.Description = initialValue;
                this.MasterReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>());
                this.VestigialData = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem FormID,
                TItem Version,
                TItem Stats,
                TItem TypeOffsets,
                TItem Deleted,
                TItem Author,
                TItem Description,
                TItem MasterReferences,
                TItem VestigialData)
            {
                this.Flags = Flags;
                this.FormID = FormID;
                this.Version = Version;
                this.Stats = new MaskItem<TItem, ModStats.Mask<TItem>?>(Stats, new ModStats.Mask<TItem>(Stats));
                this.TypeOffsets = TypeOffsets;
                this.Deleted = Deleted;
                this.Author = Author;
                this.Description = Description;
                this.MasterReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>(MasterReferences, Enumerable.Empty<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>());
                this.VestigialData = VestigialData;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem FormID;
            public TItem Version;
            public MaskItem<TItem, ModStats.Mask<TItem>?>? Stats { get; set; }
            public TItem TypeOffsets;
            public TItem Deleted;
            public TItem Author;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>? MasterReferences;
            public TItem VestigialData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem> rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FormID, rhs.FormID)) return false;
                if (!object.Equals(this.Version, rhs.Version)) return false;
                if (!object.Equals(this.Stats, rhs.Stats)) return false;
                if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
                if (!object.Equals(this.Deleted, rhs.Deleted)) return false;
                if (!object.Equals(this.Author, rhs.Author)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.MasterReferences, rhs.MasterReferences)) return false;
                if (!object.Equals(this.VestigialData, rhs.VestigialData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.FormID);
                hash.Add(this.Version);
                hash.Add(this.Stats);
                hash.Add(this.TypeOffsets);
                hash.Add(this.Deleted);
                hash.Add(this.Author);
                hash.Add(this.Description);
                hash.Add(this.MasterReferences);
                hash.Add(this.VestigialData);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.FormID)) return false;
                if (!eval(this.Version)) return false;
                if (Stats != null)
                {
                    if (!eval(this.Stats.Overall)) return false;
                    if (this.Stats.Specific != null && !this.Stats.Specific.All(eval)) return false;
                }
                if (!eval(this.TypeOffsets)) return false;
                if (!eval(this.Deleted)) return false;
                if (!eval(this.Author)) return false;
                if (!eval(this.Description)) return false;
                if (this.MasterReferences != null)
                {
                    if (!eval(this.MasterReferences.Overall)) return false;
                    if (this.MasterReferences.Specific != null)
                    {
                        foreach (var item in this.MasterReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.VestigialData)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.FormID)) return true;
                if (eval(this.Version)) return true;
                if (Stats != null)
                {
                    if (eval(this.Stats.Overall)) return true;
                    if (this.Stats.Specific != null && this.Stats.Specific.Any(eval)) return true;
                }
                if (eval(this.TypeOffsets)) return true;
                if (eval(this.Deleted)) return true;
                if (eval(this.Author)) return true;
                if (eval(this.Description)) return true;
                if (this.MasterReferences != null)
                {
                    if (eval(this.MasterReferences.Overall)) return true;
                    if (this.MasterReferences.Specific != null)
                    {
                        foreach (var item in this.MasterReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.VestigialData)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ModHeader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.FormID = eval(this.FormID);
                obj.Version = eval(this.Version);
                obj.Stats = this.Stats == null ? null : new MaskItem<R, ModStats.Mask<R>?>(eval(this.Stats.Overall), this.Stats.Specific?.Translate(eval));
                obj.TypeOffsets = eval(this.TypeOffsets);
                obj.Deleted = eval(this.Deleted);
                obj.Author = eval(this.Author);
                obj.Description = eval(this.Description);
                if (MasterReferences != null)
                {
                    obj.MasterReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MasterReference.Mask<R>?>>?>(eval(this.MasterReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, MasterReference.Mask<R>?>>());
                    if (MasterReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MasterReference.Mask<R>?>>();
                        obj.MasterReferences.Specific = l;
                        foreach (var item in MasterReferences.Specific.WithIndex())
                        {
                            MaskItemIndexed<R, MasterReference.Mask<R>?>? mask = item.Item == null ? null : new MaskItemIndexed<R, MasterReference.Mask<R>?>(item.Item.Index, eval(item.Item.Overall), item.Item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VestigialData = eval(this.VestigialData);
            }
            #endregion

            #region To String
            public override string ToString()
            {
                return ToString(printMask: null);
            }

            public string ToString(ModHeader.Mask<bool>? printMask = null)
            {
                var fg = new FileGeneration();
                ToString(fg, printMask);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, ModHeader.Mask<bool>? printMask = null)
            {
                fg.AppendLine($"{nameof(ModHeader.Mask<TItem>)} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (printMask?.Flags ?? true)
                    {
                        fg.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FormID ?? true)
                    {
                        fg.AppendItem(FormID, "FormID");
                    }
                    if (printMask?.Version ?? true)
                    {
                        fg.AppendItem(Version, "Version");
                    }
                    if (printMask?.Stats?.Overall ?? true)
                    {
                        Stats?.ToString(fg);
                    }
                    if (printMask?.TypeOffsets ?? true)
                    {
                        fg.AppendItem(TypeOffsets, "TypeOffsets");
                    }
                    if (printMask?.Deleted ?? true)
                    {
                        fg.AppendItem(Deleted, "Deleted");
                    }
                    if (printMask?.Author ?? true)
                    {
                        fg.AppendItem(Author, "Author");
                    }
                    if (printMask?.Description ?? true)
                    {
                        fg.AppendItem(Description, "Description");
                    }
                    if ((printMask?.MasterReferences?.Overall ?? true)
                        && MasterReferences.TryGet(out var MasterReferencesItem))
                    {
                        fg.AppendLine("MasterReferences =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendItem(MasterReferencesItem.Overall);
                            if (MasterReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterReferencesItem.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    if (printMask?.VestigialData ?? true)
                    {
                        fg.AppendItem(VestigialData, "VestigialData");
                    }
                }
                fg.AppendLine("]");
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? FormID;
            public Exception? Version;
            public MaskItem<Exception?, ModStats.ErrorMask?>? Stats;
            public Exception? TypeOffsets;
            public Exception? Deleted;
            public Exception? Author;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>? MasterReferences;
            public Exception? VestigialData;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
                switch (enu)
                {
                    case ModHeader_FieldIndex.Flags:
                        return Flags;
                    case ModHeader_FieldIndex.FormID:
                        return FormID;
                    case ModHeader_FieldIndex.Version:
                        return Version;
                    case ModHeader_FieldIndex.Stats:
                        return Stats;
                    case ModHeader_FieldIndex.TypeOffsets:
                        return TypeOffsets;
                    case ModHeader_FieldIndex.Deleted:
                        return Deleted;
                    case ModHeader_FieldIndex.Author:
                        return Author;
                    case ModHeader_FieldIndex.Description:
                        return Description;
                    case ModHeader_FieldIndex.MasterReferences:
                        return MasterReferences;
                    case ModHeader_FieldIndex.VestigialData:
                        return VestigialData;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
                switch (enu)
                {
                    case ModHeader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ModHeader_FieldIndex.FormID:
                        this.FormID = ex;
                        break;
                    case ModHeader_FieldIndex.Version:
                        this.Version = ex;
                        break;
                    case ModHeader_FieldIndex.Stats:
                        this.Stats = new MaskItem<Exception?, ModStats.ErrorMask?>(ex, null);
                        break;
                    case ModHeader_FieldIndex.TypeOffsets:
                        this.TypeOffsets = ex;
                        break;
                    case ModHeader_FieldIndex.Deleted:
                        this.Deleted = ex;
                        break;
                    case ModHeader_FieldIndex.Author:
                        this.Author = ex;
                        break;
                    case ModHeader_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case ModHeader_FieldIndex.MasterReferences:
                        this.MasterReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>(ex, null);
                        break;
                    case ModHeader_FieldIndex.VestigialData:
                        this.VestigialData = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
                switch (enu)
                {
                    case ModHeader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.FormID:
                        this.FormID = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.Version:
                        this.Version = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.Stats:
                        this.Stats = (MaskItem<Exception?, ModStats.ErrorMask?>?)obj;
                        break;
                    case ModHeader_FieldIndex.TypeOffsets:
                        this.TypeOffsets = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.Deleted:
                        this.Deleted = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.Author:
                        this.Author = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case ModHeader_FieldIndex.MasterReferences:
                        this.MasterReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>)obj;
                        break;
                    case ModHeader_FieldIndex.VestigialData:
                        this.VestigialData = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (FormID != null) return true;
                if (Version != null) return true;
                if (Stats != null) return true;
                if (TypeOffsets != null) return true;
                if (Deleted != null) return true;
                if (Author != null) return true;
                if (Description != null) return true;
                if (MasterReferences != null) return true;
                if (VestigialData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString()
            {
                var fg = new FileGeneration();
                ToString(fg, null);
                return fg.ToString();
            }

            public void ToString(FileGeneration fg, string? name = null)
            {
                fg.AppendLine($"{(name ?? "ErrorMask")} =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (this.Overall != null)
                    {
                        fg.AppendLine("Overall =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"{this.Overall}");
                        }
                        fg.AppendLine("]");
                    }
                    ToString_FillInternal(fg);
                }
                fg.AppendLine("]");
            }
            protected void ToString_FillInternal(FileGeneration fg)
            {
                fg.AppendItem(Flags, "Flags");
                fg.AppendItem(FormID, "FormID");
                fg.AppendItem(Version, "Version");
                Stats?.ToString(fg);
                fg.AppendItem(TypeOffsets, "TypeOffsets");
                fg.AppendItem(Deleted, "Deleted");
                fg.AppendItem(Author, "Author");
                fg.AppendItem(Description, "Description");
                if (MasterReferences.TryGet(out var MasterReferencesItem))
                {
                    fg.AppendLine("MasterReferences =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendItem(MasterReferencesItem.Overall);
                        if (MasterReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterReferencesItem.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                fg.AppendItem(VestigialData, "VestigialData");
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FormID = this.FormID.Combine(rhs.FormID);
                ret.Version = this.Version.Combine(rhs.Version);
                ret.Stats = this.Stats.Combine(rhs.Stats, (l, r) => l.Combine(r));
                ret.TypeOffsets = this.TypeOffsets.Combine(rhs.TypeOffsets);
                ret.Deleted = this.Deleted.Combine(rhs.Deleted);
                ret.Author = this.Author.Combine(rhs.Author);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.MasterReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>(ExceptionExt.Combine(this.MasterReferences?.Overall, rhs.MasterReferences?.Overall), ExceptionExt.Combine(this.MasterReferences?.Specific, rhs.MasterReferences?.Specific));
                ret.VestigialData = this.VestigialData.Combine(rhs.VestigialData);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public bool Flags;
            public bool FormID;
            public bool Version;
            public MaskItem<bool, ModStats.TranslationMask?> Stats;
            public bool TypeOffsets;
            public bool Deleted;
            public bool Author;
            public bool Description;
            public MaskItem<bool, MasterReference.TranslationMask?> MasterReferences;
            public bool VestigialData;
            #endregion

            #region Ctors
            public TranslationMask(bool defaultOn)
            {
                this.Flags = defaultOn;
                this.FormID = defaultOn;
                this.Version = defaultOn;
                this.Stats = new MaskItem<bool, ModStats.TranslationMask?>(defaultOn, null);
                this.TypeOffsets = defaultOn;
                this.Deleted = defaultOn;
                this.Author = defaultOn;
                this.Description = defaultOn;
                this.MasterReferences = new MaskItem<bool, MasterReference.TranslationMask?>(defaultOn, null);
                this.VestigialData = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((FormID, null));
                ret.Add((Version, null));
                ret.Add((Stats?.Overall ?? true, Stats?.Specific?.GetCrystal()));
                ret.Add((TypeOffsets, null));
                ret.Add((Deleted, null));
                ret.Add((Author, null));
                ret.Add((Description, null));
                ret.Add((MasterReferences?.Overall ?? true, MasterReferences?.Specific?.GetCrystal()));
                ret.Add((VestigialData, null));
            }
        }
        #endregion

        #region Mutagen
        public new static readonly RecordType GrupRecordType = ModHeader_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }
        #region Binary Create
        [DebuggerStepThrough]
        public static ModHeader CreateFromBinary(MutagenFrame frame)
        {
            return CreateFromBinary(
                frame: frame,
                recordTypeConverter: null);
        }

        public static ModHeader CreateFromBinary(
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ModHeader();
            ((ModHeaderSetterCommon)((IModHeaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
            return ret;
        }

        #endregion

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModHeaderGetter)rhs, include);

        void IClearable.Clear()
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ModHeader GetNew()
        {
            return new ModHeader();
        }

    }
    #endregion

    #region Interface
    public partial interface IModHeader :
        IModHeaderGetter,
        ILoquiObjectSetter<IModHeader>
    {
        new ModHeader.HeaderFlag Flags { get; set; }
        new UInt32 FormID { get; set; }
        new Int32 Version { get; set; }
        new ModStats Stats { get; set; }
        new Byte[]? TypeOffsets { get; set; }
        new Byte[]? Deleted { get; set; }
        new String? Author { get; set; }
        new String? Description { get; set; }
        new ExtendedList<MasterReference> MasterReferences { get; }
        new UInt64? VestigialData { get; set; }
    }

    public partial interface IModHeaderGetter :
        ILoquiObject,
        ILoquiObject<IModHeaderGetter>,
        IXmlItem,
        IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration Registration => ModHeader_Registration.Instance;
        ModHeader.HeaderFlag Flags { get; }
        UInt32 FormID { get; }
        Int32 Version { get; }
        IModStatsGetter Stats { get; }
        ReadOnlyMemorySlice<Byte>? TypeOffsets { get; }
        ReadOnlyMemorySlice<Byte>? Deleted { get; }
        String? Author { get; }
        String? Description { get; }
        IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; }
        UInt64? VestigialData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ModHeaderMixIn
    {
        public static void Clear(this IModHeader item)
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ModHeader.Mask<bool> GetEqualsMask(
            this IModHeaderGetter item,
            IModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string ToString(
            this IModHeaderGetter item,
            string? name = null,
            ModHeader.Mask<bool>? printMask = null)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).ToString(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void ToString(
            this IModHeaderGetter item,
            FileGeneration fg,
            string? name = null,
            ModHeader.Mask<bool>? printMask = null)
        {
            ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
        }

        public static bool HasBeenSet(
            this IModHeaderGetter item,
            ModHeader.Mask<bool?> checkMask)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).HasBeenSet(
                item: item,
                checkMask: checkMask);
        }

        public static ModHeader.Mask<bool> GetHasBeenSetMask(this IModHeaderGetter item)
        {
            var ret = new ModHeader.Mask<bool>(false);
            ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).FillHasBeenSetMask(
                item: item,
                mask: ret);
            return ret;
        }

        public static bool Equals(
            this IModHeaderGetter item,
            IModHeaderGetter rhs)
        {
            return ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs);
        }

        public static void DeepCopyIn(
            this IModHeader lhs,
            IModHeaderGetter rhs)
        {
            ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default);
        }

        public static void DeepCopyIn(
            this IModHeader lhs,
            IModHeaderGetter rhs,
            ModHeader.TranslationMask? copyMask = null)
        {
            ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IModHeader lhs,
            IModHeaderGetter rhs,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal());
            errorMask = ModHeader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IModHeader lhs,
            IModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        public static ModHeader DeepCopy(
            this IModHeaderGetter item,
            ModHeader.TranslationMask? copyMask = null)
        {
            return ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ModHeader DeepCopy(
            this IModHeaderGetter item,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? copyMask = null)
        {
            return ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ModHeader DeepCopy(
            this IModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ModHeaderSetterTranslationCommon)((IModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Xml Translation
        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModHeader item,
            XElement node,
            ModHeader.TranslationMask? translationMask = null)
        {
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static void CopyInFromXml(
            this IModHeader item,
            XElement node,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModHeader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)item).CommonSetterInstance()!).CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            string path,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            string path,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            string path,
            ErrorMaskBuilder? errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static void CopyInFromXml(
            this IModHeader item,
            Stream stream,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            Stream stream,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static void CopyInFromXml(
            this IModHeader item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            ModHeader.TranslationMask? translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            CopyInFromXml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Binary Translation
        [DebuggerStepThrough]
        public static void CopyInFromBinary(
            this IModHeader item,
            MutagenFrame frame)
        {
            CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: null);
        }

        public static void CopyInFromBinary(
            this IModHeader item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ModHeaderSetterCommon)((IModHeaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion.Internals
{
    #region Field Index
    public enum ModHeader_FieldIndex
    {
        Flags = 0,
        FormID = 1,
        Version = 2,
        Stats = 3,
        TypeOffsets = 4,
        Deleted = 5,
        Author = 6,
        Description = 7,
        MasterReferences = 8,
        VestigialData = 9,
    }
    #endregion

    #region Registration
    public partial class ModHeader_Registration : ILoquiRegistration
    {
        public static readonly ModHeader_Registration Instance = new ModHeader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Oblivion.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "d26d9f2a-53af-4c45-9490-dfdb377b6655";

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(ModHeader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ModHeader.ErrorMask);

        public static readonly Type ClassType = typeof(ModHeader);

        public static readonly Type GetterType = typeof(IModHeaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IModHeader);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ModHeader";

        public const string Name = "ModHeader";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "FLAGS":
                    return (ushort)ModHeader_FieldIndex.Flags;
                case "FORMID":
                    return (ushort)ModHeader_FieldIndex.FormID;
                case "VERSION":
                    return (ushort)ModHeader_FieldIndex.Version;
                case "STATS":
                    return (ushort)ModHeader_FieldIndex.Stats;
                case "TYPEOFFSETS":
                    return (ushort)ModHeader_FieldIndex.TypeOffsets;
                case "DELETED":
                    return (ushort)ModHeader_FieldIndex.Deleted;
                case "AUTHOR":
                    return (ushort)ModHeader_FieldIndex.Author;
                case "DESCRIPTION":
                    return (ushort)ModHeader_FieldIndex.Description;
                case "MASTERREFERENCES":
                    return (ushort)ModHeader_FieldIndex.MasterReferences;
                case "VESTIGIALDATA":
                    return (ushort)ModHeader_FieldIndex.VestigialData;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.MasterReferences:
                    return true;
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    return "Flags";
                case ModHeader_FieldIndex.FormID:
                    return "FormID";
                case ModHeader_FieldIndex.Version:
                    return "Version";
                case ModHeader_FieldIndex.Stats:
                    return "Stats";
                case ModHeader_FieldIndex.TypeOffsets:
                    return "TypeOffsets";
                case ModHeader_FieldIndex.Deleted:
                    return "Deleted";
                case ModHeader_FieldIndex.Author:
                    return "Author";
                case ModHeader_FieldIndex.Description:
                    return "Description";
                case ModHeader_FieldIndex.MasterReferences:
                    return "MasterReferences";
                case ModHeader_FieldIndex.VestigialData:
                    return "VestigialData";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                case ModHeader_FieldIndex.FormID:
                case ModHeader_FieldIndex.Version:
                case ModHeader_FieldIndex.Stats:
                case ModHeader_FieldIndex.TypeOffsets:
                case ModHeader_FieldIndex.Deleted:
                case ModHeader_FieldIndex.Author:
                case ModHeader_FieldIndex.Description:
                case ModHeader_FieldIndex.MasterReferences:
                case ModHeader_FieldIndex.VestigialData:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ModHeader_FieldIndex enu = (ModHeader_FieldIndex)index;
            switch (enu)
            {
                case ModHeader_FieldIndex.Flags:
                    return typeof(ModHeader.HeaderFlag);
                case ModHeader_FieldIndex.FormID:
                    return typeof(UInt32);
                case ModHeader_FieldIndex.Version:
                    return typeof(Int32);
                case ModHeader_FieldIndex.Stats:
                    return typeof(ModStats);
                case ModHeader_FieldIndex.TypeOffsets:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Deleted:
                    return typeof(Byte[]);
                case ModHeader_FieldIndex.Author:
                    return typeof(String);
                case ModHeader_FieldIndex.Description:
                    return typeof(String);
                case ModHeader_FieldIndex.MasterReferences:
                    return typeof(ExtendedList<MasterReference>);
                case ModHeader_FieldIndex.VestigialData:
                    return typeof(UInt64);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly Type XmlWriteTranslation = typeof(ModHeaderXmlWriteTranslation);
        public static readonly RecordType TES4_HEADER = new RecordType("TES4");
        public static readonly RecordType HEDR_HEADER = new RecordType("HEDR");
        public static readonly RecordType OFST_HEADER = new RecordType("OFST");
        public static readonly RecordType DELE_HEADER = new RecordType("DELE");
        public static readonly RecordType CNAM_HEADER = new RecordType("CNAM");
        public static readonly RecordType SNAM_HEADER = new RecordType("SNAM");
        public static readonly RecordType MAST_HEADER = new RecordType("MAST");
        public static readonly RecordType DATA_HEADER = new RecordType("DATA");
        public static readonly RecordType TriggeringRecordType = TES4_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 7;
        public static readonly Type BinaryWriteTranslation = typeof(ModHeaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Common
    public partial class ModHeaderSetterCommon
    {
        public static readonly ModHeaderSetterCommon Instance = new ModHeaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IModHeader item)
        {
            ClearPartial();
            item.Flags = default;
            item.FormID = default;
            item.Version = default;
            item.Stats.Clear();
            item.TypeOffsets = default;
            item.Deleted = default;
            item.Author = default;
            item.Description = default;
            item.MasterReferences.Clear();
            item.VestigialData = default;
        }
        
        #region Xml Translation
        public virtual void CopyInFromXml(
            IModHeader item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModHeaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }
        
        #endregion
        
        #region Binary Translation
        protected static void FillBinaryStructs(
            IModHeader item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<ModHeader.HeaderFlag>.Instance.Parse(frame: frame.SpawnWithLength(4));
            item.FormID = frame.ReadUInt32();
            item.Version = frame.ReadInt32();
        }
        
        protected static TryGet<int?> FillBinaryRecordTypes(
            IModHeader item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            RecordTypeConverter? recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case 0x52444548: // HEDR
                {
                    item.Stats = Mutagen.Bethesda.Oblivion.ModStats.CreateFromBinary(frame: frame);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Stats);
                }
                case 0x5453464F: // OFST
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TypeOffsets = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.TypeOffsets);
                }
                case 0x454C4544: // DELE
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Deleted = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(frame: frame.SpawnWithLength(contentLength));
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Deleted);
                }
                case 0x4D414E43: // CNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Author = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Author);
                }
                case 0x4D414E53: // SNAM
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                        frame: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Description);
                }
                case 0x5453414D: // MAST
                {
                    item.MasterReferences.SetTo(
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<MasterReference>.Instance.Parse(
                            frame: frame,
                            triggeringRecord: ModHeader_Registration.MAST_HEADER,
                            recordTypeConverter: recordTypeConverter,
                            transl: (MutagenFrame r, out MasterReference listSubItem, RecordTypeConverter? conv) =>
                            {
                                return LoquiBinaryTranslation<MasterReference>.Instance.Parse(
                                    frame: r,
                                    item: out listSubItem!,
                                    recordTypeConverter: conv);
                            }));
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.MasterReferences);
                }
                case 0x41544144: // DATA
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VestigialData = frame.ReadUInt64();
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.VestigialData);
                }
                default:
                    frame.Position += contentLength + frame.MetaData.Constants.SubConstants.HeaderLength;
                    return TryGet<int?>.Succeed(null);
            }
        }
        
        public virtual void CopyInFromBinary(
            IModHeader item,
            MutagenFrame frame,
            RecordTypeConverter? recordTypeConverter = null)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseRecord(
                frame.Reader,
                recordTypeConverter.ConvertToCustom(ModHeader_Registration.TES4_HEADER)));
            UtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                recordTypeConverter: recordTypeConverter,
                fillStructs: FillBinaryStructs,
                fillTyped: FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    public partial class ModHeaderCommon
    {
        public static readonly ModHeaderCommon Instance = new ModHeaderCommon();

        public ModHeader.Mask<bool> GetEqualsMask(
            IModHeaderGetter item,
            IModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ModHeader.Mask<bool>(false);
            ((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IModHeaderGetter item,
            IModHeaderGetter rhs,
            ModHeader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.Flags = item.Flags == rhs.Flags;
            ret.FormID = item.FormID == rhs.FormID;
            ret.Version = item.Version == rhs.Version;
            ret.Stats = MaskItemExt.Factory(item.Stats.GetEqualsMask(rhs.Stats, include), include);
            ret.TypeOffsets = MemorySliceExt.Equal(item.TypeOffsets, rhs.TypeOffsets);
            ret.Deleted = MemorySliceExt.Equal(item.Deleted, rhs.Deleted);
            ret.Author = string.Equals(item.Author, rhs.Author);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.MasterReferences = item.MasterReferences.CollectionEqualsHelper(
                rhs.MasterReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VestigialData = item.VestigialData == rhs.VestigialData;
        }
        
        public string ToString(
            IModHeaderGetter item,
            string? name = null,
            ModHeader.Mask<bool>? printMask = null)
        {
            var fg = new FileGeneration();
            ToString(
                item: item,
                fg: fg,
                name: name,
                printMask: printMask);
            return fg.ToString();
        }
        
        public void ToString(
            IModHeaderGetter item,
            FileGeneration fg,
            string? name = null,
            ModHeader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"ModHeader =>");
            }
            else
            {
                fg.AppendLine($"{name} (ModHeader) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                ToStringFields(
                    item: item,
                    fg: fg,
                    printMask: printMask);
            }
            fg.AppendLine("]");
        }
        
        protected static void ToStringFields(
            IModHeaderGetter item,
            FileGeneration fg,
            ModHeader.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                fg.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FormID ?? true)
            {
                fg.AppendItem(item.FormID, "FormID");
            }
            if (printMask?.Version ?? true)
            {
                fg.AppendItem(item.Version, "Version");
            }
            if (printMask?.Stats?.Overall ?? true)
            {
                item.Stats?.ToString(fg, "Stats");
            }
            if ((printMask?.TypeOffsets ?? true)
                && item.TypeOffsets.TryGet(out var TypeOffsetsItem))
            {
                fg.AppendLine($"TypeOffsets => {SpanExt.ToHexString(TypeOffsetsItem)}");
            }
            if ((printMask?.Deleted ?? true)
                && item.Deleted.TryGet(out var DeletedItem))
            {
                fg.AppendLine($"Deleted => {SpanExt.ToHexString(DeletedItem)}");
            }
            if ((printMask?.Author ?? true)
                && item.Author.TryGet(out var AuthorItem))
            {
                fg.AppendItem(AuthorItem, "Author");
            }
            if ((printMask?.Description ?? true)
                && item.Description.TryGet(out var DescriptionItem))
            {
                fg.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.MasterReferences?.Overall ?? true)
            {
                fg.AppendLine("MasterReferences =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    foreach (var subItem in item.MasterReferences)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg, "Item");
                        }
                        fg.AppendLine("]");
                    }
                }
                fg.AppendLine("]");
            }
            if ((printMask?.VestigialData ?? true)
                && item.VestigialData.TryGet(out var VestigialDataItem))
            {
                fg.AppendItem(VestigialDataItem, "VestigialData");
            }
        }
        
        public bool HasBeenSet(
            IModHeaderGetter item,
            ModHeader.Mask<bool?> checkMask)
        {
            if (checkMask.TypeOffsets.HasValue && checkMask.TypeOffsets.Value != (item.TypeOffsets != null)) return false;
            if (checkMask.Deleted.HasValue && checkMask.Deleted.Value != (item.Deleted != null)) return false;
            if (checkMask.Author.HasValue && checkMask.Author.Value != (item.Author != null)) return false;
            if (checkMask.Description.HasValue && checkMask.Description.Value != (item.Description != null)) return false;
            if (checkMask.VestigialData.HasValue && checkMask.VestigialData.Value != (item.VestigialData != null)) return false;
            return true;
        }
        
        public void FillHasBeenSetMask(
            IModHeaderGetter item,
            ModHeader.Mask<bool> mask)
        {
            mask.Flags = true;
            mask.FormID = true;
            mask.Version = true;
            mask.Stats = new MaskItem<bool, ModStats.Mask<bool>?>(true, item.Stats?.GetHasBeenSetMask());
            mask.TypeOffsets = (item.TypeOffsets != null);
            mask.Deleted = (item.Deleted != null);
            mask.Author = (item.Author != null);
            mask.Description = (item.Description != null);
            var MasterReferencesItem = item.MasterReferences;
            mask.MasterReferences = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, MasterReference.Mask<bool>?>>?>(true, MasterReferencesItem.WithIndex().Select((i) => new MaskItemIndexed<bool, MasterReference.Mask<bool>?>(i.Index, true, i.Item.GetHasBeenSetMask())));
            mask.VestigialData = (item.VestigialData != null);
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IModHeaderGetter? lhs,
            IModHeaderGetter? rhs)
        {
            if (lhs == null && rhs == null) return false;
            if (lhs == null || rhs == null) return false;
            if (lhs.Flags != rhs.Flags) return false;
            if (lhs.FormID != rhs.FormID) return false;
            if (lhs.Version != rhs.Version) return false;
            if (!object.Equals(lhs.Stats, rhs.Stats)) return false;
            if (!MemorySliceExt.Equal(lhs.TypeOffsets, rhs.TypeOffsets)) return false;
            if (!MemorySliceExt.Equal(lhs.Deleted, rhs.Deleted)) return false;
            if (!string.Equals(lhs.Author, rhs.Author)) return false;
            if (!string.Equals(lhs.Description, rhs.Description)) return false;
            if (!lhs.MasterReferences.SequenceEqual(rhs.MasterReferences)) return false;
            if (lhs.VestigialData != rhs.VestigialData) return false;
            return true;
        }
        
        public virtual int GetHashCode(IModHeaderGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.FormID);
            hash.Add(item.Version);
            hash.Add(item.Stats);
            if (item.TypeOffsets.TryGet(out var TypeOffsetsItem))
            {
                hash.Add(TypeOffsetsItem);
            }
            if (item.Deleted.TryGet(out var DeletedItem))
            {
                hash.Add(DeletedItem);
            }
            if (item.Author.TryGet(out var Authoritem))
            {
                hash.Add(Authoritem);
            }
            if (item.Description.TryGet(out var Descriptionitem))
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.MasterReferences);
            if (item.VestigialData.TryGet(out var VestigialDataitem))
            {
                hash.Add(VestigialDataitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ModHeader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<FormKey> GetLinkFormKeys(IModHeaderGetter obj)
        {
            yield break;
        }
        
        public void RemapLinks(IModHeaderGetter obj, IReadOnlyDictionary<FormKey, FormKey> mapping) => throw new NotImplementedException();
        #endregion
        
    }
    public partial class ModHeaderSetterTranslationCommon
    {
        public static readonly ModHeaderSetterTranslationCommon Instance = new ModHeaderSetterTranslationCommon();

        #region Deep Copy Fields From
        public void DeepCopyIn(
            IModHeader item,
            IModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.FormID) ?? true))
            {
                item.FormID = rhs.FormID;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Version) ?? true))
            {
                item.Version = rhs.Version;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
                    {
                        item.Stats = rhs.Stats.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                if(rhs.TypeOffsets.TryGet(out var TypeOffsetsrhs))
                {
                    item.TypeOffsets = TypeOffsetsrhs.ToArray();
                }
                else
                {
                    item.TypeOffsets = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Deleted) ?? true))
            {
                if(rhs.Deleted.TryGet(out var Deletedrhs))
                {
                    item.Deleted = Deletedrhs.ToArray();
                }
                else
                {
                    item.Deleted = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Author) ?? true))
            {
                item.Author = rhs.Author;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.MasterReferences) ?? true))
            {
                errorMask?.PushIndex((int)ModHeader_FieldIndex.MasterReferences);
                try
                {
                    item.MasterReferences.SetTo(
                        rhs.MasterReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ModHeader_FieldIndex.VestigialData) ?? true))
            {
                item.VestigialData = rhs.VestigialData;
            }
        }
        
        #endregion
        
        public ModHeader DeepCopy(
            IModHeaderGetter item,
            ModHeader.TranslationMask? copyMask = null)
        {
            ModHeader ret = (ModHeader)((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                copyMask: copyMask);
            return ret;
        }
        
        public ModHeader DeepCopy(
            IModHeaderGetter item,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? copyMask = null)
        {
            ModHeader ret = (ModHeader)((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: out errorMask,
                copyMask: copyMask);
            return ret;
        }
        
        public ModHeader DeepCopy(
            IModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ModHeader ret = (ModHeader)((ModHeaderCommon)((IModHeaderGetter)item).CommonInstance()!).GetNew();
            ret.DeepCopyIn(
                item,
                errorMask: errorMask,
                copyMask: copyMask);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ModHeader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModHeader_Registration.Instance;
        public static ModHeader_Registration Registration => ModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ModHeaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Xml Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModHeaderXmlWriteTranslation : IXmlWriteTranslator
    {
        public readonly static ModHeaderXmlWriteTranslation Instance = new ModHeaderXmlWriteTranslation();

        public static void WriteToNodeXml(
            IModHeaderGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Flags) ?? true))
            {
                EnumXmlTranslation<ModHeader.HeaderFlag>.Instance.Write(
                    node: node,
                    name: nameof(item.Flags),
                    item: item.Flags,
                    fieldIndex: (int)ModHeader_FieldIndex.Flags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.FormID) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.FormID),
                    item: item.FormID,
                    fieldIndex: (int)ModHeader_FieldIndex.FormID,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Version) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Version),
                    item: item.Version,
                    fieldIndex: (int)ModHeader_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Stats) ?? true))
            {
                var StatsItem = item.Stats;
                ((ModStatsXmlWriteTranslation)((IXmlItem)StatsItem).XmlWriteTranslator).Write(
                    item: StatsItem,
                    node: node,
                    name: nameof(item.Stats),
                    fieldIndex: (int)ModHeader_FieldIndex.Stats,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats));
            }
            if ((item.TypeOffsets != null)
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.TypeOffsets),
                    item: item.TypeOffsets.Value,
                    fieldIndex: (int)ModHeader_FieldIndex.TypeOffsets,
                    errorMask: errorMask);
            }
            if ((item.Deleted != null)
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Deleted) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Deleted),
                    item: item.Deleted.Value,
                    fieldIndex: (int)ModHeader_FieldIndex.Deleted,
                    errorMask: errorMask);
            }
            if ((item.Author != null)
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Author) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Author),
                    item: item.Author,
                    fieldIndex: (int)ModHeader_FieldIndex.Author,
                    errorMask: errorMask);
            }
            if ((item.Description != null)
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.Description) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.Description),
                    item: item.Description,
                    fieldIndex: (int)ModHeader_FieldIndex.Description,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.MasterReferences) ?? true))
            {
                ListXmlTranslation<IMasterReferenceGetter>.Instance.Write(
                    node: node,
                    name: nameof(item.MasterReferences),
                    item: item.MasterReferences,
                    fieldIndex: (int)ModHeader_FieldIndex.MasterReferences,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.MasterReferences),
                    transl: (XElement subNode, IMasterReferenceGetter subItem, ErrorMaskBuilder? listSubMask, TranslationCrystal? listTranslMask) =>
                    {
                        var Item = subItem;
                        ((MasterReferenceXmlWriteTranslation)((IXmlItem)Item).XmlWriteTranslator).Write(
                            item: Item,
                            node: subNode,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    });
            }
            if ((item.VestigialData != null)
                && (translationMask?.GetShouldTranslate((int)ModHeader_FieldIndex.VestigialData) ?? true))
            {
                UInt64XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.VestigialData),
                    item: item.VestigialData.Value,
                    fieldIndex: (int)ModHeader_FieldIndex.VestigialData,
                    errorMask: errorMask);
            }
        }

        public void Write(
            XElement node,
            IModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Oblivion.ModHeader");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Oblivion.ModHeader");
            }
            WriteToNodeXml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            object item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            Write(
                item: (IModHeaderGetter)item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public void Write(
            XElement node,
            IModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            int fieldIndex,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            errorMask?.PushIndex(fieldIndex);
            try
            {
                Write(
                    item: (IModHeaderGetter)item,
                    name: name,
                    node: node,
                    errorMask: errorMask,
                    translationMask: translationMask);
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

    }

    public partial class ModHeaderXmlCreateTranslation
    {
        public readonly static ModHeaderXmlCreateTranslation Instance = new ModHeaderXmlCreateTranslation();

        public static void FillPublicXml(
            IModHeader item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ModHeaderXmlCreateTranslation.FillPublicElementXml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElementXml(
            IModHeader item,
            XElement node,
            string name,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask)
        {
            switch (name)
            {
                case "Flags":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.Flags);
                    try
                    {
                        item.Flags = EnumXmlTranslation<ModHeader.HeaderFlag>.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FormID":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.FormID);
                    try
                    {
                        item.FormID = UInt32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Version":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.Version);
                    try
                    {
                        item.Version = Int32XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Stats":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.Stats);
                    try
                    {
                        item.Stats = LoquiXmlTranslation<ModStats>.Instance.Parse(
                            node: node,
                            errorMask: errorMask,
                            translationMask: translationMask?.GetSubCrystal((int)ModHeader_FieldIndex.Stats));
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "TypeOffsets":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.TypeOffsets);
                    try
                    {
                        item.TypeOffsets = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Deleted":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.Deleted);
                    try
                    {
                        item.Deleted = ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Author":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.Author);
                    try
                    {
                        item.Author = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Description":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.Description);
                    try
                    {
                        item.Description = StringXmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "MasterReferences":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.MasterReferences);
                    try
                    {
                        if (ListXmlTranslation<MasterReference>.Instance.Parse(
                            node: node,
                            enumer: out var MasterReferencesItem,
                            transl: LoquiXmlTranslation<MasterReference>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.MasterReferences.SetTo(MasterReferencesItem);
                        }
                        else
                        {
                            item.MasterReferences.Clear();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "VestigialData":
                    errorMask?.PushIndex((int)ModHeader_FieldIndex.VestigialData);
                    try
                    {
                        item.VestigialData = UInt64XmlTranslation.Instance.Parse(
                            node: node,
                            errorMask: errorMask);
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Xml Write Mixins
    public static class ModHeaderXmlTranslationMixIn
    {
        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null,
            string? name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = new ErrorMaskBuilder();
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ModHeader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            out ModHeader.ErrorMask errorMask,
            ModHeader.TranslationMask? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            var node = new XElement("topnode");
            WriteToXml(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask = null,
            string? name = null)
        {
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            XElement node,
            string? name = null,
            ModHeader.TranslationMask? translationMask = null)
        {
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            string path,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public static void WriteToXml(
            this IModHeaderGetter item,
            Stream stream,
            string? name = null)
        {
            var node = new XElement("topnode");
            ((ModHeaderXmlWriteTranslation)item.XmlWriteTranslator).Write(
                item: item,
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

    }
    #endregion


}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModHeaderBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public readonly static ModHeaderBinaryWriteTranslation Instance = new ModHeaderBinaryWriteTranslation();

        public static void WriteEmbedded(
            IModHeaderGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<ModHeader.HeaderFlag>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.FormID);
            writer.Write(item.Version);
        }

        public static void WriteRecordTypes(
            IModHeaderGetter item,
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter)
        {
            var StatsItem = item.Stats;
            ((ModStatsBinaryWriteTranslation)((IBinaryItem)StatsItem).BinaryWriteTranslator).Write(
                item: StatsItem,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.TypeOffsets,
                header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.OFST_HEADER));
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Deleted,
                header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.DELE_HEADER));
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Author,
                header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.CNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.SNAM_HEADER),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Binary.ListBinaryTranslation<IMasterReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.MasterReferences,
                transl: (MutagenWriter subWriter, IMasterReferenceGetter subItem, RecordTypeConverter? conv) =>
                {
                    var Item = subItem;
                    ((MasterReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        recordTypeConverter: conv);
                });
            Mutagen.Bethesda.Binary.UInt64BinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VestigialData,
                header: recordTypeConverter.ConvertToCustom(ModHeader_Registration.DATA_HEADER));
        }

        public void Write(
            MutagenWriter writer,
            IModHeaderGetter item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: recordTypeConverter.ConvertToCustom(ModHeader_Registration.TES4_HEADER),
                type: Mutagen.Bethesda.Binary.ObjectType.Record))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            RecordTypeConverter? recordTypeConverter = null)
        {
            Write(
                item: (IModHeaderGetter)item,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

    }

    public partial class ModHeaderBinaryCreateTranslation
    {
        public readonly static ModHeaderBinaryCreateTranslation Instance = new ModHeaderBinaryCreateTranslation();

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ModHeaderBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IModHeaderGetter item,
            MutagenWriter writer)
        {
            ((ModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                recordTypeConverter: null);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion.Internals
{
    public partial class ModHeaderBinaryOverlay :
        BinaryOverlay,
        IModHeaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ModHeader_Registration.Instance;
        public static ModHeader_Registration Registration => ModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IModHeaderGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.ToString(FileGeneration fg, string? name) => this.ToString(fg, name);
        IMask<bool> ILoquiObjectGetter.GetHasBeenSetIMask() => this.GetHasBeenSetMask();
        IMask<bool> IEqualsMask.GetEqualsIMask(object rhs, EqualsMaskHelper.Include include) => this.GetEqualsMask((IModHeaderGetter)rhs, include);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object XmlWriteTranslator => ModHeaderXmlWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IXmlItem.XmlWriteTranslator => this.XmlWriteTranslator;
        void IXmlItem.WriteToXml(
            XElement node,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? translationMask,
            string? name = null)
        {
            ((ModHeaderXmlWriteTranslation)this.XmlWriteTranslator).Write(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            RecordTypeConverter? recordTypeConverter = null)
        {
            ((ModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter);
        }

        public ModHeader.HeaderFlag Flags => (ModHeader.HeaderFlag)BinaryPrimitives.ReadInt32LittleEndian(_data.Span.Slice(0x0, 0x4));
        public UInt32 FormID => BinaryPrimitives.ReadUInt32LittleEndian(_data.Slice(0x4, 0x4));
        public Int32 Version => BinaryPrimitives.ReadInt32LittleEndian(_data.Slice(0x8, 0x4));
        #region Stats
        private RangeInt32? _StatsLocation;
        private IModStatsGetter? _Stats => _StatsLocation.HasValue ? ModStatsBinaryOverlay.ModStatsFactory(new BinaryMemoryReadStream(_data.Slice(_StatsLocation!.Value.Min)), _package) : default;
        public IModStatsGetter Stats => _Stats ?? new ModStats();
        #endregion
        #region TypeOffsets
        private int? _TypeOffsetsLocation;
        public ReadOnlyMemorySlice<Byte>? TypeOffsets => _TypeOffsetsLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _TypeOffsetsLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Deleted
        private int? _DeletedLocation;
        public ReadOnlyMemorySlice<Byte>? Deleted => _DeletedLocation.HasValue ? HeaderTranslation.ExtractSubrecordSpan(_data, _DeletedLocation.Value, _package.MetaData.Constants).ToArray() : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Author
        private int? _AuthorLocation;
        public String? Author => _AuthorLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _AuthorLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_data, _DescriptionLocation.Value, _package.MetaData.Constants)) : default(string?);
        #endregion
        public IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; private set; } = ListExt.Empty<MasterReferenceBinaryOverlay>();
        #region VestigialData
        private int? _VestigialDataLocation;
        public UInt64? VestigialData => _VestigialDataLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_data, _VestigialDataLocation.Value, _package.MetaData.Constants)) : default(UInt64?);
        #endregion
        partial void CustomCtor(
            IBinaryReadStream stream,
            int finalPos,
            int offset);

        protected ModHeaderBinaryOverlay(
            ReadOnlyMemorySlice<byte> bytes,
            BinaryOverlayFactoryPackage package)
            : base(
                bytes: bytes,
                package: package)
        {
        }

        public static ModHeaderBinaryOverlay ModHeaderFactory(
            BinaryMemoryReadStream stream,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            var ret = new ModHeaderBinaryOverlay(
                bytes: HeaderTranslation.ExtractRecordMemory(stream.RemainingMemory, package.MetaData.Constants),
                package: package);
            var finalPos = checked((int)(stream.Position + package.MetaData.Constants.MajorRecord(stream.RemainingSpan).TotalLength));
            int offset = stream.Position + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            stream.Position += 0xC + package.MetaData.Constants.MajorConstants.TypeAndLengthLength;
            ret.CustomCtor(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                recordTypeConverter: recordTypeConverter,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ModHeaderBinaryOverlay ModHeaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            RecordTypeConverter? recordTypeConverter = null)
        {
            return ModHeaderFactory(
                stream: new BinaryMemoryReadStream(slice),
                package: package,
                recordTypeConverter: recordTypeConverter);
        }

        public TryGet<int?> FillRecordType(
            BinaryMemoryReadStream stream,
            int finalPos,
            int offset,
            RecordType type,
            int? lastParsed,
            RecordTypeConverter? recordTypeConverter)
        {
            type = recordTypeConverter.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case 0x52444548: // HEDR
                {
                    _StatsLocation = new RangeInt32((stream.Position - offset), finalPos);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Stats);
                }
                case 0x5453464F: // OFST
                {
                    _TypeOffsetsLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.TypeOffsets);
                }
                case 0x454C4544: // DELE
                {
                    _DeletedLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Deleted);
                }
                case 0x4D414E43: // CNAM
                {
                    _AuthorLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Author);
                }
                case 0x4D414E53: // SNAM
                {
                    _DescriptionLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.Description);
                }
                case 0x5453414D: // MAST
                {
                    this.MasterReferences = this.ParseRepeatedTypelessSubrecord<MasterReferenceBinaryOverlay>(
                        stream: stream,
                        recordTypeConverter: recordTypeConverter,
                        trigger: ModHeader_Registration.MAST_HEADER,
                        factory:  MasterReferenceBinaryOverlay.MasterReferenceFactory);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.MasterReferences);
                }
                case 0x41544144: // DATA
                {
                    _VestigialDataLocation = (ushort)(stream.Position - offset);
                    return TryGet<int?>.Succeed((int)ModHeader_FieldIndex.VestigialData);
                }
                default:
                    return TryGet<int?>.Succeed(null);
            }
        }
        #region To String

        public void ToString(
            FileGeneration fg,
            string? name = null)
        {
            ModHeaderMixIn.ToString(
                item: this,
                name: name);
        }

        #endregion

    }

}
#endregion

#endregion

