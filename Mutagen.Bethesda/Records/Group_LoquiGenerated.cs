/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using CSharpExt.Rx;
using ReactiveUI;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading.Tasks;
using Noggog.Utility;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public partial class Group<T> : 
        LoquiNotifyingObject,
        IGroup<T>,
        ILoquiObject<Group<T>>,
        ILoquiObjectSetter,
        ILinkSubContainer,
        IEquatable<Group<T>>
        where T : IMajorRecord, ILoquiObject<T>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Group_Registration.Instance;
        public static Group_Registration Registration => Group_Registration.Instance;

        #region Ctor
        public Group()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        static Group()
        {
            T_RecordType = (RecordType)LoquiRegistration.GetRegister(typeof(T)).GetType().GetField(Mutagen.Bethesda.Constants.TRIGGERING_RECORDTYPE_MEMBER).GetValue(null);
            
        }

        #region ContainedRecordType
        private String _ContainedRecordType;
        public String ContainedRecordType
        {
            get => this._ContainedRecordType;
            protected set => this.RaiseAndSetIfReferenceChanged(ref this._ContainedRecordType, value, nameof(ContainedRecordType));
        }
        #endregion
        #region GroupType
        private GroupTypeEnum _GroupType;
        public GroupTypeEnum GroupType
        {
            get => this._GroupType;
            set => this.RaiseAndSetIfChanged(ref this._GroupType, value, nameof(GroupType));
        }
        #endregion
        #region LastModified
        private Byte[] _LastModified = new byte[4];
        public Byte[] LastModified
        {
            get => _LastModified;
            set
            {
                this._LastModified = value;
                if (value == null)
                {
                    this._LastModified = new byte[4];
                }
            }
        }
        #endregion
        #region Items
        private readonly SourceSetCache<T, FormKey> _Items = new SourceSetCache<T, FormKey>((item) => item.FormKey);
        public ISourceSetCache<T, FormKey> Items => _Items;
        #region Interface Members
        ISourceSetCache<T, FormKey> IGroup<T>.Items => _Items;
        IObservableSetCache<T, FormKey> IGroupGetter<T>.Items => _Items;
        #endregion

        #endregion

        IMask<bool> IEqualsMask<Group<T>>.GetEqualsMask(Group<T> rhs, EqualsMaskHelper.Include include) => GroupCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IGroupGetter<T>>.GetEqualsMask(IGroupGetter<T> rhs, EqualsMaskHelper.Include include) => GroupCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public string ToString(
            string name = null,
            Group_Mask<bool> printMask = null)
        {
            return GroupCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            GroupCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Group_Mask<bool> GetHasBeenSetMask()
        {
            return GroupCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Group<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Group<T> rhs)
        {
            if (rhs == null) return false;
            if (!string.Equals(this.ContainedRecordType, rhs.ContainedRecordType)) return false;
            if (this.GroupType != rhs.GroupType) return false;
            if (!ByteExt.EqualsFast(this.LastModified, rhs.LastModified)) return false;
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!this.Items.SequenceEqual(rhs.Items)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ContainedRecordType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GroupType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LastModified).CombineHashCode(ret);
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Group<T> Create_Xml<T_ErrMask, T_TranslMask>(
            XElement node,
            out Group_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static Group<T> Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            MissingCreate missing = MissingCreate.New)
        {
            switch (missing)
            {
                case MissingCreate.New:
                case MissingCreate.Null:
                    if (node == null) return missing == MissingCreate.New ? new Group<T>() : null;
                    break;
                default:
                    break;
            }
            var ret = new Group<T>();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    GroupCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Group<T> Create_Xml<T_ErrMask, T_TranslMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Group<T> Create_Xml<T_ErrMask, T_TranslMask>(
            string path,
            ErrorMaskBuilder errorMask,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = System.IO.File.Exists(path) ? XDocument.Load(path).Root : null;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static Group<T> Create_Xml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Group<T> Create_Xml<T_ErrMask, T_TranslMask>(
            Stream stream,
            ErrorMaskBuilder errorMask,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            MissingCreate missing = MissingCreate.New)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                missing: missing,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml<T_ErrMask, T_TranslMask>(
            XElement node,
            out Group_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            string name = null)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml<T_ErrMask, T_TranslMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml<T_ErrMask, T_TranslMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_TranslationMask<T_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml<T_ErrMask, T_TranslMask>(
            XElement node,
            string name = null,
            Group_TranslationMask<T_TranslMask> translationMask = null)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            GroupCommon.Write_Xml<T>(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            Group<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Group_FieldIndex)index)
            {
                case Group_FieldIndex.Items:
                    return Items.HasBeenSet;
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region Mutagen
        public static readonly RecordType GRUP_RECORD_TYPE = (RecordType)typeof(T).GetField(Mutagen.Bethesda.Constants.GRUP_RECORDTYPE_MEMBER).GetValue(null);
        public static readonly RecordType T_RecordType;
        public IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            foreach (var item in Items.Items.WhereCastable<T, ILinkContainer>()
                .SelectMany((f) => f.Links))
            {
                yield return item;
            }
            yield break;
        }

        public void Link<M>(
            ModList<M> modList,
            M sourceMod)
            where M : IMod<M>
        {
            foreach (var item in Items.Items.WhereCastable<T, ILinkSubContainer>())
            {
                item.Link(
                    modList,
                    sourceMod);
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Group<T> Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            MasterReferences masterReferences,
            out Group_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Binary(
                masterReferences: masterReferences,
                frame: frame,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static Group<T> Create_Binary(
            MutagenFrame frame,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            var ret = new Group<T>();
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseGroup(frame.Reader));
            UtilityTranslation.GroupParse(
                record: ret,
                frame: frame,
                masterReferences: masterReferences,
                errorMask: errorMask,
                recordTypeConverter: recordTypeConverter,
                fillStructs: Fill_Binary_Structs,
                fillTyped: Fill_Binary_RecordTypes);
            return ret;
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary<T_ErrMask>(
            MutagenWriter writer,
            MasterReferences masterReferences,
            out Group_ErrorMask<T_ErrMask> errorMask,
            bool doMasks = true)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public void Write_Binary<T_ErrMask>(
            MutagenWriter writer,
            MasterReferences masterReferences)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            this.Write_Binary(
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public void Write_Binary(
            MutagenWriter writer,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            GroupCommon.Write_Binary<T>(
                item: this,
                masterReferences: masterReferences,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        static partial void FillBinary_ContainedRecordType_Custom(
            MutagenFrame frame,
            Group<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        static partial void WriteBinary_ContainedRecordType_Custom(
            MutagenWriter writer,
            Group<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask);

        public static void WriteBinary_ContainedRecordType(
            MutagenWriter writer,
            Group<T> item,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            WriteBinary_ContainedRecordType_Custom(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
        }

        protected static void Fill_Binary_Structs(
            Group<T> item,
            MutagenFrame frame,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask)
        {
            FillBinary_ContainedRecordType_Custom(
                frame: frame,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            try
            {
                errorMask?.PushIndex((int)Group_FieldIndex.GroupType);
                if (EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out GroupTypeEnum GroupTypeParse,
                    errorMask: errorMask))
                {
                    item.GroupType = GroupTypeParse;
                }
                else
                {
                    item.GroupType = default(GroupTypeEnum);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)Group_FieldIndex.LastModified);
                if (Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out Byte[] LastModifiedParse,
                    errorMask: errorMask))
                {
                    item.LastModified = LastModifiedParse;
                }
                else
                {
                    item.LastModified = default(Byte[]);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            Group<T> item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            MasterReferences masterReferences,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            nextRecordType = recordTypeConverter.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    if (nextRecordType.Equals(T_RecordType))
                    {
                        Mutagen.Bethesda.Binary.ListBinaryTranslation<T>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: T_RecordType,
                            item: item.Items,
                            fieldIndex: (int)Group_FieldIndex.Items,
                            lengthLength: 4,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, out T dictSubItem, ErrorMaskBuilder dictSubMask) =>
                            {
                                return LoquiBinaryTranslation<T>.Instance.Parse(
                                    frame: r,
                                    item: out dictSubItem,
                                    errorMask: dictSubMask,
                                    masterReferences: masterReferences);
                            }
                            );
                        return TryGet<int?>.Failure;
                    }
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Mutagen.Bethesda.Constants.RECORD_LENGTH;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public Group<T> Copy<T_CopyMask>(
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : class, new()
        {
            return Group<T>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Group<T> Copy<T_CopyMask>(
            IGroup<T> item,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : class, new()
        {
            Group<T> ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>();
            }
            else
            {
                ret = (Group<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<T_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Group<T> Copy_ToLoqui<T_CopyMask>(
            IGroupGetter<T> item,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : class, new()
        {
            Group<T> ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>() as Group<T>;
            }
            else
            {
                ret = (Group<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<T_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom<T_CopyMask>(IGroupGetter<T> rhs)
            where T_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ErrorMaskPlaceholder, T_CopyMask>(
                rhs: (IGroupGetter<T>)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null);
        }

        public void CopyFieldsFrom<T_CopyMask>(
            IGroupGetter<T> rhs,
            Group_CopyMask<T_CopyMask> copyMask,
            IGroupGetter<T> def = null)
            where T_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ErrorMaskPlaceholder, T_CopyMask>(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask);
        }

        public void CopyFieldsFrom<T_ErrMask, T_CopyMask>(
            IGroupGetter<T> rhs,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null,
            bool doMasks = true)
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : class, new()
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GroupCommon.CopyFieldsFrom<T, T_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask);
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom<T_CopyMask>(
            IGroupGetter<T> rhs,
            ErrorMaskBuilder errorMask,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null,
            bool doMasks = true)
            where T_CopyMask : class, new()
        {
            GroupCommon.CopyFieldsFrom<T, T_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask);
        }

        protected void SetNthObject(ushort index, object obj)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case Group_FieldIndex.GroupType:
                    this.GroupType = (GroupTypeEnum)obj;
                    break;
                case Group_FieldIndex.LastModified:
                    this.LastModified = (Byte[])obj;
                    break;
                case Group_FieldIndex.Items:
                    this.Items.SetTo((IEnumerable<T>)(SourceSetCache<T, FormKey>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial();

        protected void CallClearPartial_Internal()
        {
            ClearPartial();
        }

        public void Clear()
        {
            CallClearPartial_Internal();
            GroupCommon.Clear(this);
        }


        public static Group<T> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Group<T>();
            foreach (var pair in fields)
            {
                CopyInInternal_Group(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Group(Group<T> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Group_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                    obj.GroupType = (GroupTypeEnum)pair.Value;
                    break;
                case Group_FieldIndex.LastModified:
                    obj.LastModified = (Byte[])pair.Value;
                    break;
                case Group_FieldIndex.Items:
                    obj.Items.SetTo((IEnumerable<T>)(SourceSetCache<T, FormKey>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
    }
    #endregion

    #region Interface
    public partial interface IGroup<T> : IGroupGetter<T>, ILoquiClass<IGroup<T>, IGroupGetter<T>>, ILoquiClass<Group<T>, IGroupGetter<T>>
        where T : IMajorRecord, ILoquiObject<T>
    {
        new GroupTypeEnum GroupType { get; set; }

        new Byte[] LastModified { get; set; }

        new ISourceSetCache<T, FormKey> Items { get; }
    }

    public partial interface IGroupGetter<T> : ILoquiObject
        where T : IMajorRecord, ILoquiObject<T>
    {
        #region ContainedRecordType
        String ContainedRecordType { get; }

        #endregion
        #region GroupType
        GroupTypeEnum GroupType { get; }

        #endregion
        #region LastModified
        Byte[] LastModified { get; }

        #endregion
        #region Items
        IObservableSetCache<T, FormKey> Items { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum Group_FieldIndex
    {
        ContainedRecordType = 0,
        GroupType = 1,
        LastModified = 2,
        Items = 3,
    }
    #endregion

    #region Registration
    public class Group_Registration : ILoquiRegistration
    {
        public static readonly Group_Registration Instance = new Group_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 11,
            version: 0);

        public const string GUID = "35a37d0b-4676-4dba-9410-a5972e262f5d";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Group_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Group_ErrorMask<>);

        public static readonly Type ClassType = typeof(Group<>);

        public static readonly Type GetterType = typeof(IGroupGetter<>);

        public static readonly Type SetterType = typeof(IGroup<>);

        public static readonly Type CommonType = typeof(GroupCommon);

        public const string FullName = "Mutagen.Bethesda.Group";

        public const string Name = "Group";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(Group_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CONTAINEDRECORDTYPE":
                    return (ushort)Group_FieldIndex.ContainedRecordType;
                case "GROUPTYPE":
                    return (ushort)Group_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)Group_FieldIndex.LastModified;
                case "ITEMS":
                    return (ushort)Group_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return "ContainedRecordType";
                case Group_FieldIndex.GroupType:
                    return "GroupType";
                case Group_FieldIndex.LastModified:
                    return "LastModified";
                case Group_FieldIndex.Items:
                    return "Items";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return true;
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return true;
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRUP_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class Group_Registration<T> : Group_Registration
        where T : IMajorRecord, ILoquiObject<T>
    {
        public static readonly Group_Registration<T> GenericInstance = new Group_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return typeof(String);
                case Group_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case Group_FieldIndex.LastModified:
                    return typeof(Byte[]);
                case Group_FieldIndex.Items:
                    return typeof(SourceSetCache<T, FormKey>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class GroupCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<T, T_CopyMask>(
            IGroup<T> item,
            IGroupGetter<T> rhs,
            IGroupGetter<T> def,
            ErrorMaskBuilder errorMask,
            Group_CopyMask<T_CopyMask> copyMask)
            where T : IMajorRecord, ILoquiObject<T>
            where T_CopyMask : class, new()
        {
            if (copyMask?.GroupType ?? true)
            {
                errorMask?.PushIndex((int)Group_FieldIndex.GroupType);
                try
                {
                    item.GroupType = rhs.GroupType;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.LastModified ?? true)
            {
                errorMask?.PushIndex((int)Group_FieldIndex.LastModified);
                try
                {
                    item.LastModified = rhs.LastModified;
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Group_FieldIndex.Items);
                try
                {
                    item.Items.SetToWithDefault(
                        rhs.Items,
                        def?.Items,
                        (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return LoquiRegistration.GetCopyFunc<T>()(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void Clear<T>(IGroup<T> item)
            where T : IMajorRecord, ILoquiObject<T>
        {
            item.GroupType = default(GroupTypeEnum);
            item.LastModified = default(Byte[]);
            item.Items.Unset();
        }

        public static Group_Mask<bool> GetEqualsMask<T>(
            this IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : IMajorRecord, ILoquiObject<T>
        {
            var ret = new Group_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask<T>(
            IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            Group_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : IMajorRecord, ILoquiObject<T>
        {
            if (rhs == null) return;
            ret.ContainedRecordType = string.Equals(item.ContainedRecordType, rhs.ContainedRecordType);
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = ByteExt.EqualsFast(item.LastModified, rhs.LastModified);
            ret.Items = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.Items,
                rhs: rhs.Items,
                maskGetter: (k, l, r) => l.GetEqualsMask(r, include),
                include: include);
        }

        public static string ToString<T>(
            this IGroupGetter<T> item,
            string name = null,
            Group_Mask<bool> printMask = null)
            where T : IMajorRecord, ILoquiObject<T>
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<T>(
            this IGroupGetter<T> item,
            FileGeneration fg,
            string name = null,
            Group_Mask<bool> printMask = null)
            where T : IMajorRecord, ILoquiObject<T>
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Group<T>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Group<T>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ContainedRecordType ?? true)
                {
                    fg.AppendLine($"ContainedRecordType => {item.ContainedRecordType}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {item.GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {item.LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Value?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<T>(
            this IGroupGetter<T> item,
            Group_Mask<bool?> checkMask)
            where T : IMajorRecord, ILoquiObject<T>
        {
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            return true;
        }

        public static Group_Mask<bool> GetHasBeenSetMask<T>(IGroupGetter<T> item)
            where T : IMajorRecord, ILoquiObject<T>
        {
            var ret = new Group_Mask<bool>();
            ret.ContainedRecordType = true;
            ret.GroupType = true;
            ret.LastModified = true;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItemIndexed<FormKey, bool, IMask<bool>>>>(item.Items.HasBeenSet, item.Items.Values.Select((i) => new MaskItemIndexed<FormKey, bool, IMask<bool>>(i.FormKey, true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml<T, T_ErrMask, T_TranslMask>(
            XElement node,
            Group<T> item,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_TranslationMask<T_TranslMask> translationMask,
            string name = null)
            where T : IMajorRecord, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
            where T_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml<T>(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void Write_Xml<T>(
            XElement node,
            Group<T> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
            where T : IMajorRecord, ILoquiObject<T>
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.Group");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.Group");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml<T>(
            this Group<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where T : IMajorRecord, ILoquiObject<T>
        {
            if ((translationMask?.GetShouldTranslate((int)Group_FieldIndex.GroupType) ?? true))
            {
                EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                    node: node,
                    name: nameof(item.GroupType),
                    item: item.GroupType,
                    fieldIndex: (int)Group_FieldIndex.GroupType,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Group_FieldIndex.LastModified) ?? true))
            {
                ByteArrayXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.LastModified),
                    item: item.LastModified,
                    fieldIndex: (int)Group_FieldIndex.LastModified,
                    errorMask: errorMask);
            }
            if (item.Items.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)Group_FieldIndex.Items) ?? true))
            {
                try
                {
                    errorMask?.PushIndex((int)Group_FieldIndex.Items);
                    KeyedDictXmlTranslation<FormKey, T>.Instance.Write(
                        node: node,
                        name: nameof(item.Items),
                        items: item.Items.Items,
                        translationMask: translationMask,
                        errorMask: errorMask,
                        valTransl: (XElement subNode, T subItem, ErrorMaskBuilder dictSubMask, TranslationCrystal dictTranslMask) =>
                        {
                            LoquiXmlTranslation<T>.Instance.Write(
                                node: subNode,
                                item: subItem,
                                name: null,
                                errorMask: dictSubMask,
                                translationMask: dictTranslMask);
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        public static void FillPublic_Xml<T>(
            this Group<T> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where T : IMajorRecord, ILoquiObject<T>
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    GroupCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml<T>(
            this Group<T> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where T : IMajorRecord, ILoquiObject<T>
        {
            switch (name)
            {
                case "GroupType":
                    try
                    {
                        errorMask?.PushIndex((int)Group_FieldIndex.GroupType);
                        if (EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                            node: node,
                            item: out GroupTypeEnum GroupTypeParse,
                            errorMask: errorMask))
                        {
                            item.GroupType = GroupTypeParse;
                        }
                        else
                        {
                            item.GroupType = default(GroupTypeEnum);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "LastModified":
                    try
                    {
                        errorMask?.PushIndex((int)Group_FieldIndex.LastModified);
                        if (ByteArrayXmlTranslation.Instance.Parse(
                            node: node,
                            item: out Byte[] LastModifiedParse,
                            errorMask: errorMask))
                        {
                            item.LastModified = LastModifiedParse;
                        }
                        else
                        {
                            item.LastModified = default(Byte[]);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Items":
                    KeyedDictXmlTranslation<FormKey, T>.Instance.ParseInto(
                        node: node,
                        item: item.Items,
                        fieldIndex: (int)Group_FieldIndex.Items,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        valTransl: LoquiXmlTranslation<T>.Instance.Parse);
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary<T, T_ErrMask>(
            MutagenWriter writer,
            Group<T> item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T : IMajorRecord, ILoquiObject<T>
            where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary<T>(
                masterReferences: masterReferences,
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = Group_ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void Write_Binary<T>(
            MutagenWriter writer,
            Group<T> item,
            MasterReferences masterReferences,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
            where T : IMajorRecord, ILoquiObject<T>
        {
            using (HeaderExport.ExportHeader(
                writer: writer,
                record: Group_Registration.GRUP_HEADER,
                type: ObjectType.Group))
            {
                Write_Binary_Embedded(
                    item: item,
                    writer: writer,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
                Write_Binary_RecordTypes(
                    item: item,
                    writer: writer,
                    recordTypeConverter: recordTypeConverter,
                    errorMask: errorMask,
                    masterReferences: masterReferences);
            }
        }
        #endregion

        public static void Write_Binary_Embedded<T>(
            Group<T> item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
            where T : IMajorRecord, ILoquiObject<T>
        {
            Group<T>.WriteBinary_ContainedRecordType(
                writer: writer,
                item: item,
                masterReferences: masterReferences,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType,
                length: 4,
                fieldIndex: (int)Group_FieldIndex.GroupType,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LastModified,
                fieldIndex: (int)Group_FieldIndex.LastModified,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes<T>(
            Group<T> item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask,
            MasterReferences masterReferences)
            where T : IMajorRecord, ILoquiObject<T>
        {
            if (item.Items.HasBeenSet)
            {
                Mutagen.Bethesda.Binary.ListBinaryTranslation<T>.Instance.Write(
                    writer: writer,
                    items: item.Items.Items,
                    fieldIndex: (int)Group_FieldIndex.Items,
                    errorMask: errorMask,
                    transl: (MutagenWriter r, T dictSubItem, ErrorMaskBuilder dictSubMask) =>
                    {
                        LoquiBinaryTranslation<T>.Instance.Write(
                            writer: r,
                            item: dictSubItem,
                            errorMask: dictSubMask,
                            masterReferences: masterReferences);
                    }
                    );
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Group_Mask<T> : IMask<T>, IEquatable<Group_Mask<T>>
    {
        #region Ctors
        public Group_Mask()
        {
        }

        public Group_Mask(T initialValue)
        {
            this.ContainedRecordType = initialValue;
            this.GroupType = initialValue;
            this.LastModified = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItemIndexed<FormKey, T, IMask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ContainedRecordType;
        public T GroupType;
        public T LastModified;
        public MaskItem<T, IEnumerable<MaskItemIndexed<FormKey, T, IMask<T>>>> Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Group_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Group_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ContainedRecordType, rhs.ContainedRecordType)) return false;
            if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
            if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ContainedRecordType?.GetHashCode());
            ret = ret.CombineHashCode(this.GroupType?.GetHashCode());
            ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ContainedRecordType)) return false;
            if (!eval(this.GroupType)) return false;
            if (!eval(this.LastModified)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public Group_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Group_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Group_Mask<R> obj, Func<T, R> eval)
        {
            obj.ContainedRecordType = eval(this.ContainedRecordType);
            obj.GroupType = eval(this.GroupType);
            obj.LastModified = eval(this.LastModified);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<FormKey, R, IMask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItemIndexed<FormKey, R, IMask<R>>> l = new List<MaskItemIndexed<FormKey, R, IMask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific)
                    {
                        MaskItemIndexed<FormKey, R, IMask<R>> mask = default(MaskItemIndexed<FormKey, R, IMask<R>>);
                        throw new NotImplementedException();
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Group_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Group_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Group_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ContainedRecordType ?? true)
                {
                    fg.AppendLine($"ContainedRecordType => {ContainedRecordType}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Group_ErrorMask<T_ErrMask> : IErrorMask, IErrorMask<Group_ErrorMask<T_ErrMask>>
        where T_ErrMask : class, IErrorMask<T_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ContainedRecordType;
        public Exception GroupType;
        public Exception LastModified;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>> Items;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return ContainedRecordType;
                case Group_FieldIndex.GroupType:
                    return GroupType;
                case Group_FieldIndex.LastModified:
                    return LastModified;
                case Group_FieldIndex.Items:
                    return Items;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    this.ContainedRecordType = ex;
                    break;
                case Group_FieldIndex.GroupType:
                    this.GroupType = ex;
                    break;
                case Group_FieldIndex.LastModified:
                    this.LastModified = ex;
                    break;
                case Group_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    this.ContainedRecordType = (Exception)obj;
                    break;
                case Group_FieldIndex.GroupType:
                    this.GroupType = (Exception)obj;
                    break;
                case Group_FieldIndex.LastModified:
                    this.LastModified = (Exception)obj;
                    break;
                case Group_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ContainedRecordType != null) return true;
            if (GroupType != null) return true;
            if (LastModified != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Group_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ContainedRecordType => {ContainedRecordType}");
            fg.AppendLine($"GroupType => {GroupType}");
            fg.AppendLine($"LastModified => {LastModified}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Group_ErrorMask<T_ErrMask> Combine(Group_ErrorMask<T_ErrMask> rhs)
        {
            var ret = new Group_ErrorMask<T_ErrMask>();
            ret.ContainedRecordType = this.ContainedRecordType.Combine(rhs.ContainedRecordType);
            ret.GroupType = this.GroupType.Combine(rhs.GroupType);
            ret.LastModified = this.LastModified.Combine(rhs.LastModified);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, T_ErrMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            return ret;
        }
        public static Group_ErrorMask<T_ErrMask> Combine(Group_ErrorMask<T_ErrMask> lhs, Group_ErrorMask<T_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Group_ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Group_ErrorMask<T_ErrMask>();
        }
        #endregion

    }
    public class Group_CopyMask<T_CopyMask>
        where T_CopyMask : class, new()
    {
        public Group_CopyMask()
        {
        }

        public Group_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.ContainedRecordType = defaultOn;
            this.GroupType = defaultOn;
            this.LastModified = defaultOn;
            this.Items = new MaskItem<CopyOption, T_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public bool ContainedRecordType;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<CopyOption, T_CopyMask> Items;
        #endregion

    }

    public class Group_TranslationMask<T_TranslMask> : ITranslationMask
        where T_TranslMask : class, ITranslationMask, new()
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ContainedRecordType;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<bool, T_TranslMask> Items;
        #endregion

        #region Ctors
        public Group_TranslationMask()
        {
        }

        public Group_TranslationMask(bool defaultOn)
        {
            this.ContainedRecordType = defaultOn;
            this.GroupType = defaultOn;
            this.LastModified = defaultOn;
            this.Items = new MaskItem<bool, T_TranslMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ContainedRecordType, null));
            ret.Add((GroupType, null));
            ret.Add((LastModified, null));
            ret.Add((Items?.Overall ?? true, Items?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
