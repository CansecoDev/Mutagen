/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public partial class Group<T> : IGroup<T>, ILoquiObjectSetter, IEquatable<Group<T>>
        where T : MajorRecord, ILoquiObjectGetter
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Group_Registration.Instance;
        public static Group_Registration Registration => Group_Registration.Instance;

        #region Ctor
        public Group()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        static Group()
        {
            var register = LoquiRegistration.GetRegister(typeof(T));
            T_RecordType = (RecordType)register.GetType().GetField("TRIGGERING_RECORD_TYPE").GetValue(null);
            
        }

        #region ContainedRecordType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<String> _ContainedRecordType = NotifyingItem.Factory<String>();
        public INotifyingItemGetter<String> ContainedRecordType_Property => _ContainedRecordType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String ContainedRecordType
        {
            get => this._ContainedRecordType.Item;
            protected set => this._ContainedRecordType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<String> IGroupGetter<T>.ContainedRecordType_Property => this.ContainedRecordType_Property;
        #endregion
        #region GroupType
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected INotifyingItem<GroupTypeEnum> _GroupType = NotifyingItem.Factory<GroupTypeEnum>();
        public INotifyingItem<GroupTypeEnum> GroupType_Property => _GroupType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public GroupTypeEnum GroupType
        {
            get => this._GroupType.Item;
            set => this._GroupType.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<GroupTypeEnum> IGroup<T>.GroupType_Property => this.GroupType_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<GroupTypeEnum> IGroupGetter<T>.GroupType_Property => this.GroupType_Property;
        #endregion
        #region LastModified
        protected INotifyingItem<Byte[]> _LastModified = NotifyingItem.Factory<Byte[]>(noNullFallback: () => new byte[4]);
        public INotifyingItem<Byte[]> LastModified_Property => _LastModified;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Byte[] LastModified
        {
            get => this._LastModified.Item;
            set => this._LastModified.Set(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<Byte[]> IGroup<T>.LastModified_Property => this.LastModified_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<Byte[]> IGroupGetter<T>.LastModified_Property => this.LastModified_Property;
        #endregion
        #region Items
        private readonly INotifyingKeyedCollection<FormID, T> _Items = new NotifyingKeyedCollection<FormID, T>((item) => item.FormID);
        public INotifyingKeyedCollection<FormID, T> Items => _Items;
        #region Interface Members
        INotifyingKeyedCollection<FormID, T> IGroup<T>.Items => _Items;
        INotifyingKeyedCollectionGetter<FormID, T> IGroupGetter<T>.Items => _Items;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => GroupCommon.GetNthObject<T>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => GroupCommon.GetNthObjectHasBeenSet<T>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => GroupCommon.UnsetNthObject<T>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            GroupCommon.SetNthObjectHasBeenSet<T>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return GroupCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Group_Mask<bool> printMask = null)
        {
            return GroupCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            GroupCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public Group_Mask<bool> GetHasBeenSetMask()
        {
            return GroupCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Group<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Group<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(ContainedRecordType, rhs.ContainedRecordType)) return false;
            if (GroupType != rhs.GroupType) return false;
            if (!LastModified.EqualsFast(rhs.LastModified)) return false;
            if (Items.HasBeenSet != rhs.Items.HasBeenSet) return false;
            if (Items.HasBeenSet)
            {
                if (!Items.SequenceEqual(rhs.Items)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ContainedRecordType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(GroupType).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(LastModified).CombineHashCode(ret);
            if (Items.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Items).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static Group<T> Create_XML(XElement root)
        {
            return Create_XML<MajorRecord_ErrorMask>(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Group<T> Create_XML<T_ErrMask>(
            XElement root,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Group<T> Create_XML<T_ErrMask>(
            XElement root,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = Create_XML<T_ErrMask>(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Group<T> Object, Group_ErrorMask<T_ErrMask> ErrorMask) Create_XML<T_ErrMask>(
            XElement root,
            bool doMasks)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Group_ErrorMask<T_ErrMask> errMaskRet = null;
            var ret = Create_XML_Internal<T_ErrMask>(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask<T_ErrMask>()) : default(Func<Group_ErrorMask<T_ErrMask>>));
            return (ret, errMaskRet);
        }

        public static Group<T> Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static Group<T> Create_XML<T_ErrMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static Group<T> Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static Group<T> Create_XML<T_ErrMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Group<T>, Group_ErrorMask<MajorRecord_ErrorMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML<T_ErrMask>(
            XElement root,
            out Group_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LoquiXmlTranslation<Group<T>, Group_ErrorMask<T_ErrMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<T_ErrMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<T_ErrMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML<T_ErrMask>(
            XmlWriter writer,
            out Group_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            errorMask = (Group_ErrorMask<T_ErrMask>)this.Write_XML_Internal<T_ErrMask>(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML<T_ErrMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML<T_ErrMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            Write_XML<MajorRecord_ErrorMask>(
                writer: writer,
                name: name);
        }

        public void Write_XML<T_ErrMask>(
            XmlWriter writer,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            this.Write_XML_Internal<T_ErrMask>(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            Write_XML<MajorRecord_ErrorMask>(
                path: path,
                name: name);
        }

        public void Write_XML<T_ErrMask>(
            string path,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            Write_XML<MajorRecord_ErrorMask>(
                stream: stream,
                name: name);
        }

        public void Write_XML<T_ErrMask>(
            Stream stream,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal<T_ErrMask>(
            XmlWriter writer,
            bool doMasks,
            string name = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            GroupCommon.Write_XML<T, T_ErrMask>(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static Group<T> Create_XML_Internal<T_ErrMask>(
            XElement root,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = new Group<T>();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal<T_ErrMask>(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal<T_ErrMask>(
            Group<T> item,
            XElement root,
            string name,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            switch (name)
            {
                case "ContainedRecordType":
                    item._ContainedRecordType.SetIfSucceeded(StringXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Group_FieldIndex.ContainedRecordType,
                        errorMask: errorMask));
                    break;
                case "GroupType":
                    item._GroupType.SetIfSucceeded(EnumXmlTranslation<GroupTypeEnum>.Instance.Parse(
                        root,
                        nullable: false,
                        fieldIndex: (int)Group_FieldIndex.GroupType,
                        errorMask: errorMask).Bubble((o) => o.Value));
                    break;
                case "LastModified":
                    item._LastModified.SetIfSucceeded(ByteArrayXmlTranslation.Instance.Parse(
                        root,
                        fieldIndex: (int)Group_FieldIndex.LastModified,
                        errorMask: errorMask));
                    break;
                case "Items":
                    item._Items.SetIfSucceeded(KeyedDictXmlTranslation<FormID, T, MaskItem<Exception, T_ErrMask>>.Instance.Parse(
                        root: root,
                        fieldIndex: (int)Group_FieldIndex.Items,
                        errorMask: errorMask,
                        valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, T_ErrMask> dictSubMask) =>
                        {
                            return LoquiXmlTranslation<T, T_ErrMask>.Instance.Parse(
                                root: r,
                                doMasks: dictDoMasks,
                                errorMask: out dictSubMask);
                        }
                        ));
                    break;
                default:
                    break;
            }
        }

        #endregion

        #region Mutagen
        public static readonly RecordType T_RecordType;
        #endregion

        #region Binary Translation
        #region Binary Create
        [DebuggerStepThrough]
        public static Group<T> Create_Binary(MutagenFrame frame)
        {
            return Create_Binary<MajorRecord_ErrorMask>(
                frame: frame,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static Group<T> Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            return Create_Binary(
                frame: frame,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static Group<T> Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = Create_Binary<T_ErrMask>(
                frame: frame,
                recordTypeConverter: null,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (Group<T> Object, Group_ErrorMask<T_ErrMask> ErrorMask) Create_Binary<T_ErrMask>(
            MutagenFrame frame,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Group_ErrorMask<T_ErrMask> errMaskRet = null;
            var ret = Create_Binary_Internal(
                frame: frame,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask<T_ErrMask>()) : default(Func<Group_ErrorMask<T_ErrMask>>),
                recordTypeConverter: recordTypeConverter);
            return (ret, errMaskRet);
        }

        public static Group<T> Create_Binary(string path)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Group<T> Create_Binary<T_ErrMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        public static Group<T> Create_Binary(Stream stream)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(frame: frame);
            }
        }

        public static Group<T> Create_Binary<T_ErrMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                return Create_Binary(
                    frame: frame,
                    errorMask: out errorMask);
            }
        }

        #endregion

        #region Binary Copy In
        public void CopyIn_Binary(
            MutagenFrame frame,
            NotifyingFireParameters cmds = null)
        {
            LoquiBinaryTranslation<Group<T>, Group_ErrorMask<MajorRecord_ErrorMask>>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_Binary<T_ErrMask>(
            MutagenFrame frame,
            out Group_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            LoquiBinaryTranslation<Group<T>, Group_ErrorMask<T_ErrMask>>.Instance.CopyIn(
                frame: frame,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_Binary(
            string path,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary<T_ErrMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(path))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    cmds: cmds);
            }
        }

        public void CopyIn_Binary<T_ErrMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask,
            NotifyingFireParameters cmds = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var reader = new MutagenReader(stream))
            {
                var frame = new MutagenFrame(reader);
                this.CopyIn_Binary(
                    frame: frame,
                    errorMask: out errorMask,
                    cmds: cmds);
            }
        }

        #endregion

        #region Binary Write
        public virtual void Write_Binary<T_ErrMask>(
            MutagenWriter writer,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            errorMask = (Group_ErrorMask<T_ErrMask>)this.Write_Binary_Internal<T_ErrMask>(
                writer: writer,
                recordTypeConverter: null,
                doMasks: true);
        }

        public virtual void Write_Binary<T_ErrMask>(
            string path,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_Binary<T_ErrMask>(
            Stream stream,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask);
            }
        }

        public void Write_Binary(MutagenWriter writer)
        {
            Write_Binary<MajorRecord_ErrorMask>(writer: writer);
        }

        public void Write_Binary<T_ErrMask>(MutagenWriter writer)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            this.Write_Binary_Internal<T_ErrMask>(
                writer: writer,
                recordTypeConverter: null,
                doMasks: false);
        }

        public void Write_Binary(string path)
        {
            Write_Binary<MajorRecord_ErrorMask>(path: path);
        }

        public void Write_Binary<T_ErrMask>(string path)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(path))
            {
                Write_Binary(writer: writer);
            }
        }

        public void Write_Binary(Stream stream)
        {
            Write_Binary<MajorRecord_ErrorMask>(stream: stream);
        }

        public void Write_Binary<T_ErrMask>(Stream stream)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(writer: writer);
            }
        }

        protected object Write_Binary_Internal<T_ErrMask>(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            bool doMasks)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            GroupCommon.Write_Binary<T, T_ErrMask>(
                writer: writer,
                item: this,
                doMasks: doMasks,
                recordTypeConverter: recordTypeConverter,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        static partial void FillBinary_ContainedRecordType_Custom<T_ErrMask>(
            MutagenFrame frame,
            Group<T> item,
            int fieldIndex,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new();

        static partial void WriteBinary_ContainedRecordType_Custom<T_ErrMask>(
            MutagenWriter writer,
            Group<T> item,
            int fieldIndex,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new();

        public static void WriteBinary_ContainedRecordType<T_ErrMask>(
            MutagenWriter writer,
            Group<T> item,
            int fieldIndex,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            WriteBinary_ContainedRecordType_Custom(
                writer: writer,
                item: item,
                fieldIndex: fieldIndex,
                errorMask: errorMask);
        }

        private static Group<T> Create_Binary_Internal<T_ErrMask>(
            MutagenFrame frame,
            Func<Group_ErrorMask<T_ErrMask>> errorMask,
            RecordTypeConverter recordTypeConverter)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var ret = new Group<T>();
            try
            {
                frame = frame.Spawn(HeaderTranslation.ParseGroup(frame.Reader));
                using (frame)
                {
                    Fill_Binary_Structs(
                        item: ret,
                        frame: frame,
                        errorMask: errorMask);
                    while (!frame.Complete)
                    {
                        var parsed = Fill_Binary_RecordTypes(
                            item: ret,
                            frame: frame,
                            errorMask: errorMask,
                            recordTypeConverter: recordTypeConverter);
                        if (parsed.Failed) break;
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_Binary_Structs<T_ErrMask>(
            Group<T> item,
            MutagenFrame frame,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            FillBinary_ContainedRecordType_Custom(
                frame: frame,
                item: item,
                fieldIndex: (int)Group_FieldIndex.ContainedRecordType,
                errorMask: errorMask);
            item._GroupType.SetIfSucceeded(Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)Group_FieldIndex.GroupType,
                errorMask: errorMask));
            var LastModifiedtryGet = Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Parse(
                frame: frame.Spawn(new ContentLength(4)),
                fieldIndex: (int)Group_FieldIndex.LastModified,
                errorMask: errorMask);
            item._LastModified.SetIfSucceeded(LastModifiedtryGet);
        }

        protected static TryGet<Group_FieldIndex?> Fill_Binary_RecordTypes<T_ErrMask>(
            Group<T> item,
            MutagenFrame frame,
            Func<Group_ErrorMask<T_ErrMask>> errorMask,
            RecordTypeConverter recordTypeConverter = null)
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            var nextRecordType = HeaderTranslation.GetNextRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.Type)
            {
                default:
                    if (nextRecordType.Equals(T_RecordType))
                    {
                        var ItemstryGet = Mutagen.Bethesda.Binary.ListBinaryTranslation<T, MaskItem<Exception, T_ErrMask>>.Instance.ParseRepeatedItem(
                            frame: frame,
                            triggeringRecord: T_RecordType,
                            fieldIndex: (int)Group_FieldIndex.Items,
                            objType: ObjectType.Record,
                            errorMask: errorMask,
                            transl: (MutagenFrame r, bool listDoMasks, out MaskItem<Exception, T_ErrMask> listSubMask) =>
                            {
                                return LoquiBinaryTranslation<T, T_ErrMask>.Instance.Parse(
                                    frame: r,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        item._Items.SetIfSucceeded(ItemstryGet);
                        return TryGet<Group_FieldIndex?>.Failure;
                    }
                    errorMask().Warnings.Add($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Constants.RECORD_LENGTH;
                    return TryGet<Group_FieldIndex?>.Succeed(null);
            }
        }

        #endregion

        public Group<T> Copy<T_CopyMask>(
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            return Group<T>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Group<T> Copy<T_CopyMask>(
            IGroup<T> item,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            Group<T> ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>();
            }
            else
            {
                ret = (Group<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType, T_CopyMask>(
            CopyType item,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
            where CopyType : class, IGroup<T>
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>() as CopyType;
            }
            else
            {
                ret = (CopyType)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<T, MajorRecord_ErrorMask, T_CopyMask>(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static Group<T> Copy_ToLoqui<T_CopyMask>(
            IGroupGetter<T> item,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null)
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            Group<T> ret;
            if (item.GetType().Equals(typeof(Group<T>)))
            {
                ret = new Group<T>() as Group<T>;
            }
            else
            {
                ret = (Group<T>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case Group_FieldIndex.GroupType:
                    this._GroupType.Set(
                        (GroupTypeEnum)obj,
                        cmds);
                    break;
                case Group_FieldIndex.LastModified:
                    this._LastModified.Set(
                        (Byte[])obj,
                        cmds);
                    break;
                case Group_FieldIndex.Items:
                    this.Items.SetTo(
                        ((IEnumerable<T>)(NotifyingDictionary<FormID, T>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            GroupCommon.Clear(this, cmds);
        }


        public static Group<T> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Group<T>();
            foreach (var pair in fields)
            {
                CopyInInternal_Group(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Group(Group<T> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Group_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Group_FieldIndex.GroupType:
                    obj._GroupType.Set(
                        (GroupTypeEnum)pair.Value,
                        null);
                    break;
                case Group_FieldIndex.LastModified:
                    obj._LastModified.Set(
                        (Byte[])pair.Value,
                        null);
                    break;
                case Group_FieldIndex.Items:
                    obj.Items.SetTo(
                        ((IEnumerable<T>)(NotifyingDictionary<FormID, T>)pair.Value),
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Group<T> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface IGroup<T> : IGroupGetter<T>, ILoquiClass<IGroup<T>, IGroupGetter<T>>, ILoquiClass<Group<T>, IGroupGetter<T>>
        where T : MajorRecord, ILoquiObjectGetter
    {
        new GroupTypeEnum GroupType { get; set; }
        new INotifyingItem<GroupTypeEnum> GroupType_Property { get; }

        new Byte[] LastModified { get; set; }
        new INotifyingItem<Byte[]> LastModified_Property { get; }

        new INotifyingKeyedCollection<FormID, T> Items { get; }
    }

    public interface IGroupGetter<T> : ILoquiObject
        where T : MajorRecord, ILoquiObjectGetter
    {
        #region ContainedRecordType
        String ContainedRecordType { get; }
        INotifyingItemGetter<String> ContainedRecordType_Property { get; }

        #endregion
        #region GroupType
        GroupTypeEnum GroupType { get; }
        INotifyingItemGetter<GroupTypeEnum> GroupType_Property { get; }

        #endregion
        #region LastModified
        Byte[] LastModified { get; }
        INotifyingItemGetter<Byte[]> LastModified_Property { get; }

        #endregion
        #region Items
        INotifyingKeyedCollectionGetter<FormID, T> Items { get; }
        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum Group_FieldIndex
    {
        ContainedRecordType = 0,
        GroupType = 1,
        LastModified = 2,
        Items = 3,
    }
    #endregion

    #region Registration
    public class Group_Registration : ILoquiRegistration
    {
        public static readonly Group_Registration Instance = new Group_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 11,
            version: 0);

        public const string GUID = "35a37d0b-4676-4dba-9410-a5972e262f5d";

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Group_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Group_ErrorMask<>);

        public static readonly Type ClassType = typeof(Group<>);

        public static readonly Type GetterType = typeof(IGroupGetter<>);

        public static readonly Type SetterType = typeof(IGroup<>);

        public static readonly Type CommonType = typeof(GroupCommon);

        public const string FullName = "Mutagen.Bethesda.Group";

        public const string Name = "Group";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(Group_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "CONTAINEDRECORDTYPE":
                    return (ushort)Group_FieldIndex.ContainedRecordType;
                case "GROUPTYPE":
                    return (ushort)Group_FieldIndex.GroupType;
                case "LASTMODIFIED":
                    return (ushort)Group_FieldIndex.LastModified;
                case "ITEMS":
                    return (ushort)Group_FieldIndex.Items;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return "ContainedRecordType";
                case Group_FieldIndex.GroupType:
                    return "GroupType";
                case Group_FieldIndex.LastModified:
                    return "LastModified";
                case Group_FieldIndex.Items:
                    return "Items";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return true;
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return true;
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                case Group_FieldIndex.Items:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        public static readonly RecordType GRUP_HEADER = new RecordType("GRUP");
        public static readonly RecordType TRIGGERING_RECORD_TYPE = GRUP_HEADER;
        public const int NumStructFields = 3;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class Group_Registration<T> : Group_Registration
        where T : MajorRecord, ILoquiObjectGetter
    {
        public static readonly Group_Registration<T> GenericInstance = new Group_Registration<T>();

        public new static Type GetNthType(ushort index)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return typeof(String);
                case Group_FieldIndex.GroupType:
                    return typeof(GroupTypeEnum);
                case Group_FieldIndex.LastModified:
                    return typeof(Byte[]);
                case Group_FieldIndex.Items:
                    return typeof(NotifyingDictionary<FormID, T>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class GroupCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<T, T_CopyMask>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null,
            NotifyingFireParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            GroupCommon.CopyFieldsFrom<T, MajorRecord_ErrorMask, T_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_CopyMask<T_CopyMask> copyMask = null,
            IGroupGetter<T> def = null,
            NotifyingFireParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            GroupCommon.CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            IGroupGetter<T> def,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask,
            Group_CopyMask<T_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            Group_ErrorMask<T_ErrMask> retErrorMask = null;
            Func<Group_ErrorMask<T_ErrMask>> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new Group_ErrorMask<T_ErrMask>();
                }
                return retErrorMask;
            };
            CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom<T, T_ErrMask, T_CopyMask>(
            this IGroup<T> item,
            IGroupGetter<T> rhs,
            IGroupGetter<T> def,
            bool doMasks,
            Func<Group_ErrorMask<T_ErrMask>> errorMask,
            Group_CopyMask<T_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
            where T_CopyMask : MajorRecord_CopyMask, new()
        {
            if (copyMask?.GroupType ?? true)
            {
                try
                {
                    item.GroupType_Property.Set(
                        value: rhs.GroupType,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Group_FieldIndex.GroupType, ex);
                }
            }
            if (copyMask?.LastModified ?? true)
            {
                try
                {
                    item.LastModified_Property.Set(
                        value: rhs.LastModified,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Group_FieldIndex.LastModified, ex);
                }
            }
            if (copyMask?.Items.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Items.SetToWithDefault(
                        rhs.Items,
                        def?.Items,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Items.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(T);
                                    var copyFunc = LoquiRegistration.GetCopyFunc<T>();
                                    return copyFunc(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Items.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)Group_FieldIndex.Items, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet<T>(
            ushort index,
            bool on,
            IGroup<T> obj,
            NotifyingFireParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case Group_FieldIndex.Items:
                    obj.Items.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<T>(
            ushort index,
            IGroup<T> obj,
            NotifyingUnsetParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    throw new ArgumentException($"Tried to unset at a derivative index {index}");
                case Group_FieldIndex.GroupType:
                    obj.GroupType = default(GroupTypeEnum);
                    break;
                case Group_FieldIndex.LastModified:
                    obj.LastModified = default(Byte[]);
                    break;
                case Group_FieldIndex.Items:
                    obj.Items.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<T>(
            ushort index,
            IGroup<T> obj)
            where T : MajorRecord, ILoquiObjectGetter
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                case Group_FieldIndex.GroupType:
                case Group_FieldIndex.LastModified:
                    return true;
                case Group_FieldIndex.Items:
                    return obj.Items.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<T>(
            ushort index,
            IGroupGetter<T> obj)
            where T : MajorRecord, ILoquiObjectGetter
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    return obj.ContainedRecordType;
                case Group_FieldIndex.GroupType:
                    return obj.GroupType;
                case Group_FieldIndex.LastModified:
                    return obj.LastModified;
                case Group_FieldIndex.Items:
                    return obj.Items;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<T>(
            IGroup<T> item,
            NotifyingUnsetParameters cmds = null)
            where T : MajorRecord, ILoquiObjectGetter
        {
            item.GroupType = default(GroupTypeEnum);
            item.LastModified = default(Byte[]);
            item.Items.Unset(cmds.ToUnsetParams());
        }

        public static Group_Mask<bool> GetEqualsMask<T>(
            this IGroupGetter<T> item,
            IGroupGetter<T> rhs)
            where T : MajorRecord, ILoquiObjectGetter
        {
            var ret = new Group_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask<T>(
            IGroupGetter<T> item,
            IGroupGetter<T> rhs,
            Group_Mask<bool> ret)
            where T : MajorRecord, ILoquiObjectGetter
        {
            if (rhs == null) return;
            ret.ContainedRecordType = object.Equals(item.ContainedRecordType, rhs.ContainedRecordType);
            ret.GroupType = item.GroupType == rhs.GroupType;
            ret.LastModified = item.LastModified.EqualsFast(rhs.LastModified);
            ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, MajorRecord_Mask<bool>>>>();
            ret.Items.Specific = item.Items.Values.SelectAgainst<T, MaskItem<bool, MajorRecord_Mask<bool>>>(rhs.Items.Values, ((l, r) =>
            {
                MaskItem<bool, MajorRecord_Mask<bool>> itemRet;
                itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => MajorRecordCommon.GetEqualsMask(loqLhs, loqRhs));
                return itemRet;
            }
            ), out ret.Items.Overall);
            ret.Items.Overall = ret.Items.Overall && ret.Items.Specific.All((b) => b.Overall);
        }

        public static string ToString<T>(
            this IGroupGetter<T> item,
            string name = null,
            Group_Mask<bool> printMask = null)
            where T : MajorRecord, ILoquiObjectGetter
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<T>(
            this IGroupGetter<T> item,
            FileGeneration fg,
            string name = null,
            Group_Mask<bool> printMask = null)
            where T : MajorRecord, ILoquiObjectGetter
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Group<T>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Group<T>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ContainedRecordType ?? true)
                {
                    fg.AppendLine($"ContainedRecordType => {item.ContainedRecordType}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {item.GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {item.LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Items.Values)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<T>(
            this IGroupGetter<T> item,
            Group_Mask<bool?> checkMask)
            where T : MajorRecord, ILoquiObjectGetter
        {
            if (checkMask.Items.Overall.HasValue && checkMask.Items.Overall.Value != item.Items.HasBeenSet) return false;
            return true;
        }

        public static Group_Mask<bool> GetHasBeenSetMask<T>(IGroupGetter<T> item)
            where T : MajorRecord, ILoquiObjectGetter
        {
            var ret = new Group_Mask<bool>();
            ret.ContainedRecordType = true;
            ret.GroupType = true;
            ret.LastModified = true;
            ret.Items = new MaskItem<bool, IEnumerable<MaskItem<bool, MajorRecord_Mask<bool>>>>(item.Items.HasBeenSet, item.Items.Values.Select((i) => new MaskItem<bool, MajorRecord_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML<T, T_ErrMask>(
            XmlWriter writer,
            IGroupGetter<T> item,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask,
            string name = null)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Group_ErrorMask<T_ErrMask> errMaskRet = null;
            Write_XML_Internal<T, T_ErrMask>(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask<T_ErrMask>()) : default(Func<Group_ErrorMask<T_ErrMask>>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal<T, T_ErrMask>(
            XmlWriter writer,
            IGroupGetter<T> item,
            Func<Group_ErrorMask<T_ErrMask>> errorMask,
            string name = null)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Mutagen.Bethesda.Group"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Mutagen.Bethesda.Group");
                    }
                    EnumXmlTranslation<GroupTypeEnum>.Instance.Write(
                        writer: writer,
                        name: nameof(item.GroupType),
                        item: item.GroupType_Property,
                        fieldIndex: (int)Group_FieldIndex.GroupType,
                        errorMask: errorMask);
                    ByteArrayXmlTranslation.Instance.Write(
                        writer: writer,
                        name: nameof(item.LastModified),
                        item: item.LastModified_Property,
                        fieldIndex: (int)Group_FieldIndex.LastModified,
                        errorMask: errorMask);
                    if (item.Items.HasBeenSet)
                    {
                        KeyedDictXmlTranslation<FormID, T, MaskItem<Exception, T_ErrMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Items),
                            items: item.Items.Values,
                            fieldIndex: (int)Group_FieldIndex.Items,
                            errorMask: errorMask,
                            valTransl: (T subItem, bool dictDoMask, out MaskItem<Exception, T_ErrMask> dictSubMask) =>
                            {
                                LoquiXmlTranslation<T, T_ErrMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary<T, T_ErrMask>(
            MutagenWriter writer,
            Group<T> item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out Group_ErrorMask<T_ErrMask> errorMask)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Group_ErrorMask<T_ErrMask> errMaskRet = null;
            Write_Binary_Internal<T, T_ErrMask>(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new Group_ErrorMask<T_ErrMask>()) : default(Func<Group_ErrorMask<T_ErrMask>>));
            errorMask = errMaskRet;
        }

        private static void Write_Binary_Internal<T, T_ErrMask>(
            MutagenWriter writer,
            Group<T> item,
            RecordTypeConverter recordTypeConverter,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            try
            {
                using (HeaderExport.ExportHeader(
                    writer: writer,
                    record: Group_Registration.GRUP_HEADER,
                    type: ObjectType.Group))
                {
                    Write_Binary_Embedded(
                        item: item,
                        writer: writer,
                        errorMask: errorMask);
                    Write_Binary_RecordTypes(
                        item: item,
                        writer: writer,
                        recordTypeConverter: recordTypeConverter,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        public static void Write_Binary_Embedded<T, T_ErrMask>(
            Group<T> item,
            MutagenWriter writer,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Group<T>.WriteBinary_ContainedRecordType(
                writer: writer,
                item: item,
                fieldIndex: (int)Group_FieldIndex.ContainedRecordType,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<GroupTypeEnum>.Instance.Write(
                writer,
                item.GroupType_Property,
                length: new ContentLength(4),
                fieldIndex: (int)Group_FieldIndex.GroupType,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.ByteArrayBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LastModified_Property,
                fieldIndex: (int)Group_FieldIndex.LastModified,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes<T, T_ErrMask>(
            Group<T> item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            Func<Group_ErrorMask<T_ErrMask>> errorMask)
            where T : MajorRecord, ILoquiObjectGetter
            where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
        {
            Mutagen.Bethesda.Binary.ListBinaryTranslation<T, MaskItem<Exception, T_ErrMask>>.Instance.Write(
                writer: writer,
                item: item.Items.Values,
                fieldIndex: (int)Group_FieldIndex.Items,
                errorMask: errorMask,
                transl: (T subItem, bool listDoMasks, out MaskItem<Exception, T_ErrMask> listSubMask) =>
                {
                    LoquiBinaryTranslation<T, T_ErrMask>.Instance.Write(
                        writer: writer,
                        item: subItem,
                        doMasks: listDoMasks,
                        errorMask: out listSubMask);
                }
                );
        }

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class Group_Mask<T> : IMask<T>, IEquatable<Group_Mask<T>>
    {
        #region Ctors
        public Group_Mask()
        {
        }

        public Group_Mask(T initialValue)
        {
            this.ContainedRecordType = initialValue;
            this.GroupType = initialValue;
            this.LastModified = initialValue;
            this.Items = new MaskItem<T, IEnumerable<MaskItem<T, MajorRecord_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ContainedRecordType;
        public T GroupType;
        public T LastModified;
        public MaskItem<T, IEnumerable<MaskItem<T, MajorRecord_Mask<T>>>> Items;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Group_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Group_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ContainedRecordType, rhs.ContainedRecordType)) return false;
            if (!object.Equals(this.GroupType, rhs.GroupType)) return false;
            if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
            if (!object.Equals(this.Items, rhs.Items)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ContainedRecordType?.GetHashCode());
            ret = ret.CombineHashCode(this.GroupType?.GetHashCode());
            ret = ret.CombineHashCode(this.LastModified?.GetHashCode());
            ret = ret.CombineHashCode(this.Items?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ContainedRecordType)) return false;
            if (!eval(this.GroupType)) return false;
            if (!eval(this.LastModified)) return false;
            if (this.Items != null)
            {
                if (!eval(this.Items.Overall)) return false;
                if (this.Items.Specific != null)
                {
                    foreach (var item in this.Items.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public Group_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Group_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Group_Mask<R> obj, Func<T, R> eval)
        {
            obj.ContainedRecordType = eval(this.ContainedRecordType);
            obj.GroupType = eval(this.GroupType);
            obj.LastModified = eval(this.LastModified);
            if (Items != null)
            {
                obj.Items = new MaskItem<R, IEnumerable<MaskItem<R, MajorRecord_Mask<R>>>>();
                obj.Items.Overall = eval(this.Items.Overall);
                if (Items.Specific != null)
                {
                    List<MaskItem<R, MajorRecord_Mask<R>>> l = new List<MaskItem<R, MajorRecord_Mask<R>>>();
                    obj.Items.Specific = l;
                    foreach (var item in Items.Specific)
                    {
                        MaskItem<R, MajorRecord_Mask<R>> mask = default(MaskItem<R, MajorRecord_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, MajorRecord_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Items.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Group_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Group_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Group_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ContainedRecordType ?? true)
                {
                    fg.AppendLine($"ContainedRecordType => {ContainedRecordType}");
                }
                if (printMask?.GroupType ?? true)
                {
                    fg.AppendLine($"GroupType => {GroupType}");
                }
                if (printMask?.LastModified ?? true)
                {
                    fg.AppendLine($"LastModified => {LastModified}");
                }
                if (printMask?.Items?.Overall ?? true)
                {
                    fg.AppendLine("Items =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Items.Overall != null)
                        {
                            fg.AppendLine(Items.Overall.ToString());
                        }
                        if (Items.Specific != null)
                        {
                            foreach (var subItem in Items.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Group_ErrorMask<T_ErrMask> : IErrorMask, IErrorMask<Group_ErrorMask<T_ErrMask>>
        where T_ErrMask : MajorRecord_ErrorMask, IErrorMask<T_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ContainedRecordType;
        public Exception GroupType;
        public Exception LastModified;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>> Items;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    this.ContainedRecordType = ex;
                    break;
                case Group_FieldIndex.GroupType:
                    this.GroupType = ex;
                    break;
                case Group_FieldIndex.LastModified:
                    this.LastModified = ex;
                    break;
                case Group_FieldIndex.Items:
                    this.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Group_FieldIndex enu = (Group_FieldIndex)index;
            switch (enu)
            {
                case Group_FieldIndex.ContainedRecordType:
                    this.ContainedRecordType = (Exception)obj;
                    break;
                case Group_FieldIndex.GroupType:
                    this.GroupType = (Exception)obj;
                    break;
                case Group_FieldIndex.LastModified:
                    this.LastModified = (Exception)obj;
                    break;
                case Group_FieldIndex.Items:
                    this.Items = (MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ContainedRecordType != null) return true;
            if (GroupType != null) return true;
            if (LastModified != null) return true;
            if (Items != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Group_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ContainedRecordType => {ContainedRecordType}");
            fg.AppendLine($"GroupType => {GroupType}");
            fg.AppendLine($"LastModified => {LastModified}");
            fg.AppendLine("Items =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Items.Overall != null)
                {
                    fg.AppendLine(Items.Overall.ToString());
                }
                if (Items.Specific != null)
                {
                    foreach (var subItem in Items.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Group_ErrorMask<T_ErrMask> Combine(Group_ErrorMask<T_ErrMask> rhs)
        {
            var ret = new Group_ErrorMask<T_ErrMask>();
            ret.ContainedRecordType = this.ContainedRecordType.Combine(rhs.ContainedRecordType);
            ret.GroupType = this.GroupType.Combine(rhs.GroupType);
            ret.LastModified = this.LastModified.Combine(rhs.LastModified);
            ret.Items = new MaskItem<Exception, IEnumerable<MaskItem<Exception, T_ErrMask>>>(this.Items.Overall.Combine(rhs.Items.Overall), new List<MaskItem<Exception, T_ErrMask>>(this.Items.Specific.And(rhs.Items.Specific)));
            return ret;
        }
        public static Group_ErrorMask<T_ErrMask> Combine(Group_ErrorMask<T_ErrMask> lhs, Group_ErrorMask<T_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class Group_CopyMask<T_CopyMask>
        where T_CopyMask : MajorRecord_CopyMask, new()
    {
        #region Members
        public bool ContainedRecordType;
        public bool GroupType;
        public bool LastModified;
        public MaskItem<CopyOption, MajorRecord_CopyMask> Items;
        #endregion

    }
    #endregion




    #endregion

}
