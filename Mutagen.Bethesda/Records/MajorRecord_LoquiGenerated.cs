/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Mutagen.Bethesda.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;
using Mutagen.Bethesda.Binary;

namespace Mutagen.Bethesda
{
    #region Class
    public abstract partial class MajorRecord : 
        IMajorRecord,
        ILoquiObject<MajorRecord>,
        ILoquiObjectSetter,
        IPropertySupporter<MajorRecord.MajorRecordFlag>,
        IPropertySupporter<UInt32>,
        IPropertySupporter<String>,
        IEquatable<MajorRecord>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MajorRecord_Registration.Instance;
        public static MajorRecord_Registration Registration => MajorRecord_Registration.Instance;

        #region Ctor
        public MajorRecord()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MajorRecordFlags
        protected MajorRecord.MajorRecordFlag _MajorRecordFlags;
        protected PropertyForwarder<MajorRecord, MajorRecord.MajorRecordFlag> _MajorRecordFlagsForwarder;
        public INotifyingSetItem<MajorRecord.MajorRecordFlag> MajorRecordFlags_Property => _MajorRecordFlagsForwarder ?? (_MajorRecordFlagsForwarder = new PropertyForwarder<MajorRecord, MajorRecord.MajorRecordFlag>(this, (int)MajorRecord_FieldIndex.MajorRecordFlags));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MajorRecord.MajorRecordFlag MajorRecordFlags
        {
            get => this._MajorRecordFlags;
            set => this.SetMajorRecordFlags(value);
        }
        protected void SetMajorRecordFlags(
            MajorRecord.MajorRecordFlag item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)MajorRecord_FieldIndex.MajorRecordFlags];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && MajorRecordFlags == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)MajorRecord_FieldIndex.MajorRecordFlags] = hasBeenSet;
            }
            if (_MajorRecordMajorRecordFlag_subscriptions != null)
            {
                var tmp = MajorRecordFlags;
                _MajorRecordFlags = item;
                _MajorRecordMajorRecordFlag_subscriptions.FireSubscriptions(
                    index: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _MajorRecordFlags = item;
            }
        }
        protected void UnsetMajorRecordFlags()
        {
            _hasBeenSetTracker[(int)MajorRecord_FieldIndex.MajorRecordFlags] = false;
            MajorRecordFlags = default(MajorRecord.MajorRecordFlag);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<MajorRecord.MajorRecordFlag> IMajorRecord.MajorRecordFlags_Property => this.MajorRecordFlags_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<MajorRecord.MajorRecordFlag> IMajorRecordGetter.MajorRecordFlags_Property => this.MajorRecordFlags_Property;
        #endregion
        #region FormID
        private FormID _FormID;
        public FormID FormID { get => _FormID; protected set => _FormID = value; }
        #endregion
        #region Version
        protected UInt32 _Version;
        protected PropertyForwarder<MajorRecord, UInt32> _VersionForwarder;
        public INotifyingSetItem<UInt32> Version_Property => _VersionForwarder ?? (_VersionForwarder = new PropertyForwarder<MajorRecord, UInt32>(this, (int)MajorRecord_FieldIndex.Version));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public UInt32 Version
        {
            get => this._Version;
            set => this.SetVersion(value);
        }
        protected void SetVersion(
            UInt32 item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)MajorRecord_FieldIndex.Version];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && Version == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)MajorRecord_FieldIndex.Version] = hasBeenSet;
            }
            if (_UInt32_subscriptions != null)
            {
                var tmp = Version;
                _Version = item;
                _UInt32_subscriptions.FireSubscriptions(
                    index: (int)MajorRecord_FieldIndex.Version,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _Version = item;
            }
        }
        protected void UnsetVersion()
        {
            _hasBeenSetTracker[(int)MajorRecord_FieldIndex.Version] = false;
            Version = default(UInt32);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItem<UInt32> IMajorRecord.Version_Property => this.Version_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingItemGetter<UInt32> IMajorRecordGetter.Version_Property => this.Version_Property;
        #endregion
        #region EditorID
        protected String _EditorID;
        protected PropertyForwarder<MajorRecord, String> _EditorIDForwarder;
        public INotifyingSetItem<String> EditorID_Property => _EditorIDForwarder ?? (_EditorIDForwarder = new PropertyForwarder<MajorRecord, String>(this, (int)MajorRecord_FieldIndex.EditorID));
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public String EditorID
        {
            get => this._EditorID;
            set => this.SetEditorID(value);
        }
        protected void SetEditorID(
            String item,
            bool hasBeenSet = true,
            NotifyingFireParameters cmds = null)
        {
            var oldHasBeenSet = _hasBeenSetTracker[(int)MajorRecord_FieldIndex.EditorID];
            if ((cmds?.ForceFire ?? true) && oldHasBeenSet == hasBeenSet && EditorID == item) return;
            if (oldHasBeenSet != hasBeenSet)
            {
                _hasBeenSetTracker[(int)MajorRecord_FieldIndex.EditorID] = hasBeenSet;
            }
            if (_String_subscriptions != null)
            {
                var tmp = EditorID;
                _EditorID = item;
                _String_subscriptions.FireSubscriptions(
                    index: (int)MajorRecord_FieldIndex.EditorID,
                    oldHasBeenSet: oldHasBeenSet,
                    newHasBeenSet: hasBeenSet,
                    oldVal: tmp,
                    newVal: item,
                    cmds: cmds);
            }
            else
            {
                _EditorID = item;
            }
        }
        protected void UnsetEditorID()
        {
            _hasBeenSetTracker[(int)MajorRecord_FieldIndex.EditorID] = false;
            EditorID = default(String);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItem<String> IMajorRecord.EditorID_Property => this.EditorID_Property;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingSetItemGetter<String> IMajorRecordGetter.EditorID_Property => this.EditorID_Property;
        #endregion
        #region RecordType
        private RecordType _RecordType;
        public RecordType RecordType { get => _RecordType; protected set => _RecordType = value; }
        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => MajorRecordCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => MajorRecordCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => MajorRecordCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            MajorRecordCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<MajorRecord>.GetEqualsMask(MajorRecord rhs) => MajorRecordCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IMajorRecordGetter>.GetEqualsMask(IMajorRecordGetter rhs) => MajorRecordCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return MajorRecordCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            return MajorRecordCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            MajorRecordCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public MajorRecord_Mask<bool> GetHasBeenSetMask()
        {
            return MajorRecordCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is MajorRecord rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MajorRecord rhs)
        {
            if (rhs == null) return false;
            if (this.MajorRecordFlags != rhs.MajorRecordFlags) return false;
            if (this.FormID != rhs.FormID) return false;
            if (this.Version != rhs.Version) return false;
            if (EditorID_Property.HasBeenSet != rhs.EditorID_Property.HasBeenSet) return false;
            if (EditorID_Property.HasBeenSet)
            {
                if (!object.Equals(this.EditorID, rhs.EditorID)) return false;
            }
            if (!object.Equals(this.RecordType, rhs.RecordType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(MajorRecordFlags).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FormID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Version).CombineHashCode(ret);
            if (EditorID_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EditorID).CombineHashCode(ret);
            }
            ret = HashHelper.GetHashCode(RecordType).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Copy In
        public virtual void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        protected virtual void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<MajorRecord>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true,
            MajorRecord_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public virtual void Write_Xml(
            XElement node,
            string name = null,
            MajorRecord_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public virtual void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected virtual void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            MajorRecordCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            MajorRecord item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "MajorRecordFlags":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.MajorRecordFlags);
                        if (EnumXmlTranslation<MajorRecord.MajorRecordFlag>.Instance.Parse(
                            root: root,
                            item: out MajorRecord.MajorRecordFlag MajorRecordFlagsParse,
                            errorMask: errorMask))
                        {
                            item.MajorRecordFlags = MajorRecordFlagsParse;
                        }
                        else
                        {
                            item.UnsetMajorRecordFlags();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "FormID":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.FormID);
                        if (FormIDXmlTranslation.Instance.Parse(
                            root: root,
                            item: out FormID FormIDParse,
                            errorMask: errorMask))
                        {
                            item.FormID = FormIDParse;
                        }
                        else
                        {
                            item.FormID = default(FormID);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Version":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.Version);
                        if (UInt32XmlTranslation.Instance.Parse(
                            root: root,
                            item: out UInt32 VersionParse,
                            errorMask: errorMask))
                        {
                            item.Version = VersionParse;
                        }
                        else
                        {
                            item.UnsetVersion();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "EditorID":
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.EditorID);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String EditorIDParse,
                            errorMask: errorMask))
                        {
                            item.EditorID = EditorIDParse;
                        }
                        else
                        {
                            item.UnsetEditorID();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected virtual bool GetHasBeenSet(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.EditorID:
                    return _hasBeenSetTracker[index];
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        #region IPropertySupporter MajorRecord.MajorRecordFlag
        protected ObjectCentralizationSubscriptions<MajorRecord.MajorRecordFlag> _MajorRecordMajorRecordFlag_subscriptions;
        MajorRecord.MajorRecordFlag IPropertySupporter<MajorRecord.MajorRecordFlag>.Get(int index)
        {
            return GetMajorRecordMajorRecordFlag(index: index);
        }

        protected MajorRecord.MajorRecordFlag GetMajorRecordMajorRecordFlag(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return MajorRecordFlags;
                default:
                    throw new ArgumentException($"Unknown index for field type MajorRecord.MajorRecordFlag: {index}");
            }
        }

        void IPropertySupporter<MajorRecord.MajorRecordFlag>.Set(
            int index,
            MajorRecord.MajorRecordFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetMajorRecordMajorRecordFlag(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected void SetMajorRecordMajorRecordFlag(
            int index,
            MajorRecord.MajorRecordFlag item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    SetMajorRecordFlags(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MajorRecord.MajorRecordFlag: {index}");
            }
        }

        bool IPropertySupporter<MajorRecord.MajorRecordFlag>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<MajorRecord.MajorRecordFlag>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<MajorRecord.MajorRecordFlag>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetMajorRecordMajorRecordFlag(
                index: index,
                cmds: cmds);
        }

        protected void UnsetMajorRecordMajorRecordFlag(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    SetMajorRecordFlags(
                        item: default(MajorRecord.MajorRecordFlag),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type MajorRecord.MajorRecordFlag: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MajorRecord.MajorRecordFlag>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<MajorRecord.MajorRecordFlag> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_MajorRecordMajorRecordFlag_subscriptions == null)
            {
                _MajorRecordMajorRecordFlag_subscriptions = new ObjectCentralizationSubscriptions<MajorRecord.MajorRecordFlag>();
            }
            _MajorRecordMajorRecordFlag_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<MajorRecord.MajorRecordFlag>.Unsubscribe(
            int index,
            object owner)
        {
            _MajorRecordMajorRecordFlag_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<MajorRecord.MajorRecordFlag>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        MajorRecord.MajorRecordFlag IPropertySupporter<MajorRecord.MajorRecordFlag>.DefaultValue(int index)
        {
            return DefaultValueMajorRecordMajorRecordFlag(index: index);
        }

        protected MajorRecord.MajorRecordFlag DefaultValueMajorRecordMajorRecordFlag(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return default(MajorRecord.MajorRecordFlag);
                default:
                    throw new ArgumentException($"Unknown index for field type MajorRecord.MajorRecordFlag: {index}");
            }
        }

        #endregion

        #region IPropertySupporter UInt32
        protected ObjectCentralizationSubscriptions<UInt32> _UInt32_subscriptions;
        UInt32 IPropertySupporter<UInt32>.Get(int index)
        {
            return GetUInt32(index: index);
        }

        protected virtual UInt32 GetUInt32(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.Version:
                    return Version;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        void IPropertySupporter<UInt32>.Set(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetUInt32(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected virtual void SetUInt32(
            int index,
            UInt32 item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.Version:
                    SetVersion(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        bool IPropertySupporter<UInt32>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<UInt32>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<UInt32>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetUInt32(
                index: index,
                cmds: cmds);
        }

        protected virtual void UnsetUInt32(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.Version:
                    SetVersion(
                        item: default(UInt32),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<UInt32> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_UInt32_subscriptions == null)
            {
                _UInt32_subscriptions = new ObjectCentralizationSubscriptions<UInt32>();
            }
            _UInt32_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<UInt32>.Unsubscribe(
            int index,
            object owner)
        {
            _UInt32_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<UInt32>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        UInt32 IPropertySupporter<UInt32>.DefaultValue(int index)
        {
            return DefaultValueUInt32(index: index);
        }

        protected virtual UInt32 DefaultValueUInt32(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.Version:
                    return default(UInt32);
                default:
                    throw new ArgumentException($"Unknown index for field type UInt32: {index}");
            }
        }

        #endregion

        #region IPropertySupporter String
        protected ObjectCentralizationSubscriptions<String> _String_subscriptions;
        String IPropertySupporter<String>.Get(int index)
        {
            return GetString(index: index);
        }

        protected virtual String GetString(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.EditorID:
                    return EditorID;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        void IPropertySupporter<String>.Set(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            SetString(
                index: index,
                item: item,
                hasBeenSet: hasBeenSet,
                cmds: cmds);
        }

        protected virtual void SetString(
            int index,
            String item,
            bool hasBeenSet,
            NotifyingFireParameters cmds)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.EditorID:
                    SetEditorID(item, hasBeenSet, cmds);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        bool IPropertySupporter<String>.GetHasBeenSet(int index)
        {
            return this.GetHasBeenSet(index: index);
        }

        void IPropertySupporter<String>.SetHasBeenSet(
            int index,
            bool on)
        {
            _hasBeenSetTracker[index] = on;
        }

        void IPropertySupporter<String>.Unset(
            int index,
            NotifyingUnsetParameters cmds)
        {
            UnsetString(
                index: index,
                cmds: cmds);
        }

        protected virtual void UnsetString(
            int index,
            NotifyingUnsetParameters cmds)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.EditorID:
                    SetEditorID(
                        item: default(String),
                        hasBeenSet: false);
                    break;
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Subscribe(
            int index,
            object owner,
            NotifyingSetItemInternalCallback<String> callback,
            NotifyingSubscribeParameters cmds)
        {
            if (_String_subscriptions == null)
            {
                _String_subscriptions = new ObjectCentralizationSubscriptions<String>();
            }
            _String_subscriptions.Subscribe(
                index: index,
                owner: owner,
                prop: this,
                callback: callback,
                cmds: cmds);
        }

        [DebuggerStepThrough]
        void IPropertySupporter<String>.Unsubscribe(
            int index,
            object owner)
        {
            _String_subscriptions?.Unsubscribe(index, owner);
        }

        void IPropertySupporter<String>.SetCurrentAsDefault(int index)
        {
            throw new NotImplementedException();
        }

        String IPropertySupporter<String>.DefaultValue(int index)
        {
            return DefaultValueString(index: index);
        }

        protected virtual String DefaultValueString(int index)
        {
            switch ((MajorRecord_FieldIndex)index)
            {
                case MajorRecord_FieldIndex.EditorID:
                    return default(String);
                default:
                    throw new ArgumentException($"Unknown index for field type String: {index}");
            }
        }

        #endregion

        #region Mutagen
        public virtual IEnumerable<ILink> Links => GetLinks();
        private IEnumerable<ILink> GetLinks()
        {
            yield break;
        }
        public virtual void Write_Xml_Folder(
            string path,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            Write_Xml(
                path: path,
                errorMask: out errorMask,
                doMasks: doMasks);
        }
        #endregion

        #region Binary Translation
        #region Binary Write
        public virtual void Write_Binary(
            MutagenWriter writer,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: errorMaskBuilder);
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Binary(
            string path,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary(
                        writer: writer,
                        errorMask: out errorMask,
                        doMasks: doMasks);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(
            Stream stream,
            out MajorRecord_ErrorMask errorMask,
            bool doMasks = true)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary(
                    writer: writer,
                    errorMask: out errorMask,
                    doMasks: doMasks);
            }
        }

        public virtual void Write_Binary(MutagenWriter writer)
        {
            this.Write_Binary_Internal(
                writer: writer,
                recordTypeConverter: null,
                errorMask: null);
        }

        public virtual void Write_Binary(string path)
        {
            using (var memStream = new MemoryTributary())
            {
                using (var writer = new MutagenWriter(memStream, dispose: false))
                {
                    Write_Binary_Internal(
                        writer: writer,
                        recordTypeConverter: null,
                        errorMask: null);
                }
                using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    memStream.Position = 0;
                    memStream.CopyTo(fs);
                }
            }
        }

        public virtual void Write_Binary(Stream stream)
        {
            using (var writer = new MutagenWriter(stream))
            {
                Write_Binary_Internal(
                    writer: writer,
                    recordTypeConverter: null,
                    errorMask: null);
            }
        }

        protected virtual void Write_Binary_Internal(
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            MajorRecordCommon.Write_Binary(
                item: this,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        protected static void Fill_Binary_Structs(
            MajorRecord item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask)
        {
            try
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.MajorRecordFlags);
                if (EnumBinaryTranslation<MajorRecord.MajorRecordFlag>.Instance.Parse(
                    frame: frame.SpawnWithLength(4),
                    item: out MajorRecord.MajorRecordFlag MajorRecordFlagsParse,
                    errorMask: errorMask))
                {
                    item.MajorRecordFlags = MajorRecordFlagsParse;
                }
                else
                {
                    item.UnsetMajorRecordFlags();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.FormID);
                if (Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out FormID FormIDParse,
                    errorMask: errorMask))
                {
                    item.FormID = FormIDParse;
                }
                else
                {
                    item.FormID = default(FormID);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
            try
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.Version);
                if (Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Parse(
                    frame: frame.Spawn(snapToFinalPosition: false),
                    item: out UInt32 VersionParse,
                    errorMask: errorMask))
                {
                    item.Version = VersionParse;
                }
                else
                {
                    item.UnsetVersion();
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            finally
            {
                errorMask?.PopIndex();
            }
        }

        protected static TryGet<int?> Fill_Binary_RecordTypes(
            MajorRecord item,
            MutagenFrame frame,
            ErrorMaskBuilder errorMask,
            RecordTypeConverter recordTypeConverter = null)
        {
            var nextRecordType = HeaderTranslation.GetNextSubRecordType(
                reader: frame.Reader,
                contentLength: out var contentLength,
                recordTypeConverter: recordTypeConverter);
            switch (nextRecordType.TypeInt)
            {
                case 0x44494445: // EDID
                    frame.Position += Constants.SUBRECORD_LENGTH;
                    try
                    {
                        errorMask?.PushIndex((int)MajorRecord_FieldIndex.EditorID);
                        if (Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Parse(
                            frame: frame.SpawnWithLength(contentLength),
                            parseWhole: true,
                            item: out String EditorIDParse,
                            errorMask: errorMask))
                        {
                            item.EditorID = EditorIDParse;
                        }
                        else
                        {
                            item.UnsetEditorID();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    return TryGet<int?>.Succeed((int)MajorRecord_FieldIndex.EditorID);
                default:
                    errorMask?.ReportWarning($"Unexpected header {nextRecordType.Type} at position {frame.Position}");
                    frame.Position += contentLength + Constants.SUBRECORD_LENGTH;
                    return TryGet<int?>.Succeed(null);
            }
        }

        #endregion

        public MajorRecord Copy(
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
        {
            return MajorRecord.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static MajorRecord Copy(
            IMajorRecord item,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
        {
            MajorRecord ret = (MajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static MajorRecord Copy_ToLoqui(
            IMajorRecordGetter item,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null)
        {
            MajorRecord ret = (MajorRecord)System.Activator.CreateInstance(item.GetType());
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            MajorRecord_CopyMask copyMask,
            IMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IMajorRecordGetter rhs,
            ErrorMaskBuilder errorMask,
            MajorRecord_CopyMask copyMask = null,
            IMajorRecordGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            MajorRecordCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    this.SetMajorRecordFlags(
                        (MajorRecord.MajorRecordFlag)obj,
                        cmds: cmds);
                    break;
                case MajorRecord_FieldIndex.FormID:
                    this._FormID = (FormID)obj;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.SetVersion(
                        (UInt32)obj,
                        cmds: cmds);
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.SetEditorID(
                        (String)obj,
                        cmds: cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            MajorRecordCommon.Clear(this, cmds);
        }


        protected static void CopyInInternal_MajorRecord(MajorRecord obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out MajorRecord_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    obj.SetMajorRecordFlags(
                        (MajorRecord.MajorRecordFlag)pair.Value,
                        cmds: null);
                    break;
                case MajorRecord_FieldIndex.FormID:
                    obj._FormID = (FormID)pair.Value;
                    break;
                case MajorRecord_FieldIndex.Version:
                    obj.SetVersion(
                        (UInt32)pair.Value,
                        cmds: null);
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    obj.SetEditorID(
                        (String)pair.Value,
                        cmds: null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, MajorRecord obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IMajorRecord : IMajorRecordGetter, ILoquiClass<IMajorRecord, IMajorRecordGetter>, ILoquiClass<MajorRecord, IMajorRecordGetter>
    {
        new MajorRecord.MajorRecordFlag MajorRecordFlags { get; set; }
        new INotifyingItem<MajorRecord.MajorRecordFlag> MajorRecordFlags_Property { get; }

        new UInt32 Version { get; set; }
        new INotifyingItem<UInt32> Version_Property { get; }

        new String EditorID { get; set; }
        new INotifyingSetItem<String> EditorID_Property { get; }

    }

    public partial interface IMajorRecordGetter : ILoquiObject
    {
        #region MajorRecordFlags
        MajorRecord.MajorRecordFlag MajorRecordFlags { get; }
        INotifyingItemGetter<MajorRecord.MajorRecordFlag> MajorRecordFlags_Property { get; }

        #endregion
        #region FormID
        FormID FormID { get; }

        #endregion
        #region Version
        UInt32 Version { get; }
        INotifyingItemGetter<UInt32> Version_Property { get; }

        #endregion
        #region EditorID
        String EditorID { get; }
        INotifyingSetItemGetter<String> EditorID_Property { get; }

        #endregion
        #region RecordType
        RecordType RecordType { get; }

        #endregion

    }

    #endregion

}

namespace Mutagen.Bethesda.Internals
{
    #region Field Index
    public enum MajorRecord_FieldIndex
    {
        MajorRecordFlags = 0,
        FormID = 1,
        Version = 2,
        EditorID = 3,
        RecordType = 4,
    }
    #endregion

    #region Registration
    public class MajorRecord_Registration : ILoquiRegistration
    {
        public static readonly MajorRecord_Registration Instance = new MajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Bethesda.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_Bethesda.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "1382b2d8-9016-424e-923f-502a4417cbc7";

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(MajorRecord_Mask<>);

        public static readonly Type ErrorMaskType = typeof(MajorRecord_ErrorMask);

        public static readonly Type ClassType = typeof(MajorRecord);

        public static readonly Type GetterType = typeof(IMajorRecordGetter);

        public static readonly Type SetterType = typeof(IMajorRecord);

        public static readonly Type CommonType = typeof(MajorRecordCommon);

        public const string FullName = "Mutagen.Bethesda.MajorRecord";

        public const string Name = "MajorRecord";

        public const string Namespace = "Mutagen.Bethesda";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "MAJORRECORDFLAGS":
                    return (ushort)MajorRecord_FieldIndex.MajorRecordFlags;
                case "FORMID":
                    return (ushort)MajorRecord_FieldIndex.FormID;
                case "VERSION":
                    return (ushort)MajorRecord_FieldIndex.Version;
                case "EDITORID":
                    return (ushort)MajorRecord_FieldIndex.EditorID;
                case "RECORDTYPE":
                    return (ushort)MajorRecord_FieldIndex.RecordType;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                case MajorRecord_FieldIndex.RecordType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                case MajorRecord_FieldIndex.RecordType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                case MajorRecord_FieldIndex.RecordType:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return "MajorRecordFlags";
                case MajorRecord_FieldIndex.FormID:
                    return "FormID";
                case MajorRecord_FieldIndex.Version:
                    return "Version";
                case MajorRecord_FieldIndex.EditorID:
                    return "EditorID";
                case MajorRecord_FieldIndex.RecordType:
                    return "RecordType";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.EditorID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return typeof(MajorRecord.MajorRecordFlag);
                case MajorRecord_FieldIndex.FormID:
                    return typeof(FormID);
                case MajorRecord_FieldIndex.Version:
                    return typeof(UInt32);
                case MajorRecord_FieldIndex.EditorID:
                    return typeof(String);
                case MajorRecord_FieldIndex.RecordType:
                    return typeof(RecordType);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static readonly RecordType ACTI_HEADER = new RecordType("ACTI");
        public static readonly RecordType PACK_HEADER = new RecordType("PACK");
        public static readonly RecordType APPA_HEADER = new RecordType("APPA");
        public static readonly RecordType ANIO_HEADER = new RecordType("ANIO");
        public static readonly RecordType BSGN_HEADER = new RecordType("BSGN");
        public static readonly RecordType BOOK_HEADER = new RecordType("BOOK");
        public static readonly RecordType CLAS_HEADER = new RecordType("CLAS");
        public static readonly RecordType CLMT_HEADER = new RecordType("CLMT");
        public static readonly RecordType FULL_HEADER = new RecordType("FULL");
        public static readonly RecordType SCRI_HEADER = new RecordType("SCRI");
        public static readonly RecordType ENAM_HEADER = new RecordType("ENAM");
        public static readonly RecordType ANAM_HEADER = new RecordType("ANAM");
        public static readonly RecordType BMDT_HEADER = new RecordType("BMDT");
        public static readonly RecordType CSTY_HEADER = new RecordType("CSTY");
        public static readonly RecordType CONT_HEADER = new RecordType("CONT");
        public static readonly RecordType CREA_HEADER = new RecordType("CREA");
        public static readonly RecordType DIAL_HEADER = new RecordType("DIAL");
        public static readonly RecordType INFO_HEADER = new RecordType("INFO");
        public static readonly RecordType DOOR_HEADER = new RecordType("DOOR");
        public static readonly RecordType EFSH_HEADER = new RecordType("EFSH");
        public static readonly RecordType ENCH_HEADER = new RecordType("ENCH");
        public static readonly RecordType EYES_HEADER = new RecordType("EYES");
        public static readonly RecordType FACT_HEADER = new RecordType("FACT");
        public static readonly RecordType FLOR_HEADER = new RecordType("FLOR");
        public static readonly RecordType FURN_HEADER = new RecordType("FURN");
        public static readonly RecordType GMST_HEADER = new RecordType("GMST");
        public static readonly RecordType GLOB_HEADER = new RecordType("GLOB");
        public static readonly RecordType GRAS_HEADER = new RecordType("GRAS");
        public static readonly RecordType HAIR_HEADER = new RecordType("HAIR");
        public static readonly RecordType IDLE_HEADER = new RecordType("IDLE");
        public static readonly RecordType INGR_HEADER = new RecordType("INGR");
        public static readonly RecordType KEYM_HEADER = new RecordType("KEYM");
        public static readonly RecordType LTEX_HEADER = new RecordType("LTEX");
        public static readonly RecordType LVLI_HEADER = new RecordType("LVLI");
        public static readonly RecordType LVSP_HEADER = new RecordType("LVSP");
        public static readonly RecordType LIGH_HEADER = new RecordType("LIGH");
        public static readonly RecordType LSCR_HEADER = new RecordType("LSCR");
        public static readonly RecordType MGEF_HEADER = new RecordType("MGEF");
        public static readonly RecordType MISC_HEADER = new RecordType("MISC");
        public static readonly RecordType NPC__HEADER = new RecordType("NPC_");
        public static readonly RecordType ALCH_HEADER = new RecordType("ALCH");
        public static readonly RecordType QUST_HEADER = new RecordType("QUST");
        public static readonly RecordType RACE_HEADER = new RecordType("RACE");
        public static readonly RecordType REGN_HEADER = new RecordType("REGN");
        public static readonly RecordType ROAD_HEADER = new RecordType("ROAD");
        public static readonly RecordType SCPT_HEADER = new RecordType("SCPT");
        public static readonly RecordType SGST_HEADER = new RecordType("SGST");
        public static readonly RecordType SKIL_HEADER = new RecordType("SKIL");
        public static readonly RecordType SLGM_HEADER = new RecordType("SLGM");
        public static readonly RecordType SOUN_HEADER = new RecordType("SOUN");
        public static readonly RecordType STAT_HEADER = new RecordType("STAT");
        public static readonly RecordType SBSP_HEADER = new RecordType("SBSP");
        public static readonly RecordType TREE_HEADER = new RecordType("TREE");
        public static readonly RecordType WATR_HEADER = new RecordType("WATR");
        public static readonly RecordType WEAP_HEADER = new RecordType("WEAP");
        public static readonly RecordType WTHR_HEADER = new RecordType("WTHR");
        public static readonly RecordType ARMO_HEADER = new RecordType("ARMO");
        public static readonly RecordType CLOT_HEADER = new RecordType("CLOT");
        public static readonly RecordType AMMO_HEADER = new RecordType("AMMO");
        public static readonly RecordType LVLC_HEADER = new RecordType("LVLC");
        public static readonly RecordType CELL_HEADER = new RecordType("CELL");
        public static readonly RecordType WRLD_HEADER = new RecordType("WRLD");
        public static readonly RecordType LAND_HEADER = new RecordType("LAND");
        public static readonly RecordType PGRD_HEADER = new RecordType("PGRD");
        public static readonly RecordType ACRE_HEADER = new RecordType("ACRE");
        public static readonly RecordType ACHR_HEADER = new RecordType("ACHR");
        public static readonly RecordType REFR_HEADER = new RecordType("REFR");
        public static readonly RecordType SPEL_HEADER = new RecordType("SPEL");
        public static readonly RecordType EDID_HEADER = new RecordType("EDID");
        public static ICollectionGetter<RecordType> TriggeringRecordTypes => _TriggeringRecordTypes.Value;
        private static readonly Lazy<ICollectionGetter<RecordType>> _TriggeringRecordTypes = new Lazy<ICollectionGetter<RecordType>>(() =>
        {
            return new CollectionGetterWrapper<RecordType>(
                new HashSet<RecordType>(
                    new RecordType[]
                    {
                        ACTI_HEADER,
                        PACK_HEADER,
                        APPA_HEADER,
                        ANIO_HEADER,
                        BSGN_HEADER,
                        BOOK_HEADER,
                        CLAS_HEADER,
                        CLMT_HEADER,
                        FULL_HEADER,
                        SCRI_HEADER,
                        ENAM_HEADER,
                        ANAM_HEADER,
                        BMDT_HEADER,
                        CSTY_HEADER,
                        CONT_HEADER,
                        CREA_HEADER,
                        DIAL_HEADER,
                        INFO_HEADER,
                        DOOR_HEADER,
                        EFSH_HEADER,
                        ENCH_HEADER,
                        EYES_HEADER,
                        FACT_HEADER,
                        FLOR_HEADER,
                        FURN_HEADER,
                        GMST_HEADER,
                        GLOB_HEADER,
                        GRAS_HEADER,
                        HAIR_HEADER,
                        IDLE_HEADER,
                        INGR_HEADER,
                        KEYM_HEADER,
                        LTEX_HEADER,
                        LVLI_HEADER,
                        LVSP_HEADER,
                        LIGH_HEADER,
                        LSCR_HEADER,
                        MGEF_HEADER,
                        MISC_HEADER,
                        NPC__HEADER,
                        ALCH_HEADER,
                        QUST_HEADER,
                        RACE_HEADER,
                        REGN_HEADER,
                        ROAD_HEADER,
                        SCPT_HEADER,
                        SGST_HEADER,
                        SKIL_HEADER,
                        SLGM_HEADER,
                        SOUN_HEADER,
                        STAT_HEADER,
                        SBSP_HEADER,
                        TREE_HEADER,
                        WATR_HEADER,
                        WEAP_HEADER,
                        WTHR_HEADER,
                        ARMO_HEADER,
                        CLOT_HEADER,
                        AMMO_HEADER,
                        LVLC_HEADER,
                        CELL_HEADER,
                        WRLD_HEADER,
                        LAND_HEADER,
                        PGRD_HEADER,
                        ACRE_HEADER,
                        ACHR_HEADER,
                        REFR_HEADER,
                        SPEL_HEADER
                    })
            );
        });
        public const int NumStructFields = 4;
        public const int NumTypedFields = 1;
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class MajorRecordCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            IMajorRecordGetter def,
            ErrorMaskBuilder errorMask,
            MajorRecord_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.MajorRecordFlags ?? true)
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.MajorRecordFlags);
                try
                {
                    item.MajorRecordFlags_Property.Set(
                        value: rhs.MajorRecordFlags,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Version ?? true)
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.Version);
                try
                {
                    item.Version_Property.Set(
                        value: rhs.Version,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.EditorID ?? true)
            {
                errorMask?.PushIndex((int)MajorRecord_FieldIndex.EditorID);
                try
                {
                    item.EditorID_Property.SetToWithDefault(
                        rhs: rhs.EditorID_Property,
                        def: def?.EditorID_Property);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IMajorRecord obj,
            NotifyingFireParameters cmds = null)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                case MajorRecord_FieldIndex.EditorID:
                    obj.EditorID_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IMajorRecord obj,
            NotifyingUnsetParameters cmds = null)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.RecordType:
                    throw new ArgumentException($"Tried to unset at a derivative index {index}");
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    obj.MajorRecordFlags = default(MajorRecord.MajorRecordFlag);
                    break;
                case MajorRecord_FieldIndex.FormID:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case MajorRecord_FieldIndex.Version:
                    obj.Version = default(UInt32);
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    obj.EditorID_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IMajorRecord obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                case MajorRecord_FieldIndex.FormID:
                case MajorRecord_FieldIndex.Version:
                case MajorRecord_FieldIndex.RecordType:
                    return true;
                case MajorRecord_FieldIndex.EditorID:
                    return obj.EditorID_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IMajorRecordGetter obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return obj.MajorRecordFlags;
                case MajorRecord_FieldIndex.FormID:
                    return obj.FormID;
                case MajorRecord_FieldIndex.Version:
                    return obj.Version;
                case MajorRecord_FieldIndex.EditorID:
                    return obj.EditorID;
                case MajorRecord_FieldIndex.RecordType:
                    return obj.RecordType;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IMajorRecord item,
            NotifyingUnsetParameters cmds = null)
        {
            item.MajorRecordFlags = default(MajorRecord.MajorRecordFlag);
            item.Version = default(UInt32);
            item.EditorID_Property.Unset(cmds.ToUnsetParams());
        }

        public static MajorRecord_Mask<bool> GetEqualsMask(
            this IMajorRecordGetter item,
            IMajorRecordGetter rhs)
        {
            var ret = new MajorRecord_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IMajorRecordGetter item,
            IMajorRecordGetter rhs,
            MajorRecord_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.MajorRecordFlags = item.MajorRecordFlags == rhs.MajorRecordFlags;
            ret.FormID = item.FormID == rhs.FormID;
            ret.Version = item.Version == rhs.Version;
            ret.EditorID = item.EditorID_Property.Equals(rhs.EditorID_Property, (l, r) => object.Equals(l, r));
            ret.RecordType = object.Equals(item.RecordType, rhs.RecordType);
        }

        public static string ToString(
            this IMajorRecordGetter item,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IMajorRecordGetter item,
            FileGeneration fg,
            string name = null,
            MajorRecord_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(MajorRecord)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(MajorRecord)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MajorRecordFlags ?? true)
                {
                    fg.AppendLine($"MajorRecordFlags => {item.MajorRecordFlags}");
                }
                if (printMask?.FormID ?? true)
                {
                    fg.AppendLine($"FormID => {item.FormID}");
                }
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {item.Version}");
                }
                if (printMask?.EditorID ?? true)
                {
                    fg.AppendLine($"EditorID => {item.EditorID}");
                }
                if (printMask?.RecordType ?? true)
                {
                    fg.AppendLine($"RecordType => {item.RecordType}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IMajorRecordGetter item,
            MajorRecord_Mask<bool?> checkMask)
        {
            if (checkMask.EditorID.HasValue && checkMask.EditorID.Value != item.EditorID_Property.HasBeenSet) return false;
            return true;
        }

        public static MajorRecord_Mask<bool> GetHasBeenSetMask(IMajorRecordGetter item)
        {
            var ret = new MajorRecord_Mask<bool>();
            ret.MajorRecordFlags = true;
            ret.FormID = true;
            ret.Version = true;
            ret.EditorID = item.EditorID_Property.HasBeenSet;
            ret.RecordType = true;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            MajorRecord item,
            bool doMasks,
            out MajorRecord_ErrorMask errorMask,
            MajorRecord_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            MajorRecord item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Mutagen.Bethesda.MajorRecord");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Mutagen.Bethesda.MajorRecord");
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.MajorRecordFlags) ?? true))
            {
                EnumXmlTranslation<MajorRecord.MajorRecordFlag>.Instance.Write(
                    node: elem,
                    name: nameof(item.MajorRecordFlags),
                    item: item.MajorRecordFlags_Property,
                    fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.FormID) ?? true))
            {
                FormIDXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.FormID),
                    item: item.FormID,
                    fieldIndex: (int)MajorRecord_FieldIndex.FormID,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.Version) ?? true))
            {
                UInt32XmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Version),
                    item: item.Version_Property,
                    fieldIndex: (int)MajorRecord_FieldIndex.Version,
                    errorMask: errorMask);
            }
            if (item.EditorID_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)MajorRecord_FieldIndex.EditorID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.EditorID),
                    item: item.EditorID_Property,
                    fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                    errorMask: errorMask);
            }
        }
        #endregion

        #endregion

        #region Binary Translation
        #region Binary Write
        public static void Write_Binary(
            MutagenWriter writer,
            MajorRecord item,
            RecordTypeConverter recordTypeConverter,
            bool doMasks,
            out MajorRecord_ErrorMask errorMask)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Binary(
                writer: writer,
                item: item,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMaskBuilder);
            errorMask = MajorRecord_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Binary(
            MutagenWriter writer,
            MajorRecord item,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Write_Binary_Embedded(
                item: item,
                writer: writer,
                errorMask: errorMask);
            Write_Binary_RecordTypes(
                item: item,
                writer: writer,
                recordTypeConverter: recordTypeConverter,
                errorMask: errorMask);
        }
        #endregion

        public static void Write_Binary_Embedded(
            MajorRecord item,
            MutagenWriter writer,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.EnumBinaryTranslation<MajorRecord.MajorRecordFlag>.Instance.Write(
                writer,
                item.MajorRecordFlags_Property,
                length: 4,
                fieldIndex: (int)MajorRecord_FieldIndex.MajorRecordFlags,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.FormIDBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FormID,
                fieldIndex: (int)MajorRecord_FieldIndex.FormID,
                errorMask: errorMask);
            Mutagen.Bethesda.Binary.UInt32BinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Version_Property,
                fieldIndex: (int)MajorRecord_FieldIndex.Version,
                errorMask: errorMask);
        }

        public static void Write_Binary_RecordTypes(
            MajorRecord item,
            MutagenWriter writer,
            RecordTypeConverter recordTypeConverter,
            ErrorMaskBuilder errorMask)
        {
            Mutagen.Bethesda.Binary.StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.EditorID_Property,
                fieldIndex: (int)MajorRecord_FieldIndex.EditorID,
                errorMask: errorMask,
                header: recordTypeConverter.ConvertToCustom(MajorRecord_Registration.EDID_HEADER),
                nullable: false);
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class MajorRecord_Mask<T> : IMask<T>, IEquatable<MajorRecord_Mask<T>>
    {
        #region Ctors
        public MajorRecord_Mask()
        {
        }

        public MajorRecord_Mask(T initialValue)
        {
            this.MajorRecordFlags = initialValue;
            this.FormID = initialValue;
            this.Version = initialValue;
            this.EditorID = initialValue;
            this.RecordType = initialValue;
        }
        #endregion

        #region Members
        public T MajorRecordFlags;
        public T FormID;
        public T Version;
        public T EditorID;
        public T RecordType;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is MajorRecord_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(MajorRecord_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.MajorRecordFlags, rhs.MajorRecordFlags)) return false;
            if (!object.Equals(this.FormID, rhs.FormID)) return false;
            if (!object.Equals(this.Version, rhs.Version)) return false;
            if (!object.Equals(this.EditorID, rhs.EditorID)) return false;
            if (!object.Equals(this.RecordType, rhs.RecordType)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.MajorRecordFlags?.GetHashCode());
            ret = ret.CombineHashCode(this.FormID?.GetHashCode());
            ret = ret.CombineHashCode(this.Version?.GetHashCode());
            ret = ret.CombineHashCode(this.EditorID?.GetHashCode());
            ret = ret.CombineHashCode(this.RecordType?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.MajorRecordFlags)) return false;
            if (!eval(this.FormID)) return false;
            if (!eval(this.Version)) return false;
            if (!eval(this.EditorID)) return false;
            if (!eval(this.RecordType)) return false;
            return true;
        }
        #endregion

        #region Translate
        public MajorRecord_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new MajorRecord_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(MajorRecord_Mask<R> obj, Func<T, R> eval)
        {
            obj.MajorRecordFlags = eval(this.MajorRecordFlags);
            obj.FormID = eval(this.FormID);
            obj.Version = eval(this.Version);
            obj.EditorID = eval(this.EditorID);
            obj.RecordType = eval(this.RecordType);
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(MajorRecord_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, MajorRecord_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(MajorRecord_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.MajorRecordFlags ?? true)
                {
                    fg.AppendLine($"MajorRecordFlags => {MajorRecordFlags}");
                }
                if (printMask?.FormID ?? true)
                {
                    fg.AppendLine($"FormID => {FormID}");
                }
                if (printMask?.Version ?? true)
                {
                    fg.AppendLine($"Version => {Version}");
                }
                if (printMask?.EditorID ?? true)
                {
                    fg.AppendLine($"EditorID => {EditorID}");
                }
                if (printMask?.RecordType ?? true)
                {
                    fg.AppendLine($"RecordType => {RecordType}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class MajorRecord_ErrorMask : IErrorMask, IErrorMask<MajorRecord_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception MajorRecordFlags;
        public Exception FormID;
        public Exception Version;
        public Exception EditorID;
        public object RecordType;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    return MajorRecordFlags;
                case MajorRecord_FieldIndex.FormID:
                    return FormID;
                case MajorRecord_FieldIndex.Version:
                    return Version;
                case MajorRecord_FieldIndex.EditorID:
                    return EditorID;
                case MajorRecord_FieldIndex.RecordType:
                    return RecordType;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    this.MajorRecordFlags = ex;
                    break;
                case MajorRecord_FieldIndex.FormID:
                    this.FormID = ex;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = ex;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = ex;
                    break;
                case MajorRecord_FieldIndex.RecordType:
                    this.RecordType = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            MajorRecord_FieldIndex enu = (MajorRecord_FieldIndex)index;
            switch (enu)
            {
                case MajorRecord_FieldIndex.MajorRecordFlags:
                    this.MajorRecordFlags = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.FormID:
                    this.FormID = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.Version:
                    this.Version = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.EditorID:
                    this.EditorID = (Exception)obj;
                    break;
                case MajorRecord_FieldIndex.RecordType:
                    this.RecordType = obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (MajorRecordFlags != null) return true;
            if (FormID != null) return true;
            if (Version != null) return true;
            if (EditorID != null) return true;
            if (RecordType != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("MajorRecord_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"MajorRecordFlags => {MajorRecordFlags}");
            fg.AppendLine($"FormID => {FormID}");
            fg.AppendLine($"Version => {Version}");
            fg.AppendLine($"EditorID => {EditorID}");
            fg.AppendLine($"RecordType => {RecordType}");
        }
        #endregion

        #region Combine
        public MajorRecord_ErrorMask Combine(MajorRecord_ErrorMask rhs)
        {
            var ret = new MajorRecord_ErrorMask();
            ret.MajorRecordFlags = this.MajorRecordFlags.Combine(rhs.MajorRecordFlags);
            ret.FormID = this.FormID.Combine(rhs.FormID);
            ret.Version = this.Version.Combine(rhs.Version);
            ret.EditorID = this.EditorID.Combine(rhs.EditorID);
            ret.RecordType = this.RecordType ?? rhs.RecordType;
            return ret;
        }
        public static MajorRecord_ErrorMask Combine(MajorRecord_ErrorMask lhs, MajorRecord_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static MajorRecord_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new MajorRecord_ErrorMask();
        }
        #endregion

    }
    public class MajorRecord_CopyMask
    {
        #region Members
        public bool MajorRecordFlags;
        public bool FormID;
        public bool Version;
        public bool EditorID;
        public bool RecordType;
        #endregion

    }
    public class MajorRecord_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool MajorRecordFlags;
        public bool FormID;
        public bool Version;
        public bool EditorID;
        public bool RecordType;
        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((MajorRecordFlags, null));
            ret.Add((FormID, null));
            ret.Add((Version, null));
            ret.Add((EditorID, null));
            ret.Add((RecordType, null));
        }
    }
    #endregion

    #endregion

}
